[{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(chromeless)/layout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(chromeless)/profile/activity/ActivityLogClient.tsx","messages":[],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchActivities'. Either include it or remove the dependency array.","line":50,"column":6,"nodeType":"ArrayExpression","endLine":50,"endColumn":14,"suggestions":[{"desc":"Update the dependencies array to be: [fetchActivities, filter]","fix":{"range":[1758,1766],"text":"[fetchActivities, filter]"}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(chromeless)/profile/emergency/EmergencyContactsClient.tsx","messages":[],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchContacts'. Either include it or remove the dependency array.","line":33,"column":6,"nodeType":"ArrayExpression","endLine":33,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [fetchContacts]","fix":{"range":[1138,1140],"text":"[fetchContacts]"}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(chromeless)/profile/endorsements/EndorsementsClient.tsx","messages":[],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchEndorsements'. Either include it or remove the dependency array.","line":50,"column":6,"nodeType":"ArrayExpression","endLine":50,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [fetchEndorsements]","fix":{"range":[1692,1694],"text":"[fetchEndorsements]"}}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@next/next/no-img-element","severity":1,"message":"Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` or a custom image loader to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","line":298,"column":27,"nodeType":"JSXOpeningElement","endLine":302,"endColumn":29,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(chromeless)/profile/health/HealthInfoClient.tsx","messages":[],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchHealthInfo'. Either include it or remove the dependency array.","line":54,"column":6,"nodeType":"ArrayExpression","endLine":54,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [fetchHealthInfo]","fix":{"range":[1674,1676],"text":"[fetchHealthInfo]"}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(chromeless)/profile/performance/PerformanceReviewsClient.tsx","messages":[],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchReviews'. Either include it or remove the dependency array.","line":50,"column":6,"nodeType":"ArrayExpression","endLine":50,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [fetchReviews]","fix":{"range":[1464,1466],"text":"[fetchReviews]"}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(chromeless)/profile/travel/TravelPreferencesClient.tsx","messages":[],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchPreferences'. Either include it or remove the dependency array.","line":55,"column":6,"nodeType":"ArrayExpression","endLine":55,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [fetchPreferences]","fix":{"range":[1793,1795],"text":"[fetchPreferences]"}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(chromeless)/profile/uniform/UniformSizingClient.tsx","messages":[],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchSizing'. Either include it or remove the dependency array.","line":41,"column":6,"nodeType":"ArrayExpression","endLine":41,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [fetchSizing]","fix":{"range":[1202,1204],"text":"[fetchSizing]"}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/analytics/AnalyticsClient.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/analytics/[id]/AnalyticsDetailClient.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/analytics/[id]/edit/AnalyticsEditClient.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/analytics/[id]/edit/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/analytics/[id]/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/analytics/create/AnalyticsCreateClient.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/analytics/create/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/analytics/dashboards/CreateDashboardClient.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/analytics/dashboards/DashboardsClient.tsx","messages":[],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadDashboards'. Either include it or remove the dependency array.","line":56,"column":6,"nodeType":"ArrayExpression","endLine":56,"endColumn":22,"suggestions":[{"desc":"Update the dependencies array to be: [loadDashboards, organizationId]","fix":{"range":[1878,1894],"text":"[loadDashboards, organizationId]"}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/analytics/dashboards/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/analytics/drawers/BulkDrawer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/analytics/drawers/CreateDrawer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/analytics/drawers/DetailDrawer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/analytics/drawers/EditDrawer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/analytics/drawers/ExportDrawer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/analytics/drawers/HistoryDrawer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/analytics/drawers/ImportDrawer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/analytics/error.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/analytics/exports/CreateExportClient.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/analytics/exports/ExportsClient.tsx","messages":[],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadExportData'. Either include it or remove the dependency array.","line":67,"column":6,"nodeType":"ArrayExpression","endLine":67,"endColumn":22,"suggestions":[{"desc":"Update the dependencies array to be: [loadExportData, organizationId]","fix":{"range":[2167,2183],"text":"[loadExportData, organizationId]"}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/analytics/exports/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/analytics/lib/analytics-service.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/analytics/lib/api.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/analytics/lib/export.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/analytics/lib/import.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/analytics/lib/mutations.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/analytics/lib/permissions.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/analytics/lib/queries.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/analytics/lib/realtime.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/analytics/lib/validations.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/analytics/loading.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/analytics/metadata.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/analytics/not-found.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/analytics/overview/OverviewClient.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/analytics/overview/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/analytics/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/analytics/reports/CreateReportClient.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/analytics/reports/ReportsClient.tsx","messages":[],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadReports'. Either include it or remove the dependency array.","line":70,"column":6,"nodeType":"ArrayExpression","endLine":70,"endColumn":22,"suggestions":[{"desc":"Update the dependencies array to be: [loadReports, organizationId]","fix":{"range":[2252,2268],"text":"[loadReports, organizationId]"}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/analytics/reports/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/analytics/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/analytics/views/CalendarView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/analytics/views/CardView.tsx","messages":[],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'setSelectedCards'. Either include it or remove the dependency array.","line":51,"column":6,"nodeType":"ArrayExpression","endLine":51,"endColumn":40,"suggestions":[{"desc":"Update the dependencies array to be: [selectedCards, setSelectedCards, onSelectionChange]","fix":{"range":[1370,1404],"text":"[selectedCards, setSelectedCards, onSelectionChange]"}}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'setSelectedCards'. Either include it or remove the dependency array.","line":64,"column":6,"nodeType":"ArrayExpression","endLine":64,"endColumn":31,"suggestions":[{"desc":"Update the dependencies array to be: [data, onSelectionChange, setSelectedCards]","fix":{"range":[1819,1844],"text":"[data, onSelectionChange, setSelectedCards]"}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/analytics/views/ChartView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/analytics/views/FormView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/analytics/views/GalleryView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/analytics/views/KanbanView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/analytics/views/ListView.tsx","messages":[],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'setSelectedItems'. Either include it or remove the dependency array.","line":56,"column":6,"nodeType":"ArrayExpression","endLine":56,"endColumn":40,"suggestions":[{"desc":"Update the dependencies array to be: [selectedItems, setSelectedItems, onSelectionChange]","fix":{"range":[1404,1438],"text":"[selectedItems, setSelectedItems, onSelectionChange]"}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/analytics/views/TableView.tsx","messages":[],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'setSelectedRows'. Either include it or remove the dependency array.","line":63,"column":6,"nodeType":"ArrayExpression","endLine":63,"endColumn":39,"suggestions":[{"desc":"Update the dependencies array to be: [selectedRows, setSelectedRows, onSelectionChange]","fix":{"range":[1802,1835],"text":"[selectedRows, setSelectedRows, onSelectionChange]"}}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'setSelectedRows'. Either include it or remove the dependency array.","line":77,"column":6,"nodeType":"ArrayExpression","endLine":77,"endColumn":31,"suggestions":[{"desc":"Update the dependencies array to be: [data, onSelectionChange, setSelectedRows]","fix":{"range":[2269,2294],"text":"[data, onSelectionChange, setSelectedRows]"}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/analytics/views/TimelineView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/analytics/views/ViewSwitcher.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/assets/AssetsClient.tsx","messages":[],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadData'. Either include it or remove the dependency array.","line":65,"column":6,"nodeType":"ArrayExpression","endLine":65,"endColumn":13,"suggestions":[{"desc":"Update the dependencies array to be: [loadData, orgId]","fix":{"range":[2433,2440],"text":"[loadData, orgId]"}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/assets/[id]/AssetDetailClient.tsx","messages":[],"suppressedMessages":[{"ruleId":"@next/next/no-img-element","severity":1,"message":"Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` or a custom image loader to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","line":133,"column":21,"nodeType":"JSXOpeningElement","endLine":137,"endColumn":23,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@next/next/no-img-element","severity":1,"message":"Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` or a custom image loader to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","line":246,"column":29,"nodeType":"JSXOpeningElement","endLine":250,"endColumn":31,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@next/next/no-img-element","severity":1,"message":"Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` or a custom image loader to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","line":304,"column":25,"nodeType":"JSXOpeningElement","endLine":308,"endColumn":27,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/assets/[id]/edit/EditAssetClient.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/assets/[id]/edit/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/assets/[id]/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/assets/advancing/AdvancingClient.tsx","messages":[],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadItems'. Either include it or remove the dependency array.","line":76,"column":6,"nodeType":"ArrayExpression","endLine":76,"endColumn":13,"suggestions":[{"desc":"Update the dependencies array to be: [loadItems, orgId]","fix":{"range":[3119,3126],"text":"[loadItems, orgId]"}}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'filterItems'. Either include it or remove the dependency array.","line":82,"column":6,"nodeType":"ArrayExpression","endLine":82,"endColumn":74,"suggestions":[{"desc":"Update the dependencies array to be: [filterItems, items, searchQuery, selectedCategory, selectedStatus, selectedType]","fix":{"range":[3290,3358],"text":"[filterItems, items, searchQuery, selectedCategory, selectedStatus, selectedType]"}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/assets/advancing/CreateAdvancingClient.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/assets/advancing/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/assets/assignments/AssignmentsClient.tsx","messages":[],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadAssignments'. Either include it or remove the dependency array.","line":52,"column":6,"nodeType":"ArrayExpression","endLine":52,"endColumn":13,"suggestions":[{"desc":"Update the dependencies array to be: [loadAssignments, orgId]","fix":{"range":[1941,1948],"text":"[loadAssignments, orgId]"}}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'filterAssignments'. Either include it or remove the dependency array.","line":58,"column":6,"nodeType":"ArrayExpression","endLine":58,"endColumn":62,"suggestions":[{"desc":"Update the dependencies array to be: [assignments, filterAssignments, searchQuery, selectedStatus, selectedType]","fix":{"range":[2118,2174],"text":"[assignments, filterAssignments, searchQuery, selectedStatus, selectedType]"}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/assets/assignments/CreateAssignmentClient.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/assets/assignments/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/assets/create/CreateAssetClient.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/assets/create/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/assets/drawers/CreateDrawer.tsx","messages":[],"suppressedMessages":[{"ruleId":"@next/next/no-img-element","severity":1,"message":"Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` or a custom image loader to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","line":468,"column":27,"nodeType":"JSXOpeningElement","endLine":471,"endColumn":29,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/assets/drawers/DetailDrawer.tsx","messages":[],"suppressedMessages":[{"ruleId":"@next/next/no-img-element","severity":1,"message":"Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` or a custom image loader to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","line":390,"column":25,"nodeType":"JSXOpeningElement","endLine":393,"endColumn":27,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/assets/hooks/useAssetsOverview.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/assets/inventory/CreateAssetClient.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/assets/inventory/InventoryClient.tsx","messages":[],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadAssets'. Either include it or remove the dependency array.","line":70,"column":6,"nodeType":"ArrayExpression","endLine":70,"endColumn":13,"suggestions":[{"desc":"Update the dependencies array to be: [loadAssets, orgId]","fix":{"range":[2864,2871],"text":"[loadAssets, orgId]"}}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'filterAssets'. Either include it or remove the dependency array.","line":76,"column":6,"nodeType":"ArrayExpression","endLine":76,"endColumn":61,"suggestions":[{"desc":"Update the dependencies array to be: [assets, filterAssets, searchQuery, selectedCategory, selectedStatus]","fix":{"range":[3036,3091],"text":"[assets, filterAssets, searchQuery, selectedCategory, selectedStatus]"}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/assets/inventory/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/assets/lib/api.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/assets/lib/assets-service.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/assets/lib/export.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/assets/lib/import.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/assets/lib/mutations.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/assets/lib/permissions.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/assets/lib/queries.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/assets/lib/realtime.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/assets/lib/validations.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/assets/maintenance/CreateMaintenanceClient.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/assets/maintenance/MaintenanceClient.tsx","messages":[],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadRecords'. Either include it or remove the dependency array.","line":58,"column":6,"nodeType":"ArrayExpression","endLine":58,"endColumn":13,"suggestions":[{"desc":"Update the dependencies array to be: [loadRecords, orgId]","fix":{"range":[2128,2135],"text":"[loadRecords, orgId]"}}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'filterRecords'. Either include it or remove the dependency array.","line":64,"column":6,"nodeType":"ArrayExpression","endLine":64,"endColumn":76,"suggestions":[{"desc":"Update the dependencies array to be: [records, searchQuery, selectedType, selectedStatus, selectedPriority, filterRecords]","fix":{"range":[2301,2371],"text":"[records, searchQuery, selectedType, selectedStatus, selectedPriority, filterRecords]"}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/assets/maintenance/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/assets/overview/OverviewClient.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/assets/overview/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/assets/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/assets/reports/CreateReportClient.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/assets/reports/ReportsClient.tsx","messages":[],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadReports'. Either include it or remove the dependency array.","line":70,"column":6,"nodeType":"ArrayExpression","endLine":70,"endColumn":13,"suggestions":[{"desc":"Update the dependencies array to be: [loadReports, orgId]","fix":{"range":[2867,2874],"text":"[loadReports, orgId]"}}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'filterReports'. Either include it or remove the dependency array.","line":76,"column":6,"nodeType":"ArrayExpression","endLine":76,"endColumn":58,"suggestions":[{"desc":"Update the dependencies array to be: [reports, searchQuery, selectedType, selectedStatus, filterReports]","fix":{"range":[3040,3092],"text":"[reports, searchQuery, selectedType, selectedStatus, filterReports]"}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/assets/reports/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/assets/tracking/CreateTrackingClient.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/assets/tracking/TrackingClient.tsx","messages":[],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadTrackingData'. Either include it or remove the dependency array.","line":55,"column":6,"nodeType":"ArrayExpression","endLine":55,"endColumn":13,"suggestions":[{"desc":"Update the dependencies array to be: [loadTrackingData, orgId]","fix":{"range":[1926,1933],"text":"[loadTrackingData, orgId]"}}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'filterData'. Either include it or remove the dependency array.","line":61,"column":6,"nodeType":"ArrayExpression","endLine":61,"endColumn":65,"suggestions":[{"desc":"Update the dependencies array to be: [trackingData, searchQuery, selectedStatus, selectedMethod, filterData]","fix":{"range":[2096,2155],"text":"[trackingData, searchQuery, selectedStatus, selectedMethod, filterData]"}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/assets/tracking/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/assets/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/assets/views/AssetsChartView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/assets/views/AssetsTimelineView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/assets/views/CalendarView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/assets/views/CardView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/assets/views/KanbanView.tsx","messages":[{"ruleId":"@next/next/no-img-element","severity":1,"message":"Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` or a custom image loader to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","line":367,"column":17,"nodeType":"JSXOpeningElement","endLine":371,"endColumn":19}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\n/**\n * Assets Kanban View\n *\n * Enterprise-grade kanban board view for asset management.\n * Features drag-and-drop functionality, swimlanes, WIP limits,\n * card customization, and workflow management.\n *\n * @module assets/views/KanbanView\n */\n\nimport React, { useState, useCallback, useMemo } from 'react';\nimport { Asset, AssetViewState } from '../types';\nimport { apiClient } from '../lib/api';\nimport { subscribeToAssets, unsubscribe, type AssetChangePayload } from '../lib/realtime';\nimport {\n  Badge,\n  Button,\n  Card,\n  CardContent,\n  CardHeader,\n  CardTitle,\n  Checkbox\n} from \"@ghxstship/ui\";\nimport { Button } from '@ghxstship/ui';\nimport { Badge } from '@ghxstship/ui';\nimport { Checkbox } from '@ghxstship/ui';\nimport { Dropdown, type DropdownItem } from '@ghxstship/ui';\nimport {\n  MoreHorizontal,\n  Edit,\n  Eye,\n  Trash2,\n  Copy,\n  Download,\n  Plus,\n  User,\n  MapPin,\n  Clock,\n  AlertTriangle,\n  CheckCircle,\n  Package\n} from 'lucide-react';\n\ninterface KanbanViewProps {\n  viewState: AssetViewState;\n  onViewStateChange: (newState: Partial<AssetViewState>) => void;\n  onAssetSelect?: (asset: Asset, selected: boolean) => void;\n  onAssetAction?: (action: string, asset: Asset) => void;\n  className?: string;\n}\n\ntype AssetRecord = Asset & {\n  assignedToUser?: { name: string; avatar?: string; email?: string };\n  locationInfo?: { name: string };\n  supplierInfo?: { name: string };\n  warrantyExpiry?: Date | null;\n};\n\ninterface KanbanColumn {\n  id: string;\n  title: string;\n  status: string;\n  assets: AssetRecord[];\n  wipLimit?: number;\n  color: string;\n}\n\ninterface KanbanCard {\n  asset: AssetRecord;\n  isSelected: boolean;\n  isDragging: boolean;\n}\n\nconst KANBAN_COLUMNS: KanbanColumn[] = [\n  {\n    id: 'available',\n    title: 'Available',\n    status: 'available',\n    assets: [],\n    color: 'bg-green-50 border-green-200'\n  },\n  {\n    id: 'in_use',\n    title: 'In Use',\n    status: 'in_use',\n    assets: [],\n    wipLimit: 20,\n    color: 'bg-blue-50 border-blue-200'\n  },\n  {\n    id: 'maintenance',\n    title: 'Maintenance',\n    status: 'maintenance',\n    assets: [],\n    wipLimit: 5,\n    color: 'bg-yellow-50 border-yellow-200'\n  },\n  {\n    id: 'retired',\n    title: 'Retired',\n    status: 'retired',\n    assets: [],\n    color: 'bg-gray-50 border-gray-200'\n  }\n];\n\nexport default function KanbanView({\n  viewState,\n  onViewStateChange,\n  onAssetSelect,\n  onAssetAction,\n  className = ''\n}: KanbanViewProps) {\n  const [assets, setAssets] = useState<AssetRecord[]>([]);\n  const [loading, setLoading] = useState(false);\n  const [selectedCards, setSelectedCards] = useState<Set<string>>(new Set());\n  const [draggedAsset, setDraggedAsset] = useState<AssetRecord | null>(null);\n  const [dragOverColumn, setDragOverColumn] = useState<string | null>(null);\n\n  const normalizeAsset = useCallback((record: any): AssetRecord => {\n    const assignedRelation = record?.assigned_to;\n    const locationRelation = record?.location;\n    const supplierRelation = record?.supplier;\n\n    return {\n      ...record,\n      assigned_to:\n        typeof assignedRelation === 'string'\n          ? assignedRelation\n          : assignedRelation?.id ?? record?.assigned_to ?? undefined,\n      assignedToUser:\n        assignedRelation && typeof assignedRelation === 'object'\n          ? {\n              name: assignedRelation.name as string,\n              avatar: assignedRelation.avatar as string | undefined,\n              email: assignedRelation.email as string | undefined\n            }\n          : undefined,\n      locationInfo:\n        locationRelation && typeof locationRelation === 'object'\n          ? { name: locationRelation.name as string }\n          : undefined,\n      supplierInfo:\n        supplierRelation && typeof supplierRelation === 'object'\n          ? { name: supplierRelation.name as string }\n          : undefined,\n      warrantyExpiry: record?.warranty_expiry\n        ? new Date(record.warranty_expiry as string | number | Date)\n        : undefined\n    } as AssetRecord;\n  }, []);\n\n  // Fetch assets\n  const fetchAssets = useCallback(async () => {\n    setLoading(true);\n    try {\n      const response = await apiClient.getAssets(\n        viewState.filters,\n        viewState.sort,\n        { ...viewState.pagination, pageSize: 200 } // Load more for kanban\n      );\n      const enriched = (response.data ?? []).map((item: any) => normalizeAsset(item));\n      setAssets(enriched);\n      onViewStateChange({\n        pagination: {\n          ...viewState.pagination,\n          total: response.pagination.total\n        }\n      });\n    } catch (error) {\n      console.error('Failed to fetch assets:', error);\n    } finally {\n      setLoading(false);\n    }\n  }, [viewState.filters, viewState.sort, viewState.pagination, onViewStateChange, normalizeAsset]);\n\n  // Set up realtime subscription\n  React.useEffect(() => {\n    const channel = subscribeToAssets(\n      'org-id', // Would come from context\n      (payload: AssetChangePayload) => {\n        if (payload.eventType === 'INSERT' && payload.new) {\n          const next = normalizeAsset(payload.new);\n          setAssets(prev => {\n            if (prev.some(asset => asset.id === next.id)) {\n              return prev.map(asset => (asset.id === next.id ? { ...asset, ...next } : asset));\n            }\n            return [next, ...prev];\n          });\n        } else if (payload.eventType === 'UPDATE' && payload.new) {\n          const updated = normalizeAsset(payload.new);\n          setAssets(prev =>\n            prev.map(asset => (asset.id === updated.id ? { ...asset, ...updated } : asset))\n          );\n        } else if (payload.eventType === 'DELETE' && payload.old) {\n          const removed = payload.old as AssetRecord;\n          setAssets(prev => prev.filter(asset => asset.id !== removed.id));\n        }\n      }\n    );\n\n    return () => {\n      void unsubscribe(channel);\n    };\n  }, [normalizeAsset]);\n\n  // Load data on mount and when filters change\n  React.useEffect(() => {\n    fetchAssets();\n  }, [fetchAssets]);\n\n  // Group assets by status for kanban columns\n  const kanbanData = useMemo(() => {\n    const grouped = assets.reduce((acc, asset) => {\n      const status = asset.status;\n      if (!acc[status]) {\n        acc[status] = [];\n      }\n      acc[status].push(asset);\n      return acc;\n    }, {} as Record<string, AssetRecord[]>);\n\n    return KANBAN_COLUMNS.map(column => ({\n      ...column,\n      assets: grouped[column.status] || []\n    }));\n  }, [assets]);\n\n  const buildDropdownItems = useCallback((asset: AssetRecord): DropdownItem[] => [\n    {\n      id: 'view',\n      label: 'View Details',\n      icon: Eye,\n      onClick: () => onAssetAction?.('view', asset)\n    },\n    {\n      id: 'edit',\n      label: 'Edit Asset',\n      icon: Edit,\n      onClick: () => onAssetAction?.('edit', asset)\n    },\n    {\n      id: 'separator-1',\n      label: 'separator',\n      separator: true\n    },\n    {\n      id: 'duplicate',\n      label: 'Duplicate',\n      icon: Copy,\n      onClick: () => onAssetAction?.('duplicate', asset)\n    },\n    {\n      id: 'export',\n      label: 'Export',\n      icon: Download,\n      onClick: () => onAssetAction?.('export', asset)\n    },\n    {\n      id: 'separator-2',\n      label: 'separator',\n      separator: true\n    },\n    {\n      id: 'delete',\n      label: 'Delete',\n      icon: Trash2,\n      onClick: () => onAssetAction?.('delete', asset)\n    }\n  ], [onAssetAction]);\n\n  // Handle card selection\n  const handleCardSelect = useCallback((assetId: string, selected: boolean) => {\n    setSelectedCards(prev => {\n      const newSet = new Set(prev);\n      if (selected) {\n        newSet.add(assetId);\n      } else {\n        newSet.delete(assetId);\n      }\n      return newSet;\n    });\n    const asset = assets.find(a => a.id === assetId);\n    if (asset) {\n      onAssetSelect?.(asset, selected);\n    }\n  }, [assets, onAssetSelect, setSelectedCards]);\n\n  // Handle drag start\n  const handleDragStart = useCallback((asset: AssetRecord) => {\n    setDraggedAsset(asset);\n  }, []);\n\n  // Handle drag end\n  const handleDragEnd = useCallback(() => {\n    setDraggedAsset(null);\n    setDragOverColumn(null);\n  }, []);\n\n  // Handle drop\n  const handleDrop = useCallback(async (columnId: string) => {\n    if (!draggedAsset || draggedAsset.status === columnId) return;\n\n    try {\n      // Update asset status via API\n      await apiClient.updateAsset(draggedAsset.id, { status: columnId as any });\n\n      // Optimistically update local state\n      setAssets(prev =>\n        prev.map(asset =>\n          asset.id === draggedAsset.id\n            ? { ...asset, status: columnId as any }\n            : asset\n        )\n      );\n\n      onAssetAction?.('status_changed', { ...draggedAsset, status: columnId as any });\n    } catch (error) {\n      console.error('Failed to update asset status:', error);\n      // Revert optimistic update on error\n      setAssets(prev =>\n        prev.map(asset =>\n          asset.id === draggedAsset.id ? draggedAsset : asset\n        )\n      );\n    }\n\n    setDraggedAsset(null);\n    setDragOverColumn(null);\n  }, [draggedAsset, onAssetAction]);\n\n  // Handle drag over\n  const handleDragOver = useCallback((columnId: string) => {\n    setDragOverColumn(columnId);\n  }, []);\n\n  // Render kanban card\n  const renderKanbanCard = (asset: AssetRecord) => {\n    const isSelected = selectedCards.has(asset.id);\n    const isDragging = draggedAsset?.id === asset.id;\n    const assignee = asset.assignedToUser;\n    const location = asset.locationInfo;\n    const warrantyExpiry = asset.warrantyExpiry ?? null;\n\n    return (\n      <Card\n        key={asset.id}\n        className={`mb-3 cursor-pointer transition-all ${\n          isSelected ? 'ring-2 ring-blue-500' : ''\n        } ${isDragging ? 'opacity-50 rotate-2' : ''} hover:shadow-md`}\n        draggable\n        onDragStart={() => handleDragStart(asset)}\n        onDragEnd={handleDragEnd}\n        onClick={() => onAssetAction?.('view', asset)}\n      >\n        <CardHeader className=\"pb-2\">\n          <div className=\"flex items-start justify-between\">\n            <div className=\"flex items-center gap-xs\">\n              <Checkbox\n                checked={isSelected}\n                onChange={(event) => handleCardSelect(asset.id, event.target.checked)}\n                onClick={(event) => event.stopPropagation()}\n              />\n              {asset.image_urls?.[0] ? (\n                <img\n                  src={asset.image_urls[0]}\n                  alt={asset.name}\n                  className=\"w-icon-lg h-icon-lg rounded object-cover bg-gray-100\"\n                />\n              ) : (\n                <div className=\"w-icon-lg h-icon-lg rounded bg-gray-100 flex items-center justify-center\">\n                  <Package className=\"w-icon-xs h-icon-xs text-gray-400\" />\n                </div>\n              )}\n            </div>\n            <div onClick={(event) => event.stopPropagation()}>\n              <Dropdown\n                align=\"end\"\n                trigger={\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    className=\"h-icon-md w-icon-md p-0\"\n                  >\n                    <MoreHorizontal className=\"h-3 w-3\" />\n                  </Button>\n                }\n                items={buildDropdownItems(asset)}\n              />\n            </div>\n          </div>\n        </CardHeader>\n\n        <CardContent className=\"pt-0\">\n          <div className=\"space-y-xs\">\n            <div>\n              <CardTitle className=\"text-sm font-medium line-clamp-xs\">\n                {asset.name}\n              </CardTitle>\n              <div className=\"flex items-center gap-xs mt-1\">\n                <Badge variant=\"secondary\" className=\"font-mono text-xs\">\n                  {asset.asset_tag}\n                </Badge>\n              </div>\n            </div>\n\n            <div className=\"flex items-center justify-between text-xs text-gray-600\">\n              <Badge variant=\"secondary\" className=\"text-xs capitalize\">\n                {asset.category?.replace('_', ' ')}\n              </Badge>\n              <span className={`capitalize ${\n                asset.condition === 'excellent' ? 'text-green-600' :\n                asset.condition === 'good' ? 'text-blue-600' :\n                asset.condition === 'fair' ? 'text-yellow-600' :\n                asset.condition === 'poor' ? 'text-orange-600' :\n                'text-red-600'\n              }`}>\n                {asset.condition?.replace('_', ' ')}\n              </span>\n            </div>\n\n            {assignee?.name && (\n              <div className=\"flex items-center gap-xs text-xs text-gray-600\">\n                <User className=\"w-3 h-3\" />\n                <span className=\"truncate\">\n                  {assignee.name}\n                </span>\n              </div>\n            )}\n\n            {location?.name && (\n              <div className=\"flex items-center gap-xs text-xs text-gray-600\">\n                <MapPin className=\"w-3 h-3\" />\n                <span className=\"truncate\">\n                  {location?.name}\n                </span>\n              </div>\n            )}\n\n            {warrantyExpiry && (\n              <div className=\"flex items-center gap-xs text-xs text-gray-600\">\n                <Clock className=\"w-3 h-3\" />\n                <span>\n                  {warrantyExpiry > new Date() ? 'Warranty Active' : 'Warranty Expired'}\n                </span>\n              </div>\n            )}\n          </div>\n        </CardContent>\n      </Card>\n    );\n  };\n\n  // Render kanban column\n  const renderKanbanColumn = (column: KanbanColumn & { assets: AssetRecord[] }) => {\n    const isDragOver = dragOverColumn === column.id;\n    const wipLimitExceeded = column.wipLimit && column.assets.length > column.wipLimit;\n\n    return (\n      <div\n        key={column.id}\n        className={`flex flex-col bg-gray-50 rounded-lg p-md min-h-container-lg ${\n          isDragOver ? 'ring-2 ring-blue-300 bg-blue-50' : ''\n        } ${column.color}`}\n        onDragOver={(e) => {\n          e.preventDefault();\n          handleDragOver(column.id);\n        }}\n        onDrop={(event) => {\n          event.preventDefault();\n          handleDrop(column.id);\n        }}\n      >\n        <div className=\"flex items-center justify-between mb-4\">\n          <div className=\"flex items-center gap-xs\">\n            <h3 className=\"font-semibold text-gray-900\">{column.title}</h3>\n            <Badge variant=\"secondary\" className=\"text-xs\">\n              {column.assets.length}\n              {column.wipLimit && ` / ${column.wipLimit}`}\n            </Badge>\n            {wipLimitExceeded && (\n              <AlertTriangle className=\"w-icon-xs h-icon-xs text-red-500\" />\n            )}\n          </div>\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            className=\"h-icon-md w-icon-md p-0\"\n            onClick={() => onAssetAction?.('create', { status: column.status } as any)}\n          >\n            <Plus className=\"h-3 w-3\" />\n          </Button>\n        </div>\n\n        <div className=\"flex-1 space-y-sm overflow-y-auto\">\n          {column.assets.map(renderKanbanCard)}\n\n          {column.assets.length === 0 && (\n            <div className=\"flex flex-col items-center justify-center py-xl text-gray-400\">\n              <Package className=\"w-icon-lg h-icon-lg mb-2\" />\n              <span className=\"text-sm\">No assets</span>\n            </div>\n          )}\n        </div>\n\n        {wipLimitExceeded && (\n          <div className=\"mt-2 text-xs text-red-600 font-medium\">\n            WIP limit exceeded ({column.assets.length - (column.wipLimit || 0)} over)\n          </div>\n        )}\n      </div>\n    );\n  };\n\n  return (\n    <div className={`flex flex-col h-full ${className}`}>\n      {/* Kanban Controls */}\n      <div className=\"flex items-center justify-between p-md border-b\">\n        <div className=\"flex items-center gap-md\">\n          <span className=\"text-sm text-gray-600\">\n            {assets.length} total assets\n          </span>\n          {selectedCards.size > 0 && (\n            <span className=\"text-sm text-blue-600 font-medium\">\n              {selectedCards.size} selected\n            </span>\n          )}\n        </div>\n        <div className=\"flex items-center gap-xs\">\n          {selectedCards.size > 0 && (\n            <>\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => setSelectedCards(new Set())}\n              >\n                Clear Selection\n              </Button>\n              <Button variant=\"outline\" size=\"sm\">\n                Bulk Actions\n              </Button>\n            </>\n          )}\n        </div>\n      </div>\n\n      {/* Kanban Board */}\n      <div className=\"flex-1 overflow-x-auto p-md\">\n        {loading ? (\n          <div className=\"flex items-center justify-center h-container-sm\">\n            <div className=\"animate-spin rounded-full h-icon-lg w-icon-lg border-b-2 border-gray-900\"></div>\n            <span className=\"ml-2\">Loading kanban board...</span>\n          </div>\n        ) : (\n          <div className=\"flex gap-lg min-w-max\">\n            {kanbanData.map(renderKanbanColumn)}\n          </div>\n        )}\n      </div>\n\n      {/* WIP Limits Indicator */}\n      <div className=\"px-md pb-4\">\n        <div className=\"flex gap-xs text-xs text-gray-600\">\n          <span>WIP Limits:</span>\n          {KANBAN_COLUMNS.filter(col => col.wipLimit).map(col => (\n            <Badge\n              key={col.id}\n              variant={(kanbanData.find(k => k.id === col.id)?.assets.length ?? 0) > (col.wipLimit ?? 0) ? 'error' : 'secondary'}\n              className=\"text-xs\"\n            >\n              {col.title}: {kanbanData.find(k => k.id === col.id)?.assets.length || 0}/{col.wipLimit}\n            </Badge>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/assets/views/ListView.tsx","messages":[{"ruleId":"@next/next/no-img-element","severity":1,"message":"Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` or a custom image loader to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","line":306,"column":13,"nodeType":"JSXOpeningElement","endLine":310,"endColumn":15}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\n/**\n * Assets List View\n *\n * Enterprise-grade list view component for asset management.\n * Features hierarchical organization, inline actions, density options,\n * and nested item support.\n *\n * @module assets/views/ListView\n */\n\nimport React, { useState, useCallback, useMemo } from 'react';\nimport { Asset, AssetViewState } from '../types';\nimport { apiClient } from '../lib/api';\nimport { realtimeService } from '../lib/realtime';\nimport {\n  Badge,\n  Button,\n  Checkbox,\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n  ListView\n} from \"@ghxstship/ui\";\nimport { Badge ,\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuSeparator\n} from '@ghxstship/ui';\nimport { Checkbox ,\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuSeparator\n} from '@ghxstship/ui';\nimport {\n  Dropdown,\n  \n  DropdownItem,\n  \n  DropdownMenuSeparator\n} from '@ghxstship/ui';\nimport {\n  ChevronRight,\n  ChevronDown,\n  MoreHorizontal,\n  Edit,\n  Eye,\n  Trash2,\n  Copy,\n  Download,\n  MapPin,\n  User,\n  Package,\n  AlertTriangle,\n  CheckCircle,\n  Clock,\n  DollarSign\n} from 'lucide-react';\n\ninterface ListViewProps {\n  viewState: AssetViewState;\n  onViewStateChange: (newState: Partial<AssetViewState>) => void;\n  onAssetSelect?: (asset: Asset, selected: boolean) => void;\n  onAssetAction?: (action: string, asset: Asset) => void;\n  className?: string;\n}\n\ninterface ListItem {\n  asset: Asset;\n  level: number;\n  expanded: boolean;\n  hasChildren: boolean;\n  parentId?: string;\n}\n\ntype Density = 'compact' | 'comfortable' | 'spacious';\ntype Grouping = 'none' | 'category' | 'status' | 'location';\n\nconst DENSITY_CONFIG = {\n  compact: {\n    itemHeight: 'h-icon-2xl',\n    fontSize: 'text-sm',\n    padding: 'py-xs px-sm',\n    iconSize: 'w-icon-xs h-icon-xs'\n  },\n  comfortable: {\n    itemHeight: 'h-component-md',\n    fontSize: 'text-base',\n    padding: 'py-sm px-md',\n    iconSize: 'w-icon-sm h-icon-sm'\n  },\n  spacious: {\n    itemHeight: 'h-component-lg',\n    fontSize: 'text-lg',\n    padding: 'py-md px-lg',\n    iconSize: 'w-icon-md h-icon-md'\n  }\n};\n\nexport default function ListView({\n  viewState,\n  onViewStateChange,\n  onAssetSelect,\n  onAssetAction,\n  className = ''\n}: ListViewProps) {\n  const [assets, setAssets] = useState<Asset[]>([]);\n  const [loading, setLoading] = useState(false);\n  const [selectedItems, setSelectedItems] = useState<Set<string>(new Set());\n  const [expandedGroups, setExpandedGroups] = useState<Set<string>(new Set());\n  const [density, setDensity] = useState<Density>('comfortable');\n  const [grouping, setGrouping] = useState<Grouping>('none');\n\n  // Fetch assets\n  const fetchAssets = useCallback(async () => {\n    setLoading(true);\n    try {\n      const response = await apiClient.getAssets(\n        viewState.filters,\n        viewState.sort,\n        viewState.pagination\n      );\n      setAssets(response.data);\n      onViewStateChange({\n        pagination: {\n          ...viewState.pagination,\n          total: response.pagination.total\n        }\n      });\n    } catch (error) {\n      console.error('Failed to fetch assets:', error);\n    } finally {\n      setLoading(false);\n    }\n  }, [viewState.filters, viewState.sort, viewState.pagination, onViewStateChange]);\n\n  // Set up realtime subscription\n  React.useEffect(() => {\n    const unsubscribe = realtimeService.subscribeToAssets(\n      'org-id', // Would come from context\n      (event, record, oldRecord) => {\n        if (event === 'INSERT') {\n          setAssets(prev => [record, ...prev]);\n        } else if (event === 'UPDATE') {\n          setAssets(prev =>\n            prev.map(asset =>\n              asset.id === record.id ? { ...asset, ...record } : asset\n            )\n          );\n        } else if (event === 'DELETE') {\n          setAssets(prev => prev.filter(asset => asset.id !== record.id));\n        }\n      }\n    );\n\n    return unsubscribe;\n  }, []);\n\n  // Load data on mount and when filters/sort change\n  React.useEffect(() => {\n    fetchAssets();\n  }, [fetchAssets]);\n\n  // Group assets\n  const groupedAssets = useMemo(() => {\n    if (grouping === 'none') {\n      return [{\n        key: 'all',\n        label: 'All Assets',\n        assets,\n        expanded: true,\n        count: assets.length\n      }];\n    }\n\n    const groups: Record<string, Asset[]> = {};\n\n    assets.forEach(asset => {\n      let groupKey: string;\n      let groupLabel: string;\n\n      switch (grouping) {\n        case 'category':\n          groupKey = asset.category || 'uncategorized';\n          groupLabel = asset.category?.replace('_', ' ').replace(/\\b\\w/g, l => l.toUpperCase()) || 'Uncategorized';\n          break;\n        case 'status':\n          groupKey = asset.status;\n          groupLabel = asset.status.replace('_', ' ').replace(/\\b\\w/g, l => l.toUpperCase());\n          break;\n        case 'location':\n          groupKey = asset.location?.id || 'unassigned';\n          groupLabel = asset.location?.name || 'Unassigned';\n          break;\n        default:\n          groupKey = 'all';\n          groupLabel = 'All Assets';\n      }\n\n      if (!groups[groupKey]) {\n        groups[groupKey] = [];\n      }\n      groups[groupKey].push(asset);\n    });\n\n    return Object.entries(groups).map(([key, groupAssets]) => ({\n      key,\n      label: key === 'all' ? 'All Assets' : Object.keys(groups).indexOf(key) >= 0 ?\n        Object.values(groups)[Object.keys(groups).indexOf(key)]?.[0]?.category?.replace('_', ' ').replace(/\\b\\w/g, l => l.toUpperCase()) || key : key,\n      assets: groupAssets,\n      expanded: expandedGroups.has(key),\n      count: groupAssets.length\n    })).sort((a, b) => a.label.localeCompare(b.label));\n  }, [assets, grouping, expandedGroups]);\n\n  // Handle item selection\n  const handleItemSelect = useCallback((assetId: string, selected: boolean) => {\n    setSelectedItems(prev => {\n      const newSet = new Set(prev);\n      if (selected) {\n        newSet.add(assetId);\n      } else {\n        newSet.delete(assetId);\n      }\n      return newSet;\n    });\n    const asset = assets.find(a => a.id === assetId);\n    if (asset) {\n      onAssetSelect?.(asset, selected);\n    }\n  }, [assets, onAssetSelect, setSelectedItems]);\n\n  // Handle bulk selection\n  const handleSelectAll = useCallback((selected: boolean) => {\n    if (selected) {\n      const allIds = new Set(assets.map(a => a.id));\n      setSelectedItems(allIds);\n      assets.forEach(asset => onAssetSelect?.(asset, true));\n    } else {\n      setSelectedItems(new Set());\n      assets.forEach(asset => onAssetSelect?.(asset, false));\n    }\n  }, [assets, onAssetSelect, setSelectedItems]);\n\n  // Handle group expansion\n  const handleGroupToggle = useCallback((groupKey: string) => {\n    setExpandedGroups(prev => {\n      const newSet = new Set(prev);\n      if (newSet.has(groupKey)) {\n        newSet.delete(groupKey);\n      } else {\n        newSet.add(groupKey);\n      }\n      return newSet;\n    });\n  }, [setExpandedGroups]);\n\n  // Get status display\n  const getStatusDisplay = (status: string) => {\n    const statusConfig = {\n      available: { color: 'text-green-600', icon: CheckCircle },\n      in_use: { color: 'text-blue-600', icon: User },\n      maintenance: { color: 'text-yellow-600', icon: AlertTriangle },\n      retired: { color: 'text-gray-600', icon: Package },\n      lost: { color: 'text-red-600', icon: AlertTriangle },\n      damaged: { color: 'text-orange-600', icon: AlertTriangle }\n    };\n    return statusConfig[status as keyof typeof statusConfig] || statusConfig.retired;\n  };\n\n  // Render list item\n  const renderListItem = (asset: Asset, level: number = 0) => {\n    const isSelected = selectedItems.has(asset.id);\n    const statusDisplay = getStatusDisplay(asset.status);\n    const StatusIcon = statusDisplay.icon;\n    const config = DENSITY_CONFIG[density];\n\n    return (\n      <div\n        key={asset.id}\n        className={`flex items-center border-b border-gray-100 hover:bg-gray-50 transition-colors cursor-pointer ${\n          isSelected ? 'bg-blue-50' : ''\n        }`}\n        style={{ paddingLeft: `${level * 20 + 16}px` }}\n        onClick={() => onAssetAction?.('view', asset)}\n      >\n        {/* Selection checkbox */}\n        <div className={`${config.padding} flex items-center`}>\n          <Checkbox\n            checked={isSelected}\n            onChange={(checked) => handleItemSelect(asset.id, checked)}\n            onClick={(e) => e.stopPropagation()}\n          />\n        </div>\n\n        {/* Asset icon */}\n        <div className={`${config.padding} flex items-center`}>\n          {asset.image_urls?.[0] ? (\n            <img\n              src={asset.image_urls[0]}\n              alt={asset.name}\n              className={`rounded ${config.iconSize} object-cover bg-gray-100`}\n            />\n          ) : (\n            <div className={`rounded bg-gray-100 flex items-center justify-center ${config.iconSize}`}>\n              <Package className={`${config.iconSize} text-gray-400`} />\n            </div>\n          )}\n        </div>\n\n        {/* Asset info */}\n        <div className=\"flex-1 min-w-0\">\n          <div className={`flex items-center gap-sm ${config.padding}`}>\n            <div className=\"flex-1 min-w-0\">\n              <div className={`font-medium truncate ${config.fontSize}`}>\n                {asset.name}\n              </div>\n              <div className=\"flex items-center gap-xs mt-1\">\n                <Badge variant=\"outline\" className=\"font-mono text-xs\">\n                  {asset.asset_tag}\n                </Badge>\n                <Badge variant=\"secondary\" className=\"text-xs capitalize\">\n                  {asset.category?.replace('_', ' ')}\n                </Badge>\n                <div className={`flex items-center gap-xs ${statusDisplay.color}`}>\n                  <StatusIcon className=\"w-3 h-3\" />\n                  <span className=\"text-xs capitalize\">\n                    {asset.status.replace('_', ' ')}\n                  </span>\n                </div>\n              </div>\n            </div>\n\n            {/* Quick info */}\n            <div className=\"flex items-center gap-md text-sm text-gray-600\">\n              {asset.assigned_to && (\n                <div className=\"flex items-center gap-xs\">\n                  <User className=\"w-icon-xs h-icon-xs\" />\n                  <span className=\"truncate max-w-component-lg\">\n                    {asset.assigned_to.name}\n                  </span>\n                </div>\n              )}\n              {asset.location && (\n                <div className=\"flex items-center gap-xs\">\n                  <MapPin className=\"w-icon-xs h-icon-xs\" />\n                  <span className=\"truncate max-w-component-lg\">\n                    {asset.location.name}\n                  </span>\n                </div>\n              )}\n              {asset.purchase_price && (\n                <div className=\"flex items-center gap-xs\">\n                  <DollarSign className=\"w-icon-xs h-icon-xs\" />\n                  <span>${asset.purchase_price.toLocaleString()}</span>\n                </div>\n              )}\n              {asset.warranty_expiry && (\n                <div className=\"flex items-center gap-xs\">\n                  <Clock className=\"w-icon-xs h-icon-xs\" />\n                  <span>\n                    {new Date(asset.warranty_expiry) > new Date() ? 'Active' : 'Expired'}\n                  </span>\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n\n        {/* Actions */}\n        <div className={`${config.padding} flex items-center`}>\n          <DropdownMenu>\n            <DropdownMenuTrigger asChild>\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                className=\"h-icon-lg w-icon-lg p-0\"\n                onClick={(e) => e.stopPropagation()}\n              >\n                <MoreHorizontal className=\"h-icon-xs w-icon-xs\" />\n              </Button>\n            </DropdownMenuTrigger>\n            <DropdownMenuContent align=\"end\">\n              <DropdownMenuItem onClick={(e) => { e.stopPropagation(); onAssetAction?.('view', asset); }}>\n                <Eye className=\"mr-2 h-icon-xs w-icon-xs\" />\n                View Details\n              </DropdownMenuItem>\n              <DropdownMenuItem onClick={(e) => { e.stopPropagation(); onAssetAction?.('edit', asset); }}>\n                <Edit className=\"mr-2 h-icon-xs w-icon-xs\" />\n                Edit Asset\n              </DropdownMenuItem>\n              <DropdownMenuSeparator />\n              <DropdownMenuItem onClick={(e) => { e.stopPropagation(); onAssetAction?.('duplicate', asset); }}>\n                <Copy className=\"mr-2 h-icon-xs w-icon-xs\" />\n                Duplicate\n              </DropdownMenuItem>\n              <DropdownMenuItem onClick={(e) => { e.stopPropagation(); onAssetAction?.('export', asset); }}>\n                <Download className=\"mr-2 h-icon-xs w-icon-xs\" />\n                Export\n              </DropdownMenuItem>\n              <DropdownMenuSeparator />\n              <DropdownMenuItem\n                onClick={(e) => { e.stopPropagation(); onAssetAction?.('delete', asset); }}\n                className=\"text-red-600\"\n              >\n                <Trash2 className=\"mr-2 h-icon-xs w-icon-xs\" />\n                Delete\n              </DropdownMenuItem>\n            </DropdownMenuContent>\n          </DropdownMenu>\n        </div>\n      </div>\n    );\n  };\n\n  // Render group header\n  const renderGroupHeader = (group: { key: string; label: string; assets: Asset[]; expanded: boolean; count: number }) => {\n    const config = DENSITY_CONFIG[density];\n\n    return (\n      <div\n        key={group.key}\n        className=\"bg-gray-50 border-b-2 border-gray-200 cursor-pointer hover:bg-gray-100 transition-colors\"\n        onClick={() => handleGroupToggle(group.key)}\n      >\n        <div className={`flex items-center ${config.padding}`}>\n          <div className=\"flex items-center gap-xs\">\n            {group.expanded ? (\n              <ChevronDown className=\"w-icon-xs h-icon-xs text-gray-500\" />\n            ) : (\n              <ChevronRight className=\"w-icon-xs h-icon-xs text-gray-500\" />\n            )}\n            <span className={`font-medium text-gray-900 ${config.fontSize}`}>\n              {group.label}\n            </span>\n            <Badge variant=\"secondary\" className=\"text-xs\">\n              {group.count}\n            </Badge>\n          </div>\n        </div>\n      </div>\n    );\n  };\n\n  return (\n    <div className={`flex flex-col h-full bg-white ${className}`}>\n      {/* List Controls */}\n      <div className=\"flex items-center justify-between p-md border-b\">\n        <div className=\"flex items-center gap-md\">\n          <div className=\"flex items-center gap-xs\">\n            <span className=\"text-sm font-medium\">Density:</span>\n            <select\n              value={density}\n              onChange={(e) => setDensity(e.target.e.target.value as Density)}\n              className=\"text-sm border rounded px-xs py-xs\"\n            >\n              <option value=\"compact\">Compact</option>\n              <option value=\"comfortable\">Comfortable</option>\n              <option value=\"spacious\">Spacious</option>\n            </select>\n          </div>\n          {grouping !== 'none' && (\n            <div className=\"flex items-center gap-xs\">\n              <span className=\"text-sm font-medium\">Grouping:</span>\n              <select\n                value={grouping}\n                onChange={(e) => setGrouping(e.target.e.target.value as Grouping)}\n                className=\"text-sm border rounded px-xs py-xs\"\n              >\n                <option value=\"none\">None</option>\n                <option value=\"category\">Category</option>\n                <option value=\"status\">Status</option>\n                <option value=\"location\">Location</option>\n              </select>\n            </div>\n          )}\n          <span className=\"text-sm text-gray-600\">\n            {assets.length} assets\n          </span>\n          {selectedItems.size > 0 && (\n            <span className=\"text-sm text-blue-600 font-medium\">\n              {selectedItems.size} selected\n            </span>\n          )}\n        </div>\n        <div className=\"flex items-center gap-xs\">\n          {selectedItems.size > 0 && (\n            <>\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => handleSelectAll(false)}\n              >\n                Clear\n              </Button>\n              <Button variant=\"outline\" size=\"sm\">\n                Bulk Actions\n              </Button>\n            </>\n          )}\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={() => handleSelectAll(selectedItems.size !== assets.length)}\n          >\n            {selectedItems.size === assets.length ? 'Deselect All' : 'Select All'}\n          </Button>\n        </div>\n      </div>\n\n      {/* List Content */}\n      <div className=\"flex-1 overflow-auto\">\n        {loading ? (\n          <div className=\"flex items-center justify-center h-container-sm\">\n            <div className=\"animate-spin rounded-full h-icon-lg w-icon-lg border-b-2 border-gray-900\"></div>\n            <span className=\"ml-2\">Loading assets...</span>\n          </div>\n        ) : assets.length === 0 ? (\n          <div className=\"flex flex-col items-center justify-center h-container-sm text-gray-500\">\n            <Package className=\"w-icon-2xl h-icon-2xl mb-4 text-gray-300\" />\n            <div className=\"text-lg font-medium\">No assets found</div>\n            <div className=\"text-sm\">Try adjusting your filters</div>\n          </div>\n        ) : (\n          <div className=\"divide-y divide-gray-100\">\n            {groupedAssets.map(group => (\n              <React.Fragment key={group.key}>\n                {grouping !== 'none' && renderGroupHeader(group)}\n                {group.expanded && group.assets.map(asset => renderListItem(asset))}\n              </React.Fragment>\n            ))}\n          </div>\n        )}\n      </div>\n\n      {/* Load More */}\n      {viewState.pagination.total &&\n       viewState.pagination.page * viewState.pagination.pageSize < viewState.pagination.total && (\n        <div className=\"flex justify-center p-md border-t\">\n          <Button\n            variant=\"outline\"\n            onClick={() => onViewStateChange({\n              pagination: {\n                ...viewState.pagination,\n                page: viewState.pagination.page + 1\n              }\n            })}\n          >\n            Load More Assets\n          </Button>\n        </div>\n      )}\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/assets/views/TableView.tsx","messages":[{"ruleId":"@next/next/no-img-element","severity":1,"message":"Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` or a custom image loader to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","line":219,"column":11,"nodeType":"JSXOpeningElement","endLine":223,"endColumn":13}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\n/**\n * Assets Table View\n *\n * Enterprise-grade table view component for asset management.\n * Features advanced grid functionality, frozen columns, cell editing,\n * conditional formatting, and responsive design.\n *\n * @module assets/views/TableView\n */\n\nimport React, { useState, useCallback, useMemo } from 'react';\nimport { Asset, AssetFilters, AssetSort, AssetViewState } from '../types';\nimport { apiClient } from '../lib/api';\nimport { realtimeService } from '../lib/realtime';\nimport {\n  Badge,\n  Button,\n  Checkbox,\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n  Input,\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow\n} from \"@ghxstship/ui\";\nimport { Button ,\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuSeparator\n} from '@ghxstship/ui';\nimport { Input ,\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuSeparator\n} from '@ghxstship/ui';\nimport { Badge ,\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuSeparator\n} from '@ghxstship/ui';\nimport { Checkbox ,\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuSeparator\n} from '@ghxstship/ui';\nimport {\n  Dropdown,\n  \n  DropdownItem,\n  \n  DropdownMenuSeparator\n} from '@ghxstship/ui';\nimport {\n  ArrowUpDown,\n  ArrowUp,\n  ArrowDown,\n  MoreHorizontal,\n  Edit,\n  Eye,\n  Trash2,\n  Copy,\n  Download,\n  Filter,\n  Search,\n  Settings\n} from 'lucide-react';\n\ninterface TableViewProps {\n  viewState: AssetViewState;\n  onViewStateChange: (newState: Partial<AssetViewState>) => void;\n  onAssetSelect?: (asset: Asset, selected: boolean) => void;\n  onAssetAction?: (action: string, asset: Asset) => void;\n  className?: string;\n}\n\n// Column configuration\ninterface ColumnConfig {\n  key: keyof Asset | string;\n  label: string;\n  width?: number;\n  sortable?: boolean;\n  filterable?: boolean;\n  editable?: boolean;\n  frozen?: boolean;\n  render?: (value: unknown, asset: Asset) => React.ReactNode;\n}\n\nconst COLUMNS: ColumnConfig[] = [\n  {\n    key: 'select',\n    label: '',\n    width: 48,\n    frozen: true,\n    render: (value, asset) => (\n      <Checkbox\n        checked={asset.id ? true : false}\n        onChange={() => {}}\n      />\n    )\n  },\n  {\n    key: 'name',\n    label: 'Asset Name',\n    width: 200,\n    sortable: true,\n    filterable: true,\n    editable: true,\n    frozen: true,\n    render: (value) => (\n      <div className=\"font-medium truncate\">{value}</div>\n    )\n  },\n  {\n    key: 'asset_tag',\n    label: 'Asset Tag',\n    width: 120,\n    sortable: true,\n    filterable: true,\n    editable: true,\n    render: (value) => (\n      <Badge variant=\"outline\" className=\"font-mono text-xs\">\n        {value}\n      </Badge>\n    )\n  },\n  {\n    key: 'category',\n    label: 'Category',\n    width: 120,\n    sortable: true,\n    filterable: true,\n    editable: true,\n    render: (value) => (\n      <Badge variant=\"secondary\" className=\"text-xs capitalize\">\n        {value?.replace('_', ' ')}\n      </Badge>\n    )\n  },\n  {\n    key: 'status',\n    label: 'Status',\n    width: 100,\n    sortable: true,\n    filterable: true,\n    editable: true,\n    render: (value) => {\n      const statusColors = {\n        available: 'bg-green-100 text-green-800',\n        in_use: 'bg-blue-100 text-blue-800',\n        maintenance: 'bg-yellow-100 text-yellow-800',\n        retired: 'bg-gray-100 text-gray-800',\n        lost: 'bg-red-100 text-red-800',\n        damaged: 'bg-orange-100 text-orange-800'\n      };\n      return (\n        <Badge className={`text-xs capitalize ${statusColors[e.target.value as keyof typeof statusColors] || 'bg-gray-100'}`}>\n          {value?.replace('_', ' ')}\n        </Badge>\n      );\n    }\n  },\n  {\n    key: 'condition',\n    label: 'Condition',\n    width: 100,\n    sortable: true,\n    filterable: true,\n    editable: true,\n    render: (value) => {\n      const conditionColors = {\n        excellent: 'bg-emerald-100 text-emerald-800',\n        good: 'bg-green-100 text-green-800',\n        fair: 'bg-yellow-100 text-yellow-800',\n        poor: 'bg-orange-100 text-orange-800',\n        needs_repair: 'bg-red-100 text-red-800'\n      };\n      return (\n        <Badge className={`text-xs capitalize ${conditionColors[e.target.value as keyof typeof conditionColors] || 'bg-gray-100'}`}>\n          {value?.replace('_', ' ')}\n        </Badge>\n      );\n    }\n  },\n  {\n    key: 'location',\n    label: 'Location',\n    width: 150,\n    sortable: true,\n    filterable: true,\n    render: (value) => (\n      <div className=\"truncate text-sm\">{value?.name || 'Unassigned'}</div>\n    )\n  },\n  {\n    key: 'assigned_to',\n    label: 'Assigned To',\n    width: 150,\n    sortable: true,\n    filterable: true,\n    render: (value) => (\n      <div className=\"flex items-center gap-xs\">\n        {value?.avatar && (\n          <img\n            src={value.avatar}\n            alt={value.name}\n            className=\"w-icon-md h-icon-md rounded-full\"\n          />\n        )}\n        <span className=\"truncate text-sm\">{value?.name || 'Unassigned'}</span>\n      </div>\n    )\n  },\n  {\n    key: 'purchase_price',\n    label: 'Purchase Price',\n    width: 120,\n    sortable: true,\n    editable: true,\n    render: (value) => value ? `$${value.toLocaleString()}` : '-'\n  },\n  {\n    key: 'current_value',\n    label: 'Current Value',\n    width: 120,\n    sortable: true,\n    render: (value) => value ? `$${value.toLocaleString()}` : '-'\n  },\n  {\n    key: 'brand',\n    label: 'Brand',\n    width: 100,\n    sortable: true,\n    filterable: true,\n    editable: true\n  },\n  {\n    key: 'model',\n    label: 'Model',\n    width: 100,\n    sortable: true,\n    filterable: true,\n    editable: true\n  },\n  {\n    key: 'actions',\n    label: '',\n    width: 48,\n    frozen: true,\n    render: (value, asset) => (\n      <DropdownMenu>\n        <DropdownMenuTrigger asChild>\n          <Button variant=\"ghost\" size=\"sm\" className=\"h-icon-lg w-icon-lg p-0\">\n            <MoreHorizontal className=\"h-icon-xs w-icon-xs\" />\n          </Button>\n        </DropdownMenuTrigger>\n        <DropdownMenuContent align=\"end\">\n          <DropdownMenuItem onClick={() => {}}>\n            <Eye className=\"mr-2 h-icon-xs w-icon-xs\" />\n            View Details\n          </DropdownMenuItem>\n          <DropdownMenuItem onClick={() => {}}>\n            <Edit className=\"mr-2 h-icon-xs w-icon-xs\" />\n            Edit Asset\n          </DropdownMenuItem>\n          <DropdownMenuSeparator />\n          <DropdownMenuItem onClick={() => {}}>\n            <Copy className=\"mr-2 h-icon-xs w-icon-xs\" />\n            Duplicate\n          </DropdownMenuItem>\n          <DropdownMenuItem onClick={() => {}}>\n            <Download className=\"mr-2 h-icon-xs w-icon-xs\" />\n            Export\n          </DropdownMenuItem>\n          <DropdownMenuSeparator />\n          <DropdownMenuItem onClick={() => {}} className=\"text-red-600\">\n            <Trash2 className=\"mr-2 h-icon-xs w-icon-xs\" />\n            Delete\n          </DropdownMenuItem>\n        </DropdownMenuContent>\n      </DropdownMenu>\n    )\n  }\n];\n\nexport default function TableView({\n  viewState,\n  onViewStateChange,\n  onAssetSelect,\n  onAssetAction,\n  className = ''\n}: TableViewProps) {\n  const [assets, setAssets] = useState<Asset[]>([]);\n  const [loading, setLoading] = useState(false);\n  const [selectedRows, setSelectedRows] = useState<Set<string>(new Set());\n\n  // Fetch assets\n  const fetchAssets = useCallback(async () => {\n    setLoading(true);\n    try {\n      const response = await apiClient.getAssets(\n        viewState.filters,\n        viewState.sort,\n        viewState.pagination\n      );\n      setAssets(response.data);\n      onViewStateChange({\n        pagination: {\n          ...viewState.pagination,\n          total: response.pagination.total\n        }\n      });\n    } catch (error) {\n      console.error('Failed to fetch assets:', error);\n    } finally {\n      setLoading(false);\n    }\n  }, [viewState.filters, viewState.sort, viewState.pagination, onViewStateChange]);\n\n  // Set up realtime subscription\n  React.useEffect(() => {\n    const unsubscribe = realtimeService.subscribeToAssets(\n      'org-id', // Would come from context\n      (event, record, oldRecord) => {\n        if (event === 'INSERT') {\n          setAssets(prev => [record, ...prev]);\n        } else if (event === 'UPDATE') {\n          setAssets(prev =>\n            prev.map(asset =>\n              asset.id === record.id ? { ...asset, ...record } : asset\n            )\n          );\n        } else if (event === 'DELETE') {\n          setAssets(prev => prev.filter(asset => asset.id !== record.id));\n        }\n      }\n    );\n\n    return unsubscribe;\n  }, []);\n\n  // Load data on mount and when filters/sort change\n  React.useEffect(() => {\n    fetchAssets();\n  }, [fetchAssets]);\n\n  // Handle column sorting\n  const handleSort = useCallback((columnKey: string) => {\n    const newSort: AssetSort = {\n      field: columnKey as keyof Asset,\n      direction: viewState.sort.field === columnKey && viewState.sort.direction === 'asc'\n        ? 'desc'\n        : 'asc'\n    };\n    onViewStateChange({ sort: newSort });\n  }, [viewState.sort, onViewStateChange]);\n\n  // Handle row selection\n  const handleRowSelect = useCallback((assetId: string, selected: boolean) => {\n    setSelectedRows(prev => {\n      const newSet = new Set(prev);\n      if (selected) {\n        newSet.add(assetId);\n      } else {\n        newSet.delete(assetId);\n      }\n      return newSet;\n    });\n    onAssetSelect?.(assets.find(a => a.id === assetId)!, selected);\n  }, [assets, onAssetSelect, setSelectedRows]);\n\n  // Handle bulk selection\n  const handleSelectAll = useCallback((selected: boolean) => {\n    if (selected) {\n      const allIds = new Set(assets.map(a => a.id));\n      setSelectedRows(allIds);\n      assets.forEach(asset => onAssetSelect?.(asset, true));\n    } else {\n      setSelectedRows(new Set());\n      assets.forEach(asset => onAssetSelect?.(asset, false));\n    }\n  }, [assets, onAssetSelect, setSelectedRows]);\n\n  // Get visible columns\n  const visibleColumns = useMemo(() =>\n    COLUMNS.filter(col => viewState.visibleFields.includes(col.key as keyof Asset)),\n    [viewState.visibleFields]\n  );\n\n  // Render sort icon\n  const renderSortIcon = (columnKey: string) => {\n    if (viewState.sort.field !== columnKey) {\n      return <ArrowUpDown className=\"ml-2 h-icon-xs w-icon-xs\" />;\n    }\n    return viewState.sort.direction === 'asc'\n      ? <ArrowUp className=\"ml-2 h-icon-xs w-icon-xs\" />\n      : <ArrowDown className=\"ml-2 h-icon-xs w-icon-xs\" />;\n  };\n\n  return (\n    <div className={`flex flex-col h-full ${className}`}>\n      {/* Table Controls */}\n      <div className=\"flex items-center justify-between p-md border-b\">\n        <div className=\"flex items-center gap-xs\">\n          <div className=\"relative\">\n            <Search className=\"absolute left-3 top-xs/2 transform -translate-y-1/2 h-icon-xs w-icon-xs text-gray-400\" />\n            <Input\n              placeholder=\"Search assets...\"\n              className=\"pl-9 w-container-sm\"\n              value={viewState.filters.search || ''}\n              onChange={(e) => onViewStateChange({\n                filters: { ...viewState.filters, search: e.target.value }\n              })}\n            />\n          </div>\n          <Button variant=\"outline\" size=\"sm\">\n            <Filter className=\"mr-2 h-icon-xs w-icon-xs\" />\n            Filters\n          </Button>\n        </div>\n        <div className=\"flex items-center gap-xs\">\n          <Button variant=\"outline\" size=\"sm\">\n            <Settings className=\"mr-2 h-icon-xs w-icon-xs\" />\n            Columns\n          </Button>\n          {selectedRows.size > 0 && (\n            <div className=\"flex items-center gap-xs\">\n              <span className=\"text-sm text-gray-600\">\n                {selectedRows.size} selected\n              </span>\n              <Button variant=\"outline\" size=\"sm\">\n                Bulk Actions\n              </Button>\n            </div>\n          )}\n        </div>\n      </div>\n\n      {/* Table */}\n      <div className=\"flex-1 overflow-auto\">\n        <Table>\n          <TableHeader className=\"sticky top-0 bg-white z-10\">\n            <TableRow>\n              {visibleColumns.map((column) => (\n                <TableHead\n                  key={column.key}\n                  className={`${\n                    column.frozen ? 'sticky left-0 bg-white z-20' : ''\n                  } ${column.sortable ? 'cursor-pointer hover:bg-gray-50' : ''}`}\n                  style={{ width: column.width, minWidth: column.width }}\n                  onClick={column.sortable ? () => handleSort(column.key) : undefined}\n                >\n                  <div className=\"flex items-center\">\n                    {column.key === 'select' ? (\n                      <Checkbox\n                        checked={selectedRows.size === assets.length && assets.length > 0}\n                        indeterminate={selectedRows.size > 0 && selectedRows.size < assets.length}\n                        onChange={(checked) => handleSelectAll(checked)}\n                      />\n                    ) : (\n                      <>\n                        {column.label}\n                        {column.sortable && renderSortIcon(column.key)}\n                      </>\n                    )}\n                  </div>\n                </TableHead>\n              ))}\n            </TableRow>\n          </TableHeader>\n          <TableBody>\n            {loading ? (\n              <TableRow>\n                <TableCell colSpan={visibleColumns.length} className=\"text-center py-xl\">\n                  <div className=\"flex items-center justify-center\">\n                    <div className=\"animate-spin rounded-full h-icon-md w-icon-md border-b-2 border-gray-900\"></div>\n                    <span className=\"ml-2\">Loading assets...</span>\n                  </div>\n                </TableCell>\n              </TableRow>\n            ) : assets.length === 0 ? (\n              <TableRow>\n                <TableCell colSpan={visibleColumns.length} className=\"text-center py-xl\">\n                  <div className=\"text-gray-500\">No assets found</div>\n                </TableCell>\n              </TableRow>\n            ) : (\n              assets.map((asset) => (\n                <TableRow\n                  key={asset.id}\n                  className={`hover:bg-gray-50 ${\n                    selectedRows.has(asset.id) ? 'bg-blue-50' : ''\n                  }`}\n                >\n                  {visibleColumns.map((column) => {\n                    const value = column.key.includes('.')\n                      ? column.key.split('.').reduce((obj, key) => obj?.[key], asset)\n                      : asset[column.key as keyof Asset];\n\n                    return (\n                      <TableCell\n                        key={column.key}\n                        className={column.frozen ? 'sticky left-0 bg-white' : ''}\n                        style={{ width: column.width, minWidth: column.width }}\n                      >\n                        {column.render\n                          ? column.render(value, asset)\n                          : <span className=\"truncate\">{value || '-'}</span>\n                        }\n                      </TableCell>\n                    );\n                  })}\n                </TableRow>\n              ))\n            )}\n          </TableBody>\n        </Table>\n      </div>\n\n      {/* Pagination */}\n      <div className=\"flex items-center justify-between p-md border-t\">\n        <div className=\"text-sm text-gray-600\">\n          Showing {((viewState.pagination.page - 1) * viewState.pagination.pageSize) + 1} to{' '}\n          {Math.min(viewState.pagination.page * viewState.pagination.pageSize, viewState.pagination.total || 0)} of{' '}\n          {viewState.pagination.total || 0} assets\n        </div>\n        <div className=\"flex items-center gap-xs\">\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            disabled={viewState.pagination.page === 1}\n            onClick={() => onViewStateChange({\n              pagination: { ...viewState.pagination, page: viewState.pagination.page - 1 }\n            })}\n          >\n            Previous\n          </Button>\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            disabled={!viewState.pagination.total ||\n              viewState.pagination.page * viewState.pagination.pageSize >= viewState.pagination.total}\n            onClick={() => onViewStateChange({\n              pagination: { ...viewState.pagination, page: viewState.pagination.page + 1 }\n            })}\n          >\n            Next\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/assets/views/ViewSwitcher.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/companies/CompaniesClient.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/companies/[id]/CompanyDetailClient.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/companies/[id]/edit/EditCompanyClient.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/companies/[id]/edit/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/companies/[id]/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/companies/contracts/ContractsClient.tsx","messages":[],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'loadCompanies' and 'loadContracts'. Either include them or remove the dependency array.","line":63,"column":6,"nodeType":"ArrayExpression","endLine":63,"endColumn":39,"suggestions":[{"desc":"Update the dependencies array to be: [orgId, typeFilter, statusFilter, loadContracts, loadCompanies]","fix":{"range":[2218,2251],"text":"[orgId, typeFilter, statusFilter, loadContracts, loadCompanies]"}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/companies/contracts/CreateContractClient.tsx","messages":[],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'loadCompanies' and 'loadProjects'. Either include them or remove the dependency array.","line":94,"column":6,"nodeType":"ArrayExpression","endLine":94,"endColumn":21,"suggestions":[{"desc":"Update the dependencies array to be: [isOpen, loadCompanies, loadProjects, orgId]","fix":{"range":[2513,2528],"text":"[isOpen, loadCompanies, loadProjects, orgId]"}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/companies/contracts/drawers/CreateContractDrawer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/companies/contracts/lib/contracts-service.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/companies/contracts/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/companies/contracts/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/companies/contracts/views/ContractsGridView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/companies/contracts/views/ContractsListView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/companies/create/CreateCompanyClient.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/companies/create/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/companies/directory/CreateCompanyClient.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/companies/directory/DirectoryClient.tsx","messages":[],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadCompanies'. Either include it or remove the dependency array.","line":59,"column":6,"nodeType":"ArrayExpression","endLine":59,"endColumn":13,"suggestions":[{"desc":"Update the dependencies array to be: [loadCompanies, orgId]","fix":{"range":[2003,2010],"text":"[loadCompanies, orgId]"}}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'filterCompanies'. Either include it or remove the dependency array.","line":65,"column":6,"nodeType":"ArrayExpression","endLine":65,"endColumn":72,"suggestions":[{"desc":"Update the dependencies array to be: [companies, searchQuery, industryFilter, statusFilter, sizeFilter, filterCompanies]","fix":{"range":[2178,2244],"text":"[companies, searchQuery, industryFilter, statusFilter, sizeFilter, filterCompanies]"}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/companies/directory/drawers/CreateCompanyDrawer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/companies/directory/drawers/EditCompanyDrawer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/companies/directory/lib/directory-service.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/companies/directory/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/companies/directory/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/companies/directory/views/DirectoryGridView.tsx","messages":[{"ruleId":"@next/next/no-img-element","severity":1,"message":"Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` or a custom image loader to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","line":100,"column":2,"nodeType":"JSXOpeningElement","endLine":104,"endColumn":4}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport Image from 'next/image';\nimport { Building, Globe, Mail, Phone, MapPin, Users, Edit, Eye, Trash2 } from \"lucide-react\";\nimport { Card, Button, Badge } from '@ghxstship/ui';\nimport type { Company } from '../types';\n\ninterface DirectoryGridViewProps {\n companies: Company[];\n onEdit: (company: Company) => void;\n onView: (company: Company) => void;\n onDelete: (company: Company) => void;\n loading?: boolean;\n}\n\nexport default function DirectoryGridView({\n companies,\n onEdit,\n onView,\n onDelete,\n loading = false\n}: DirectoryGridViewProps) {\n if (loading) {\n return (\n <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-lg\">\n {[...Array(8)].map((_, i) => (\n <Card key={i} className=\"p-lg animate-pulse\">\n <div className=\"h-icon-xs bg-muted rounded w-3/4 mb-2\"></div>\n <div className=\"h-3 bg-muted rounded w-1/2 mb-4\"></div>\n <div className=\"space-y-xs\">\n <div className=\"h-3 bg-muted rounded w-full\"></div>\n <div className=\"h-3 bg-muted rounded w-2/3\"></div>\n </div>\n </Card>\n ))}\n </div>\n );\n }\n\n if (companies.length === 0) {\n return (\n <div className=\"text-center py-xsxl\">\n <Building className=\"h-icon-2xl w-icon-2xl text-muted-foreground mx-auto mb-4\" />\n <h3 className=\"text-lg font-semibold mb-2\">No companies found</h3>\n <p className=\"text-muted-foreground\">\n </p>\n </div>\n );\n }\n\n  const getStatusVariant = (status: Company['status']) => {\n    switch (status) {\n      case 'active':\n        return 'success';\n      case 'pending':\n        return 'warning';\n      case 'inactive':\n        return 'secondary';\n      case 'blacklisted':\n        return 'error';\n      default:\n        return 'secondary';\n    }\n  };\n\n  const getSizeLabel = (size?: Company['size']) => {\n    switch (size) {\n      case 'startup':\n        return '1-10 employees';\n      case 'small':\n        return '11-50 employees';\n      case 'medium':\n        return '51-200 employees';\n      case 'large':\n        return '201-1000 employees';\n      case 'enterprise':\n        return '1000+ employees';\n      default:\n        return 'Unknown size';\n    }\n  };\n\n return (\n <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-lg\">\n {companies.map((company) => (\n <Card key={company.id} className=\"p-lg hover:shadow-md transition-shadow\">\n <div className=\"flex items-start justify-between mb-4\">\n <div className=\"flex-1\">\n <h3 className=\"font-semibold text-lg mb-1 truncate\" title={company.name}>\n {company.name}\n </h3>\n {company.industry && (\n <p className=\"text-sm text-muted-foreground mb-2\">{company.industry}</p>\n )}\n <Badge variant={getStatusVariant(company.status)}>\n {company.status}\n </Badge>\n </div>\n {company.logo_url && (\n <img\n src={company.logo_url}\n alt={`${company.name} logo`}\n className=\"w-icon-2xl h-icon-2xl rounded-lg object-cover\"\n />\n )}\n </div>\n\n {company.description && (\n <p className=\"text-sm text-muted-foreground mb-4 line-clamp-xs\">\n {company.description}\n </p>\n )}\n\n <div className=\"space-y-xs mb-4\">\n {company.website && (\n <div className=\"flex items-center text-sm text-muted-foreground\">\n <Globe className=\"h-icon-xs w-icon-xs mr-2 flex-shrink-0\" />\n <a\n href={company.website as any as any}\n target=\"_blank\"\n rel=\"noopener noreferrer\"\n className=\"hover:text-primary truncate\"\n >\n {company.website.replace(/^https?:\\/\\//, '')}\n </a>\n </div>\n )}\n \n {company.email && (\n <div className=\"flex items-center text-sm text-muted-foreground\">\n <Mail className=\"h-icon-xs w-icon-xs mr-2 flex-shrink-0\" />\n <a\n href={`mailto:${company.email as any as any}`}\n className=\"hover:text-primary truncate\"\n >\n {company.email}\n </a>\n </div>\n )}\n \n {company.phone && (\n <div className=\"flex items-center text-sm text-muted-foreground\">\n <Phone className=\"h-icon-xs w-icon-xs mr-2 flex-shrink-0\" />\n <a\n href={`tel:${company.phone as any as any}`}\n className=\"hover:text-primary\"\n >\n {company.phone}\n </a>\n </div>\n )}\n \n {(company.city || company.country) && (\n <div className=\"flex items-center text-sm text-muted-foreground\">\n <MapPin className=\"h-icon-xs w-icon-xs mr-2 flex-shrink-0\" />\n <span className=\"truncate\">\n {[company.city, company.country].filter(Boolean).join(', ')}\n </span>\n </div>\n )}\n \n {company.size && (\n <div className=\"flex items-center text-sm text-muted-foreground\">\n <Users className=\"h-icon-xs w-icon-xs mr-2 flex-shrink-0\" />\n <span>{getSizeLabel(company.size)}</span>\n </div>\n )}\n </div>\n\n <div className=\"flex items-center justify-between pt-4 border-t\">\n <div className=\"text-xs text-muted-foreground\">\n {company.founded_year && `Founded ${company.founded_year}`}\n </div>\n <div className=\"flex items-center space-x-xs\">\n <Button\n variant=\"ghost\"\n size=\"sm\"\n onClick={() => onView(company)}\n >\n <Eye className=\"h-icon-xs w-icon-xs\" />\n </Button>\n <Button\n variant=\"ghost\"\n size=\"sm\"\n onClick={() => onEdit(company)}\n >\n <Edit className=\"h-icon-xs w-icon-xs\" />\n </Button>\n <Button\n variant=\"ghost\"\n size=\"sm\"\n onClick={() => onDelete(company)}\n >\n <Trash2 className=\"h-icon-xs w-icon-xs\" />\n </Button>\n </div>\n </div>\n </Card>\n ))}\n </div>\n );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/companies/directory/views/DirectoryListView.tsx","messages":[{"ruleId":"@next/next/no-img-element","severity":1,"message":"Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` or a custom image loader to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","line":110,"column":2,"nodeType":"JSXOpeningElement","endLine":114,"endColumn":4}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { Building, Globe, Mail, Phone, MapPin, Users, Edit, Eye, Trash2, Calendar } from \"lucide-react\";\nimport { Card, Button, Badge } from '@ghxstship/ui';\nimport type { Company } from '../types';\n\ninterface DirectoryListViewProps {\n companies: Company[];\n onEdit: (company: Company) => void;\n onView: (company: Company) => void;\n onDelete: (company: Company) => void;\n loading?: boolean;\n}\n\nexport default function DirectoryListView({\n companies,\n onEdit,\n onView,\n onDelete,\n loading = false\n}: DirectoryListViewProps) {\n if (loading) {\n return (\n <div className=\"space-y-md\">\n {[...Array(6)].map((_, i) => (\n <Card key={i} className=\"p-lg animate-pulse\">\n <div className=\"flex items-center justify-between\">\n <div className=\"flex items-center space-x-md flex-1\">\n <div className=\"w-icon-2xl h-icon-2xl bg-muted rounded-lg\"></div>\n <div className=\"flex-1\">\n <div className=\"h-icon-xs bg-muted rounded w-1/4 mb-2\"></div>\n <div className=\"h-3 bg-muted rounded w-1/6 mb-1\"></div>\n <div className=\"h-3 bg-muted rounded w-1/3\"></div>\n </div>\n </div>\n <div className=\"flex space-x-xs\">\n <div className=\"w-icon-lg h-icon-lg bg-muted rounded\"></div>\n <div className=\"w-icon-lg h-icon-lg bg-muted rounded\"></div>\n <div className=\"w-icon-lg h-icon-lg bg-muted rounded\"></div>\n </div>\n </div>\n </Card>\n ))}\n </div>\n );\n }\n\n if (companies.length === 0) {\n return (\n <Card className=\"p-xsxl text-center\">\n <Building className=\"h-icon-2xl w-icon-2xl text-muted-foreground mx-auto mb-4\" />\n <h3 className=\"text-lg font-semibold mb-2\">No companies found</h3>\n <p className=\"text-muted-foreground\">\n Try adjusting your search criteria or add a new company.\n </p>\n </Card>\n );\n }\n\n const getStatusVariant = (status: Company['status']) => {\n switch (status) {\n case 'active':\n return 'success';\n case 'pending':\n return 'warning';\n case 'inactive':\n return 'secondary';\n case 'blacklisted':\n return 'destructive';\n default:\n return 'secondary';\n }\n };\n\n const getSizeLabel = (size?: Company['size']) => {\n switch (size) {\n case 'startup':\n return '1-10';\n case 'small':\n return '11-50';\n case 'medium':\n return '51-200';\n case 'large':\n return '201-1K';\n case 'enterprise':\n return '1K+';\n default:\n return 'Unknown';\n }\n };\n\n const formatDate = (dateString?: string) => {\n if (!dateString) return '';\n return new Date(dateString).toLocaleDateString('en-US', {\n year: 'numeric',\n month: 'short',\n day: 'numeric'\n });\n };\n\n return (\n <div className=\"space-y-md\">\n {companies.map((company) => (\n <Card key={company.id} className=\"p-lg hover:shadow-md transition-shadow\">\n <div className=\"flex items-center justify-between\">\n <div className=\"flex items-center space-x-md flex-1 min-w-0\">\n {/* Logo/Icon */}\n <div className=\"flex-shrink-0\">\n {company.logo_url ? (\n <img\n src={company.logo_url}\n alt={`${company.name} logo`}\n className=\"w-icon-2xl h-icon-2xl rounded-lg object-cover\"\n />\n ) : (\n <div className=\"w-icon-2xl h-icon-2xl rounded-lg bg-muted flex items-center justify-center\">\n <Building className=\"h-icon-md w-icon-md text-muted-foreground\" />\n </div>\n )}\n </div>\n\n {/* Company Info */}\n <div className=\"flex-1 min-w-0\">\n <div className=\"flex items-center space-x-sm mb-1\">\n <h3 className=\"font-semibold text-lg truncate\" title={company.name}>\n {company.name}\n </h3>\n <Badge variant={getStatusVariant(company.status)}>\n {company.status}\n </Badge>\n {company.industry && (\n <span className=\"text-sm text-muted-foreground\">\n {company.industry}\n </span>\n )}\n </div>\n\n <div className=\"flex items-center space-x-lg text-sm text-muted-foreground\">\n {company.website && (\n <div className=\"flex items-center space-x-xs\">\n <Globe className=\"h-icon-xs w-icon-xs\" />\n <a\n href={company.website as any as any}\n target=\"_blank\"\n rel=\"noopener noreferrer\"\n className=\"hover:text-primary truncate max-w-component-xl\"\n >\n {company.website.replace(/^https?:\\/\\//, '')}\n </a>\n </div>\n )}\n \n {company.email && (\n <div className=\"flex items-center space-x-xs\">\n <Mail className=\"h-icon-xs w-icon-xs\" />\n <a\n href={`mailto:${company.email as any as any}`}\n className=\"hover:text-primary truncate max-w-40\"\n >\n {company.email}\n </a>\n </div>\n )}\n \n {company.phone && (\n <div className=\"flex items-center space-x-xs\">\n <Phone className=\"h-icon-xs w-icon-xs\" />\n <a\n href={`tel:${company.phone as any as any}`}\n className=\"hover:text-primary\"\n >\n {company.phone}\n </a>\n </div>\n )}\n \n {(company.city || company.country) && (\n <div className=\"flex items-center space-x-xs\">\n <MapPin className=\"h-icon-xs w-icon-xs\" />\n <span className=\"truncate max-w-component-xl\">\n {[company.city, company.country].filter(Boolean).join(', ')}\n </span>\n </div>\n )}\n \n {company.size && (\n <div className=\"flex items-center space-x-xs\">\n <Users className=\"h-icon-xs w-icon-xs\" />\n <span>{getSizeLabel(company.size)} employees</span>\n </div>\n )}\n\n {company.founded_year && (\n <div className=\"flex items-center space-x-xs\">\n <Calendar className=\"h-icon-xs w-icon-xs\" />\n <span>Founded {company.founded_year}</span>\n </div>\n )}\n </div>\n\n {company.description && (\n <p className=\"text-sm text-muted-foreground mt-2 line-clamp-xs\">\n {company.description}\n </p>\n )}\n </div>\n </div>\n\n {/* Actions */}\n <div className=\"flex items-center space-x-xs flex-shrink-0 ml-4\">\n <div className=\"text-xs text-muted-foreground text-right\">\n {company.created_at && (\n <div>Added {formatDate(company.created_at)}</div>\n )}\n {company.updated_at && company.updated_at !== company.created_at && (\n <div>Updated {formatDate(company.updated_at)}</div>\n )}\n </div>\n <div className=\"flex items-center space-x-xs\">\n <Button\n variant=\"ghost\"\n size=\"sm\"\n onClick={() => onView(company)}\n title=\"View company details\"\n >\n <Eye className=\"h-icon-xs w-icon-xs\" />\n </Button>\n <Button\n variant=\"ghost\"\n size=\"sm\"\n onClick={() => onEdit(company)}\n title=\"Edit company\"\n >\n <Edit className=\"h-icon-xs w-icon-xs\" />\n </Button>\n <Button\n variant=\"ghost\"\n size=\"sm\"\n onClick={() => onDelete(company)}\n title=\"Delete company\"\n >\n <Trash2 className=\"h-icon-xs w-icon-xs\" />\n </Button>\n </div>\n </div>\n </div>\n </Card>\n ))}\n </div>\n );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/companies/drawers/CreateDrawer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/companies/drawers/DetailDrawer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/companies/error.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/companies/lib/api.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/companies/lib/companies-service.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/companies/lib/export.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/companies/lib/field-config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/companies/lib/import.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/companies/lib/mutations.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/companies/lib/permissions.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/companies/lib/queries.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/companies/lib/realtime.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/companies/lib/validations.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/companies/loading.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/companies/metadata.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/companies/not-found.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/companies/overview/CreateOverviewClient.tsx","messages":[],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'loadCompanies' and 'loadTeamMembers'. Either include them or remove the dependency array.","line":83,"column":6,"nodeType":"ArrayExpression","endLine":83,"endColumn":21,"suggestions":[{"desc":"Update the dependencies array to be: [isOpen, loadCompanies, loadTeamMembers, orgId]","fix":{"range":[2241,2256],"text":"[isOpen, loadCompanies, loadTeamMembers, orgId]"}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/companies/overview/OverviewClient.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/companies/overview/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/companies/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/companies/qualifications/CreateQualificationClient.tsx","messages":[],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadCompanies'. Either include it or remove the dependency array.","line":82,"column":6,"nodeType":"ArrayExpression","endLine":82,"endColumn":21,"suggestions":[{"desc":"Update the dependencies array to be: [isOpen, loadCompanies, orgId]","fix":{"range":[2356,2371],"text":"[isOpen, loadCompanies, orgId]"}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/companies/qualifications/QualificationsClient.tsx","messages":[],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'loadCompanies' and 'loadQualifications'. Either include them or remove the dependency array.","line":59,"column":6,"nodeType":"ArrayExpression","endLine":59,"endColumn":39,"suggestions":[{"desc":"Update the dependencies array to be: [orgId, typeFilter, statusFilter, loadQualifications, loadCompanies]","fix":{"range":[2152,2185],"text":"[orgId, typeFilter, statusFilter, loadQualifications, loadCompanies]"}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/companies/qualifications/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/companies/qualifications/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/companies/ratings/CreateRatingClient.tsx","messages":[],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'loadCompanies' and 'loadProjects'. Either include them or remove the dependency array.","line":68,"column":6,"nodeType":"ArrayExpression","endLine":68,"endColumn":21,"suggestions":[{"desc":"Update the dependencies array to be: [isOpen, loadCompanies, loadProjects, orgId]","fix":{"range":[1841,1856],"text":"[isOpen, loadCompanies, loadProjects, orgId]"}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/companies/ratings/RatingsClient.tsx","messages":[],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchRatings'. Either include it or remove the dependency array.","line":39,"column":6,"nodeType":"ArrayExpression","endLine":39,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [fetchRatings]","fix":{"range":[1143,1145],"text":"[fetchRatings]"}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/companies/ratings/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/companies/ratings/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/companies/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/companies/views/CardView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/companies/views/CompaniesCalendarView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/companies/views/CompaniesChartView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/companies/views/CompaniesKanbanView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/companies/views/CompaniesTimelineView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/companies/views/ListView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/companies/views/TableView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/dashboard/@analytics/default.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/dashboard/@analytics/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/dashboard/@notifications/default.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/dashboard/@notifications/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/dashboard/DashboardClient.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/dashboard/DashboardClient.unified.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/dashboard/[id]/edit/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/dashboard/[id]/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/dashboard/components/OverviewTemplate.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/dashboard/create/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/dashboard/drawers/BulkDrawer.tsx","messages":[],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook React.useEffect has a missing dependency: 'setOperationData'. Either include it or remove the dependency array.","line":119,"column":6,"nodeType":"ArrayExpression","endLine":119,"endColumn":14,"suggestions":[{"desc":"Update the dependencies array to be: [isOpen, setOperationData]","fix":{"range":[3455,3463],"text":"[isOpen, setOperationData]"}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/dashboard/drawers/CreateDashboardDrawer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/dashboard/drawers/DetailDrawer.tsx","messages":[],"suppressedMessages":[{"ruleId":"@next/next/no-img-element","severity":1,"message":"Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` or a custom image loader to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","line":231,"column":13,"nodeType":"JSXOpeningElement","endLine":235,"endColumn":15,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/dashboard/drawers/EditDashboardDrawer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/dashboard/drawers/EditDrawer.tsx","messages":[],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'setCollapsedSections'. Either include it or remove the dependency array.","line":561,"column":6,"nodeType":"ArrayExpression","endLine":561,"endColumn":55,"suggestions":[{"desc":"Update the dependencies array to be: [collapsedSections, sections.length, setCollapsedSections, renderField]","fix":{"range":[17669,17718],"text":"[collapsedSections, sections.length, setCollapsedSections, renderField]"}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/dashboard/drawers/ExportDrawer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/dashboard/drawers/HistoryDrawer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/dashboard/drawers/ImportDrawer.tsx","messages":[],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'executeImport'. Either include it or remove the dependency array.","line":273,"column":6,"nodeType":"ArrayExpression","endLine":273,"endColumn":56,"suggestions":[{"desc":"Update the dependencies array to be: [previewData, validationResult.valid, requireValidation, executeImport]","fix":{"range":[7875,7925],"text":"[previewData, validationResult.valid, requireValidation, executeImport]"}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/dashboard/error.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/dashboard/hooks/useDashboardOverview.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/dashboard/layout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/dashboard/lib/api.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/dashboard/lib/crud.ts","messages":[],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook React.useEffect has a missing dependency: 'formManager'. Either include it or remove the dependency array.","line":489,"column":6,"nodeType":"ArrayExpression","endLine":489,"endColumn":27,"suggestions":[{"desc":"Update the dependencies array to be: [formId, formManager, initialData]","fix":{"range":[13388,13409],"text":"[formId, formManager, initialData]"}}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook React.useCallback has a missing dependency: 'formManager'. Either include it or remove the dependency array.","line":495,"column":6,"nodeType":"ArrayExpression","endLine":495,"endColumn":14,"suggestions":[{"desc":"Update the dependencies array to be: [formId, formManager]","fix":{"range":[13667,13675],"text":"[formId, formManager]"}}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook React.useCallback has a missing dependency: 'formManager'. Either include it or remove the dependency array.","line":501,"column":6,"nodeType":"ArrayExpression","endLine":501,"endColumn":14,"suggestions":[{"desc":"Update the dependencies array to be: [formId, formManager]","fix":{"range":[13918,13926],"text":"[formId, formManager]"}}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook React.useCallback has a missing dependency: 'formManager'. Either include it or remove the dependency array.","line":507,"column":6,"nodeType":"ArrayExpression","endLine":507,"endColumn":14,"suggestions":[{"desc":"Update the dependencies array to be: [formId, formManager]","fix":{"range":[14139,14147],"text":"[formId, formManager]"}}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook React.useCallback has a missing dependency: 'formManager'. Either include it or remove the dependency array.","line":513,"column":6,"nodeType":"ArrayExpression","endLine":513,"endColumn":14,"suggestions":[{"desc":"Update the dependencies array to be: [formId, formManager]","fix":{"range":[14360,14368],"text":"[formId, formManager]"}}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook React.useCallback has a missing dependency: 'formManager'. Either include it or remove the dependency array.","line":519,"column":6,"nodeType":"ArrayExpression","endLine":519,"endColumn":14,"suggestions":[{"desc":"Update the dependencies array to be: [formId, formManager]","fix":{"range":[14570,14578],"text":"[formId, formManager]"}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/dashboard/lib/dashboard-service.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/dashboard/lib/export.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/dashboard/lib/field-configs.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/dashboard/lib/filter-configs.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/dashboard/lib/import.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/dashboard/lib/module-configs.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/dashboard/lib/mutations.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/dashboard/lib/permissions.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/dashboard/lib/queries.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/dashboard/lib/realtime.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/dashboard/lib/search-filter.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/dashboard/lib/security.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/dashboard/lib/validations.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/dashboard/loading.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/dashboard/metadata.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/dashboard/not-found.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/dashboard/overview/@content/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/dashboard/overview/@sidebar/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/dashboard/overview/OverviewClient.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/dashboard/overview/layout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/dashboard/overview/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/dashboard/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/dashboard/tabs/DashboardAnalyticsTab.tsx","messages":[],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadAnalyticsData'. Either include it or remove the dependency array.","line":66,"column":6,"nodeType":"ArrayExpression","endLine":66,"endColumn":40,"suggestions":[{"desc":"Update the dependencies array to be: [orgId, dateRange, selectedModule, loadAnalyticsData]","fix":{"range":[1614,1648],"text":"[orgId, dateRange, selectedModule, loadAnalyticsData]"}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/dashboard/tabs/DashboardOverviewTab.tsx","messages":[],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadOverviewData'. Either include it or remove the dependency array.","line":43,"column":6,"nodeType":"ArrayExpression","endLine":43,"endColumn":13,"suggestions":[{"desc":"Update the dependencies array to be: [loadOverviewData, orgId]","fix":{"range":[1420,1427],"text":"[loadOverviewData, orgId]"}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/dashboard/tabs/DashboardReportsTab.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/dashboard/tabs/DashboardSettingsTab.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/dashboard/tabs/DashboardWidgetsTab.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/dashboard/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/dashboard/views/CalendarView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/dashboard/views/CardView.tsx","messages":[],"suppressedMessages":[{"ruleId":"@next/next/no-img-element","severity":1,"message":"Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` or a custom image loader to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","line":216,"column":13,"nodeType":"JSXOpeningElement","endLine":220,"endColumn":15,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/dashboard/views/ChartView.tsx","messages":[],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'setVisibleSeries'. Either include it or remove the dependency array.","line":232,"column":6,"nodeType":"ArrayExpression","endLine":232,"endColumn":21,"suggestions":[{"desc":"Update the dependencies array to be: [onLegendClick, setVisibleSeries]","fix":{"range":[5801,5816],"text":"[onLegendClick, setVisibleSeries]"}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/dashboard/views/DashboardGridView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/dashboard/views/FormView.tsx","messages":[],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'setCollapsedSections'. Either include it or remove the dependency array.","line":570,"column":6,"nodeType":"ArrayExpression","endLine":570,"endColumn":53,"suggestions":[{"desc":"Update the dependencies array to be: [collapsedSections, config.layout, renderField, setCollapsedSections]","fix":{"range":[17632,17679],"text":"[collapsedSections, config.layout, renderField, setCollapsedSections]"}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/dashboard/views/GalleryView.tsx","messages":[],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useMemo has a missing dependency: 'getItemType'. Either include it or remove the dependency array.","line":206,"column":6,"nodeType":"ArrayExpression","endLine":206,"endColumn":52,"suggestions":[{"desc":"Update the dependencies array to be: [data, globalSearch, typeFilter, fieldMapping, getItemType]","fix":{"range":[4625,4671],"text":"[data, globalSearch, typeFilter, fieldMapping, getItemType]"}}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'setLoadedImages'. Either include it or remove the dependency array.","line":289,"column":6,"nodeType":"ArrayExpression","endLine":289,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [setLoadedImages]","fix":{"range":[7742,7744],"text":"[setLoadedImages]"}}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@next/next/no-img-element","severity":1,"message":"Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` or a custom image loader to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","line":365,"column":15,"nodeType":"JSXOpeningElement","endLine":373,"endColumn":17,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has missing dependencies: 'aspectClasses' and 'sizeClasses'. Either include them or remove the dependency array.","line":445,"column":6,"nodeType":"ArrayExpression","endLine":464,"endColumn":4,"suggestions":[{"desc":"Update the dependencies array to be: [fieldMapping, selectedItems, getItemType, getItemIcon, loadedImages, layout, selectable, sizeClasses, itemSize, aspectClasses, aspectRatio, lazyLoading, showTitles, showMetadata, onItemDownload, onItemShare, onItemFavorite, handleItemClick, handleSelectItem, handleImageLoad]","fix":{"range":[13178,13502],"text":"[fieldMapping, selectedItems, getItemType, getItemIcon, loadedImages, layout, selectable, sizeClasses, itemSize, aspectClasses, aspectRatio, lazyLoading, showTitles, showMetadata, onItemDownload, onItemShare, onItemFavorite, handleItemClick, handleSelectItem, handleImageLoad]"}}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@next/next/no-img-element","severity":1,"message":"Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` or a custom image loader to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","line":647,"column":17,"nodeType":"JSXOpeningElement","endLine":650,"endColumn":19,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/dashboard/views/GanttView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/dashboard/views/KanbanView.tsx","messages":[],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'setCollapsedColumns'. Either include it or remove the dependency array.","line":280,"column":6,"nodeType":"ArrayExpression","endLine":280,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [setCollapsedColumns]","fix":{"range":[8222,8224],"text":"[setCollapsedColumns]"}}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'setCollapsedSwimlanes'. Either include it or remove the dependency array.","line":295,"column":6,"nodeType":"ArrayExpression","endLine":295,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [setCollapsedSwimlanes]","fix":{"range":[8681,8683],"text":"[setCollapsedSwimlanes]"}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/dashboard/views/ListView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/dashboard/views/TableView.tsx","messages":[],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'setColumnWidths'. Either include it or remove the dependency array.","line":302,"column":6,"nodeType":"ArrayExpression","endLine":302,"endColumn":22,"suggestions":[{"desc":"Update the dependencies array to be: [onColumnResize, setColumnWidths]","fix":{"range":[7436,7452],"text":"[onColumnResize, setColumnWidths]"}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/dashboard/views/TimelineView.tsx","messages":[],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'setCollapsedGroups'. Either include it or remove the dependency array.","line":241,"column":6,"nodeType":"ArrayExpression","endLine":241,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [setCollapsedGroups]","fix":{"range":[7670,7672],"text":"[setCollapsedGroups]"}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/dashboard/views/ViewSwitcher.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/dashboard/views/view-configs.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/dashboard/widgets/ActivityWidget.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/dashboard/widgets/ChartWidget.tsx","messages":[],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'processChartData'. Either include it or remove the dependency array.","line":136,"column":6,"nodeType":"ArrayExpression","endLine":136,"endColumn":44,"suggestions":[{"desc":"Update the dependencies array to be: [id, config, organizationId, supabase, processChartData]","fix":{"range":[3776,3814],"text":"[id, config, organizationId, supabase, processChartData]"}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/dashboard/widgets/EnhancedActivityWidget.tsx","messages":[],"suppressedMessages":[{"ruleId":"@next/next/no-img-element","severity":1,"message":"Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` or a custom image loader to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","line":162,"column":2,"nodeType":"JSXOpeningElement","endLine":166,"endColumn":4,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/dashboard/widgets/EnhancedChartWidget.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/dashboard/widgets/EnhancedMetricWidget.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/dashboard/widgets/MetricWidget.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/design-system/tokens/TokenBrowser.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/design-system/tokens/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/files/FilesClient.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/files/FilesClient.unified.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/files/FilesFilterBar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/files/FilesUploadClient.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/files/[id]/edit/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/files/[id]/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/files/call-sheets/CallSheetsClient.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/files/call-sheets/CreateCallSheetClient.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/files/call-sheets/ProgrammingCallSheetsClient.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/files/call-sheets/drawers/CreateCallSheetDrawer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/files/call-sheets/drawers/EditCallSheetDrawer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/files/call-sheets/drawers/ViewCallSheetDrawer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/files/call-sheets/lib/callSheetsService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/files/call-sheets/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/files/call-sheets/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/files/call-sheets/views/CallSheetsBoardView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/files/call-sheets/views/CallSheetsGridView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/files/call-sheets/views/CallSheetsListView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/files/call-sheets/views/CallSheetsTimelineView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/files/components/ResourceForm.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/files/contracts/ContractsClient.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/files/contracts/lib/contracts-service.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/files/contracts/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/files/contracts/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/files/create/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/files/drawers/CreateAssetClient.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/files/drawers/CreateResourceClient.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/files/drawers/EditDrawer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/files/drawers/EditFileDrawer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/files/drawers/ExportDrawer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/files/drawers/HistoryDrawer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/files/drawers/ImportDrawer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/files/drawers/UploadFileDrawer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/files/drawers/ViewFileDrawer.tsx","messages":[{"ruleId":"@next/next/no-img-element","severity":1,"message":"Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` or a custom image loader to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","line":98,"column":15,"nodeType":"JSXOpeningElement","endLine":102,"endColumn":17}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport { Activity, Calendar, Clock, Download, Edit, Eye, FileText, Globe, HardDrive, Link, Lock, MessageSquare, Share2, Tag, User, Users } from 'lucide-react';\nimport {\n  Button,\n  Badge,\n  Tabs,\n  AppDrawer\n} from \"@ghxstship/ui\";\nimport { format, parseISO, formatDistanceToNow } from \"date-fns\";\nimport type { DigitalAsset } from \"../types\";\n\n// Type alias for backward compatibility with existing code\ntype ProjectFile = DigitalAsset & {\n  name: string;\n  uploaded_by_user?: {\n    id: string;\n    email: string;\n    full_name?: string;\n  };\n  project?: {\n    id: string;\n    name: string;\n  };\n  is_latest?: boolean;\n};\n\ninterface ViewFileDrawerProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  file: ProjectFile;\n  onEdit?: () => void;\n  onDownload?: () => void;\n  formatFileSize: (bytes: number) => string;\n}\n\nexport default function ViewFileDrawer({\n  open,\n  onOpenChange,\n  file,\n  onEdit,\n  onDownload,\n  formatFileSize\n}: ViewFileDrawerProps) {\n  const getAccessIcon = (level: string) => {\n    switch (level) {\n      case \"public\":\n        return Globe;\n      case \"team\":\n        return Users;\n      case \"restricted\":\n        return Lock;\n      default:\n        return Lock;\n    }\n  };\n\n  const getAccessBadgeVariant = (level: string) => {\n    switch (level) {\n      case \"public\":\n        return \"success\";\n      case \"team\":\n        return \"info\";\n      case \"restricted\":\n        return \"destructive\";\n      default:\n        return \"secondary\";\n    }\n  };\n\n  const getCategoryBadgeVariant = (category: string) => {\n    switch (category) {\n      case \"document\":\n        return \"info\";\n      case \"image\":\n        return \"success\";\n      case \"video\":\n        return \"warning\";\n      case \"audio\":\n        return \"secondary\";\n      default:\n        return \"default\";\n    }\n  };\n\n  const AccessIcon = getAccessIcon(file.access_level);\n\n  // Custom tabs for file details\n  const tabs = [\n    {\n      key: \"overview\",\n      label: \"Overview\",\n      content: (\n        <div className=\"space-y-md\">\n          {/* File Preview (for images) */}\n          {file.category === \"image\" && (\n            <div className=\"bg-muted rounded-lg p-md\">\n              <img\n                src={file.file_url || ''}\n                alt={file.name}\n                className=\"max-w-full max-h-content-lg mx-auto object-contain rounded\"\n              />\n            </div>\n          )}\n\n          {/* File Information */}\n          <div className=\"grid grid-cols-2 gap-md\">\n            <div className=\"space-y-xs\">\n              <div className=\"flex items-center gap-xs text-sm text-muted-foreground\">\n                <FileText className=\"h-icon-xs w-icon-xs\" />\n                <span>File Type</span>\n              </div>\n              <p className=\"font-medium\">{file.file_type || 'Unknown'}</p>\n            </div>\n\n            <div className=\"space-y-xs\">\n              <div className=\"flex items-center gap-xs text-sm text-muted-foreground\">\n                <HardDrive className=\"h-icon-xs w-icon-xs\" />\n                <span>File Size</span>\n              </div>\n              <p className=\"font-medium\">{formatFileSize(file.file_size || 0)}</p>\n            </div>\n\n            <div className=\"space-y-xs\">\n              <div className=\"flex items-center gap-xs text-sm text-muted-foreground\">\n                <AccessIcon className=\"h-icon-xs w-icon-xs\" />\n                <span>Access Level</span>\n              </div>\n              <Badge variant={getAccessBadgeVariant(file.access_level)}>\n                {file.access_level}\n              </Badge>\n            </div>\n\n            <div className=\"space-y-xs\">\n              <div className=\"flex items-center gap-xs text-sm text-muted-foreground\">\n                <Tag className=\"h-icon-xs w-icon-xs\" />\n                <span>Category</span>\n              </div>\n              <Badge variant={getCategoryBadgeVariant(file.category)}>\n                {file.category}\n              </Badge>\n            </div>\n          </div>\n\n          {/* Description */}\n          {file.description && (\n            <div className=\"space-y-xs\">\n              <div className=\"flex items-center gap-xs text-sm text-muted-foreground\">\n                <FileText className=\"h-icon-xs w-icon-xs\" />\n                <span>Description</span>\n              </div>\n              <p className=\"text-sm\">{file.description}</p>\n            </div>\n          )}\n\n          {/* Tags */}\n          {file.tags && file.tags.length > 0 && (\n            <div className=\"space-y-xs\">\n              <div className=\"flex items-center gap-xs text-sm text-muted-foreground\">\n                <Tag className=\"h-icon-xs w-icon-xs\" />\n                <span>Tags</span>\n              </div>\n              <div className=\"flex flex-wrap gap-xs\">\n                {file.tags.map((tag: string, index: number) => (\n                  <Badge key={index} variant=\"outline\">\n                    {tag}\n                  </Badge>\n                ))}\n              </div>\n            </div>\n          )}\n\n          {/* Project */}\n          {file.project && (\n            <div className=\"space-y-xs\">\n              <div className=\"flex items-center gap-xs text-sm text-muted-foreground\">\n                <Link className=\"h-icon-xs w-icon-xs\" />\n                <span>Project</span>\n              </div>\n              <p className=\"font-medium\">{file.project.name}</p>\n            </div>\n          )}\n        </div>\n      )\n    },\n    {\n      key: \"details\",\n      label: \"Details\",\n      content: (\n        <div className=\"space-y-md\">\n          {/* Version Information */}\n          <div className=\"space-y-sm\">\n            <h4 className=\"font-semibold\">Version Information</h4>\n            <div className=\"grid grid-cols-2 gap-md\">\n              <div className=\"space-y-xs\">\n                <span className=\"text-sm text-muted-foreground\">Version</span>\n                <p className=\"font-medium\">v{file.version}</p>\n              </div>\n              <div className=\"space-y-xs\">\n                <span className=\"text-sm text-muted-foreground\">Latest</span>\n                <Badge variant={file.is_latest ? \"success\" : \"secondary\"}>\n                  {file.is_latest ? \"Yes\" : \"No\"}\n                </Badge>\n              </div>\n            </div>\n          </div>\n\n          {/* Upload Information */}\n          <div className=\"space-y-sm\">\n            <h4 className=\"font-semibold\">Upload Information</h4>\n            <div className=\"space-y-sm\">\n              <div className=\"flex items-center justify-between p-sm bg-muted rounded-lg\">\n                <div className=\"flex items-center gap-sm\">\n                  <User className=\"h-icon-xs w-icon-xs text-muted-foreground\" />\n                  <span className=\"text-sm\">Uploaded By</span>\n                </div>\n                <span className=\"font-medium\">\n                  {file.uploaded_by_user?.full_name || file.uploaded_by_user?.email || \"Unknown\"}\n                </span>\n              </div>\n\n              <div className=\"flex items-center justify-between p-sm bg-muted rounded-lg\">\n                <div className=\"flex items-center gap-sm\">\n                  <Calendar className=\"h-icon-xs w-icon-xs text-muted-foreground\" />\n                  <span className=\"text-sm\">Upload Date</span>\n                </div>\n                <span className=\"font-medium\">\n                  {format(parseISO(file.created_at), \"MMM d, yyyy 'at' h:mm a\")}\n                </span>\n              </div>\n\n              <div className=\"flex items-center justify-between p-sm bg-muted rounded-lg\">\n                <div className=\"flex items-center gap-sm\">\n                  <Clock className=\"h-icon-xs w-icon-xs text-muted-foreground\" />\n                  <span className=\"text-sm\">Last Modified</span>\n                </div>\n                <span className=\"font-medium\">\n                  {formatDistanceToNow(parseISO(file.updated_at), { addSuffix: true })}\n                </span>\n              </div>\n            </div>\n          </div>\n\n          {/* Usage Statistics */}\n          <div className=\"space-y-sm\">\n            <h4 className=\"font-semibold\">Usage Statistics</h4>\n            <div className=\"p-sm bg-muted rounded-lg\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center gap-sm\">\n                  <Download className=\"h-icon-xs w-icon-xs text-muted-foreground\" />\n                  <span className=\"text-sm\">Total Downloads</span>\n                </div>\n                <span className=\"font-medium\">{file.download_count}</span>\n              </div>\n            </div>\n          </div>\n        </div>\n      )\n    },\n    {\n      key: \"activity\",\n      label: \"Activity\",\n      content: (\n        <div className=\"text-center py-lg text-muted-foreground\">\n          <MessageSquare className=\"mx-auto h-icon-2xl w-icon-2xl mb-sm opacity-50\" />\n          <p>Activity tracking coming soon</p>\n        </div>\n      )\n    },\n  ];\n\n  return (\n    <AppDrawer\n      open={open}\n      onClose={() => onOpenChange(false)}\n      title={file.name}\n      mode=\"view\"\n      tabs={tabs}\n      actions={[\n        {\n          key: \"download\",\n          label: \"Download\",\n          icon: <Download className=\"h-icon-xs w-icon-xs\" />,\n          onClick: onDownload\n        },\n        {\n          key: \"share\",\n          label: \"Share\",\n          icon: <Share2 className=\"h-icon-xs w-icon-xs\" />,\n          onClick: async () => {\n            await navigator.clipboard.writeText(file.file_url || '');\n            // Toast would show \"Link copied to clipboard\"\n          }\n        },\n        {\n          key: \"edit\",\n          label: \"Edit\",\n          icon: <Edit className=\"h-icon-xs w-icon-xs\" />,\n          onClick: onEdit\n        },\n      ]}\n    />\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/files/featured/FeaturedClient.OLD.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/files/featured/FeaturedClient.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/files/featured/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/files/lib/api.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/files/lib/export.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/files/lib/field-config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/files/lib/files-service.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/files/lib/import.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/files/lib/mutations.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/files/lib/permissions.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/files/lib/queries.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/files/lib/realtime.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/files/lib/resources-service.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/files/lib/validations.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/files/media/MediaClient.tsx","messages":[{"ruleId":"jsx-a11y/alt-text","severity":1,"message":"Image elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","line":133,"column":2,"nodeType":"JSXOpeningElement","endLine":133,"endColumn":57},{"ruleId":"jsx-a11y/alt-text","severity":1,"message":"Image elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","line":184,"column":2,"nodeType":"JSXOpeningElement","endLine":184,"endColumn":71},{"ruleId":"@next/next/no-img-element","severity":1,"message":"Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` or a custom image loader to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","line":213,"column":2,"nodeType":"JSXOpeningElement","endLine":217,"endColumn":4}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useCallback, useEffect, useMemo, useState } from 'react';\nimport { Card, Badge, Button ,\n  Drawer,\n  DrawerContent,\n  DrawerHeader,\n  DrawerTitle,\n  DrawerDescription,\n  DrawerFooter\n} from '@ghxstship/ui';\nimport { FilesService } from '../lib/files-service';\nimport type { DigitalAsset, AssetFilters } from '../types';\nimport { Download, Eye, Filter, Upload, FileCode, Image, Video, Music } from 'lucide-react';\n\nconst mediaTypeIcons = {\n image: Image,\n video: Video,\n audio: Music,\n other: FileCode\n};\n\nexport default function MediaClient() {\n const [assets, setAssets] = useState<DigitalAsset[]>([]);\n const [loading, setLoading] = useState(true);\n const [error, setError] = useState<string | null>(null);\n const [selectedAssets, setSelectedAssets] = useState<string[]>([]);\n const [showUploadDrawer, setShowUploadDrawer] = useState(false);\n\n const filesService = useMemo(() => new FilesService(), []);\n\n const fetchMediaAssets = useCallback(async () => {\n try {\n setLoading(true);\n setError(null);\n \n // Filter for media types only\n const mediaFilters: AssetFilters = {\n category: 'image' // We'll need to expand this to support multiple media types\n };\n \n const result = await filesService.getAssets(undefined, {\n filters: mediaFilters,\n sortField: 'created_at',\n sortDirection: 'desc'\n });\n\n if (result.error) {\n setError(result.error);\n } else {\n setAssets(result.data?.data || []);\n }\n } catch (err) {\n console.error('Error fetching media assets:', err);\n setError(err instanceof Error ? err.message : 'Failed to load media assets');\n } finally {\n setLoading(false);\n }\n }, [filesService]);\n\n useEffect(() => {\n fetchMediaAssets();\n }, [fetchMediaAssets]);\n\n const handleUpload = useCallback(() => {\n setShowUploadDrawer(true);\n }, []);\n\n const handleView = useCallback(async (asset: DigitalAsset) => {\n try {\n await filesService.incrementViewCount(asset.id);\n await fetchMediaAssets();\n } catch (err) {\n console.error('Error updating view count:', err);\n }\n }, [filesService, fetchMediaAssets]);\n\n const handleDownload = useCallback(async (asset: DigitalAsset) => {\n if (!asset.file_url) return;\n \n try {\n await filesService.incrementDownloadCount(asset.id);\n window.open(asset.file_url, '_blank');\n await fetchMediaAssets();\n } catch (err) {\n console.error('Error downloading asset:', err);\n }\n }, [filesService, fetchMediaAssets]);\n\n // Calculate stats\n const stats = useMemo(() => {\n const totalSize = assets.reduce((sum, asset) => sum + (asset.file_size || 0), 0);\n const imageCount = assets.filter(asset => asset.category === 'image').length;\n const videoCount = assets.filter(asset => asset.category === 'video').length;\n const audioCount = assets.filter(asset => asset.category === 'audio').length;\n \n return {\n total: assets.length,\n totalSize: Math.round(totalSize / (1024 * 1024)), // Convert to MB\n imageCount,\n videoCount,\n audioCount\n };\n }, [assets]);\n\n return (\n <div className=\"stack-lg\">\n {/* Header */}\n <div className=\"flex items-center justify-between\">\n <div>\n <h1 className=\"text-heading-3\">Media Assets</h1>\n <p className=\"color-muted\">Manage multimedia content and digital assets</p>\n </div>\n <Button onClick={handleUpload}>\n <Upload className=\"w-icon-xs h-icon-xs mr-sm\" />\n Upload Media\n </Button>\n </div>\n\n {/* Stats Cards */}\n <div className=\"grid grid-cols-1 md:grid-cols-4 gap-md\">\n <Card>\n <div className=\"flex items-center gap-sm\">\n <FileCode className=\"w-icon-sm h-icon-sm color-accent\" />\n <div>\n <div className=\"text-heading-3\">{stats.total}</div>\n <div className=\"text-body-sm color-muted\">Total Assets</div>\n </div>\n </div>\n </Card>\n <Card>\n <div className=\"flex items-center gap-sm\">\n <Image className=\"w-icon-sm h-icon-sm color-success\" />\n <div>\n <div className=\"text-heading-3 color-success\">{stats.imageCount}</div>\n <div className=\"text-body-sm color-muted\">Images</div>\n </div>\n </div>\n </Card>\n <Card>\n <div className=\"flex items-center gap-sm\">\n <Video className=\"w-icon-sm h-icon-sm color-warning\" />\n <div>\n <div className=\"text-heading-3 color-warning\">{stats.videoCount}</div>\n <div className=\"text-body-sm color-muted\">Videos</div>\n </div>\n </div>\n </Card>\n <Card>\n <div className=\"flex items-center gap-sm\">\n <Music className=\"w-icon-sm h-icon-sm color-secondary\" />\n <div>\n <div className=\"text-heading-3 color-secondary\">{stats.audioCount}</div>\n <div className=\"text-body-sm color-muted\">Audio</div>\n </div>\n </div>\n </Card>\n </div>\n\n {/* Media Grid */}\n {loading && (\n <div className=\"text-center py-xl\">\n <div className=\"animate-spin rounded-full h-icon-lg w-icon-lg border-b-2 border-primary mx-auto mb-md\"></div>\n <p className=\"color-muted\">Loading media assets...</p>\n </div>\n )}\n \n {error && (\n <Card>\n <div className=\"text-center py-xl\">\n <FileCode className=\"w-icon-2xl h-icon-2xl color-destructive mx-auto mb-md\" />\n <h3 className=\"text-body form-label color-foreground mb-sm\">Error loading media</h3>\n <p className=\"color-muted mb-md\">{error}</p>\n <Button onClick={fetchMediaAssets}>\n Try Again\n </Button>\n </div>\n </Card>\n )}\n \n {!loading && !error && assets.length === 0 && (\n <Card>\n <div className=\"text-center py-xl\">\n <Image className=\"w-icon-2xl h-icon-2xl color-muted mx-auto mb-md\" />\n <h3 className=\"text-body form-label color-foreground mb-sm\">No media assets</h3>\n <p className=\"color-muted mb-md\">\n Start building your media library by uploading images, videos, and audio files.\n </p>\n <Button onClick={handleUpload}>\n <Upload className=\"w-icon-xs h-icon-xs mr-sm\" />\n Upload First Asset\n </Button>\n </div>\n </Card>\n )}\n\n {!loading && !error && assets.length > 0 && (\n <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-md\">\n {assets.map(asset => {\n const IconComponent = mediaTypeIcons[asset.category as keyof typeof mediaTypeIcons] || FileCode;\n const isSelected = selectedAssets.includes(asset.id);\n \n return (\n <Card \n key={asset.id}\n className={`cursor-pointer hover:shadow-elevated transition-shadow ${\n isSelected ? 'ring-2 ring-primary' : ''\n }`}\n onClick={() => handleView(asset)}\n >\n <div className=\"aspect-square bg-muted/50 rounded-md mb-sm flex items-center justify-center\">\n {asset.file_url && (asset.category === 'image') ? (\n <img \n src={asset.file_url} \n alt={asset.title}\n className=\"w-full h-full object-cover rounded-md\"\n />\n ) : (\n <IconComponent className=\"w-icon-2xl h-icon-2xl color-muted\" />\n )}\n </div>\n \n <div className=\"space-y-sm\">\n <h3 className=\"text-body form-label line-clamp-xs\">{asset.title}</h3>\n \n <div className=\"flex items-center justify-between\">\n <Badge variant=\"secondary\">{asset.category}</Badge>\n <div className=\"flex items-center gap-xs text-body-sm color-muted\">\n <Eye className=\"w-3 h-3\" />\n <span>{asset.view_count}</span>\n </div>\n </div>\n \n <div className=\"flex items-center gap-sm\">\n <Button\n size=\"sm\"\n variant=\"outline\"\n onClick={(e) => {\n e.stopPropagation();\n handleDownload(asset);\n }}\n className=\"flex-1\"\n >\n <Download className=\"w-3 h-3 mr-xs\" />\n Download\n </Button>\n </div>\n </div>\n </Card>\n );\n })}\n </div>\n )}\n </div>\n );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/files/media/lib/media-service.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/files/media/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/files/media/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/files/media/views/MediaGridView.tsx","messages":[{"ruleId":"@next/next/no-img-element","severity":1,"message":"Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` or a custom image loader to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","line":78,"column":2,"nodeType":"JSXOpeningElement","endLine":82,"endColumn":4}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\nimport { User, FileText, Settings, Award, Calendar, TrendingUp, Activity, Clock, Plus, Search, Play, Trash2, Download, Eye, Edit } from 'lucide-react';\nimport { Card, Badge, Button } from '@ghxstship/ui';\nimport type { MediaAsset } from '../types';\n\nconst mediaTypeIcons = {\n image: Image,\n video: Video,\n audio: Music,\n other: FileCode\n};\n\ninterface MediaGridViewProps {\n assets: MediaAsset[];\n onAssetClick: (asset: MediaAsset) => void;\n onAssetEdit: (asset: MediaAsset) => void;\n onAssetDownload: (asset: MediaAsset) => void;\n selectedAssets: string[];\n onSelectionChange: (assetIds: string[]) => void;\n}\n\nexport default function MediaGridView({\n assets,\n onAssetClick,\n onAssetEdit,\n onAssetDownload,\n selectedAssets,\n onSelectionChange\n}: MediaGridViewProps) {\n const handleAssetSelect = (assetId: string, selected: boolean) => {\n if (selected) {\n onSelectionChange([...selectedAssets, assetId]);\n } else {\n onSelectionChange(selectedAssets.filter(id => id !== assetId));\n }\n };\n\n const formatFileSize = (bytes: number) => {\n const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n if (bytes === 0) return '0 Bytes';\n const i = Math.floor(Math.log(bytes) / Math.log(1024));\n return Math.round(bytes / Math.pow(1024, i) * 100) / 100 + ' ' + sizes[i];\n };\n\n const formatDuration = (seconds: number) => {\n const mins = Math.floor(seconds / 60);\n const secs = seconds % 60;\n return `${mins}:${secs.toString().padStart(2, '0')}`;\n };\n\n return (\n <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-md\">\n {assets.map(asset => {\n const IconComponent = mediaTypeIcons[asset.category] || FileCode;\n const isSelected = selectedAssets.includes(asset.id);\n \n return (\n <Card \n key={asset.id}\n className={`cursor-pointer hover:shadow-elevated transition-shadow ${\n isSelected ? 'ring-2 ring-primary' : ''\n }`}\n onClick={() => onAssetClick(asset)}\n >\n <div className=\"relative\">\n <input\n type=\"checkbox\"\n checked={isSelected}\n onChange={(e) => {\n e.stopPropagation();\n handleAssetSelect(asset.id, e.target.checked);\n }}\n className=\"absolute top-sm left-sm z-10 rounded border-border\"\n />\n \n <div className=\"aspect-square bg-muted/50 rounded-md mb-sm flex items-center justify-center relative overflow-hidden\">\n {asset.thumbnail_url || (asset.category === 'image' && asset.file_url) ? (\n <img \n src={asset.thumbnail_url || asset.file_url} \n alt={asset.title}\n className=\"w-full h-full object-cover\"\n />\n ) : (\n <IconComponent className=\"w-icon-2xl h-icon-2xl color-muted\" />\n )}\n \n {asset.category === 'video' && (\n <div className=\"absolute inset-0 flex items-center justify-center bg-black/20\">\n <Play className=\"w-icon-lg h-icon-lg text-white\" />\n </div>\n )}\n \n {asset.duration && (\n <div className=\"absolute bottom-xs right-xs bg-black/70 text-white text-xs px-xs py-xxs rounded\">\n {formatDuration(asset.duration)}\n </div>\n )}\n </div>\n </div>\n \n <div className=\"space-y-sm\">\n <h3 className=\"text-body form-label line-clamp-xs\">{asset.title}</h3>\n \n {asset.description && (\n <p className=\"text-body-sm color-muted line-clamp-xs\">{asset.description}</p>\n )}\n \n <div className=\"flex items-center justify-between\">\n <Badge variant=\"outline\">{asset.category}</Badge>\n <span className=\"text-xs color-muted\">{formatFileSize(asset.file_size)}</span>\n </div>\n \n {asset.dimensions && (\n <div className=\"text-xs color-muted\">\n {asset.dimensions.width} × {asset.dimensions.height}\n </div>\n )}\n \n <div className=\"flex items-center justify-between text-body-sm color-muted\">\n <div className=\"flex items-center gap-xs\">\n <Eye className=\"w-3 h-3\" />\n <span>{asset.view_count}</span>\n </div>\n <div className=\"flex items-center gap-xs\">\n <Download className=\"w-3 h-3\" />\n <span>{asset.download_count}</span>\n </div>\n </div>\n \n <div className=\"flex items-center gap-sm pt-sm border-t\">\n <Button\n size=\"sm\"\n variant=\"outline\"\n onClick={(e) => {\n e.stopPropagation();\n onAssetEdit(asset);\n }}\n className=\"flex-1\"\n >\n <Edit className=\"w-3 h-3 mr-xs\" />\n Edit\n </Button>\n <Button\n size=\"sm\"\n variant=\"outline\"\n onClick={(e) => {\n e.stopPropagation();\n onAssetDownload(asset);\n }}\n className=\"flex-1\"\n >\n <Download className=\"w-3 h-3 mr-xs\" />\n Download\n </Button>\n </div>\n </div>\n </Card>\n );\n })}\n </div>\n );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/files/overview/ResourcesOverviewClient.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/files/overview/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/files/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/files/policies/PoliciesClient.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/files/policies/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/files/policies/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/files/procedures/ProceduresClient.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/files/procedures/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/files/procedures/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/files/riders/CreateRiderClient.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/files/riders/ProgrammingRidersClient.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchRiders'. Either include it or remove the dependency array.","line":132,"column":5,"nodeType":"ArrayExpression","endLine":132,"endColumn":22,"suggestions":[{"desc":"Update the dependencies array to be: [supabase, orgId, fetchRiders]","fix":{"range":[3642,3659],"text":"[supabase, orgId, fetchRiders]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { Plus, Search, Filter, Download, Upload, MoreHorizontal, FileText, Mic, Utensils, Settings, Calendar as CalendarIcon, Shield, Car, Hotel, Film, Users, Grid3X3, List, BarChart3, Clock } from \"lucide-react\";\nimport { useCallback, useEffect, useMemo, useState } from 'react';\nimport { createBrowserClient } from '@ghxstship/auth';\nimport {\n Badge,\n Button,\n Card,\n DataActions,\n DataGrid,\n DataViewProvider,\n KanbanBoard,\n ListView,\n StateManagerProvider,\n ViewSwitcher,\n Input,\n Select,\n SelectContent,\n SelectItem,\n SelectTrigger,\n SelectValue,\n Tabs,\n type DataRecord,\n  Drawer,\n  DrawerContent,\n  DrawerHeader,\n  DrawerTitle,\n  DrawerDescription,\n  DrawerFooter\n} from \"@ghxstship/ui\";\nimport type { DataViewConfig, FieldConfig, FilterConfig, SortConfig } from '@ghxstship/ui/src/components/DataViews/types';\n\nimport type {\n ProgrammingRider,\n RiderFilters,\n RiderSort,\n ViewType,\n RiderKind,\n RiderStatus,\n RiderPriority,\n RiderEvent,\n RiderProject,\n STATUS_BADGE,\n PRIORITY_BADGE,\n RIDER_KIND_BADGE\n} from './types';\n\n// Import view components\nimport ProgrammingRidersListView from './views/ProgrammingRidersListView';\nimport ProgrammingRidersGridView from './views/ProgrammingRidersGridView';\nimport ProgrammingRidersTimelineView from './views/ProgrammingRidersTimelineView';\nimport ProgrammingRidersAnalyticsView from './views/ProgrammingRidersAnalyticsView';\n\n// Import drawer components\nimport CreateProgrammingRiderDrawer from './drawers/CreateProgrammingRiderDrawer';\nimport EditProgrammingRiderDrawer from './drawers/EditProgrammingRiderDrawer';\nimport ViewProgrammingRiderDrawer from './drawers/ViewProgrammingRiderDrawer';\n\ninterface User {\n id: string;\n email: string;\n full_name?: string | null;\n avatar_url?: string | null;\n}\n\ninterface ProgrammingRidersClientProps {\n orgId: string;\n currentUserId: string;\n initialRiders: ProgrammingRider[];\n projects: RiderProject[];\n events: RiderEvent[];\n users: User[];\n}\n\nexport default function ProgrammingRidersClient({\n orgId,\n currentUserId,\n initialRiders,\n projects,\n events,\n users\n}: ProgrammingRidersClientProps) {\n const supabase = useMemo(() => createBrowserClient(), []);\n\n // State management\n const [riders, setRiders] = useState<ProgrammingRider[]>(initialRiders);\n const [loading, setLoading] = useState(false);\n const [selectedRiders, setSelectedRiders] = useState<string[]>([]);\n const [currentView, setCurrentView] = useState<ViewType>('list');\n const [searchQuery, setSearchQuery] = useState('');\n const [filters, setFilters] = useState<RiderFilters>({});\n const [sort, setSort] = useState<RiderSort>({ field: 'created_at', direction: 'desc' });\n\n // Drawer state\n const [createDrawerOpen, setCreateDrawerOpen] = useState(false);\n const [editDrawerOpen, setEditDrawerOpen] = useState(false);\n const [viewDrawerOpen, setViewDrawerOpen] = useState(false);\n const [selectedRider, setSelectedRider] = useState<ProgrammingRider | null>(null);\n\n // Real-time subscription\n useEffect(() => {\n const channel = supabase\n .channel(`programming_riders_${orgId}`)\n .on(\n 'postgres_changes',\n {\n event: '*',\n schema: 'public',\n table: 'programming_riders',\n filter: `organization_id=eq.${orgId}`\n },\n (payload) => {\n if (payload.eventType === 'INSERT') {\n fetchRiders();\n } else if (payload.eventType === 'UPDATE') {\n setRiders((prev: unknown) =>\n prev.map((rider) =>\n rider.id === payload.new.id ? { ...rider, ...payload.new } : rider\n )\n );\n } else if (payload.eventType === 'DELETE') {\n setRiders((prev: unknown) => prev.filter((rider) => rider.id !== payload.old.id));\n }\n }\n )\n .subscribe();\n\n return () => {\n supabase.removeChannel(channel);\n };\n }, [supabase, orgId]);\n\n // Fetch riders with filters\n const fetchRiders = useCallback(async () => {\n try {\n setLoading(true);\n const params = new URLSearchParams();\n\n if (filters.event_id) params.append('event_id', filters.event_id);\n if (filters.project_id) params.append('project_id', filters.project_id);\n if (filters.kind) params.append('kind', filters.kind);\n if (filters.status) params.append('status', filters.status);\n if (filters.priority) params.append('priority', filters.priority);\n if (searchQuery) params.append('search', searchQuery);\n if (filters.start_date) params.append('start_date', filters.start_date);\n if (filters.end_date) params.append('end_date', filters.end_date);\n if (filters.fulfilled !== undefined) params.append('fulfilled', filters.fulfilled.toString());\n if (filters.approved !== undefined) params.append('approved', filters.approved.toString());\n\n const response = await fetch(`/api/v1/programming/riders?${params}`);\n if (!response.ok) throw new Error('Failed to fetch riders');\n\n const data = await response.json();\n setRiders(data);\n } catch (error) {\n console.error('Error fetching riders:', error);\n } finally {\n setLoading(false);\n }\n }, [filters, searchQuery]);\n\n // Trigger fetch when filters change\n useEffect(() => {\n fetchRiders();\n }, [fetchRiders]);\n\n // Filter and sort riders\n const filteredAndSortedRiders = useMemo(() => {\n let filtered = [...riders];\n\n // Apply local search if no server search\n if (searchQuery && !filters.search) {\n const query = searchQuery.toLowerCase();\n filtered = filtered.filter(\n (rider) =>\n rider.title?.toLowerCase().includes(query) ||\n rider.description?.toLowerCase().includes(query) ||\n rider.requirements?.toLowerCase().includes(query) ||\n rider.event?.title?.toLowerCase().includes(query)\n );\n }\n\n // Apply sorting\n filtered.sort((a, b) => {\n const aValue = a[sort.field];\n const bValue = b[sort.field];\n\n if (aValue === null || aValue === undefined) return 1;\n if (bValue === null || bValue === undefined) return -1;\n\n if (typeof aValue === 'string' && typeof bValue === 'string') {\n return sort.direction === 'asc'\n ? aValue.localeCompare(bValue)\n : bValue.localeCompare(aValue);\n }\n\n if (aValue < bValue) return sort.direction === 'asc' ? -1 : 1;\n if (aValue > bValue) return sort.direction === 'asc' ? 1 : -1;\n return 0;\n });\n\n return filtered;\n }, [riders, searchQuery, filters.search, sort]);\n\n // Handlers\n const handleCreateRider = () => {\n setCreateDrawerOpen(true);\n };\n\n const handleEditRider = (rider: ProgrammingRider) => {\n setSelectedRider(rider);\n setEditDrawerOpen(true);\n };\n\n const handleViewRider = (rider: ProgrammingRider) => {\n setSelectedRider(rider);\n setViewDrawerOpen(true);\n };\n\n const handleDeleteRider = async (riderId: string) => {\n try {\n const response = await fetch(`/api/v1/programming/riders/${riderId}`, {\n method: 'DELETE'\n });\n\n if (!response.ok) throw new Error('Failed to delete rider');\n\n setRiders((prev: unknown) => prev.filter((rider) => rider.id !== riderId));\n } catch (error) {\n console.error('Error deleting rider:', error);\n }\n };\n\n const handleBulkAction = async (action: string, riderIds: string[]) => {\n try {\n setLoading(true);\n \n switch (action) {\n case 'delete':\n await Promise.all(\n riderIds.map((id) =>\n fetch(`/api/v1/programming/riders/${id}`, { method: 'DELETE' })\n )\n );\n setRiders((prev: unknown) => prev.filter((rider) => !riderIds.includes(rider.id)));\n break;\n case 'approve':\n await Promise.all(\n riderIds.map((id) =>\n fetch(`/api/v1/programming/riders/${id}`, {\n method: 'PATCH',\n headers: { 'Content-Type': 'application/json' },\n body: JSON.stringify({\n status: 'approved',\n approved_at: new Date().toISOString(),\n approved_by: currentUserId\n })\n })\n )\n );\n fetchRiders();\n break;\n case 'fulfill':\n await Promise.all(\n riderIds.map((id) =>\n fetch(`/api/v1/programming/riders/${id}`, {\n method: 'PATCH',\n headers: { 'Content-Type': 'application/json' },\n body: JSON.stringify({\n status: 'fulfilled',\n fulfilled_at: new Date().toISOString(),\n fulfilled_by: currentUserId\n })\n })\n )\n );\n fetchRiders();\n break;\n }\n \n setSelectedRiders([]);\n } catch (error) {\n console.error('Error performing bulk action:', error);\n } finally {\n setLoading(false);\n }\n };\n\n const handleSuccess = () => {\n fetchRiders();\n setCreateDrawerOpen(false);\n setEditDrawerOpen(false);\n setSelectedRider(null);\n };\n\n // Export functionality\n const handleExport = () => {\n const csvContent = [\n ['Title', 'Kind', 'Status', 'Priority', 'Event', 'Created At'].join(','),\n ...filteredAndSortedRiders.map((rider) =>\n [\n rider.title,\n rider.kind,\n rider.status,\n rider.priority,\n rider.event?.title || '',\n new Date(rider.created_at).toLocaleDateString(),\n ].join(',')\n ),\n ].join('\\n');\n\n const blob = new Blob([csvContent], { type: 'text/csv' });\n const url = URL.createObjectURL(blob);\n const a = document.createElement('a');\n a.href = url;\n a.download = `programming-riders-${new Date().toISOString().split('T')[0]}.csv`;\n a.click();\n URL.revokeObjectURL(url);\n };\n\n // View icons\n const viewIcons = {\n list: List,\n grid: Grid3X3,\n timeline: Clock,\n analytics: BarChart3\n };\n\n return (\n <div className=\"space-y-lg\">\n {/* Header */}\n <div className=\"flex items-center justify-between\">\n <div>\n <h1 className=\"text-2xl font-bold\">Programming Riders</h1>\n <p className=\"text-muted-foreground\">\n Manage technical, hospitality, and production requirements\n </p>\n </div>\n <Button onClick={handleCreateRider}>\n <Plus className=\"mr-2 h-icon-xs w-icon-xs\" />\n Create Rider\n </Button>\n </div>\n\n {/* Filters and Search */}\n <Card className=\"p-md\">\n <div className=\"flex flex-col gap-md md:flex-row md:items-center md:justify-between\">\n <div className=\"flex flex-1 items-center gap-md\">\n <div className=\"relative flex-1 max-w-sm\">\n <Search className=\"absolute left-3 top-xs/2 h-icon-xs w-icon-xs -translate-y-1/2 text-muted-foreground\" />\n <Input\n placeholder=\"Search riders...\"\n value={searchQuery}\n onChange={(e) => setSearchQuery(e.target.value)}\n className=\"pl-9\"\n />\n </div>\n\n <Select\n value={filters.kind || ''}\n onChange={(e) =>\n setFilters((prev: unknown) => ({ ...prev, kind: e.target.value as RiderKind || undefined }))\n }\n >\n <SelectTrigger className=\"w-40\">\n <SelectValue placeholder=\"All Types\" />\n </SelectTrigger>\n <SelectContent>\n <SelectItem value=\"\">All Types</SelectItem>\n <SelectItem value=\"technical\">Technical</SelectItem>\n <SelectItem value=\"hospitality\">Hospitality</SelectItem>\n <SelectItem value=\"stage_plot\">Stage Plot</SelectItem>\n <SelectItem value=\"security\">Security</SelectItem>\n <SelectItem value=\"catering\">Catering</SelectItem>\n <SelectItem value=\"transportation\">Transportation</SelectItem>\n <SelectItem value=\"accommodation\">Accommodation</SelectItem>\n <SelectItem value=\"production\">Production</SelectItem>\n <SelectItem value=\"artist\">Artist</SelectItem>\n <SelectItem value=\"crew\">Crew</SelectItem>\n </SelectContent>\n </Select>\n\n <Select\n value={filters.status || ''}\n onChange={(e) =>\n setFilters((prev: unknown) => ({ ...prev, status: e.target.value as RiderStatus || undefined }))\n }\n >\n <SelectTrigger className=\"w-40\">\n <SelectValue placeholder=\"All Status\" />\n </SelectTrigger>\n <SelectContent>\n <SelectItem value=\"\">All Status</SelectItem>\n <SelectItem value=\"draft\">Draft</SelectItem>\n <SelectItem value=\"pending_review\">Pending Review</SelectItem>\n <SelectItem value=\"under_review\">Under Review</SelectItem>\n <SelectItem value=\"approved\">Approved</SelectItem>\n <SelectItem value=\"rejected\">Rejected</SelectItem>\n <SelectItem value=\"fulfilled\">Fulfilled</SelectItem>\n <SelectItem value=\"cancelled\">Cancelled</SelectItem>\n </SelectContent>\n </Select>\n\n <Select\n value={filters.event_id || ''}\n onChange={(e) =>\n setFilters((prev: unknown) => ({ ...prev, event_id: e.target.value || undefined }))\n }\n >\n <SelectTrigger className=\"w-container-xs\">\n <SelectValue placeholder=\"All Events\" />\n </SelectTrigger>\n <SelectContent>\n <SelectItem value=\"\">All Events</SelectItem>\n {events.map((event) => (\n <SelectItem key={event.id} value={event.id}>\n {event.title}\n </SelectItem>\n ))}\n </SelectContent>\n </Select>\n </div>\n\n <div className=\"flex items-center gap-xs\">\n <Button variant=\"outline\" size=\"sm\" onClick={handleExport}>\n <Download className=\"mr-2 h-icon-xs w-icon-xs\" />\n Export\n </Button>\n\n {/* View Switcher */}\n <div className=\"flex items-center rounded-lg border p-xs\">\n {(['list', 'grid', 'timeline', 'analytics'] as ViewType[]).map((view) => {\n const Icon = viewIcons[view];\n return (\n <Button\n key={view}\n variant={currentView === view ? 'default' : 'ghost'}\n size=\"sm\"\n onClick={() => setCurrentView(view)}\n className=\"h-icon-lg w-icon-lg p-0\"\n >\n <Icon className=\"h-icon-xs w-icon-xs\" />\n </Button>\n );\n })}\n </div>\n </div>\n </div>\n\n {/* Bulk Actions */}\n {selectedRiders.length > 0 && (\n <div className=\"mt-4 flex items-center gap-xs rounded-lg border bg-muted/50 p-sm\">\n <span className=\"text-sm text-muted-foreground\">\n {selectedRiders.length} rider(s) selected\n </span>\n <div className=\"flex gap-xs\">\n <Button\n size=\"sm\"\n variant=\"outline\"\n onClick={() => handleBulkAction('approve', selectedRiders)}\n >\n Approve\n </Button>\n <Button\n size=\"sm\"\n variant=\"outline\"\n onClick={() => handleBulkAction('fulfill', selectedRiders)}\n >\n Fulfill\n </Button>\n <Button\n size=\"sm\"\n variant=\"destructive\"\n onClick={() => handleBulkAction('delete', selectedRiders)}\n >\n Delete\n </Button>\n </div>\n </div>\n )}\n </Card>\n\n {/* Content */}\n <div className=\"min-h-content-lg\">\n {currentView === 'list' && (\n <ProgrammingRidersListView\n riders={filteredAndSortedRiders}\n loading={loading}\n selectedRiders={selectedRiders}\n onSelectionChange={setSelectedRiders}\n onEdit={handleEditRider}\n onView={handleViewRider}\n onDelete={handleDeleteRider}\n sort={sort}\n onSortChange={setSort}\n />\n )}\n\n {currentView === 'grid' && (\n <ProgrammingRidersGridView\n riders={filteredAndSortedRiders}\n loading={loading}\n onEdit={handleEditRider}\n onView={handleViewRider}\n onDelete={handleDeleteRider}\n />\n )}\n\n {currentView === 'timeline' && (\n <ProgrammingRidersTimelineView\n riders={filteredAndSortedRiders}\n loading={loading}\n onEdit={handleEditRider}\n onView={handleViewRider}\n />\n )}\n\n {currentView === 'analytics' && (\n <ProgrammingRidersAnalyticsView\n riders={filteredAndSortedRiders}\n loading={loading}\n />\n )}\n </div>\n\n {/* Drawers */}\n <CreateProgrammingRiderDrawer\n open={createDrawerOpen}\n onClose={() => setCreateDrawerOpen(false)}\n orgId={orgId}\n currentUserId={currentUserId}\n projects={projects}\n events={events}\n onSuccess={handleSuccess}\n />\n\n {selectedRider && (\n <>\n <EditProgrammingRiderDrawer\n open={editDrawerOpen}\n onClose={() => setEditDrawerOpen(false)}\n rider={selectedRider}\n orgId={orgId}\n currentUserId={currentUserId}\n projects={projects}\n events={events}\n onSuccess={handleSuccess}\n />\n\n <ViewProgrammingRiderDrawer\n open={viewDrawerOpen}\n onClose={() => setViewDrawerOpen(false)}\n rider={selectedRider}\n users={users}\n onEdit={() => {\n setViewDrawerOpen(false);\n setEditDrawerOpen(true);\n }}\n onDelete={() => {\n handleDeleteRider(selectedRider.id);\n setViewDrawerOpen(false);\n setSelectedRider(null);\n }}\n />\n </>\n )}\n </div>\n );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/files/riders/RidersClient.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/files/riders/drawers/CreateProgrammingRiderDrawer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/files/riders/drawers/EditProgrammingRiderDrawer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/files/riders/drawers/ViewProgrammingRiderDrawer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/files/riders/lib/ridersService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/files/riders/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/files/riders/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/files/riders/views/ProgrammingRidersAnalyticsView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/files/riders/views/ProgrammingRidersGridView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/files/riders/views/ProgrammingRidersListView.tsx","messages":[{"ruleId":"jsx-a11y/aria-props","severity":1,"message":"aria-: This attribute is an invalid ARIA attribute.","line":155,"column":2,"nodeType":"JSXAttribute","endLine":155,"endColumn":7}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { MoreHorizontal, Edit, Eye, Trash2, ChevronDown, ChevronRight, Calendar, MapPin, User, Clock, CheckCircle, XCircle, AlertCircle } from \"lucide-react\";\nimport { useState } from 'react';\nimport {\n Badge,\n Button,\n Card,\n Checkbox,\n Table,\n TableBody,\n TableCell,\n TableHead,\n TableHeader,\n TableRow,\n Dropdown,\n \n DropdownItem,\n \n Collapsible,\n CollapsibleContent,\n CollapsibleTrigger,\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuSeparator\n} from \"@ghxstship/ui\";\n\nimport type { ProgrammingRider, RiderSort, STATUS_BADGE, PRIORITY_BADGE, RIDER_KIND_BADGE } from '../types';\n\ninterface ProgrammingRidersListViewProps {\n riders: ProgrammingRider[];\n loading: boolean;\n selectedRiders: string[];\n onSelectionChange: (selected: string[]) => void;\n onEdit: (rider: ProgrammingRider) => void;\n onView: (rider: ProgrammingRider) => void;\n onDelete: (riderId: string) => void;\n sort: RiderSort;\n onSortChange: (sort: RiderSort) => void;\n}\n\nconst STATUS_BADGE_CONFIG = {\n draft: { label: 'Draft', variant: 'secondary' as const },\n pending_review: { label: 'Pending Review', variant: 'warning' as const },\n under_review: { label: 'Under Review', variant: 'info' as const },\n approved: { label: 'Approved', variant: 'success' as const },\n rejected: { label: 'Rejected', variant: 'error' as const },\n fulfilled: { label: 'Fulfilled', variant: 'success' as const },\n cancelled: { label: 'Cancelled', variant: 'secondary' as const }\n};\n\nconst PRIORITY_BADGE_CONFIG = {\n low: { label: 'Low', variant: 'secondary' as const },\n medium: { label: 'Medium', variant: 'secondary' as const },\n high: { label: 'High', variant: 'warning' as const },\n critical: { label: 'Critical', variant: 'error' as const },\n urgent: { label: 'Urgent', variant: 'error' as const }\n};\n\nconst RIDER_KIND_CONFIG = {\n technical: { label: 'Technical', icon: '🔧' },\n hospitality: { label: 'Hospitality', icon: '🍽️' },\n stage_plot: { label: 'Stage Plot', icon: '📋' },\n security: { label: 'Security', icon: '🛡️' },\n catering: { label: 'Catering', icon: '🍴' },\n transportation: { label: 'Transportation', icon: '🚐' },\n accommodation: { label: 'Accommodation', icon: '🏨' },\n production: { label: 'Production', icon: '🎬' },\n artist: { label: 'Artist', icon: '🎤' },\n crew: { label: 'Crew', icon: '👥' }\n};\n\nexport default function ProgrammingRidersListView({\n riders,\n loading,\n selectedRiders,\n onSelectionChange,\n onEdit,\n onView,\n onDelete,\n sort,\n onSortChange\n}: ProgrammingRidersListViewProps) {\n const [expandedRows, setExpandedRows] = useState<string[]>([]);\n\n const handleSelectAll = (checked: boolean) => {\n if (checked) {\n onSelectionChange(riders.map((rider) => rider.id));\n } else {\n onSelectionChange([]);\n }\n };\n\n const handleSelectRider = (riderId: string, checked: boolean) => {\n if (checked) {\n onSelectionChange([...selectedRiders, riderId]);\n } else {\n onSelectionChange(selectedRiders.filter((id) => id !== riderId));\n }\n };\n\n const toggleRowExpansion = (riderId: string) => {\n setExpandedRows((prev: unknown) =>\n prev.includes(riderId)\n ? prev.filter((id) => id !== riderId)\n : [...prev, riderId]\n );\n };\n\n const handleSort = (field: keyof ProgrammingRider) => {\n const direction = sort.field === field && sort.direction === 'asc' ? 'desc' : 'asc';\n onSortChange({ field, direction });\n };\n\n const getSortIcon = (field: keyof ProgrammingRider) => {\n if (sort.field !== field) return null;\n return sort.direction === 'asc' ? '↑' : '↓';\n };\n\n if (loading) {\n return (\n <Card className=\"p-xl\">\n <div className=\"flex items-center justify-center\">\n <div className=\"animate-spin rounded-full h-icon-lg w-icon-lg border-b-2 border-primary\"></div>\n <span className=\"ml-2\">Loading riders...</span>\n </div>\n </Card>\n );\n }\n\n if (riders.length === 0) {\n return (\n <Card className=\"p-xl\">\n <div className=\"text-center\">\n <h3 className=\"text-lg font-semibold\">No riders found</h3>\n <p className=\"text-muted-foreground\">\n No riders match your current filters. Try adjusting your search criteria.\n </p>\n </div>\n </Card>\n );\n }\n\n return (\n <Card>\n <Table>\n <TableHeader>\n <TableRow>\n <TableHead className=\"w-icon-2xl\">\n <Checkbox\n checked={selectedRiders.length === riders.length}\n onCheckedChange={handleSelectAll}\n aria-\n />\n </TableHead>\n <TableHead className=\"w-icon-2xl\"></TableHead>\n <TableHead \n className=\"cursor-pointer hover:bg-muted/50\"\n onClick={() => handleSort('title')}\n >\n Title {getSortIcon('title')}\n </TableHead>\n <TableHead>Kind</TableHead>\n <TableHead \n className=\"cursor-pointer hover:bg-muted/50\"\n onClick={() => handleSort('status')}\n >\n Status {getSortIcon('status')}\n </TableHead>\n <TableHead \n className=\"cursor-pointer hover:bg-muted/50\"\n onClick={() => handleSort('priority')}\n >\n Priority {getSortIcon('priority')}\n </TableHead>\n <TableHead>Event</TableHead>\n <TableHead \n className=\"cursor-pointer hover:bg-muted/50\"\n onClick={() => handleSort('created_at')}\n >\n Created {getSortIcon('created_at')}\n </TableHead>\n <TableHead className=\"w-icon-2xl\"></TableHead>\n </TableRow>\n </TableHeader>\n <TableBody>\n {riders.map((rider) => {\n const isExpanded = expandedRows.includes(rider.id);\n const isSelected = selectedRiders.includes(rider.id);\n\n return (\n <>\n <TableRow key={rider.id} className={isSelected ? 'bg-muted/50' : ''}>\n <TableCell>\n <Checkbox\n checked={isSelected}\n onCheckedChange={(checked) => handleSelectRider(rider.id, checked as boolean)}\n aria-label={`Select rider ${rider.title}`}\n />\n </TableCell>\n <TableCell>\n <Button\n variant=\"ghost\"\n size=\"sm\"\n onClick={() => toggleRowExpansion(rider.id)}\n className=\"h-icon-md w-icon-md p-0\"\n >\n {isExpanded ? (\n <ChevronDown className=\"h-icon-xs w-icon-xs\" />\n ) : (\n <ChevronRight className=\"h-icon-xs w-icon-xs\" />\n )}\n </Button>\n </TableCell>\n <TableCell>\n <div className=\"font-medium\">{rider.title}</div>\n {rider.description && (\n <div className=\"text-sm text-muted-foreground line-clamp-xs\">\n {rider.description}\n </div>\n )}\n </TableCell>\n <TableCell>\n <div className=\"flex items-center gap-xs\">\n <span className=\"text-lg\">{RIDER_KIND_CONFIG[rider.kind]?.icon}</span>\n <span className=\"text-sm\">{RIDER_KIND_CONFIG[rider.kind]?.label}</span>\n </div>\n </TableCell>\n <TableCell>\n <Badge variant={STATUS_BADGE_CONFIG[rider.status]?.variant}>\n {STATUS_BADGE_CONFIG[rider.status]?.label}\n </Badge>\n </TableCell>\n <TableCell>\n <Badge variant={PRIORITY_BADGE_CONFIG[rider.priority]?.variant}>\n {PRIORITY_BADGE_CONFIG[rider.priority]?.label}\n </Badge>\n </TableCell>\n <TableCell>\n {rider.event && (\n <div>\n <div className=\"font-medium\">{rider.event.title}</div>\n <div className=\"text-sm text-muted-foreground flex items-center gap-xs\">\n <Calendar className=\"h-3 w-3\" />\n {new Date(rider.event.start_at).toLocaleDateString()}\n </div>\n </div>\n )}\n </TableCell>\n <TableCell>\n <div className=\"text-sm\">\n {new Date(rider.created_at).toLocaleDateString()}\n </div>\n </TableCell>\n <TableCell>\n <DropdownMenu>\n <DropdownMenuTrigger asChild>\n <Button variant=\"ghost\" size=\"sm\" className=\"h-icon-lg w-icon-lg p-0\">\n <MoreHorizontal className=\"h-icon-xs w-icon-xs\" />\n </Button>\n </DropdownMenuTrigger>\n <DropdownMenuContent align=\"end\">\n <DropdownMenuItem onClick={() => onView(rider)}>\n <Eye className=\"mr-2 h-icon-xs w-icon-xs\" />\n View\n </DropdownMenuItem>\n <DropdownMenuItem onClick={() => onEdit(rider)}>\n <Edit className=\"mr-2 h-icon-xs w-icon-xs\" />\n Edit\n </DropdownMenuItem>\n <DropdownMenuItem\n onClick={() => onDelete(rider.id)}\n className=\"text-destructive\"\n >\n <Trash2 className=\"mr-2 h-icon-xs w-icon-xs\" />\n Delete\n </DropdownMenuItem>\n </DropdownMenuContent>\n </DropdownMenu>\n </TableCell>\n </TableRow>\n\n {/* Expanded Row Content */}\n {isExpanded && (\n <TableRow>\n <TableCell colSpan={9} className=\"bg-muted/25\">\n <div className=\"p-md space-y-md\">\n <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-md\">\n {/* Requirements */}\n <div>\n <h4 className=\"font-semibold mb-2\">Requirements</h4>\n <p className=\"text-sm text-muted-foreground\">\n {rider.requirements}\n </p>\n </div>\n\n {/* Project */}\n {rider.project && (\n <div>\n <h4 className=\"font-semibold mb-2\">Project</h4>\n <div className=\"flex items-center gap-xs\">\n <Badge variant=\"secondary\">{rider.project.name}</Badge>\n <Badge variant=\"secondary\">{rider.project.status}</Badge>\n </div>\n </div>\n )}\n\n {/* Fulfillment Status */}\n <div>\n <h4 className=\"font-semibold mb-2\">Fulfillment</h4>\n <div className=\"flex items-center gap-xs\">\n {rider.fulfilled_at ? (\n <>\n <CheckCircle className=\"h-icon-xs w-icon-xs text-green-600\" />\n <span className=\"text-sm\">\n Fulfilled {new Date(rider.fulfilled_at).toLocaleDateString()}\n </span>\n </>\n ) : rider.approved_at ? (\n <>\n <AlertCircle className=\"h-icon-xs w-icon-xs text-yellow-600\" />\n <span className=\"text-sm\">Approved, pending fulfillment</span>\n </>\n ) : (\n <>\n <XCircle className=\"h-icon-xs w-icon-xs text-gray-400\" />\n <span className=\"text-sm\">Not fulfilled</span>\n </>\n )}\n </div>\n </div>\n </div>\n\n {/* Notes */}\n {rider.notes && (\n <div>\n <h4 className=\"font-semibold mb-2\">Notes</h4>\n <p className=\"text-sm text-muted-foreground\">{rider.notes}</p>\n </div>\n )}\n\n {/* Tags */}\n {rider.tags && rider.tags.length > 0 && (\n <div>\n <h4 className=\"font-semibold mb-2\">Tags</h4>\n <div className=\"flex flex-wrap gap-xs\">\n {rider.tags.map((tag, index) => (\n <Badge key={index} variant=\"secondary\" className=\"text-xs\">\n {tag}\n </Badge>\n ))}\n </div>\n </div>\n )}\n\n {/* Specific Requirements */}\n {rider.kind === 'technical' && rider.technical_requirements && (\n <div>\n <h4 className=\"font-semibold mb-2\">Technical Requirements</h4>\n <div className=\"grid grid-cols-2 gap-xs text-sm\">\n {rider.technical_requirements.sound_system && (\n <div>Sound System: {rider.technical_requirements.sound_system}</div>\n )}\n {rider.technical_requirements.lighting && (\n <div>Lighting: {rider.technical_requirements.lighting}</div>\n )}\n {rider.technical_requirements.power_requirements && (\n <div>Power: {rider.technical_requirements.power_requirements}</div>\n )}\n {rider.technical_requirements.crew_requirements && (\n <div>Crew: {rider.technical_requirements.crew_requirements}</div>\n )}\n </div>\n </div>\n )}\n\n {rider.kind === 'hospitality' && rider.hospitality_requirements && (\n <div>\n <h4 className=\"font-semibold mb-2\">Hospitality Requirements</h4>\n <div className=\"grid grid-cols-2 gap-xs text-sm\">\n {rider.hospitality_requirements.catering && (\n <div>Catering: {rider.hospitality_requirements.catering}</div>\n )}\n {rider.hospitality_requirements.beverages && (\n <div>Beverages: {rider.hospitality_requirements.beverages}</div>\n )}\n {rider.hospitality_requirements.green_room_setup && (\n <div>Green Room: {rider.hospitality_requirements.green_room_setup}</div>\n )}\n </div>\n </div>\n )}\n </div>\n </TableCell>\n </TableRow>\n )}\n </>\n );\n })}\n </TableBody>\n </Table>\n </Card>\n );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/files/riders/views/ProgrammingRidersTimelineView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/files/templates/TemplatesClient.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/files/templates/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/files/templates/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/files/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/files/views/CalendarView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/files/views/CardView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/files/views/ChartView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/files/views/FileFolderView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/files/views/FileGalleryView.tsx","messages":[{"ruleId":"@next/next/no-img-element","severity":1,"message":"Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` or a custom image loader to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","line":37,"column":2,"nodeType":"JSXOpeningElement","endLine":42,"endColumn":4},{"ruleId":"@next/next/no-img-element","severity":1,"message":"Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` or a custom image loader to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","line":110,"column":2,"nodeType":"JSXOpeningElement","endLine":115,"endColumn":4}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport { useState } from 'react';\nimport { Card, Button } from \"@ghxstship/ui\";\nimport type { ProjectFile } from \"../FilesClient\";\nimport { Download, Eye, Trash2, X } from 'lucide-react';\n\ninterface FileImageViewProps {\n files: ProjectFile[];\n onView: (file: ProjectFile) => void;\n onDownload: (file: ProjectFile) => void;\n onDelete: (file: ProjectFile) => void;\n}\n\nexport default function FileImageView({\n files,\n onView,\n onDownload,\n onDelete\n}: FileImageViewProps) {\n const [selectedImage, setSelectedImage] = useState<ProjectFile | null>(null);\n const [hoveredId, setHoveredId] = useState<string | null>(null);\n\n return (\n <>\n <div className=\"grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 xl:grid-cols-5 gap-md\">\n {files.map((file) => (\n <div\n key={file.id}\n className=\"relative group cursor-pointer\"\n onMouseEnter={() => setHoveredId(file.id)}\n onMouseLeave={() => setHoveredId(null)}\n onClick={() => setSelectedImage(file)}\n >\n {/* Image Container */}\n <div className=\"aspect-square bg-muted rounded-lg overflow-hidden\">\n <img\n src={file.file_url}\n alt={file.name}\n className=\"w-full h-full object-cover transition-transform group-hover:scale-105\"\n loading=\"lazy\"\n />\n </div>\n\n {/* Overlay on Hover */}\n {hoveredId === file.id && (\n <div className=\"absolute inset-0 bg-black/60 rounded-lg flex items-center justify-center gap-sm animate-in fade-in-0 duration-200\">\n <Button\n variant=\"secondary\"\n size=\"sm\"\n onClick={(e) => {\n e.stopPropagation();\n onView(file);\n }}\n >\n <Eye className=\"h-icon-xs w-icon-xs\" />\n </Button>\n <Button\n variant=\"secondary\"\n size=\"sm\"\n onClick={(e) => {\n e.stopPropagation();\n onDownload(file);\n }}\n >\n <Download className=\"h-icon-xs w-icon-xs\" />\n </Button>\n <Button\n variant=\"secondary\"\n size=\"sm\"\n onClick={(e) => {\n e.stopPropagation();\n onDelete(file);\n }}\n className=\"text-destructive\"\n >\n <Trash2 className=\"h-icon-xs w-icon-xs\" />\n </Button>\n </div>\n )}\n\n {/* File Name */}\n <div className=\"mt-sm\">\n <p className=\"text-sm font-medium truncate\" title={file.name}>\n {file.name}\n </p>\n {file.project && (\n <p className=\"text-xs text-muted-foreground truncate\">\n {file.project.name}\n </p>\n )}\n </div>\n </div>\n ))}\n </div>\n\n {files.length === 0 && (\n <div className=\"text-center py-xl text-muted-foreground\">\n No images to display\n </div>\n )}\n\n {/* Lightbox Modal */}\n {selectedImage && (\n <div\n className=\"fixed inset-0 z-50 bg-black/90 flex items-center justify-center p-md animate-in fade-in-0 duration-200\"\n onClick={() => setSelectedImage(null)}\n >\n <div className=\"relative max-w-[90vw] max-h-[90vh]\">\n <img\n src={selectedImage.file_url}\n alt={selectedImage.name}\n className=\"max-w-full max-h-full object-contain\"\n onClick={(e) => e.stopPropagation()}\n />\n \n {/* Close Button */}\n <Button\n variant=\"secondary\"\n size=\"sm\"\n className=\"absolute top-md right-4\"\n onClick={() => setSelectedImage(null)}\n >\n <X className=\"h-icon-xs w-icon-xs\" />\n </Button>\n\n {/* Image Info */}\n <div className=\"absolute bottom-4 left-4 right-4 bg-black/70 text-white p-md rounded-lg\">\n <h3 className=\"font-semibold mb-xs\">{selectedImage.name}</h3>\n {selectedImage.description && (\n <p className=\"text-sm mb-sm\">{selectedImage.description}</p>\n )}\n <div className=\"flex items-center gap-md\">\n <Button\n variant=\"secondary\"\n size=\"sm\"\n onClick={(e) => {\n e.stopPropagation();\n onView(selectedImage);\n setSelectedImage(null);\n }}\n >\n <Eye className=\"mr-2 h-icon-xs w-icon-xs\" />\n View Details\n </Button>\n <Button\n variant=\"secondary\"\n size=\"sm\"\n onClick={(e) => {\n e.stopPropagation();\n onDownload(selectedImage);\n }}\n >\n <Download className=\"mr-2 h-icon-xs w-icon-xs\" />\n Download\n </Button>\n </div>\n </div>\n </div>\n </div>\n )}\n </>\n );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/files/views/FileGridView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/files/views/FileListView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/files/views/FormView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/files/views/GalleryView.tsx","messages":[{"ruleId":"@next/next/no-img-element","severity":1,"message":"Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` or a custom image loader to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","line":301,"column":27,"nodeType":"JSXOpeningElement","endLine":306,"endColumn":29},{"ruleId":"@next/next/no-img-element","severity":1,"message":"Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` or a custom image loader to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","line":379,"column":17,"nodeType":"JSXOpeningElement","endLine":383,"endColumn":19}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport React, { useState, useMemo } from 'react';\nimport {\n  Eye,\n  Download,\n  Share,\n  Heart,\n  MoreHorizontal,\n  ZoomIn,\n  Grid3X3,\n  List,\n  Search,\n  Filter\n} from 'lucide-react';\nimport { Card, Button, Input, Badge, Dropdown, Checkbox ,\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuSeparator\n} from '@ghxstship/ui';\nimport type { DigitalAsset } from '../types';\n\ninterface ImageViewProps {\n  files: DigitalAsset[];\n  selectedFiles: Set<string>;\n  onSelectFile: (id: string) => void;\n  onSelectAll: (selected: boolean) => void;\n  onView: (file: DigitalAsset) => void;\n  onDownload: (file: DigitalAsset) => void;\n  onShare: (file: DigitalAsset) => void;\n  onBulkAction: (action: string, files: DigitalAsset[]) => void;\n  formatFileSize: (bytes: number) => string;\n  getCategoryIcon: (category: string) => React.ComponentType<any>;\n}\n\nexport default function ImageView({\n  files,\n  selectedFiles,\n  onSelectFile,\n  onSelectAll,\n  onView,\n  onDownload,\n  onShare,\n  onBulkAction,\n  formatFileSize,\n  getCategoryIcon\n}: ImageViewProps) {\n  const [layout, setLayout] = useState<'grid' | 'masonry'>('masonry');\n  const [searchQuery, setSearchQuery] = useState('');\n  const [selectedCategory, setSelectedCategory] = useState<string>('all');\n  const [lightboxFile, setLightboxFile] = useState<DigitalAsset | null>(null);\n\n  // Filter files based on search and category\n  const filteredFiles = useMemo(() => {\n    return files.filter(file => {\n      const matchesSearch = !searchQuery ||\n        file.title.toLowerCase().includes(searchQuery.toLowerCase()) ||\n        file.description?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n        file.tags?.some(tag => tag.toLowerCase().includes(searchQuery.toLowerCase()));\n\n      const matchesCategory = selectedCategory === 'all' || file.category === selectedCategory;\n\n      return matchesSearch && matchesCategory;\n    });\n  }, [files, searchQuery, selectedCategory]);\n\n  // Get unique categories for filter\n  const categories = useMemo(() => {\n    const cats = [...new Set(files.map(f => f.category))];\n    return cats.sort();\n  }, [files]);\n\n  // Group files by category for better organization\n  const groupedFiles = useMemo(() => {\n    const grouped: Record<string, DigitalAsset[]> = {};\n\n    filteredFiles.forEach(file => {\n      if (!grouped[file.category]) {\n        grouped[file.category] = [];\n      }\n      grouped[file.category].push(file);\n    });\n\n    return grouped;\n  }, [filteredFiles]);\n\n  // Get file thumbnail URL (placeholder for now)\n  const getThumbnailUrl = (file: DigitalAsset) => {\n    // In a real implementation, this would generate or fetch thumbnail URLs\n    // For now, return a placeholder based on file type\n    if (file.category === 'image') {\n      return `https://via.placeholder.com/300x200?text=${encodeURIComponent(file.title)}`;\n    }\n    return `https://via.placeholder.com/300x200/cccccc/666666?text=${encodeURIComponent(file.title)}`;\n  };\n\n  // Open lightbox\n  const openLightbox = (file: DigitalAsset) => {\n    setLightboxFile(file);\n  };\n\n  // Close lightbox\n  const closeLightbox = () => {\n    setLightboxFile(null);\n  };\n\n  // Bulk actions\n  const selectedFileObjects = files.filter(file => selectedFiles.has(file.id));\n\n  return (\n    <div className=\"space-y-lg\">\n      {/* Controls */}\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center gap-md\">\n          {/* Search */}\n          <div className=\"relative\">\n            <Search className=\"absolute left-3 top-xs/2 transform -translate-y-1/2 text-gray-400 w-icon-xs h-icon-xs\" />\n            <Input\n              placeholder=\"Search files...\"\n              value={searchQuery}\n              onChange={(e) => setSearchQuery(e.target.value)}\n              className=\"pl-10 w-container-sm\"\n            />\n          </div>\n\n          {/* Category Filter */}\n          <div className=\"flex items-center gap-xs\">\n            <Filter className=\"w-icon-xs h-icon-xs text-gray-400\" />\n            <select\n              value={selectedCategory}\n              onChange={(e) => setSelectedCategory(e.target.value)}\n              className=\"px-sm py-xs border border-gray-300 rounded-md text-sm\"\n            >\n              <option value=\"all\">All Categories</option>\n              {categories.map(category => (\n                <option key={category} value={category}>\n                  {category.charAt(0).toUpperCase() + category.slice(1)}\n                </option>\n              ))}\n            </select>\n          </div>\n        </div>\n\n        <div className=\"flex items-center gap-xs\">\n          {/* Layout Toggle */}\n          <div className=\"flex items-center gap-xs border border-gray-300 rounded-md\">\n            <Button\n              variant={layout === 'grid' ? 'default' : 'ghost'}\n              size=\"sm\"\n              onClick={() => setLayout('grid')}\n            >\n              <Grid3X3 className=\"w-icon-xs h-icon-xs\" />\n            </Button>\n            <Button\n              variant={layout === 'masonry' ? 'default' : 'ghost'}\n              size=\"sm\"\n              onClick={() => setLayout('masonry')}\n            >\n              <List className=\"w-icon-xs h-icon-xs\" />\n            </Button>\n          </div>\n\n          {/* Bulk Actions */}\n          {selectedFiles.size > 0 && (\n            <div className=\"flex items-center gap-xs ml-4\">\n              <span className=\"text-sm text-gray-600\">\n                {selectedFiles.size} selected\n              </span>\n              <Button\n                size=\"sm\"\n                variant=\"outline\"\n                onClick={() => onBulkAction('download', selectedFileObjects)}\n              >\n                Download\n              </Button>\n              <Button\n                size=\"sm\"\n                variant=\"outline\"\n                onClick={() => onBulkAction('share', selectedFileObjects)}\n              >\n                Share\n              </Button>\n              <Button\n                size=\"sm\"\n                variant=\"destructive\"\n                onClick={() => onBulkAction('delete', selectedFileObjects)}\n              >\n                Delete\n              </Button>\n            </div>\n          )}\n        </div>\n      </div>\n\n      {/* Bulk Selection Controls */}\n      {filteredFiles.length > 0 && (\n        <div className=\"flex items-center gap-xs p-xs border-b\">\n          <Checkbox\n            checked={filteredFiles.length > 0 && filteredFiles.every(file => selectedFiles.has(file.id))}\n            onCheckedChange={onSelectAll}\n          />\n          <span className=\"text-sm font-medium\">\n            Select All ({filteredFiles.length} files)\n          </span>\n        </div>\n      )}\n\n      {/* Image Content */}\n      {Object.keys(groupedFiles).length === 0 ? (\n        <div className=\"text-center py-xsxl\">\n          <Search className=\"w-icon-2xl h-icon-2xl text-gray-400 mx-auto mb-4\" />\n          <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No files found</h3>\n          <p className=\"text-gray-500\">\n            {searchQuery || selectedCategory !== 'all'\n              ? 'Try adjusting your search or filters'\n              : 'Upload some files to get started'\n            }\n          </p>\n        </div>\n      ) : (\n        <div className=\"space-y-xl\">\n          {Object.entries(groupedFiles).map(([category, categoryFiles]) => (\n            <div key={category}>\n              {/* Category Header */}\n              <div className=\"flex items-center gap-xs mb-4\">\n                <h3 className=\"text-lg font-semibold text-gray-900 capitalize\">\n                  {category}\n                </h3>\n                <Badge variant=\"secondary\">\n                  {categoryFiles.length}\n                </Badge>\n              </div>\n\n              {/* Files Grid */}\n              <div\n                className={\n                  layout === 'grid'\n                    ? 'grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 xl:grid-cols-6 gap-md'\n                    : 'columns-1 md:columns-2 lg:columns-3 xl:columns-4 gap-md space-y-md'\n                }\n              >\n                {categoryFiles.map((file) => {\n                  const CategoryIcon = getCategoryIcon(file.category);\n\n                  return (\n                    <Card\n                      key={file.id}\n                      className={`relative group overflow-hidden hover:shadow-lg transition-all cursor-pointer ${\n                        selectedFiles.has(file.id) ? 'ring-2 ring-blue-500' : ''\n                      }`}\n                      onClick={() => onView(file)}\n                    >\n                      {/* Selection Checkbox */}\n                      <div className=\"absolute top-xs left-2 z-10 opacity-0 group-hover:opacity-100 transition-opacity\">\n                        <Checkbox\n                          checked={selectedFiles.has(file.id)}\n                          onCheckedChange={() => onSelectFile(file.id)}\n                          onClick={(e) => e.stopPropagation()}\n                        />\n                      </div>\n\n                      {/* Actions Menu */}\n                      <div className=\"absolute top-xs right-2 z-10 opacity-0 group-hover:opacity-100 transition-opacity\">\n                        <DropdownMenu>\n                          <DropdownMenu.Trigger asChild>\n                            <Button\n                              variant=\"secondary\"\n                              size=\"sm\"\n                              onClick={(e) => e.stopPropagation()}\n                              className=\"h-icon-lg w-icon-lg p-0\"\n                            >\n                              <MoreHorizontal className=\"w-icon-xs h-icon-xs\" />\n                            </Button>\n                          </DropdownMenu.Trigger>\n                          <DropdownMenu.Content align=\"end\">\n                            <DropdownMenu.Item onClick={() => onView(file)}>\n                              <Eye className=\"w-icon-xs h-icon-xs mr-2\" />\n                              View\n                            </DropdownMenu.Item>\n                            <DropdownMenu.Item onClick={() => openLightbox(file)}>\n                              <ZoomIn className=\"w-icon-xs h-icon-xs mr-2\" />\n                              Preview\n                            </DropdownMenu.Item>\n                            <DropdownMenu.Item onClick={() => onDownload(file)}>\n                              <Download className=\"w-icon-xs h-icon-xs mr-2\" />\n                              Download\n                            </DropdownMenu.Item>\n                            <DropdownMenu.Item onClick={() => onShare(file)}>\n                              <Share className=\"w-icon-xs h-icon-xs mr-2\" />\n                              Share\n                            </DropdownMenu.Item>\n                          </DropdownMenu.Content>\n                        </DropdownMenu>\n                      </div>\n\n                      {/* File Preview */}\n                      <div className=\"aspect-square bg-gray-100 relative overflow-hidden\">\n                        {file.category === 'image' ? (\n                          <img\n                            src={getThumbnailUrl(file)}\n                            alt={file.title}\n                            className=\"w-full h-full object-cover\"\n                            loading=\"lazy\"\n                          />\n                        ) : (\n                          <div className=\"w-full h-full flex items-center justify-center bg-gray-50\">\n                            <CategoryIcon className=\"w-icon-2xl h-icon-2xl text-gray-400\" />\n                          </div>\n                        )}\n\n                        {/* File Size Overlay */}\n                        <div className=\"absolute bottom-2 left-2 bg-black bg-opacity-75 text-white text-xs px-xs py-xs rounded\">\n                          {formatFileSize(file.file_size || 0)}\n                        </div>\n                      </div>\n\n                      {/* File Info */}\n                      <div className=\"p-sm\">\n                        <h4 className=\"font-medium text-sm text-gray-900 truncate mb-1\">\n                          {file.title}\n                        </h4>\n\n                        {file.description && (\n                          <p className=\"text-xs text-gray-600 truncate mb-2\">\n                            {file.description}\n                          </p>\n                        )}\n\n                        {/* Metadata */}\n                        <div className=\"flex items-center justify-between text-xs text-gray-500\">\n                          <span>{file.access_level}</span>\n                          <span>{new Date(file.updated_at).toLocaleDateString()}</span>\n                        </div>\n\n                        {/* Tags */}\n                        {file.tags && file.tags.length > 0 && (\n                          <div className=\"flex flex-wrap gap-xs mt-2\">\n                            {file.tags.slice(0, 2).map((tag, index) => (\n                              <Badge key={index} variant=\"outline\" className=\"text-xs\">\n                                {tag}\n                              </Badge>\n                            ))}\n                            {file.tags.length > 2 && (\n                              <Badge variant=\"outline\" className=\"text-xs\">\n                                +{file.tags.length - 2}\n                              </Badge>\n                            )}\n                          </div>\n                        )}\n                      </div>\n                    </Card>\n                  );\n                })}\n              </div>\n            </div>\n          ))}\n        </div>\n      )}\n\n      {/* Lightbox Modal */}\n      {lightboxFile && (\n        <div className=\"fixed inset-0 bg-black bg-opacity-75 flex items-center justify-center z-50 p-md\">\n          <div className=\"relative max-w-4xl max-h-full\">\n            {/* Close Button */}\n            <Button\n              variant=\"secondary\"\n              size=\"sm\"\n              onClick={closeLightbox}\n              className=\"absolute top-md right-4 z-10\"\n            >\n              ✕\n            </Button>\n\n            {/* File Content */}\n            <div className=\"bg-white rounded-lg overflow-hidden\">\n              {lightboxFile.category === 'image' ? (\n                <img\n                  src={getThumbnailUrl(lightboxFile)}\n                  alt={lightboxFile.title}\n                  className=\"max-w-full max-h-[70vh] object-contain\"\n                />\n              ) : (\n                <div className=\"p-xl text-center\">\n                  <div className=\"w-component-lg h-component-lg mx-auto mb-4 bg-gray-100 rounded-lg flex items-center justify-center\">\n                    {React.createElement(getCategoryIcon(lightboxFile.category), {\n                      className: 'w-icon-2xl h-icon-2xl text-gray-400'\n                    })}\n                  </div>\n                  <p className=\"text-gray-500\">Preview not available for this file type</p>\n                </div>\n              )}\n\n              {/* File Details */}\n              <div className=\"p-md border-t\">\n                <h3 className=\"font-medium text-lg mb-2\">{lightboxFile.title}</h3>\n                {lightboxFile.description && (\n                  <p className=\"text-gray-600 mb-3\">{lightboxFile.description}</p>\n                )}\n\n                <div className=\"flex items-center gap-md text-sm text-gray-500 mb-4\">\n                  <span>Size: {formatFileSize(lightboxFile.file_size || 0)}</span>\n                  <span>Modified: {new Date(lightboxFile.updated_at).toLocaleDateString()}</span>\n                  <Badge variant=\"outline\">{lightboxFile.category}</Badge>\n                </div>\n\n                {/* Actions */}\n                <div className=\"flex gap-xs\">\n                  <Button onClick={() => onDownload(lightboxFile!)}>\n                    <Download className=\"w-icon-xs h-icon-xs mr-2\" />\n                    Download\n                  </Button>\n                  <Button variant=\"outline\" onClick={() => onShare(lightboxFile!)}>\n                    <Share className=\"w-icon-xs h-icon-xs mr-2\" />\n                    Share\n                  </Button>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/files/views/GanttView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/files/views/KanbanView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/files/views/ResourceGridView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/files/views/ResourceListView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/files/views/TableView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/files/views/TimelineView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/finance/FinanceClient.tsx","messages":[],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadFinanceData'. Either include it or remove the dependency array.","line":19,"column":6,"nodeType":"ArrayExpression","endLine":19,"endColumn":13,"suggestions":[{"desc":"Update the dependencies array to be: [loadFinanceData, orgId]","fix":{"range":[774,781],"text":"[loadFinanceData, orgId]"}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/finance/FinanceClient.unified.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/finance/[id]/edit/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/finance/[id]/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/finance/accounts/AccountsClient.tsx","messages":[],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadAccounts'. Either include it or remove the dependency array.","line":52,"column":6,"nodeType":"ArrayExpression","endLine":52,"endColumn":13,"suggestions":[{"desc":"Update the dependencies array to be: [loadAccounts, orgId]","fix":{"range":[1851,1858],"text":"[loadAccounts, orgId]"}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/finance/accounts/CreateAccountClient.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/finance/accounts/[id]/edit/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/finance/accounts/[id]/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/finance/accounts/drawers/CreateAccountDrawer.tsx","messages":[],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'setErrors'. Either include it or remove the dependency array.","line":101,"column":5,"nodeType":"ArrayExpression","endLine":101,"endColumn":26,"suggestions":[{"desc":"Update the dependencies array to be: [editAccount, isOpen, setErrors]","fix":{"range":[2208,2229],"text":"[editAccount, isOpen, setErrors]"}}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadParentAccounts'. Either include it or remove the dependency array.","line":109,"column":5,"nodeType":"ArrayExpression","endLine":109,"endColumn":28,"suggestions":[{"desc":"Update the dependencies array to be: [formData.type, isOpen, loadParentAccounts]","fix":{"range":[2428,2451],"text":"[formData.type, isOpen, loadParentAccounts]"}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/finance/accounts/lib/accountsService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/finance/accounts/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/finance/accounts/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/finance/accounts/views/AccountCalendarView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/finance/accounts/views/AccountChartView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/finance/accounts/views/AccountFormView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/finance/accounts/views/AccountGalleryView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/finance/accounts/views/AccountGanttView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/finance/accounts/views/AccountKanbanView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/finance/accounts/views/AccountListView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/finance/accounts/views/AccountTimelineView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/finance/accounts/views/AccountsGridView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/finance/accounts/views/ViewSwitcher.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/finance/budgets/BudgetsClient.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/finance/budgets/CreateBudgetClient.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/finance/budgets/[id]/BudgetDetailClient.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/finance/budgets/[id]/edit/EditBudgetClient.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/finance/budgets/[id]/edit/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/finance/budgets/[id]/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/finance/budgets/drawers/CreateBudgetDrawer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/finance/budgets/drawers/EditBudgetDrawer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/finance/budgets/drawers/ViewBudgetDrawer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/finance/budgets/lib/budgets-service.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/finance/budgets/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/finance/budgets/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/finance/budgets/views/BudgetCalendarView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/finance/budgets/views/BudgetChartView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/finance/budgets/views/BudgetFormView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/finance/budgets/views/BudgetGalleryView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/finance/budgets/views/BudgetGanttView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/finance/budgets/views/BudgetGridView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/finance/budgets/views/BudgetKanbanView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/finance/budgets/views/BudgetListView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/finance/budgets/views/BudgetTimelineView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/finance/budgets/views/ViewSwitcher.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/finance/create/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/finance/drawers/CreateDrawer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/finance/drawers/EditDrawer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/finance/drawers/ViewDrawer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/finance/drawers/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/finance/error.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/finance/expenses/CreateExpenseClient.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/finance/expenses/ExpensesClient.tsx","messages":[],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadExpenses'. Either include it or remove the dependency array.","line":55,"column":6,"nodeType":"ArrayExpression","endLine":55,"endColumn":27,"suggestions":[{"desc":"Update the dependencies array to be: [loadExpenses, orgId, statusFilter]","fix":{"range":[1821,1842],"text":"[loadExpenses, orgId, statusFilter]"}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/finance/expenses/ExpensesClient_Broken.tsx","messages":[],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'loadExpenses' and 'loadStatistics'. Either include them or remove the dependency array.","line":117,"column":5,"nodeType":"ArrayExpression","endLine":117,"endColumn":21,"suggestions":[{"desc":"Update the dependencies array to be: [orgId, filters, loadExpenses, loadStatistics]","fix":{"range":[2895,2911],"text":"[orgId, filters, loadExpenses, loadStatistics]"}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/finance/expenses/[id]/edit/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/finance/expenses/[id]/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/finance/expenses/drawers/CreateExpenseDrawer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/finance/expenses/lib/expenses-service.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/finance/expenses/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/finance/expenses/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/finance/expenses/views/ExpenseCalendarView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/finance/expenses/views/ExpenseChartView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/finance/expenses/views/ExpenseFormView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/finance/expenses/views/ExpenseGalleryView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/finance/expenses/views/ExpenseGanttView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/finance/expenses/views/ExpenseGridView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/finance/expenses/views/ExpenseKanbanView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/finance/expenses/views/ExpenseListView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/finance/expenses/views/ExpenseTimelineView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/finance/expenses/views/ViewSwitcher.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/finance/forecasts/CreateForecastClient.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/finance/forecasts/ForecastsClient.tsx","messages":[],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadForecasts'. Either include it or remove the dependency array.","line":56,"column":6,"nodeType":"ArrayExpression","endLine":56,"endColumn":39,"suggestions":[{"desc":"Update the dependencies array to be: [orgId, typeFilter, periodFilter, loadForecasts]","fix":{"range":[1978,2011],"text":"[orgId, typeFilter, periodFilter, loadForecasts]"}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/finance/forecasts/[id]/edit/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/finance/forecasts/[id]/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/finance/forecasts/create/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/finance/forecasts/drawers/BulkForecastDrawer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/finance/forecasts/drawers/CreateForecastDrawer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/finance/forecasts/drawers/EditForecastDrawer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/finance/forecasts/drawers/ExportForecastDrawer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/finance/forecasts/drawers/HistoryForecastDrawer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/finance/forecasts/drawers/ImportForecastDrawer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/finance/forecasts/drawers/ViewForecastDrawer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/finance/forecasts/lib/forecasts-service.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/finance/forecasts/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/finance/forecasts/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/finance/forecasts/views/ForecastCalendarView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/finance/forecasts/views/ForecastChartView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/finance/forecasts/views/ForecastFormView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/finance/forecasts/views/ForecastGalleryView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/finance/forecasts/views/ForecastGanttView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/finance/forecasts/views/ForecastGridView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/finance/forecasts/views/ForecastKanbanView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/finance/forecasts/views/ForecastListView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/finance/forecasts/views/ForecastTimelineView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/finance/forecasts/views/ViewSwitcher.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/finance/invoices/CreateInvoiceClient.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/finance/invoices/InvoicesClient.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/finance/invoices/[id]/edit/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/finance/invoices/[id]/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/finance/invoices/create/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/finance/invoices/drawers/BulkInvoiceDrawer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/finance/invoices/drawers/CreateInvoiceDrawer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/finance/invoices/drawers/EditInvoiceDrawer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/finance/invoices/drawers/ExportInvoiceDrawer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/finance/invoices/drawers/HistoryInvoiceDrawer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/finance/invoices/drawers/ImportInvoiceDrawer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/finance/invoices/drawers/ViewInvoiceDrawer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/finance/invoices/lib/invoices-service.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/finance/invoices/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/finance/invoices/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/finance/invoices/views/InvoiceCalendarView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/finance/invoices/views/InvoiceChartView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/finance/invoices/views/InvoiceFormView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/finance/invoices/views/InvoiceGalleryView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/finance/invoices/views/InvoiceGanttView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/finance/invoices/views/InvoiceGridView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/finance/invoices/views/InvoiceKanbanView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/finance/invoices/views/InvoiceListView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/finance/invoices/views/InvoiceTimelineView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/finance/invoices/views/ViewSwitcher.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/finance/lib/api.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/finance/lib/export.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/finance/lib/field-configs.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/finance/lib/finance-service.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/finance/lib/import.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/finance/lib/mutations.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/finance/lib/permissions.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/finance/lib/queries.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/finance/lib/realtime.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/finance/lib/validations.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/finance/loading.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/finance/metadata.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/finance/not-found.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/finance/overview/OverviewClient.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/finance/overview/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/finance/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/finance/revenue/CreateRevenueClient.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/finance/revenue/RevenueClient.tsx","messages":[],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadRevenues'. Either include it or remove the dependency array.","line":55,"column":6,"nodeType":"ArrayExpression","endLine":55,"endColumn":27,"suggestions":[{"desc":"Update the dependencies array to be: [loadRevenues, orgId, statusFilter]","fix":{"range":[1804,1825],"text":"[loadRevenues, orgId, statusFilter]"}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/finance/revenue/[id]/RevenueDetailClient.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/finance/revenue/[id]/edit/EditRevenueClient.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/finance/revenue/[id]/edit/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/finance/revenue/[id]/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/finance/revenue/create/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/finance/revenue/drawers/CreateRevenueDrawer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/finance/revenue/drawers/EditRevenueDrawer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/finance/revenue/drawers/ViewRevenueDrawer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/finance/revenue/lib/revenue-service.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/finance/revenue/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/finance/revenue/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/finance/revenue/views/RevenueCalendarView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/finance/revenue/views/RevenueGridView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/finance/revenue/views/RevenueKanbanView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/finance/revenue/views/RevenueListView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/finance/revenue/views/ViewSwitcher.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/finance/transactions/CreateTransactionClient.tsx","messages":[],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadAccounts'. Either include it or remove the dependency array.","line":62,"column":6,"nodeType":"ArrayExpression","endLine":62,"endColumn":14,"suggestions":[{"desc":"Update the dependencies array to be: [isOpen, loadAccounts]","fix":{"range":[1564,1572],"text":"[isOpen, loadAccounts]"}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/finance/transactions/TransactionsClient.tsx","messages":[],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadData'. Either include it or remove the dependency array.","line":59,"column":6,"nodeType":"ArrayExpression","endLine":59,"endColumn":39,"suggestions":[{"desc":"Update the dependencies array to be: [orgId, statusFilter, kindFilter, loadData]","fix":{"range":[2068,2101],"text":"[orgId, statusFilter, kindFilter, loadData]"}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/finance/transactions/[id]/TransactionDetailClient.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/finance/transactions/[id]/edit/EditTransactionClient.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/finance/transactions/[id]/edit/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/finance/transactions/[id]/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/finance/transactions/create/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/finance/transactions/drawers/BulkTransactionDrawer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/finance/transactions/drawers/CreateTransactionDrawer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/finance/transactions/drawers/EditTransactionDrawer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/finance/transactions/drawers/ExportTransactionDrawer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/finance/transactions/drawers/HistoryTransactionDrawer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/finance/transactions/drawers/ImportTransactionDrawer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/finance/transactions/drawers/ViewTransactionDrawer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/finance/transactions/lib/transactions-service.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/finance/transactions/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/finance/transactions/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/finance/transactions/views/TransactionCalendarView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/finance/transactions/views/TransactionChartView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/finance/transactions/views/TransactionFormView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/finance/transactions/views/TransactionGalleryView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/finance/transactions/views/TransactionGanttView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/finance/transactions/views/TransactionGridView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/finance/transactions/views/TransactionKanbanView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/finance/transactions/views/TransactionListView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/finance/transactions/views/TransactionTimelineView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/finance/transactions/views/ViewSwitcher.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/finance/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/finance/views/CalendarView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/finance/views/ChartView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/finance/views/FormView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/finance/views/GalleryView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/finance/views/GridView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/finance/views/KanbanView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/finance/views/ListView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/finance/views/TimelineView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/finance/views/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/jobs/JobsClient.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadData'. Either include it or remove the dependency array.","line":238,"column":6,"nodeType":"ArrayExpression","endLine":238,"endColumn":13,"suggestions":[{"desc":"Update the dependencies array to be: [loadData, orgId]","fix":{"range":[5923,5930],"text":"[loadData, orgId]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\n\nimport { useEffect, useState } from 'react';\nimport { useTranslations } from 'next-intl';\nimport {\n  Drawer,\n  type DataRecord,\n  StateManagerProvider,\n  DataViewProvider,\n  ViewSwitcher,\n  DataActions,\n  DataGrid,\n  KanbanBoard,\n  CalendarView,\n  ListView\n} from '@ghxstship/ui';\n\n// Mock Supabase client for now\nconst sb = {\n  from: () => ({\n    select: () => ({ eq: () => ({ order: () => ({ data: [], error: null }) }) })\n  })\n};\n\n// Mock organization hook\nconst useOrganization = () => ({ organization: { id: 'mock-org' } });\n\nexport default function JobsClient({ orgId }: { orgId: string }) {\n  const t = useTranslations('jobs');\n  const [data, setData] = useState<DataRecord[]>([]);\n\n  // Field configuration for jobs/opportunities data\n  const fieldConfig: FieldConfig[] = [\n    {\n      key: 'title',\n      label: 'Job Title',\n      type: 'text',\n      required: true,\n      sortable: true,\n      filterable: true\n    },\n    {\n      key: 'description',\n      label: 'Description',\n      type: 'textarea',\n      required: true,\n      sortable: false,\n      filterable: true\n    },\n    {\n      key: 'type',\n      label: 'Job Type',\n      type: 'select',\n      required: true,\n      sortable: true,\n      filterable: true,\n      options: [\n        { value: 'construction', label: 'Construction' },\n        { value: 'technical', label: 'Technical' },\n        { value: 'creative', label: 'Creative' },\n        { value: 'logistics', label: 'Logistics' },\n        { value: 'other', label: 'Other' }\n      ]\n    },\n    {\n      key: 'budget',\n      label: 'Budget',\n      type: 'number',\n      required: true,\n      sortable: true,\n      filterable: true\n    },\n    {\n      key: 'currency',\n      label: 'Currency',\n      type: 'select',\n      required: true,\n      sortable: true,\n      filterable: true,\n      options: [\n        { value: 'USD', label: 'USD' },\n        { value: 'EUR', label: 'EUR' },\n        { value: 'GBP', label: 'GBP' },\n        { value: 'CAD', label: 'CAD' }\n      ]\n    },\n    {\n      key: 'deadline',\n      label: 'Deadline',\n      type: 'date',\n      required: true,\n      sortable: true,\n      filterable: true\n    },\n    {\n      key: 'location',\n      label: 'Location',\n      type: 'text',\n      required: false,\n      sortable: true,\n      filterable: true\n    },\n    {\n      key: 'requirements',\n      label: 'Requirements',\n      type: 'textarea',\n      required: false,\n      sortable: false,\n      filterable: true\n    },\n    {\n      key: 'status',\n      label: 'Status',\n      type: 'select',\n      required: true,\n      sortable: true,\n      filterable: true,\n      options: [\n        { value: 'open', label: 'Open' },\n        { value: 'in_progress', label: 'In Progress' },\n        { value: 'closed', label: 'Closed' },\n        { value: 'cancelled', label: 'Cancelled' }\n      ]\n    },\n    {\n      key: 'created_at',\n      label: 'Created Date',\n      type: 'date',\n      required: false,\n      sortable: true,\n      filterable: true\n    },\n    {\n      key: 'updated_at',\n      label: 'Last Updated',\n      type: 'date',\n      required: false,\n      sortable: true,\n      filterable: true\n    }\n  ];\n\n  // Mock data loading function\n  const loadJobsData = async (): Promise<DataRecord[]> => {\n    // In a real implementation, this would fetch from Supabase\n    return [\n      {\n        id: '1',\n        title: 'Senior Construction Manager',\n        description: 'Lead construction team for major infrastructure project',\n        type: 'construction',\n        budget: 85000,\n        currency: 'USD',\n        deadline: '2024-03-15',\n        location: 'Los Angeles, CA',\n        requirements: 'Minimum 5 years experience, PMP certification preferred',\n        status: 'open',\n        created_at: '2024-01-15T10:00:00Z',\n        updated_at: '2024-01-20T14:30:00Z'\n      },\n      {\n        id: '2',\n        title: 'Video Production Specialist',\n        description: 'Create high-quality video content for marketing campaigns',\n        type: 'creative',\n        budget: 65000,\n        currency: 'USD',\n        deadline: '2024-02-28',\n        location: 'Remote',\n        requirements: 'Adobe Creative Suite expertise, portfolio required',\n        status: 'in_progress',\n        created_at: '2024-01-10T09:00:00Z',\n        updated_at: '2024-01-18T16:45:00Z'\n      },\n      {\n        id: '3',\n        title: 'Logistics Coordinator',\n        description: 'Manage supply chain and transportation logistics',\n        type: 'logistics',\n        budget: 55000,\n        currency: 'USD',\n        deadline: '2024-04-01',\n        location: 'Chicago, IL',\n        requirements: 'Experience with logistics software, strong organizational skills',\n        status: 'open',\n        created_at: '2024-01-12T11:30:00Z',\n        updated_at: '2024-01-19T13:15:00Z'\n      }\n    ];\n  };\n\n  // Data view configuration\n  const dataViewConfig: DataViewConfig = {\n    id: 'jobs-opportunities',\n    name: 'Job Opportunities',\n    viewType: 'grid',\n    defaultView: 'grid',\n    fields: fieldConfig,\n    data: data,\n    onSearch: (query: string) => {\n      console.log('Search:', query);\n      // Implement search logic\n    },\n    onFilter: (filters: any) => {\n      console.log('Filter:', filters);\n      // Implement filter logic\n    },\n    onSort: (sorts: any) => {\n      console.log('Sort:', sorts);\n      // Implement sort logic\n    },\n    onRefresh: () => {\n      console.log('Refresh data');\n      loadData();\n    },\n    onExport: (data, format) => {\n      console.log('Export:', format, data);\n      // Implement export logic\n    },\n    onImport: (importData: any) => {\n      console.log('Import:', importData);\n      // Implement import logic\n    }\n  };\n\n  const loadData = async () => {\n    try {\n      const jobsData = await loadJobsData();\n      setData(jobsData);\n    } catch (error) {\n      console.error('Error loading jobs data:', error);\n    }\n  };\n\n  useEffect(() => {\n    loadData();\n  }, [orgId]);\n\n  return (\n    <div className=\"h-full w-full\">\n      <StateManagerProvider>\n        <DataViewProvider config={dataViewConfig}>\n          <div className=\"flex flex-col h-full stack-md\">\n            {/* View Switcher and Actions */}\n            <div className=\"flex items-center justify-between\">\n              <ViewSwitcher />\n              <DataActions />\n            </div>\n\n            {/* Data Views */}\n            <DataGrid />\n            <KanbanBoard \n              columns={[\n                { id: 'open', title: 'Open' },\n                { id: 'in_progress', title: 'In Progress' },\n                { id: 'closed', title: 'Closed' },\n                { id: 'cancelled', title: 'Cancelled' }\n              ]}\n              statusField=\"status\"\n              titleField=\"title\"\n            />\n            <CalendarView \n              startDateField=\"deadline\"\n              titleField=\"title\"\n            />\n            <ListView \n              titleField=\"title\"\n              subtitleField=\"description\"\n            />\n\n            {/* Universal Drawer for CRUD operations */}\n            <Drawer title=\"Details\"\n              open={false}\n              onClose={() => {}}\n            >\n              <div className=\"p-md\">\n                <p>Job details will be implemented here.</p>\n              </div>\n            </Drawer>\n          </div>\n        </DataViewProvider>\n      </StateManagerProvider>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/jobs/JobsClient.unified.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/jobs/[id]/edit/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/jobs/[id]/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/jobs/assignments/AssignmentsClient.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadAssignments'. Either include it or remove the dependency array.","line":97,"column":6,"nodeType":"ArrayExpression","endLine":97,"endColumn":13,"suggestions":[{"desc":"Update the dependencies array to be: [loadAssignments, orgId]","fix":{"range":[2575,2582],"text":"[loadAssignments, orgId]"}}]},{"ruleId":"@next/next/no-img-element","severity":1,"message":"Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` or a custom image loader to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","line":386,"column":31,"nodeType":"JSXOpeningElement","endLine":390,"endColumn":33}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\n\nimport { CalendarIcon, Edit } from \"lucide-react\";\nimport { useState, useEffect } from 'react';\nimport { User } from '@supabase/supabase-js';\nimport { createBrowserClient } from '@ghxstship/auth';\nimport {\n  Badge,\n  Button,\n  Card,\n  Input,\n  Skeleton,\n  UnifiedInput\n} from \"@ghxstship/ui\";\nimport { ProgressBar } from \"../../../../_components/ui\"\nimport { \n  MagnifyingGlassIcon,\n  PlusIcon,\n  EyeIcon,\n  PencilIcon,\n  UserIcon,\n  ClockIcon,\n  CheckCircleIcon,\n  XCircleIcon,\n  ExclamationTriangleIcon,\n  CalendarIcon,\n  BuildingOfficeIcon,\n  ChartBarIcon,\n  UsersIcon\n} from '@heroicons/react/24/outline';\n\ninterface AssignmentsClientProps {\n  user: User;\n  orgId: string;\n  translations: {\n    title: string;\n    subtitle: string;\n  };\n}\n\ninterface JobAssignment {\n  id: string;\n  job_id: string;\n  assignee_user_id: string;\n  assignment_type: 'lead' | 'contributor' | 'reviewer' | 'consultant' | 'specialist';\n  status: 'pending' | 'accepted' | 'active' | 'completed' | 'declined' | 'cancelled';\n  start_date: string;\n  end_date?: string;\n  estimated_hours?: number;\n  actual_hours?: number;\n  hourly_rate?: number;\n  notes?: string;\n  skills_required?: string[];\n  workload_percentage?: number;\n  created_at: string;\n  updated_at: string;\n  organization_id: string;\n  // Related data\n  job_title?: string;\n  assignee_name?: string;\n  assignee_email?: string;\n  assignee_avatar?: string;\n}\n\nconst STATUS_OPTIONS = [\n  { value: 'all', label: 'All Statuses' },\n  { value: 'pending', label: 'Pending' },\n  { value: 'accepted', label: 'Accepted' },\n  { value: 'active', label: 'Active' },\n  { value: 'completed', label: 'Completed' },\n  { value: 'declined', label: 'Declined' },\n  { value: 'cancelled', label: 'Cancelled' },\n];\n\nconst TYPE_OPTIONS = [\n  { value: 'all', label: 'All Types' },\n  { value: 'lead', label: 'Lead' },\n  { value: 'contributor', label: 'Contributor' },\n  { value: 'reviewer', label: 'Reviewer' },\n  { value: 'consultant', label: 'Consultant' },\n  { value: 'specialist', label: 'Specialist' },\n];\n\nexport function AssignmentsClient({ user, orgId, translations }: AssignmentsClientProps) {\n  const [assignments, setAssignments] = useState<JobAssignment[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [statusFilter, setStatusFilter] = useState('all');\n  const [typeFilter, setTypeFilter] = useState('all');\n  const [showCreateDialog, setShowCreateDialog] = useState(false);\n\n  const supabase = createBrowserClient();\n\n  useEffect(() => {\n    loadAssignments();\n  }, [orgId]);\n\n  const loadAssignments = async () => {\n    try {\n      setLoading(true);\n      \n      // Load assignments with related job and user data\n      const { data, error } = await supabase\n        .from('job_assignments')\n        .select(`\n          *,\n          jobs (\n            title\n          ),\n          user_profiles!job_assignments_assignee_user_id_fkey (\n            full_name,\n            email,\n            avatar_url\n          )\n        `)\n        .eq('organization_id', orgId)\n        .order('created_at', { ascending: false });\n\n      if (error) throw error;\n\n      // Transform the data to flatten relationships\n      const transformedAssignments = (data || []).map((assignment: any) => ({\n        ...assignment,\n        job_title: assignment.jobs?.title || 'Unknown Job',\n        assignee_name: assignment.user_profiles?.full_name || 'Unknown User',\n        assignee_email: assignment.user_profiles?.email,\n        assignee_avatar: assignment.user_profiles?.avatar_url\n      }));\n\n      setAssignments(transformedAssignments);\n    } catch (error) {\n      console.error('Error loading assignments:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const filteredAssignments = assignments.filter((assignment: any) => {\n    const matchesSearch = (assignment.job_title && assignment.job_title.toLowerCase().includes(searchTerm.toLowerCase())) ||\n                         (assignment.assignee_name && assignment.assignee_name.toLowerCase().includes(searchTerm.toLowerCase())) ||\n                         (assignment.notes && assignment.notes.toLowerCase().includes(searchTerm.toLowerCase()));\n    const matchesStatus = statusFilter === 'all' || assignment.status === statusFilter;\n    const matchesType = typeFilter === 'all' || assignment.assignment_type === typeFilter;\n\n    return matchesSearch && matchesStatus && matchesType;\n  });\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'pending':\n        return 'bg-warning/10 color-warning';\n      case 'accepted':\n        return 'bg-accent/10 color-accent';\n      case 'active':\n        return 'bg-success/10 color-success';\n      case 'completed':\n        return 'bg-secondary/10 color-secondary';\n      case 'declined':\n        return 'bg-destructive/10 color-destructive';\n      case 'cancelled':\n        return 'bg-secondary color-muted';\n      default:\n        return 'bg-secondary color-muted';\n    }\n  };\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case 'pending':\n        return ClockIcon;\n      case 'accepted':\n        return CheckCircleIcon;\n      case 'active':\n        return CheckCircleIcon;\n      case 'completed':\n        return CheckCircleIcon;\n      case 'declined':\n        return XCircleIcon;\n      case 'cancelled':\n        return XCircleIcon;\n      default:\n        return ClockIcon;\n    }\n  };\n\n  const getTypeColor = (type: string) => {\n    switch (type) {\n      case 'lead':\n        return 'bg-secondary/10 color-secondary';\n      case 'contributor':\n        return 'bg-accent/10 color-accent';\n      case 'reviewer':\n        return 'bg-success/10 color-success';\n      case 'consultant':\n        return 'bg-warning/10 color-warning';\n      case 'specialist':\n        return 'bg-accent/10 color-accent';\n      default:\n        return 'bg-secondary color-muted';\n    }\n  };\n\n  const formatHourlyRate = (rate?: number) => {\n    if (!rate) return 'Rate not set';\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD'\n    }).format(rate);\n  };\n\n  const calculateUtilization = (estimatedHours?: number, actualHours?: number) => {\n    if (!estimatedHours || !actualHours) return null;\n    return Math.round((actualHours / estimatedHours) * 100);\n  };\n\n  const isOverdue = (endDate?: string) => {\n    if (!endDate) return false;\n    return new Date(endDate) < new Date();\n  };\n\n  const isDueSoon = (endDate?: string) => {\n    if (!endDate) return false;\n    const end = new Date(endDate);\n    const now = new Date();\n    const diffDays = Math.ceil((end.getTime() - now.getTime()) / (1000 * 60 * 60 * 24));\n    return diffDays <= 7 && diffDays >= 0;\n  };\n\n  return (\n    <div className=\"stack-lg\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-heading-3 text-heading-3 color-foreground\">{translations.title}</h1>\n          <p className=\"text-body-sm color-foreground/70 mt-xs\">{translations.subtitle}</p>\n        </div>\n        <Button onClick={() => setShowCreateDialog(true)}>\n          <PlusIcon className=\"h-icon-xs w-icon-xs mr-sm\" />\n          Create Assignment\n        </Button>\n      </div>\n\n      {/* Filters */}\n      <Card className=\"p-md\">\n        <div className=\"flex flex-col sm:flex-row gap-md\">\n          <div className=\"flex-1\">\n            <Input               placeholder=\"Search assignments...\"\n              value={searchTerm}\n              onChange={(e: React.ChangeEvent<HTMLInputElement>) => setSearchTerm(e.target.value)}\n              className=\"w-full\"\n            />\n          </div>\n          <div className=\"flex gap-sm\">\n            <select\n              value={statusFilter}\n              onChange={(e: React.ChangeEvent<HTMLInputElement>) => setStatusFilter(e.target.value)}\n              className=\" px-md py-sm border border-border rounded-md bg-background\"\n            >\n              {STATUS_OPTIONS.map((option: any) => (\n                <option key={option.value} value={option.value}>\n                  {option.label}\n                </option>\n              ))}\n            </select>\n            <select\n              value={typeFilter}\n              onChange={(e: React.ChangeEvent<HTMLInputElement>) => setTypeFilter(e.target.value)}\n              className=\" px-md py-sm border border-border rounded-md bg-background\"\n            >\n              {TYPE_OPTIONS.map((option: any) => (\n                <option key={option.value} value={option.value}>\n                  {option.label}\n                </option>\n              ))}\n            </select>\n          </div>\n        </div>\n      </Card>\n\n      {/* Stats */}\n      <div className=\"grid grid-cols-1 md:grid-cols-5 gap-md\">\n        <Card className=\"p-md\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-body-sm form-label color-foreground/70\">Total Assignments</p>\n              <p className=\"text-heading-3 text-heading-3 color-foreground\">{assignments.length}</p>\n            </div>\n            <UsersIcon className=\"h-icon-lg w-icon-lg color-accent\" />\n          </div>\n        </Card>\n        <Card className=\"p-md\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-body-sm form-label color-foreground/70\">Active</p>\n              <p className=\"text-heading-3 text-heading-3 color-success\">\n                {assignments.filter(a => a.status === 'active').length}\n              </p>\n            </div>\n            <CheckCircleIcon className=\"h-icon-lg w-icon-lg color-success\" />\n          </div>\n        </Card>\n        <Card className=\"p-md\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-body-sm form-label color-foreground/70\">Pending</p>\n              <p className=\"text-heading-3 text-heading-3 color-warning\">\n                {assignments.filter(a => a.status === 'pending').length}\n              </p>\n            </div>\n            <ClockIcon className=\"h-icon-lg w-icon-lg color-warning\" />\n          </div>\n        </Card>\n        <Card className=\"p-md\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-body-sm form-label color-foreground/70\">Completed</p>\n              <p className=\"text-heading-3 text-heading-3 color-secondary\">\n                {assignments.filter(a => a.status === 'completed').length}\n              </p>\n            </div>\n            <CheckCircleIcon className=\"h-icon-lg w-icon-lg color-secondary\" />\n          </div>\n        </Card>\n        <Card className=\"p-md\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-body-sm form-label color-foreground/70\">Avg Utilization</p>\n              <p className=\"text-heading-3 text-heading-3 color-accent\">\n                {assignments.length > 0 \n                  ? Math.round(assignments\n                      .map(a => calculateUtilization(a.estimated_hours, a.actual_hours))\n                      .filter(u => u !== null)\n                      .reduce((sum, u) => sum + (u || 0), 0) / \n                    assignments.filter(a => calculateUtilization(a.estimated_hours, a.actual_hours) !== null).length) || 0\n                  : 0}%\n              </p>\n            </div>\n            <ChartBarIcon className=\"h-icon-lg w-icon-lg color-accent\" />\n          </div>\n        </Card>\n      </div>\n\n      {/* Assignments List */}\n      <div className=\"stack-md\">\n        {loading ? (\n          Array.from({ length: 5 }).map((_, i) => (\n            <Card key={i} className=\"p-lg\">\n              <div className=\"flex items-start justify-between\">\n                <div className=\"flex-1\">\n                  <Skeleton className=\"h-icon-sm w-container-sm mb-sm\" />\n                  <Skeleton className=\"h-icon-xs w-component-xl mb-sm\" />\n                  <Skeleton className=\"h-icon-xs w-full mb-sm\" />\n                  <Skeleton className=\"h-icon-xs w-3/4\" />\n                </div>\n                <div className=\"flex gap-sm\">\n                  <Skeleton className=\"h-icon-md w-component-md\" />\n                  <Skeleton className=\"h-icon-md w-component-lg\" />\n                </div>\n              </div>\n            </Card>\n          ))\n        ) : filteredAssignments.length > 0 ? (\n          filteredAssignments.map((assignment: any) => {\n            const StatusIcon = getStatusIcon(assignment.status);\n            const isLate = isOverdue(assignment.end_date);\n            const isDue = isDueSoon(assignment.end_date);\n            const utilization = calculateUtilization(assignment.estimated_hours, assignment.actual_hours);\n\n            return (\n              <Card key={assignment.id} className={`p-lg hover:shadow-elevated transition-shadow ${isLate ? 'border-destructive/20 bg-destructive/5' : isDue ? 'border-warning/20 bg-warning/5' : ''}`}>\n                <div className=\"flex items-start justify-between\">\n                  <div className=\"flex-1\">\n                    <div className=\"flex items-start justify-between mb-sm\">\n                      <div>\n                        <h3 className=\"text-body text-heading-4 color-foreground mb-xs flex items-center gap-sm\">\n                          <StatusIcon className=\"h-icon-sm w-icon-sm color-foreground/60\" />\n                          {assignment.job_title}\n                          {(isDue || isLate) && (\n                            <ExclamationTriangleIcon className={`h-icon-xs w-icon-xs ${isLate ? 'color-destructive' : 'color-warning'}`} />\n                          )}\n                        </h3>\n                        <div className=\"flex items-center gap-sm text-body-sm color-foreground/70\">\n                          <div className=\"flex items-center gap-xs\">\n                            {assignment.assignee_avatar ? (\n                              <img \n                                src={assignment.assignee_avatar} \n                                alt={assignment.assignee_name}\n                                className=\"h-icon-xs w-icon-xs rounded-full\"\n                              />\n                            ) : (\n                              <UserIcon className=\"h-icon-xs w-icon-xs\" />\n                            )}\n                            <span>{assignment.assignee_name}</span>\n                          </div>\n                          {assignment.assignee_email && (\n                            <>\n                              <span>•</span>\n                              <span>{assignment.assignee_email}</span>\n                            </>\n                          )}\n                        </div>\n                      </div>\n                      <div className=\"flex gap-sm\">\n                        <Badge className={getStatusColor(assignment.status)}>\n                          {assignment.status.replace('_', ' ')}\n                        </Badge>\n                        <Badge className={getTypeColor(assignment.assignment_type)}>\n                          {assignment.assignment_type}\n                        </Badge>\n                      </div>\n                    </div>\n\n                    <div className=\"grid grid-cols-1 md:grid-cols-3 gap-md text-body-sm color-foreground/70 mb-sm\">\n                      <div className=\"flex items-center gap-xs\">\n                        <CalendarIcon className=\"h-icon-xs w-icon-xs\" />\n                        <span>\n                          {new Date(assignment.start_date).toLocaleDateString()}\n                          {assignment.end_date && ` - ${new Date(assignment.end_date).toLocaleDateString()}`}\n                        </span>\n                      </div>\n                      {assignment.estimated_hours && (\n                        <div className=\"flex items-center gap-xs\">\n                          <ClockIcon className=\"h-icon-xs w-icon-xs\" />\n                          <span>\n                            Est: {assignment.estimated_hours}h\n                            {assignment.actual_hours && ` / Actual: ${assignment.actual_hours}h`}\n                          </span>\n                        </div>\n                      )}\n                      {assignment.hourly_rate && (\n                        <div className=\"flex items-center gap-xs\">\n                          <span>{formatHourlyRate(assignment.hourly_rate)}/hr</span>\n                        </div>\n                      )}\n                    </div>\n\n                    {/* Workload and Utilization */}\n                    <div className=\"flex items-center gap-lg mb-sm\">\n                      {assignment.workload_percentage && (\n                        <div>\n                          <div className=\"flex items-center justify-between mb-xs\">\n                            <span className=\"text-body-sm form-label color-foreground/70\">Workload</span>\n                            <span className=\"text-body-sm color-foreground/70\">{assignment.workload_percentage}%</span>\n                          </div>\n                          <ProgressBar \n                            percentage={assignment.workload_percentage || 0}\n                            variant=\"info\"\n                            size=\"md\"\n                            className=\"w-component-lg\"\n                          />\n                        </div>\n                      )}\n                      {utilization !== null && (\n                        <div>\n                          <div className=\"flex items-center justify-between mb-xs\">\n                            <span className=\"text-body-sm form-label color-foreground/70\">Utilization</span>\n                            <span className=\"text-body-sm color-foreground/70\">{utilization}%</span>\n                          </div>\n                          <ProgressBar \n                            percentage={utilization}\n                            variant={utilization > 100 ? 'warning' : 'success'}\n                            size=\"md\"\n                            className=\"w-component-lg\"\n                          />\n                        </div>\n                      )}\n                    </div>\n\n                    {assignment.skills_required && assignment.skills_required.length > 0 && (\n                      <div className=\"mb-sm\">\n                        <span className=\"text-body-sm form-label color-foreground/70 mb-xs block\">Required Skills:</span>\n                        <div className=\"flex flex-wrap gap-xs\">\n                          {assignment.skills_required.slice(0, 5).map((skill, index) => (\n                            <Badge key={index} variant=\"secondary\">\n                              {skill}\n                            </Badge>\n                          ))}\n                          {assignment.skills_required.length > 5 && (\n                            <Badge variant=\"secondary\">\n                              +{assignment.skills_required.length - 5} more\n                            </Badge>\n                          )}\n                        </div>\n                      </div>\n                    )}\n\n                    {assignment.notes && (\n                      <div className=\"mt-sm p-sm bg-accent rounded-md\">\n                        <p className=\"text-body-sm color-foreground/70\">\n                          <strong>Notes:</strong> {assignment.notes}\n                        </p>\n                      </div>\n                    )}\n                  </div>\n                </div>\n\n                <div className=\"flex items-center justify-between mt-md pt-md border-t border-border\">\n                  <div className=\"text-body-sm color-foreground/50\">\n                    Created: {new Date(assignment.created_at).toLocaleDateString()}\n                    {assignment.updated_at !== assignment.created_at && (\n                      <span> • Updated: {new Date(assignment.updated_at).toLocaleDateString()}</span>\n                    )}\n                  </div>\n                  <div className=\"flex gap-sm\">\n                    <Button>\n                      <EyeIcon className=\"h-icon-xs w-icon-xs mr-xs\" />\n                      View\n                    </Button>\n                    <Button>\n                      <PencilIcon className=\"h-icon-xs w-icon-xs mr-xs\" />\n                      Edit\n                    </Button>\n                    <Button>\n                      <ChartBarIcon className=\"h-icon-xs w-icon-xs mr-xs\" />\n                      Track Time\n                    </Button>\n                  </div>\n                </div>\n              </Card>\n            );\n          })\n        ) : (\n          <Card className=\"p-xsxl text-center\">\n            <UsersIcon className=\"h-icon-2xl w-icon-2xl color-foreground/30 mx-auto mb-md\" />\n            <h3 className=\"text-body form-label color-foreground mb-sm\">No assignments found</h3>\n            <p className=\"text-body-sm color-foreground/70 mb-md\">\n              {searchTerm || statusFilter !== 'all' || typeFilter !== 'all'\n                ? 'Try adjusting your filters or search terms.'\n                : 'Get started by creating your first assignment.'}\n            </p>\n            <Button onClick={() => setShowCreateDialog(true)}>\n              <PlusIcon className=\"h-icon-xs w-icon-xs mr-sm\" />\n              Create Assignment\n            </Button>\n          </Card>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default AssignmentsClient;\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/jobs/assignments/CreateAssignmentClient.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/jobs/assignments/[id]/edit/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/jobs/assignments/[id]/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/jobs/assignments/create/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/jobs/assignments/drawers/ViewAssignmentDrawer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/jobs/assignments/lib/assignmentsService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/jobs/assignments/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/jobs/assignments/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/jobs/assignments/views/AssignmentDashboardView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/jobs/assignments/views/AssignmentGridView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/jobs/assignments/views/AssignmentKanbanView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/jobs/bids/BidsClient.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadBids'. Either include it or remove the dependency array.","line":76,"column":6,"nodeType":"ArrayExpression","endLine":76,"endColumn":13,"suggestions":[{"desc":"Update the dependencies array to be: [loadBids, orgId]","fix":{"range":[2010,2017],"text":"[loadBids, orgId]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\n\nimport { useState, useEffect } from 'react';\nimport { User } from '@supabase/supabase-js';\nimport {\n  Badge,\n  Button,\n  Card,\n  Input,\n  Skeleton,\n  UnifiedInput\n} from \"@ghxstship/ui\";\nimport { Edit } from \"lucide-react\";\n\ninterface BidsClientProps {\n  user: User;\n  orgId: string;\n  translations: {\n    title: string;\n    subtitle: string;\n  };\n}\n\ninterface Bid {\n  id: string;\n  organizationId: string;\n  opportunityId: string;\n  jobId?: string;\n  title: string;\n  description?: string;\n  status: 'draft' | 'submitted' | 'under_review' | 'accepted' | 'rejected' | 'withdrawn';\n  type: 'fixed_price' | 'hourly' | 'milestone_based' | 'retainer';\n  amount: number;\n  currency: string;\n  proposalDocumentUrl?: string;\n  submittedAt?: string;\n  responseDeadline?: string;\n  estimatedDuration?: string;\n  notes?: string;\n  createdAt?: string;\n  updatedAt?: string;\n  opportunity_title?: string;\n  client_name?: string;\n  assignee_name?: string;\n}\n\nconst STATUS_OPTIONS = [\n  { value: 'all', label: 'All Statuses' },\n  { value: 'draft', label: 'Draft' },\n  { value: 'submitted', label: 'Submitted' },\n  { value: 'under_review', label: 'Under Review' },\n  { value: 'accepted', label: 'Accepted' },\n  { value: 'rejected', label: 'Rejected' },\n  { value: 'withdrawn', label: 'Withdrawn' },\n];\n\nconst TYPE_OPTIONS = [\n  { value: 'all', label: 'All Types' },\n  { value: 'fixed_price', label: 'Fixed Price' },\n  { value: 'hourly', label: 'Hourly' },\n  { value: 'milestone_based', label: 'Milestone Based' },\n  { value: 'retainer', label: 'Retainer' },\n];\n\nexport function BidsClient({ user, orgId, translations }: BidsClientProps) {\n  const [bids, setBids] = useState<Bid[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [statusFilter, setStatusFilter] = useState('all');\n  const [typeFilter, setTypeFilter] = useState('all');\n  const [showCreateDialog, setShowCreateDialog] = useState(false);\n\n  useEffect(() => {\n    loadBids();\n  }, [orgId]);\n\n  const loadBids = async () => {\n    try {\n      setLoading(true);\n      const response = await fetch('/api/v1/jobs/bids', {\n        headers: {\n          'x-org-id': orgId,\n          'Content-Type': 'application/json'\n        }\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to load bids');\n      }\n\n      const data = await response.json();\n      setBids(data.items || []);\n    } catch (error) {\n      console.error('Error loading bids:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const filteredBids = bids.filter((bid: any) => {\n    const matchesSearch = bid.title.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         (bid.description?.toLowerCase().includes(searchTerm.toLowerCase()));\n    const matchesStatus = statusFilter === 'all' || bid.status === statusFilter;\n    const matchesType = typeFilter === 'all' || bid.type === typeFilter;\n\n    return matchesSearch && matchesStatus && matchesType;\n  });\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'draft':\n        return 'bg-secondary color-muted';\n      case 'submitted':\n        return 'bg-accent/10 color-accent';\n      case 'under_review':\n        return 'bg-warning/10 color-warning';\n      case 'accepted':\n        return 'bg-success/10 color-success';\n      case 'rejected':\n        return 'bg-destructive/10 color-destructive';\n      case 'withdrawn':\n        return 'bg-secondary/10 color-secondary-foreground';\n      default:\n        return 'bg-secondary color-muted';\n    }\n  };\n\n  const getTypeColor = (type: string) => {\n    switch (type) {\n      case 'fixed_price':\n        return 'bg-accent/10 color-accent';\n      case 'hourly':\n        return 'bg-success/10 color-success';\n      case 'milestone_based':\n        return 'bg-secondary/10 color-secondary-foreground';\n      case 'retainer':\n        return 'bg-accent/10 color-accent-foreground';\n      default:\n        return 'bg-secondary color-muted';\n    }\n  };\n\n  const createBid = async (data: Partial<Bid>) => {\n    try {\n      const response = await fetch('/api/v1/jobs/bids', {\n        method: 'POST',\n        headers: {\n          'x-org-id': orgId,\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(data)\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to create bid');\n      }\n\n      await loadBids();\n      setShowCreateDialog(false);\n    } catch (error) {\n      console.error('Error creating bid:', error);\n    }\n  };\n\n  if (loading) {\n    return (\n      <div className=\"stack-lg\">\n        <div className=\"flex justify-between items-center\">\n          <div>\n            <h1 className=\"text-heading-3 text-heading-3 color-foreground\">{translations.title}</h1>\n            <p className=\"color-muted\">{translations.subtitle}</p>\n          </div>\n          <Button onClick={() => setShowCreateDialog(true)}>\n            + Create Bid\n          </Button>\n        </div>\n\n        <div className=\"grid gap-md\">\n          {[...Array(6)].map((_, i) => (\n            <Card key={i} className=\"p-lg\">\n              <div className=\"flex items-start justify-between\">\n                <div className=\"flex-1\">\n                  <div className=\"flex items-center gap-sm mb-sm\">\n                    <div className=\"h-icon-sm w-icon-sm bg-secondary rounded\" />\n                    <Skeleton className=\"h-icon-sm w-container-xs\" />\n                  </div>\n                  <Skeleton className=\"h-icon-xs w-full mb-sm\" />\n                  <Skeleton className=\"h-icon-xs w-3/4\" />\n                </div>\n                <div className=\"flex gap-sm\">\n                  <Skeleton className=\"h-icon-md w-component-md\" />\n                  <Skeleton className=\"h-icon-md w-component-lg\" />\n                </div>\n              </div>\n            </Card>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"stack-lg\">\n      <div className=\"flex justify-between items-center\">\n        <div>\n          <h1 className=\"text-heading-3 text-heading-3 color-foreground\">{translations.title}</h1>\n          <p className=\"color-muted\">{translations.subtitle}</p>\n        </div>\n        <Button onClick={() => setShowCreateDialog(true)}>\n          + Create Bid\n        </Button>\n      </div>\n\n      <div className=\"flex gap-md mb-lg\">\n        <div className=\"flex-1\">\n          <Input             placeholder=\"Search bids...\"\n            value={searchTerm}\n            onChange={(e: React.ChangeEvent<HTMLInputElement>) => setSearchTerm(e.target.value)}\n            className=\"w-full\"\n          />\n        </div>\n        <select\n          value={statusFilter}\n          onChange={(e: React.ChangeEvent<HTMLInputElement>) => setStatusFilter(e.target.value)}\n          className=\" px-md py-sm border border-border rounded-md bg-background\"\n        >\n          {STATUS_OPTIONS.map((option: any) => (\n            <option key={option.value} value={option.value}>\n              {option.label}\n            </option>\n          ))}\n        </select>\n        <select\n          value={typeFilter}\n          onChange={(e: React.ChangeEvent<HTMLInputElement>) => setTypeFilter(e.target.value)}\n          className=\" px-md py-sm border border-border rounded-md bg-background\"\n        >\n          {TYPE_OPTIONS.map((option: any) => (\n            <option key={option.value} value={option.value}>\n              {option.label}\n            </option>\n          ))}\n        </select>\n      </div>\n\n      {filteredBids.length === 0 ? (\n        <Card className=\"p-xsxl text-center\">\n          <div className=\"h-icon-2xl w-icon-2xl bg-secondary rounded mx-auto mb-md\" />\n          <h3 className=\"text-body form-label color-foreground mb-sm\">No bids found</h3>\n          <p className=\"color-muted mb-md\">\n            {searchTerm || statusFilter !== 'all' || typeFilter !== 'all'\n              ? 'Try adjusting your search or filters to find bids.'\n              : 'Get started by creating your first bid.'}\n          </p>\n          <Button onClick={() => setShowCreateDialog(true)}>\n            + Create Bid\n          </Button>\n        </Card>\n      ) : (\n        <div className=\"grid gap-md\">\n          {filteredBids.map((bid: any) => (\n            <Card key={bid.id} className=\"p-lg hover:shadow-elevated transition-shadow\">\n              <div className=\"flex items-start justify-between\">\n                <div className=\"flex-1\">\n                  <div className=\"flex items-center gap-sm mb-sm\">\n                    <div className=\"h-icon-sm w-icon-sm bg-secondary rounded\" />\n                    <h3 className=\"text-body text-heading-4 color-foreground\">{bid.title}</h3>\n                    <Badge className={getStatusColor(bid.status)}>\n                      {bid.status}\n                    </Badge>\n                    <Badge className={getTypeColor(bid.type)}>\n                      {bid.type.replace('_', ' ')}\n                    </Badge>\n                  </div>\n\n                  {bid.description && (\n                    <p className=\"color-muted mb-md line-clamp-xs\">{bid.description}</p>\n                  )}\n\n                  <div className=\"grid grid-cols-2 md:grid-cols-3 gap-md text-body-sm mb-md\">\n                    <div className=\"flex items-center gap-sm\">\n                      <div className=\"h-icon-xs w-icon-xs bg-secondary rounded\" />\n                      <span className=\"form-label\">${bid.amount.toLocaleString()} {bid.currency}</span>\n                    </div>\n                    {bid.estimatedDuration && (\n                      <div className=\"flex items-center gap-sm\">\n                        <div className=\"h-icon-xs w-icon-xs bg-secondary rounded\" />\n                        <span>{bid.estimatedDuration}</span>\n                      </div>\n                    )}\n                    {bid.responseDeadline && (\n                      <div className=\"flex items-center gap-sm\">\n                        <div className=\"h-icon-xs w-icon-xs bg-secondary rounded\" />\n                        <span>{new Date(bid.responseDeadline).toLocaleDateString()}</span>\n                      </div>\n                    )}\n                  </div>\n\n                  <div className=\"flex items-center justify-between pt-md border-t\">\n                    <div className=\"flex items-center gap-md text-body-sm color-muted\">\n                      {bid.createdAt && (\n                        <span>Created {new Date(bid.createdAt).toLocaleDateString()}</span>\n                      )}\n                      {bid.submittedAt && (\n                        <span>Submitted {new Date(bid.submittedAt).toLocaleDateString()}</span>\n                      )}\n                    </div>\n                    <div className=\"flex gap-sm\">\n                      <Button>\n                        View\n                      </Button>\n                      <Button>\n                        Edit\n                      </Button>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </Card>\n          ))}\n        </div>\n      )}\n\n      {/* Create Dialog */}\n      {showCreateDialog && (\n        <div className=\"fixed inset-0 bg-foreground/30 backdrop-blur-sm flex items-center justify-center p-md z-50\">\n          <div className=\"bg-background rounded-lg p-lg w-full max-w-md\">\n            <h3 className=\"text-body text-heading-4 mb-md\">Create New Bid</h3>\n            <form onSubmit={(e: any) => {\n              e.preventDefault();\n              const formData = new FormData(e.currentTarget);\n              createBid({\n                title: formData.get('title') as string,\n                description: formData.get('description') as string,\n                type: formData.get('type') as any,\n                status: 'draft',\n                amount: Number(formData.get('amount')),\n                currency: 'USD',\n                opportunityId: formData.get('opportunityId') as string\n              });\n            }}>\n              <div className=\"stack-md\">\n                <div>\n                  <label className=\"block text-body-sm form-label mb-xs\">Title</label>\n                  <Input name=\"title\" required />\n                </div>\n                <div>\n                  <label className=\"block text-body-sm form-label mb-xs\">Description</label>\n                  <textarea name=\"description\" className=\"w-full p-sm border border-border rounded bg-background\" rows={3} />\n                </div>\n                <div>\n                  <label className=\"block text-body-sm form-label mb-xs\">Type</label>\n                  <select name=\"type\" className=\"w-full p-sm border border-border rounded bg-background\" required>\n                    {TYPE_OPTIONS.slice(1).map((option: any) => (\n                      <option key={option.value} value={option.value}>\n                        {option.label}\n                      </option>\n                    ))}\n                  </select>\n                </div>\n                <div>\n                  <label className=\"block text-body-sm form-label mb-xs\">Amount</label>\n                  <Input name=\"amount\" type=\"number\" required />\n                </div>\n                <div>\n                  <label className=\"block text-body-sm form-label mb-xs\">Opportunity ID</label>\n                  <Input name=\"opportunityId\" required />\n                </div>\n              </div>\n              <div className=\"flex gap-sm mt-lg\">\n                <Button type=\"submit\">Create</Button>\n                <Button type=\"button\" variant=\"outline\" onClick={() => setShowCreateDialog(false)}>\n                  Cancel\n                </Button>\n              </div>\n            </form>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/jobs/bids/CreateBidClient.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/jobs/bids/create/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/jobs/bids/drawers/ViewBidDrawer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/jobs/bids/lib/bidsService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/jobs/bids/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/jobs/bids/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/jobs/bids/views/BidDashboardView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/jobs/bids/views/BidGridView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/jobs/compliance/ComplianceClient.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadCompliance'. Either include it or remove the dependency array.","line":106,"column":6,"nodeType":"ArrayExpression","endLine":106,"endColumn":13,"suggestions":[{"desc":"Update the dependencies array to be: [loadCompliance, orgId]","fix":{"range":[2911,2918],"text":"[loadCompliance, orgId]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\n\nimport { CalendarIcon, Edit } from \"lucide-react\";\nimport { useState, useEffect } from 'react';\nimport { User } from '@supabase/supabase-js';\nimport { createBrowserClient } from '@ghxstship/auth';\nimport {\n  Badge,\n  Button,\n  Card,\n  Input,\n  Skeleton,\n  UnifiedInput\n} from \"@ghxstship/ui\";\nimport { \n  MagnifyingGlassIcon,\n  PlusIcon,\n  EyeIcon,\n  PencilIcon,\n  DocumentTextIcon,\n  ClockIcon,\n  CheckCircleIcon,\n  XCircleIcon,\n  ExclamationTriangleIcon,\n  CalendarIcon,\n  BuildingOfficeIcon,\n  ShieldCheckIcon,\n  DocumentCheckIcon,\n  ArrowDownTrayIcon\n} from '@heroicons/react/24/outline';\n\ninterface ComplianceClientProps {\n  user: User;\n  orgId: string;\n  translations: {\n    title: string;\n    subtitle: string;\n  };\n}\n\ninterface JobCompliance {\n  id: string;\n  job_id: string;\n  kind: 'regulatory' | 'safety' | 'quality' | 'security' | 'environmental' | 'legal' | 'financial';\n  title: string;\n  description: string;\n  status: 'pending' | 'in_progress' | 'compliant' | 'non_compliant' | 'expired' | 'waived';\n  priority: 'low' | 'medium' | 'high' | 'critical';\n  due_at?: string;\n  completed_at?: string;\n  evidence_url?: string;\n  notes?: string;\n  requirements?: string[];\n  responsible_party?: string;\n  reviewer?: string;\n  created_at: string;\n  updated_at: string;\n  organization_id: string;\n  // Related data\n  job_title?: string;\n}\n\nconst STATUS_OPTIONS = [\n  { value: 'all', label: 'All Statuses' },\n  { value: 'pending', label: 'Pending' },\n  { value: 'in_progress', label: 'In Progress' },\n  { value: 'compliant', label: 'Compliant' },\n  { value: 'non_compliant', label: 'Non-Compliant' },\n  { value: 'expired', label: 'Expired' },\n  { value: 'waived', label: 'Waived' },\n];\n\nconst KIND_OPTIONS = [\n  { value: 'all', label: 'All Types' },\n  { value: 'regulatory', label: 'Regulatory' },\n  { value: 'safety', label: 'Safety' },\n  { value: 'quality', label: 'Quality' },\n  { value: 'security', label: 'Security' },\n  { value: 'environmental', label: 'Environmental' },\n  { value: 'legal', label: 'Legal' },\n  { value: 'financial', label: 'Financial' },\n];\n\nconst PRIORITY_OPTIONS = [\n  { value: 'all', label: 'All Priorities' },\n  { value: 'low', label: 'Low' },\n  { value: 'medium', label: 'Medium' },\n  { value: 'high', label: 'High' },\n  { value: 'critical', label: 'Critical' },\n];\n\nexport function ComplianceClient({ user, orgId, translations }: ComplianceClientProps) {\n  const [compliance, setCompliance] = useState<JobCompliance[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [statusFilter, setStatusFilter] = useState('all');\n  const [kindFilter, setKindFilter] = useState('all');\n  const [priorityFilter, setPriorityFilter] = useState('all');\n  const [showCreateDialog, setShowCreateDialog] = useState(false);\n\n  const supabase = createBrowserClient();\n\n  useEffect(() => {\n    loadCompliance();\n  }, [orgId]);\n\n  const loadCompliance = async () => {\n    try {\n      setLoading(true);\n      \n      // Load compliance items with related job data\n      const { data, error } = await supabase\n        .from('job_compliance')\n        .select(`\n          *,\n          jobs (\n            title\n          )\n        `)\n        .eq('organization_id', orgId)\n        .order('created_at', { ascending: false });\n\n      if (error) throw error;\n\n      // Transform the data to flatten relationships\n      const transformedCompliance = (data || []).map((item: any) => ({\n        ...item,\n        job_title: item.jobs?.title || 'Unknown Job'\n      }));\n\n      setCompliance(transformedCompliance);\n    } catch (error) {\n      console.error('Error loading compliance:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const filteredCompliance = compliance.filter((item: any) => {\n    const matchesSearch = item.title.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         item.description.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         (item.job_title && item.job_title.toLowerCase().includes(searchTerm.toLowerCase())) ||\n                         (item.notes && item.notes.toLowerCase().includes(searchTerm.toLowerCase()));\n    const matchesStatus = statusFilter === 'all' || item.status === statusFilter;\n    const matchesKind = kindFilter === 'all' || item.kind === kindFilter;\n    const matchesPriority = priorityFilter === 'all' || item.priority === priorityFilter;\n\n    return matchesSearch && matchesStatus && matchesKind && matchesPriority;\n  });\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'pending':\n        return 'bg-warning/10 color-warning';\n      case 'in_progress':\n        return 'bg-accent/10 color-accent';\n      case 'compliant':\n        return 'bg-success/10 color-success';\n      case 'non_compliant':\n        return 'bg-destructive/10 color-destructive';\n      case 'expired':\n        return 'bg-warning/10 color-warning';\n      case 'waived':\n        return 'bg-secondary color-muted';\n      default:\n        return 'bg-secondary color-muted';\n    }\n  };\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case 'pending':\n        return ClockIcon;\n      case 'in_progress':\n        return DocumentTextIcon;\n      case 'compliant':\n        return CheckCircleIcon;\n      case 'non_compliant':\n        return XCircleIcon;\n      case 'expired':\n        return ExclamationTriangleIcon;\n      case 'waived':\n        return DocumentCheckIcon;\n      default:\n        return ClockIcon;\n    }\n  };\n\n  const getPriorityColor = (priority: string) => {\n    switch (priority) {\n      case 'low':\n        return 'bg-secondary color-muted';\n      case 'medium':\n        return 'bg-accent/10 color-accent';\n      case 'high':\n        return 'bg-warning/10 color-warning';\n      case 'critical':\n        return 'bg-destructive/10 color-destructive';\n      default:\n        return 'bg-secondary color-muted';\n    }\n  };\n\n  const getKindColor = (kind: string) => {\n    switch (kind) {\n      case 'regulatory':\n        return 'bg-secondary/10 color-secondary';\n      case 'safety':\n        return 'bg-destructive/10 color-destructive';\n      case 'quality':\n        return 'bg-accent/10 color-accent';\n      case 'security':\n        return 'bg-accent/10 color-accent';\n      case 'environmental':\n        return 'bg-success/10 color-success';\n      case 'legal':\n        return 'bg-warning/10 color-warning';\n      case 'financial':\n        return 'bg-warning/10 color-warning';\n      default:\n        return 'bg-secondary color-muted';\n    }\n  };\n\n  const isOverdue = (dueDate?: string) => {\n    if (!dueDate) return false;\n    return new Date(dueDate) < new Date();\n  };\n\n  const isDueSoon = (dueDate?: string) => {\n    if (!dueDate) return false;\n    const due = new Date(dueDate);\n    const now = new Date();\n    const diffDays = Math.ceil((due.getTime() - now.getTime()) / (1000 * 60 * 60 * 24));\n    return diffDays <= 7 && diffDays >= 0;\n  };\n\n  return (\n    <div className=\"stack-lg\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-heading-3 text-heading-3 color-foreground\">{translations.title}</h1>\n          <p className=\"text-body-sm color-foreground/70 mt-xs\">{translations.subtitle}</p>\n        </div>\n        <Button onClick={() => setShowCreateDialog(true)}>\n          <PlusIcon className=\"h-icon-xs w-icon-xs mr-sm\" />\n          Add Compliance Item\n        </Button>\n      </div>\n\n      {/* Filters */}\n      <Card className=\"p-md\">\n        <div className=\"flex flex-col sm:flex-row gap-md\">\n          <div className=\"flex-1\">\n            <Input               placeholder=\"Search compliance items...\"\n              value={searchTerm}\n              onChange={(e: React.ChangeEvent<HTMLInputElement>) => setSearchTerm(e.target.value)}\n              className=\"w-full\"\n            />\n          </div>\n          <div className=\"flex gap-sm\">\n            <select\n              value={statusFilter}\n              onChange={(e: React.ChangeEvent<HTMLInputElement>) => setStatusFilter(e.target.value)}\n              className=\" px-md py-sm border border-border rounded-md bg-background\"\n            >\n              {STATUS_OPTIONS.map((option: any) => (\n                <option key={option.value} value={option.value}>\n                  {option.label}\n                </option>\n              ))}\n            </select>\n            <select\n              value={kindFilter}\n              onChange={(e: React.ChangeEvent<HTMLInputElement>) => setKindFilter(e.target.value)}\n              className=\" px-md py-sm border border-border rounded-md bg-background\"\n            >\n              {KIND_OPTIONS.map((option: any) => (\n                <option key={option.value} value={option.value}>\n                  {option.label}\n                </option>\n              ))}\n            </select>\n            <select\n              value={priorityFilter}\n              onChange={(e: React.ChangeEvent<HTMLInputElement>) => setPriorityFilter(e.target.value)}\n              className=\" px-md py-sm border border-border rounded-md bg-background\"\n            >\n              {PRIORITY_OPTIONS.map((option: any) => (\n                <option key={option.value} value={option.value}>\n                  {option.label}\n                </option>\n              ))}\n            </select>\n          </div>\n        </div>\n      </Card>\n\n      {/* Stats */}\n      <div className=\"grid grid-cols-1 md:grid-cols-5 gap-md\">\n        <Card className=\"p-md\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-body-sm form-label color-foreground/70\">Total Items</p>\n              <p className=\"text-heading-3 text-heading-3 color-foreground\">{compliance.length}</p>\n            </div>\n            <ShieldCheckIcon className=\"h-icon-lg w-icon-lg color-accent\" />\n          </div>\n        </Card>\n        <Card className=\"p-md\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-body-sm form-label color-foreground/70\">Compliant</p>\n              <p className=\"text-heading-3 text-heading-3 color-success\">\n                {compliance.filter(c => c.status === 'compliant').length}\n              </p>\n            </div>\n            <CheckCircleIcon className=\"h-icon-lg w-icon-lg color-success\" />\n          </div>\n        </Card>\n        <Card className=\"p-md\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-body-sm form-label color-foreground/70\">Non-Compliant</p>\n              <p className=\"text-heading-3 text-heading-3 color-destructive\">\n                {compliance.filter(c => c.status === 'non_compliant').length}\n              </p>\n            </div>\n            <XCircleIcon className=\"h-icon-lg w-icon-lg color-destructive\" />\n          </div>\n        </Card>\n        <Card className=\"p-md\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-body-sm form-label color-foreground/70\">Overdue</p>\n              <p className=\"text-heading-3 text-heading-3 color-warning\">\n                {compliance.filter(c => isOverdue(c.due_at)).length}\n              </p>\n            </div>\n            <ExclamationTriangleIcon className=\"h-icon-lg w-icon-lg color-warning\" />\n          </div>\n        </Card>\n        <Card className=\"p-md\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-body-sm form-label color-foreground/70\">Critical</p>\n              <p className=\"text-heading-3 text-heading-3 color-secondary\">\n                {compliance.filter(c => c.priority === 'critical').length}\n              </p>\n            </div>\n            <ExclamationTriangleIcon className=\"h-icon-lg w-icon-lg color-secondary\" />\n          </div>\n        </Card>\n      </div>\n\n      {/* Compliance List */}\n      <div className=\"stack-md\">\n        {loading ? (\n          Array.from({ length: 5 }).map((_, i) => (\n            <Card key={i} className=\"p-lg\">\n              <div className=\"flex items-start justify-between\">\n                <div className=\"flex-1\">\n                  <Skeleton className=\"h-icon-sm w-container-sm mb-sm\" />\n                  <Skeleton className=\"h-icon-xs w-component-xl mb-sm\" />\n                  <Skeleton className=\"h-icon-xs w-full mb-sm\" />\n                  <Skeleton className=\"h-icon-xs w-3/4\" />\n                </div>\n                <div className=\"flex gap-sm\">\n                  <Skeleton className=\"h-icon-md w-component-md\" />\n                  <Skeleton className=\"h-icon-md w-component-lg\" />\n                </div>\n              </div>\n            </Card>\n          ))\n        ) : filteredCompliance.length > 0 ? (\n          filteredCompliance.map((item: any) => {\n            const StatusIcon = getStatusIcon(item.status);\n            const isLate = isOverdue(item.due_at);\n            const isDue = isDueSoon(item.due_at);\n\n            return (\n              <Card key={item.id} className={`p-lg hover:shadow-elevated transition-shadow ${isLate ? 'border-destructive/20 bg-destructive/5' : isDue ? 'border-warning/20 bg-warning/5' : ''}`}>\n                <div className=\"flex items-start justify-between\">\n                  <div className=\"flex-1\">\n                    <div className=\"flex items-start justify-between mb-sm\">\n                      <div>\n                        <h3 className=\"text-body text-heading-4 color-foreground mb-xs flex items-center gap-sm\">\n                          <StatusIcon className=\"h-icon-sm w-icon-sm color-foreground/60\" />\n                          {item.title}\n                          {(isDue || isLate) && (\n                            <ExclamationTriangleIcon className={`h-icon-xs w-icon-xs ${isLate ? 'color-destructive' : 'color-warning'}`} />\n                          )}\n                        </h3>\n                        <div className=\"flex items-center gap-sm text-body-sm color-foreground/70\">\n                          <BuildingOfficeIcon className=\"h-icon-xs w-icon-xs\" />\n                          <span>{item.job_title}</span>\n                          {item.responsible_party && (\n                            <>\n                              <span>•</span>\n                              <span>Responsible: {item.responsible_party}</span>\n                            </>\n                          )}\n                        </div>\n                      </div>\n                      <div className=\"flex gap-sm\">\n                        <Badge className={getStatusColor(item.status)}>\n                          {item.status.replace('_', ' ')}\n                        </Badge>\n                        <Badge className={getKindColor(item.kind)}>\n                          {item.kind}\n                        </Badge>\n                        <Badge className={getPriorityColor(item.priority)}>\n                          {item.priority}\n                        </Badge>\n                      </div>\n                    </div>\n\n                    <p className=\"text-body-sm color-foreground/80 mb-sm line-clamp-xs\">\n                      {item.description}\n                    </p>\n\n                    <div className=\"flex items-center gap-lg text-body-sm color-foreground/70 mb-sm\">\n                      {item.due_at && (\n                        <div className={`flex items-center gap-xs ${isLate ? 'color-destructive' : isDue ? 'color-warning' : ''}`}>\n                          <CalendarIcon className=\"h-icon-xs w-icon-xs\" />\n                          <span>\n                            {isLate ? 'Overdue: ' : 'Due: '}\n                            {new Date(item.due_at).toLocaleDateString()}\n                          </span>\n                        </div>\n                      )}\n                      {item.completed_at && (\n                        <div className=\"flex items-center gap-xs color-success\">\n                          <CheckCircleIcon className=\"h-icon-xs w-icon-xs\" />\n                          <span>Completed: {new Date(item.completed_at).toLocaleDateString()}</span>\n                        </div>\n                      )}\n                      {item.reviewer && (\n                        <div className=\"flex items-center gap-xs\">\n                          <span>Reviewer: {item.reviewer}</span>\n                        </div>\n                      )}\n                    </div>\n\n                    {item.requirements && item.requirements.length > 0 && (\n                      <div className=\"mb-sm\">\n                        <span className=\"text-body-sm form-label color-foreground/70 mb-xs block\">Requirements:</span>\n                        <div className=\"stack-md\">\n                          {item.requirements.slice(0, 3).map((req, index) => (\n                            <div key={index} className=\"text-body-sm color-foreground/70 flex items-start gap-sm\">\n                              <span className=\"color-foreground/40\">•</span>\n                              <span>{req}</span>\n                            </div>\n                          ))}\n                          {item.requirements.length > 3 && (\n                            <div className=\"text-body-sm color-foreground/50\">\n                              +{item.requirements.length - 3} more requirements\n                            </div>\n                          )}\n                        </div>\n                      </div>\n                    )}\n\n                    {item.notes && (\n                      <div className=\"mt-sm p-sm bg-accent rounded-md\">\n                        <p className=\"text-body-sm color-foreground/70\">\n                          <strong>Notes:</strong> {item.notes}\n                        </p>\n                      </div>\n                    )}\n                  </div>\n                </div>\n\n                <div className=\"flex items-center justify-between mt-md pt-md border-t border-border\">\n                  <div className=\"text-body-sm color-foreground/50\">\n                    Created: {new Date(item.created_at).toLocaleDateString()}\n                    {item.updated_at !== item.created_at && (\n                      <span> • Updated: {new Date(item.updated_at).toLocaleDateString()}</span>\n                    )}\n                  </div>\n                  <div className=\"flex gap-sm\">\n                    <Button>\n                      <EyeIcon className=\"h-icon-xs w-icon-xs mr-xs\" />\n                      View\n                    </Button>\n                    <Button>\n                      <PencilIcon className=\"h-icon-xs w-icon-xs mr-xs\" />\n                      Edit\n                    </Button>\n                    {item.evidence_url && (\n                      <Button>\n                        <ArrowDownTrayIcon className=\"h-icon-xs w-icon-xs mr-xs\" />\n                        Evidence\n                      </Button>\n                    )}\n                    <Button>\n                      <DocumentCheckIcon className=\"h-icon-xs w-icon-xs mr-xs\" />\n                      Audit\n                    </Button>\n                  </div>\n                </div>\n              </Card>\n            );\n          })\n        ) : (\n          <Card className=\"p-xsxl text-center\">\n            <ShieldCheckIcon className=\"h-icon-2xl w-icon-2xl color-foreground/30 mx-auto mb-md\" />\n            <h3 className=\"text-body form-label color-foreground mb-sm\">No compliance items found</h3>\n            <p className=\"text-body-sm color-foreground/70 mb-md\">\n              {searchTerm || statusFilter !== 'all' || kindFilter !== 'all' || priorityFilter !== 'all'\n                ? 'Try adjusting your filters or search terms.'\n                : 'Get started by adding your first compliance requirement.'}\n            </p>\n            <Button onClick={() => setShowCreateDialog(true)}>\n              <PlusIcon className=\"h-icon-xs w-icon-xs mr-sm\" />\n              Add Compliance Item\n            </Button>\n          </Card>\n        )}\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/jobs/compliance/CreateComplianceClient.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/jobs/compliance/[id]/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/jobs/compliance/drawers/ViewComplianceDrawer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/jobs/compliance/lib/complianceService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/jobs/compliance/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/jobs/compliance/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/jobs/compliance/views/ComplianceGridView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/jobs/contracts/ContractsClient.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchContracts'. Either include it or remove the dependency array.","line":117,"column":6,"nodeType":"ArrayExpression","endLine":117,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [fetchContracts]","fix":{"range":[2783,2785],"text":"[fetchContracts]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\n\nimport { useState, useEffect } from 'react';\nimport { User } from '@supabase/supabase-js';\nimport {\n  Badge,\n  Button,\n  Card,\n  Input,\n  Skeleton,\n  UnifiedInput\n} from \"@ghxstship/ui\";\nimport {\n  Plus,\n  Search,\n  Filter,\n  FileText,\n  Clock,\n  CheckCircle,\n  XCircle,\n  Calendar,\n  DollarSign,\n  Building,\n  AlertTriangle,\n  Eye,\n  Download,\n  Edit,\n  BarChart3\n} from 'lucide-react';\n\n// Domain interface for JobContract\ninterface JobContract {\n  id: string;\n  organizationId: string;\n  jobId: string;\n  companyId: string;\n  contractType: 'msa' | 'sow' | 'amendment' | 'termination';\n  title: string;\n  description?: string;\n  status: 'draft' | 'pending_review' | 'approved' | 'active' | 'completed' | 'terminated' | 'cancelled';\n  startDate: string;\n  endDate?: string;\n  value: number;\n  currency: string;\n  paymentTerms?: string;\n  documentUrl?: string;\n  signedAt?: string;\n  notes?: string;\n  createdAt?: string;\n  updatedAt?: string;\n  milestones?: JobContractMilestone[];\n  jobs?: { title: string };\n  companies?: { name: string };\n  end_date?: string;\n  contract_type?: string;\n  job_title?: string;\n  company_name?: string;\n  start_date?: string;\n  signed_at?: string;\n  created_at?: string;\n  document_url?: string;\n}\n\ninterface JobContractMilestone {\n  id: string;\n  contractId: string;\n  title: string;\n  description?: string;\n  status: 'pending' | 'in_progress' | 'completed' | 'cancelled';\n  dueDate: string;\n  completedAt?: string;\n  value?: number;\n  createdAt: string;\n  updatedAt: string;\n}\n\ninterface ContractsClientProps {\n  user: User;\n}\n\nconst STATUS_OPTIONS = [\n  { value: 'all', label: 'All Statuses' },\n  { value: 'draft', label: 'Draft' },\n  { value: 'pending_review', label: 'Pending Review' },\n  { value: 'approved', label: 'Approved' },\n  { value: 'active', label: 'Active' },\n  { value: 'completed', label: 'Completed' },\n  { value: 'terminated', label: 'Terminated' },\n  { value: 'cancelled', label: 'Cancelled' },\n];\n\nconst TYPE_OPTIONS = [\n  { value: 'all', label: 'All Types' },\n  { value: 'msa', label: 'MSA' },\n  { value: 'sow', label: 'SOW' },\n  { value: 'amendment', label: 'Amendment' },\n  { value: 'termination', label: 'Termination' },\n];\n\nconst translations = {\n  title: 'Contracts',\n  subtitle: 'Manage job contracts and agreements'\n};\n\nfunction ContractsClient({ user }: ContractsClientProps) {\n  const [contracts, setContracts] = useState<JobContract[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [statusFilter, setStatusFilter] = useState('all');\n  const [typeFilter, setTypeFilter] = useState('all');\n  const [showCreateDialog, setShowCreateDialog] = useState(false);\n\n  // Fetch contracts from API\n  useEffect(() => {\n    fetchContracts();\n  }, []);\n\n  const fetchContracts = async () => {\n    try {\n      setLoading(true);\n      const orgId = user.user_metadata?.organizationId;\n      if (!orgId) return;\n\n      const response = await fetch('/api/v1/jobs/contracts', {\n        headers: {\n          'x-org-id': orgId\n        }\n      });\n\n      if (response.ok) {\n        const data = await response.json();\n        setContracts(data);\n      }\n    } catch (error) {\n      console.error('Error fetching contracts:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Filter contracts based on search term, status, and type\n  const filteredContracts = contracts.filter(contract => {\n    const matchesSearch = contract.title.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         contract.description?.toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesStatus = statusFilter === 'all' || contract.status === statusFilter;\n    const matchesType = typeFilter === 'all' || contract.contractType === typeFilter;\n    \n    return matchesSearch && matchesStatus && matchesType;\n  });\n\n  // Helper functions for formatting and status\n  const formatAmount = (amount: number, currency: string = 'USD') => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: currency\n    }).format(amount);\n  };\n\n  const formatDate = (dateValue: string | Date | null | undefined): string => {\n    if (!dateValue) return 'N/A';\n    try {\n      const date = typeof dateValue === 'string' ? new Date(dateValue) : dateValue;\n      return date.toLocaleDateString();\n    } catch {\n      return 'Invalid Date';\n    }\n  };\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case 'draft': return FileText;\n      case 'pending': return Clock;\n      case 'active': return CheckCircle;\n      case 'completed': return CheckCircle;\n      case 'terminated': return CheckCircle;\n      case 'cancelled': return XCircle;\n      case 'expired': return XCircle;\n      default: return FileText;\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'draft': return 'bg-secondary color-muted border-border';\n      case 'pending_review': return 'bg-warning/10 color-warning border-warning/20';\n      case 'approved': return 'bg-accent/10 color-accent border-primary/20';\n      case 'active': return 'bg-success/10 color-success border-success/20';\n      case 'completed': return 'bg-success/10 color-success border-success/20';\n      case 'terminated': return 'bg-destructive/10 color-destructive border-destructive/20';\n      case 'cancelled': return 'bg-destructive/10 color-destructive border-destructive/20';\n      default: return 'bg-secondary color-muted border-border';\n    }\n  };\n\n  const getTypeColor = (type: string) => {\n    switch (type) {\n      case 'msa': return 'bg-secondary/10 color-secondary border-secondary/20';\n      case 'sow': return 'bg-accent/10 color-accent border-primary/20';\n      case 'amendment': return 'bg-warning/10 color-warning border-warning/20';\n      case 'termination': return 'bg-destructive/10 color-destructive border-destructive/20';\n      default: return 'bg-secondary color-muted border-border';\n    }\n  };\n\n  const calculateProgress = (milestones?: JobContractMilestone[]) => {\n    if (!milestones || milestones.length === 0) return 0;\n    const completed = milestones.filter(m => m.status === 'completed').length;\n    return Math.round((completed / milestones.length) * 100);\n  };\n\n  const isExpiringSoon = (endDate?: string) => {\n    if (!endDate) return false;\n    const end = new Date(endDate);\n    const now = new Date();\n    const diffDays = Math.ceil((end.getTime() - now.getTime()) / (1000 * 60 * 60 * 24));\n    return diffDays <= 30 && diffDays >= 0;\n  };\n\n  const isExpired = (endDate?: string) => {\n    if (!endDate) return false;\n    return new Date(endDate) < new Date();\n  };\n\n  return (\n    <div className=\"stack-lg\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-heading-3 text-heading-3 color-foreground\">{translations.title}</h1>\n          <p className=\"text-body-sm color-foreground/70 mt-xs\">{translations.subtitle}</p>\n        </div>\n        <Button onClick={() => setShowCreateDialog(true)}>\n          <Plus className=\"h-icon-xs w-icon-xs mr-sm\" />\n          Create Contract\n        </Button>\n      </div>\n\n      {/* Filters */}\n      <Card className=\"p-md\">\n        <div className=\"flex flex-col sm:flex-row gap-md\">\n          <div className=\"flex-1\">\n            <Input               placeholder=\"Search contracts...\"\n              value={searchTerm}\n              onChange={(e: React.ChangeEvent<HTMLInputElement>) => setSearchTerm(e.target.value)}\n              className=\"w-full\"\n            />\n          </div>\n          <div className=\"flex gap-sm\">\n            <select\n              value={statusFilter}\n              onChange={(e: React.ChangeEvent<HTMLInputElement>) => setStatusFilter(e.target.value)}\n              className=\" px-md py-sm border border-border rounded-md bg-background\"\n            >\n              {STATUS_OPTIONS.map((option: any) => (\n                <option key={option.value} value={option.value}>\n                  {option.label}\n                </option>\n              ))}\n            </select>\n            <select\n              value={typeFilter}\n              onChange={(e: React.ChangeEvent<HTMLInputElement>) => setTypeFilter(e.target.value)}\n              className=\" px-md py-sm border border-border rounded-md bg-background\"\n            >\n              {TYPE_OPTIONS.map((option: any) => (\n                <option key={option.value} value={option.value}>\n                  {option.label}\n                </option>\n              ))}\n            </select>\n          </div>\n        </div>\n      </Card>\n\n      {/* Stats */}\n      <div className=\"grid grid-cols-1 md:grid-cols-5 gap-md\">\n        <Card className=\"p-md\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-body-sm form-label color-foreground/70\">Total Contracts</p>\n              <p className=\"text-heading-3 text-heading-3 color-foreground\">{contracts.length}</p>\n            </div>\n            <FileText className=\"h-icon-lg w-icon-lg color-accent\" />\n          </div>\n        </Card>\n        <Card className=\"p-md\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-body-sm form-label color-foreground/70\">Active</p>\n              <p className=\"text-heading-3 text-heading-3 color-success\">\n                {contracts.filter(c => c.status === 'active').length}\n              </p>\n            </div>\n            <CheckCircle className=\"h-icon-lg w-icon-lg color-success\" />\n          </div>\n        </Card>\n        <Card className=\"p-md\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-body-sm form-label color-foreground/70\">Completed</p>\n              <p className=\"text-heading-3 text-heading-3 color-accent\">\n                {contracts.filter(c => c.status === 'completed').length}\n              </p>\n            </div>\n            <CheckCircle className=\"h-icon-lg w-icon-lg color-accent\" />\n          </div>\n        </Card>\n        <Card className=\"p-md\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-body-sm form-label color-foreground/70\">Expiring Soon</p>\n              <p className=\"text-heading-3 text-heading-3 color-warning\">\n                {contracts.filter(c => isExpiringSoon(c.end_date)).length}\n              </p>\n            </div>\n            <AlertTriangle className=\"h-icon-sm w-icon-sm color-warning\" />\n          </div>\n        </Card>\n        <Card className=\"p-md\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-body-sm form-label color-foreground/70\">Total Value</p>\n              <p className=\"text-heading-3 text-heading-3 color-secondary\">\n                {formatAmount(contracts.reduce((sum, c) => sum + c.value, 0))}\n              </p>\n            </div>\n            <DollarSign className=\"h-icon-sm w-icon-sm color-success\" />\n          </div>\n        </Card>\n      </div>\n\n      {/* Contracts List */}\n      <div className=\"stack-md\">\n        {loading ? (\n          Array.from({ length: 5 }).map((_, i) => (\n            <Card key={i} className=\"p-lg\">\n              <div className=\"flex items-start justify-between\">\n                <div className=\"flex-1\">\n                  <Skeleton className=\"h-icon-sm w-container-sm mb-sm\" />\n                  <Skeleton className=\"h-icon-xs w-component-xl mb-sm\" />\n                  <Skeleton className=\"h-icon-xs w-full mb-sm\" />\n                  <Skeleton className=\"h-icon-xs w-3/4\" />\n                </div>\n                <div className=\"flex gap-sm\">\n                  <Skeleton className=\"h-icon-md w-component-md\" />\n                  <Skeleton className=\"h-icon-md w-component-lg\" />\n                </div>\n              </div>\n            </Card>\n          ))\n        ) : filteredContracts.length > 0 ? (\n          filteredContracts.map((contract: any) => {\n            const StatusIcon = getStatusIcon(contract.status);\n            const isExpiring = isExpiringSoon(contract.end_date);\n            const hasExpired = isExpired(contract.end_date);\n            const progress = calculateProgress(contract.milestones);\n\n            return (\n              <Card key={contract.id} className={`p-lg hover:shadow-elevated transition-shadow ${hasExpired ? 'border-destructive/20 bg-destructive/5' : isExpiring ? 'border-warning/20 bg-warning/5' : ''}`}>\n                <div className=\"flex items-start justify-between\">\n                  <div className=\"flex-1\">\n                    <div className=\"flex items-start justify-between mb-sm\">\n                      <div>\n                        <h3 className=\"text-body text-heading-4 color-foreground mb-xs flex items-center gap-sm\">\n                          <StatusIcon className=\"h-icon-sm w-icon-sm color-foreground/60\" />\n                          {contract.title}\n                          {(isExpiring || hasExpired) && (\n                            <AlertTriangle className={`h-icon-xs w-icon-xs ${hasExpired ? 'color-destructive' : 'color-warning'}`} />\n                          )}\n                        </h3>\n                        <div className=\"flex items-center gap-sm text-body-sm color-foreground/70\">\n                          <Building className=\"h-icon-xs w-icon-xs\" />\n                          <span>{contract.job_title || 'N/A'}</span>\n                          <span>•</span>\n                          <span>{contract.company_name || 'N/A'}</span>\n                        </div>\n                      </div>\n                      <div className=\"flex gap-sm\">\n                        <Badge className={getStatusColor(contract.status)}>\n                          {contract.status.replace('_', ' ')}\n                        </Badge>\n                        <Badge className={getTypeColor(contract.contract_type || contract.contractType)}>\n                          {(contract.contract_type || contract.contractType).toUpperCase()}\n                        </Badge>\n                      </div>\n                    </div>\n\n                    <p className=\"text-body-sm color-foreground/80 mb-sm line-clamp-xs\">\n                      {contract.description}\n                    </p>\n\n                    <div className=\"flex items-center gap-lg text-body-sm color-foreground/70 mb-sm\">\n                      <div className=\"flex items-center gap-xs\">\n                        <DollarSign className=\"h-icon-xs w-icon-xs\" />\n                        <span className=\"form-label\">{formatAmount(contract.value, contract.currency)}</span>\n                      </div>\n                      <div className=\"flex items-center gap-xs\">\n                        <Calendar className=\"h-icon-xs w-icon-xs\" />\n                        <span>\n                          {formatDate(contract.start_date || contract.startDate)}\n                          {(contract.end_date || contract.endDate) && ` - ${formatDate(contract.end_date || contract.endDate)}`}\n                        </span>\n                      </div>\n                      {contract.paymentTerms && (\n                        <div className=\"flex items-center gap-xs\">\n                          <Clock className=\"h-icon-xs w-icon-xs\" />\n                          <span>{contract.paymentTerms}</span>\n                        </div>\n                      )}\n                    </div>\n\n                    {/* Milestones Progress */}\n                    {contract.milestones && contract.milestones.length > 0 && (\n                      <div className=\"mb-sm\">\n                        <div className=\"flex items-center justify-between mb-xs\">\n                          <span className=\"text-body-sm form-label color-foreground/70\">\n                            Milestones Progress\n                          </span>\n                          <span className=\"text-body-sm color-foreground/70\">\n                            {contract.milestones.filter(m => m.status === 'completed').length} of {contract.milestones.length} completed\n                          </span>\n                        </div>\n                        <div className=\"w-full bg-secondary rounded-full h-2\">\n                          <div \n                            className=\"bg-success h-2 rounded-full transition-all duration-300\"\n                            style={{ width: `${progress}%` }}\n                          />\n                        </div>\n                        <div className=\"text-body-sm color-foreground/70 mt-xs\">\n                          {progress}% complete\n                        </div>\n                      </div>\n                    )}\n\n                    {contract.notes && (\n                      <div className=\"mt-sm p-sm bg-accent rounded-md\">\n                        <p className=\"text-body-sm color-foreground/70\">\n                          <strong>Notes:</strong> {contract.notes}\n                        </p>\n                      </div>\n                    )}\n                  </div>\n                </div>\n\n                <div className=\"flex items-center justify-between mt-md pt-md border-t border-border\">\n                  <div className=\"text-body-sm color-foreground/50\">\n                    Created: {formatDate(contract.created_at || contract.createdAt)}\n                    {(contract.signed_at || contract.signedAt) && (\n                      <span> • Signed: {formatDate(contract.signed_at || contract.signedAt)}</span>\n                    )}\n                  </div>\n                  <div className=\"flex gap-sm\">\n                    <Button>\n                      <Eye className=\"h-icon-xs w-icon-xs\" /> \n                      View\n                    </Button>\n                    <Button>\n                      <Edit className=\"h-icon-xs w-icon-xs\" /> \n                      Edit\n                    </Button>\n                    {(contract.document_url || contract.documentUrl) && (\n                      <Button>\n                        <Download className=\"h-icon-xs w-icon-xs\" /> \n                        Download\n                      </Button>\n                    )}\n                    {contract.milestones && contract.milestones.length > 0 && (\n                      <Button>\n                        <BarChart3 className=\"h-icon-xs w-icon-xs\" /> \n                        Milestones\n                      </Button>\n                    )}\n                  </div>\n                </div>\n              </Card>\n            );\n          })\n        ) : (\n          <Card className=\"p-xsxl text-center\">\n            <FileText className=\"h-icon-2xl w-icon-2xl color-foreground/30 mx-auto mb-md\" />\n            <h3 className=\"text-body form-label color-foreground mb-sm\">No contracts found</h3>\n            <p className=\"text-body-sm color-foreground/70 mb-md\">\n              {searchTerm || statusFilter !== 'all' || typeFilter !== 'all'\n                ? 'Try adjusting your filters or search terms.'\n                : 'Get started by creating your first contract.'}\n            </p>\n            <Button onClick={() => setShowCreateDialog(true)}>\n              <Plus className=\"h-icon-xs w-icon-xs mr-sm\" />\n              Create Contract\n            </Button>\n          </Card>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default ContractsClient;\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/jobs/contracts/CreateContractClient.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/jobs/contracts/[id]/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/jobs/contracts/drawers/ViewContractDrawer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/jobs/contracts/lib/contractsService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/jobs/contracts/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/jobs/contracts/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/jobs/contracts/views/ContractGridView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/jobs/create/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/jobs/drawers/CreateDrawer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/jobs/drawers/EditDrawer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/jobs/drawers/ViewDrawer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/jobs/drawers/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/jobs/lib/api.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/jobs/lib/export.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/jobs/lib/import.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/jobs/lib/jobs-service.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/jobs/lib/mutations.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/jobs/lib/permissions.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/jobs/lib/queries.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/jobs/lib/realtime.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/jobs/lib/validations.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/jobs/metadata.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/jobs/opportunities/CreateOpportunityClient.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/jobs/opportunities/OpportunitiesClient.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadOpportunities'. Either include it or remove the dependency array.","line":76,"column":6,"nodeType":"ArrayExpression","endLine":76,"endColumn":13,"suggestions":[{"desc":"Update the dependencies array to be: [loadOpportunities, orgId]","fix":{"range":[2145,2152],"text":"[loadOpportunities, orgId]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\n\nimport { useState, useEffect } from 'react';\nimport { User } from '@supabase/supabase-js';\nimport {\n  Badge,\n  Button,\n  Card,\n  Input,\n  Select,\n  Skeleton,\n  UnifiedInput\n} from \"@ghxstship/ui\";\nimport { Edit } from \"lucide-react\";\n\ninterface OpportunitiesClientProps {\n  user: User;\n  orgId: string;\n  translations: {\n    title: string;\n    subtitle: string;\n  };\n}\n\ninterface Opportunity {\n  id: string;\n  organizationId: string;\n  title: string;\n  description?: string;\n  type: 'construction' | 'technical' | 'creative' | 'logistics' | 'consulting' | 'other';\n  status: 'lead' | 'qualified' | 'proposal' | 'negotiation' | 'won' | 'lost';\n  estimatedValue?: number;\n  currency?: string;\n  probability?: number;\n  expectedCloseDate?: string;\n  clientName?: string;\n  clientContact?: string;\n  source?: string;\n  notes?: string;\n  createdAt?: string;\n  updatedAt?: string;\n}\n\nconst STATUS_OPTIONS = [\n  { value: 'all', label: 'All Statuses' },\n  { value: 'lead', label: 'Lead' },\n  { value: 'qualified', label: 'Qualified' },\n  { value: 'proposal', label: 'Proposal' },\n  { value: 'negotiation', label: 'Negotiation' },\n  { value: 'won', label: 'Won' },\n  { value: 'lost', label: 'Lost' },\n];\n\nconst TYPE_OPTIONS = [\n  { value: 'all', label: 'All Types' },\n  { value: 'construction', label: 'Construction' },\n  { value: 'technical', label: 'Technical' },\n  { value: 'creative', label: 'Creative' },\n  { value: 'logistics', label: 'Logistics' },\n  { value: 'consulting', label: 'Consulting' },\n  { value: 'other', label: 'Other' },\n];\n\nexport function OpportunitiesClient({ user, orgId, translations }: OpportunitiesClientProps) {\n  const [opportunities, setOpportunities] = useState<Opportunity[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [statusFilter, setStatusFilter] = useState('all');\n  const [typeFilter, setTypeFilter] = useState('all');\n  const [showCreateDialog, setShowCreateDialog] = useState(false);\n  const [selectedOpportunity, setSelectedOpportunity] = useState<Opportunity | null>(null);\n\n  useEffect(() => {\n    loadOpportunities();\n  }, [orgId]);\n\n  const loadOpportunities = async () => {\n    try {\n      setLoading(true);\n      const response = await fetch('/api/v1/jobs/opportunities', {\n        headers: {\n          'x-org-id': orgId,\n          'Content-Type': 'application/json'\n        }\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to load opportunities');\n      }\n\n      const data = await response.json();\n      setOpportunities(data.items || []);\n    } catch (error) {\n      console.error('Error loading opportunities:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const filteredOpportunities = opportunities.filter((opportunity: any) => {\n    const matchesSearch = opportunity.title.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         (opportunity.clientName?.toLowerCase().includes(searchTerm.toLowerCase())) ||\n                         (opportunity.description?.toLowerCase().includes(searchTerm.toLowerCase()));\n    const matchesStatus = statusFilter === 'all' || opportunity.status === statusFilter;\n    const matchesType = typeFilter === 'all' || opportunity.type === typeFilter;\n\n    return matchesSearch && matchesStatus && matchesType;\n  });\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'lead':\n        return 'bg-warning/10 color-warning';\n      case 'qualified':\n        return 'bg-accent/10 color-accent';\n      case 'proposal':\n        return 'bg-secondary/10 color-secondary';\n      case 'negotiation':\n        return 'bg-warning/10 color-warning';\n      case 'won':\n        return 'bg-success/10 color-success';\n      case 'lost':\n        return 'bg-destructive/10 color-destructive';\n      default:\n        return 'bg-secondary/50 color-muted';\n    }\n  };\n\n  const getTypeColor = (type: string) => {\n    switch (type) {\n      case 'construction':\n        return 'bg-warning/10 color-warning';\n      case 'technical':\n        return 'bg-accent/10 color-accent';\n      case 'creative':\n        return 'bg-secondary/10 color-secondary';\n      case 'logistics':\n        return 'bg-success/10 color-success';\n      case 'consulting':\n        return 'bg-accent/10 color-accent';\n      case 'other':\n        return 'bg-secondary/50 color-muted';\n      default:\n        return 'bg-secondary/50 color-muted';\n    }\n  };\n\n  const createOpportunity = async (data: Partial<Opportunity>) => {\n    try {\n      const response = await fetch('/api/v1/jobs/opportunities', {\n        method: 'POST',\n        headers: {\n          'x-org-id': orgId,\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(data)\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to create opportunity');\n      }\n\n      await loadOpportunities();\n      setShowCreateDialog(false);\n    } catch (error) {\n      console.error('Error creating opportunity:', error);\n    }\n  };\n\n  if (loading) {\n    return (\n      <div className=\"stack-lg\">\n        <div className=\"flex justify-between items-center\">\n          <div>\n            <h1 className=\"text-heading-3 text-heading-3 color-foreground\">{translations.title}</h1>\n            <p className=\"color-muted\">{translations.subtitle}</p>\n          </div>\n          <Button onClick={() => setShowCreateDialog(true)}>\n            + Create Opportunity\n          </Button>\n        </div>\n\n        <div className=\"flex gap-md mb-lg\">\n          <div className=\"flex-1\">\n            <Input               placeholder=\"Search opportunities...\"\n              value={searchTerm}\n              onChange={(e: React.ChangeEvent<HTMLInputElement>) => setSearchTerm(e.target.value)}\n              className=\"w-full\"\n            />\n          </div>\n          <Select value={statusFilter} onValueChange={setStatusFilter}>\n            {STATUS_OPTIONS.map((option: any) => (\n              <option key={option.value} value={option.value}>\n                {option.label}\n              </option>\n            ))}\n          </Select>\n          <Select value={typeFilter} onValueChange={setTypeFilter}>\n            {TYPE_OPTIONS.map((option: any) => (\n              <option key={option.value} value={option.value}>\n                {option.label}\n              </option>\n            ))}\n          </Select>\n        </div>\n\n        <div className=\"grid gap-md\">\n          {[...Array(6)].map((_, i) => (\n            <Card key={i} className=\"p-lg\">\n              <div className=\"flex items-start justify-between\">\n                <div className=\"flex-1\">\n                  <div className=\"flex items-center gap-sm mb-sm\">\n                    <div className=\"h-icon-sm w-icon-sm bg-secondary rounded\" />\n                    <Skeleton className=\"h-icon-sm w-container-xs\" />\n                  </div>\n                  <Skeleton className=\"h-icon-xs w-full mb-sm\" />\n                  <Skeleton className=\"h-icon-xs w-3/4\" />\n                </div>\n                <div className=\"flex gap-sm\">\n                  <Skeleton className=\"h-icon-md w-component-md\" />\n                  <Skeleton className=\"h-icon-md w-component-lg\" />\n                </div>\n              </div>\n            </Card>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"stack-lg\">\n      <div className=\"flex justify-between items-center\">\n        <div>\n          <h1 className=\"text-heading-3 text-heading-3 color-foreground\">{translations.title}</h1>\n          <p className=\"color-muted\">{translations.subtitle}</p>\n        </div>\n        <Button onClick={() => setShowCreateDialog(true)}>\n          + Create Opportunity\n        </Button>\n      </div>\n\n      <div className=\"flex gap-md mb-lg\">\n        <div className=\"flex-1\">\n          <Input             placeholder=\"Search opportunities...\"\n            value={searchTerm}\n            onChange={(e: React.ChangeEvent<HTMLInputElement>) => setSearchTerm(e.target.value)}\n            className=\"w-full\"\n          />\n        </div>\n        <Select value={statusFilter} onValueChange={setStatusFilter}>\n          {STATUS_OPTIONS.map((option: any) => (\n            <option key={option.value} value={option.value}>\n              {option.label}\n            </option>\n          ))}\n        </Select>\n        <Select value={typeFilter} onValueChange={setTypeFilter}>\n          {TYPE_OPTIONS.map((option: any) => (\n            <option key={option.value} value={option.value}>\n              {option.label}\n            </option>\n          ))}\n        </Select>\n      </div>\n\n      {filteredOpportunities.length === 0 ? (\n        <Card className=\"p-xsxl text-center\">\n          <div className=\"h-icon-2xl w-icon-2xl bg-secondary rounded mx-auto mb-md\" />\n          <h3 className=\"text-body form-label color-foreground mb-sm\">No opportunities found</h3>\n          <p className=\"color-muted mb-md\">\n            {searchTerm || statusFilter !== 'all' || typeFilter !== 'all'\n              ? 'Try adjusting your search or filters to find opportunities.'\n              : 'Get started by creating your first opportunity.'}\n          </p>\n          <Button onClick={() => setShowCreateDialog(true)}>\n            + Create Opportunity\n          </Button>\n        </Card>\n      ) : (\n        <div className=\"grid gap-md\">\n          {filteredOpportunities.map((opportunity: any) => (\n            <Card key={opportunity.id} className=\"p-lg hover:shadow-elevated transition-shadow\">\n              <div className=\"flex items-start justify-between\">\n                <div className=\"flex-1\">\n                  <div className=\"flex items-center gap-sm mb-sm\">\n                    <div className=\"h-icon-sm w-icon-sm bg-secondary rounded\" />\n                    <h3 className=\"text-body text-heading-4 color-foreground\">{opportunity.title}</h3>\n                    <Badge className={getStatusColor(opportunity.status)}>\n                      {opportunity.status}\n                    </Badge>\n                    <Badge className={getTypeColor(opportunity.type)}>\n                      {opportunity.type}\n                    </Badge>\n                  </div>\n\n                  {opportunity.description && (\n                    <p className=\"color-muted mb-md line-clamp-xs\">{opportunity.description}</p>\n                  )}\n\n                  <div className=\"grid grid-cols-2 md:grid-cols-3 gap-md text-body-sm\">\n                    {opportunity.clientName && (\n                      <div className=\"flex items-center gap-sm\">\n                        <div className=\"h-icon-xs w-icon-xs bg-secondary rounded\" />\n                        <span className=\"color-muted\">{opportunity.clientName}</span>\n                      </div>\n                    )}\n                    {opportunity.estimatedValue && (\n                      <div className=\"flex items-center gap-sm\">\n                        <div className=\"h-icon-xs w-icon-xs bg-secondary rounded\" />\n                        <span className=\"color-muted\">\n                          ${opportunity.estimatedValue.toLocaleString()} {opportunity.currency || 'USD'}\n                        </span>\n                      </div>\n                    )}\n                    {opportunity.expectedCloseDate && (\n                      <div className=\"flex items-center gap-sm\">\n                        <div className=\"h-icon-xs w-icon-xs bg-secondary rounded\" />\n                        <span className=\"color-muted\">\n                          {new Date(opportunity.expectedCloseDate).toLocaleDateString()}\n                        </span>\n                      </div>\n                    )}\n                  </div>\n\n                  <div className=\"flex items-center justify-between mt-md pt-md border-t border-border\">\n                    <div className=\"flex items-center gap-md text-body-sm color-muted\">\n                      {opportunity.createdAt && (\n                        <span>Created {new Date(opportunity.createdAt).toLocaleDateString()}</span>\n                      )}\n                      {opportunity.updatedAt && opportunity.updatedAt !== opportunity.createdAt && (\n                        <span>Updated {new Date(opportunity.updatedAt).toLocaleDateString()}</span>\n                      )}\n                    </div>\n                    <div className=\"flex gap-sm\">\n                      <Button\n                        variant=\"outline\"\n                       \n                        onClick={() => setSelectedOpportunity(opportunity)}\n                      >\n                        View\n                      </Button>\n                      <Button>\n                        Edit\n                      </Button>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </Card>\n          ))}\n        </div>\n      )}\n\n      {/* Create Dialog */}\n      {showCreateDialog && (\n        <div className=\"fixed inset-0 bg-foreground/30 backdrop-blur-sm flex items-center justify-center p-md z-50\">\n          <div className=\"bg-background rounded-lg p-lg w-full max-w-md\">\n            <h3 className=\"text-body text-heading-4 mb-md\">Create New Opportunity</h3>\n            <form onSubmit={(e: any) => {\n              e.preventDefault();\n              const formData = new FormData(e.currentTarget);\n              createOpportunity({\n                title: formData.get('title') as string,\n                description: formData.get('description') as string,\n                type: formData.get('type') as any,\n                status: 'lead',\n                clientName: formData.get('clientName') as string,\n                estimatedValue: formData.get('estimatedValue') ? Number(formData.get('estimatedValue')) : undefined,\n                currency: 'USD'\n              });\n            }}>\n              <div className=\"stack-md\">\n                <div>\n                  <label className=\"block text-body-sm form-label mb-xs\">Title</label>\n                  <Input />\n                </div>\n                <div>\n                  <label className=\"block text-body-sm form-label mb-xs\">Description</label>\n                  <textarea className=\"w-full p-sm border border-border rounded bg-background\" rows={3} />\n                </div>\n                <div>\n                  <label className=\"block text-body-sm form-label mb-xs\">Type</label>\n                  <Select>\n                    {TYPE_OPTIONS.slice(1).map((option: any) => (\n                      <option key={option.value} value={option.value}>\n                        {option.label}\n                      </option>\n                    ))}\n                  </Select>\n                </div>\n                <div>\n                  <label className=\"block text-body-sm form-label mb-xs\">Client Name</label>\n                  <Input />\n                </div>\n                <div>\n                  <label className=\"block text-body-sm form-label mb-xs\">Estimated Value</label>\n                  <Input type=\"number\" />\n                </div>\n              </div>\n              <div className=\"flex gap-sm mt-lg\">\n                <Button type=\"submit\">Create</Button>\n                <Button type=\"button\" variant=\"outline\" onClick={() => setShowCreateDialog(false)}>\n                  Cancel\n                </Button>\n              </div>\n            </form>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/jobs/opportunities/[id]/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/jobs/opportunities/drawers/ViewOpportunityDrawer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/jobs/opportunities/lib/opportunitiesService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/jobs/opportunities/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/jobs/opportunities/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/jobs/opportunities/views/OpportunityGridView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/jobs/overview/JobsClient.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"The 'fieldConfig' array makes the dependencies of useMemo Hook (at line 203) change on every render. To fix this, wrap the initialization of 'fieldConfig' in its own useMemo() Hook.","line":43,"column":8,"nodeType":"VariableDeclarator","endLine":99,"endColumn":3},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'setFilters'. Either include it or remove the dependency array.","line":155,"column":5,"nodeType":"ArrayExpression","endLine":155,"endColumn":7,"suggestions":[{"desc":"Update the dependencies array to be: [setFilters]","fix":{"range":[3758,3760],"text":"[setFilters]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'setFilters'. Either include it or remove the dependency array.","line":165,"column":5,"nodeType":"ArrayExpression","endLine":165,"endColumn":7,"suggestions":[{"desc":"Update the dependencies array to be: [setFilters]","fix":{"range":[4070,4072],"text":"[setFilters]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'setFilters'. Either include it or remove the dependency array.","line":173,"column":5,"nodeType":"ArrayExpression","endLine":173,"endColumn":7,"suggestions":[{"desc":"Update the dependencies array to be: [setFilters]","fix":{"range":[4246,4248],"text":"[setFilters]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\nimport { User, FileText, Settings, Award, Calendar, TrendingUp, Activity, Clock, Plus, Search, Play, Trash2 } from \"lucide-react\";\nimport { useCallback, useEffect, useMemo, useState } from 'react';\nimport { useTranslations } from 'next-intl';\nimport {\n  AppDrawer,\n  CalendarView,\n  DataActions,\n  DataGrid,\n  DataRecord,\n  DataViewProvider,\n  Drawer,\n  DrawerContent,\n  DrawerDescription,\n  DrawerFooter,\n  DrawerHeader,\n  DrawerTitle,\n  FieldConfig,\n  FilterConfig,\n  KanbanBoard,\n  ListView,\n  SortConfig,\n  StateManagerProvider,\n  ViewSwitcher,\n  type\n} from \"@ghxstship/ui\";\nimport type { DataViewConfig } from '@ghxstship/ui';\nimport { tryCatch, reportError } from '@ghxstship/ui/utils/error-handling';\nimport { AppDrawer } from '@ghxstship/ui';\n\ninterface JobsResponse {\n jobs: DataRecord[];\n}\n\nexport default function JobsClient({ orgId }: { orgId: string }) {\n const t = useTranslations('jobs');\n const [jobs, setJobs] = useState<DataRecord[]>([]);\n const [loading, setLoading] = useState(true);\n const [filters, setFilters] = useState<Record<string, string>({});\n const [selectedJob, setSelectedJob] = useState<DataRecord | null>(null);\n\n // Field configuration for jobs data (matching database schema)\n const fieldConfig: FieldConfig[] = [\n {\n key: 'title',\n label: 'Job Title',\n type: 'text' as const,\n required: true,\n sortable: true,\n filterable: true\n },\n {\n key: 'status',\n label: 'Status',\n type: 'select' as const,\n required: true,\n sortable: true,\n filterable: true,\n options: [\n { value: 'open', label: 'Open' },\n { value: 'in_progress', label: 'In Progress' },\n { value: 'blocked', label: 'Blocked' },\n { value: 'done', label: 'Done' },\n { value: 'cancelled', label: 'Cancelled' }\n ]\n },\n {\n key: 'project_id',\n label: 'Project',\n type: 'text' as const,\n required: false,\n sortable: true,\n filterable: true\n },\n {\n key: 'due_at',\n label: 'Due Date',\n type: 'date' as const,\n required: false,\n sortable: true,\n filterable: true\n },\n {\n key: 'created_by',\n label: 'Created By',\n type: 'text' as const,\n required: false,\n sortable: true,\n filterable: true\n },\n {\n key: 'created_at',\n label: 'Created Date',\n type: 'date' as const,\n required: false,\n sortable: true,\n filterable: true\n }\n ];\n\n // Real Supabase data loading function\n const loadJobsData = useCallback(async (activeFilters?: Record<string, string>): Promise<DataRecord[]> => {\n try {\n const params = new URLSearchParams();\n if (activeFilters?.type) params.append('type', activeFilters.type);\n if (activeFilters?.status) params.append('status', activeFilters.status);\n if (activeFilters?.search) params.append('search', activeFilters.search);\n\n const responseResult = await tryCatch(async () =>\n fetch(`/api/v1/jobs?${params.toString()}`, {\n method: 'GET',\n headers: { 'Content-Type': 'application/json' }\n })\n );\n\n if (!responseResult.success) {\n reportError(responseResult.error);\n throw new Error(responseResult.error.message);\n }\n\n const response = responseResult.data;\n if (!response.ok) {\n throw new Error(`Failed to fetch jobs: ${response.statusText}`);\n }\n\n const data: JobsResponse = await response.json();\n return data.jobs ?? [];\n } catch (error) {\n console.error('Error loading jobs:', error);\n return [];\n }\n }, []);\n\n // Load data on mount and when filters change\n useEffect(() => {\n const fetchData = async () => {\n setLoading(true);\n const data = await loadJobsData(filters);\n setJobs(data);\n setLoading(false);\n };\n void fetchData();\n }, [filters, loadJobsData]);\n\n const closeDrawer = useCallback(() => {\n setSelectedJob(null);\n }, []);\n\n const openViewDrawer = useCallback((record: DataRecord) => {\n setSelectedJob(record);\n }, []);\n\n const handleSearch = useCallback((query: string) => {\n setFilters(prev => ({ ...prev, search: query }));\n }, []);\n\n const handleFilter = useCallback((newFilters: FilterConfig[]) => {\n const normalizedFilters = newFilters.reduce<Record<string, string>((acc, filter) => {\n if (filter.value) {\n acc[filter.field] = String(filter.value);\n }\n return acc;\n }, {});\n setFilters(prev => ({ ...prev, ...normalizedFilters }));\n }, []);\n\n const handleSort = useCallback((sorts: SortConfig[]) => {\n console.debug('Sort jobs:', sorts);\n }, []);\n\n const handleRefresh = useCallback(() => {\n setFilters({});\n }, []);\n\n const handleExport = useCallback((data: DataRecord[], format: string) => {\n console.debug('Export jobs:', format, data.length);\n }, []);\n\n const handleImport = useCallback((data: DataRecord[]) => {\n console.debug('Import jobs:', data.length);\n }, []);\n\n const handleDelete = useCallback((ids: string[]) => {\n console.debug('Delete jobs:', ids);\n }, []);\n\n const dataViewConfig = useMemo<DataViewConfig>(() => ({\n id: 'jobs-view',\n name: 'Jobs Management',\n viewType: 'grid',\n defaultView: 'grid',\n fields: fieldConfig,\n data: jobs,\n loading,\n onSearch: handleSearch,\n onFilter: handleFilter,\n onSort: handleSort,\n onRefresh: handleRefresh,\n onExport: handleExport,\n onImport: handleImport,\n onEdit: openViewDrawer,\n onDelete: handleDelete\n }), [jobs, fieldConfig, handleDelete, handleExport, handleFilter, handleImport, handleRefresh, handleSearch, handleSort, loading, openViewDrawer]);\n\n return (\n <div className=\"h-full w-full\">\n <StateManagerProvider>\n <DataViewProvider config={dataViewConfig}>\n <div className=\"flex flex-col h-full stack-md\">\n {/* View Switcher and Actions */}\n <div className=\"flex items-center justify-between\">\n <ViewSwitcher />\n <DataActions />\n </div>\n\n {/* Data Views */}\n <DataGrid />\n <KanbanBoard\n columns={[\n { id: 'open', title: 'Open' },\n { id: 'in_progress', title: 'In Progress' },\n { id: 'blocked', title: 'Blocked' },\n { id: 'done', title: 'Done' },\n { id: 'cancelled', title: 'Cancelled' }\n ]}\n statusField=\"status\"\n titleField=\"title\"\n />\n <CalendarView\n startDateField=\"due_at\"\n titleField=\"title\"\n />\n <ListView\n titleField=\"title\"\n subtitleField=\"description\"\n />\n\n {/* Drawer for CRUD operations */}\n {selectedJob && (\n <AppDrawer\n open\n onClose={closeDrawer}\n title={selectedJob.title ?? 'Job Details'}\n record={selectedJob}\n mode=\"view\"\n >\n <div className=\"stack-md\">\n {fieldConfig.map(field => (\n <div key={field.key} className=\"stack-2xs\">\n <p className=\"text-body-xs form-label color-muted\">{field.label}</p>\n <p className=\"text-body-sm\">{String(selectedJob[field.key] ?? '—')}</p>\n </div>\n ))}\n </div>\n </AppDrawer>\n )}\n </div>\n </DataViewProvider>\n </StateManagerProvider>\n </div>\n );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/jobs/overview/OverviewClient.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadOverviewData'. Either include it or remove the dependency array.","line":92,"column":6,"nodeType":"ArrayExpression","endLine":92,"endColumn":13,"suggestions":[{"desc":"Update the dependencies array to be: [loadOverviewData, orgId]","fix":{"range":[2209,2216],"text":"[loadOverviewData, orgId]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\n\nimport { useState, useEffect } from 'react';\nimport { User } from '@supabase/supabase-js';\nimport { createBrowserClient } from '@ghxstship/auth';\nimport { Card, Button, Badge, Skeleton } from '@ghxstship/ui';\nimport { \n  BriefcaseIcon, \n  ClipboardDocumentListIcon, \n  DocumentTextIcon,\n  CheckCircleIcon,\n  ExclamationTriangleIcon,\n  PlusIcon,\n  ArrowRightIcon,\n  ChartBarIcon,\n  CalendarIcon,\n  UsersIcon\n} from '@heroicons/react/24/outline';\nimport Link from 'next/link';\n\ninterface OverviewClientProps {\n  user: User;\n  orgId: string;\n  translations: {\n    title: string;\n    subtitle: string;\n  };\n}\n\ninterface JobsStats {\n  totalJobs: number;\n  activeJobs: number;\n  completedJobs: number;\n  draftJobs: number;\n  totalOpportunities: number;\n  activeBids: number;\n  activeContracts: number;\n  pendingCompliance: number;\n  totalAssignments: number;\n  activeRFPs: number;\n}\n\ninterface RecentActivity {\n  id: string;\n  type: 'job' | 'opportunity' | 'bid' | 'contract' | 'assignment' | 'compliance' | 'rfp';\n  title: string;\n  status: string;\n  updatedAt: string;\n  priority?: 'high' | 'medium' | 'low';\n}\n\nconst QUICK_ACTIONS = [\n  {\n    title: 'Create New Job',\n    description: 'Start a new job posting',\n    href: '/jobs?action=create',\n    icon: BriefcaseIcon,\n    color: 'bg-accent'\n  },\n  {\n    title: 'Browse Opportunities',\n    description: 'View available opportunities',\n    href: '/jobs/opportunities',\n    icon: ClipboardDocumentListIcon,\n    color: 'bg-success'\n  },\n  {\n    title: 'Submit New Bid',\n    description: 'Create a new bid proposal',\n    href: '/jobs/bids?action=create',\n    icon: DocumentTextIcon,\n    color: 'bg-secondary'\n  },\n  {\n    title: 'Review Compliance',\n    description: 'Check compliance status',\n    href: '/jobs/compliance',\n    icon: CheckCircleIcon,\n    color: 'bg-warning'\n  },\n];\n\nexport function OverviewClient({ user, orgId, translations }: OverviewClientProps) {\n  const [stats, setStats] = useState<JobsStats | null>(null);\n  const [recentActivity, setRecentActivity] = useState<RecentActivity[]>([]);\n  const [loading, setLoading] = useState(true);\n  const supabase = createBrowserClient();\n\n  useEffect(() => {\n    loadOverviewData();\n  }, [orgId]);\n\n  const loadOverviewData = async () => {\n    try {\n      setLoading(true);\n\n      // Load jobs stats\n      const [\n        jobsResult,\n        opportunitiesResult,\n        bidsResult,\n        contractsResult,\n        assignmentsResult,\n        complianceResult,\n        rfpsResult\n      ] = await Promise.all([\n        supabase.from('jobs').select('status').eq('organization_id', orgId),\n        supabase.from('opportunities').select('status').eq('organization_id', orgId),\n        supabase.from('job_bids').select('status').eq('organization_id', orgId),\n        supabase.from('job_contracts').select('status').eq('organization_id', orgId),\n        supabase.from('job_assignments').select('status').eq('organization_id', orgId),\n        supabase.from('job_compliance').select('status').eq('organization_id', orgId),\n        supabase.from('rfps').select('status').eq('organization_id', orgId)\n      ]);\n\n      const jobs = jobsResult.data || [];\n      const opportunities = opportunitiesResult.data || [];\n      const bids = bidsResult.data || [];\n      const contracts = contractsResult.data || [];\n      const assignments = assignmentsResult.data || [];\n      const compliance = complianceResult.data || [];\n      const rfps = rfpsResult.data || [];\n\n      setStats({\n        totalJobs: jobs.length,\n        activeJobs: jobs.filter((j: any) => j.status === 'in_progress').length,\n        completedJobs: jobs.filter((j: any) => j.status === 'completed').length,\n        draftJobs: jobs.filter((j: any) => j.status === 'draft').length,\n        totalOpportunities: opportunities.length,\n        activeBids: bids.filter((b: any) => b.status === 'submitted' || b.status === 'under_review').length,\n        activeContracts: contracts.filter((c: any) => c.status === 'active').length,\n        pendingCompliance: compliance.filter((c: any) => c.status === 'pending').length,\n        totalAssignments: assignments.length,\n        activeRFPs: rfps.filter((r: any) => r.status === 'open').length\n      });\n\n      // Load recent activity (combining multiple sources)\n      const recentJobs = await supabase\n        .from('jobs')\n        .select('id, title, status, updated_at')\n        .eq('organization_id', orgId)\n        .order('updated_at', { ascending: false })\n        .limit(3);\n\n      const recentOpportunities = await supabase\n        .from('opportunities')\n        .select('id, title, status, updated_at')\n        .eq('organization_id', orgId)\n        .order('updated_at', { ascending: false })\n        .limit(2);\n\n      const activity: RecentActivity[] = [\n        ...(recentJobs.data || []).map((job: any) => ({\n          id: job.id,\n          type: 'job' as const,\n          title: job.title,\n          status: job.status,\n          updatedAt: job.updated_at\n        })),\n        ...(recentOpportunities.data || []).map((opp: any) => ({\n          id: opp.id,\n          type: 'opportunity' as const,\n          title: opp.title,\n          status: opp.status,\n          updatedAt: opp.updated_at\n        })),\n      ];\n\n      // Sort by updated_at and take top 5\n      activity.sort((a, b) => new Date(b.updatedAt).getTime() - new Date(a.updatedAt).getTime());\n      setRecentActivity(activity.slice(0, 5));\n\n    } catch (error) {\n      console.error('Error loading overview data:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status.toLowerCase()) {\n      case 'active': return 'bg-success/10 color-success';\n      case 'completed': return 'bg-accent/10 color-accent';\n      case 'pending': return 'bg-warning/10 color-warning';\n      case 'draft': return 'bg-secondary/10 color-muted';\n      case 'cancelled': return 'bg-destructive/10 color-destructive';\n      default: return 'bg-secondary/10 color-muted';\n    }\n  };\n\n  const getTypeIcon = (type: string) => {\n    switch (type) {\n      case 'job':\n        return BriefcaseIcon;\n      case 'opportunity':\n        return ClipboardDocumentListIcon;\n      case 'bid':\n        return DocumentTextIcon;\n      case 'contract':\n        return CheckCircleIcon;\n      case 'assignment':\n        return CalendarIcon;\n      case 'compliance':\n        return ExclamationTriangleIcon;\n      default:\n        return BriefcaseIcon;\n    }\n  };\n\n  return (\n    <div className=\"stack-lg\">\n      {/* Header */}\n      <div>\n        <h1 className=\"text-heading-3 text-heading-3 color-foreground\">{translations.title}</h1>\n        <p className=\"text-body-sm color-foreground/70 mt-xs\">{translations.subtitle}</p>\n      </div>\n\n      {/* Stats Grid */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-md\">\n        {loading ? (\n          Array.from({ length: 8 }).map((_, i) => (\n            <Card key={i} className=\"p-md\">\n              <Skeleton className=\"h-icon-xs w-component-lg mb-sm\" />\n              <Skeleton className=\"h-icon-lg w-icon-2xl\" />\n            </Card>\n          ))\n        ) : (\n          <>\n            <Card className=\"p-md\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-body-sm form-label color-foreground/70\">Total Jobs</p>\n                  <p className=\"text-heading-3 text-heading-3 color-foreground\">{stats?.totalJobs || 0}</p>\n                </div>\n                <BriefcaseIcon className=\"h-icon-lg w-icon-lg color-accent\" />\n              </div>\n            </Card>\n\n            <Card className=\"p-md\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-body-sm form-label color-foreground/70\">Active Jobs</p>\n                  <p className=\"text-body-sm color-muted\">{stats?.activeJobs || 0} active</p>\n                </div>\n                <ChartBarIcon className=\"h-icon-lg w-icon-lg color-success\" />\n              </div>\n            </Card>\n\n            <Card className=\"p-md\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"color-muted\">Monitor job performance and manage opportunities.</p>\n                  <p className=\"text-heading-3 text-heading-3 color-success\">{stats?.totalOpportunities || 0}</p>\n                </div>\n                <ClipboardDocumentListIcon className=\"h-icon-lg w-icon-lg color-success\" />\n              </div>\n            </Card>\n\n            <Card className=\"p-md\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-body-sm form-label color-foreground/70\">Active Bids</p>\n                  <p className=\"text-body-sm color-muted\">{stats?.activeBids || 0} active bids</p>\n                </div>\n                <DocumentTextIcon className=\"h-icon-lg w-icon-lg color-secondary\" />\n              </div>\n            </Card>\n\n            <Card className=\"p-md\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <span className=\"text-body-sm color-muted\">tracts</span>\n                  <p className=\"text-heading-3 text-heading-3 color-secondary\">{stats?.activeContracts || 0}</p>\n                </div>\n                <CheckCircleIcon className=\"h-icon-lg w-icon-lg color-accent\" />\n              </div>\n            </Card>\n\n            <Card className=\"p-md\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-body-sm form-label color-foreground/70\">Assignments</p>\n                  <p className=\"text-body-sm color-muted\">{stats?.totalAssignments || 0} assignments</p>\n                </div>\n                <DocumentTextIcon className=\"h-icon-lg w-icon-lg color-warning\" />\n              </div>\n            </Card>\n\n            <Card className=\"p-md\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-body-sm color-muted\">Pending Compliance</p>\n                  <h1 className=\"text-heading-3 text-heading-3 color-foreground\">{stats?.pendingCompliance || 0}</h1>\n                </div>\n                <ExclamationTriangleIcon className=\"h-icon-lg w-icon-lg color-warning\" />\n              </div>\n            </Card>\n\n            <Card className=\"p-md\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-body-sm form-label color-foreground/70\">Active RFPs</p>\n                  <p className=\"text-body-sm color-muted\">{stats?.activeRFPs || 0} active RFPs</p>\n                </div>\n                <DocumentTextIcon className=\"h-icon-lg w-icon-lg color-accent\" />\n              </div>\n            </Card>\n          </>\n        )}\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-lg\">\n        {/* Quick Actions */}\n        <Card title=\"Quick Actions\" className=\"p-lg\">\n          <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-md\">\n            {QUICK_ACTIONS.map((action: any) => {\n              const Icon = action.icon;\n              return (\n                <Link key={action.title} href=\"#\">\n                  <div className=\"flex items-center p-md rounded-lg border border-border hover:bg-accent transition-colors cursor-pointer\">\n                    <div className={`p-sm rounded-lg ${action.color} text-background mr-sm`}>\n                      <Icon className=\"h-icon-sm w-icon-sm\" />\n                    </div>\n                    <div className=\"flex-1 min-w-0\">\n                      <p className=\"text-body-sm form-label color-foreground truncate\">\n                        {action.title}\n                      </p>\n                      <p className=\"text-body-sm color-foreground/70 truncate\">\n                        {action.description}\n                      </p>\n                    </div>\n                    <ArrowRightIcon className=\"h-icon-xs w-icon-xs color-foreground/40\" />\n                  </div>\n                </Link>\n              );\n            })}\n          </div>\n        </Card>\n\n        {/* Recent Activity */}\n        <Card title=\"Recent Activity\" className=\"p-lg\">\n          {loading ? (\n            <div className=\"stack-sm\">\n              {Array.from({ length: 5 }).map((_, i) => (\n                <div key={i} className=\"flex items-center cluster-sm\">\n                  <div className=\"w-3 h-3 bg-secondary rounded\"></div>\n                  <Skeleton className=\"h-icon-sm w-component-md\" />\n                </div>\n              ))}\n            </div>\n          ) : recentActivity.length > 0 ? (\n            <div className=\"stack-sm\">\n              {recentActivity.map((activity: any) => {\n                const Icon = getTypeIcon(activity.type);\n                return (\n                  <div key={activity.id} className=\"flex items-center justify-between p-sm rounded-lg border border-border\">\n                    <div className=\"flex items-center cluster-sm\">\n                      <Icon className=\"h-icon-sm w-icon-sm color-foreground/60\" />\n                      <div>\n                        <p className=\"text-body-sm form-label color-foreground truncate\">\n                          {activity.title}\n                        </p>\n                        <p className=\"text-body-sm color-foreground/70 capitalize\">\n                          {activity.type} • {new Date(activity.updatedAt).toLocaleDateString()}\n                        </p>\n                      </div>\n                    </div>\n                    <Badge className={getStatusColor(activity.status)}>\n                      {activity.status.replace('_', ' ')}\n                    </Badge>\n                  </div>\n                );\n              })}\n            </div>\n          ) : (\n            <div className=\"text-center py-xl\">\n              <BriefcaseIcon className=\"h-icon-2xl w-icon-2xl color-muted mx-auto mb-sm\" />\n              <p className=\"text-body-sm color-muted\">No recent activity</p>\n              <p className=\"text-body-sm color-muted mt-xs\">\n                Create your first job to get started\n              </p>\n            </div>\n          )}\n          \n          {recentActivity.length > 0 && (\n            <div className=\"mt-md pt-md border-t border-border\">\n              <Link href=\"/jobs\">\n                <Button className=\"w-full\">\n                  View All Jobs\n                  <ArrowRightIcon className=\"h-icon-xs w-icon-xs ml-sm\" />\n                </Button>\n              </Link>\n            </div>\n          )}\n        </Card>\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/jobs/overview/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/jobs/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/jobs/rfps/CreateRfpClient.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/jobs/rfps/RFPsClient.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadRFPs'. Either include it or remove the dependency array.","line":99,"column":6,"nodeType":"ArrayExpression","endLine":99,"endColumn":13,"suggestions":[{"desc":"Update the dependencies array to be: [loadRFPs, orgId]","fix":{"range":[2579,2586],"text":"[loadRFPs, orgId]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\n\nimport { CalendarIcon, Download, Edit } from \"lucide-react\";\nimport { useState, useEffect } from 'react';\nimport { User } from '@supabase/supabase-js';\nimport { createBrowserClient } from '@ghxstship/auth';\nimport {\n  Badge,\n  Button,\n  Card,\n  Input,\n  Skeleton,\n  UnifiedInput\n} from \"@ghxstship/ui\";\nimport { \n  MagnifyingGlassIcon,\n  PlusIcon,\n  EyeIcon,\n  PencilIcon,\n  DocumentTextIcon,\n  ClockIcon,\n  CheckCircleIcon,\n  XCircleIcon,\n  ExclamationTriangleIcon,\n  CalendarIcon,\n  BuildingOfficeIcon,\n  CurrencyDollarIcon,\n  ArrowDownTrayIcon,\n  PaperAirplaneIcon,\n  UsersIcon\n} from '@heroicons/react/24/outline';\n\ninterface RFPsClientProps {\n  user: User;\n  orgId: string;\n  translations: {\n    title: string;\n    subtitle: string;\n  };\n}\n\ninterface RFP {\n  id: string;\n  title: string;\n  description: string;\n  issuer_organization: string;\n  status: 'draft' | 'published' | 'open' | 'closed' | 'awarded' | 'cancelled';\n  type: 'services' | 'products' | 'consulting' | 'construction' | 'technology' | 'other';\n  budget_min?: number;\n  budget_max?: number;\n  currency: string;\n  submission_deadline: string;\n  project_start_date?: string;\n  project_duration?: string;\n  requirements?: string[];\n  evaluation_criteria?: string[];\n  contact_email?: string;\n  document_url?: string;\n  responses_count?: number;\n  published_at?: string;\n  created_at: string;\n  updated_at: string;\n  organization_id: string;\n}\n\nconst STATUS_OPTIONS = [\n  { value: 'all', label: 'All Statuses' },\n  { value: 'draft', label: 'Draft' },\n  { value: 'published', label: 'Published' },\n  { value: 'open', label: 'Open' },\n  { value: 'closed', label: 'Closed' },\n  { value: 'awarded', label: 'Awarded' },\n  { value: 'cancelled', label: 'Cancelled' },\n];\n\nconst TYPE_OPTIONS = [\n  { value: 'all', label: 'All Types' },\n  { value: 'services', label: 'Services' },\n  { value: 'products', label: 'Products' },\n  { value: 'consulting', label: 'Consulting' },\n  { value: 'construction', label: 'Construction' },\n  { value: 'technology', label: 'Technology' },\n  { value: 'other', label: 'Other' },\n];\n\nexport function RFPsClient({ user, orgId, translations }: RFPsClientProps) {\n  const [rfps, setRfps] = useState<RFP[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [statusFilter, setStatusFilter] = useState('all');\n  const [typeFilter, setTypeFilter] = useState('all');\n  const [showCreateDialog, setShowCreateDialog] = useState(false);\n\n  const supabase = createBrowserClient();\n\n  useEffect(() => {\n    loadRFPs();\n  }, [orgId]);\n\n  const loadRFPs = async () => {\n    try {\n      setLoading(true);\n      \n      const { data, error } = await supabase\n        .from('rfps')\n        .select('*')\n        .eq('organization_id', orgId)\n        .order('created_at', { ascending: false });\n\n      if (error) throw error;\n      setRfps(data || []);\n    } catch (error) {\n      console.error('Error loading RFPs:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const filteredRFPs = rfps.filter((rfp: any) => {\n    const matchesSearch = rfp.title.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         rfp.description.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         rfp.issuer_organization.toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesStatus = statusFilter === 'all' || rfp.status === statusFilter;\n    const matchesType = typeFilter === 'all' || rfp.type === typeFilter;\n\n    return matchesSearch && matchesStatus && matchesType;\n  });\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'draft':\n        return 'bg-secondary color-muted';\n      case 'published':\n        return 'bg-accent/10 color-accent';\n      case 'open':\n        return 'bg-success/10 color-success';\n      case 'closed':\n        return 'bg-warning/10 color-warning';\n      case 'awarded':\n        return 'bg-secondary/10 color-secondary';\n      case 'cancelled':\n        return 'bg-destructive/10 color-destructive';\n      default:\n        return 'bg-secondary color-muted';\n    }\n  };\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case 'draft':\n        return DocumentTextIcon;\n      case 'published':\n        return PaperAirplaneIcon;\n      case 'open':\n        return CheckCircleIcon;\n      case 'closed':\n        return ClockIcon;\n      case 'awarded':\n        return CheckCircleIcon;\n      case 'cancelled':\n        return XCircleIcon;\n      default:\n        return DocumentTextIcon;\n    }\n  };\n\n  const getTypeColor = (type: string) => {\n    switch (type) {\n      case 'services':\n        return 'bg-accent/10 color-accent';\n      case 'products':\n        return 'bg-success/10 color-success';\n      case 'consulting':\n        return 'bg-secondary/10 color-secondary';\n      case 'construction':\n        return 'bg-warning/10 color-warning';\n      case 'technology':\n        return 'bg-accent/10 color-accent';\n      case 'other':\n        return 'bg-secondary color-muted';\n      default:\n        return 'bg-secondary color-muted';\n    }\n  };\n\n  const formatBudget = (min?: number, max?: number, currency: string = 'USD') => {\n    const formatter = new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: currency\n    });\n    \n    if (!min && !max) return 'Budget not specified';\n    if (min && max) return `${formatter.format(min)} - ${formatter.format(max)}`;\n    if (min) return `From ${formatter.format(min)}`;\n    if (max) return `Up to ${formatter.format(max)}`;\n    return 'Budget not specified';\n  };\n\n  const isDeadlineApproaching = (deadline: string) => {\n    const deadlineDate = new Date(deadline);\n    const now = new Date();\n    const diffDays = Math.ceil((deadlineDate.getTime() - now.getTime()) / (1000 * 60 * 60 * 24));\n    return diffDays <= 7 && diffDays >= 0;\n  };\n\n  const isOverdue = (deadline: string) => {\n    return new Date(deadline) < new Date();\n  };\n\n  return (\n    <div className=\"stack-lg\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-heading-3 text-heading-3 color-foreground\">{translations.title}</h1>\n          <p className=\"text-body-sm color-foreground/70 mt-xs\">{translations.subtitle}</p>\n        </div>\n        <Button onClick={() => setShowCreateDialog(true)}>\n          <PlusIcon className=\"h-icon-xs w-icon-xs mr-sm\" />\n          Create RFP\n        </Button>\n      </div>\n\n      {/* Filters */}\n      <Card className=\"p-md\">\n        <div className=\"flex flex-col sm:flex-row gap-md\">\n          <div className=\"flex-1\">\n            <Input               placeholder=\"Search RFPs...\"\n              value={searchTerm}\n              onChange={(e: React.ChangeEvent<HTMLInputElement>) => setSearchTerm(e.target.value)}\n              className=\"w-full\"\n            />\n          </div>\n          <div className=\"flex gap-sm\">\n            <select\n              value={statusFilter}\n              onChange={(e: React.ChangeEvent<HTMLInputElement>) => setStatusFilter(e.target.value)}\n              className=\" px-md py-sm border border-border rounded-md bg-background\"\n            >\n              {STATUS_OPTIONS.map((option: any) => (\n                <option key={option.value} value={option.value}>\n                  {option.label}\n                </option>\n              ))}\n            </select>\n            <select\n              value={typeFilter}\n              onChange={(e: React.ChangeEvent<HTMLInputElement>) => setTypeFilter(e.target.value)}\n              className=\" px-md py-sm border border-border rounded-md bg-background\"\n            >\n              {TYPE_OPTIONS.map((option: any) => (\n                <option key={option.value} value={option.value}>\n                  {option.label}\n                </option>\n              ))}\n            </select>\n          </div>\n        </div>\n      </Card>\n\n      {/* Stats */}\n      <div className=\"grid grid-cols-1 md:grid-cols-5 gap-md\">\n        <Card className=\"p-md\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-body-sm form-label color-foreground/70\">Total RFPs</p>\n              <p className=\"text-heading-3 text-heading-3 color-foreground\">{rfps.length}</p>\n            </div>\n            <DocumentTextIcon className=\"h-icon-lg w-icon-lg color-accent\" />\n          </div>\n        </Card>\n        <Card className=\"p-md\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-body-sm form-label color-foreground/70\">Open</p>\n              <p className=\"text-heading-3 text-heading-3 color-success\">\n                {rfps.filter(r => r.status === 'open').length}\n              </p>\n            </div>\n            <CheckCircleIcon className=\"h-icon-lg w-icon-lg color-success\" />\n          </div>\n        </Card>\n        <Card className=\"p-md\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-body-sm form-label color-foreground/70\">Published</p>\n              <p className=\"text-heading-3 text-heading-3 color-accent\">\n                {rfps.filter(r => r.status === 'published').length}\n              </p>\n            </div>\n            <PaperAirplaneIcon className=\"h-icon-lg w-icon-lg color-accent\" />\n          </div>\n        </Card>\n        <Card className=\"p-md\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-body-sm form-label color-foreground/70\">Awarded</p>\n              <p className=\"text-heading-3 text-heading-3 color-secondary\">\n                {rfps.filter(r => r.status === 'awarded').length}\n              </p>\n            </div>\n            <CheckCircleIcon className=\"h-icon-lg w-icon-lg color-secondary\" />\n          </div>\n        </Card>\n        <Card className=\"p-md\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-body-sm form-label color-foreground/70\">Total Responses</p>\n              <p className=\"text-heading-3 text-heading-3 color-warning\">\n                {rfps.reduce((sum, r) => sum + (r.responses_count || 0), 0)}\n              </p>\n            </div>\n            <UsersIcon className=\"h-icon-lg w-icon-lg color-warning\" />\n          </div>\n        </Card>\n      </div>\n\n      {/* RFPs List */}\n      <div className=\"stack-md\">\n        {loading ? (\n          Array.from({ length: 5 }).map((_, i) => (\n            <Card key={i} className=\"p-lg\">\n              <div className=\"flex items-start justify-between\">\n                <div className=\"flex-1\">\n                  <Skeleton className=\"h-icon-sm w-container-sm mb-sm\" />\n                  <Skeleton className=\"h-icon-xs w-component-xl mb-sm\" />\n                  <Skeleton className=\"h-icon-xs w-full mb-sm\" />\n                  <Skeleton className=\"h-icon-xs w-3/4\" />\n                </div>\n                <div className=\"flex gap-sm\">\n                  <Skeleton className=\"h-icon-md w-component-md\" />\n                  <Skeleton className=\"h-icon-md w-component-lg\" />\n                </div>\n              </div>\n            </Card>\n          ))\n        ) : filteredRFPs.length > 0 ? (\n          filteredRFPs.map((rfp: any) => {\n            const StatusIcon = getStatusIcon(rfp.status);\n            const isUrgent = isDeadlineApproaching(rfp.submission_deadline);\n            const isLate = isOverdue(rfp.submission_deadline);\n\n            return (\n              <Card key={rfp.id} className={`p-lg hover:shadow-elevated transition-shadow ${isLate ? 'border-destructive/20 bg-destructive/5' : isUrgent ? 'border-warning/20 bg-warning/5' : ''}`}>\n                <div className=\"flex items-start justify-between\">\n                  <div className=\"flex-1\">\n                    <div className=\"flex items-start justify-between mb-sm\">\n                      <div>\n                        <h3 className=\"text-body text-heading-4 color-foreground mb-xs flex items-center gap-sm\">\n                          <StatusIcon className=\"h-icon-sm w-icon-sm color-foreground/60\" />\n                          {rfp.title}\n                          {(isUrgent || isLate) && (\n                            <ExclamationTriangleIcon className={`h-icon-xs w-icon-xs ${isLate ? 'color-destructive' : 'color-warning'}`} />\n                          )}\n                        </h3>\n                        <div className=\"flex items-center gap-sm text-body-sm color-foreground/70\">\n                          <BuildingOfficeIcon className=\"h-icon-xs w-icon-xs\" />\n                          <span>{rfp.issuer_organization}</span>\n                          {rfp.responses_count !== undefined && (\n                            <>\n                              <span>•</span>\n                              <span>{rfp.responses_count} responses</span>\n                            </>\n                          )}\n                        </div>\n                      </div>\n                      <div className=\"flex gap-sm\">\n                        <Badge className={getStatusColor(rfp.status)}>\n                          {rfp.status.replace('_', ' ')}\n                        </Badge>\n                        <Badge className={getTypeColor(rfp.type)}>\n                          {rfp.type}\n                        </Badge>\n                      </div>\n                    </div>\n\n                    <p className=\"text-body-sm color-foreground/80 mb-sm line-clamp-xs\">\n                      {rfp.description}\n                    </p>\n\n                    <div className=\"flex items-center gap-lg text-body-sm color-foreground/70 mb-sm\">\n                      <div className=\"flex items-center gap-xs\">\n                        <CurrencyDollarIcon className=\"h-icon-xs w-icon-xs\" />\n                        <span>{formatBudget(rfp.budget_min, rfp.budget_max, rfp.currency)}</span>\n                      </div>\n                      <div className={`flex items-center gap-xs ${isLate ? 'color-destructive' : isUrgent ? 'color-warning' : ''}`}>\n                        <CalendarIcon className=\"h-icon-xs w-icon-xs\" />\n                        <span>\n                          {isLate ? 'Overdue: ' : 'Deadline: '}\n                          {new Date(rfp.submission_deadline).toLocaleDateString()}\n                        </span>\n                      </div>\n                      {rfp.project_start_date && (\n                        <div className=\"flex items-center gap-xs\">\n                          <span>Start: {new Date(rfp.project_start_date).toLocaleDateString()}</span>\n                        </div>\n                      )}\n                      {rfp.project_duration && (\n                        <div className=\"flex items-center gap-xs\">\n                          <ClockIcon className=\"h-icon-xs w-icon-xs\" />\n                          <span>{rfp.project_duration}</span>\n                        </div>\n                      )}\n                    </div>\n\n                    {rfp.requirements && rfp.requirements.length > 0 && (\n                      <div className=\"mb-sm\">\n                        <span className=\"text-body-sm form-label color-foreground/70 mb-xs block\">Key Requirements:</span>\n                        <div className=\"stack-md\">\n                          {rfp.requirements.slice(0, 3).map((req, index) => (\n                            <div key={index} className=\"text-body-sm color-foreground/70 flex items-start gap-sm\">\n                              <span className=\"color-foreground/40\">•</span>\n                              <span>{req}</span>\n                            </div>\n                          ))}\n                          {rfp.requirements.length > 3 && (\n                            <div className=\"text-body-sm color-foreground/50\">\n                              +{rfp.requirements.length - 3} more requirements\n                            </div>\n                          )}\n                        </div>\n                      </div>\n                    )}\n\n                    {rfp.evaluation_criteria && rfp.evaluation_criteria.length > 0 && (\n                      <div className=\"mb-sm\">\n                        <span className=\"text-body-sm form-label color-foreground/70 mb-xs block\">Evaluation Criteria:</span>\n                        <div className=\"flex flex-wrap gap-xs\">\n                          {rfp.evaluation_criteria.slice(0, 4).map((criteria, index) => (\n                            <Badge key={index} variant=\"secondary\">\n                              {criteria}\n                            </Badge>\n                          ))}\n                          {rfp.evaluation_criteria.length > 4 && (\n                            <Badge variant=\"secondary\">\n                              +{rfp.evaluation_criteria.length - 4} more\n                            </Badge>\n                          )}\n                        </div>\n                      </div>\n                    )}\n                  </div>\n                </div>\n\n                <div className=\"flex items-center justify-between mt-md pt-md border-t border-border\">\n                  <div className=\"text-body-sm color-foreground/50\">\n                    Created: {new Date(rfp.created_at).toLocaleDateString()}\n                    {rfp.published_at && (\n                      <span> • Published: {new Date(rfp.published_at).toLocaleDateString()}</span>\n                    )}\n                    {rfp.contact_email && (\n                      <span> • Contact: {rfp.contact_email}</span>\n                    )}\n                  </div>\n                  <div className=\"flex gap-sm\">\n                    <Button>\n                      <EyeIcon className=\"h-icon-xs w-icon-xs mr-xs\" />\n                      View\n                    </Button>\n                    <Button>\n                      <PencilIcon className=\"h-icon-xs w-icon-xs mr-xs\" />\n                      Edit\n                    </Button>\n                    {rfp.document_url && (\n                      <Button>\n                        <ArrowDownTrayIcon className=\"h-icon-xs w-icon-xs mr-xs\" />\n                        Download\n                      </Button>\n                    )}\n                    {rfp.status === 'open' && (\n                      <Button>\n                        <PaperAirplaneIcon className=\"h-icon-xs w-icon-xs mr-xs\" />\n                        Respond\n                      </Button>\n                    )}\n                  </div>\n                </div>\n              </Card>\n            );\n          })\n        ) : (\n          <Card className=\"p-xsxl text-center\">\n            <DocumentTextIcon className=\"h-icon-2xl w-icon-2xl color-foreground/30 mx-auto mb-md\" />\n            <h3 className=\"text-body form-label color-foreground mb-sm\">No RFPs found</h3>\n            <p className=\"text-body-sm color-foreground/70 mb-md\">\n              {searchTerm || statusFilter !== 'all' || typeFilter !== 'all'\n                ? 'Try adjusting your filters or search terms.'\n                : 'Get started by creating your first RFP.'}\n            </p>\n            <Button onClick={() => setShowCreateDialog(true)}>\n              <PlusIcon className=\"h-icon-xs w-icon-xs mr-sm\" />\n              Create RFP\n            </Button>\n          </Card>\n        )}\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/jobs/rfps/[id]/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/jobs/rfps/drawers/ViewRfpDrawer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/jobs/rfps/lib/rfpsService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/jobs/rfps/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/jobs/rfps/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/jobs/rfps/views/RfpGridView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/jobs/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/jobs/views/CalendarView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/jobs/views/ChartView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/jobs/views/FormView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/jobs/views/GalleryView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/jobs/views/GridView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/jobs/views/KanbanView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/jobs/views/ListView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/jobs/views/TimelineView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/jobs/views/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/layout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/loading.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/marketplace/MarketplaceClient.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/marketplace/MarketplaceDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/marketplace/MarketplaceOverviewClient.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/marketplace/MarketplaceVendorClient.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'setComments'. Either include it or remove the dependency array.","line":95,"column":5,"nodeType":"ArrayExpression","endLine":95,"endColumn":32,"suggestions":[{"desc":"Update the dependencies array to be: [open, vendorId, orgId, sb, setComments]","fix":{"range":[3409,3436],"text":"[open, vendorId, orgId, sb, setComments]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'setActivity'. Either include it or remove the dependency array.","line":117,"column":5,"nodeType":"ArrayExpression","endLine":117,"endColumn":28,"suggestions":[{"desc":"Update the dependencies array to be: [open, vendorId, orgId, setActivity]","fix":{"range":[3913,3936],"text":"[open, vendorId, orgId, setActivity]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { Edit3, FileText, Activity as ActivityIcon, MessageSquare } from \"lucide-react\";\nimport { useEffect, useState } from 'react';\nimport {\n  AppDrawer,\n  Button\n} from \"@ghxstship/ui\";\nimport { useTranslations } from 'next-intl';\nimport { createBrowserClient } from '@ghxstship/auth';\nimport { tryCatch, Result, reportError } from '@ghxstship/ui/utils/error-handling';\nimport { AppDrawer } from '@ghxstship/ui';\n\nexport default function OpenDeckVendorClient({ orgId, vendorId, open, onClose }: { orgId: string; vendorId: string | null; open: boolean; onClose: () => void }): JSX.Element | null {\n const t = useTranslations('opendeck');\n const sb = createBrowserClient();\n const [vendor, setVendor] = useState<any | null>(null);\n const [tab, setTab] = useState<'details' | 'edit' | 'comments' | 'activity'>('details');\n const [saving, setSaving] = useState(false);\n const [msg, setMsg] = useState<string | null>(null);\n const [form, setForm] = useState<{ name: string; website?: string; contactEmail?: string; status: string }>({ name: '', website: '', contactEmail: '', status: 'active' });\n\n useEffect(() => {\n if (!open || !vendorId) return;\n (async () => {\n const resResult = await tryCatch(async () => fetch(`/api/v1/marketplace/vendors?limit=1&offset=0`, { headers: { 'x-org-id': orgId } }));\nif (!resResult.success) {\n reportError(resResult.error);\n throw new Error(resResult.error.message);\n}\nconst res = resResult.data;\n const json = await res.json();\n const found = (json.items || []).find((v: unknown) => v.id === vendorId) || null;\n if (found) {\n setVendor(found);\n setForm({ name: found.name, website: found.website ?? '', contactEmail: found.contactEmail ?? '', status: found.status ?? 'active' });\n } else {\n setVendor(null);\n }\n })();\n }, [open, vendorId, orgId]);\n\n async function saveEdit() {\n if (!vendorId) return;\n setSaving(true);\n setMsg(null);\n try {\n const resResult = await tryCatch(async () => fetch('/api/v1/marketplace/vendors', {\n method: 'PATCH',\n headers: { 'content-type': 'application/json', 'x-org-id': orgId },\n body: JSON.stringify({ id: vendorId, ...form })\n }));\n \n if (!resResult.success) {\n reportError(resResult.error);\n throw new Error(resResult.error.message);\n }\n \n const res = resResult.data;\n if (!res.ok) throw new Error((await res.json())?.error || 'Update failed');\n setMsg(t('updated'));\n if (typeof window !== 'undefined' && (window as unknown).posthog) {\n (window as unknown).posthog.capture('vendor.updated', { organization_id: orgId, vendor_id: vendorId });\n }\n } catch (e) {\n setMsg((e as Error)?.message || 'Update failed');\n } finally {\n setSaving(false);\n }\n }\n\n // Comments & Activity\n const [comments, setComments] = useState<Array<{ id: string; body: string; created_at: string }>([]);\n const [activity, setActivity] = useState<Array<{ action: string; occurred_at: string }>([]);\n const [loadingComments, setLoadingComments] = useState(false);\n const [loadingActivity, setLoadingActivity] = useState(false);\n\n useEffect(() => {\n if (!open || !vendorId) return;\n (async () => {\n setLoadingComments(true);\n try {\n const { data } = await sb\n .from('comments')\n .select('id,body,created_at')\n .eq('organization_id', orgId)\n .eq('entity_type', 'vendor')\n .eq('entity_id', vendorId)\n .order('created_at', { ascending: false })\n .limit(50);\n setComments(data ?? []);\n } catch { setComments([]); }\n setLoadingComments(false);\n })();\n }, [open, vendorId, orgId, sb]);\n\n useEffect(() => {\n if (!open || !vendorId) return;\n (async () => {\n setLoadingActivity(true);\n try {\n const resResult = await tryCatch(async () => fetch(`/api/audit/${orgId}/vendors/${vendorId}`));\n \n if (!resResult.success) {\n reportError(resResult.error);\n throw new Error(resResult.error.message);\n }\n \n const res = resResult.data;\n const json = await res.json();\n setActivity(json?.data ?? []);\n } catch { \n setActivity([]); \n }\n setLoadingActivity(false);\n })();\n }, [open, vendorId, orgId]);\n\n if (!open) return null;\n\n const tabs = [\n {\n key: 'details',\n label: (\n <span className=\"flex items-center gap-xs\">\n <FileText className=\"h-icon-xs w-icon-xs\" />\n {t('drawer.details')}\n </span>\n ),\n content: vendor ? (\n <div className=\"brand-marketplace stack-sm text-body-sm\">\n {msg ? <div role=\"alert\" className=\"mb-sm text-body-sm\">{msg}</div> : null}\n <div><span className=\"form-label\">Name:</span> {vendor.name}</div>\n <div><span className=\"form-label\">Website:</span> {vendor.website || '-'}</div>\n <div><span className=\"form-label\">Email:</span> {vendor.contactEmail || '-'}</div>\n <div><span className=\"form-label\">Status:</span> {vendor.status}</div>\n </div>\n ) : null\n },\n {\n key: 'edit',\n label: (\n <span className=\"flex items-center gap-xs\">\n <Edit3 className=\"h-icon-xs w-icon-xs\" />\n {t('drawer.edit')}\n </span>\n ),\n content: vendor ? (\n <form className=\"stack-sm\" onSubmit={(e: unknown) => { e.preventDefault(); saveEdit(); }} aria-live=\"polite\">\n <div className=\"brand-marketplace grid gap-xs\">\n <label htmlFor=\"name\" className=\"text-body-sm\">Name</label>\n <input className=\"rounded border px-md py-xs\" value={form.name} onChange={(e: React.ChangeEvent<HTMLInputElement>) => setForm({ ...form, name: e.target.value })} />\n </div>\n <div className=\"brand-marketplace grid gap-xs\">\n <label htmlFor=\"website\" className=\"text-body-sm\">Website</label>\n <input className=\"rounded border px-md py-xs\" value={form.website} onChange={(e: React.ChangeEvent<HTMLInputElement>) => setForm({ ...form, website: e.target.value })} />\n </div>\n <div className=\"brand-marketplace grid gap-xs\">\n <label htmlFor=\"email\" className=\"text-body-sm\">Email</label>\n <input className=\"rounded border px-md py-xs\" value={form.contactEmail} onChange={(e: React.ChangeEvent<HTMLInputElement>) => setForm({ ...form, contactEmail: e.target.value })} />\n </div>\n <div className=\"brand-marketplace grid gap-xs\">\n <label htmlFor=\"status\" className=\"text-body-sm\">Status</label>\n <input className=\"rounded border px-md py-xs\" value={form.status} onChange={(e: React.ChangeEvent<HTMLInputElement>) => setForm({ ...form, status: e.target.value })} />\n </div>\n <div className=\"brand-marketplace flex items-center justify-end gap-sm pt-sm border-t\">\n <Button variant=\"primary\" disabled={saving}>{t('save')}</Button>\n </div>\n </form>\n ) : null\n },\n {\n key: 'comments',\n label: (\n <span className=\"flex items-center gap-xs\">\n <MessageSquare className=\"h-icon-xs w-icon-xs\" />\n {t('drawer.comments')}\n </span>\n ),\n content: (\n <div className=\"brand-marketplace stack-sm text-body-sm\">\n {loadingComments ? t('drawer.loading') : comments.length === 0 ? t('emptyComments') : (\n <ul className=\"stack-sm\">\n {comments.map(c => (\n <li key={c.id} className=\"rounded border p-sm\">\n <div className=\"brand-marketplace whitespace-pre-wrap\">{c.body}</div>\n <div className=\"brand-marketplace text-body-sm opacity-60\">{new Date(c.created_at).toLocaleString()}</div>\n </li>\n ))}\n </ul>\n )}\n </div>\n )\n },\n {\n key: 'activity',\n label: (\n <span className=\"flex items-center gap-xs\">\n <ActivityIcon className=\"h-icon-xs w-icon-xs\" />\n {t('drawer.activity')}\n </span>\n ),\n content: (\n <div className=\"brand-marketplace stack-sm text-body-sm\">\n {loadingActivity ? t('drawer.loading') : (\n <ul className=\"stack-xs\">\n {activity.map((a, i) => (\n <li key={i} className=\"flex items-center justify-between gap-md\">\n <div className=\"brand-marketplace font-mono text-body-sm opacity-70\">{new Date(a.occurred_at).toLocaleString()}</div>\n <div className=\"brand-marketplace flex-1\">{a.action}</div>\n </li>\n ))}\n </ul>\n )}\n </div>\n )\n }\n ];\n\n return (\n <AppDrawer\n open={open}\n onClose={onClose}\n record={vendor}\n mode=\"view\"\n title={vendor?.name || 'Vendor'}\n fields={[]}\n tabs={tabs}\n />\n );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/marketplace/MarketplaceVendorProfileClient.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadVendorProfile'. Either include it or remove the dependency array.","line":142,"column":5,"nodeType":"ArrayExpression","endLine":142,"endColumn":13,"suggestions":[{"desc":"Update the dependencies array to be: [loadVendorProfile, userId]","fix":{"range":[3767,3775],"text":"[loadVendorProfile, userId]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { User, Briefcase, Award, Globe, Mail, Phone, MapPin, Calendar, DollarSign, Clock, Star, Upload, Plus, Edit, Trash2, Eye, Camera, FileText, Link2, Shield, CheckCircle, AlertCircle } from \"lucide-react\";\nimport { useState, useEffect } from 'react';\nimport { createBrowserClient } from '@ghxstship/auth';\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\n// import { z } from 'zod';\nimport {\n  AppDrawer,\n  Badge,\n  Button,\n  Card,\n  CardContent,\n  CardDescription,\n  CardFooter,\n  CardHeader,\n  CardTitle,\n  Input,\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n  Tabs,\n  TabsContent,\n  TabsList,\n  TabsTrigger,\n  Textarea\n} from \"@ghxstship/ui\";\n\nconst vendorProfileSchema = z.object({\n business_name: z.string().min(2, 'Business name is required'),\n business_type: z.enum(['individual', 'company', 'agency']),\n display_name: z.string().min(2, 'Display name is required'),\n tagline: z.string().max(100).optional(),\n bio: z.string().max(1000).optional(),\n email: z.string().email('Valid email required'),\n phone: z.string().optional(),\n website: z.string().url().optional().or(z.literal('')),\n primary_category: z.string().min(1, 'Category is required'),\n skills: z.array(z.string()).optional(),\n years_experience: z.number().min(0).max(50).optional(),\n team_size: z.number().min(1).max(1000).optional(),\n hourly_rate: z.number().min(0).optional(),\n currency: z.string().default('USD'),\n availability_status: z.enum(['available', 'busy', 'unavailable']),\n response_time: z.string().optional()\n});\n\ntype VendorProfileForm = z.infer<typeof vendorProfileSchema>;\n\ninterface VendorProfileClientProps {\n userId: string;\n orgId: string;\n}\n\nexport default function VendorProfileClient({ userId, orgId }: VendorProfileClientProps) {\n const supabase = createBrowserClient();\n const [loading, setLoading] = useState(true);\n const [profile, setProfile] = useState<unknown>(null);\n const [portfolio, setPortfolio] = useState<any[]>([]);\n const [services, setServices] = useState<any[]>([]);\n const [certifications, setCertifications] = useState<any[]>([]);\n const [activeTab, setActiveTab] = useState('profile');\n const [editMode, setEditMode] = useState(false);\n const [drawerOpen, setDrawerOpen] = useState(false);\n type DrawerMode = 'portfolio' | 'service' | 'certification';\n\n interface PortfolioItem {\n id: string;\n title: string;\n category?: string;\n description?: string;\n views?: number;\n featured?: boolean;\n }\n\n interface ServiceItem {\n id: string;\n title: string;\n status?: string;\n category?: string;\n description?: string;\n base_price?: number;\n delivery_time?: string;\n orders_completed?: number;\n }\n\n interface CertificationItem {\n id?: string;\n name?: string;\n issuer?: string;\n issued_at?: string;\n description?: string;\n }\n\n type DrawerItem = PortfolioItem | ServiceItem | CertificationItem | null;\n\n const [drawerMode, setDrawerMode] = useState<DrawerMode>('portfolio');\n const [selectedItem, setSelectedItem] = useState<DrawerItem>(null);\n\n const {\n register,\n handleSubmit,\n formState: { errors, isSubmitting },\n reset,\n setValue,\n watch\n } = useForm<VendorProfileForm>({\n resolver: zodResolver(vendorProfileSchema)\n });\n\n const categories = [\n 'Audio & Sound',\n 'Lighting Design',\n 'Stage Production',\n 'Video & Projection',\n 'Event Management',\n 'Artist Services',\n 'Logistics & Transport',\n 'Catering & Hospitality',\n 'Security & Safety',\n 'Marketing & Promotion'\n ];\n\n const skillsList = [\n 'Live Sound Engineering',\n 'Stage Design',\n 'Lighting Programming',\n 'Video Production',\n 'Event Planning',\n 'Artist Management',\n 'Technical Direction',\n 'Project Management',\n 'Budget Management',\n 'Team Leadership'\n ];\n\n useEffect(() => {\n loadVendorProfile();\n }, [userId]);\n\n async function loadVendorProfile() {\n setLoading(true);\n try {\n // Load vendor profile\n const { data: vendorData } = await supabase\n .from('opendeck_vendor_profiles')\n .select('*')\n .eq('user_id', userId)\n .single();\n\n if (vendorData) {\n setProfile(vendorData);\n reset(vendorData);\n\n // Load portfolio items\n const { data: portfolioData } = await supabase\n .from('opendeck_portfolio_items')\n .select('*')\n .eq('vendor_id', vendorData.id)\n .order('created_at', { ascending: false });\n \n setPortfolio(portfolioData || []);\n\n // Load services\n const { data: servicesData } = await supabase\n .from('opendeck_services')\n .select('*')\n .eq('vendor_id', vendorData.id)\n .order('created_at', { ascending: false });\n \n setServices(servicesData || []);\n\n // Load certifications\n if (vendorData.certifications) {\n setCertifications(vendorData.certifications);\n }\n }\n } catch (error) {\n console.error('Error loading vendor profile:', error);\n } finally {\n setLoading(false);\n }\n }\n\n async function onSubmit(data: VendorProfileForm) {\n try {\n if (profile) {\n // Update existing profile\n const { error } = await supabase\n .from('opendeck_vendor_profiles')\n .update(data)\n .eq('id', profile.id);\n\n if (error) throw error;\n } else {\n // Create new profile\n const { error } = await supabase\n .from('opendeck_vendor_profiles')\n .insert({\n ...data,\n user_id: userId,\n organization_id: orgId\n });\n\n if (error) throw error;\n }\n\n setEditMode(false);\n loadVendorProfile();\n } catch (error) {\n console.error('Error saving profile:', error);\n }\n }\n\n const ProfileTab = () => (\n <div className=\"brand-marketplace stack-lg\">\n {/* Profile Header */}\n <Card className=\"p-lg\">\n <div className=\"brand-marketplace flex items-start justify-between\">\n <div className=\"brand-marketplace flex items-start cluster\">\n <div className=\"brand-marketplace relative\">\n <div className=\"brand-marketplace w-component-lg h-component-lg rounded-full bg-gradient-to-br from-primary to-secondary flex items-center justify-center color-accent-foreground text-heading-3\">\n {profile?.display_name?.charAt(0) || 'V'}\n </div>\n {profile?.verified && (\n <div className=\"brand-marketplace absolute -bottom-1 -right-1 bg-success rounded-full p-xs\">\n <CheckCircle className=\"h-icon-sm w-icon-sm text-background\" />\n </div>\n )}\n </div>\n <div>\n <h2 className=\"text-heading-3\">{profile?.display_name || 'Vendor Profile'}</h2>\n <p className=\"color-muted\">{profile?.tagline || 'No tagline set'}</p>\n <div className=\"brand-marketplace flex items-center cluster mt-sm\">\n <Badge variant={profile?.availability_status === 'available' ? 'success' : 'secondary'}>\n {profile?.availability_status || 'Available'}\n </Badge>\n <div className=\"brand-marketplace flex items-center\">\n <Star className=\"h-icon-xs w-icon-xs color-warning fill-warning\" />\n <span className=\"ml-xs text-body-sm\">{profile?.rating || 0} ({profile?.total_reviews || 0} reviews)</span>\n </div>\n </div>\n </div>\n </div>\n <Button onClick={() => setEditMode(!editMode)} variant=\"outline\">\n <Edit className=\"h-icon-xs w-icon-xs mr-sm\" />\n {editMode ? 'Cancel' : 'Edit Profile'}\n </Button>\n </div>\n </Card>\n\n {/* Profile Form */}\n {editMode ? (\n <Card className=\"p-lg\">\n <form onSubmit={handleSubmit(onSubmit)} className=\"stack-md\">\n <div className=\"brand-marketplace grid grid-cols-1 md:grid-cols-2 gap-md\">\n <div>\n <label className=\"text-body-sm form-label\">Business Name</label>\n <Input {...register('business_name')} placeholder=\"Your business name\" />\n {errors.business_name && (\n <p className=\"text-body-sm color-destructive mt-xs\">{errors.business_name.message}</p>\n )}\n </div>\n\n <div>\n <label className=\"text-body-sm form-label\">Business Type</label>\n <Select \n value={watch('business_type')} \n onChange={(value: unknown) => setValue('business_type', e.target.value as unknown)}\n >\n <SelectTrigger>\n <SelectValue placeholder=\"Select type\" />\n </SelectTrigger>\n <SelectContent>\n <SelectItem value=\"individual\">Individual</SelectItem>\n <SelectItem value=\"company\">Company</SelectItem>\n <SelectItem value=\"agency\">Agency</SelectItem>\n </SelectContent>\n </Select>\n </div>\n\n <div>\n <label className=\"text-body-sm form-label\">Display Name</label>\n <Input {...register('display_name')} placeholder=\"Public display name\" />\n {errors.display_name && (\n <p className=\"text-body-sm color-destructive mt-xs\">{errors.display_name.message}</p>\n )}\n </div>\n\n <div>\n <label className=\"text-body-sm form-label\">Email</label>\n <Input {...register('email')} type=\"email\" placeholder=\"contact@example.com\" />\n {errors.email && (\n <p className=\"text-body-sm color-destructive mt-xs\">{errors.email.message}</p>\n )}\n </div>\n\n <div>\n <label className=\"text-body-sm form-label\">Phone</label>\n <Input {...register('phone')} placeholder=\"+1 234 567 8900\" />\n </div>\n\n <div>\n <label className=\"text-body-sm form-label\">Website</label>\n <Input {...register('website')} placeholder=\"https://example.com\" />\n </div>\n\n <div>\n <label className=\"text-body-sm form-label\">Primary Category</label>\n <Select \n value={watch('primary_category')} \n onChange={(value: unknown) => setValue('primary_category', value)}\n >\n <SelectTrigger>\n <SelectValue placeholder=\"Select category\" />\n </SelectTrigger>\n <SelectContent>\n {categories.map(cat => (\n <SelectItem key={cat} value={cat}>{cat}</SelectItem>\n ))}\n </SelectContent>\n </Select>\n </div>\n\n <div>\n <label className=\"text-body-sm form-label\">Availability</label>\n <Select \n value={watch('availability_status')} \n onChange={(value: unknown) => setValue('availability_status', e.target.value as unknown)}\n >\n <SelectTrigger>\n <SelectValue placeholder=\"Select status\" />\n </SelectTrigger>\n <SelectContent>\n <SelectItem value=\"available\">Available</SelectItem>\n <SelectItem value=\"busy\">Busy</SelectItem>\n <SelectItem value=\"unavailable\">Unavailable</SelectItem>\n </SelectContent>\n </Select>\n </div>\n\n <div>\n <label className=\"text-body-sm form-label\">Years of Experience</label>\n <Input \n {...register('years_experience', { valueAsNumber: true })} \n type=\"number\" \n placeholder=\"5\" \n />\n </div>\n\n <div>\n <label className=\"text-body-sm form-label\">Team Size</label>\n <Input \n {...register('team_size', { valueAsNumber: true })} \n type=\"number\" \n placeholder=\"10\" \n />\n </div>\n\n <div>\n <label className=\"text-body-sm form-label\">Hourly Rate</label>\n <Input \n {...register('hourly_rate', { valueAsNumber: true })} \n type=\"number\" \n placeholder=\"150\" \n />\n </div>\n\n <div>\n <label className=\"text-body-sm form-label\">Response Time</label>\n <Input {...register('response_time')} placeholder=\"Within 1 hour\" />\n </div>\n </div>\n\n <div>\n <label className=\"text-body-sm form-label\">Tagline</label>\n <Input {...register('tagline')} placeholder=\"Your professional tagline\" />\n </div>\n\n <div>\n <label className=\"text-body-sm form-label\">Bio</label>\n <Textarea \n {...register('bio')} \n placeholder=\"Tell clients about your experience and expertise...\"\n rows={4}\n />\n </div>\n\n <div className=\"brand-marketplace flex justify-end cluster-sm\">\n <Button type=\"button\" variant=\"outline\" onClick={() => setEditMode(false)}>\n Cancel\n </Button>\n <Button type=\"submit\" disabled={isSubmitting}>\n {isSubmitting ? 'Saving...' : 'Save Profile'}\n </Button>\n </div>\n </form>\n </Card>\n ) : (\n <div className=\"brand-marketplace grid grid-cols-1 md:grid-cols-3 gap-lg\">\n <Card className=\"md:col-span-2 p-lg\">\n <h3 className=\"text-body text-heading-4 mb-md\">About</h3>\n <p className=\"color-muted mb-lg\">\n {profile?.bio || 'No bio provided yet.'}\n </p>\n\n <div className=\"brand-marketplace stack-md\">\n <div className=\"brand-marketplace flex items-center\">\n <Briefcase className=\"h-icon-sm w-icon-sm mr-sm color-muted\" />\n <span>{profile?.years_experience || 0} years experience</span>\n </div>\n <div className=\"brand-marketplace flex items-center\">\n <User className=\"h-icon-sm w-icon-sm mr-sm color-muted\" />\n <span>Team of {profile?.team_size || 1}</span>\n </div>\n <div className=\"brand-marketplace flex items-center\">\n <DollarSign className=\"h-icon-sm w-icon-sm mr-sm color-muted\" />\n <span>${profile?.hourly_rate || 0}/hour</span>\n </div>\n <div className=\"brand-marketplace flex items-center\">\n <Clock className=\"h-icon-sm w-icon-sm mr-sm color-muted\" />\n <span>Responds {profile?.response_time || 'within 24 hours'}</span>\n </div>\n </div>\n\n <div className=\"brand-marketplace mt-lg\">\n <h4 className=\"form-label mb-sm\">Skills</h4>\n <div className=\"brand-marketplace flex flex-wrap gap-sm\">\n {(profile?.skills || []).map((skill: string) => (\n <Badge key={skill} variant=\"secondary\">{skill}</Badge>\n ))}\n </div>\n </div>\n </Card>\n\n <Card className=\"p-lg\">\n <h3 className=\"text-body text-heading-4 mb-md\">Contact</h3>\n <div className=\"brand-marketplace stack-sm\">\n <div className=\"brand-marketplace flex items-center\">\n <Mail className=\"h-icon-xs w-icon-xs mr-sm color-muted\" />\n <span className=\"text-body-sm\">{profile?.email}</span>\n </div>\n {profile?.phone && (\n <div className=\"brand-marketplace flex items-center\">\n <Phone className=\"h-icon-xs w-icon-xs mr-sm color-muted\" />\n <span className=\"text-body-sm\">{profile?.phone}</span>\n </div>\n )}\n {profile?.website && (\n <div className=\"brand-marketplace flex items-center\">\n <Globe className=\"h-icon-xs w-icon-xs mr-sm color-muted\" />\n <a href=\"#\" target=\"_blank\" rel=\"noopener noreferrer\" \n className=\"text-body-sm color-accent hover:underline\">\n Website\n </a>\n </div>\n )}\n {profile?.address && (\n <div className=\"brand-marketplace flex items-start\">\n <MapPin className=\"h-icon-xs w-icon-xs mr-sm mt-0.5 color-muted\" />\n <span className=\"text-body-sm\">\n {profile.address.city}, {profile.address.state}\n </span>\n </div>\n )}\n </div>\n\n <div className=\"brand-marketplace mt-lg\">\n <h4 className=\"form-label mb-sm\">Verification</h4>\n <div className=\"brand-marketplace stack-sm\">\n <div className=\"brand-marketplace flex items-center\">\n {profile?.verified ? (\n <CheckCircle className=\"h-icon-xs w-icon-xs mr-sm color-success\" />\n ) : (\n <AlertCircle className=\"h-icon-xs w-icon-xs mr-sm color-warning\" />\n )}\n <span className=\"text-body-sm\">\n {profile?.verified ? 'Verified Vendor' : 'Pending Verification'}\n </span>\n </div>\n </div>\n </div>\n </Card>\n </div>\n )}\n </div>\n );\n\n const PortfolioTab = () => (\n <div className=\"brand-marketplace stack-lg\">\n <div className=\"brand-marketplace flex justify-between items-center\">\n <h3 className=\"text-body text-heading-4\">Portfolio Items</h3>\n <Button onClick={() => handleOpenDrawer('portfolio')}>\n <Plus className=\"h-icon-xs w-icon-xs mr-sm\" />\n Add Portfolio Item\n </Button>\n </div>\n\n <div className=\"brand-marketplace grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-md\">\n {portfolio.map((item: unknown) => (\n <Card key={item.id} className=\"overflow-hidden\">\n <div className=\"brand-marketplace aspect-video bg-gradient-to-br from-primary to-secondary relative\">\n {item.featured && (\n <Badge className=\"absolute top-xs right-2\" variant=\"secondary\">\n Featured\n </Badge>\n )}\n </div>\n <div className=\"brand-marketplace p-md\">\n <h4 className=\"text-body text-heading-4\">{item.title}</h4>\n <p className=\"text-body-sm color-muted mt-xs\">{item.category}</p>\n <p className=\"text-body-sm mt-sm line-clamp-xs\">{item.description}</p>\n <div className=\"brand-marketplace flex items-center justify-between mt-md\">\n <div className=\"brand-marketplace flex items-center cluster-sm text-body-sm color-muted\">\n <Eye className=\"h-icon-xs w-icon-xs\" />\n <span>{item.views || 0}</span>\n </div>\n <div className=\"brand-marketplace flex cluster-sm\">\n <Button\n variant=\"ghost\"\n onClick={() => handleOpenDrawer('portfolio', item)}\n >\n <Edit className=\"h-icon-xs w-icon-xs\" />\n </Button>\n <Button variant=\"ghost\">\n <Trash2 className=\"h-icon-xs w-icon-xs\" />\n </Button>\n </div>\n </div>\n </div>\n </Card>\n ))}\n </div>\n </div>\n );\n\n const ServicesTab = () => (\n <div className=\"brand-marketplace stack-lg\">\n <div className=\"brand-marketplace flex justify-between items-center\">\n <h3 className=\"text-body text-heading-4\">Services</h3>\n <Button onClick={() => handleOpenDrawer('service')}>\n <Plus className=\"h-icon-xs w-icon-xs mr-sm\" />\n Add Service\n </Button>\n </div>\n\n <div className=\"brand-marketplace grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-md\">\n {services.map((service: unknown) => (\n <Card key={service.id} className=\"p-md\">\n <div className=\"brand-marketplace flex justify-between items-start mb-sm\">\n <h4 className=\"text-body text-heading-4\">{service.title}</h4>\n <Badge variant={service.status === 'active' ? 'success' : 'secondary'}>\n {service.status}\n </Badge>\n </div>\n <p className=\"text-body-sm color-muted mb-sm\">{service.category}</p>\n <p className=\"text-body-sm line-clamp-xs mb-md\">{service.description}</p>\n <div className=\"brand-marketplace stack-sm\">\n <div className=\"brand-marketplace flex justify-between text-body-sm\">\n <span>Starting at</span>\n <span className=\"text-body-sm\">${service.base_price}</span>\n </div>\n <div className=\"brand-marketplace flex justify-between text-body-sm\">\n <span>Delivery</span>\n <span>{service.delivery_time}</span>\n </div>\n <div className=\"brand-marketplace flex justify-between text-body-sm\">\n <span>Orders</span>\n <span>{service.orders_completed || 0}</span>\n </div>\n </div>\n <div className=\"brand-marketplace flex cluster-sm mt-md\">\n <Button\n variant=\"outline\"\n className=\"flex-1\"\n onClick={() => handleOpenDrawer('service', service)}\n >\n Edit\n </Button>\n <Button variant=\"outline\" className=\"flex-1\">\n View\n </Button>\n </div>\n </Card>\n ))}\n </div>\n </div>\n );\n\n const handleOpenDrawer = (mode: DrawerMode, item: DrawerItem = null) => {\n setDrawerMode(mode);\n setSelectedItem(item);\n setDrawerOpen(true);\n };\n\n const handleCloseDrawer = () => {\n setDrawerOpen(false);\n setSelectedItem(null);\n };\n\n if (loading) {\n return (\n <div className=\"brand-marketplace flex items-center justify-center h-container-sm\">\n <div className=\"brand-marketplace animate-spin rounded-full h-icon-lg w-icon-lg border-b-2 border-primary\"></div>\n </div>\n );\n }\n\n return (\n <div className=\"brand-marketplace stack-lg\">\n <Tabs value={activeTab} onValueChange={setActiveTab}>\n <TabsList>\n <TabsTrigger value=\"profile\">Profile</TabsTrigger>\n <TabsTrigger value=\"portfolio\">Portfolio</TabsTrigger>\n <TabsTrigger value=\"services\">Services</TabsTrigger>\n <TabsTrigger value=\"earnings\">Earnings</TabsTrigger>\n </TabsList>\n\n <TabsContent value=\"profile\">\n <ProfileTab />\n </TabsContent>\n\n <TabsContent value=\"portfolio\">\n <PortfolioTab />\n </TabsContent>\n\n <TabsContent value=\"services\">\n <ServicesTab />\n </TabsContent>\n\n <TabsContent value=\"earnings\">\n <Card className=\"p-lg\">\n <h3 className=\"text-body text-heading-4 mb-md\">Earnings Overview</h3>\n <p className=\"color-muted\">Earnings tracking coming soon...</p>\n </Card>\n </TabsContent>\n </Tabs>\n\n {/* Drawer for creating/editing items */}\n <AppDrawer\n open={drawerOpen}\n onClose={handleCloseDrawer}\n title={\n drawerMode === 'portfolio' ? 'Portfolio Item' :\n drawerMode === 'service' ? 'Service Package' :\n 'Certification'\n }\n record={selectedItem}\n mode=\"view\"\n fields={[]}\n tabs={[{\n key: 'details',\n label: 'Details',\n content: (\n <div className=\"brand-marketplace p-md\">\n <p className=\"color-muted\">\n Form for {drawerMode} will be implemented here...\n </p>\n </div>\n )\n }]}\n />\n </div>\n );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/marketplace/MarketplaceWorkspace.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/marketplace/ProjectPostingClient.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadProjects'. Either include it or remove the dependency array.","line":156,"column":5,"nodeType":"ArrayExpression","endLine":156,"endColumn":20,"suggestions":[{"desc":"Update the dependencies array to be: [userId, orgId, loadProjects]","fix":{"range":[4453,4468],"text":"[userId, orgId, loadProjects]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { Plus, Edit, Trash2, Eye, Calendar, DollarSign, MapPin, Users, Paperclip, Search, AlertCircle, Key } from 'lucide-react';\nimport { useCallback, useEffect, useMemo, useState, type ChangeEvent, type FormEvent } from 'react';\nimport {\n  AppDrawer,\n  Badge,\n  Button,\n  Card,\n  Input,\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n  Textarea,\n  UnifiedInput\n} from \"@ghxstship/ui\";\nimport { createBrowserClient } from '@ghxstship/auth';\nimport { AppDrawer } from '@ghxstship/ui';\n\ntype ProjectStatus = 'draft' | 'open' | 'in_progress' | 'completed' | string;\ntype ProjectExperienceLevel = 'entry' | 'intermediate' | 'expert';\ntype ProjectBudgetType = 'fixed' | 'hourly' | 'not_specified';\ntype ProjectLocationType = 'remote' | 'onsite' | 'hybrid';\ntype ProjectVisibility = 'public' | 'private' | 'invite_only';\n\ninterface ProjectFormData {\n title: string;\n description: string;\n category: string;\n subcategory: string;\n scope: string;\n skillsRequired: string;\n experienceLevel: ProjectExperienceLevel;\n budgetType: ProjectBudgetType;\n budgetMin: string;\n budgetMax: string;\n currency: string;\n startDate: string;\n endDate: string;\n duration: string;\n isUrgent: boolean;\n locationType: ProjectLocationType;\n visibility: ProjectVisibility;\n}\n\ninterface ProjectProposalCount {\n count?: number | null;\n}\n\ninterface OpenDeckProject {\n id: string;\n title?: string | null;\n description?: string | null;\n category?: string | null;\n subcategory?: string | null;\n scope?: string | null;\n skills_required?: string[] | null;\n experience_level?: string | null;\n budget_type?: string | null;\n budget_min?: number | null;\n budget_max?: number | null;\n currency?: string | null;\n start_date?: string | null;\n end_date?: string | null;\n duration?: string | null;\n is_urgent?: boolean | null;\n location_type?: string | null;\n visibility?: string | null;\n status: ProjectStatus;\n proposals?: ProjectProposalCount[];\n created_at: string;\n client_id: string;\n organization_id: string;\n is_demo?: boolean | null;\n}\n\ninterface ProjectPostingClientProps {\n userId: string;\n orgId: string;\n}\n\nconst categories = [\n 'Audio & Sound',\n 'Lighting Design',\n 'Stage Production',\n 'Video & Projection',\n 'Event Management',\n 'Artist Services',\n 'Logistics & Transport',\n 'Catering & Hospitality',\n 'Security & Safety',\n 'Marketing & Promotion',\n];\n\nconst experienceLevelOptions: ReadonlyArray<{ value: ProjectExperienceLevel; label: string }> = [\n { value: 'entry', label: 'Entry Level' },\n { value: 'intermediate', label: 'Intermediate' },\n { value: 'expert', label: 'Expert' },\n];\n\nconst budgetTypeOptions: ReadonlyArray<{ value: ProjectBudgetType; label: string }> = [\n { value: 'fixed', label: 'Fixed Price' },\n { value: 'hourly', label: 'Hourly Rate' },\n { value: 'not_specified', label: 'Not Specified' },\n];\n\nconst locationTypeOptions: ReadonlyArray<{ value: ProjectLocationType; label: string }> = [\n { value: 'remote', label: 'Remote' },\n { value: 'onsite', label: 'Onsite' },\n { value: 'hybrid', label: 'Hybrid' },\n];\n\nconst visibilityOptions: ReadonlyArray<{ value: ProjectVisibility; label: string }> = [\n { value: 'public', label: 'Public' },\n { value: 'private', label: 'Private' },\n { value: 'invite_only', label: 'Invite Only' },\n];\n\nconst createInitialFormData = (): ProjectFormData => ({\n title: '',\n description: '',\n category: '',\n subcategory: '',\n scope: '',\n skillsRequired: '',\n experienceLevel: 'entry',\n budgetType: 'not_specified',\n budgetMin: '',\n budgetMax: '',\n currency: 'USD',\n startDate: '',\n endDate: '',\n duration: '',\n isUrgent: false,\n locationType: 'remote',\n visibility: 'public'\n});\n\nexport default function ProjectPostingClient({ userId, orgId }: ProjectPostingClientProps) {\n const supabase = createBrowserClient();\n const [projects, setProjects] = useState<OpenDeckProject[]>([]);\n const [loading, setLoading] = useState(true);\n const [drawerOpen, setDrawerOpen] = useState(false);\n const [isSubmitting, setIsSubmitting] = useState(false);\n const [error, setError] = useState<string | null>(null);\n const [selectedProject, setSelectedProject] = useState<OpenDeckProject | null>(null);\n const [viewMode, setViewMode] = useState<'grid' | 'list'>('grid');\n const [filterStatus, setFilterStatus] = useState('all');\n const [searchQuery, setSearchQuery] = useState('');\n const [formData, setFormData] = useState<ProjectFormData>(() => createInitialFormData());\n\n useEffect(() => {\n loadProjects();\n }, [userId, orgId]);\n\n const loadProjects = useCallback(async () => {\n setLoading(true);\n try {\n const { data, error: fetchError } = await supabase\n .from('opendeck_projects')\n .select(\n `*, proposals:opendeck_proposals(count)`\n )\n .eq('client_id', userId)\n .order('created_at', { ascending: false });\n\n if (fetchError) {\n throw fetchError;\n }\n\n setProjects((data || []) as OpenDeckProject[]);\n } catch (fetchErr) {\n console.error('Error loading projects:', fetchErr);\n } finally {\n setLoading(false);\n }\n }, [supabase, userId]);\n\n const updateForm = useCallback(<Key extends keyof ProjectFormData>(field: Key, value: ProjectFormData[Key]) => {\n setFormData(prev => ({ ...prev, [field]: value }));\n }, []);\n\n const handleInputChange = useCallback((event: ChangeEvent<HTMLInputElement>) => {\n const { name, value, type, checked } = event.target;\n if (type === 'checkbox') {\n updateForm(name as keyof ProjectFormData, checked as ProjectFormData[keyof ProjectFormData]);\n return;\n }\n updateForm(name as keyof ProjectFormData, e.target.value as ProjectFormData[keyof ProjectFormData]);\n }, [updateForm]);\n\n const handleTextareaChange = useCallback((event: ChangeEvent<HTMLTextAreaElement>) => {\n const { name, value } = event.target;\n updateForm(name as keyof ProjectFormData, e.target.value as ProjectFormData[keyof ProjectFormData]);\n }, [updateForm]);\n\n const handleSelectChange = useCallback(<Key extends keyof ProjectFormData>(field: Key) => (value: string) => {\n updateForm(field, e.target.value as ProjectFormData[Key]);\n }, [updateForm]);\n\n const handleOpenDrawer = useCallback((project?: OpenDeckProject) => {\n if (project) {\n setSelectedProject(project);\n setFormData({\n title: project.title ?? '',\n description: project.description ?? '',\n category: project.category ?? '',\n subcategory: project.subcategory ?? '',\n scope: project.scope ?? '',\n skillsRequired: (project.skills_required ?? []).join(', '),\n experienceLevel: (project.experience_level as ProjectExperienceLevel) || 'entry',\n budgetType: (project.budget_type as ProjectBudgetType) || 'not_specified',\n budgetMin: project.budget_min != null ? String(project.budget_min) : '',\n budgetMax: project.budget_max != null ? String(project.budget_max) : '',\n currency: project.currency ?? 'USD',\n startDate: project.start_date ?? '',\n endDate: project.end_date ?? '',\n duration: project.duration ?? '',\n isUrgent: project.is_urgent ?? false,\n locationType: (project.location_type as ProjectLocationType) || 'remote',\n visibility: (project.visibility as ProjectVisibility) || 'public'\n });\n } else {\n setSelectedProject(null);\n setFormData(createInitialFormData());\n }\n\n setError(null);\n setDrawerOpen(true);\n }, []);\n\n const handleCloseDrawer = useCallback(() => {\n if (isSubmitting) {\n return;\n }\n\n setDrawerOpen(false);\n setSelectedProject(null);\n setFormData(createInitialFormData());\n setError(null);\n }, [isSubmitting]);\n\n const deleteProject = useCallback(async (id: string) => {\n if (!confirm('Are you sure you want to delete this project?')) {\n return;\n }\n\n try {\n const { error: deleteError } = await supabase\n .from('opendeck_projects')\n .delete()\n .eq('id', id);\n\n if (deleteError) {\n throw deleteError;\n }\n\n loadProjects();\n } catch (deleteErr) {\n console.error('Error deleting project:', deleteErr);\n }\n }, [loadProjects, supabase]);\n\n const filteredProjects = useMemo(() => {\n return projects.filter(project => {\n const title = project.title || '';\n const description = project.description || '';\n const matchesStatus = filterStatus === 'all' || project.status === filterStatus;\n const matchesSearch =\n title.toLowerCase().includes(searchQuery.toLowerCase()) ||\n description.toLowerCase().includes(searchQuery.toLowerCase());\n\n return matchesStatus && matchesSearch;\n });\n }, [filterStatus, projects, searchQuery]);\n\n const statusItems = useMemo(() => (\n <>\n <SelectItem value=\"all\">All Projects</SelectItem>\n <SelectItem value=\"draft\">Draft</SelectItem>\n <SelectItem value=\"open\">Open</SelectItem>\n <SelectItem value=\"in_progress\">In Progress</SelectItem>\n <SelectItem value=\"completed\">Completed</SelectItem>\n </>\n ), []);\n\n const experienceLevelItems = useMemo(() => experienceLevelOptions.map(option => (\n <SelectItem key={option.value} value={option.value}>\n {option.label}\n </SelectItem>\n )), []);\n\n const budgetTypeItems = useMemo(() => budgetTypeOptions.map(option => (\n <SelectItem key={option.value} value={option.value}>\n {option.label}\n </SelectItem>\n )), []);\n\n const locationTypeItems = useMemo(() => locationTypeOptions.map(option => (\n <SelectItem key={option.value} value={option.value}>\n {option.label}\n </SelectItem>\n )), []);\n\n const visibilityItems = useMemo(() => visibilityOptions.map(option => (\n <SelectItem key={option.value} value={option.value}>\n {option.label}\n </SelectItem>\n )), []);\n\n const handleSubmit = useCallback(async (event: FormEvent<HTMLFormElement>) => {\n event.preventDefault();\n\n const trimmedTitle = formData.title.trim();\n const trimmedDescription = formData.description.trim();\n const trimmedScope = formData.scope.trim();\n const trimmedCategory = formData.category.trim();\n const trimmedSkills = formData.skillsRequired.split(',').map(skill => skill.trim()).filter(Boolean);\n\n if (trimmedTitle.length < 5) {\n setError('Title must be at least 5 characters.');\n return;\n }\n\n if (trimmedDescription.length < 50) {\n setError('Description must be at least 50 characters.');\n return;\n }\n\n if (!trimmedCategory) {\n setError('Category is required.');\n return;\n }\n\n if (trimmedScope.length < 20) {\n setError('Scope must be at least 20 characters.');\n return;\n }\n\n if (trimmedSkills.length === 0) {\n setError('Please specify at least one required skill.');\n return;\n }\n\n const budgetMinValue = parseFloat(formData.budgetMin.trim());\n const budgetMaxValue = parseFloat(formData.budgetMax.trim());\n\n if (formData.budgetType !== 'not_specified') {\n if (Number.isNaN(budgetMinValue) || budgetMinValue < 0) {\n setError('Minimum budget must be a non-negative number.');\n return;\n }\n\n if (Number.isNaN(budgetMaxValue) || budgetMaxValue < 0) {\n setError('Maximum budget must be a non-negative number.');\n return;\n }\n\n if (budgetMaxValue < budgetMinValue) {\n setError('Maximum budget must be greater than or equal to minimum budget.');\n return;\n }\n }\n\n setError(null);\n setIsSubmitting(true);\n\n const payload = {\n title: trimmedTitle,\n description: trimmedDescription,\n category: trimmedCategory,\n subcategory: formData.subcategory.trim() || undefined,\n scope: trimmedScope,\n skills_required: trimmedSkills,\n experience_level: formData.experienceLevel,\n budget_type: formData.budgetType,\n budget_min: formData.budgetType === 'not_specified' ? null : budgetMinValue,\n budget_max: formData.budgetType === 'not_specified' ? null : budgetMaxValue,\n currency: formData.currency,\n start_date: formData.startDate || undefined,\n end_date: formData.endDate || undefined,\n duration: formData.duration.trim() || undefined,\n is_urgent: formData.isUrgent,\n location_type: formData.locationType,\n visibility: formData.visibility,\n client_id: userId,\n organization_id: orgId,\n status: selectedProject?.status || 'open'\n };\n\n try {\n if (selectedProject) {\n const { error: updateError } = await supabase\n .from('opendeck_projects')\n .update(payload)\n .eq('id', selectedProject.id);\n\n if (updateError) {\n throw updateError;\n }\n } else {\n const { error: insertError } = await supabase\n .from('opendeck_projects')\n .insert(payload);\n\n if (insertError) {\n throw insertError;\n }\n }\n\n setDrawerOpen(false);\n setSelectedProject(null);\n setFormData(createInitialFormData());\n loadProjects();\n } catch (submitError) {\n console.error('Error saving project:', submitError);\n setError(submitError instanceof Error ? submitError.message : 'An unexpected error occurred while saving the project.');\n } finally {\n setIsSubmitting(false);\n }\n }, [formData, loadProjects, orgId, selectedProject, supabase, userId]);\n\n const isSubmitDisabled = useMemo(() => {\n return (\n isSubmitting ||\n !formData.title.trim() ||\n formData.title.trim().length < 5 ||\n !formData.description.trim() ||\n formData.description.trim().length < 50 ||\n !formData.category.trim() ||\n !formData.scope.trim() ||\n formData.scope.trim().length < 20 ||\n formData.skillsRequired.split(',').map(skill => skill.trim()).filter(Boolean).length === 0\n );\n }, [formData, isSubmitting]);\n\n if (loading) {\n return (\n <div className=\"brand-marketplace flex items-center justify-center h-container-sm\">\n <div className=\"brand-marketplace animate-spin rounded-full h-icon-lg w-icon-lg border-b-2 border-primary\" />\n </div>\n );\n }\n\n return (\n <div className=\"brand-marketplace stack-lg\">\n <div className=\"brand-marketplace flex justify-between items-center\">\n <div>\n <h2 className=\"text-heading-3\">Project Postings</h2>\n <p className=\"color-muted\">Manage your project briefs and proposals</p>\n </div>\n <Button onClick={() => handleOpenDrawer()}>\n <Plus className=\"h-icon-xs w-icon-xs mr-sm\" />\n Post New Project\n </Button>\n </div>\n\n <Card className=\"p-md\">\n <div className=\"brand-marketplace flex flex-col md:flex-row gap-md\">\n <div className=\"brand-marketplace flex-1\">\n <div className=\"brand-marketplace relative\">\n <Search className=\"absolute left-3 top-xs/2 -translate-y-1/2 h-icon-xs w-icon-xs color-muted\" />\n <Input\n placeholder=\"Search projects...\"\n value={searchQuery}\n onChange={(event: ChangeEvent<HTMLInputElement>) => setSearchQuery(event.target.value)}\n className=\"pl-2xl\"\n />\n </div>\n </div>\n <Select value={filterStatus} onValueChange={setFilterStatus}>\n <SelectTrigger className=\"w-dropdown\">\n <SelectValue placeholder=\"Filter by status\" />\n </SelectTrigger>\n <SelectContent>{statusItems}</SelectContent>\n </Select>\n <div className=\"brand-marketplace flex gap-sm\">\n <Button\n variant={viewMode === 'grid' ? 'default' : 'outline'}\n onClick={() => setViewMode('grid')}\n >\n Grid\n </Button>\n <Button\n variant={viewMode === 'list' ? 'default' : 'outline'}\n onClick={() => setViewMode('list')}\n >\n List\n </Button>\n </div>\n </div>\n </Card>\n\n {filteredProjects.length === 0 ? (\n <Card className=\"p-xsxl text-center\">\n <div className=\"brand-marketplace max-w-md mx-auto\">\n <Paperclip className=\"h-icon-2xl w-icon-2xl mx-auto mb-md color-muted\" />\n <h3 className=\"text-body text-heading-4 mb-sm\">No projects found</h3>\n <p className=\"color-muted mb-md\">\n Post your first project to start receiving proposals from vendors\n </p>\n <Button onClick={() => handleOpenDrawer()}>\n <Plus className=\"h-icon-xs w-icon-xs mr-sm\" />\n Post New Project\n </Button>\n </div>\n </Card>\n ) : viewMode === 'grid' ? (\n <div className=\"brand-marketplace grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-md\">\n {filteredProjects.map(project => (\n <ProjectCard\n key={project.id}\n project={project}\n onEdit={handleOpenDrawer}\n onDelete={deleteProject}\n />\n ))}\n </div>\n ) : (\n <Card>\n <div className=\"brand-marketplace divide-y\">\n {filteredProjects.map(project => (\n <ProjectListRow\n key={project.id}\n project={project}\n onEdit={handleOpenDrawer}\n onDelete={deleteProject}\n />\n ))}\n </div>\n </Card>\n )}\n\n <AppDrawer\n open={drawerOpen}\n onClose={handleCloseDrawer}\n record={selectedProject}\n mode={selectedProject ? 'edit' : 'create'}\n title={selectedProject ? 'Edit Project' : 'Post New Project'}\n fields={[]}\n loading={isSubmitting}\n tabs={[{\n key: 'details',\n label: 'Details',\n content: (\n <form onSubmit={handleSubmit} className=\"p-lg stack-md\">\n <div>\n <label htmlFor=\"title\" className=\"text-body-sm form-label\">\n Project Title\n </label>\n <Input\n \n \n value={formData.title}\n onChange={handleInputChange}\n placeholder=\"e.g., Stage Design for Music Festival\"\n required\n />\n </div>\n\n <div>\n <label htmlFor=\"category\" className=\"text-body-sm form-label\">\n Category\n </label>\n <Select\n value={formData.category}\n onValueChange={handleSelectChange('category')}\n >\n <SelectTrigger>\n <SelectValue placeholder=\"Select category\" />\n </SelectTrigger>\n <SelectContent>\n {categories.map(cat => (\n <SelectItem key={cat} value={cat}>\n {cat}\n </SelectItem>\n ))}\n </SelectContent>\n </Select>\n </div>\n\n <div>\n <label htmlFor=\"description\" className=\"text-body-sm form-label\">\n Description\n </label>\n <Textarea\n \n \n value={formData.description}\n onChange={handleTextareaChange}\n placeholder=\"Describe your project requirements in detail...\"\n rows={4}\n required\n />\n </div>\n\n <div>\n <label htmlFor=\"scope\" className=\"text-body-sm form-label\">\n Scope of Work\n </label>\n <Textarea\n \n \n value={formData.scope}\n onChange={handleTextareaChange}\n placeholder=\"Define the scope and deliverables...\"\n rows={3}\n required\n />\n </div>\n\n <div>\n <label htmlFor=\"skillsRequired\" className=\"text-body-sm form-label\">\n Required Skills\n </label>\n <Input\n \n \n value={formData.skillsRequired}\n onChange={handleInputChange}\n placeholder=\"Comma-separated list of skills\"\n required\n />\n </div>\n\n <div className=\"brand-marketplace grid grid-cols-1 gap-md md:grid-cols-2\">\n <div>\n <label className=\"text-body-sm form-label\">Budget Type</label>\n <Select\n value={formData.budgetType}\n onValueChange={handleSelectChange('budgetType')}\n >\n <SelectTrigger>\n <SelectValue />\n </SelectTrigger>\n <SelectContent>{budgetTypeItems}</SelectContent>\n </Select>\n </div>\n\n <div>\n <label className=\"text-body-sm form-label\">Experience Level</label>\n <Select\n value={formData.experienceLevel}\n onValueChange={handleSelectChange('experienceLevel')}\n >\n <SelectTrigger>\n <SelectValue />\n </SelectTrigger>\n <SelectContent>{experienceLevelItems}</SelectContent>\n </Select>\n </div>\n </div>\n\n {formData.budgetType !== 'not_specified' && (\n <div className=\"brand-marketplace grid grid-cols-1 gap-md md:grid-cols-2\">\n <div>\n <label htmlFor=\"budgetMin\" className=\"text-body-sm form-label\">\n {formData.budgetType === 'hourly' ? 'Min Rate' : 'Min Budget'}\n </label>\n <Input\n \n \n type=\"number\"\n value={formData.budgetMin}\n onChange={handleInputChange}\n placeholder=\"0\"\n min=\"0\"\n step=\"0.01\"\n />\n </div>\n <div>\n <label htmlFor=\"budgetMax\" className=\"text-body-sm form-label\">\n {formData.budgetType === 'hourly' ? 'Max Rate' : 'Max Budget'}\n </label>\n <Input\n \n \n type=\"number\"\n value={formData.budgetMax}\n onChange={handleInputChange}\n placeholder=\"0\"\n min=\"0\"\n step=\"0.01\"\n />\n </div>\n </div>\n )}\n\n <div className=\"brand-marketplace grid grid-cols-1 gap-md md:grid-cols-2\">\n <div>\n <label htmlFor=\"startDate\" className=\"text-body-sm form-label\">\n Start Date\n </label>\n <Input\n \n \n type=\"date\"\n value={formData.startDate}\n onChange={handleInputChange}\n />\n </div>\n <div>\n <label htmlFor=\"endDate\" className=\"text-body-sm form-label\">\n End Date\n </label>\n <Input\n \n \n type=\"date\"\n value={formData.endDate}\n onChange={handleInputChange}\n />\n </div>\n </div>\n\n <div>\n <label htmlFor=\"duration\" className=\"text-body-sm form-label\">\n Duration\n </label>\n <Input\n \n \n value={formData.duration}\n onChange={handleInputChange}\n placeholder=\"e.g., 2 weeks, 1 month\"\n />\n </div>\n\n <div className=\"brand-marketplace grid grid-cols-1 gap-md md:grid-cols-2\">\n <div>\n <label className=\"text-body-sm form-label\">Location Type</label>\n <Select\n value={formData.locationType}\n onValueChange={handleSelectChange('locationType')}\n >\n <SelectTrigger>\n <SelectValue />\n </SelectTrigger>\n <SelectContent>{locationTypeItems}</SelectContent>\n </Select>\n </div>\n <div>\n <label className=\"text-body-sm form-label\">Visibility</label>\n <Select\n value={formData.visibility}\n onValueChange={handleSelectChange('visibility')}\n >\n <SelectTrigger>\n <SelectValue />\n </SelectTrigger>\n <SelectContent>{visibilityItems}</SelectContent>\n </Select>\n </div>\n </div>\n\n <div className=\"brand-marketplace flex items-center gap-sm pt-sm\">\n <input\n \n \n type=\"checkbox\"\n checked={formData.isUrgent}\n onChange={handleInputChange}\n className=\"rounded border-border\"\n />\n <label htmlFor=\"isUrgent\" className=\"text-body-sm\">\n Mark as urgent project\n </label>\n </div>\n\n <div className=\"brand-marketplace flex items-center justify-between gap-sm pt-md\">\n <div className=\"flex items-center gap-sm text-body-sm color-muted\">\n {error && (\n <>\n <AlertCircle className=\"h-icon-xs w-icon-xs color-destructive\" />\n <span className=\"color-destructive\">{error}</span>\n </>\n )}\n </div>\n <div className=\"brand-marketplace flex items-center gap-sm\">\n <Button type=\"button\" variant=\"outline\" onClick={handleCloseDrawer}>\n Cancel\n </Button>\n <Button type=\"submit\" disabled={isSubmitDisabled}>\n {selectedProject ? 'Update Project' : 'Post Project'}\n </Button>\n </div>\n </div>\n </form>\n )\n }]}\n />\n </div>\n );\n}\n\ninterface ProjectCardProps {\n project: OpenDeckProject;\n onEdit: (project: OpenDeckProject) => void;\n onDelete: (id: string) => void;\n}\n\nfunction ProjectCard({ project, onEdit, onDelete }: ProjectCardProps) {\n return (\n <Card className=\"p-lg hover:shadow-floating transition-shadow\">\n <div className=\"brand-marketplace flex justify-between items-start mb-md\">\n <div>\n <h3 className=\"text-body text-heading-4\">{project.title}</h3>\n <p className=\"text-body-sm color-muted\">{project.category}</p>\n </div>\n <Badge\n variant={\n project.status === 'open'\n ? 'success'\n : project.status === 'in_progress'\n ? 'warning'\n : 'secondary'\n }\n >\n {project.status}\n </Badge>\n </div>\n\n <p className=\"text-body-sm line-clamp-sm mb-md\">{project.description}</p>\n\n <div className=\"brand-marketplace stack-sm mb-md\">\n <div className=\"brand-marketplace flex items-center text-body-sm\">\n <DollarSign className=\"h-icon-xs w-icon-xs mr-sm color-muted\" />\n {project.budget_type === 'fixed'\n ? `$${project.budget_min?.toLocaleString()} - $${project.budget_max?.toLocaleString()}`\n : project.budget_type === 'hourly'\n ? `$${project.budget_min}/hr`\n : 'Budget not specified'}\n </div>\n <div className=\"brand-marketplace flex items-center text-body-sm\">\n <Calendar className=\"h-icon-xs w-icon-xs mr-sm color-muted\" />\n {project.duration || 'Timeline flexible'}\n </div>\n <div className=\"brand-marketplace flex items-center text-body-sm\">\n <MapPin className=\"h-icon-xs w-icon-xs mr-sm color-muted\" />\n {project.location_type || 'Remote'}\n </div>\n <div className=\"brand-marketplace flex items-center text-body-sm\">\n <Users className=\"h-icon-xs w-icon-xs mr-sm color-muted\" />\n {project.proposals?.[0]?.count || 0} proposals\n </div>\n </div>\n\n {project.is_urgent && (\n <Badge variant=\"destructive\" className=\"mb-md\">\n <AlertCircle className=\"h-3 w-3 mr-xs\" />\n Urgent\n </Badge>\n )}\n\n <div className=\"brand-marketplace flex cluster-sm\">\n <Button variant=\"outline\" className=\"flex-1\" onClick={() => onEdit(project)}>\n <Edit className=\"h-icon-xs w-icon-xs mr-xs\" />\n Edit\n </Button>\n <Button variant=\"outline\" className=\"flex-1\">\n <Eye className=\"h-icon-xs w-icon-xs mr-xs\" />\n View\n </Button>\n <Button variant=\"ghost\" onClick={() => onDelete(project.id)}>\n <Trash2 className=\"h-icon-xs w-icon-xs\" />\n </Button>\n </div>\n </Card>\n );\n}\n\ninterface ProjectListRowProps {\n project: OpenDeckProject;\n onEdit: (project: OpenDeckProject) => void;\n onDelete: (id: string) => void;\n}\n\nfunction ProjectListRow({ project, onEdit, onDelete }: ProjectListRowProps) {\n return (\n <div className=\"p-md hover:bg-accent/50 transition-colors\">\n <div className=\"brand-marketplace flex items-center justify-between\">\n <div className=\"brand-marketplace flex-1\">\n <div className=\"brand-marketplace flex items-center gap-sm\">\n <h3 className=\"text-body text-heading-4\">{project.title}</h3>\n <Badge\n variant={\n project.status === 'open'\n ? 'success'\n : project.status === 'in_progress'\n ? 'warning'\n : 'secondary'\n }\n >\n {project.status}\n </Badge>\n {project.is_urgent && <Badge variant=\"destructive\">Urgent</Badge>}\n </div>\n <p className=\"text-body-sm color-muted mt-xs\">{project.description}</p>\n <div className=\"brand-marketplace flex items-center gap-md mt-sm text-body-sm color-muted\">\n <span>{project.category}</span>\n <span>•</span>\n <span>{project.proposals?.[0]?.count || 0} proposals</span>\n <span>•</span>\n <span>Posted {new Date(project.created_at).toLocaleDateString()}</span>\n </div>\n </div>\n <div className=\"brand-marketplace flex items-center gap-sm\">\n <Button variant=\"ghost\" onClick={() => onEdit(project)}>\n <Edit className=\"h-icon-xs w-icon-xs\" />\n </Button>\n <Button variant=\"ghost\">\n <Eye className=\"h-icon-xs w-icon-xs\" />\n </Button>\n <Button variant=\"ghost\" onClick={() => onDelete(project.id)}>\n <Trash2 className=\"h-icon-xs w-icon-xs\" />\n </Button>\n </div>\n </div>\n </div>\n );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/marketplace/ProposalSystem.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'loadProject' and 'loadProposals'. Either include them or remove the dependency array.","line":133,"column":5,"nodeType":"ArrayExpression","endLine":133,"endColumn":16,"suggestions":[{"desc":"Update the dependencies array to be: [loadProject, loadProposals, projectId]","fix":{"range":[3275,3286],"text":"[loadProject, loadProposals, projectId]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"The 'loadProposals' function makes the dependencies of useCallback Hook (at line 337) change on every render. To fix this, wrap the definition of 'loadProposals' in its own useCallback() Hook.","line":145,"column":2,"nodeType":"FunctionDeclaration","endLine":177,"endColumn":3}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\n\n\nimport { Send, DollarSign, Calendar, CheckCircle, XCircle, Star, Award, AlertCircle, FileText, Key } from 'lucide-react';\nimport { useCallback, useEffect, useMemo, useState, type ChangeEvent, type FormEvent } from 'react';\nimport {\n  AppDrawer,\n  Badge,\n  Button,\n  Card,\n  Drawer,\n  DrawerContent,\n  DrawerDescription,\n  DrawerFooter,\n  DrawerHeader,\n  DrawerTitle,\n  Input,\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n  Textarea,\n  UnifiedInput\n} from \"@ghxstship/ui\";\nimport { createBrowserClient } from '@ghxstship/auth';\nimport { AppDrawer } from '@ghxstship/ui';\n\ntype ProposalStatus = 'submitted' | 'shortlisted' | 'accepted' | 'rejected' | string;\ntype ProposalFeeType = 'fixed' | 'hourly';\n\ninterface ProposalFormData {\n coverLetter: string;\n approach: string;\n bidAmount: string;\n currency: string;\n feeType: ProposalFeeType;\n estimatedHours: string;\n proposedTimeline: string;\n startAvailability: string;\n questions: string;\n}\n\ninterface VendorProfile {\n id: string;\n display_name?: string | null;\n avatar_url?: string | null;\n rating?: number | null;\n total_reviews?: number | null;\n hourly_rate?: number | null;\n}\n\ninterface ProposalMilestone {\n title: string;\n description: string;\n amount: number;\n duration: string;\n}\n\ninterface OpenDeckProposal {\n id: string;\n project_id: string;\n vendor_id: string;\n status: ProposalStatus;\n vendor?: VendorProfile;\n milestones?: ProposalMilestone[];\n client_viewed?: boolean;\n created_at: string;\n cover_letter: string;\n approach: string;\n bid_amount: number;\n currency: string;\n fee_type: ProposalFeeType;\n estimated_hours?: number | null;\n proposed_timeline: string;\n start_availability?: string | null;\n questions?: string | null;\n}\n\ninterface OpenDeckProject extends Partial<{\n budget_type: 'fixed' | 'hourly' | 'not_specified';\n budget_min: number;\n budget_max: number;\n duration: string;\n description: string;\n start_date: string;\n end_date: string;\n status: string;\n}> {\n id: string;\n title: string;\n}\n\ninterface ProposalSystemProps {\n projectId: string;\n vendorId?: string;\n userId: string;\n mode: 'vendor' | 'client';\n}\n\nconst FEE_TYPE_OPTIONS: ReadonlyArray<{ value: ProposalFeeType; label: string }> = [\n { value: 'fixed', label: 'Fixed Price' },\n { value: 'hourly', label: 'Hourly Rate' },\n];\n\nconst createInitialFormData = (): ProposalFormData => ({\n coverLetter: '',\n approach: '',\n bidAmount: '',\n currency: 'USD',\n feeType: 'fixed',\n estimatedHours: '',\n proposedTimeline: '',\n startAvailability: '',\n questions: ''\n});\n\nexport default function ProposalSystem({ projectId, vendorId, userId, mode }: ProposalSystemProps) {\n const supabase = createBrowserClient();\n const [proposals, setProposals] = useState<OpenDeckProposal[]>([]);\n const [loading, setLoading] = useState(true);\n const [drawerOpen, setDrawerOpen] = useState(false);\n const [selectedProposal, setSelectedProposal] = useState<OpenDeckProposal | null>(null);\n const [project, setProject] = useState<OpenDeckProject | null>(null);\n const [formData, setFormData] = useState<ProposalFormData>(() => createInitialFormData());\n const [isSubmitting, setIsSubmitting] = useState(false);\n const [error, setError] = useState<string | null>(null);\n\n useEffect(() => {\n loadProject();\n loadProposals();\n }, [projectId]);\n\n async function loadProject() {\n const { data } = await supabase\n .from('opendeck_projects')\n .select('*')\n .eq('id', projectId)\n .single();\n \n setProject(data as OpenDeckProject | null);\n }\n\n async function loadProposals() {\n setLoading(true);\n try {\n let query = supabase\n .from('opendeck_proposals')\n .select(`\n *,\n vendor:opendeck_vendor_profiles!vendor_id(\n id,\n display_name,\n avatar_url,\n rating,\n total_reviews,\n hourly_rate\n )\n `)\n .eq('project_id', projectId)\n .order('created_at', { ascending: false });\n\n if (mode === 'vendor' && vendorId) {\n query = query.eq('vendor_id', vendorId);\n }\n\n const { data, error } = await query;\n if (error) throw error;\n\n setProposals((data || []) as OpenDeckProposal[]);\n } catch (error) {\n console.error('Error loading proposals:', error);\n } finally {\n setLoading(false);\n }\n }\n\n async function updateProposalStatus(proposalId: string, status: ProposalStatus) {\n try {\n const { error } = await supabase\n .from('opendeck_proposals')\n .update({ \n status,\n client_viewed: true,\n client_viewed_at: new Date().toISOString(),\n shortlisted: status === 'shortlisted'\n })\n .eq('id', proposalId);\n\n if (error) throw error;\n loadProposals();\n } catch (error) {\n console.error('Error updating proposal:', error);\n }\n }\n\n const updateForm = useCallback(<Key extends keyof ProposalFormData>(field: Key, value: ProposalFormData[Key]) => {\n setFormData(prev => ({ ...prev, [field]: value }));\n }, []);\n\n const handleInputChange = useCallback((event: ChangeEvent<HTMLInputElement>) => {\n const { name, value } = event.target;\n updateForm(name as keyof ProposalFormData, e.target.value as ProposalFormData[keyof ProposalFormData]);\n }, [updateForm]);\n\n const handleTextareaChange = useCallback((event: ChangeEvent<HTMLTextAreaElement>) => {\n const { name, value } = event.target;\n updateForm(name as keyof ProposalFormData, e.target.value as ProposalFormData[keyof ProposalFormData]);\n }, [updateForm]);\n\n const handleFeeTypeChange = useCallback((value: string) => {\n updateForm('feeType', e.target.value as ProposalFeeType);\n }, [updateForm]);\n\n const handleOpenDrawer = useCallback((proposal?: OpenDeckProposal | null) => {\n if (proposal) {\n setSelectedProposal(proposal);\n setFormData({\n coverLetter: proposal.cover_letter,\n approach: proposal.approach,\n bidAmount: String(proposal.bid_amount ?? ''),\n currency: proposal.currency ?? 'USD',\n feeType: (proposal.fee_type as ProposalFeeType) || 'fixed',\n estimatedHours: proposal.estimated_hours != null ? String(proposal.estimated_hours) : '',\n proposedTimeline: proposal.proposed_timeline,\n startAvailability: proposal.start_availability ?? '',\n questions: proposal.questions ?? ''\n });\n } else {\n setSelectedProposal(null);\n setFormData(createInitialFormData());\n }\n\n setError(null);\n setDrawerOpen(true);\n }, []);\n\n const handleCloseDrawer = useCallback(() => {\n if (isSubmitting) {\n return;\n }\n\n setDrawerOpen(false);\n setSelectedProposal(null);\n setFormData(createInitialFormData());\n setError(null);\n }, [isSubmitting]);\n\n const feeTypeItems = useMemo(() => FEE_TYPE_OPTIONS.map(option => (\n <SelectItem key={option.value} value={option.value}>\n {option.label}\n </SelectItem>\n )), []);\n\n const handleSubmitProposal = useCallback(async (event: FormEvent<HTMLFormElement>) => {\n event.preventDefault();\n\n if (!vendorId) {\n return;\n }\n\n const trimmedCoverLetter = formData.coverLetter.trim();\n const trimmedApproach = formData.approach.trim();\n const trimmedTimeline = formData.proposedTimeline.trim();\n const trimmedQuestions = formData.questions.trim();\n\n if (trimmedCoverLetter.length < 100) {\n setError('Cover letter must be at least 100 characters.');\n return;\n }\n\n if (trimmedApproach.length < 50) {\n setError('Approach must be at least 50 characters.');\n return;\n }\n\n if (trimmedTimeline.length < 10) {\n setError('Timeline must be at least 10 characters.');\n return;\n }\n\n const bidAmountValue = parseFloat(formData.bidAmount.trim());\n if (Number.isNaN(bidAmountValue) || bidAmountValue <= 0) {\n setError('Bid amount is required and must be greater than zero.');\n return;\n }\n\n const estimatedHoursValue = parseFloat(formData.estimatedHours.trim());\n if (formData.feeType === 'hourly' && (Number.isNaN(estimatedHoursValue) || estimatedHoursValue <= 0)) {\n setError('Estimated hours must be greater than zero for hourly proposals.');\n return;\n }\n\n setError(null);\n setIsSubmitting(true);\n\n const payload: Partial<OpenDeckProposal> = {\n cover_letter: trimmedCoverLetter,\n approach: trimmedApproach,\n bid_amount: bidAmountValue,\n currency: formData.currency,\n fee_type: formData.feeType,\n estimated_hours: formData.feeType === 'hourly' ? estimatedHoursValue : null,\n proposed_timeline: trimmedTimeline,\n start_availability: formData.startAvailability || null,\n questions: trimmedQuestions || null,\n project_id: projectId,\n vendor_id: vendorId,\n status: 'submitted'\n };\n\n try {\n const { error: insertError } = await supabase\n .from('opendeck_proposals')\n .insert(payload);\n\n if (insertError) {\n throw insertError;\n }\n\n await supabase.rpc('increment', {\n table_name: 'opendeck_projects',\n column_name: 'proposals_count',\n row_id: projectId\n });\n\n setDrawerOpen(false);\n setFormData(createInitialFormData());\n loadProposals();\n } catch (submitError) {\n console.error('Error submitting proposal:', submitError);\n setError(submitError instanceof Error ? submitError.message : 'An unexpected error occurred while submitting the proposal.');\n } finally {\n setIsSubmitting(false);\n }\n }, [formData, loadProposals, projectId, supabase, vendorId]);\n\n const isSubmitDisabled = useMemo(() => {\n if (isSubmitting || !vendorId) {\n return true;\n }\n\n const trimmedCoverLetter = formData.coverLetter.trim();\n const trimmedApproach = formData.approach.trim();\n const trimmedTimeline = formData.proposedTimeline.trim();\n const bidAmountValue = parseFloat(formData.bidAmount.trim());\n const estimatedHoursValue = parseFloat(formData.estimatedHours.trim());\n\n return (\n trimmedCoverLetter.length < 100 ||\n trimmedApproach.length < 50 ||\n trimmedTimeline.length < 10 ||\n Number.isNaN(bidAmountValue) ||\n bidAmountValue <= 0 ||\n (formData.feeType === 'hourly' && (Number.isNaN(estimatedHoursValue) || estimatedHoursValue <= 0))\n );\n }, [formData, isSubmitting, vendorId]);\n\n const ProposalCard = ({ proposal }: { proposal: OpenDeckProposal }) => (\n <Card className=\"p-lg\">\n <div className=\"brand-marketplace flex justify-between items-start mb-md\">\n <div className=\"brand-marketplace flex items-start cluster\">\n <div className=\"brand-marketplace w-icon-2xl h-icon-2xl rounded-full bg-gradient-to-br from-primary to-secondary flex items-center justify-center text-background text-heading-3\">\n {proposal.vendor?.display_name?.charAt(0) || 'V'}\n </div>\n <div>\n <h4 className=\"text-body text-heading-4\">{proposal.vendor?.display_name || 'Vendor'}</h4>\n <div className=\"brand-marketplace flex items-center cluster-sm text-body-sm color-muted\">\n <div className=\"brand-marketplace flex items-center\">\n <Star className=\"h-icon-xs w-icon-xs color-warning fill-warning mr-xs\" />\n <span>{proposal.vendor?.rating || 0}</span>\n </div>\n <span>•</span>\n <span>{proposal.vendor?.total_reviews || 0} reviews</span>\n {proposal.vendor?.hourly_rate && (\n <>\n <span>•</span>\n <span>${proposal.vendor.hourly_rate}/hr</span>\n </>\n )}\n </div>\n </div>\n </div>\n <Badge variant={\n proposal.status === 'accepted' ? 'success' :\n proposal.status === 'shortlisted' ? 'warning' :\n proposal.status === 'rejected' ? 'destructive' :\n 'secondary'\n }>\n {proposal.status}\n </Badge>\n </div>\n\n <div className=\"brand-marketplace stack-sm\">\n <div>\n <p className=\"text-body-sm form-label mb-xs\">Proposed Budget</p>\n <p className=\"text-heading-3\">\n ${proposal.bid_amount?.toLocaleString()}\n {proposal.fee_type === 'hourly' && <span className=\"text-body-sm text-body\">/hr</span>}\n </p>\n </div>\n\n <div>\n <p className=\"text-body-sm form-label mb-xs\">Timeline</p>\n <p className=\"text-body-sm\">{proposal.proposed_timeline}</p>\n </div>\n\n <div>\n <p className=\"text-body-sm form-label mb-xs\">Cover Letter</p>\n <p className=\"text-body-sm line-clamp-sm\">{proposal.cover_letter}</p>\n </div>\n\n {proposal.milestones && proposal.milestones.length > 0 && (\n <div>\n <p className=\"text-body-sm form-label mb-xs\">Milestones</p>\n <div className=\"brand-marketplace stack-md\">\n {proposal.milestones.slice(0, 2).map((milestone: ProposalMilestone, i: number) => (\n <div key={i} className=\"flex justify-between text-body-sm\">\n <span>{milestone.title}</span>\n <span className=\"form-label\">${milestone.amount.toLocaleString()}</span>\n </div>\n ))}\n {proposal.milestones.length > 2 && (\n <p className=\"text-body-sm color-muted\">\n +{proposal.milestones.length - 2} more milestones\n </p>\n )}\n </div>\n </div>\n )}\n </div>\n\n <div className=\"brand-marketplace flex cluster-sm mt-md\">\n {mode === 'client' ? (\n <>\n <Button \n variant=\"primary\" \n className=\"flex-1\"\n onClick={() => updateProposalStatus(proposal.id, 'accepted')}\n >\n <CheckCircle className=\"h-icon-xs w-icon-xs mr-xs\" />\n Accept\n </Button>\n <Button \n \n variant=\"outline\" \n className=\"flex-1\"\n onClick={() => updateProposalStatus(proposal.id, 'shortlisted')}\n >\n <Star className=\"h-icon-xs w-icon-xs mr-xs\" />\n Shortlist\n </Button>\n <Button \n \n variant=\"ghost\"\n onClick={() => updateProposalStatus(proposal.id, 'rejected')}\n >\n <XCircle className=\"h-icon-xs w-icon-xs\" />\n </Button>\n </>\n ) : (\n <>\n <Button variant=\"outline\" className=\"flex-1\">\n View Details\n </Button>\n {proposal.status === 'submitted' && (\n <Button variant=\"ghost\">\n Withdraw\n </Button>\n )}\n </>\n )}\n </div>\n </Card>\n );\n\n if (loading) {\n return (\n <div className=\"brand-marketplace flex items-center justify-center h-container-sm\">\n <div className=\"brand-marketplace animate-spin rounded-full h-icon-lg w-icon-lg border-b-2 border-primary\"></div>\n </div>\n );\n }\n\n return (\n <div className=\"brand-marketplace stack-lg\">\n {/* Project Summary */}\n {project && (\n <Card className=\"p-lg bg-accent/10\">\n <h3 className=\"text-body text-heading-4 mb-sm\">{project.title}</h3>\n <p className=\"text-body-sm color-muted mb-md\">{project.description}</p>\n <div className=\"brand-marketplace flex items-center cluster-lg text-body-sm\">\n <div className=\"brand-marketplace flex items-center\">\n <DollarSign className=\"h-icon-xs w-icon-xs mr-xs color-muted\" />\n <span>\n {project.budget_type === 'fixed' ? \n `$${project.budget_min?.toLocaleString()} - $${project.budget_max?.toLocaleString()}` :\n project.budget_type === 'hourly' ?\n `$${project.budget_min}/hr` :\n 'Budget not specified'\n }\n </span>\n </div>\n <div className=\"brand-marketplace flex items-center\">\n <Calendar className=\"h-icon-xs w-icon-xs mr-xs color-muted\" />\n <span>{project.duration || 'Timeline flexible'}</span>\n </div>\n <div className=\"brand-marketplace flex items-center\">\n <FileText className=\"h-icon-xs w-icon-xs mr-xs color-muted\" />\n <span>{proposals.length} proposals</span>\n </div>\n </div>\n </Card>\n )}\n\n {/* Actions */}\n {mode === 'vendor' && (\n <div className=\"brand-marketplace flex justify-between items-center\">\n <h3 className=\"text-body text-heading-4\">Your Proposals</h3>\n {proposals.length === 0 && (\n <Button onClick={() => handleOpenDrawer()}>\n <Send className=\"h-icon-xs w-icon-xs mr-sm\" />\n Submit Proposal\n </Button>\n )}\n </div>\n )}\n\n {mode === 'client' && (\n <div className=\"brand-marketplace flex justify-between items-center\">\n <h3 className=\"text-body text-heading-4\">Received Proposals</h3>\n <div className=\"brand-marketplace flex items-center cluster-sm\">\n <Badge variant=\"secondary\">\n {proposals.filter(p => p.status === 'shortlisted').length} shortlisted\n </Badge>\n <Badge variant=\"success\">\n {proposals.filter(p => p.status === 'accepted').length} accepted\n </Badge>\n </div>\n </div>\n )}\n\n {/* Proposals List */}\n {proposals.length === 0 ? (\n <Card className=\"p-xsxl text-center\">\n <Award className=\"h-icon-2xl w-icon-2xl mx-auto mb-md color-muted\" />\n <h3 className=\"text-body text-heading-4 mb-sm\">\n {mode === 'vendor' ? 'No proposals submitted yet' : 'No proposals received yet'}\n </h3>\n <p className=\"color-muted mb-md\">\n {mode === 'vendor' ? \n 'Submit a proposal to bid on this project' : \n 'Proposals from vendors will appear here'\n }\n </p>\n {mode === 'vendor' && (\n <Button onClick={() => handleOpenDrawer()}\n disabled={isSubmitting}\n >\n <Send className=\"h-icon-xs w-icon-xs mr-sm\" />\n Submit Proposal\n </Button>\n )}\n </Card>\n ) : (\n <div className=\"brand-marketplace grid grid-cols-1 md:grid-cols-2 gap-md\">\n {proposals.map(proposal => (\n <ProposalCard key={proposal.id} proposal={proposal} />\n ))}\n </div>\n )}\n\n {/* Proposal Form Drawer */}\n <AppDrawer\n open={drawerOpen}\n onClose={handleCloseDrawer}\n title=\"Submit Proposal\"\n record={selectedProposal}\n mode={mode === 'vendor' ? 'create' : 'view'}\n fields={[]}\n loading={isSubmitting}\n tabs={[{\n key: 'proposal-details',\n label: 'Proposal',\n content: mode === 'vendor' ? (\n <form onSubmit={handleSubmitProposal} className=\"p-lg stack-md\">\n <div>\n <label htmlFor=\"coverLetter\" className=\"text-body-sm form-label\">\n Cover Letter\n </label>\n <Textarea\n \n \n value={formData.coverLetter}\n onChange={handleTextareaChange}\n placeholder=\"Introduce yourself and explain why you're the best fit for this project...\"\n rows={4}\n required\n />\n </div>\n\n <div>\n <label htmlFor=\"approach\" className=\"text-body-sm form-label\">\n Your Approach\n </label>\n <Textarea\n \n \n value={formData.approach}\n onChange={handleTextareaChange}\n placeholder=\"Describe how you would approach this project...\"\n rows={3}\n required\n />\n </div>\n\n <div className=\"brand-marketplace grid grid-cols-1 gap-md md:grid-cols-2\">\n <div>\n <label className=\"text-body-sm form-label\">Fee Type</label>\n <Select value={formData.feeType} onValueChange={handleFeeTypeChange}>\n <SelectTrigger>\n <SelectValue />\n </SelectTrigger>\n <SelectContent>{feeTypeItems}</SelectContent>\n </Select>\n </div>\n\n <div>\n <label htmlFor=\"bidAmount\" className=\"text-body-sm form-label\">\n {formData.feeType === 'hourly' ? 'Hourly Rate' : 'Total Amount'}\n </label>\n <Input\n \n \n type=\"number\"\n value={formData.bidAmount}\n onChange={handleInputChange}\n placeholder=\"0\"\n min=\"0\"\n step=\"0.01\"\n required\n />\n </div>\n </div>\n\n {formData.feeType === 'hourly' && (\n <div>\n <label htmlFor=\"estimatedHours\" className=\"text-body-sm form-label\">\n Estimated Hours\n </label>\n <Input\n \n \n type=\"number\"\n value={formData.estimatedHours}\n onChange={handleInputChange}\n placeholder=\"0\"\n min=\"0\"\n step=\"0.1\"\n />\n </div>\n )}\n\n <div>\n <label htmlFor=\"proposedTimeline\" className=\"text-body-sm form-label\">\n Proposed Timeline\n </label>\n <Input\n \n \n value={formData.proposedTimeline}\n onChange={handleInputChange}\n placeholder=\"e.g., 2 weeks, 1 month\"\n required\n />\n </div>\n\n <div>\n <label htmlFor=\"startAvailability\" className=\"text-body-sm form-label\">\n Start Availability\n </label>\n <Input\n \n \n type=\"date\"\n value={formData.startAvailability}\n onChange={handleInputChange}\n />\n </div>\n\n <div>\n <label htmlFor=\"questions\" className=\"text-body-sm form-label\">\n Questions for Client (Optional)\n </label>\n <Textarea\n \n \n value={formData.questions}\n onChange={handleTextareaChange}\n placeholder=\"Any questions or clarifications needed?\"\n rows={2}\n />\n </div>\n\n <div className=\"brand-marketplace flex justify-between items-center gap-sm pt-md border-t\">\n <div className=\"flex items-center gap-sm text-body-sm color-muted\">\n {error && (\n <>\n <AlertCircle className=\"h-icon-xs w-icon-xs color-destructive\" />\n <span className=\"color-destructive\">{error}</span>\n </>\n )}\n </div>\n <div className=\"brand-marketplace flex items-center gap-sm\">\n <Button type=\"button\" variant=\"outline\" onClick={handleCloseDrawer}>\n Cancel\n </Button>\n <Button type=\"submit\" disabled={isSubmitDisabled}>\n {isSubmitting ? 'Submitting...' : 'Submit Proposal'}\n </Button>\n </div>\n </div>\n </form>\n ) : (\n <div className=\"p-lg\">\n <p className=\"text-body-sm color-muted\">Proposal details are available in the cards above.</p>\n </div>\n )\n }]}\n />\n </div>\n );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/marketplace/[id]/MarketplaceDetailClient.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/marketplace/[id]/edit/MarketplaceEditClient.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'setFormData'. Either include it or remove the dependency array.","line":55,"column":6,"nodeType":"ArrayExpression","endLine":55,"endColumn":22,"suggestions":[{"desc":"Update the dependencies array to be: [initialListing, setFormData]","fix":{"range":[1586,1602],"text":"[initialListing, setFormData]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport React, { useState, useEffect } from 'react';\nimport { useRouter } from 'next/navigation';\nimport { useTranslations } from 'next-intl';\nimport {\n  Button,\n  Card,\n  CardContent,\n  CardDescription,\n  CardFooter,\n  CardHeader,\n  CardTitle,\n  Input,\n  Label,\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n  Textarea\n} from \"@ghxstship/ui\";\nimport { Card, CardContent, CardHeader, CardTitle } from '@ghxstship/ui';\nimport { Input } from '@ghxstship/ui';\nimport { Label } from '@ghxstship/ui';\nimport { Textarea } from '@ghxstship/ui';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@ghxstship/ui';\nimport { Separator } from '@ghxstship/ui';\nimport { AlertCircle, ArrowLeft, Save, Settings } from \"lucide-react\";\nimport { marketplaceService } from '../../lib/marketplace-service';\nimport type { MarketplaceListing, UpsertListingDto } from '../../types';\n\ninterface MarketplaceEditClientProps {\n  orgId: string;\n  userId: string;\n  listingId: string;\n  initialListing: MarketplaceListing;\n}\n\nexport default function MarketplaceEditClient({\n  orgId,\n  userId,\n  listingId,\n  initialListing\n}: MarketplaceEditClientProps) {\n  const router = useRouter();\n  const t = useTranslations('marketplace');\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [formData, setFormData] = useState<Partial<MarketplaceListing>(initialListing);\n\n  // Update form data when initial listing changes\n  useEffect(() => {\n    setFormData(initialListing);\n  }, [initialListing]);\n\n  const updateFormData = (field: string, value: unknown) => {\n    setFormData(prev => ({ ...prev, [field]: value }));\n    setError(null);\n  };\n\n  const updateNestedFormData = (parent: string, field: string, value: unknown) => {\n    setFormData(prev => ({\n      ...prev,\n      [parent]: {\n        ...prev[parent],\n        [field]: value\n      }\n    }));\n    setError(null);\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setIsSubmitting(true);\n    setError(null);\n\n    try {\n      // Basic validation\n      if (!formData.title?.trim()) {\n        throw new Error('Title is required');\n      }\n      if (!formData.description?.trim()) {\n        throw new Error('Description is required');\n      }\n      if (!formData.type) {\n        throw new Error('Type is required');\n      }\n      if (!formData.category) {\n        throw new Error('Category is required');\n      }\n\n      // Transform formData to match UpsertListingDto (flatten nested objects and convert null to undefined)\n      const transformedData: Partial<UpsertListingDto> = {\n        ...formData,\n        subcategory: formData.subcategory || undefined,\n        amount: formData.pricing?.amount || undefined,\n        currency: formData.pricing?.currency || undefined,\n        negotiable: formData.pricing?.negotiable || undefined,\n        paymentTerms: formData.pricing?.paymentTerms || undefined,\n        city: formData.location?.city || undefined,\n        state: formData.location?.state || undefined,\n        country: formData.location?.country || undefined,\n        isRemote: formData.location?.isRemote || undefined,\n        startDate: formData.availability?.startDate || undefined,\n        endDate: formData.availability?.endDate || undefined,\n        flexible: formData.availability?.flexible || undefined,\n        immediateAvailable: formData.availability?.immediateAvailable || undefined,\n        requirements: formData.requirements || undefined,\n        tags: formData.tags || undefined\n      };\n\n      await marketplaceService.updateListing(orgId, userId, listingId, transformedData);\n      router.push(`/marketplace/${listingId}`);\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'Failed to update listing');\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  return (\n    <div className=\"max-w-4xl mx-auto space-y-lg\">\n      {/* Header */}\n      <div className=\"flex items-center gap-md\">\n        <Button variant=\"ghost\" onClick={() => router.back()}>\n          <ArrowLeft className=\"h-icon-xs w-icon-xs mr-2\" />\n          Back\n        </Button>\n        <div>\n          <h1 className=\"text-3xl font-bold\">Edit Listing</h1>\n          <p className=\"text-muted-foreground\">\n            Update your marketplace listing details\n          </p>\n        </div>\n      </div>\n\n      <form onSubmit={handleSubmit} className=\"space-y-lg\">\n        {/* Error Display */}\n        {error && (\n          <div className=\"flex items-center gap-sm p-md bg-destructive/10 border border-destructive/20 rounded-lg\">\n            <AlertCircle className=\"h-icon-sm w-icon-sm text-destructive flex-shrink-0\" />\n            <p className=\"text-sm text-destructive\">{error}</p>\n          </div>\n        )}\n\n        {/* Basic Information */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Basic Information</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-md\">\n            <div>\n              <Label htmlFor=\"title\">Title *</Label>\n              <Input\n                id=\"title\"\n                value={formData.title || ''}\n                onChange={(e: React.ChangeEvent<HTMLInputElement>) => updateFormData('title', e.target.value)}\n                placeholder=\"Enter listing title\"\n                required\n              />\n            </div>\n\n            <div>\n              <Label htmlFor=\"description\">Description *</Label>\n              <Textarea\n                id=\"description\"\n                value={formData.description || ''}\n                onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) => updateFormData('description', e.target.value)}\n                placeholder=\"Describe your listing in detail\"\n                rows={6}\n                required\n              />\n            </div>\n\n            <div className=\"grid grid-cols-2 gap-md\">\n              <div>\n                <Label htmlFor=\"type\">Type *</Label>\n                <Select\n                  value={formData.type || 'offer'}\n                  onChange={(value: string) => updateFormData('type', value)}\n                >\n                  <SelectTrigger>\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"offer\">Offer</SelectItem>\n                    <SelectItem value=\"request\">Request</SelectItem>\n                    <SelectItem value=\"exchange\">Exchange</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div>\n                <Label htmlFor=\"category\">Category *</Label>\n                <Select\n                  value={formData.category || 'services'}\n                  onChange={(value: string) => updateFormData('category', value)}\n                >\n                  <SelectTrigger>\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"equipment\">Equipment & Tools</SelectItem>\n                    <SelectItem value=\"services\">Professional Services</SelectItem>\n                    <SelectItem value=\"talent\">Talent & Staffing</SelectItem>\n                    <SelectItem value=\"locations\">Locations & Venues</SelectItem>\n                    <SelectItem value=\"materials\">Materials & Supplies</SelectItem>\n                    <SelectItem value=\"other\">Other</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n\n            <div>\n              <Label htmlFor=\"subcategory\">Subcategory</Label>\n              <Input\n                id=\"subcategory\"\n                value={formData.subcategory || ''}\n                onChange={(e: React.ChangeEvent<HTMLInputElement>) => updateFormData('subcategory', e.target.value)}\n                placeholder=\"Optional subcategory\"\n              />\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Pricing */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Pricing</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-md\">\n            <div className=\"grid grid-cols-2 gap-md\">\n              <div>\n                <Label htmlFor=\"amount\">Amount</Label>\n                <Input\n                  id=\"amount\"\n                  type=\"number\"\n                  step=\"0.01\"\n                  value={formData.pricing?.amount || ''}\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => updateNestedFormData('pricing', 'amount', parseFloat(e.target.value) || undefined)}\n                  placeholder=\"0.00\"\n                />\n              </div>\n\n              <div>\n                <Label htmlFor=\"currency\">Currency</Label>\n                <Select\n                  value={formData.pricing?.currency || 'USD'}\n                  onChange={(value: string) => updateNestedFormData('pricing', 'currency', value)}\n                >\n                  <SelectTrigger>\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"USD\">USD ($)</SelectItem>\n                    <SelectItem value=\"EUR\">EUR (€)</SelectItem>\n                    <SelectItem value=\"GBP\">GBP (£)</SelectItem>\n                    <SelectItem value=\"CAD\">CAD (C$)</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n\n            <div className=\"flex items-center space-x-xs\">\n              <input\n                type=\"checkbox\"\n                id=\"negotiable\"\n                checked={formData.pricing?.negotiable || false}\n                onChange={(e: React.ChangeEvent<HTMLInputElement>) => updateNestedFormData('pricing', 'negotiable', e.target.checked)}\n                className=\"rounded\"\n              />\n              <Label htmlFor=\"negotiable\">Price is negotiable</Label>\n            </div>\n\n            <div>\n              <Label htmlFor=\"paymentTerms\">Payment Terms</Label>\n              <Input\n                id=\"paymentTerms\"\n                value={formData.pricing?.paymentTerms || ''}\n                onChange={(e: React.ChangeEvent<HTMLInputElement>) => updateNestedFormData('pricing', 'paymentTerms', e.target.value)}\n                placeholder=\"e.g., 50% upfront, Net 30\"\n              />\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Location */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Location</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-md\">\n            <div className=\"grid grid-cols-2 gap-md\">\n              <div>\n                <Label htmlFor=\"city\">City</Label>\n                <Input\n                  id=\"city\"\n                  value={formData.location?.city || ''}\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => updateNestedFormData('location', 'city', e.target.value)}\n                  placeholder=\"City\"\n                />\n              </div>\n\n              <div>\n                <Label htmlFor=\"country\">Country</Label>\n                <Input\n                  id=\"country\"\n                  value={formData.location?.country || ''}\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => updateNestedFormData('location', 'country', e.target.value)}\n                  placeholder=\"Country\"\n                />\n              </div>\n            </div>\n\n            <div className=\"flex items-center space-x-xs\">\n              <input\n                type=\"checkbox\"\n                id=\"remote\"\n                checked={formData.location?.isRemote || false}\n                onChange={(e: React.ChangeEvent<HTMLInputElement>) => updateNestedFormData('location', 'isRemote', e.target.checked)}\n                className=\"rounded\"\n              />\n              <Label htmlFor=\"remote\">Remote work available</Label>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Availability */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Availability</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-md\">\n            <div className=\"grid grid-cols-2 gap-md\">\n              <div>\n                <Label htmlFor=\"startDate\">Available From</Label>\n                <Input\n                  id=\"startDate\"\n                  type=\"date\"\n                  value={formData.availability?.startDate ? new Date(formData.availability.startDate).toISOString().split('T')[0] : ''}\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => updateNestedFormData('availability', 'startDate', e.target.value ? new Date(e.target.value).toISOString() : undefined)}\n                />\n              </div>\n\n              <div>\n                <Label htmlFor=\"endDate\">Available Until</Label>\n                <Input\n                  id=\"endDate\"\n                  type=\"date\"\n                  value={formData.availability?.endDate ? new Date(formData.availability.endDate).toISOString().split('T')[0] : ''}\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => updateNestedFormData('availability', 'endDate', e.target.value ? new Date(e.target.value).toISOString() : undefined)}\n                />\n              </div>\n            </div>\n\n            <div className=\"flex items-center space-x-xs\">\n              <input\n                type=\"checkbox\"\n                id=\"flexible\"\n                checked={formData.availability?.flexible || false}\n                onChange={(e: React.ChangeEvent<HTMLInputElement>) => updateNestedFormData('availability', 'flexible', e.target.checked)}\n                className=\"rounded\"\n              />\n              <Label htmlFor=\"flexible\">Dates are flexible</Label>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Requirements & Tags */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Additional Details</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-md\">\n            <div>\n              <Label>Requirements</Label>\n              <Textarea\n                value={formData.requirements?.join('\\n') || ''}\n                onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) => updateFormData('requirements', e.target.value.split('\\n').filter(req => req.trim()))}\n                placeholder=\"List requirements, one per line\"\n                rows={3}\n              />\n            </div>\n\n            <div>\n              <Label>Tags</Label>\n              <Input\n                value={formData.tags?.join(', ') || ''}\n                onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) => updateFormData('tags', e.target.value.split(',').map(tag => tag.trim()).filter(tag => tag))}\n                placeholder=\"photography, event, professional\"\n              />\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Contact Information */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Contact Preferences</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-md\">\n            <div className=\"grid grid-cols-2 gap-md\">\n              <div>\n                <Label htmlFor=\"contactEmail\">Contact Email</Label>\n                <Input\n                  id=\"contactEmail\"\n                  type=\"email\"\n                  value={formData.contactInfo?.email || ''}\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => updateNestedFormData('contactInfo', 'email', e.target.value)}\n                  placeholder=\"your.email@example.com\"\n                />\n              </div>\n\n              <div>\n                <Label htmlFor=\"contactPhone\">Contact Phone</Label>\n                <Input\n                  id=\"contactPhone\"\n                  value={formData.contactInfo?.phone || ''}\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => updateNestedFormData('contactInfo', 'phone', e.target.value)}\n                  placeholder=\"+1 (555) 123-4567\"\n                />\n              </div>\n            </div>\n\n            <div>\n              <Label htmlFor=\"preferredContactMethod\">Preferred Contact Method</Label>\n              <Select\n                value={formData.contactInfo?.preferredMethod || 'platform'}\n                onChange={(value: string) => updateNestedFormData('contactInfo', 'preferredMethod', value)}\n              >\n                <SelectTrigger>\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"platform\">Platform messaging</SelectItem>\n                  <SelectItem value=\"email\">Direct email</SelectItem>\n                  <SelectItem value=\"phone\">Phone call</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Settings */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Publishing Settings</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-md\">\n            <div className=\"grid grid-cols-2 gap-md\">\n              <div>\n                <Label htmlFor=\"status\">Status</Label>\n                <Select\n                  value={formData.status || 'draft'}\n                  onChange={(value: string) => updateFormData('status', value)}\n                >\n                  <SelectTrigger>\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"draft\">Draft</SelectItem>\n                    <SelectItem value=\"active\">Active</SelectItem>\n                    <SelectItem value=\"archived\">Archived</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div className=\"flex items-center space-x-xs pt-8\">\n                <input\n                  type=\"checkbox\"\n                  id=\"featured\"\n                  checked={formData.featured || false}\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => updateFormData('featured', e.target.checked)}\n                  className=\"rounded\"\n                />\n                <Label htmlFor=\"featured\">Mark as featured listing</Label>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Form Actions */}\n        <div className=\"flex gap-sm\">\n          <Button\n            type=\"submit\"\n            disabled={isSubmitting}\n            className=\"flex-1\"\n          >\n            <Save className=\"h-icon-xs w-icon-xs mr-2\" />\n            {isSubmitting ? 'Updating...' : 'Update Listing'}\n          </Button>\n          <Button\n            type=\"button\"\n            variant=\"outline\"\n            onClick={() => router.back()}\n            disabled={isSubmitting}\n          >\n            Cancel\n          </Button>\n        </div>\n      </form>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/marketplace/[id]/edit/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/marketplace/[id]/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/marketplace/contracts/ContractsClient.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/marketplace/contracts/lib/contracts-service.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/marketplace/contracts/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/marketplace/contracts/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/marketplace/create/MarketplaceCreateClient.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/marketplace/create/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/marketplace/drawers/BulkDrawer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/marketplace/drawers/CreateDrawer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/marketplace/drawers/CreateListingClient.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/marketplace/drawers/CreateListingDrawer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/marketplace/drawers/CreateProjectClient.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/marketplace/drawers/CreateVendorClient.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/marketplace/drawers/DetailDrawer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/marketplace/drawers/EditDrawer.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'setFormData'. Either include it or remove the dependency array.","line":106,"column":6,"nodeType":"ArrayExpression","endLine":106,"endColumn":15,"suggestions":[{"desc":"Update the dependencies array to be: [listing, setFormData]","fix":{"range":[2168,2177],"text":"[listing, setFormData]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport {\n  Button,\n  Drawer,\n  DrawerContent,\n  DrawerDescription,\n  DrawerHeader,\n  DrawerTitle,\n  Input,\n  Label,\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n  Separator,\n  Textarea\n} from \"@ghxstship/ui\";\nimport { Button ,\n  Drawer,\n  DrawerContent,\n  DrawerHeader,\n  DrawerTitle,\n  DrawerDescription,\n  DrawerFooter\n} from '@ghxstship/ui';\nimport { Input ,\n  Drawer,\n  DrawerContent,\n  DrawerHeader,\n  DrawerTitle,\n  DrawerDescription,\n  DrawerFooter\n} from '@ghxstship/ui';\nimport { Label ,\n  Drawer,\n  DrawerContent,\n  DrawerHeader,\n  DrawerTitle,\n  DrawerDescription,\n  DrawerFooter\n} from '@ghxstship/ui';\nimport { Textarea ,\n  Drawer,\n  DrawerContent,\n  DrawerHeader,\n  DrawerTitle,\n  DrawerDescription,\n  DrawerFooter\n} from '@ghxstship/ui';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue ,\n  Drawer,\n  DrawerContent,\n  DrawerHeader,\n  DrawerTitle,\n  DrawerDescription,\n  DrawerFooter\n} from '@ghxstship/ui';\nimport { Badge ,\n  Drawer,\n  DrawerContent,\n  DrawerHeader,\n  DrawerTitle,\n  DrawerDescription,\n  DrawerFooter\n} from '@ghxstship/ui';\nimport { Separator ,\n  Drawer,\n  DrawerContent,\n  DrawerHeader,\n  DrawerTitle,\n  DrawerDescription,\n  DrawerFooter\n} from '@ghxstship/ui';\nimport { AlertCircle, Edit, Save, Settings, X } from \"lucide-react\";\nimport { marketplaceService } from '../lib/marketplace-service';\nimport type { MarketplaceListing } from '../types';\n\ninterface EditDrawerProps {\n  orgId: string;\n  listing: MarketplaceListing | null;\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  onSave?: (listing: MarketplaceListing) => void;\n}\n\nexport default function EditDrawer({\n  orgId,\n  listing,\n  open,\n  onOpenChange,\n  onSave\n}: EditDrawerProps) {\n  const [formData, setFormData] = useState<Partial<MarketplaceListing>({});\n  const [isSaving, setIsSaving] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n\n  // Initialize form data when listing changes\n  useEffect(() => {\n    if (listing) {\n      setFormData({ ...listing });\n      setError(null);\n    } else {\n      setFormData({});\n    }\n  }, [listing]);\n\n  const updateFormData = (field: string, value: unknown) => {\n    setFormData(prev => ({ ...prev, [field]: value }));\n    setError(null);\n  };\n\n  const updateNestedFormData = (parent: string, field: string, value: unknown) => {\n    setFormData(prev => ({\n      ...prev,\n      [parent]: {\n        ...prev[parent],\n        [field]: value\n      }\n    }));\n    setError(null);\n  };\n\n  const handleSave = async () => {\n    if (!listing) return;\n\n    setIsSaving(true);\n    setError(null);\n\n    try {\n      const updatedListing = await marketplaceService.updateListing(orgId, '', listing.id, formData);\n      onSave?.(updatedListing);\n      onOpenChange(false);\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'Failed to update listing');\n    } finally {\n      setIsSaving(false);\n    }\n  };\n\n  const handleCancel = () => {\n    setFormData(listing ? { ...listing } : {});\n    setError(null);\n    onOpenChange(false);\n  };\n\n  if (!listing) {\n    return null;\n  }\n\n  return (\n    <Drawer open={open} onOpenChange={onOpenChange}>\n      <DrawerContent className=\"max-h-[90vh]\">\n        <DrawerHeader>\n          <DrawerTitle className=\"flex items-center gap-xs\">\n            <Edit className=\"h-icon-sm w-icon-sm\" />\n            Edit Listing\n          </DrawerTitle>\n          <DrawerDescription>\n            Make changes to your marketplace listing\n          </DrawerDescription>\n        </DrawerHeader>\n\n        <div className=\"flex-1 overflow-y-auto p-lg\">\n          <div className=\"space-y-lg\">\n            {/* Error Display */}\n            {error && (\n              <div className=\"flex items-center gap-sm p-md bg-destructive/10 border border-destructive/20 rounded-lg\">\n                <AlertCircle className=\"h-icon-sm w-icon-sm text-destructive flex-shrink-0\" />\n                <p className=\"text-sm text-destructive\">{error}</p>\n              </div>\n            )}\n\n            {/* Basic Information */}\n            <div className=\"space-y-md\">\n              <h3 className=\"text-lg font-semibold\">Basic Information</h3>\n\n              <div>\n                <Label htmlFor=\"title\">Title *</Label>\n                <Input\n                  id=\"title\"\n                  value={formData.title || ''}\n                  onChange={(e) => updateFormData('title', e.target.value)}\n                  placeholder=\"Enter listing title\"\n                />\n              </div>\n\n              <div>\n                <Label htmlFor=\"description\">Description *</Label>\n                <Textarea\n                  id=\"description\"\n                  value={formData.description || ''}\n                  onChange={(e) => updateFormData('description', e.target.value)}\n                  placeholder=\"Describe your listing in detail\"\n                  rows={4}\n                />\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-md\">\n                <div>\n                  <Label htmlFor=\"type\">Type *</Label>\n                  <Select\n                    value={formData.type || 'offer'}\n                    onChange={(e) => updateFormData('type', value)}\n                  >\n                    <SelectTrigger>\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"offer\">Offer</SelectItem>\n                      <SelectItem value=\"request\">Request</SelectItem>\n                      <SelectItem value=\"exchange\">Exchange</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div>\n                  <Label htmlFor=\"category\">Category *</Label>\n                  <Select\n                    value={formData.category || 'services'}\n                    onChange={(e) => updateFormData('category', value)}\n                  >\n                    <SelectTrigger>\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"equipment\">Equipment</SelectItem>\n                      <SelectItem value=\"services\">Services</SelectItem>\n                      <SelectItem value=\"talent\">Talent</SelectItem>\n                      <SelectItem value=\"locations\">Locations</SelectItem>\n                      <SelectItem value=\"materials\">Materials</SelectItem>\n                      <SelectItem value=\"other\">Other</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n\n              <div>\n                <Label htmlFor=\"subcategory\">Subcategory</Label>\n                <Input\n                  id=\"subcategory\"\n                  value={formData.subcategory || ''}\n                  onChange={(e) => updateFormData('subcategory', e.target.value)}\n                  placeholder=\"Optional subcategory\"\n                />\n              </div>\n            </div>\n\n            <Separator />\n\n            {/* Pricing */}\n            <div className=\"space-y-md\">\n              <h3 className=\"text-lg font-semibold\">Pricing</h3>\n\n              <div className=\"grid grid-cols-2 gap-md\">\n                <div>\n                  <Label htmlFor=\"amount\">Amount</Label>\n                  <Input\n                    id=\"amount\"\n                    type=\"number\"\n                    step=\"0.01\"\n                    value={formData.pricing?.amount || ''}\n                    onChange={(e) => updateNestedFormData('pricing', 'amount', parseFloat(e.target.value) || undefined)}\n                    placeholder=\"0.00\"\n                  />\n                </div>\n\n                <div>\n                  <Label htmlFor=\"currency\">Currency</Label>\n                  <Select\n                    value={formData.pricing?.currency || 'USD'}\n                    onChange={(e) => updateNestedFormData('pricing', 'currency', value)}\n                  >\n                    <SelectTrigger>\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"USD\">USD</SelectItem>\n                      <SelectItem value=\"EUR\">EUR</SelectItem>\n                      <SelectItem value=\"GBP\">GBP</SelectItem>\n                      <SelectItem value=\"CAD\">CAD</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n\n              <div className=\"flex items-center space-x-xs\">\n                <input\n                  type=\"checkbox\"\n                  id=\"negotiable\"\n                  checked={formData.pricing?.negotiable || false}\n                  onChange={(e) => updateNestedFormData('pricing', 'negotiable', e.target.checked)}\n                  className=\"rounded\"\n                />\n                <Label htmlFor=\"negotiable\">Negotiable price</Label>\n              </div>\n\n              <div>\n                <Label htmlFor=\"paymentTerms\">Payment Terms</Label>\n                <Input\n                  id=\"paymentTerms\"\n                  value={formData.pricing?.paymentTerms || ''}\n                  onChange={(e) => updateNestedFormData('pricing', 'paymentTerms', e.target.value)}\n                  placeholder=\"e.g., Net 30, 50% upfront\"\n                />\n              </div>\n            </div>\n\n            <Separator />\n\n            {/* Location */}\n            <div className=\"space-y-md\">\n              <h3 className=\"text-lg font-semibold\">Location</h3>\n\n              <div className=\"grid grid-cols-2 gap-md\">\n                <div>\n                  <Label htmlFor=\"city\">City</Label>\n                  <Input\n                    id=\"city\"\n                    value={formData.location?.city || ''}\n                    onChange={(e) => updateNestedFormData('location', 'city', e.target.value)}\n                    placeholder=\"City\"\n                  />\n                </div>\n\n                <div>\n                  <Label htmlFor=\"country\">Country</Label>\n                  <Input\n                    id=\"country\"\n                    value={formData.location?.country || ''}\n                    onChange={(e) => updateNestedFormData('location', 'country', e.target.value)}\n                    placeholder=\"Country\"\n                  />\n                </div>\n              </div>\n\n              <div className=\"flex items-center space-x-xs\">\n                <input\n                  type=\"checkbox\"\n                  id=\"remote\"\n                  checked={formData.location?.isRemote || false}\n                  onChange={(e) => updateNestedFormData('location', 'isRemote', e.target.checked)}\n                  className=\"rounded\"\n                />\n                <Label htmlFor=\"remote\">Remote work available</Label>\n              </div>\n            </div>\n\n            <Separator />\n\n            {/* Availability */}\n            <div className=\"space-y-md\">\n              <h3 className=\"text-lg font-semibold\">Availability</h3>\n\n              <div className=\"grid grid-cols-2 gap-md\">\n                <div>\n                  <Label htmlFor=\"startDate\">Start Date</Label>\n                  <Input\n                    id=\"startDate\"\n                    type=\"date\"\n                    value={formData.availability?.startDate ? new Date(formData.availability.startDate).toISOString().split('T')[0] : ''}\n                    onChange={(e) => updateNestedFormData('availability', 'startDate', e.target.value ? new Date(e.target.value).toISOString() : undefined)}\n                  />\n                </div>\n\n                <div>\n                  <Label htmlFor=\"endDate\">End Date</Label>\n                  <Input\n                    id=\"endDate\"\n                    type=\"date\"\n                    value={formData.availability?.endDate ? new Date(formData.availability.endDate).toISOString().split('T')[0] : ''}\n                    onChange={(e) => updateNestedFormData('availability', 'endDate', e.target.value ? new Date(e.target.value).toISOString() : undefined)}\n                  />\n                </div>\n              </div>\n\n              <div className=\"flex items-center space-x-xs\">\n                <input\n                  type=\"checkbox\"\n                  id=\"flexible\"\n                  checked={formData.availability?.flexible || false}\n                  onChange={(e) => updateNestedFormData('availability', 'flexible', e.target.checked)}\n                  className=\"rounded\"\n                />\n                <Label htmlFor=\"flexible\">Flexible dates</Label>\n              </div>\n            </div>\n\n            <Separator />\n\n            {/* Requirements & Tags */}\n            <div className=\"space-y-md\">\n              <h3 className=\"text-lg font-semibold\">Additional Information</h3>\n\n              <div>\n                <Label>Requirements</Label>\n                <Textarea\n                  value={formData.requirements?.join('\\n') || ''}\n                  onChange={(e) => updateFormData('requirements', e.target.value.split('\\n').filter(req => req.trim()))}\n                  placeholder=\"Enter each requirement on a new line\"\n                  rows={3}\n                />\n                <p className=\"text-xs text-muted-foreground mt-1\">\n                  Enter each requirement on a separate line\n                </p>\n              </div>\n\n              <div>\n                <Label>Tags</Label>\n                <Input\n                  value={formData.tags?.join(', ') || ''}\n                  onChange={(e) => updateFormData('tags', e.target.value.split(',').map(tag => tag.trim()).filter(tag => tag))}\n                  placeholder=\"Enter tags separated by commas\"\n                />\n                <p className=\"text-xs text-muted-foreground mt-1\">\n                  Separate tags with commas\n                </p>\n              </div>\n            </div>\n\n            <Separator />\n\n            {/* Settings */}\n            <div className=\"space-y-md\">\n              <h3 className=\"text-lg font-semibold\">Settings</h3>\n\n              <div className=\"grid grid-cols-2 gap-md\">\n                <div>\n                  <Label htmlFor=\"status\">Status</Label>\n                  <Select\n                    value={formData.status || 'draft'}\n                    onChange={(e) => updateFormData('status', value)}\n                  >\n                    <SelectTrigger>\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"draft\">Draft</SelectItem>\n                      <SelectItem value=\"active\">Active</SelectItem>\n                      <SelectItem value=\"archived\">Archived</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div className=\"flex items-center space-x-xs pt-8\">\n                  <input\n                    type=\"checkbox\"\n                    id=\"featured\"\n                    checked={formData.featured || false}\n                    onChange={(e) => updateFormData('featured', e.target.checked)}\n                    className=\"rounded\"\n                  />\n                  <Label htmlFor=\"featured\">Featured listing</Label>\n                </div>\n              </div>\n            </div>\n\n            <Separator />\n\n            {/* Contact Information */}\n            <div className=\"space-y-md\">\n              <h3 className=\"text-lg font-semibold\">Contact Information</h3>\n\n              <div className=\"grid grid-cols-2 gap-md\">\n                <div>\n                  <Label htmlFor=\"contactEmail\">Email</Label>\n                  <Input\n                    id=\"contactEmail\"\n                    type=\"email\"\n                    value={formData.contactInfo?.email || ''}\n                    onChange={(e) => updateNestedFormData('contactInfo', 'email', e.target.value)}\n                    placeholder=\"contact@example.com\"\n                  />\n                </div>\n\n                <div>\n                  <Label htmlFor=\"contactPhone\">Phone</Label>\n                  <Input\n                    id=\"contactPhone\"\n                    value={formData.contactInfo?.phone || ''}\n                    onChange={(e) => updateNestedFormData('contactInfo', 'phone', e.target.value)}\n                    placeholder=\"+1 (555) 123-4567\"\n                  />\n                </div>\n              </div>\n\n              <div>\n                <Label htmlFor=\"preferredContact\">Preferred Contact Method</Label>\n                <Select\n                  value={formData.contactInfo?.preferredMethod || 'platform'}\n                  onChange={(e) => updateNestedFormData('contactInfo', 'preferredMethod', value)}\n                >\n                  <SelectTrigger>\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"email\">Email</SelectItem>\n                    <SelectItem value=\"phone\">Phone</SelectItem>\n                    <SelectItem value=\"platform\">Platform messaging</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Footer Actions */}\n        <div className=\"border-t p-lg\">\n          <div className=\"flex gap-sm\">\n            <Button\n              onClick={handleSave}\n              disabled={isSaving}\n              className=\"flex-1\"\n            >\n              <Save className=\"h-icon-xs w-icon-xs mr-2\" />\n              {isSaving ? 'Saving...' : 'Save Changes'}\n            </Button>\n            <Button\n              variant=\"outline\"\n              onClick={handleCancel}\n              disabled={isSaving}\n            >\n              <X className=\"h-icon-xs w-icon-xs mr-2\" />\n              Cancel\n            </Button>\n          </div>\n        </div>\n      </DrawerContent>\n    </Drawer>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/marketplace/drawers/EditListingDrawer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/marketplace/drawers/ExportDrawer.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook React.useEffect has missing dependencies: 'availableFields' and 'loadMetadata'. Either include them or remove the dependency array.","line":155,"column":6,"nodeType":"ArrayExpression","endLine":155,"endColumn":21,"suggestions":[{"desc":"Update the dependencies array to be: [open, filters, loadMetadata, availableFields]","fix":{"range":[3972,3987],"text":"[open, filters, loadMetadata, availableFields]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport {\n  Badge,\n  Button,\n  Checkbox,\n  Drawer,\n  DrawerContent,\n  DrawerDescription,\n  DrawerHeader,\n  DrawerTitle,\n  Label,\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n  Separator\n} from \"@ghxstship/ui\";\nimport { Button ,\n  Drawer,\n  DrawerContent,\n  DrawerHeader,\n  DrawerTitle,\n  DrawerDescription,\n  DrawerFooter\n} from '@ghxstship/ui';\nimport { Label ,\n  Drawer,\n  DrawerContent,\n  DrawerHeader,\n  DrawerTitle,\n  DrawerDescription,\n  DrawerFooter\n} from '@ghxstship/ui';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue ,\n  Drawer,\n  DrawerContent,\n  DrawerHeader,\n  DrawerTitle,\n  DrawerDescription,\n  DrawerFooter\n} from '@ghxstship/ui';\nimport { Checkbox ,\n  Drawer,\n  DrawerContent,\n  DrawerHeader,\n  DrawerTitle,\n  DrawerDescription,\n  DrawerFooter\n} from '@ghxstship/ui';\nimport { Separator ,\n  Drawer,\n  DrawerContent,\n  DrawerHeader,\n  DrawerTitle,\n  DrawerDescription,\n  DrawerFooter\n} from '@ghxstship/ui';\nimport { Badge ,\n  Drawer,\n  DrawerContent,\n  DrawerHeader,\n  DrawerTitle,\n  DrawerDescription,\n  DrawerFooter\n} from '@ghxstship/ui';\nimport {\n  Download,\n  FileText,\n  CheckCircle,\n  AlertCircle,\n  Loader2,\n  Info\n} from 'lucide-react';\nimport { marketplaceService } from '../lib/marketplace-service';\nimport type { ListingFilters } from '../types';\n\ninterface ExportDrawerProps {\n  orgId: string;\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  onExportComplete?: (results: unknown) => void;\n}\n\nexport default function ExportDrawer({\n  orgId,\n  open,\n  onOpenChange,\n  onExportComplete\n}: ExportDrawerProps) {\n  const [format, setFormat] = useState<'csv' | 'json' | 'excel' | 'pdf'>('csv');\n  const [selectedFields, setSelectedFields] = useState<string[]>([]);\n  const [includeMetadata, setIncludeMetadata] = useState(true);\n  const [filters, setFilters] = useState<Partial<ListingFilters>({});\n  const [isExporting, setIsExporting] = useState(false);\n  const [results, setResults] = useState<(null);\n  const [metadata, setMetadata] = useState<(null);\n\n  // Available fields for export\n  const availableFields = [\n    { key: 'title', label: 'Title', required: true },\n    { key: 'description', label: 'Description' },\n    { key: 'type', label: 'Type' },\n    { key: 'category', label: 'Category' },\n    { key: 'subcategory', label: 'Subcategory' },\n    { key: 'status', label: 'Status' },\n    { key: 'pricing.amount', label: 'Price Amount' },\n    { key: 'pricing.currency', label: 'Currency' },\n    { key: 'pricing.negotiable', label: 'Negotiable' },\n    { key: 'location.city', label: 'City' },\n    { key: 'location.country', label: 'Country' },\n    { key: 'location.isRemote', label: 'Remote' },\n    { key: 'featured', label: 'Featured' },\n    { key: 'response_count', label: 'Responses' },\n    { key: 'view_count', label: 'Views' },\n    { key: 'created_at', label: 'Created Date' },\n    { key: 'updated_at', label: 'Updated Date' },\n  ];\n\n  const handleFieldToggle = (fieldKey: string) => {\n    setSelectedFields(prev =>\n      prev.includes(fieldKey)\n        ? prev.filter(f => f !== fieldKey)\n        : [...prev, fieldKey]\n    );\n  };\n\n  const handleSelectAllFields = () => {\n    setSelectedFields(availableFields.map(f => f.key));\n  };\n\n  const handleSelectTemplate = (templateKey: string) => {\n    const templates = marketplaceService.getExportTemplates();\n    const template = templates[templateKey as keyof typeof templates];\n    if (template) {\n      setSelectedFields(template.fields);\n    }\n  };\n\n  const loadMetadata = async () => {\n    try {\n      const meta = await marketplaceService.getExportMetadata(orgId, filters);\n      setMetadata(meta);\n    } catch (error) {\n      console.error('Failed to load export metadata:', error);\n    }\n  };\n\n  React.useEffect(() => {\n    if (open) {\n      loadMetadata();\n      // Set default fields\n      setSelectedFields(availableFields.filter(f => f.required).map(f => f.key));\n    }\n  }, [open, filters]);\n\n  const handleExport = async () => {\n    setIsExporting(true);\n    setResults(null);\n\n    try {\n      const exportResults = await marketplaceService.exportListingsBulk(\n        orgId,\n        '',\n        format,\n        filters,\n        selectedFields\n      );\n\n      setResults({\n        success: true,\n        format,\n        recordCount: metadata?.totalRecords || 0,\n        fileSize: exportResults.length,\n        downloadUrl: `data:text/plain;charset=utf-8,${encodeURIComponent(exportResults)}`\n      });\n\n      onExportComplete?.(exportResults);\n    } catch (error) {\n      setResults({\n        success: false,\n        error: error instanceof Error ? error.message : 'Export failed'\n      });\n    } finally {\n      setIsExporting(false);\n    }\n  };\n\n  const handleDownload = () => {\n    if (results?.downloadUrl) {\n      const link = document.createElement('a');\n      link.href = results.downloadUrl;\n      link.download = `marketplace-listings-${new Date().toISOString().split('T')[0]}.${format}`;\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n    }\n  };\n\n  const resetForm = () => {\n    setFormat('csv');\n    setSelectedFields([]);\n    setIncludeMetadata(true);\n    setFilters({});\n    setResults(null);\n    setMetadata(null);\n  };\n\n  const handleClose = () => {\n    resetForm();\n    onOpenChange(false);\n  };\n\n  return (\n    <Drawer open={open} onOpenChange={handleClose}>\n      <DrawerContent className=\"max-h-[90vh]\">\n        <DrawerHeader>\n          <DrawerTitle className=\"flex items-center gap-xs\">\n            <Download className=\"h-icon-sm w-icon-sm\" />\n            Export Listings\n          </DrawerTitle>\n          <DrawerDescription>\n            Export marketplace listings to various formats\n          </DrawerDescription>\n        </DrawerHeader>\n\n        <div className=\"flex-1 overflow-y-auto p-lg\">\n          <div className=\"space-y-lg\">\n            {/* Export Summary */}\n            {metadata && (\n              <div className=\"bg-muted/50 rounded-lg p-md\">\n                <div className=\"flex items-center gap-xs mb-2\">\n                  <Info className=\"h-icon-xs w-icon-xs\" />\n                  <span className=\"font-medium\">Export Summary</span>\n                </div>\n                <div className=\"grid grid-cols-3 gap-md text-sm\">\n                  <div>\n                    <div className=\"text-2xl font-bold\">{metadata.totalRecords}</div>\n                    <div className=\"text-muted-foreground\">Total Records</div>\n                  </div>\n                  <div>\n                    <div className=\"text-lg\">{metadata.estimatedFileSize}</div>\n                    <div className=\"text-muted-foreground\">Estimated Size</div>\n                  </div>\n                  <div>\n                    <div className=\"text-lg\">{metadata.fieldCount}</div>\n                    <div className=\"text-muted-foreground\">Available Fields</div>\n                  </div>\n                </div>\n              </div>\n            )}\n\n            {/* Format Selection */}\n            <div className=\"space-y-md\">\n              <div>\n                <Label htmlFor=\"format\">Export Format</Label>\n                <Select value={format} onChange={(value: 'csv' | 'json' | 'excel' | 'pdf') => setFormat(value)}>\n                  <SelectTrigger>\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"csv\">CSV (Comma Separated Values)</SelectItem>\n                    <SelectItem value=\"json\">JSON (JavaScript Object Notation)</SelectItem>\n                    <SelectItem value=\"excel\">Excel (XLSX)</SelectItem>\n                    <SelectItem value=\"pdf\">PDF (Portable Document Format)</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n\n            <Separator />\n\n            {/* Export Templates */}\n            <div className=\"space-y-md\">\n              <div className=\"flex items-center justify-between\">\n                <h3 className=\"text-lg font-semibold\">Quick Templates</h3>\n                <Button variant=\"outline\" size=\"sm\" onClick={handleSelectAllFields}>\n                  Select All Fields\n                </Button>\n              </div>\n\n              <div className=\"grid grid-cols-1 gap-sm\">\n                {Object.entries(marketplaceService.getExportTemplates()).map(([key, template]) => (\n                  <button\n                    key={key}\n                    onClick={() => handleSelectTemplate(key)}\n                    className=\"text-left border rounded-lg p-md hover:bg-muted/50 transition-colors\"\n                  >\n                    <div className=\"flex items-center justify-between mb-2\">\n                      <h4 className=\"font-medium\">{template.name}</h4>\n                      <Badge variant=\"secondary\" className=\"text-xs\">\n                        {template.fields.length} fields\n                      </Badge>\n                    </div>\n                    <p className=\"text-sm text-muted-foreground\">{template.description}</p>\n                  </button>\n                ))}\n              </div>\n            </div>\n\n            <Separator />\n\n            {/* Field Selection */}\n            <div className=\"space-y-md\">\n              <h3 className=\"text-lg font-semibold\">Select Fields</h3>\n\n              <div className=\"grid grid-cols-1 gap-xs max-h-60 overflow-y-auto\">\n                {availableFields.map((field) => (\n                  <div key={field.key} className=\"flex items-center space-x-xs\">\n                    <Checkbox\n                      id={field.key}\n                      checked={selectedFields.includes(field.key)}\n                      onCheckedChange={() => handleFieldToggle(field.key)}\n                      disabled={field.required}\n                    />\n                    <Label htmlFor={field.key} className=\"text-sm flex-1\">\n                      {field.label}\n                      {field.required && <span className=\"text-red-500 ml-1\">*</span>}\n                    </Label>\n                  </div>\n                ))}\n              </div>\n\n              <div className=\"flex items-center space-x-xs pt-2\">\n                <Checkbox\n                  id=\"include-metadata\"\n                  checked={includeMetadata}\n                  onCheckedChange={(checked) => setIncludeMetadata(!!checked)}\n                />\n                <Label htmlFor=\"include-metadata\" className=\"text-sm\">\n                  Include export metadata and timestamp\n                </Label>\n              </div>\n            </div>\n\n            {/* Results */}\n            {results && (\n              <>\n                <Separator />\n                <div className=\"space-y-md\">\n                  <h3 className=\"text-lg font-semibold\">Export Results</h3>\n\n                  {results.success ? (\n                    <div className=\"space-y-md\">\n                      <div className=\"flex items-center gap-sm p-md bg-green-50 border border-green-200 rounded-lg\">\n                        <CheckCircle className=\"h-icon-sm w-icon-sm text-green-500 flex-shrink-0\" />\n                        <div>\n                          <div className=\"font-medium text-green-900\">Export Successful</div>\n                          <div className=\"text-sm text-green-700\">\n                            {results.recordCount} records exported in {results.format.toUpperCase()} format\n                          </div>\n                        </div>\n                      </div>\n\n                      <div className=\"flex gap-sm\">\n                        <Button onClick={handleDownload} className=\"flex-1\">\n                          <Download className=\"h-icon-xs w-icon-xs mr-2\" />\n                          Download File\n                        </Button>\n                        <Button variant=\"outline\" onClick={() => setResults(null)}>\n                          Export Again\n                        </Button>\n                      </div>\n                    </div>\n                  ) : (\n                    <div className=\"flex items-center gap-sm p-md bg-red-50 border border-red-200 rounded-lg\">\n                      <AlertCircle className=\"h-icon-sm w-icon-sm text-red-500 flex-shrink-0\" />\n                      <div>\n                        <div className=\"font-medium text-red-900\">Export Failed</div>\n                        <div className=\"text-sm text-red-700\">{results.error}</div>\n                      </div>\n                    </div>\n                  )}\n                </div>\n              </>\n            )}\n          </div>\n        </div>\n\n        {/* Footer Actions */}\n        <div className=\"border-t p-lg\">\n          <div className=\"flex gap-sm\">\n            {!results?.success && (\n              <Button\n                onClick={handleExport}\n                disabled={isExporting || selectedFields.length === 0}\n                className=\"flex-1\"\n              >\n                {isExporting ? (\n                  <>\n                    <Loader2 className=\"h-icon-xs w-icon-xs mr-2 animate-spin\" />\n                    Exporting...\n                  </>\n                ) : (\n                  <>\n                    <Download className=\"h-icon-xs w-icon-xs mr-2\" />\n                    Export {metadata?.totalRecords || 0} Listings\n                  </>\n                )}\n              </Button>\n            )}\n            <Button variant=\"outline\" onClick={handleClose}>\n              Close\n            </Button>\n          </div>\n        </div>\n      </DrawerContent>\n    </Drawer>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/marketplace/drawers/HistoryDrawer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/marketplace/drawers/ImportDrawer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/marketplace/drawers/VendorProfileDrawer.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'setComments'. Either include it or remove the dependency array.","line":140,"column":5,"nodeType":"ArrayExpression","endLine":140,"endColumn":38,"suggestions":[{"desc":"Update the dependencies array to be: [open, vendorId, orgId, supabase, setComments]","fix":{"range":[3459,3492],"text":"[open, vendorId, orgId, supabase, setComments]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'setActivity'. Either include it or remove the dependency array.","line":163,"column":5,"nodeType":"ArrayExpression","endLine":163,"endColumn":28,"suggestions":[{"desc":"Update the dependencies array to be: [open, vendorId, orgId, setActivity]","fix":{"range":[3988,4011],"text":"[open, vendorId, orgId, setActivity]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { Edit3, FileText, Activity as ActivityIcon, MessageSquare } from \"lucide-react\";\nimport { useEffect, useState } from 'react';\nimport {\n  AppDrawer,\n  Button\n} from \"@ghxstship/ui\";\nimport { useTranslations } from 'next-intl';\nimport { createBrowserClient } from '@ghxstship/auth';\nimport { tryCatch, reportError } from '@ghxstship/ui/utils/error-handling';\nimport { AppDrawer } from '@ghxstship/ui';\n\ninterface VendorProfileDrawerProps {\n orgId: string;\n vendorId: string | null;\n open: boolean;\n onClose: () => void;\n}\n\nexport function VendorProfileDrawer({ orgId, vendorId, open, onClose }: VendorProfileDrawerProps) {\n const t = useTranslations('marketplace');\n const supabase = createBrowserClient();\n\n const [vendor, setVendor] = useState<any | null>(null);\n const [saving, setSaving] = useState(false);\n const [message, setMessage] = useState<string | null>(null);\n const [form, setForm] = useState({\n name: '',\n website: '',\n contactEmail: '',\n status: 'active'\n });\n\n const [tabState, setTabState] = useState<'details' | 'edit' | 'comments' | 'activity'>('details');\n\n useEffect(() => {\n if (!open || !vendorId) return;\n\n (async () => {\n const responseResult = await tryCatch(async () =>\n fetch('/api/v1/vendors?limit=100', {\n headers: { 'x-org-id': orgId }\n })\n );\n\n if (!responseResult.success) {\n reportError(responseResult.error);\n setVendor(null);\n return;\n }\n\n const response = responseResult.data;\n const payload = await response.json();\n const found = (payload.vendors || []).find((entry: unknown) => entry.id === vendorId) ?? null;\n\n if (found) {\n setVendor(found);\n setForm({\n name: found.display_name ?? found.business_name ?? '',\n website: found.website ?? '',\n contactEmail: found.email ?? '',\n status: found.status ?? 'active'\n });\n } else {\n setVendor(null);\n }\n })();\n }, [open, vendorId, orgId]);\n\n async function handleSave() {\n if (!vendorId) return;\n\n setSaving(true);\n setMessage(null);\n\n try {\n const responseResult = await tryCatch(async () =>\n fetch('/api/v1/vendors', {\n method: 'PUT',\n headers: {\n 'content-type': 'application/json',\n 'x-org-id': orgId\n },\n body: JSON.stringify({\n id: vendorId,\n display_name: form.name,\n website: form.website || null,\n email: form.contactEmail || null,\n status: form.status\n })\n })\n );\n\n if (!responseResult.success) {\n reportError(responseResult.error);\n throw responseResult.error;\n }\n\n const response = responseResult.data;\n if (!response.ok) {\n const payload = await response.json();\n throw new Error(payload?.error ?? 'Update failed');\n }\n\n setMessage(t('vendor.updated'));\n } catch (error) {\n setMessage(error instanceof Error ? error.message : 'Update failed');\n } finally {\n setSaving(false);\n }\n }\n\n const [comments, setComments] = useState<Array<{ id: string; body: string; created_at: string }>([]);\n const [activity, setActivity] = useState<Array<{ action: string; occurred_at: string }>([]);\n const [loadingComments, setLoadingComments] = useState(false);\n const [loadingActivity, setLoadingActivity] = useState(false);\n\n useEffect(() => {\n if (!open || !vendorId) return;\n\n (async () => {\n setLoadingComments(true);\n try {\n const { data } = await supabase\n .from('comments')\n .select('id, body, created_at')\n .eq('organization_id', orgId)\n .eq('entity_type', 'vendor')\n .eq('entity_id', vendorId)\n .order('created_at', { ascending: false })\n .limit(50);\n\n setComments(data ?? []);\n } catch {\n setComments([]);\n }\n setLoadingComments(false);\n })();\n }, [open, vendorId, orgId, supabase]);\n\n useEffect(() => {\n if (!open || !vendorId) return;\n\n (async () => {\n setLoadingActivity(true);\n try {\n const responseResult = await tryCatch(async () => fetch(`/api/audit/${orgId}/vendors/${vendorId}`));\n\n if (!responseResult.success) {\n reportError(responseResult.error);\n throw responseResult.error;\n }\n\n const response = responseResult.data;\n const payload = await response.json();\n setActivity(payload?.data ?? []);\n } catch {\n setActivity([]);\n }\n setLoadingActivity(false);\n })();\n }, [open, vendorId, orgId]);\n\n if (!open) return null;\n\n const tabs = [\n {\n key: 'details',\n label: (\n <span className=\"flex items-center gap-xs\">\n <FileText className=\"h-icon-xs w-icon-xs\" />\n {t('vendor.drawer.details')}\n </span>\n ),\n content: vendor ? (\n <div className=\"stack-sm text-body-sm\">\n {message ? (\n <div role=\"alert\" className=\"mb-sm text-body-sm\">\n {message}\n </div>\n ) : null}\n <div>\n <span className=\"form-label\">{t('vendor.name')}:</span> {vendor.display_name || vendor.business_name}\n </div>\n <div>\n <span className=\"form-label\">{t('vendor.website')}:</span> {vendor.website || '—'}\n </div>\n <div>\n <span className=\"form-label\">{t('vendor.email')}:</span> {vendor.email || '—'}\n </div>\n <div>\n <span className=\"form-label\">{t('vendor.status')}:</span> {vendor.status}\n </div>\n <div>\n <span className=\"form-label\">{t('vendor.primaryCategory')}:</span> {vendor.primary_category || '—'}\n </div>\n </div>\n ) : null\n },\n {\n key: 'edit',\n label: (\n <span className=\"flex items-center gap-xs\">\n <Edit3 className=\"h-icon-xs w-icon-xs\" />\n {t('vendor.drawer.edit')}\n </span>\n ),\n content: vendor ? (\n <form\n className=\"stack-sm\"\n onSubmit={(event) => {\n event.preventDefault();\n void handleSave();\n }}\n >\n <div className=\"grid gap-xs\">\n <label htmlFor=\"vendor-name\" className=\"text-body-sm\">\n {t('vendor.name')}\n </label>\n <input\n \n className=\"rounded border px-md py-xs\"\n value={form.name}\n onChange={(event) => setForm((prev: unknown) => ({ ...prev, name: event.target.value }))}\n />\n </div>\n <div className=\"grid gap-xs\">\n <label htmlFor=\"vendor-website\" className=\"text-body-sm\">\n {t('vendor.website')}\n </label>\n <input\n \n className=\"rounded border px-md py-xs\"\n value={form.website}\n onChange={(event) => setForm((prev: unknown) => ({ ...prev, website: event.target.value }))}\n />\n </div>\n <div className=\"grid gap-xs\">\n <label htmlFor=\"vendor-email\" className=\"text-body-sm\">\n {t('vendor.email')}\n </label>\n <input\n \n className=\"rounded border px-md py-xs\"\n value={form.contactEmail}\n onChange={(event) => setForm((prev: unknown) => ({ ...prev, contactEmail: event.target.value }))}\n />\n </div>\n <div className=\"grid gap-xs\">\n <label htmlFor=\"vendor-status\" className=\"text-body-sm\">\n {t('vendor.status')}\n </label>\n <select\n \n className=\"rounded border px-md py-xs\"\n value={form.status}\n onChange={(event) => setForm((prev: unknown) => ({ ...prev, status: event.target.value }))}\n >\n <option value=\"active\">{t('vendor.statusActive')}</option>\n <option value=\"pending\">{t('vendor.statusPending')}</option>\n <option value=\"inactive\">{t('vendor.statusInactive')}</option>\n </select>\n </div>\n <div className=\"flex items-center justify-end gap-sm pt-sm border-t\">\n <Button variant=\"primary\" disabled={saving} type=\"submit\">\n {t('actions.save')}\n </Button>\n </div>\n </form>\n ) : null\n },\n {\n key: 'comments',\n label: (\n <span className=\"flex items-center gap-xs\">\n <MessageSquare className=\"h-icon-xs w-icon-xs\" />\n {t('vendor.drawer.comments')}\n </span>\n ),\n content: (\n <div className=\"stack-sm text-body-sm\">\n {loadingComments\n ? t('vendor.drawer.loading')\n : comments.length === 0\n ? t('vendor.drawer.emptyComments')\n : (\n <ul className=\"stack-sm\">\n {comments.map((comment) => (\n <li key={comment.id} className=\"rounded border p-sm\">\n <div className=\"whitespace-pre-wrap\">{comment.body}</div>\n <div className=\"text-body-sm opacity-60\">\n {new Date(comment.created_at).toLocaleString()}\n </div>\n </li>\n ))}\n </ul>\n )}\n </div>\n )\n },\n {\n key: 'activity',\n label: (\n <span className=\"flex items-center gap-xs\">\n <ActivityIcon className=\"h-icon-xs w-icon-xs\" />\n {t('vendor.drawer.activity')}\n </span>\n ),\n content: (\n <div className=\"stack-sm text-body-sm\">\n {loadingActivity ? (\n t('vendor.drawer.loading')\n ) : (\n <ul className=\"stack-xs\">\n {activity.map((entry, index) => (\n <li key={`${entry.action}-${index}`} className=\"flex items-center justify-between gap-md\">\n <div className=\"font-mono text-body-sm opacity-70\">\n {new Date(entry.occurred_at).toLocaleString()}\n </div>\n <div className=\"flex-1\">{entry.action}</div>\n </li>\n ))}\n </ul>\n )}\n </div>\n )\n },\n ];\n\n return (\n <AppDrawer\n open={open}\n onClose={onClose}\n record={vendor}\n mode=\"view\"\n title={vendor?.display_name || vendor?.business_name || t('vendor.drawer.title')}\n fields={[]}\n tabs={tabs}\n activeTab={tabState}\n onTabChange={(key) => setTabState(key as typeof tabState)}\n />\n );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/marketplace/field-config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/marketplace/hooks/useMarketplaceOverview.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/marketplace/lib/api.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/marketplace/lib/export.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/marketplace/lib/import.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/marketplace/lib/marketplace-service.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/marketplace/lib/mutations.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/marketplace/lib/permissions.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/marketplace/lib/queries.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/marketplace/lib/realtime.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/marketplace/lib/validations.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/marketplace/listings/ListingsClient.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadListings'. Either include it or remove the dependency array.","line":158,"column":5,"nodeType":"ArrayExpression","endLine":158,"endColumn":21,"suggestions":[{"desc":"Update the dependencies array to be: [orgId, filters, loadListings]","fix":{"range":[3334,3350],"text":"[orgId, filters, loadListings]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { Plus, Search, Filter, Eye, Edit, Trash2, Star, MapPin, Calendar, DollarSign, Package, Users, Briefcase } from \"lucide-react\";\nimport { useState, useEffect } from 'react';\nimport { \n DataGrid,\n ViewSwitcher,\n DataActions,\n DataViewProvider,\n StateManagerProvider,\n Drawer,\n Button,\n Badge,\n Card,\n type DataRecord\n} from '@ghxstship/ui';\nimport { createBrowserClient } from '@ghxstship/auth';\nimport type { MarketplaceListing, ListingFilters } from '../types';\nimport CreateListingClient from '../drawers/CreateListingDrawer';\n\ninterface ListingsClientProps {\n orgId: string;\n userId: string;\n}\n\nconst LISTINGS_FIELD_CONFIGS = [\n {\n key: 'title',\n label: 'Title',\n type: 'text' as const,\n sortable: true,\n filterable: true,\n searchable: true,\n visible: true,\n width: 250\n },\n {\n key: 'type',\n label: 'Type',\n type: 'select' as const,\n options: [\n { label: 'Offer', value: 'offer' },\n { label: 'Request', value: 'request' },\n { label: 'Exchange', value: 'exchange' }\n ],\n sortable: true,\n filterable: true,\n visible: true,\n width: 120\n },\n {\n key: 'category',\n label: 'Category',\n type: 'select' as const,\n options: [\n { label: 'Equipment', value: 'equipment' },\n { label: 'Services', value: 'services' },\n { label: 'Talent', value: 'talent' },\n { label: 'Locations', value: 'locations' },\n { label: 'Materials', value: 'materials' },\n { label: 'Other', value: 'other' }\n ],\n sortable: true,\n filterable: true,\n visible: true,\n width: 140\n },\n {\n key: 'status',\n label: 'Status',\n type: 'select' as const,\n options: [\n { label: 'Draft', value: 'draft' },\n { label: 'Active', value: 'active' },\n { label: 'Archived', value: 'archived' }\n ],\n sortable: true,\n filterable: true,\n visible: true,\n width: 120\n },\n {\n key: 'pricing',\n label: 'Price',\n type: 'currency' as const,\n sortable: true,\n filterable: true,\n visible: true,\n width: 140\n },\n {\n key: 'location',\n label: 'Location',\n type: 'text' as const,\n sortable: true,\n filterable: true,\n searchable: true,\n visible: true,\n width: 160\n },\n {\n key: 'featured',\n label: 'Featured',\n type: 'boolean' as const,\n sortable: true,\n filterable: true,\n visible: true,\n width: 100\n },\n {\n key: 'view_count',\n label: 'Views',\n type: 'number' as const,\n sortable: true,\n filterable: false,\n visible: true,\n width: 100\n },\n {\n key: 'response_count',\n label: 'Responses',\n type: 'number' as const,\n sortable: true,\n filterable: false,\n visible: true,\n width: 120\n },\n {\n key: 'created_at',\n label: 'Created',\n type: 'datetime' as const,\n sortable: true,\n filterable: true,\n visible: true,\n width: 160\n }\n];\n\nexport default function ListingsClient({ orgId, userId }: ListingsClientProps) {\n const [listings, setListings] = useState<MarketplaceListing[]>([]);\n const [loading, setLoading] = useState(true);\n const [selectedView, setSelectedView] = useState<'grid' | 'list' | 'kanban' | 'calendar'>('grid');\n const [drawerOpen, setDrawerOpen] = useState(false);\n const [drawerMode, setDrawerMode] = useState<'create' | 'edit' | 'view'>('create');\n const [selectedListing, setSelectedListing] = useState<MarketplaceListing | null>(null);\n const [filters, setFilters] = useState<ListingFilters>({});\n const [stats, setStats] = useState({\n total: 0,\n active: 0,\n featured: 0,\n responses: 0\n });\n\n const supabase = createBrowserClient();\n\n useEffect(() => {\n loadListings();\n }, [orgId, filters]);\n\n const loadListings = async () => {\n try {\n setLoading(true);\n \n // Build query parameters\n const params = new URLSearchParams();\n if (filters.type) params.append('type', filters.type);\n if (filters.category) params.append('category', filters.category);\n if (filters.location) params.append('location', filters.location);\n if (filters.minPrice) params.append('minPrice', filters.minPrice);\n if (filters.maxPrice) params.append('maxPrice', filters.maxPrice);\n if (filters.search) params.append('search', filters.search);\n if (filters.featured) params.append('featured', 'true');\n if (filters.showMine) params.append('showMine', 'true');\n if (filters.active) params.append('active', 'true');\n\n const response = await fetch(`/api/v1/marketplace/listings?${params.toString()}`);\n const data = await response.json();\n\n if (response.ok) {\n const listingsData = data.listings || [];\n setListings(listingsData);\n \n // Calculate stats\n setStats({\n total: listingsData.length,\n active: listingsData.filter((l: MarketplaceListing) => l.status === 'active').length,\n featured: listingsData.filter((l: MarketplaceListing) => l.featured).length,\n responses: listingsData.reduce((sum: number, l: MarketplaceListing) => sum + (l.response_count || 0), 0)\n });\n } else {\n console.error('Error loading listings:', data.error);\n }\n } catch (error) {\n console.error('Error loading listings:', error);\n } finally {\n setLoading(false);\n }\n };\n\n const handleCreateListing = () => {\n setSelectedListing(null);\n setDrawerMode('create');\n setDrawerOpen(true);\n };\n\n const handleEditListing = (listing: MarketplaceListing) => {\n setSelectedListing(listing);\n setDrawerMode('edit');\n setDrawerOpen(true);\n };\n\n const handleViewListing = (listing: MarketplaceListing) => {\n setSelectedListing(listing);\n setDrawerMode('view');\n setDrawerOpen(true);\n };\n\n const handleDeleteListing = async (listing: MarketplaceListing) => {\n if (!confirm('Are you sure you want to delete this listing?')) return;\n\n try {\n const response = await fetch('/api/v1/marketplace/listings', {\n method: 'DELETE',\n headers: { 'Content-Type': 'application/json' },\n body: JSON.stringify({ id: listing.id })\n });\n\n if (response.ok) {\n await loadListings();\n } else {\n const data = await response.json();\n console.error('Error deleting listing:', data.error);\n }\n } catch (error) {\n console.error('Error deleting listing:', error);\n }\n };\n\n const handleExport = async (format: 'csv' | 'json' | 'excel') => {\n try {\n const exportData = listings.map(listing => ({\n title: listing.title,\n type: listing.type,\n category: listing.category,\n status: listing.status,\n price: listing.pricing?.amount || 0,\n currency: listing.pricing?.currency || 'USD',\n location: listing.location?.city || '',\n featured: listing.featured,\n views: listing.view_count || 0,\n responses: listing.response_count || 0,\n created: listing.created_at\n }));\n\n const filename = `marketplace-listings-${new Date().toISOString().split('T')[0]}`;\n \n if (format === 'csv') {\n const csv = [\n Object.keys(exportData[0]).join(','),\n ...exportData.map(row => Object.values(row).join(','))\n ].join('\\n');\n \n const blob = new Blob([csv], { type: 'text/csv' });\n const url = URL.createObjectURL(blob);\n const a = document.createElement('a');\n a.href = url;\n a.download = `${filename}.csv`;\n a.click();\n URL.revokeObjectURL(url);\n } else if (format === 'json') {\n const json = JSON.stringify(exportData, null, 2);\n const blob = new Blob([json], { type: 'application/json' });\n const url = URL.createObjectURL(blob);\n const a = document.createElement('a');\n a.href = url;\n a.download = `${filename}.json`;\n a.click();\n URL.revokeObjectURL(url);\n }\n } catch (error) {\n console.error('Error exporting listings:', error);\n }\n };\n\n const handleBulkAction = async (action: string, selectedIds: string[]) => {\n if (action === 'delete') {\n if (!confirm(`Are you sure you want to delete ${selectedIds.length} listings?`)) return;\n \n try {\n await Promise.all(\n selectedIds.map(id => \n fetch('/api/v1/marketplace/listings', {\n method: 'DELETE',\n headers: { 'Content-Type': 'application/json' },\n body: JSON.stringify({ id })\n })\n )\n );\n await loadListings();\n } catch (error) {\n console.error('Error bulk deleting listings:', error);\n }\n } else if (action === 'feature') {\n try {\n await Promise.all(\n selectedIds.map(id => \n fetch('/api/v1/marketplace/listings', {\n method: 'PUT',\n headers: { 'Content-Type': 'application/json' },\n body: JSON.stringify({ id, featured: true })\n })\n )\n );\n await loadListings();\n } catch (error) {\n console.error('Error bulk featuring listings:', error);\n }\n }\n };\n\n const handleSearch = (query: string) => {\n setFilters(prev => ({ ...prev, search: query }));\n };\n\n const handleFilter = (newFilters: Partial<ListingFilters>) => {\n setFilters(prev => ({ ...prev, ...newFilters }));\n };\n\n const getRowActions = (listing: MarketplaceListing) => [\n {\n label: 'View',\n icon: Eye,\n onClick: () => handleViewListing(listing)\n },\n {\n label: 'Edit',\n icon: Edit,\n onClick: () => handleEditListing(listing),\n disabled: listing.created_by !== userId\n },\n {\n label: 'Delete',\n icon: Trash2,\n onClick: () => handleDeleteListing(listing),\n disabled: listing.created_by !== userId,\n variant: 'destructive' as const\n }\n ];\n\n const renderListingCard = (listing: MarketplaceListing) => {\n const typeIcons = {\n offer: Package,\n request: Search,\n exchange: Users\n };\n const TypeIcon = typeIcons[listing.type];\n\n return (\n <Card key={listing.id} className=\"p-md hover:shadow-md transition-shadow\">\n <div className=\"flex items-start justify-between mb-sm\">\n <div className=\"flex items-center gap-sm\">\n <TypeIcon className=\"h-icon-sm w-icon-sm color-primary\" />\n <Badge variant={listing.type === 'offer' ? 'success' : listing.type === 'request' ? 'warning' : 'secondary'}>\n {listing.type}\n </Badge>\n {listing.featured && <Badge variant=\"primary\">Featured</Badge>}\n </div>\n <Badge variant={listing.status === 'active' ? 'success' : 'secondary'}>\n {listing.status}\n </Badge>\n </div>\n \n <h3 className=\"text-heading-4 mb-xs\">{listing.title}</h3>\n <p className=\"text-body-sm color-muted mb-sm line-clamp-xs\">{listing.description}</p>\n \n <div className=\"flex items-center gap-md mb-sm text-body-sm color-muted\">\n <div className=\"flex items-center gap-xs\">\n <Briefcase className=\"h-icon-xs w-icon-xs\" />\n <span>{listing.category}</span>\n </div>\n {listing.location?.city && (\n <div className=\"flex items-center gap-xs\">\n <MapPin className=\"h-icon-xs w-icon-xs\" />\n <span>{listing.location.city}</span>\n </div>\n )}\n {listing.pricing?.amount && (\n <div className=\"flex items-center gap-xs\">\n <DollarSign className=\"h-icon-xs w-icon-xs\" />\n <span>{listing.pricing.currency} {listing.pricing.amount}</span>\n </div>\n )}\n </div>\n \n <div className=\"flex items-center justify-between\">\n <div className=\"flex items-center gap-md text-body-sm color-muted\">\n <span>{listing.view_count || 0} views</span>\n <span>{listing.response_count || 0} responses</span>\n </div>\n <div className=\"flex items-center gap-xs\">\n <Button size=\"sm\" variant=\"outline\" onClick={() => handleViewListing(listing)}>\n <Eye className=\"h-icon-xs w-icon-xs\" />\n </Button>\n {listing.created_by === userId && (\n <Button size=\"sm\" variant=\"outline\" onClick={() => handleEditListing(listing)}>\n <Edit className=\"h-icon-xs w-icon-xs\" />\n </Button>\n )}\n </div>\n </div>\n </Card>\n );\n };\n\n return (\n <div className=\"stack-lg\">\n {/* Header */}\n <div className=\"flex items-center justify-between\">\n <div>\n <h1 className=\"text-heading-2\">Marketplace Listings</h1>\n <p className=\"color-muted\">Browse and manage marketplace listings</p>\n </div>\n <Button onClick={handleCreateListing}>\n <Plus className=\"h-icon-xs w-icon-xs mr-sm\" />\n Create Listing\n </Button>\n </div>\n\n {/* Stats Cards */}\n <div className=\"grid grid-cols-1 md:grid-cols-4 gap-md\">\n <Card className=\"p-md\">\n <div className=\"flex items-center justify-between\">\n <div>\n <p className=\"text-body-sm color-muted\">Total Listings</p>\n <p className=\"text-heading-3 font-bold\">{stats.total}</p>\n </div>\n <Briefcase className=\"h-icon-lg w-icon-lg color-primary\" />\n </div>\n </Card>\n <Card className=\"p-md\">\n <div className=\"flex items-center justify-between\">\n <div>\n <p className=\"text-body-sm color-muted\">Active</p>\n <p className=\"text-heading-3 font-bold\">{stats.active}</p>\n </div>\n <Package className=\"h-icon-lg w-icon-lg color-success\" />\n </div>\n </Card>\n <Card className=\"p-md\">\n <div className=\"flex items-center justify-between\">\n <div>\n <p className=\"text-body-sm color-muted\">Featured</p>\n <p className=\"text-heading-3 font-bold\">{stats.featured}</p>\n </div>\n <Star className=\"h-icon-lg w-icon-lg color-warning\" />\n </div>\n </Card>\n <Card className=\"p-md\">\n <div className=\"flex items-center justify-between\">\n <div>\n <p className=\"text-body-sm color-muted\">Total Responses</p>\n <p className=\"text-heading-3 font-bold\">{stats.responses}</p>\n </div>\n <Users className=\"h-icon-lg w-icon-lg color-secondary\" />\n </div>\n </Card>\n </div>\n\n {/* Data View */}\n <StateManagerProvider>\n <DataViewProvider\n data={listings}\n fields={LISTINGS_FIELD_CONFIGS}\n onExport={handleExport}\n onBulkAction={handleBulkAction}\n >\n <Card className=\"p-md\">\n <div className=\"flex items-center justify-between mb-md\">\n <ViewSwitcher\n currentView={selectedView}\n onViewChange={setSelectedView}\n availableViews={['grid', 'list', 'kanban']}\n />\n <div className=\"flex items-center gap-sm\">\n <Button\n variant=\"outline\"\n size=\"sm\"\n onClick={() => setFilters(prev => ({ ...prev, showMine: !prev.showMine }))}\n >\n {filters.showMine ? 'Show All' : 'Show Mine'}\n </Button>\n <Button\n variant=\"outline\"\n size=\"sm\"\n onClick={() => setFilters(prev => ({ ...prev, featured: !prev.featured }))}\n >\n {filters.featured ? 'All Listings' : 'Featured Only'}\n </Button>\n </div>\n </div>\n\n <div className=\"stack-sm\">\n <DataActions\n onSearch={handleSearch}\n onFilter={handleFilter}\n onExport={handleExport}\n showBulkActions={true}\n bulkActions={[\n { label: 'Delete Selected', value: 'delete', variant: 'destructive' },\n { label: 'Feature Selected', value: 'feature', variant: 'default' }\n ]}\n />\n \n {selectedView === 'grid' ? (\n <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-md\">\n {listings.map(renderListingCard)}\n </div>\n ) : (\n <DataGrid\n viewType={selectedView}\n onRowClick={handleViewListing}\n rowActions={getRowActions}\n emptyMessage=\"No listings found\"\n loading={loading}\n className=\"min-h-content-lg\"\n />\n )}\n </div>\n </Card>\n </DataViewProvider>\n </StateManagerProvider>\n\n {/* Create/Edit Drawer */}\n <Drawer\n isOpen={drawerOpen}\n onClose={() => setDrawerOpen(false)}\n title={drawerMode === 'create' ? 'Create Listing' : drawerMode === 'edit' ? 'Edit Listing' : 'View Listing'}\n size=\"lg\"\n >\n <CreateListingClient\n mode={drawerMode}\n listing={selectedListing}\n onSuccess={() => {\n setDrawerOpen(false);\n loadListings();\n }}\n onCancel={() => setDrawerOpen(false)}\n />\n </Drawer>\n </div>\n );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/marketplace/listings/lib/listings-service.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/marketplace/listings/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/marketplace/listings/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/marketplace/messages/MessagesClient.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/marketplace/messages/lib/messages-service.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/marketplace/messages/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/marketplace/messages/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/marketplace/overview/OverviewClient.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/marketplace/overview/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/marketplace/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/marketplace/payments/PaymentsClient.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/marketplace/payments/lib/payments-service.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/marketplace/payments/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/marketplace/payments/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/marketplace/projects/ProjectsClient.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/marketplace/projects/lib/projects-service.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/marketplace/projects/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/marketplace/projects/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/marketplace/reviews/ReviewsClient.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadReviews'. Either include it or remove the dependency array.","line":65,"column":5,"nodeType":"ArrayExpression","endLine":65,"endColumn":12,"suggestions":[{"desc":"Update the dependencies array to be: [loadReviews, orgId]","fix":{"range":[1485,1492],"text":"[loadReviews, orgId]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { Award, Calendar, Filter, Flag, MessageSquare, Plus, Search, Share, Star, ThumbsDown, ThumbsUp, TrendingUp, User } from \"lucide-react\";\nimport { useState, useEffect } from 'react';\nimport { \n Card,\n Button,\n Badge,\n Input,\n Textarea,\n Avatar\n} from '@ghxstship/ui';\n\ninterface ReviewsClientProps {\n orgId: string;\n userId: string;\n}\n\ninterface Review {\n id: string;\n reviewer_id: string;\n reviewer_name: string;\n reviewer_avatar?: string;\n reviewee_id: string;\n reviewee_name: string;\n project_title?: string;\n rating: number;\n title: string;\n content: string;\n categories: {\n communication: number;\n quality: number;\n timeliness: number;\n professionalism: number;\n };\n helpful_count: number;\n created_at: string;\n response?: {\n content: string;\n created_at: string;\n };\n verified: boolean;\n type: 'received' | 'given';\n}\n\nexport default function ReviewsClient({ orgId, userId }: ReviewsClientProps) {\n const [reviews, setReviews] = useState<Review[]>([]);\n const [loading, setLoading] = useState(true);\n const [filter, setFilter] = useState<'all' | 'received' | 'given'>('all');\n const [ratingFilter, setRatingFilter] = useState<number | null>(null);\n const [searchQuery, setSearchQuery] = useState('');\n const [showWriteReview, setShowWriteReview] = useState(false);\n const [stats, setStats] = useState({\n averageRating: 0,\n totalReviews: 0,\n fiveStars: 0,\n fourStars: 0,\n threeStars: 0,\n twoStars: 0,\n oneStars: 0\n });\n\n useEffect(() => {\n loadReviews();\n }, [orgId]);\n\n const loadReviews = async () => {\n try {\n setLoading(true);\n \n // Mock review data - would integrate with real reviews API\n const mockReviews: Review[] = [\n {\n id: '1',\n reviewer_id: 'user1',\n reviewer_name: 'TechCorp Solutions',\n reviewer_avatar: '',\n reviewee_id: userId,\n reviewee_name: 'Your Organization',\n project_title: 'LED Wall System Rental',\n rating: 5,\n title: 'Excellent service and equipment quality',\n content: 'The LED wall system was exactly what we needed for our event. Setup was smooth, equipment worked flawlessly throughout the 3-day event, and the support team was very responsive.',\n categories: {\n communication: 5,\n quality: 5,\n timeliness: 4,\n professionalism: 5\n },\n helpful_count: 8,\n created_at: '2024-01-15T10:00:00Z',\n verified: true,\n type: 'received'\n },\n {\n id: '2',\n reviewer_id: userId,\n reviewer_name: 'Your Organization',\n reviewee_id: 'vendor1',\n reviewee_name: 'AudioPro Services',\n project_title: 'Corporate Event Sound Engineering',\n rating: 4,\n title: 'Professional sound engineering services',\n content: 'AudioPro delivered great sound quality for our corporate event. The team was professional and handled all technical aspects smoothly. Minor delay in setup but overall excellent work.',\n categories: {\n communication: 4,\n quality: 5,\n timeliness: 3,\n professionalism: 4\n },\n helpful_count: 3,\n created_at: '2024-01-12T14:30:00Z',\n response: {\n content: 'Thank you for the feedback! We apologize for the setup delay and have improved our processes since then.',\n created_at: '2024-01-13T09:00:00Z'\n },\n verified: true,\n type: 'given'\n },\n {\n id: '3',\n reviewer_id: 'user2',\n reviewer_name: 'LightMaster Inc',\n reviewee_id: userId,\n reviewee_name: 'Your Organization',\n project_title: 'Concert Series Lighting Contract',\n rating: 5,\n title: 'Outstanding collaboration and project management',\n content: 'Working with this team was a pleasure. Clear communication, well-defined requirements, and prompt payments. The concert series was a huge success thanks to their professional approach.',\n categories: {\n communication: 5,\n quality: 5,\n timeliness: 5,\n professionalism: 5\n },\n helpful_count: 12,\n created_at: '2024-01-10T16:45:00Z',\n verified: true,\n type: 'received'\n }\n ];\n\n setReviews(mockReviews);\n\n // Calculate stats\n const receivedReviews = mockReviews.filter(r => r.type === 'received');\n const totalReviews = receivedReviews.length;\n const avgRating = totalReviews > 0 \n ? receivedReviews.reduce((sum, r) => sum + r.rating, 0) / totalReviews \n : 0;\n\n const ratingDistribution = receivedReviews.reduce((acc, review) => {\n acc[review.rating] = (acc[review.rating] || 0) + 1;\n return acc;\n }, {} as Record<number, number>);\n\n setStats({\n averageRating: Math.round(avgRating * 10) / 10,\n totalReviews,\n fiveStars: ratingDistribution[5] || 0,\n fourStars: ratingDistribution[4] || 0,\n threeStars: ratingDistribution[3] || 0,\n twoStars: ratingDistribution[2] || 0,\n oneStars: ratingDistribution[1] || 0\n });\n } catch (error) {\n console.error('Error loading reviews:', error);\n } finally {\n setLoading(false);\n }\n };\n\n const filteredReviews = reviews.filter(review => {\n const matchesFilter = filter === 'all' || review.type === filter;\n const matchesRating = ratingFilter === null || review.rating === ratingFilter;\n const matchesSearch = review.title.toLowerCase().includes(searchQuery.toLowerCase()) ||\n review.content.toLowerCase().includes(searchQuery.toLowerCase()) ||\n review.reviewer_name.toLowerCase().includes(searchQuery.toLowerCase());\n return matchesFilter && matchesRating && matchesSearch;\n });\n\n const renderStars = (rating: number, size: 'sm' | 'md' = 'sm') => {\n return (\n <div className=\"flex items-center gap-xs\">\n {[1, 2, 3, 4, 5].map((star) => (\n <Star\n key={star}\n className={`${size === 'sm' ? 'h-icon-xs w-icon-xs' : 'h-icon-sm w-icon-sm'} ${\n star <= rating ? 'fill-current color-warning' : 'color-muted'\n }`}\n />\n ))}\n </div>\n );\n };\n\n const renderCategoryRating = (label: string, rating: number) => (\n <div className=\"flex items-center justify-between\">\n <span className=\"text-body-sm\">{label}</span>\n <div className=\"flex items-center gap-xs\">\n {renderStars(rating)}\n <span className=\"text-body-sm font-medium\">{rating}</span>\n </div>\n </div>\n );\n\n return (\n <div className=\"stack-lg\">\n {/* Header */}\n <div className=\"flex items-center justify-between\">\n <div>\n <h1 className=\"text-heading-2\">Reviews & Ratings</h1>\n <p className=\"color-muted\">Manage feedback and build your reputation</p>\n </div>\n <Button onClick={() => setShowWriteReview(true)}>\n <Plus className=\"h-icon-xs w-icon-xs mr-sm\" />\n Write Review\n </Button>\n </div>\n\n {/* Stats Overview */}\n <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-md\">\n <Card className=\"p-md\">\n <div className=\"text-center\">\n <div className=\"flex items-center justify-center mb-sm\">\n {renderStars(Math.round(stats.averageRating), 'md')}\n </div>\n <div className=\"text-heading-2 font-bold mb-xs\">{stats.averageRating}</div>\n <p className=\"text-body-sm color-muted\">{stats.totalReviews} reviews</p>\n </div>\n </Card>\n\n <Card className=\"p-md lg:col-span-2\">\n <h3 className=\"text-heading-5 mb-sm\">Rating Distribution</h3>\n <div className=\"stack-xs\">\n {[5, 4, 3, 2, 1].map((rating) => {\n const count = stats[`${rating === 1 ? 'one' : rating === 2 ? 'two' : rating === 3 ? 'three' : rating === 4 ? 'four' : 'five'}Stars` as keyof typeof stats] as number;\n const percentage = stats.totalReviews > 0 ? (count / stats.totalReviews) * 100 : 0;\n \n return (\n <div key={rating} className=\"flex items-center gap-sm\">\n <span className=\"text-body-sm w-icon-lg\">{rating}</span>\n <Star className=\"h-icon-xs w-icon-xs fill-current color-warning\" />\n <div className=\"flex-1 bg-muted rounded-full h-2\">\n <div \n className=\"bg-warning rounded-full h-2 transition-all\"\n style={{ width: `${percentage}%` }}\n />\n </div>\n <span className=\"text-body-sm w-icon-lg text-right\">{count}</span>\n </div>\n );\n })}\n </div>\n </Card>\n\n <Card className=\"p-md\">\n <div className=\"stack-sm\">\n <div className=\"flex items-center justify-between\">\n <span className=\"text-body-sm\">Response Rate</span>\n <span className=\"text-body font-medium\">95%</span>\n </div>\n <div className=\"flex items-center justify-between\">\n <span className=\"text-body-sm\">Avg Response Time</span>\n <span className=\"text-body font-medium\">2 hours</span>\n </div>\n <div className=\"flex items-center justify-between\">\n <span className=\"text-body-sm\">Verified Reviews</span>\n <span className=\"text-body font-medium\">100%</span>\n </div>\n </div>\n </Card>\n </div>\n\n {/* Filters and Reviews */}\n <Card className=\"p-md\">\n <div className=\"flex items-center justify-between mb-md\">\n <h3 className=\"text-heading-4\">All Reviews</h3>\n <div className=\"flex items-center gap-sm\">\n <Button variant=\"outline\" size=\"sm\">\n <Filter className=\"h-icon-xs w-icon-xs mr-xs\" />\n Filter\n </Button>\n </div>\n </div>\n\n <div className=\"flex items-center gap-sm mb-md\">\n <Input\n placeholder=\"Search reviews...\"\n value={searchQuery}\n onChange={(e) => setSearchQuery(e.target.value)}\n className=\"flex-1\"\n />\n <div className=\"flex items-center gap-sm\">\n <Button\n variant={filter === 'all' ? 'default' : 'outline'}\n size=\"sm\"\n onClick={() => setFilter('all')}\n >\n All\n </Button>\n <Button\n variant={filter === 'received' ? 'default' : 'outline'}\n size=\"sm\"\n onClick={() => setFilter('received')}\n >\n Received\n </Button>\n <Button\n variant={filter === 'given' ? 'default' : 'outline'}\n size=\"sm\"\n onClick={() => setFilter('given')}\n >\n Given\n </Button>\n </div>\n </div>\n\n <div className=\"stack-md\">\n {filteredReviews.map((review) => (\n <Card key={review.id} className=\"p-md border\">\n <div className=\"flex items-start justify-between mb-sm\">\n <div className=\"flex items-center gap-sm\">\n <Avatar className=\"h-icon-xl w-icon-xl\">\n <div className=\"flex items-center justify-center h-full w-full bg-primary/10\">\n <User className=\"h-icon-sm w-icon-sm color-primary\" />\n </div>\n </Avatar>\n <div>\n <div className=\"flex items-center gap-sm mb-xs\">\n <h4 className=\"text-body font-medium\">{review.reviewer_name}</h4>\n {review.verified && (\n <Badge variant=\"success\" size=\"sm\">\n <Award className=\"h-3 w-3 mr-xs\" />\n Verified\n </Badge>\n )}\n <Badge variant={review.type === 'received' ? 'secondary' : 'outline'} size=\"sm\">\n {review.type === 'received' ? 'Received' : 'Given'}\n </Badge>\n </div>\n <div className=\"flex items-center gap-sm\">\n {renderStars(review.rating)}\n <span className=\"text-body-sm color-muted\">\n {new Date(review.created_at).toLocaleDateString()}\n </span>\n {review.project_title && (\n <span className=\"text-body-sm color-muted\">\n • {review.project_title}\n </span>\n )}\n </div>\n </div>\n </div>\n <Button variant=\"ghost\" size=\"sm\">\n <Flag className=\"h-icon-xs w-icon-xs\" />\n </Button>\n </div>\n\n <h3 className=\"text-body font-medium mb-sm\">{review.title}</h3>\n <p className=\"text-body-sm mb-md\">{review.content}</p>\n\n {/* Category Ratings */}\n <div className=\"grid grid-cols-2 lg:grid-cols-4 gap-md mb-md p-sm bg-muted/50 rounded\">\n {renderCategoryRating('Communication', review.categories.communication)}\n {renderCategoryRating('Quality', review.categories.quality)}\n {renderCategoryRating('Timeliness', review.categories.timeliness)}\n {renderCategoryRating('Professionalism', review.categories.professionalism)}\n </div>\n\n {/* Response */}\n {review.response && (\n <div className=\"p-sm bg-primary/5 rounded mb-sm\">\n <div className=\"flex items-center gap-sm mb-xs\">\n <MessageSquare className=\"h-icon-xs w-icon-xs color-primary\" />\n <span className=\"text-body-sm font-medium\">Response from {review.reviewee_name}</span>\n <span className=\"text-body-sm color-muted\">\n {new Date(review.response.created_at).toLocaleDateString()}\n </span>\n </div>\n <p className=\"text-body-sm\">{review.response.content}</p>\n </div>\n )}\n\n {/* Actions */}\n <div className=\"flex items-center justify-between\">\n <div className=\"flex items-center gap-sm\">\n <Button variant=\"ghost\" size=\"sm\">\n <ThumbsUp className=\"h-icon-xs w-icon-xs mr-xs\" />\n Helpful ({review.helpful_count})\n </Button>\n {review.type === 'received' && !review.response && (\n <Button variant=\"outline\" size=\"sm\">\n <MessageSquare className=\"h-icon-xs w-icon-xs mr-xs\" />\n Respond\n </Button>\n )}\n </div>\n <Button variant=\"ghost\" size=\"sm\">\n Share\n </Button>\n </div>\n </Card>\n ))}\n </div>\n </Card>\n </div>\n );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/marketplace/reviews/lib/reviews-service.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/marketplace/reviews/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/marketplace/reviews/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/marketplace/settings/SettingsClient.tsx","messages":[{"ruleId":"@next/next/no-img-element","severity":1,"message":"Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` or a custom image loader to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","line":217,"column":2,"nodeType":"JSXOpeningElement","endLine":217,"endColumn":91}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { Settings, Bell, Shield, CreditCard, Globe, Users, Eye, Lock, Mail, Smartphone, Save, RefreshCw, AlertCircle, CheckCircle, Trash2 } from \"lucide-react\";\nimport { useState, useEffect } from 'react';\nimport { \n Card,\n Button,\n Input,\n Textarea,\n Select,\n Badge\n} from '@ghxstship/ui';\n\ninterface SettingsClientProps {\n orgId: string;\n userId: string;\n}\n\ninterface MarketplaceSettings {\n // Profile Settings\n display_name: string;\n business_description: string;\n website_url: string;\n logo_url: string;\n \n // Privacy Settings\n profile_visibility: 'public' | 'marketplace_only' | 'private';\n show_contact_info: boolean;\n allow_direct_messages: boolean;\n \n // Notification Settings\n email_notifications: {\n new_messages: boolean;\n project_updates: boolean;\n payment_notifications: boolean;\n review_notifications: boolean;\n marketing_emails: boolean;\n };\n \n sms_notifications: {\n urgent_messages: boolean;\n payment_alerts: boolean;\n };\n \n // Marketplace Preferences\n auto_accept_projects: boolean;\n default_response_time: string;\n preferred_categories: string[];\n minimum_project_value: number;\n currency: string;\n \n // Security Settings\n two_factor_enabled: boolean;\n login_notifications: boolean;\n session_timeout: number;\n \n // Payment Settings\n auto_invoice: boolean;\n payment_terms: string;\n late_fee_percentage: number;\n escrow_preference: 'always' | 'large_projects' | 'never';\n}\n\nexport default function SettingsClient({ orgId, userId }: SettingsClientProps) {\n const [settings, setSettings] = useState<MarketplaceSettings>({\n display_name: '',\n business_description: '',\n website_url: '',\n logo_url: '',\n profile_visibility: 'public',\n show_contact_info: true,\n allow_direct_messages: true,\n email_notifications: {\n new_messages: true,\n project_updates: true,\n payment_notifications: true,\n review_notifications: true,\n marketing_emails: false\n },\n sms_notifications: {\n urgent_messages: false,\n payment_alerts: true\n },\n auto_accept_projects: false,\n default_response_time: '24 hours',\n preferred_categories: [],\n minimum_project_value: 0,\n currency: 'USD',\n two_factor_enabled: false,\n login_notifications: true,\n session_timeout: 30,\n auto_invoice: true,\n payment_terms: 'Net 30',\n late_fee_percentage: 1.5,\n escrow_preference: 'large_projects'\n });\n \n const [loading, setLoading] = useState(true);\n const [saving, setSaving] = useState(false);\n const [activeTab, setActiveTab] = useState('profile');\n\n useEffect(() => {\n loadSettings();\n }, [orgId]);\n\n const loadSettings = async () => {\n try {\n setLoading(true);\n \n // Mock settings data - would load from API\n const mockSettings: MarketplaceSettings = {\n display_name: 'Your Organization',\n business_description: 'Professional live event production and technical services',\n website_url: 'https://yourorganization.com',\n logo_url: '',\n profile_visibility: 'public',\n show_contact_info: true,\n allow_direct_messages: true,\n email_notifications: {\n new_messages: true,\n project_updates: true,\n payment_notifications: true,\n review_notifications: true,\n marketing_emails: false\n },\n sms_notifications: {\n urgent_messages: false,\n payment_alerts: true\n },\n auto_accept_projects: false,\n default_response_time: '24 hours',\n preferred_categories: ['audio_visual', 'lighting'],\n minimum_project_value: 1000,\n currency: 'USD',\n two_factor_enabled: false,\n login_notifications: true,\n session_timeout: 30,\n auto_invoice: true,\n payment_terms: 'Net 30',\n late_fee_percentage: 1.5,\n escrow_preference: 'large_projects'\n };\n\n setSettings(mockSettings);\n } catch (error) {\n console.error('Error loading settings:', error);\n } finally {\n setLoading(false);\n }\n };\n\n const handleSave = async () => {\n try {\n setSaving(true);\n \n // Mock save - would save to API\n await new Promise(resolve => setTimeout(resolve, 1000));\n \n } catch (error) {\n console.error('Error saving settings:', error);\n } finally {\n setSaving(false);\n }\n };\n\n const updateSettings = (updates: Partial<MarketplaceSettings>) => {\n setSettings(prev => ({ ...prev, ...updates }));\n };\n\n const updateNestedSettings = (section: keyof MarketplaceSettings, updates: unknown) => {\n setSettings(prev => ({\n ...prev,\n [section]: { ...prev[section], ...updates }\n }));\n };\n\n const tabs = [\n { id: 'profile', label: 'Profile', icon: Users },\n { id: 'privacy', label: 'Privacy', icon: Eye },\n { id: 'notifications', label: 'Notifications', icon: Bell },\n { id: 'marketplace', label: 'Marketplace', icon: Globe },\n { id: 'security', label: 'Security', icon: Shield },\n { id: 'payments', label: 'Payments', icon: CreditCard }\n ];\n\n const renderProfileSettings = () => (\n <Card className=\"p-md\">\n <h3 className=\"text-heading-4 mb-md\">Profile Information</h3>\n <div className=\"stack-md\">\n <Input\n \n value={settings.display_name}\n onChange={(e) => updateSettings({ display_name: e.target.value })}\n placeholder=\"How you appear in the marketplace\"\n />\n \n <Textarea\n \n value={settings.business_description}\n onChange={(e) => updateSettings({ business_description: e.target.value })}\n placeholder=\"Describe your business and services\"\n rows={4}\n />\n \n <Input\n \n value={settings.website_url}\n onChange={(e) => updateSettings({ website_url: e.target.value })}\n placeholder=\"https://yourwebsite.com\"\n />\n \n <div>\n <label className=\"text-body-sm font-medium mb-xs block\">Logo</label>\n <div className=\"flex items-center gap-sm\">\n <div className=\"h-component-md w-component-md bg-muted rounded flex items-center justify-center\">\n {settings.logo_url ? (\n <img src={settings.logo_url} alt=\"Logo\" className=\"h-full w-full object-cover rounded\" />\n ) : (\n <Users className=\"h-icon-lg w-icon-lg color-muted\" />\n )}\n </div>\n <div className=\"flex gap-sm\">\n <Button variant=\"outline\" size=\"sm\">Upload Logo</Button>\n {settings.logo_url && (\n <Button variant=\"outline\" size=\"sm\">\n <Trash2 className=\"h-icon-xs w-icon-xs\" />\n </Button>\n )}\n </div>\n </div>\n </div>\n </div>\n </Card>\n );\n\n const renderPrivacySettings = () => (\n <Card className=\"p-md\">\n <h3 className=\"text-heading-4 mb-md\">Privacy Settings</h3>\n <div className=\"stack-md\">\n <div>\n <label className=\"text-body-sm font-medium mb-xs block\">Profile Visibility</label>\n <Select\n value={settings.profile_visibility}\n onChange={(value: unknown) => updateSettings({ profile_visibility: value })}\n >\n <option value=\"public\">Public - Visible to everyone</option>\n <option value=\"marketplace_only\">Marketplace Only - Visible to marketplace users</option>\n <option value=\"private\">Private - Only visible to direct contacts</option>\n </Select>\n </div>\n \n <div className=\"flex items-center justify-between\">\n <div>\n <p className=\"text-body font-medium\">Show Contact Information</p>\n <p className=\"text-body-sm color-muted\">Display email and phone in your profile</p>\n </div>\n <input\n type=\"checkbox\"\n checked={settings.show_contact_info}\n onChange={(e) => updateSettings({ show_contact_info: e.target.checked })}\n />\n </div>\n \n <div className=\"flex items-center justify-between\">\n <div>\n <p className=\"text-body font-medium\">Allow Direct Messages</p>\n <p className=\"text-body-sm color-muted\">Let other users message you directly</p>\n </div>\n <input\n type=\"checkbox\"\n checked={settings.allow_direct_messages}\n onChange={(e) => updateSettings({ allow_direct_messages: e.target.checked })}\n />\n </div>\n </div>\n </Card>\n );\n\n const renderNotificationSettings = () => (\n <div className=\"stack-md\">\n <Card className=\"p-md\">\n <h3 className=\"text-heading-4 mb-md flex items-center gap-sm\">\n <Mail className=\"h-icon-sm w-icon-sm\" />\n Email Notifications\n </h3>\n <div className=\"stack-sm\">\n {Object.entries(settings.email_notifications).map(([key, value]) => (\n <div key={key} className=\"flex items-center justify-between\">\n <div>\n <p className=\"text-body font-medium capitalize\">\n {key.replace('_', ' ')}\n </p>\n </div>\n <input\n type=\"checkbox\"\n checked={value}\n onChange={(e) => updateNestedSettings('email_notifications', { [key]: e.target.checked })}\n />\n </div>\n ))}\n </div>\n </Card>\n \n <Card className=\"p-md\">\n <h3 className=\"text-heading-4 mb-md flex items-center gap-sm\">\n <Smartphone className=\"h-icon-sm w-icon-sm\" />\n SMS Notifications\n </h3>\n <div className=\"stack-sm\">\n {Object.entries(settings.sms_notifications).map(([key, value]) => (\n <div key={key} className=\"flex items-center justify-between\">\n <div>\n <p className=\"text-body font-medium capitalize\">\n {key.replace('_', ' ')}\n </p>\n </div>\n <input\n type=\"checkbox\"\n checked={value}\n onChange={(e) => updateNestedSettings('sms_notifications', { [key]: e.target.checked })}\n />\n </div>\n ))}\n </div>\n </Card>\n </div>\n );\n\n const renderMarketplaceSettings = () => (\n <Card className=\"p-md\">\n <h3 className=\"text-heading-4 mb-md\">Marketplace Preferences</h3>\n <div className=\"stack-md\">\n <div>\n <label className=\"text-body-sm font-medium mb-xs block\">Default Response Time</label>\n <Select\n value={settings.default_response_time}\n onChange={(e) => updateSettings({ default_response_time: value })}\n >\n <option value=\"1 hour\">Within 1 hour</option>\n <option value=\"4 hours\">Within 4 hours</option>\n <option value=\"24 hours\">Within 24 hours</option>\n <option value=\"48 hours\">Within 48 hours</option>\n </Select>\n </div>\n \n <div className=\"grid grid-cols-2 gap-sm\">\n <Input\n \n type=\"number\"\n value={settings.minimum_project_value}\n onChange={(e) => updateSettings({ minimum_project_value: parseFloat(e.target.value) || 0 })}\n />\n \n <Select\n \n value={settings.currency}\n onChange={(e) => updateSettings({ currency: value })}\n >\n <option value=\"USD\">USD</option>\n <option value=\"EUR\">EUR</option>\n <option value=\"GBP\">GBP</option>\n <option value=\"CAD\">CAD</option>\n </Select>\n </div>\n \n <div className=\"flex items-center justify-between\">\n <div>\n <p className=\"text-body font-medium\">Auto-accept Projects</p>\n <p className=\"text-body-sm color-muted\">Automatically accept projects that meet your criteria</p>\n </div>\n <input\n type=\"checkbox\"\n checked={settings.auto_accept_projects}\n onChange={(e) => updateSettings({ auto_accept_projects: e.target.checked })}\n />\n </div>\n </div>\n </Card>\n );\n\n const renderSecuritySettings = () => (\n <Card className=\"p-md\">\n <h3 className=\"text-heading-4 mb-md\">Security Settings</h3>\n <div className=\"stack-md\">\n <div className=\"flex items-center justify-between\">\n <div>\n <p className=\"text-body font-medium\">Two-Factor Authentication</p>\n <p className=\"text-body-sm color-muted\">Add an extra layer of security to your account</p>\n </div>\n <div className=\"flex items-center gap-sm\">\n {settings.two_factor_enabled && (\n <Badge variant=\"success\" size=\"sm\">Enabled</Badge>\n )}\n <Button variant=\"outline\" size=\"sm\">\n {settings.two_factor_enabled ? 'Disable' : 'Enable'}\n </Button>\n </div>\n </div>\n \n <div className=\"flex items-center justify-between\">\n <div>\n <p className=\"text-body font-medium\">Login Notifications</p>\n <p className=\"text-body-sm color-muted\">Get notified of new login attempts</p>\n </div>\n <input\n type=\"checkbox\"\n checked={settings.login_notifications}\n onChange={(e) => updateSettings({ login_notifications: e.target.checked })}\n />\n </div>\n \n <div>\n <label className=\"text-body-sm font-medium mb-xs block\">Session Timeout (minutes)</label>\n <Select\n value={settings.session_timeout.toString()}\n onChange={(e) => updateSettings({ session_timeout: parseInt(value) })}\n >\n <option value=\"15\">15 minutes</option>\n <option value=\"30\">30 minutes</option>\n <option value=\"60\">1 hour</option>\n <option value=\"240\">4 hours</option>\n </Select>\n </div>\n </div>\n </Card>\n );\n\n const renderPaymentSettings = () => (\n <Card className=\"p-md\">\n <h3 className=\"text-heading-4 mb-md\">Payment Settings</h3>\n <div className=\"stack-md\">\n <div className=\"flex items-center justify-between\">\n <div>\n <p className=\"text-body font-medium\">Auto-generate Invoices</p>\n <p className=\"text-body-sm color-muted\">Automatically create invoices for completed work</p>\n </div>\n <input\n type=\"checkbox\"\n checked={settings.auto_invoice}\n onChange={(e) => updateSettings({ auto_invoice: e.target.checked })}\n />\n </div>\n \n <div className=\"grid grid-cols-2 gap-sm\">\n <Select\n \n value={settings.payment_terms}\n onChange={(e) => updateSettings({ payment_terms: value })}\n >\n <option value=\"Due on receipt\">Due on receipt</option>\n <option value=\"Net 15\">Net 15</option>\n <option value=\"Net 30\">Net 30</option>\n <option value=\"Net 60\">Net 60</option>\n </Select>\n \n <Input\n \n type=\"number\"\n step=\"0.1\"\n value={settings.late_fee_percentage}\n onChange={(e) => updateSettings({ late_fee_percentage: parseFloat(e.target.value) || 0 })}\n />\n </div>\n \n <div>\n <label className=\"text-body-sm font-medium mb-xs block\">Escrow Preference</label>\n <Select\n value={settings.escrow_preference}\n onChange={(value: unknown) => updateSettings({ escrow_preference: value })}\n >\n <option value=\"always\">Always use escrow</option>\n <option value=\"large_projects\">Use for large projects only</option>\n <option value=\"never\">Never use escrow</option>\n </Select>\n </div>\n </div>\n </Card>\n );\n\n const renderTabContent = () => {\n switch (activeTab) {\n case 'profile': return renderProfileSettings();\n case 'privacy': return renderPrivacySettings();\n case 'notifications': return renderNotificationSettings();\n case 'marketplace': return renderMarketplaceSettings();\n case 'security': return renderSecuritySettings();\n case 'payments': return renderPaymentSettings();\n default: return renderProfileSettings();\n }\n };\n\n return (\n <div className=\"stack-lg\">\n {/* Header */}\n <div className=\"flex items-center justify-between\">\n <div>\n <h1 className=\"text-heading-2\">Marketplace Settings</h1>\n <p className=\"color-muted\">Configure your marketplace preferences and account settings</p>\n </div>\n <div className=\"flex items-center gap-sm\">\n <Button variant=\"outline\" onClick={loadSettings} disabled={loading}>\n <RefreshCw className=\"h-icon-xs w-icon-xs mr-sm\" />\n Reset\n </Button>\n <Button onClick={handleSave} loading={saving}>\n <Save className=\"h-icon-xs w-icon-xs mr-sm\" />\n Save Changes\n </Button>\n </div>\n </div>\n\n <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-md\">\n {/* Settings Navigation */}\n <Card className=\"p-md lg:col-span-1\">\n <h3 className=\"text-heading-5 mb-md\">Settings</h3>\n <div className=\"stack-xs\">\n {tabs.map((tab) => {\n const Icon = tab.icon;\n return (\n <button\n key={tab.id}\n onClick={() => setActiveTab(tab.id)}\n className={`flex items-center gap-sm p-sm rounded text-left w-full transition-colors ${\n activeTab === tab.id \n ? 'bg-primary text-primary-foreground' \n : 'hover:bg-muted'\n }`}\n >\n <Icon className=\"h-icon-xs w-icon-xs\" />\n <span className=\"text-body-sm\">{tab.label}</span>\n </button>\n );\n })}\n </div>\n </Card>\n\n {/* Settings Content */}\n <div className=\"lg:col-span-3\">\n {renderTabContent()}\n </div>\n </div>\n </div>\n );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/marketplace/settings/lib/settings-service.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/marketplace/settings/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/marketplace/settings/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/marketplace/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/marketplace/vendors/VendorsClient.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadVendors'. Either include it or remove the dependency array.","line":162,"column":5,"nodeType":"ArrayExpression","endLine":162,"endColumn":12,"suggestions":[{"desc":"Update the dependencies array to be: [loadVendors, orgId]","fix":{"range":[3474,3481],"text":"[loadVendors, orgId]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { Plus, Users, Star, Eye, Edit, Trash2, MapPin, Briefcase, Award, TrendingUp, Clock, DollarSign } from \"lucide-react\";\nimport { useState, useEffect } from 'react';\nimport { \n DataGrid,\n ViewSwitcher,\n DataActions,\n DataViewProvider,\n StateManagerProvider,\n Drawer,\n Button,\n Badge,\n Card,\n type DataRecord\n} from '@ghxstship/ui';\nimport { createBrowserClient } from '@ghxstship/auth';\nimport type { VendorProfile } from '../types';\nimport CreateVendorClient from '../drawers/CreateVendorClient';\n\ninterface VendorsClientProps {\n orgId: string;\n userId: string;\n}\n\nconst VENDORS_FIELD_CONFIGS = [\n {\n key: 'display_name',\n label: 'Vendor Name',\n type: 'text' as const,\n sortable: true,\n filterable: true,\n searchable: true,\n visible: true,\n width: 200\n },\n {\n key: 'business_type',\n label: 'Type',\n type: 'select' as const,\n options: [\n { label: 'Individual', value: 'individual' },\n { label: 'Company', value: 'company' },\n { label: 'Agency', value: 'agency' }\n ],\n sortable: true,\n filterable: true,\n visible: true,\n width: 120\n },\n {\n key: 'primary_category',\n label: 'Category',\n type: 'select' as const,\n options: [\n { label: 'Audio/Visual', value: 'audio_visual' },\n { label: 'Lighting', value: 'lighting' },\n { label: 'Staging', value: 'staging' },\n { label: 'Production', value: 'production' },\n { label: 'Creative', value: 'creative' },\n { label: 'Technical', value: 'technical' }\n ],\n sortable: true,\n filterable: true,\n visible: true,\n width: 140\n },\n {\n key: 'availability_status',\n label: 'Availability',\n type: 'select' as const,\n options: [\n { label: 'Available', value: 'available' },\n { label: 'Busy', value: 'busy' },\n { label: 'Unavailable', value: 'unavailable' }\n ],\n sortable: true,\n filterable: true,\n visible: true,\n width: 120\n },\n {\n key: 'rating',\n label: 'Rating',\n type: 'number' as const,\n sortable: true,\n filterable: true,\n visible: true,\n width: 100\n },\n {\n key: 'total_reviews',\n label: 'Reviews',\n type: 'number' as const,\n sortable: true,\n filterable: false,\n visible: true,\n width: 100\n },\n {\n key: 'total_projects',\n label: 'Projects',\n type: 'number' as const,\n sortable: true,\n filterable: false,\n visible: true,\n width: 100\n },\n {\n key: 'hourly_rate',\n label: 'Rate',\n type: 'currency' as const,\n sortable: true,\n filterable: true,\n visible: true,\n width: 120\n },\n {\n key: 'years_experience',\n label: 'Experience',\n type: 'number' as const,\n sortable: true,\n filterable: true,\n visible: true,\n width: 120\n },\n {\n key: 'status',\n label: 'Status',\n type: 'select' as const,\n options: [\n { label: 'Pending', value: 'pending' },\n { label: 'Active', value: 'active' },\n { label: 'Suspended', value: 'suspended' },\n { label: 'Inactive', value: 'inactive' }\n ],\n sortable: true,\n filterable: true,\n visible: true,\n width: 120\n }\n];\n\nexport default function VendorsClient({ orgId, userId }: VendorsClientProps) {\n const [vendors, setVendors] = useState<VendorProfile[]>([]);\n const [loading, setLoading] = useState(true);\n const [selectedView, setSelectedView] = useState<'grid' | 'list' | 'kanban' | 'calendar'>('grid');\n const [drawerOpen, setDrawerOpen] = useState(false);\n const [drawerMode, setDrawerMode] = useState<'create' | 'edit' | 'view'>('create');\n const [selectedVendor, setSelectedVendor] = useState<VendorProfile | null>(null);\n const [stats, setStats] = useState({\n total: 0,\n active: 0,\n verified: 0,\n avgRating: 0\n });\n\n const supabase = createBrowserClient();\n\n useEffect(() => {\n loadVendors();\n }, [orgId]);\n\n const loadVendors = async () => {\n try {\n setLoading(true);\n \n const { data: vendorsData, error } = await supabase\n .from('opendeck_vendor_profiles')\n .select('*')\n .eq('organization_id', orgId)\n .order('created_at', { ascending: false });\n\n if (error) throw error;\n\n setVendors(vendorsData || []);\n \n // Calculate stats\n const totalVendors = vendorsData?.length || 0;\n const activeVendors = vendorsData?.filter(v => v.status === 'active').length || 0;\n const verifiedVendors = vendorsData?.filter(v => v.verified).length || 0;\n const avgRating = totalVendors > 0 \n ? vendorsData?.reduce((sum, v) => sum + (v.rating || 0), 0) / totalVendors \n : 0;\n\n setStats({\n total: totalVendors,\n active: activeVendors,\n verified: verifiedVendors,\n avgRating: Math.round(avgRating * 10) / 10\n });\n } catch (error) {\n console.error('Error loading vendors:', error);\n } finally {\n setLoading(false);\n }\n };\n\n const handleCreateVendor = () => {\n setSelectedVendor(null);\n setDrawerMode('create');\n setDrawerOpen(true);\n };\n\n const handleEditVendor = (vendor: VendorProfile) => {\n setSelectedVendor(vendor);\n setDrawerMode('edit');\n setDrawerOpen(true);\n };\n\n const handleViewVendor = (vendor: VendorProfile) => {\n setSelectedVendor(vendor);\n setDrawerMode('view');\n setDrawerOpen(true);\n };\n\n const handleDeleteVendor = async (vendor: VendorProfile) => {\n if (!confirm('Are you sure you want to delete this vendor profile?')) return;\n\n try {\n const { error } = await supabase\n .from('opendeck_vendor_profiles')\n .delete()\n .eq('id', vendor.id);\n\n if (error) throw error;\n await loadVendors();\n } catch (error) {\n console.error('Error deleting vendor:', error);\n }\n };\n\n const handleExport = async (format: 'csv' | 'json' | 'excel') => {\n try {\n const exportData = vendors.map(vendor => ({\n name: vendor.name,\n business_name: vendor.business_name,\n business_type: vendor.business_type,\n primary_category: vendor.primary_category,\n availability_status: vendor.availability_status,\n rating: vendor.rating,\n total_reviews: vendor.total_reviews,\n total_projects: vendor.total_projects,\n hourly_rate: vendor.hourly_rate,\n currency: vendor.currency,\n years_experience: vendor.years_experience,\n status: vendor.status,\n verified: vendor.verified,\n created_at: vendor.created_at\n }));\n\n const filename = `marketplace-vendors-${new Date().toISOString().split('T')[0]}`;\n \n if (format === 'csv') {\n const csv = [\n Object.keys(exportData[0]).join(','),\n ...exportData.map(row => Object.values(row).join(','))\n ].join('\\n');\n \n const blob = new Blob([csv], { type: 'text/csv' });\n const url = URL.createObjectURL(blob);\n const a = document.createElement('a');\n a.href = url;\n a.download = `${filename}.csv`;\n a.click();\n URL.revokeObjectURL(url);\n } else if (format === 'json') {\n const json = JSON.stringify(exportData, null, 2);\n const blob = new Blob([json], { type: 'application/json' });\n const url = URL.createObjectURL(blob);\n const a = document.createElement('a');\n a.href = url;\n a.download = `${filename}.json`;\n a.click();\n URL.revokeObjectURL(url);\n }\n } catch (error) {\n console.error('Error exporting vendors:', error);\n }\n };\n\n const handleBulkAction = async (action: string, selectedIds: string[]) => {\n if (action === 'delete') {\n if (!confirm(`Are you sure you want to delete ${selectedIds.length} vendor profiles?`)) return;\n \n try {\n const { error } = await supabase\n .from('opendeck_vendor_profiles')\n .delete()\n .in('id', selectedIds);\n\n if (error) throw error;\n await loadVendors();\n } catch (error) {\n console.error('Error bulk deleting vendors:', error);\n }\n } else if (action === 'verify') {\n try {\n const { error } = await supabase\n .from('opendeck_vendor_profiles')\n .update({ verified: true, verification_date: new Date().toISOString() })\n .in('id', selectedIds);\n\n if (error) throw error;\n await loadVendors();\n } catch (error) {\n console.error('Error bulk verifying vendors:', error);\n }\n }\n };\n\n const getRowActions = (vendor: VendorProfile) => [\n {\n label: 'View',\n icon: Eye,\n onClick: () => handleViewVendor(vendor)\n },\n {\n label: 'Edit',\n icon: Edit,\n onClick: () => handleEditVendor(vendor),\n disabled: vendor.user_id !== userId\n },\n {\n label: 'Delete',\n icon: Trash2,\n onClick: () => handleDeleteVendor(vendor),\n disabled: vendor.user_id !== userId,\n variant: 'destructive' as const\n }\n ];\n\n const renderVendorCard = (vendor: VendorProfile) => {\n const statusColors = {\n pending: 'warning',\n active: 'success',\n suspended: 'destructive',\n inactive: 'secondary'\n };\n\n const availabilityColors = {\n available: 'success',\n busy: 'warning',\n unavailable: 'destructive'\n };\n\n return (\n <Card key={vendor.id} className=\"p-md hover:shadow-md transition-shadow\">\n <div className=\"flex items-start justify-between mb-sm\">\n <div className=\"flex items-center gap-sm\">\n <Users className=\"h-icon-sm w-icon-sm color-primary\" />\n <Badge variant={statusColors[vendor.status] as unknown}>\n {vendor.status}\n </Badge>\n {vendor.verified && <Badge variant=\"primary\">Verified</Badge>}\n </div>\n <Badge variant={availabilityColors[vendor.availability_status] as unknown}>\n {vendor.availability_status}\n </Badge>\n </div>\n \n <h3 className=\"text-heading-4 mb-xs\">{vendor.display_name || vendor.name}</h3>\n <p className=\"text-body-sm color-muted mb-xs\">{vendor.business_name}</p>\n <p className=\"text-body-sm color-muted mb-sm line-clamp-xs\">{vendor.tagline || vendor.bio}</p>\n \n <div className=\"flex items-center gap-md mb-sm text-body-sm color-muted\">\n <div className=\"flex items-center gap-xs\">\n <Briefcase className=\"h-icon-xs w-icon-xs\" />\n <span>{vendor.primary_category?.replace('_', ' ')}</span>\n </div>\n {vendor.years_experience && (\n <div className=\"flex items-center gap-xs\">\n <Clock className=\"h-icon-xs w-icon-xs\" />\n <span>{vendor.years_experience}y exp</span>\n </div>\n )}\n {vendor.hourly_rate && (\n <div className=\"flex items-center gap-xs\">\n <DollarSign className=\"h-icon-xs w-icon-xs\" />\n <span>{vendor.currency} {vendor.hourly_rate}/hr</span>\n </div>\n )}\n </div>\n \n <div className=\"flex items-center justify-between\">\n <div className=\"flex items-center gap-md text-body-sm color-muted\">\n <div className=\"flex items-center gap-xs\">\n <Star className=\"h-icon-xs w-icon-xs fill-current color-warning\" />\n <span>{vendor.rating || 0}</span>\n </div>\n <span>{vendor.total_reviews || 0} reviews</span>\n <span>{vendor.total_projects || 0} projects</span>\n </div>\n <div className=\"flex items-center gap-xs\">\n <Button size=\"sm\" variant=\"outline\" onClick={() => handleViewVendor(vendor)}>\n <Eye className=\"h-icon-xs w-icon-xs\" />\n </Button>\n {vendor.user_id === userId && (\n <Button size=\"sm\" variant=\"outline\" onClick={() => handleEditVendor(vendor)}>\n <Edit className=\"h-icon-xs w-icon-xs\" />\n </Button>\n )}\n </div>\n </div>\n </Card>\n );\n };\n\n return (\n <div className=\"stack-lg\">\n {/* Header */}\n <div className=\"flex items-center justify-between\">\n <div>\n <h1 className=\"text-heading-2\">Marketplace Vendors</h1>\n <p className=\"color-muted\">Browse and manage vendor profiles</p>\n </div>\n <Button onClick={handleCreateVendor}>\n <Plus className=\"h-icon-xs w-icon-xs mr-sm\" />\n Create Profile\n </Button>\n </div>\n\n {/* Stats Cards */}\n <div className=\"grid grid-cols-1 md:grid-cols-4 gap-md\">\n <Card className=\"p-md\">\n <div className=\"flex items-center justify-between\">\n <div>\n <p className=\"text-body-sm color-muted\">Total Vendors</p>\n <p className=\"text-heading-3 font-bold\">{stats.total}</p>\n </div>\n <Users className=\"h-icon-lg w-icon-lg color-primary\" />\n </div>\n </Card>\n <Card className=\"p-md\">\n <div className=\"flex items-center justify-between\">\n <div>\n <p className=\"text-body-sm color-muted\">Active</p>\n <p className=\"text-heading-3 font-bold\">{stats.active}</p>\n </div>\n <TrendingUp className=\"h-icon-lg w-icon-lg color-success\" />\n </div>\n </Card>\n <Card className=\"p-md\">\n <div className=\"flex items-center justify-between\">\n <div>\n <p className=\"text-body-sm color-muted\">Verified</p>\n <p className=\"text-heading-3 font-bold\">{stats.verified}</p>\n </div>\n <Award className=\"h-icon-lg w-icon-lg color-warning\" />\n </div>\n </Card>\n <Card className=\"p-md\">\n <div className=\"flex items-center justify-between\">\n <div>\n <p className=\"text-body-sm color-muted\">Avg Rating</p>\n <p className=\"text-heading-3 font-bold\">{stats.avgRating}</p>\n </div>\n <Star className=\"h-icon-lg w-icon-lg color-secondary\" />\n </div>\n </Card>\n </div>\n\n {/* Data View */}\n <StateManagerProvider>\n <DataViewProvider\n data={vendors}\n fields={VENDORS_FIELD_CONFIGS}\n onExport={handleExport}\n onBulkAction={handleBulkAction}\n >\n <Card className=\"p-md\">\n <div className=\"flex items-center justify-between mb-md\">\n <ViewSwitcher\n currentView={selectedView}\n onViewChange={setSelectedView}\n availableViews={['grid', 'list']}\n />\n </div>\n\n <div className=\"stack-sm\">\n <DataActions\n onExport={handleExport}\n showBulkActions={true}\n bulkActions={[\n { label: 'Delete Selected', value: 'delete', variant: 'destructive' },\n { label: 'Verify Selected', value: 'verify', variant: 'default' }\n ]}\n />\n \n {selectedView === 'grid' ? (\n <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-md\">\n {vendors.map(renderVendorCard)}\n </div>\n ) : (\n <DataGrid\n viewType={selectedView}\n onRowClick={handleViewVendor}\n rowActions={getRowActions}\n emptyMessage=\"No vendors found\"\n loading={loading}\n className=\"min-h-content-lg\"\n />\n )}\n </div>\n </Card>\n </DataViewProvider>\n </StateManagerProvider>\n\n {/* Create/Edit Drawer */}\n <Drawer\n isOpen={drawerOpen}\n onClose={() => setDrawerOpen(false)}\n title={drawerMode === 'create' ? 'Create Vendor Profile' : drawerMode === 'edit' ? 'Edit Vendor Profile' : 'View Vendor Profile'}\n size=\"lg\"\n >\n <CreateVendorClient\n mode={drawerMode}\n vendor={selectedVendor}\n onSuccess={() => {\n setDrawerOpen(false);\n loadVendors();\n }}\n onCancel={() => setDrawerOpen(false)}\n />\n </Drawer>\n </div>\n );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/marketplace/vendors/lib/vendors-service.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/marketplace/vendors/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/marketplace/vendors/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/marketplace/views/CalendarView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/marketplace/views/CardView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/marketplace/views/ChartView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/marketplace/views/FormView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/marketplace/views/GalleryView.tsx","messages":[{"ruleId":"@next/next/no-img-element","severity":1,"message":"Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` or a custom image loader to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","line":140,"column":19,"nodeType":"JSXOpeningElement","endLine":144,"endColumn":21}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { useQuery } from '@tanstack/react-query';\nimport {\n  Badge,\n  Button,\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger\n} from \"@ghxstship/ui\";\nimport { Button ,\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuSeparator\n} from '@ghxstship/ui';\nimport {\n  Dropdown,\n  \n  DropdownItem,\n  DropdownMenuTrigger\n} from '@ghxstship/ui';\nimport {\n  MoreHorizontal,\n  Eye,\n  Edit,\n  Trash2,\n  Star,\n  StarOff,\n  Archive,\n  Image as ImageIcon,\n  DollarSign,\n  MapPin,\n  Calendar,\n  User\n} from 'lucide-react';\nimport { marketplaceService } from '../lib/marketplace-service';\nimport type { MarketplaceListing, ListingFilters } from '../types';\n\ninterface ImageViewProps {\n  orgId: string;\n  filters?: ListingFilters;\n  onListingSelect?: (listing: MarketplaceListing) => void;\n  onListingEdit?: (listing: MarketplaceListing) => void;\n  onListingDelete?: (listing: MarketplaceListing) => void;\n  onListingView?: (listing: MarketplaceListing) => void;\n  selectedListings?: string[];\n  onSelectionChange?: (selectedIds: string[]) => void;\n}\n\nexport default function ImageView({\n  orgId,\n  filters = {},\n  onListingSelect,\n  onListingEdit,\n  onListingDelete,\n  onListingView,\n  selectedListings = [],\n  onSelectionChange\n}: ImageViewProps) {\n  // Fetch listings\n  const { data: listingsResponse, isLoading, error } = useQuery({\n    queryKey: ['marketplace-listings', orgId, filters],\n    queryFn: () => marketplaceService.getListings(orgId, filters),\n    refetchInterval: 30000\n  });\n\n  const listings = listingsResponse?.listings || [];\n\n  // Handle selection\n  const handleSelectListing = (listingId: string, checked: boolean) => {\n    if (checked) {\n      onSelectionChange?.([...selectedListings, listingId]);\n    } else {\n      onSelectionChange?.(selectedListings.filter(id => id !== listingId));\n    }\n  };\n\n  // Format currency\n  const formatCurrency = (amount?: number, currency: string = 'USD') => {\n    if (!amount) return '';\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency,\n      minimumFractionDigits: 0\n    }).format(amount);\n  };\n\n  // Get type badge variant\n  const getTypeVariant = (type: string) => {\n    switch (type) {\n      case 'offer': return 'default';\n      case 'request': return 'secondary';\n      case 'exchange': return 'outline';\n      default: return 'secondary';\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-lg\">\n        {Array.from({ length: 8 }).map((_, i) => (\n          <div key={i} className=\"aspect-[4/3] bg-muted animate-pulse rounded-lg\" />\n        ))}\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"text-center py-xsxl\">\n        <p className=\"text-muted-foreground mb-4\">Failed to load listings</p>\n        <Button variant=\"outline\" onClick={() => window.location.reload()}>\n          Retry\n        </Button>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-lg\">\n      {/* Image Grid */}\n      <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-lg\">\n        {listings.map((listing) => {\n          const primaryImage = listing.images?.find(img => img.isPrimary)?.url;\n\n          return (\n            <div\n              key={listing.id}\n              className={`group relative aspect-[4/3] bg-muted rounded-lg overflow-hidden cursor-pointer transition-all hover:shadow-lg ${\n                selectedListings.includes(listing.id) ? 'ring-2 ring-primary' : ''\n              }`}\n              onClick={() => onListingSelect?.(listing)}\n            >\n              {/* Image */}\n              <div className=\"absolute inset-0\">\n                {primaryImage ? (\n                  <img\n                    src={primaryImage}\n                    alt={listing.title}\n                    className=\"w-full h-full object-cover\"\n                  />\n                ) : (\n                  <div className=\"w-full h-full bg-muted flex items-center justify-center\">\n                    <ImageIcon className=\"h-icon-2xl w-icon-2xl text-muted-foreground\" />\n                  </div>\n                )}\n\n                {/* Overlay */}\n                <div className=\"absolute inset-0 bg-black/60 opacity-0 group-hover:opacity-100 transition-opacity flex items-center justify-center\">\n                  <Button\n                    size=\"sm\"\n                    onClick={(e) => {\n                      e.stopPropagation();\n                      onListingView?.(listing);\n                    }}\n                  >\n                    <Eye className=\"h-icon-xs w-icon-xs mr-2\" />\n                    View Details\n                  </Button>\n                </div>\n              </div>\n\n              {/* Selection Checkbox */}\n              {onSelectionChange && (\n                <div className=\"absolute top-xs left-2\">\n                  <input\n                    type=\"checkbox\"\n                    checked={selectedListings.includes(listing.id)}\n                    onChange={(e) => {\n                      e.stopPropagation();\n                      handleSelectListing(listing.id, e.target.checked);\n                    }}\n                    className=\"rounded border-white/20 bg-white/10 backdrop-blur-sm\"\n                  />\n                </div>\n              )}\n\n              {/* Badges */}\n              <div className=\"absolute top-xs right-2 flex gap-xs\">\n                <Badge variant={getTypeVariant(listing.type)} className=\"text-xs\">\n                  {listing.type}\n                </Badge>\n                {listing.featured && (\n                  <div className=\"bg-yellow-500 text-yellow-900 px-xs.5 py-0.5 rounded text-xs font-medium\">\n                    Featured\n                  </div>\n                )}\n              </div>\n\n              {/* Content Overlay */}\n              <div className=\"absolute bottom-0 left-0 right-0 bg-gradient-to-t from-black/80 to-transparent p-md\">\n                <h3 className=\"text-white font-semibold text-sm line-clamp-xs mb-1\">\n                  {listing.title}\n                </h3>\n\n                {listing.pricing?.amount && (\n                  <div className=\"text-white/90 font-medium text-sm mb-1\">\n                    {formatCurrency(listing.pricing.amount, listing.pricing.currency)}\n                  </div>\n                )}\n\n                <div className=\"flex items-center justify-between text-xs text-white/70\">\n                  <div className=\"flex items-center gap-xs\">\n                    <MapPin className=\"h-3 w-3\" />\n                    <span>\n                      {listing.location?.city || 'Remote'}\n                    </span>\n                  </div>\n                  <div className=\"flex items-center gap-xs\">\n                    <Calendar className=\"h-3 w-3\" />\n                    <span>\n                      {new Date(listing.created_at).toLocaleDateString()}\n                    </span>\n                  </div>\n                </div>\n              </div>\n\n              {/* Actions Menu */}\n              <div className=\"absolute top-xs left-2\">\n                <DropdownMenu>\n                  <DropdownMenuTrigger asChild>\n                    <Button\n                      size=\"sm\"\n                      variant=\"secondary\"\n                      className=\"h-icon-md w-icon-md p-0 opacity-0 group-hover:opacity-100 transition-opacity\"\n                      onClick={(e) => e.stopPropagation()}\n                    >\n                      <MoreHorizontal className=\"h-3 w-3\" />\n                    </Button>\n                  </DropdownMenuTrigger>\n                  <DropdownMenuContent align=\"start\">\n                    <DropdownMenuItem onClick={() => onListingView?.(listing)}>\n                      <Eye className=\"mr-2 h-icon-xs w-icon-xs\" />\n                      View\n                    </DropdownMenuItem>\n                    <DropdownMenuItem onClick={() => onListingEdit?.(listing)}>\n                      <Edit className=\"mr-2 h-icon-xs w-icon-xs\" />\n                      Edit\n                    </DropdownMenuItem>\n                    <DropdownMenuItem\n                      onClick={() => marketplaceService.featureListing(orgId, '', listing.id, !listing.featured)}\n                    >\n                      {listing.featured ? (\n                        <>\n                          <StarOff className=\"mr-2 h-icon-xs w-icon-xs\" />\n                          Unfeature\n                        </>\n                      ) : (\n                        <>\n                          <Star className=\"mr-2 h-icon-xs w-icon-xs\" />\n                          Feature\n                        </>\n                      )}\n                    </DropdownMenuItem>\n                    <DropdownMenuItem\n                      onClick={() => marketplaceService.archiveListing(orgId, '', listing.id)}\n                    >\n                      <Archive className=\"mr-2 h-icon-xs w-icon-xs\" />\n                      Archive\n                    </DropdownMenuItem>\n                    <DropdownMenuItem\n                      onClick={() => onListingDelete?.(listing)}\n                      className=\"text-destructive\"\n                    >\n                      <Trash2 className=\"mr-2 h-icon-xs w-icon-xs\" />\n                      Delete\n                    </DropdownMenuItem>\n                  </DropdownMenuContent>\n                </DropdownMenu>\n              </div>\n            </div>\n          );\n        })}\n      </div>\n\n      {/* Empty state */}\n      {listings.length === 0 && (\n        <div className=\"text-center py-xsxl\">\n          <div className=\"mx-auto w-component-md h-component-md bg-muted rounded-full flex items-center justify-center mb-4\">\n            <ImageIcon className=\"h-icon-md w-icon-md text-muted-foreground\" />\n          </div>\n          <h3 className=\"text-lg font-medium mb-2\">No listings found</h3>\n          <p className=\"text-muted-foreground mb-4\">\n            Try adjusting your filters or create your first listing\n          </p>\n          <Button>Create Listing</Button>\n        </div>\n      )}\n\n      {/* Summary */}\n      <div className=\"flex items-center justify-between text-sm text-muted-foreground border-t pt-4\">\n        <span>\n          {listings.length} listing{listings.length !== 1 ? 's' : ''} •\n          {selectedListings.length > 0 && ` ${selectedListings.length} selected`}\n        </span>\n        <span>\n          Last updated: {new Date().toLocaleTimeString()}\n        </span>\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/marketplace/views/GanttView.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"The 'projects' logical expression could make the dependencies of useMemo Hook (at line 47) change on every render. To fix this, wrap the initialization of 'projects' in its own useMemo() Hook.","line":26,"column":9,"nodeType":"VariableDeclarator","endLine":26,"endColumn":42}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { useQuery } from '@tanstack/react-query';\nimport {\n  Badge,\n  Card,\n  CardContent,\n  CardHeader,\n  CardTitle\n} from \"@ghxstship/ui\";\nimport { Badge } from '@ghxstship/ui';\nimport { GitBranch, Calendar, Clock, User } from 'lucide-react';\nimport { marketplaceService } from '../lib/marketplace-service';\nimport type { MarketplaceProject } from '../types';\n\ninterface GanttViewProps {\n  orgId: string;\n}\n\nexport default function GanttView({ orgId }: GanttViewProps) {\n  const { data: projectsResponse, isLoading, error } = useQuery({\n    queryKey: ['marketplace-projects', orgId],\n    queryFn: () => marketplaceService.getProjects(orgId),\n    refetchInterval: 30000\n  });\n\n  const projects = projectsResponse || [];\n\n  // Calculate timeline bounds\n  const timelineBounds = React.useMemo(() => {\n    if (projects.length === 0) return null;\n\n    const dates = projects.flatMap(project => [\n      project.start_date ? new Date(project.start_date) : null,\n      project.end_date ? new Date(project.end_date) : null,\n    ]).filter(Boolean) as Date[];\n\n    if (dates.length === 0) return null;\n\n    const minDate = new Date(Math.min(...dates.map(d => d.getTime())));\n    const maxDate = new Date(Math.max(...dates.map(d => d.getTime())));\n\n    // Extend bounds by 30 days on each side\n    minDate.setDate(minDate.getDate() - 30);\n    maxDate.setDate(maxDate.getDate() + 30);\n\n    return { minDate, maxDate };\n  }, [projects]);\n\n  // Generate month columns\n  const monthColumns = React.useMemo(() => {\n    if (!timelineBounds) return [];\n\n    const columns = [];\n    const current = new Date(timelineBounds.minDate);\n\n    while (current <= timelineBounds.maxDate) {\n      columns.push({\n        month: current.getMonth(),\n        year: current.getFullYear(),\n        label: current.toLocaleDateString('en-US', { month: 'short', year: 'numeric' }),\n        date: new Date(current)\n      });\n      current.setMonth(current.getMonth() + 1);\n    }\n\n    return columns;\n  }, [timelineBounds]);\n\n  const getProjectPosition = (project: MarketplaceProject) => {\n    if (!timelineBounds || !project.start_date || !project.end_date) return null;\n\n    const start = new Date(project.start_date);\n    const end = new Date(project.end_date);\n    const totalDays = (timelineBounds.maxDate.getTime() - timelineBounds.minDate.getTime()) / (1000 * 60 * 60 * 24);\n    const startOffset = (start.getTime() - timelineBounds.minDate.getTime()) / (1000 * 60 * 60 * 24);\n    const duration = (end.getTime() - start.getTime()) / (1000 * 60 * 60 * 24);\n\n    return {\n      left: `${(startOffset / totalDays) * 100}%`,\n      width: `${Math.max((duration / totalDays) * 100, 2)}%`\n    };\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'completed': return 'bg-green-500';\n      case 'in_progress': return 'bg-blue-500';\n      case 'open': return 'bg-yellow-500';\n      case 'draft': return 'bg-gray-500';\n      default: return 'bg-gray-500';\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-md\">\n        <div className=\"h-icon-lg bg-muted animate-pulse rounded\" />\n        <div className=\"overflow-x-auto\">\n          <div className=\"min-w-content-xlarge space-y-xs\">\n            {Array.from({ length: 4 }).map((_, i) => (\n              <div key={i} className=\"h-icon-2xl bg-muted animate-pulse rounded\" />\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"text-center py-xsxl\">\n        <GitBranch className=\"mx-auto h-icon-2xl w-icon-2xl text-muted-foreground mb-4\" />\n        <h3 className=\"text-lg font-medium mb-2\">Unable to load Gantt chart</h3>\n        <p className=\"text-muted-foreground\">\n          Failed to load project timeline data\n        </p>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-lg\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h2 className=\"text-2xl font-bold flex items-center gap-xs\">\n            <GitBranch className=\"h-icon-md w-icon-md\" />\n            Project Timeline\n          </h2>\n          <p className=\"text-muted-foreground\">\n            Visual project scheduling and timeline management\n          </p>\n        </div>\n        <Badge variant=\"secondary\">\n          {projects.length} project{projects.length !== 1 ? 's' : ''}\n        </Badge>\n      </div>\n\n      {projects.length === 0 ? (\n        <Card>\n          <CardContent className=\"text-center py-xsxl\">\n            <GitBranch className=\"mx-auto h-icon-2xl w-icon-2xl text-muted-foreground mb-4\" />\n            <h3 className=\"text-lg font-medium mb-2\">No projects to display</h3>\n            <p className=\"text-muted-foreground\">\n              Create projects with start and end dates to view the timeline\n            </p>\n          </CardContent>\n        </Card>\n      ) : (\n        <Card>\n          <CardHeader>\n            <CardTitle>Project Gantt Chart</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"overflow-x-auto\">\n              <div className=\"min-w-content-xlarge\">\n                {/* Month Header */}\n                <div className=\"flex border-b mb-4\">\n                  <div className=\"w-container-sm p-sm font-medium border-r bg-muted/50\">\n                    Project\n                  </div>\n                  <div className=\"flex-1 flex\">\n                    {monthColumns.map((column, index) => (\n                      <div\n                        key={`${column.year}-${column.month}`}\n                        className=\"flex-1 p-sm text-center font-medium border-r bg-muted/30 text-sm\"\n                      >\n                        {column.label}\n                      </div>\n                    ))}\n                  </div>\n                </div>\n\n                {/* Project Rows */}\n                <div className=\"space-y-xs\">\n                  {projects.map((project) => {\n                    const position = getProjectPosition(project);\n\n                    return (\n                      <div key={project.id} className=\"flex border rounded-lg hover:shadow-sm transition-shadow\">\n                        {/* Project Info */}\n                        <div className=\"w-container-sm p-md border-r\">\n                          <h3 className=\"font-medium line-clamp-xs mb-1\">\n                            {project.title}\n                          </h3>\n                          <div className=\"flex items-center gap-xs mb-2\">\n                            <Badge variant=\"outline\" className=\"text-xs\">\n                              {project.status.replace('_', ' ')}\n                            </Badge>\n                            <Badge variant=\"secondary\" className=\"text-xs\">\n                              {project.experience_level || 'Any level'}\n                            </Badge>\n                          </div>\n                          <div className=\"flex items-center gap-sm text-xs text-muted-foreground\">\n                            <div className=\"flex items-center gap-xs\">\n                              <User className=\"h-3 w-3\" />\n                              <span>{project.client_id}</span>\n                            </div>\n                            {project.budget_max && (\n                              <div className=\"flex items-center gap-xs\">\n                                <span>${project.budget_max}</span>\n                              </div>\n                            )}\n                          </div>\n                        </div>\n\n                        {/* Timeline */}\n                        <div className=\"flex-1 relative p-md min-h-toolbar\">\n                          {position ? (\n                            <div\n                              className={`absolute top-xs/2 transform -translate-y-1/2 h-icon-md rounded ${getStatusColor(project.status)} text-white text-xs flex items-center px-xs font-medium shadow-sm`}\n                              style={{\n                                left: position.left,\n                                width: position.width,\n                                minWidth: '60px'\n                              }}\n                              title={`${project.title} (${new Date(project.start_date!).toLocaleDateString()} - ${new Date(project.end_date!).toLocaleDateString()})`}\n                            >\n                              <span className=\"truncate\">{project.title}</span>\n                            </div>\n                          ) : (\n                            <div className=\"flex items-center justify-center h-full text-muted-foreground text-sm\">\n                              <div className=\"flex items-center gap-xs\">\n                                <Clock className=\"h-icon-xs w-icon-xs\" />\n                                <span>No timeline set</span>\n                              </div>\n                            </div>\n                          )}\n\n                          {/* Month grid lines */}\n                          <div className=\"absolute inset-0 flex pointer-events-none\">\n                            {monthColumns.map((_, index) => (\n                              <div\n                                key={index}\n                                className=\"flex-1 border-r border-muted-foreground/20\"\n                              />\n                            ))}\n                          </div>\n                        </div>\n                      </div>\n                    );\n                  })}\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Legend */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"text-base\">Legend</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"flex flex-wrap gap-md\">\n            <div className=\"flex items-center gap-xs\">\n              <div className=\"w-icon-xs h-icon-xs bg-green-500 rounded\" />\n              <span className=\"text-sm\">Completed</span>\n            </div>\n            <div className=\"flex items-center gap-xs\">\n              <div className=\"w-icon-xs h-icon-xs bg-blue-500 rounded\" />\n              <span className=\"text-sm\">In Progress</span>\n            </div>\n            <div className=\"flex items-center gap-xs\">\n              <div className=\"w-icon-xs h-icon-xs bg-yellow-500 rounded\" />\n              <span className=\"text-sm\">Open</span>\n            </div>\n            <div className=\"flex items-center gap-xs\">\n              <div className=\"w-icon-xs h-icon-xs bg-gray-500 rounded\" />\n              <span className=\"text-sm\">Draft</span>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/marketplace/views/KanbanView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/marketplace/views/ListView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/marketplace/views/MarketplaceDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/marketplace/views/TableView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/marketplace/views/TimelineView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/marketplace/views/ViewSwitcher.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/opendeck/OpenDeckClient.tsx","messages":[],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'load'. Either include it or remove the dependency array.","line":48,"column":32,"nodeType":"ArrayExpression","endLine":48,"endColumn":39,"suggestions":[{"desc":"Update the dependencies array to be: [load, orgId]","fix":{"range":[2025,2032],"text":"[load, orgId]"}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/opendeck/OpenDeckDashboard.tsx","messages":[],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadDashboardData'. Either include it or remove the dependency array.","line":73,"column":6,"nodeType":"ArrayExpression","endLine":73,"endColumn":33,"suggestions":[{"desc":"Update the dependencies array to be: [orgId, userId, activeView, loadDashboardData]","fix":{"range":[1920,1947],"text":"[orgId, userId, activeView, loadDashboardData]"}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/opendeck/OpenDeckMarketplace.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/opendeck/OpenDeckVendorClient.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/opendeck/VendorProfileClient.tsx","messages":[],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadVendorProfile'. Either include it or remove the dependency array.","line":120,"column":6,"nodeType":"ArrayExpression","endLine":120,"endColumn":14,"suggestions":[{"desc":"Update the dependencies array to be: [loadVendorProfile, userId]","fix":{"range":[3533,3541],"text":"[loadVendorProfile, userId]"}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/opendeck/drawers/CreateDrawer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/opendeck/drawers/DetailDrawer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/opendeck/drawers/EditDrawer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/opendeck/lib/opendeck-service.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/opendeck/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/opendeck/views/GridView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/opendeck/views/KanbanView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/opendeck/views/ListView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/people/PeopleClient.tsx","messages":[],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadPeopleData'. Either include it or remove the dependency array.","line":17,"column":6,"nodeType":"ArrayExpression","endLine":17,"endColumn":13,"suggestions":[{"desc":"Update the dependencies array to be: [loadPeopleData, orgId]","fix":{"range":[731,738],"text":"[loadPeopleData, orgId]"}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/people/PeopleClient.unified.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/people/[id]/edit/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/people/[id]/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/people/assignments/AssignmentsClient.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/people/assignments/CreateAssignmentClient.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/people/assignments/drawers/AssignmentDrawer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/people/assignments/lib/assignmentService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/people/assignments/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/people/assignments/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/people/assignments/views/AssignmentGridView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/people/competencies/CompetenciesClient.tsx","messages":[],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadCompetencies'. Either include it or remove the dependency array.","line":53,"column":6,"nodeType":"ArrayExpression","endLine":53,"endColumn":31,"suggestions":[{"desc":"Update the dependencies array to be: [loadCompetencies, orgId, selectedCategory]","fix":{"range":[1477,1502],"text":"[loadCompetencies, orgId, selectedCategory]"}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/people/competencies/CreateCompetencyClient.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/people/competencies/lib/competencyService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/people/competencies/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/people/competencies/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/people/contracts/ContractsClient.tsx","messages":[],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'loadContractsData' and 'sb'. Either include them or remove the dependency array.","line":69,"column":5,"nodeType":"ArrayExpression","endLine":69,"endColumn":12,"suggestions":[{"desc":"Update the dependencies array to be: [loadContractsData, orgId, sb]","fix":{"range":[1942,1949],"text":"[loadContractsData, orgId, sb]"}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/people/contracts/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/people/contracts/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/people/create/PeopleCreateClient.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/people/create/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/people/directory/CreatePersonClient.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/people/directory/DirectoryClient.tsx","messages":[],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadPeople'. Either include it or remove the dependency array.","line":41,"column":6,"nodeType":"ArrayExpression","endLine":41,"endColumn":49,"suggestions":[{"desc":"Update the dependencies array to be: [loadPeople, orgId, selectedDepartment, selectedStatus]","fix":{"range":[1240,1283],"text":"[loadPeople, orgId, selectedDepartment, selectedStatus]"}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/people/directory/drawers/CreatePersonDrawer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/people/directory/drawers/EditPersonDrawer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/people/directory/lib/directoryService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/people/directory/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/people/directory/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/people/drawers/CreateDrawer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/people/drawers/EditDrawer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/people/drawers/ViewDrawer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/people/drawers/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/people/endorsements/CreateEndorsementClient.tsx","messages":[],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'loadCompetencies' and 'loadPeople'. Either include them or remove the dependency array.","line":73,"column":6,"nodeType":"ArrayExpression","endLine":73,"endColumn":21,"suggestions":[{"desc":"Update the dependencies array to be: [isOpen, loadCompetencies, loadPeople, orgId]","fix":{"range":[2139,2154],"text":"[isOpen, loadCompetencies, loadPeople, orgId]"}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/people/endorsements/EndorsementsClient.tsx","messages":[],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadEndorsements'. Either include it or remove the dependency array.","line":73,"column":6,"nodeType":"ArrayExpression","endLine":73,"endColumn":29,"suggestions":[{"desc":"Update the dependencies array to be: [loadEndorsements, orgId, selectedRating]","fix":{"range":[1993,2016],"text":"[loadEndorsements, orgId, selectedRating]"}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/people/endorsements/lib/endorsementsService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/people/endorsements/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/people/endorsements/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/people/error.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/people/lib/api.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/people/lib/export.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/people/lib/import.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/people/lib/mutations.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/people/lib/people-service.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/people/lib/permissions.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/people/lib/queries.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/people/lib/realtime.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/people/lib/validations.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/people/loading.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/people/metadata.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/people/network/CreateNetworkConnectionClient.tsx","messages":[],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'loadPeople' and 'loadProjects'. Either include them or remove the dependency array.","line":79,"column":6,"nodeType":"ArrayExpression","endLine":79,"endColumn":21,"suggestions":[{"desc":"Update the dependencies array to be: [isOpen, loadPeople, loadProjects, orgId]","fix":{"range":[2374,2389],"text":"[isOpen, loadPeople, loadProjects, orgId]"}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/people/network/NetworkClient.tsx","messages":[],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadNetworkData'. Either include it or remove the dependency array.","line":65,"column":6,"nodeType":"ArrayExpression","endLine":65,"endColumn":57,"suggestions":[{"desc":"Update the dependencies array to be: [loadNetworkData, orgId, selectedRelationshipType, selectedStrength]","fix":{"range":[1951,2002],"text":"[loadNetworkData, orgId, selectedRelationshipType, selectedStrength]"}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/people/network/lib/networkService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/people/network/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/people/network/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/people/not-found.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/people/onboarding/CreateOnboardingWorkflowClient.tsx","messages":[],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadData'. Either include it or remove the dependency array.","line":35,"column":5,"nodeType":"ArrayExpression","endLine":35,"endColumn":12,"suggestions":[{"desc":"Update the dependencies array to be: [loadData, orgId]","fix":{"range":[1130,1137],"text":"[loadData, orgId]"}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/people/onboarding/OnboardingClient.tsx","messages":[],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'loadOnboardingData' and 'sb'. Either include them or remove the dependency array.","line":69,"column":5,"nodeType":"ArrayExpression","endLine":69,"endColumn":12,"suggestions":[{"desc":"Update the dependencies array to be: [loadOnboardingData, orgId, sb]","fix":{"range":[1969,1976],"text":"[loadOnboardingData, orgId, sb]"}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/people/onboarding/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/people/onboarding/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/people/overview/OverviewClient.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/people/overview/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/people/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/people/roles/CreateRoleClient.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/people/roles/RolesClient.tsx","messages":[],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadRoles'. Either include it or remove the dependency array.","line":46,"column":6,"nodeType":"ArrayExpression","endLine":46,"endColumn":48,"suggestions":[{"desc":"Update the dependencies array to be: [loadRoles, orgId, selectedDepartment, selectedLevel]","fix":{"range":[1444,1486],"text":"[loadRoles, orgId, selectedDepartment, selectedLevel]"}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/people/roles/lib/rolesService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/people/roles/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/people/roles/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/people/shortlists/CreateShortlistClient.tsx","messages":[],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'loadProjects' and 'loadRoles'. Either include them or remove the dependency array.","line":72,"column":6,"nodeType":"ArrayExpression","endLine":72,"endColumn":21,"suggestions":[{"desc":"Update the dependencies array to be: [isOpen, loadProjects, loadRoles, orgId]","fix":{"range":[2013,2028],"text":"[isOpen, loadProjects, loadRoles, orgId]"}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/people/shortlists/ShortlistsClient.tsx","messages":[],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadShortlists'. Either include it or remove the dependency array.","line":59,"column":6,"nodeType":"ArrayExpression","endLine":59,"endColumn":30,"suggestions":[{"desc":"Update the dependencies array to be: [loadShortlists, orgId, selectedPurpose]","fix":{"range":[1654,1678],"text":"[loadShortlists, orgId, selectedPurpose]"}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/people/shortlists/lib/shortlistsService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/people/shortlists/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/people/shortlists/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/people/training/CreateTrainingRecordClient.tsx","messages":[],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadData'. Either include it or remove the dependency array.","line":33,"column":5,"nodeType":"ArrayExpression","endLine":33,"endColumn":12,"suggestions":[{"desc":"Update the dependencies array to be: [loadData, orgId]","fix":{"range":[1026,1033],"text":"[loadData, orgId]"}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/people/training/TrainingClient.tsx","messages":[],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'loadTrainingData' and 'sb'. Either include them or remove the dependency array.","line":68,"column":5,"nodeType":"ArrayExpression","endLine":68,"endColumn":12,"suggestions":[{"desc":"Update the dependencies array to be: [loadTrainingData, orgId, sb]","fix":{"range":[1889,1896],"text":"[loadTrainingData, orgId, sb]"}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/people/training/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/people/training/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/people/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/people/views/CalendarView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/people/views/CardView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/people/views/GalleryView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/people/views/KanbanView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/people/views/ListView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/people/views/PeopleChartView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/people/views/TableView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/people/views/TimelineView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/pipeline/PipelineClient.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/pipeline/[id]/edit/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/pipeline/[id]/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/pipeline/contracting/ContractingClient.tsx","messages":[],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadData'. Either include it or remove the dependency array.","line":65,"column":6,"nodeType":"ArrayExpression","endLine":65,"endColumn":13,"suggestions":[{"desc":"Update the dependencies array to be: [loadData, orgId]","fix":{"range":[2171,2178],"text":"[loadData, orgId]"}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/pipeline/contracting/CreateContractClient.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/pipeline/contracting/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/pipeline/create/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/pipeline/drawers/CreateDrawer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/pipeline/drawers/EditDrawer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/pipeline/drawers/ViewDrawer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/pipeline/drawers/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/pipeline/lib/pipeline-service.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/pipeline/manning/CreateManningSlotClient.tsx","messages":[],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadProjects'. Either include it or remove the dependency array.","line":66,"column":6,"nodeType":"ArrayExpression","endLine":66,"endColumn":21,"suggestions":[{"desc":"Update the dependencies array to be: [isOpen, loadProjects, orgId]","fix":{"range":[1977,1992],"text":"[isOpen, loadProjects, orgId]"}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/pipeline/manning/ManningClient.tsx","messages":[],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadProjects'. Either include it or remove the dependency array.","line":42,"column":6,"nodeType":"ArrayExpression","endLine":42,"endColumn":13,"suggestions":[{"desc":"Update the dependencies array to be: [loadProjects, orgId]","fix":{"range":[1234,1241],"text":"[loadProjects, orgId]"}}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadManningSlots'. Either include it or remove the dependency array.","line":50,"column":6,"nodeType":"ArrayExpression","endLine":50,"endColumn":23,"suggestions":[{"desc":"Update the dependencies array to be: [loadManningSlots, selectedProject]","fix":{"range":[1460,1477],"text":"[loadManningSlots, selectedProject]"}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/pipeline/manning/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/pipeline/onboarding/CreateOnboardingTaskClient.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/pipeline/onboarding/OnboardingClient.tsx","messages":[],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadData'. Either include it or remove the dependency array.","line":131,"column":6,"nodeType":"ArrayExpression","endLine":131,"endColumn":13,"suggestions":[{"desc":"Update the dependencies array to be: [loadData, orgId]","fix":{"range":[3866,3873],"text":"[loadData, orgId]"}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/pipeline/onboarding/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/pipeline/overview/OverviewClient.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/pipeline/overview/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/pipeline/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/pipeline/training/CreateTrainingClient.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/pipeline/training/TrainingClient.tsx","messages":[],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadData'. Either include it or remove the dependency array.","line":79,"column":6,"nodeType":"ArrayExpression","endLine":79,"endColumn":13,"suggestions":[{"desc":"Update the dependencies array to be: [loadData, orgId]","fix":{"range":[2541,2548],"text":"[loadData, orgId]"}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/pipeline/training/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/pipeline/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/pipeline/views/CalendarView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/pipeline/views/ChartView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/pipeline/views/FormView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/pipeline/views/GalleryView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/pipeline/views/GridView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/pipeline/views/KanbanView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/pipeline/views/ListView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/pipeline/views/TimelineView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/pipeline/views/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/procurement/ProcurementClient.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/procurement/ProcurementClient.unified.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/procurement/[id]/edit/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/procurement/[id]/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/procurement/all/AllProcurementClient.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/procurement/all/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/procurement/analytics/AnalyticsClient.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/procurement/analytics/[id]/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/procurement/analytics/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/procurement/approvals/ApprovalsClient.tsx","messages":[],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'approvalsService'. Either include it or remove the dependency array.","line":151,"column":5,"nodeType":"ArrayExpression","endLine":151,"endColumn":44,"suggestions":[{"desc":"Update the dependencies array to be: [approvalsService, organizationId, filters, sort, userId]","fix":{"range":[3851,3890],"text":"[approvalsService, organizationId, filters, sort, userId]"}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/procurement/approvals/ApprovalsClient_Broken.tsx","messages":[],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'approvalsService'. Either include it or remove the dependency array.","line":241,"column":5,"nodeType":"ArrayExpression","endLine":241,"endColumn":44,"suggestions":[{"desc":"Update the dependencies array to be: [approvalsService, organizationId, filters, sort, userId]","fix":{"range":[5877,5916],"text":"[approvalsService, organizationId, filters, sort, userId]"}}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'approvalsService'. Either include it or remove the dependency array.","line":296,"column":5,"nodeType":"ArrayExpression","endLine":296,"endColumn":44,"suggestions":[{"desc":"Update the dependencies array to be: [approvalsService, organizationId, userId, loadApprovals]","fix":{"range":[7331,7370],"text":"[approvalsService, organizationId, userId, loadApprovals]"}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/procurement/approvals/CreatePolicyClient.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/procurement/approvals/[id]/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/procurement/approvals/lib/approvalsService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/procurement/approvals/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/procurement/approvals/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/procurement/approvals/views/ApprovalGridView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/procurement/catalog/CatalogClient.tsx","messages":[],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadCatalogItems'. Either include it or remove the dependency array.","line":39,"column":6,"nodeType":"ArrayExpression","endLine":39,"endColumn":13,"suggestions":[{"desc":"Update the dependencies array to be: [loadCatalogItems, orgId]","fix":{"range":[1441,1448],"text":"[loadCatalogItems, orgId]"}}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'filterItems'. Either include it or remove the dependency array.","line":45,"column":6,"nodeType":"ArrayExpression","endLine":45,"endColumn":59,"suggestions":[{"desc":"Update the dependencies array to be: [catalogItems, searchQuery, typeFilter, statusFilter, filterItems]","fix":{"range":[1612,1665],"text":"[catalogItems, searchQuery, typeFilter, statusFilter, filterItems]"}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/procurement/catalog/CreateCatalogItemClient.tsx","messages":[],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'loadCategories' and 'loadVendors'. Either include them or remove the dependency array.","line":82,"column":6,"nodeType":"ArrayExpression","endLine":82,"endColumn":21,"suggestions":[{"desc":"Update the dependencies array to be: [isOpen, loadCategories, loadVendors, orgId]","fix":{"range":[2362,2377],"text":"[isOpen, loadCategories, loadVendors, orgId]"}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/procurement/catalog/[id]/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/procurement/catalog/lib/catalogService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/procurement/catalog/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/procurement/catalog/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/procurement/catalog/views/CatalogDashboardView.tsx","messages":[],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'setTopCategories' and 'setTopSuppliers'. Either include them or remove the dependency array.","line":70,"column":5,"nodeType":"ArrayExpression","endLine":70,"endColumn":12,"suggestions":[{"desc":"Update the dependencies array to be: [items, setTopCategories, setTopSuppliers]","fix":{"range":[2437,2444],"text":"[items, setTopCategories, setTopSuppliers]"}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/procurement/catalog/views/CatalogGridView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/procurement/catalog/views/CatalogKanbanView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/procurement/catalog/views/CatalogListView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/procurement/catalog/views/CatalogTableView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/procurement/categories/CategoriesClient.tsx","messages":[],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadCategories'. Either include it or remove the dependency array.","line":37,"column":6,"nodeType":"ArrayExpression","endLine":37,"endColumn":13,"suggestions":[{"desc":"Update the dependencies array to be: [loadCategories, orgId]","fix":{"range":[1326,1333],"text":"[loadCategories, orgId]"}}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'filterCategories'. Either include it or remove the dependency array.","line":43,"column":6,"nodeType":"ArrayExpression","endLine":43,"endColumn":57,"suggestions":[{"desc":"Update the dependencies array to be: [categories, searchQuery, typeFilter, statusFilter, filterCategories]","fix":{"range":[1502,1553],"text":"[categories, searchQuery, typeFilter, statusFilter, filterCategories]"}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/procurement/categories/CreateCategoryClient.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/procurement/categories/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/procurement/contracts/ContractsClient.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/procurement/contracts/[id]/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/procurement/contracts/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/procurement/create/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/procurement/drawers/BulkDrawer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/procurement/drawers/CreateDrawer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/procurement/drawers/DetailDrawer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/procurement/drawers/EditDrawer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/procurement/drawers/ExportDrawer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/procurement/drawers/HistoryDrawer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/procurement/drawers/ImportDrawer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/procurement/feedback/FeedbackClient.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/procurement/feedback/[id]/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/procurement/feedback/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/procurement/hooks/useProcurementOverview.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/procurement/integrations/IntegrationsClient.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/procurement/integrations/[id]/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/procurement/integrations/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/procurement/lib/api.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/procurement/lib/export.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/procurement/lib/import.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/procurement/lib/mutations.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/procurement/lib/permissions.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/procurement/lib/procurement-service.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/procurement/lib/queries.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/procurement/lib/realtime.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/procurement/lib/validations.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/procurement/orders/CreateOrderClient.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/procurement/orders/OrdersClient.tsx","messages":[],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadOrders'. Either include it or remove the dependency array.","line":51,"column":6,"nodeType":"ArrayExpression","endLine":51,"endColumn":13,"suggestions":[{"desc":"Update the dependencies array to be: [loadOrders, orgId]","fix":{"range":[1705,1712],"text":"[loadOrders, orgId]"}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/procurement/orders/[id]/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/procurement/orders/lib/orderService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/procurement/orders/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/procurement/orders/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/procurement/orders/views/OrderDashboardView.tsx","messages":[],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'setTopVendors'. Either include it or remove the dependency array.","line":70,"column":5,"nodeType":"ArrayExpression","endLine":70,"endColumn":13,"suggestions":[{"desc":"Update the dependencies array to be: [orders, setTopVendors]","fix":{"range":[2416,2424],"text":"[orders, setTopVendors]"}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/procurement/orders/views/OrderGridView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/procurement/orders/views/OrderKanbanView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/procurement/orders/views/OrderTableView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/procurement/overview/ProcurementOverviewClient.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/procurement/overview/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/procurement/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/procurement/products/CreateProductClient.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/procurement/products/ProductsClient.tsx","messages":[],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadProducts'. Either include it or remove the dependency array.","line":51,"column":6,"nodeType":"ArrayExpression","endLine":51,"endColumn":13,"suggestions":[{"desc":"Update the dependencies array to be: [loadProducts, orgId]","fix":{"range":[1597,1604],"text":"[loadProducts, orgId]"}}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'filterProducts'. Either include it or remove the dependency array.","line":57,"column":6,"nodeType":"ArrayExpression","endLine":57,"endColumn":29,"suggestions":[{"desc":"Update the dependencies array to be: [filterProducts, products, searchQuery]","fix":{"range":[1771,1794],"text":"[filterProducts, products, searchQuery]"}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/procurement/products/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/procurement/requests/CreateRequestClient.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/procurement/requests/[id]/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/procurement/requests/drawers/EditRequestDrawer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/procurement/requests/drawers/ViewRequestDrawer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/procurement/requests/lib/requestsService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/procurement/requests/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/procurement/requests/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/procurement/requests/views/RequestCalendarView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/procurement/requests/views/RequestDashboardView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/procurement/requests/views/RequestGridView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/procurement/requests/views/RequestKanbanView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/procurement/requests/views/RequestTableView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/procurement/services/CreateServiceClient.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/procurement/services/ServicesClient.tsx","messages":[],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadServices'. Either include it or remove the dependency array.","line":52,"column":6,"nodeType":"ArrayExpression","endLine":52,"endColumn":13,"suggestions":[{"desc":"Update the dependencies array to be: [loadServices, orgId]","fix":{"range":[1608,1615],"text":"[loadServices, orgId]"}}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'filterServices'. Either include it or remove the dependency array.","line":58,"column":6,"nodeType":"ArrayExpression","endLine":58,"endColumn":29,"suggestions":[{"desc":"Update the dependencies array to be: [services, searchQuery, filterServices]","fix":{"range":[1782,1805],"text":"[services, searchQuery, filterServices]"}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/procurement/services/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/procurement/tracking/CreateTrackingClient.tsx","messages":[],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadAvailableOrders'. Either include it or remove the dependency array.","line":69,"column":6,"nodeType":"ArrayExpression","endLine":69,"endColumn":21,"suggestions":[{"desc":"Update the dependencies array to be: [isOpen, loadAvailableOrders, orgId]","fix":{"range":[2103,2118],"text":"[isOpen, loadAvailableOrders, orgId]"}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/procurement/tracking/TrackingClient.tsx","messages":[],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadOrders'. Either include it or remove the dependency array.","line":41,"column":6,"nodeType":"ArrayExpression","endLine":41,"endColumn":13,"suggestions":[{"desc":"Update the dependencies array to be: [loadOrders, orgId]","fix":{"range":[1487,1494],"text":"[loadOrders, orgId]"}}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'filterOrders'. Either include it or remove the dependency array.","line":47,"column":6,"nodeType":"ArrayExpression","endLine":47,"endColumn":41,"suggestions":[{"desc":"Update the dependencies array to be: [filterOrders, orders, searchQuery, statusFilter]","fix":{"range":[1659,1694],"text":"[filterOrders, orders, searchQuery, statusFilter]"}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/procurement/tracking/[id]/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/procurement/tracking/lib/trackingService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/procurement/tracking/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/procurement/tracking/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/procurement/tracking/views/TrackingDashboardView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/procurement/tracking/views/TrackingGridView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/procurement/tracking/views/TrackingKanbanView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/procurement/tracking/views/TrackingMapView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/procurement/tracking/views/TrackingTableView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/procurement/tracking/views/TrackingTimelineView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/procurement/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/procurement/vendors/CreateVendorClient.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/procurement/vendors/VendorsClient.tsx","messages":[],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadVendors'. Either include it or remove the dependency array.","line":41,"column":6,"nodeType":"ArrayExpression","endLine":41,"endColumn":13,"suggestions":[{"desc":"Update the dependencies array to be: [loadVendors, orgId]","fix":{"range":[1294,1301],"text":"[loadVendors, orgId]"}}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'filterVendors'. Either include it or remove the dependency array.","line":47,"column":6,"nodeType":"ArrayExpression","endLine":47,"endColumn":42,"suggestions":[{"desc":"Update the dependencies array to be: [vendors, searchQuery, statusFilter, filterVendors]","fix":{"range":[1467,1503],"text":"[vendors, searchQuery, statusFilter, filterVendors]"}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/procurement/vendors/[id]/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/procurement/vendors/lib/vendorService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/procurement/vendors/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/procurement/vendors/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/procurement/vendors/views/VendorDashboardView.tsx","messages":[],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'setTopCategories'. Either include it or remove the dependency array.","line":70,"column":5,"nodeType":"ArrayExpression","endLine":70,"endColumn":14,"suggestions":[{"desc":"Update the dependencies array to be: [setTopCategories, vendors]","fix":{"range":[2433,2442],"text":"[setTopCategories, vendors]"}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/procurement/vendors/views/VendorGridView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/procurement/vendors/views/VendorKanbanView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/procurement/vendors/views/VendorTableView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/procurement/views/CalendarView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/procurement/views/CardView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/procurement/views/ChartView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/procurement/views/FormView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/procurement/views/GalleryView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/procurement/views/GanttView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/procurement/views/KanbanView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/procurement/views/ListView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/procurement/views/TableView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/procurement/views/TimelineView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/procurement/views/ViewSwitcher.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/profile/ProfileClient.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/profile/ProfileClient.unified.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/profile/ProfileOptimizedClient.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'virtualizer'. Either include it or remove the dependency array.","line":92,"column":5,"nodeType":"ArrayExpression","endLine":92,"endColumn":7,"suggestions":[{"desc":"Update the dependencies array to be: [virtualizer]","fix":{"range":[2394,2396],"text":"[virtualizer]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { User, Briefcase, Award, Heart, Globe, Shield, Activity, Clock, FileText, Phone } from \"lucide-react\";\nimport { useState, useEffect, useMemo, useCallback } from 'react';\nimport { useVirtualizer } from '@tanstack/react-virtual';\nimport { createBrowserClient } from '@/lib/supabase/client';\nimport { ModuleTemplate } from '@ghxstship/ui/core/templates/ModuleTemplate';\nimport { DataViewProvider } from '@ghxstship/ui/providers/DataViewProvider';\nimport { StateManagerProvider } from '@ghxstship/ui/providers/StateManagerProvider';\nimport {\n  Badge,\n  Button,\n  Card,\n  CardContent,\n  CardDescription,\n  CardFooter,\n  CardHeader,\n  CardTitle,\n  DataActions,\n  DataViewProvider,\n  Drawer,\n  DrawerContent,\n  DrawerDescription,\n  DrawerFooter,\n  DrawerHeader,\n  DrawerTitle,\n  StateManagerProvider,\n  Tabs,\n  TabsContent,\n  TabsList,\n  TabsTrigger,\n  ViewSwitcher\n} from \"@ghxstship/ui\";\nimport { DataActions } from '@ghxstship/ui';\nimport { UnifiedDrawer } from '@ghxstship/ui/unified/drawers/UnifiedDrawer';\nimport { useToast } from '@ghxstship/ui/hooks/useToast';\nimport { Card } from '@ghxstship/ui';\nimport { Badge } from '@ghxstship/ui';\nimport { Button } from '@ghxstship/ui';\nimport { Skeleton } from '@ghxstship/ui';\nimport type { ProfileData, ProfileSection } from './types';\n\n// Optimized configuration with consolidated sections\nconst PROFILE_SECTIONS: ProfileSection[] = [\n {\n id: 'overview',\n label: 'Overview',\n icon: User,\n component: 'OverviewSection',\n priority: 1\n },\n {\n id: 'professional',\n label: 'Professional',\n icon: Briefcase,\n component: 'ProfessionalSection',\n priority: 2,\n subsections: ['job-history', 'certifications', 'endorsements']\n },\n {\n id: 'personal',\n label: 'Personal',\n icon: Heart,\n component: 'PersonalSection',\n priority: 3,\n subsections: ['basic', 'contact', 'emergency']\n },\n {\n id: 'compliance',\n label: 'Compliance',\n icon: Shield,\n component: 'ComplianceSection',\n priority: 4,\n subsections: ['health', 'travel', 'uniform']\n },\n {\n id: 'activity',\n label: 'Activity',\n icon: Activity,\n component: 'ActivitySection',\n priority: 5,\n subsections: ['history', 'performance']\n }\n];\n\n// Virtual list component for performance\nconst VirtualProfileList = ({ items, height = 600 }: { items: unknown[], height?: number }) => {\n const parentRef = useCallback((node: HTMLDivElement | null) => {\n if (node) {\n virtualizer.measure();\n }\n }, []);\n\n const virtualizer = useVirtualizer({\n count: items.length,\n getScrollElement: () => parentRef.current,\n estimateSize: () => 80,\n overscan: 5\n });\n\n return (\n <div\n ref={parentRef}\n style={{ height, overflow: 'auto' }}\n className=\"relative\"\n >\n <div\n style={{\n height: `${virtualizer.getTotalSize()}px`,\n width: '100%',\n position: 'relative'\n }}\n >\n {virtualizer.getVirtualItems().map((virtualItem) => (\n <div\n key={virtualItem.key}\n style={{\n position: 'absolute',\n top: 0,\n left: 0,\n width: '100%',\n height: `${virtualItem.size}px`,\n transform: `translateY(${virtualItem.start}px)`\n }}\n >\n <ProfileItemRow item={items[virtualItem.index]} />\n </div>\n ))}\n </div>\n </div>\n );\n};\n\n// Memoized profile item row\nconst ProfileItemRow = React.memo(({ item }: { item: unknown }) => (\n <Card className=\"p-md mb-2 hover:shadow-md transition-shadow\">\n <div className=\"flex items-center justify-between\">\n <div className=\"flex items-center gap-sm\">\n <div className=\"w-icon-xl h-icon-xl rounded-full bg-primary/10 flex items-center justify-center\">\n {item.icon && <item.icon className=\"w-icon-sm h-icon-sm text-primary\" />}\n </div>\n <div>\n <p className=\"font-medium\">{item.label}</p>\n <p className=\"text-sm text-muted-foreground\">{item.value}</p>\n </div>\n </div>\n {item.status && (\n <Badge variant={item.status === 'complete' ? 'success' : 'warning'}>\n {item.status}\n </Badge>\n )}\n </div>\n </Card>\n));\n\nProfileItemRow.displayName = 'ProfileItemRow';\n\ninterface ProfileOptimizedClientProps {\n orgId: string;\n userId: string;\n}\n\nexport default function ProfileOptimizedClient({ orgId, userId }: ProfileOptimizedClientProps) {\n const [loading, setLoading] = useState(true);\n const [profileData, setProfileData] = useState<ProfileData | null>(null);\n const [activeSection, setActiveSection] = useState('overview');\n const [searchQuery, setSearchQuery] = useState('');\n const [drawerOpen, setDrawerOpen] = useState(false);\n const [drawerMode, setDrawerMode] = useState<'view' | 'edit'>('view');\n const { toast } = useToast();\n const supabase = createBrowserClient();\n\n // Optimized data fetching with pagination\n const fetchProfileData = useCallback(async (section?: string) => {\n try {\n setLoading(true);\n \n // Use pagination for large datasets\n const PAGE_SIZE = 50;\n const query = supabase\n .from('users')\n .select(`\n *,\n memberships!inner(\n organization_id,\n role,\n status\n )\n `)\n .eq('auth_id', userId)\n .range(0, PAGE_SIZE - 1);\n\n if (section && section !== 'overview') {\n // Fetch only specific section data\n query.select(`${section}_data`);\n }\n\n const { data, error } = await query.single();\n\n if (error) throw error;\n\n setProfileData(data);\n } catch (error) {\n console.error('Error fetching profile:', error);\n toast({\n title: 'Error',\n description: 'Failed to load profile data',\n variant: 'destructive'\n });\n } finally {\n setLoading(false);\n }\n }, [userId, supabase, toast]);\n\n // Lazy load sections\n useEffect(() => {\n fetchProfileData(activeSection);\n }, [activeSection, fetchProfileData]);\n\n // Memoized filtered items\n const filteredItems = useMemo(() => {\n if (!profileData) return [];\n \n const items = Object.entries(profileData)\n .filter(([key, value]) => {\n if (!searchQuery) return true;\n return key.toLowerCase().includes(searchQuery.toLowerCase()) ||\n String(value).toLowerCase().includes(searchQuery.toLowerCase());\n })\n .map(([key, value]) => ({\n id: key,\n label: key.replace(/_/g, ' ').replace(/\\b\\w/g, l => l.toUpperCase()),\n value: String(value),\n icon: User,\n status: value ? 'complete' : 'incomplete'\n }));\n \n return items;\n }, [profileData, searchQuery]);\n\n // Module configuration for template\n const moduleConfig = useMemo(() => ({\n id: 'profile',\n name: 'Profile',\n description: 'User profile management',\n icon: User,\n baseRoute: '/profile',\n tabs: PROFILE_SECTIONS.map(section => ({\n id: section.id,\n label: section.label,\n icon: section.icon,\n route: `/profile/${section.id}`,\n component: section.component\n })),\n permissions: {\n view: ['profile:view'],\n create: ['profile:create'],\n update: ['profile:update'],\n delete: ['profile:delete']\n },\n features: {\n search: true,\n filter: true,\n sort: true,\n export: true,\n import: false,\n bulkActions: false,\n realtime: true\n },\n views: ['grid', 'list', 'kanban'],\n defaultView: 'list'\n }), []);\n\n if (loading && !profileData) {\n return (\n <div className=\"space-y-md\">\n {[...Array(5)].map((_, i) => (\n <Skeleton key={i} className=\"h-component-lg w-full\" />\n ))}\n </div>\n );\n }\n\n return (\n <StateManagerProvider>\n <DataViewProvider\n config={{\n module: 'profile',\n defaultView: 'list',\n features: moduleConfig.features\n }}\n >\n <div className=\"space-y-lg\">\n {/* Header with optimized actions */}\n <div className=\"flex items-center justify-between\">\n <div>\n <h1 className=\"text-3xl font-bold\">Profile Management</h1>\n <p className=\"text-muted-foreground\">\n Manage your profile information and settings\n </p>\n </div>\n <div className=\"flex items-center gap-xs\">\n <Button\n variant=\"outline\"\n size=\"sm\"\n onClick={() => fetchProfileData(activeSection)}\n >\n Refresh\n </Button>\n <Button\n size=\"sm\"\n onClick={() => {\n setDrawerMode('edit');\n setDrawerOpen(true);\n }}\n >\n Edit Profile\n </Button>\n </div>\n </div>\n\n {/* Optimized tabs with lazy loading */}\n <Tabs value={activeSection} onValueChange={setActiveSection}>\n <TabsList className=\"grid grid-cols-5 w-full\">\n {PROFILE_SECTIONS.map((section) => (\n <TabsTrigger key={section.id} value={section.id}>\n <section.icon className=\"w-icon-xs h-icon-xs mr-2\" />\n {section.label}\n </TabsTrigger>\n ))}\n </TabsList>\n\n {PROFILE_SECTIONS.map((section) => (\n <TabsContent key={section.id} value={section.id} className=\"mt-6\">\n <Card className=\"p-lg\">\n <div className=\"space-y-md\">\n {/* Search and filters */}\n <DataActions\n onSearch={setSearchQuery}\n searchPlaceholder={`Search ${section.label.toLowerCase()}...`}\n showViewSwitcher={false}\n showExport={true}\n showFilter={true}\n />\n\n {/* Virtual list for performance */}\n <VirtualProfileList \n items={filteredItems} \n height={600}\n />\n </div>\n </Card>\n </TabsContent>\n ))}\n </Tabs>\n\n {/* Optimized drawer */}\n <UnifiedDrawer\n open={drawerOpen}\n onClose={() => setDrawerOpen(false)}\n title={drawerMode === 'edit' ? 'Edit Profile' : 'View Profile'}\n size=\"lg\"\n >\n <div className=\"space-y-lg\">\n {/* Drawer content with lazy loading */}\n {drawerMode === 'edit' ? (\n <ProfileEditForm \n data={profileData} \n onSave={async (data) => {\n // Save logic\n setDrawerOpen(false);\n await fetchProfileData(activeSection);\n }}\n />\n ) : (\n <ProfileViewDetails data={profileData} />\n )}\n </div>\n </UnifiedDrawer>\n </div>\n </DataViewProvider>\n </StateManagerProvider>\n );\n}\n\n// Lazy loaded edit form component\nconst ProfileEditForm = React.lazy(() => import('./components/ProfileEditForm'));\n\n// Lazy loaded view details component \nconst ProfileViewDetails = React.lazy(() => import('./components/ProfileViewDetails'));\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/profile/[id]/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/profile/activity/ActivityClient.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadActivities'. Either include it or remove the dependency array.","line":30,"column":6,"nodeType":"ArrayExpression","endLine":30,"endColumn":29,"suggestions":[{"desc":"Update the dependencies array to be: [orgId, userId, filter, loadActivities]","fix":{"range":[910,933],"text":"[orgId, userId, filter, loadActivities]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\n\nimport { useState, useEffect } from 'react';\nimport { useTranslations } from 'next-intl';\nimport { createBrowserClient } from '@ghxstship/auth';\nimport { Card, Badge, Button } from '@ghxstship/ui';\nimport { Activity, Calendar, Clock, Download, Edit, Eye, Filter, History, Trash2, User } from \"lucide-react\";\n\ninterface ActivityRecord {\n  id: string;\n  activity_type: string;\n  activity_description: string;\n  performed_by: string;\n  performed_by_name?: string;\n  created_at: string;\n  metadata?;\n}\n\nexport default function ActivityClient({ orgId, userId }: { orgId: string; userId: string }) {\n  const t = useTranslations('profile');\n  const sb = createBrowserClient();\n  \n  const [activities, setActivities] = useState<ActivityRecord[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [filter, setFilter] = useState<string>('all');\n\n  useEffect(() => {\n    loadActivities();\n  }, [orgId, userId, filter]);\n\n  const loadActivities = async () => {\n    try {\n      setLoading(true);\n      \n      let query = sb\n        .from('user_profile_activity')\n        .select(`\n          *,\n          performed_by_user:users!performed_by(full_name)\n        `)\n        .eq('organization_id', orgId)\n        .eq('user_id', userId)\n        .order('created_at', { ascending: false });\n\n      if (filter !== 'all') {\n        query = query.eq('activity_type', filter);\n      }\n\n      const { data, error } = await query.limit(50);\n\n      if (error) throw error;\n\n      const formattedActivities = (data || []).map(activity => ({\n        ...activity,\n        performed_by_name: activity.performed_by_user?.full_name || 'System'\n      }));\n\n      setActivities(formattedActivities);\n    } catch (error) {\n      console.error('Error loading activities:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const getActivityIcon = (type: string) => {\n    const icons = {\n      profile_updated: Edit,\n      profile_created: User,\n      profile_viewed: Eye,\n      certification_added: Badge,\n      job_history_added: Activity,\n      default: Activity\n    };\n    \n    const IconComponent = icons[type as keyof typeof icons] || icons.default;\n    return <IconComponent className=\"h-icon-xs w-icon-xs\" />;\n  };\n\n  const getActivityColor = (type: string) => {\n    const colors = {\n      profile_updated: 'color-accent',\n      profile_created: 'color-success',\n      profile_viewed: 'color-muted',\n      certification_added: 'color-secondary',\n      job_history_added: 'color-warning',\n      default: 'color-muted'\n    };\n    \n    return colors[type as keyof typeof colors] || colors.default;\n  };\n\n  const formatActivityType = (type: string) => {\n    return type.split('_').map(word => \n      word.charAt(0).toUpperCase() + word.slice(1)\n    ).join(' ');\n  };\n\n  const exportActivities = () => {\n    const csvContent = [\n      ['Date', 'Activity Type', 'Description', 'Performed By'],\n      ...activities.map(activity => [\n        new Date(activity.created_at).toLocaleString(),\n        formatActivityType(activity.activity_type),\n        activity.activity_description,\n        activity.performed_by_name || 'System'\n      ])\n    ].map(row => row.join(',')).join('\\n');\n\n    const blob = new Blob([csvContent], { type: 'text/csv' });\n    const url = window.URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = `profile-activity-${new Date().toISOString().split('T')[0]}.csv`;\n    a.click();\n    window.URL.revokeObjectURL(url);\n  };\n\n  if (loading) {\n    return (\n      <div className=\"stack-md\">\n        {[...Array(5)].map((_, i) => (\n          <div key={i} className=\"animate-pulse\">\n            <div className=\"h-component-md bg-secondary rounded-lg\"></div>\n          </div>\n        ))}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"stack-lg\">\n      {/* Header with filters */}\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center gap-md\">\n          <h2 className=\"text-heading-4 text-heading-4\">Activity Log</h2>\n          <select\n            value={filter}\n            onChange={(e: React.ChangeEvent<HTMLInputElement>) => setFilter(e.target.value)}\n            className=\" px-md py-xs border rounded-md text-body-sm\"\n          >\n            <option value=\"all\">All Activities</option>\n            <option value=\"profile_updated\">Profile Updates</option>\n            <option value=\"profile_created\">Profile Created</option>\n            <option value=\"certification_added\">Certifications</option>\n            <option value=\"job_history_added\">Job History</option>\n          </select>\n        </div>\n        \n        <Button\n          variant=\"outline\"\n         \n          onClick={exportActivities}\n          className=\"flex items-center gap-sm\"\n        >\n          <Download className=\"h-icon-xs w-icon-xs\" />\n          Export\n        </Button>\n      </div>\n\n      {/* Activity Timeline */}\n      <div className=\"stack-md\">\n        {activities.length > 0 ? (\n          activities.map((activity, index) => (\n            <Card key={activity.id}>\n              <div className=\"p-md\">\n                <div className=\"flex items-start gap-md\">\n                  <div className={`p-sm rounded-full bg-secondary ${getActivityColor(activity.activity_type)}`}>\n                    {getActivityIcon(activity.activity_type)}\n                  </div>\n                  \n                  <div className=\"flex-1\">\n                    <div className=\"flex items-center justify-between mb-sm\">\n                      <div className=\"flex items-center gap-sm\">\n                        <h4 className=\"form-label\">{activity.activity_description}</h4>\n                        <Badge variant=\"secondary\">\n                          {formatActivityType(activity.activity_type)}\n                        </Badge>\n                      </div>\n                      \n                      <div className=\"flex items-center gap-sm text-body-sm color-muted\">\n                        <Clock className=\"h-icon-xs w-icon-xs\" />\n                        <span>{new Date(activity.created_at).toLocaleString()}</span>\n                      </div>\n                    </div>\n                    \n                    <div className=\"flex items-center gap-sm text-body-sm color-muted\">\n                      <User className=\"h-icon-xs w-icon-xs\" />\n                      <span>by {activity.performed_by_name}</span>\n                    </div>\n                    \n                    {activity.metadata && (\n                      <div className=\"mt-sm p-sm bg-secondary/50 rounded text-body-sm\">\n                        <pre className=\"whitespace-pre-wrap\">\n                          {JSON.stringify(activity.metadata, null, 2)}\n                        </pre>\n                      </div>\n                    )}\n                  </div>\n                </div>\n              </div>\n            </Card>\n          ))\n        ) : (\n          <Card>\n            <div className=\"p-xl text-center\">\n              <Activity className=\"h-icon-2xl w-icon-2xl mx-auto mb-md color-muted opacity-50\" />\n              <h3 className=\"text-body form-label mb-sm\">No Activity Found</h3>\n              <p className=\"color-muted\">\n                {filter === 'all' \n                  ? 'No profile activity has been recorded yet.'\n                  : `No ${formatActivityType(filter)} activities found.`\n                }\n              </p>\n            </div>\n          </Card>\n        )}\n      </div>\n\n      {/* Load More */}\n      {activities.length >= 50 && (\n        <div className=\"text-center\">\n          <Button variant=\"outline\" onClick={loadActivities}>\n            Load More Activities\n          </Button>\n        </div>\n      )}\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/profile/activity/drawers/CreateActivityDrawer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/profile/activity/lib/activityService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/profile/activity/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/profile/activity/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/profile/activity/views/ActivityAnalyticsView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/profile/activity/views/ActivityCalendarView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/profile/activity/views/ActivityListView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/profile/activity/views/ActivityTimelineView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/profile/basic/BasicInfoClient.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadProfile'. Either include it or remove the dependency array.","line":47,"column":6,"nodeType":"ArrayExpression","endLine":47,"endColumn":21,"suggestions":[{"desc":"Update the dependencies array to be: [loadProfile, orgId, userId]","fix":{"range":[1174,1189],"text":"[loadProfile, orgId, userId]"}}]},{"ruleId":"@next/next/no-img-element","severity":1,"message":"Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` or a custom image loader to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","line":148,"column":15,"nodeType":"JSXOpeningElement","endLine":148,"endColumn":101}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\n\nimport { useState, useEffect } from 'react';\nimport { useTranslations } from 'next-intl';\nimport { createBrowserClient } from '@ghxstship/auth';\nimport {\n  Avatar,\n  Badge,\n  Button,\n  Card,\n  Input,\n  UnifiedInput\n} from \"@ghxstship/ui\";\nimport { Camera, Save, User } from 'lucide-react';\n\ninterface UserProfile {\n  id: string;\n  user_id: string;\n  avatar_url?: string;\n  date_of_birth?: string;\n  gender?: 'male' | 'female' | 'non-binary' | 'prefer-not-to-say';\n  nationality?: string;\n  languages: string[];\n  profile_completion_percentage: number;\n  status: string;\n  created_at: string;\n  updated_at: string;\n}\n\nexport default function BasicInfoClient({ orgId, userId }: { orgId: string; userId: string }) {\n  const t = useTranslations('profile');\n  const sb = createBrowserClient();\n  const [profile, setProfile] = useState<UserProfile | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [saving, setSaving] = useState(false);\n  const [formData, setFormData] = useState({\n    avatar_url: '',\n    date_of_birth: '',\n    gender: '',\n    nationality: '',\n    languages: [] as string[]\n  });\n\n  useEffect(() => {\n    loadProfile();\n  }, [orgId, userId]);\n\n  const loadProfile = async () => {\n    try {\n      setLoading(true);\n      \n      // Get current user's profile\n      const { data: userData } = await sb\n        .from('users')\n        .select('id')\n        .eq('auth_id', userId)\n        .single();\n\n      if (userData) {\n        const { data: profileData } = await sb\n          .from('user_profiles')\n          .select('*')\n          .eq('user_id', userData.id)\n          .eq('organization_id', orgId)\n          .single();\n\n        if (profileData) {\n          setProfile(profileData);\n          setFormData({\n            avatar_url: profileData.avatar_url || '',\n            date_of_birth: profileData.date_of_birth || '',\n            gender: profileData.gender || '',\n            nationality: profileData.nationality || '',\n            languages: profileData.languages || []\n          });\n        }\n      }\n    } catch (error) {\n      console.error('Error loading profile:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleSave = async () => {\n    if (!profile) return;\n    \n    try {\n      setSaving(true);\n      \n      const { error } = await sb\n        .from('user_profiles')\n        .update({\n          ...formData,\n          updated_at: new Date().toISOString()\n        })\n        .eq('id', profile.id);\n\n      if (error) throw error;\n      \n      await loadProfile(); // Reload to get updated data\n    } catch (error) {\n      console.error('Error saving profile:', error);\n    } finally {\n      setSaving(false);\n    }\n  };\n\n  const handleLanguageAdd = (language: string) => {\n    if (language && !formData.languages.includes(language)) {\n      setFormData(prev => ({\n        ...prev,\n        languages: [...prev.languages, language]\n      }));\n    }\n  };\n\n  const handleLanguageRemove = (language: string) => {\n    setFormData(prev => ({\n      ...prev,\n      languages: prev.languages.filter(l => l !== language)\n    }));\n  };\n\n  if (loading) {\n    return (\n      <div className=\"stack-lg\">\n        <div className=\"animate-pulse\">\n          <div className=\"h-component-lg w-component-lg bg-secondary rounded-full mx-auto mb-md\"></div>\n          <div className=\"stack-sm\">\n            <div className=\"h-icon-xs bg-secondary rounded w-3/4\"></div>\n            <div className=\"h-icon-xs bg-secondary rounded w-1/2\"></div>\n            <div className=\"h-icon-xs bg-secondary rounded w-2/3\"></div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"stack-lg\">\n      {/* Avatar Section */}\n      <div className=\"flex flex-col items-center stack-md\">\n        <div className=\"relative\">\n          <Avatar className=\"h-component-lg w-component-lg\">\n            {formData.avatar_url ? (\n              <img src={formData.avatar_url} alt=\"Profile\" className=\"h-full w-full object-cover\" />\n            ) : (\n              <User className=\"h-icon-2xl w-icon-2xl\" />\n            )}\n          </Avatar>\n          <Button\n           \n            variant=\"outline\"\n            className=\"absolute -bottom-2 -right-2 rounded-full p-sm\"\n          >\n            <Camera className=\"h-3 w-3\" />\n          </Button>\n        </div>\n        \n        {profile && (\n          <div className=\"text-center\">\n            <Badge variant={profile.status === 'active' ? 'default' : 'secondary'}>\n              {profile.status}\n            </Badge>\n            <div className=\"mt-sm text-body-sm color-muted\">\n              Profile {profile.profile_completion_percentage}% complete\n            </div>\n          </div>\n        )}\n      </div>\n\n      {/* Basic Information Form */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-md\">\n        <div className=\"stack-sm\">\n          <label className=\"text-body-sm form-label\">Avatar URL</label>\n          <Input             value={formData.avatar_url}\n            onChange={(e: React.ChangeEvent<HTMLInputElement>) => setFormData(prev => ({ ...prev, avatar_url: e.target.value }))}\n            placeholder=\"https://example.com/avatar.jpg\"\n          />\n        </div>\n\n        <div className=\"stack-sm\">\n          <label className=\"text-body-sm form-label\">Date of Birth</label>\n          <Input             type=\"date\"\n            value={formData.date_of_birth}\n            onChange={(e: React.ChangeEvent<HTMLInputElement>) => setFormData(prev => ({ ...prev, date_of_birth: e.target.value }))}\n          />\n        </div>\n\n        <div className=\"stack-sm\">\n          <label className=\"text-body-sm form-label\">Gender</label>\n          <select\n            value={formData.gender}\n            onChange={(e: React.ChangeEvent<HTMLInputElement>) => setFormData(prev => ({ ...prev, gender: e.target.value }))}\n            className=\"w-full  px-md py-sm border border-input bg-background rounded-md\"\n          >\n            <option value=\"\">Select gender</option>\n            <option value=\"male\">Male</option>\n            <option value=\"female\">Female</option>\n            <option value=\"non-binary\">Non-binary</option>\n            <option value=\"prefer-not-to-say\">Prefer not to say</option>\n          </select>\n        </div>\n\n        <div className=\"stack-sm\">\n          <label className=\"text-body-sm form-label\">Nationality</label>\n          <Input             value={formData.nationality}\n            onChange={(e: React.ChangeEvent<HTMLInputElement>) => setFormData(prev => ({ ...prev, nationality: e.target.value }))}\n            placeholder=\"e.g., American, British, Canadian\"\n          />\n        </div>\n      </div>\n\n      {/* Languages Section */}\n      <div className=\"stack-md\">\n        <div>\n          <label className=\"text-body-sm form-label\">Languages</label>\n          <div className=\"flex flex-wrap gap-sm mt-sm\">\n            {formData.languages.map((language: any) => (\n              <Badge\n                key={language}\n                variant=\"secondary\"\n                className=\"cursor-pointer\"\n                onClick={() => handleLanguageRemove(language)}\n              >\n                {language} ×\n              </Badge>\n            ))}\n          </div>\n        </div>\n        \n        <div className=\"flex gap-sm\">\n          <Input             placeholder=\"Add a language\"\n            onKeyPress={(e: any) => {\n              if (e.key === 'Enter') {\n                handleLanguageAdd(e.currentTarget.value);\n                e.currentTarget.value = '';\n              }\n            }}\n          />\n          <Button\n            variant=\"outline\"\n            onClick={(e: React.MouseEvent) => {\n              const input = e.currentTarget.previousElementSibling as HTMLInputElement;\n              handleLanguageAdd(input.value);\n              input.value = '';\n            }}\n          >\n            Add\n          </Button>\n        </div>\n      </div>\n\n      {/* Save Button */}\n      <div className=\"flex justify-end\">\n        <Button onClick={handleSave} disabled={saving}>\n          <Save className=\"h-icon-xs w-icon-xs mr-sm\" />\n          {saving ? 'Saving...' : 'Save Changes'}\n        </Button>\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/profile/basic/drawers/CreateBasicDrawer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/profile/basic/lib/profileService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/profile/basic/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/profile/basic/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/profile/basic/views/ProfileAnalyticsView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/profile/basic/views/ProfileCardView.tsx","messages":[{"ruleId":"@next/next/no-img-element","severity":1,"message":"Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` or a custom image loader to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","line":74,"column":2,"nodeType":"JSXOpeningElement","endLine":78,"endColumn":4}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { User, Mail, Phone, MapPin, Briefcase, Calendar, Globe, Edit, Eye, Download } from \"lucide-react\";\nimport { \n Card, \n Avatar, \n Badge, \n Button,\n Skeleton\n} from '@ghxstship/ui';\nimport type { UserProfile } from '../types';\n\ninterface ProfileCardViewProps {\n profile: UserProfile | null;\n loading: boolean;\n onEdit?: () => void;\n onView?: () => void;\n onExport?: () => void;\n compact?: boolean;\n}\n\nexport default function ProfileCardView({\n profile,\n loading,\n onEdit,\n onView,\n onExport,\n compact = false\n}: ProfileCardViewProps) {\n if (loading) {\n return (\n <Card className=\"p-lg\">\n <div className=\"flex items-start gap-md\">\n <Skeleton className=\"h-component-md w-component-md rounded-full\" />\n <div className=\"flex-1 space-y-xs\">\n <Skeleton className=\"h-icon-xs w-container-xs\" />\n <Skeleton className=\"h-3 w-component-xl\" />\n <Skeleton className=\"h-3 w-40\" />\n </div>\n </div>\n </Card>\n );\n }\n\n if (!profile) {\n return (\n <Card className=\"p-lg text-center\">\n <User className=\"h-icon-2xl w-icon-2xl text-muted-foreground mx-auto mb-4\" />\n <h3 className=\"text-lg font-semibold mb-2\">No Profile Found</h3>\n <p className=\"text-muted-foreground\">\n Profile information is not available.\n </p>\n </Card>\n );\n }\n\n const formatDate = (dateString?: string) => {\n if (!dateString) return 'Not specified';\n return new Date(dateString).toLocaleDateString();\n };\n\n const getCompletionColor = (percentage: number) => {\n if (percentage >= 80) return 'text-green-600';\n if (percentage >= 60) return 'text-yellow-600';\n return 'text-red-600';\n };\n\n return (\n <Card className=\"p-lg\">\n <div className=\"flex items-start justify-between mb-6\">\n <div className=\"flex items-start gap-md\">\n <Avatar className=\"h-component-md w-component-md\">\n {profile.avatar_url ? (\n <img \n src={profile.avatar_url} \n alt=\"Profile\" \n className=\"h-full w-full object-cover\" \n />\n ) : (\n <User className=\"h-icon-lg w-icon-lg\" />\n )}\n </Avatar>\n \n <div className=\"space-y-xs\">\n <div className=\"flex items-center gap-xs\">\n <h3 className=\"text-lg font-semibold\">\n {profile.job_title || 'No Title'}\n </h3>\n <Badge variant={profile.status === 'active' ? 'default' : 'secondary'}>\n {profile.status}\n </Badge>\n </div>\n \n <div className=\"flex items-center gap-md text-sm text-muted-foreground\">\n {profile.department && (\n <div className=\"flex items-center gap-xs\">\n <Briefcase className=\"h-icon-xs w-icon-xs\" />\n <span>{profile.department}</span>\n </div>\n )}\n \n {profile.employment_type && (\n <Badge variant=\"outline\" className=\"text-xs\">\n {profile.employment_type}\n </Badge>\n )}\n </div>\n\n <div className={`text-sm font-medium ${getCompletionColor(profile.profile_completion_percentage)}`}>\n Profile {profile.profile_completion_percentage}% complete\n </div>\n </div>\n </div>\n\n <div className=\"flex items-center gap-xs\">\n {onView && (\n <Button variant=\"ghost\" size=\"sm\" onClick={onView}>\n <Eye className=\"h-icon-xs w-icon-xs\" />\n </Button>\n )}\n {onEdit && (\n <Button variant=\"ghost\" size=\"sm\" onClick={onEdit}>\n <Edit className=\"h-icon-xs w-icon-xs\" />\n </Button>\n )}\n {onExport && (\n <Button variant=\"ghost\" size=\"sm\" onClick={onExport}>\n <Download className=\"h-icon-xs w-icon-xs\" />\n </Button>\n )}\n </div>\n </div>\n\n {!compact && (\n <div className=\"space-y-md\">\n {/* Contact Information */}\n <div className=\"grid grid-cols-1 md:grid-cols-2 gap-md\">\n {profile.phone_primary && (\n <div className=\"flex items-center gap-xs text-sm\">\n <Phone className=\"h-icon-xs w-icon-xs text-muted-foreground\" />\n <span>{profile.phone_primary}</span>\n </div>\n )}\n \n {(profile.city || profile.country) && (\n <div className=\"flex items-center gap-xs text-sm\">\n <MapPin className=\"h-icon-xs w-icon-xs text-muted-foreground\" />\n <span>\n {[profile.city, profile.country].filter(Boolean).join(', ')}\n </span>\n </div>\n )}\n \n {profile.hire_date && (\n <div className=\"flex items-center gap-xs text-sm\">\n <Calendar className=\"h-icon-xs w-icon-xs text-muted-foreground\" />\n <span>Hired {formatDate(profile.hire_date)}</span>\n </div>\n )}\n \n {profile.nationality && (\n <div className=\"flex items-center gap-xs text-sm\">\n <Globe className=\"h-icon-xs w-icon-xs text-muted-foreground\" />\n <span>{profile.nationality}</span>\n </div>\n )}\n </div>\n\n {/* Bio */}\n {profile.bio && (\n <div className=\"pt-4 border-t\">\n <p className=\"text-sm text-muted-foreground leading-relaxed\">\n {profile.bio}\n </p>\n </div>\n )}\n\n {/* Skills and Languages */}\n <div className=\"pt-4 border-t space-y-sm\">\n {profile.skills && profile.skills.length > 0 && (\n <div>\n <h4 className=\"text-sm font-medium mb-2\">Skills</h4>\n <div className=\"flex flex-wrap gap-xs\">\n {profile.skills.slice(0, 6).map(skill => (\n <Badge key={skill} variant=\"secondary\" className=\"text-xs\">\n {skill}\n </Badge>\n ))}\n {profile.skills.length > 6 && (\n <Badge variant=\"outline\" className=\"text-xs\">\n +{profile.skills.length - 6} more\n </Badge>\n )}\n </div>\n </div>\n )}\n\n {profile.languages && profile.languages.length > 0 && (\n <div>\n <h4 className=\"text-sm font-medium mb-2\">Languages</h4>\n <div className=\"flex flex-wrap gap-xs\">\n {profile.languages.map(language => (\n <Badge key={language} variant=\"outline\" className=\"text-xs\">\n {language}\n </Badge>\n ))}\n </div>\n </div>\n )}\n </div>\n\n {/* Links */}\n {(profile.linkedin_url || profile.website_url) && (\n <div className=\"pt-4 border-t\">\n <div className=\"flex gap-md\">\n {profile.linkedin_url && (\n <a\n href={profile.linkedin_url as any as any}\n target=\"_blank\"\n rel=\"noopener noreferrer\"\n className=\"text-sm text-blue-600 hover:underline\"\n >\n LinkedIn\n </a>\n )}\n {profile.website_url && (\n <a\n href={profile.website_url as any as any}\n target=\"_blank\"\n rel=\"noopener noreferrer\"\n className=\"text-sm text-blue-600 hover:underline\"\n >\n Website\n </a>\n )}\n </div>\n </div>\n )}\n\n {/* Metadata */}\n <div className=\"pt-4 border-t text-xs text-muted-foreground\">\n <div className=\"flex justify-between\">\n <span>Updated: {formatDate(profile.updated_at)}</span>\n <span>ID: {profile.employee_id || 'Not assigned'}</span>\n </div>\n </div>\n </div>\n )}\n </Card>\n );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/profile/basic/views/ProfileFormView.tsx","messages":[{"ruleId":"@next/next/no-img-element","severity":1,"message":"Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` or a custom image loader to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","line":248,"column":2,"nodeType":"JSXOpeningElement","endLine":252,"endColumn":4}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { Camera, Save, User, Plus, X, Eye, EyeOff } from \"lucide-react\";\nimport { useState } from 'react';\nimport { \n Button, \n Input, \n Textarea, \n Select,\n SelectContent,\n SelectItem,\n SelectTrigger,\n SelectValue,\n Card, \n Avatar, \n Badge,\n Skeleton\n} from '@ghxstship/ui';\nimport type { UserProfile, FieldConfig } from '../types';\nimport { PROFILE_FIELD_CONFIG } from '../types';\n\ninterface ProfileFormViewProps {\n profile: UserProfile | null;\n loading: boolean;\n saving: boolean;\n onSave: (data: Partial<UserProfile>) => Promise<void>;\n onFieldVisibilityChange?: (fieldKey: string, visible: boolean) => void;\n visibleFields?: Set<string>;\n editableFields?: Set<string>;\n}\n\nexport default function ProfileFormView({\n profile,\n loading,\n saving,\n onSave,\n onFieldVisibilityChange,\n visibleFields = new Set(PROFILE_FIELD_CONFIG.map(f => f.key)),\n editableFields = new Set(PROFILE_FIELD_CONFIG.map(f => f.key))\n}: ProfileFormViewProps) {\n const [formData, setFormData] = useState<Partial<UserProfile>(profile || {});\n const [newTag, setNewTag] = useState('');\n const [activeTagField, setActiveTagField] = useState<string | null>(null);\n\n const handleInputChange = (field: keyof UserProfile, value: unknown) => {\n setFormData(prev => ({ ...prev, [field]: value }));\n };\n\n const handleTagAdd = (field: 'languages' | 'skills', tag: string) => {\n if (!tag.trim()) return;\n \n const currentTags = (formData[field] as string[]) || [];\n if (!currentTags.includes(tag.trim())) {\n handleInputChange(field, [...currentTags, tag.trim()]);\n }\n setNewTag('');\n setActiveTagField(null);\n };\n\n const handleTagRemove = (field: 'languages' | 'skills', tag: string) => {\n const currentTags = (formData[field] as string[]) || [];\n handleInputChange(field, currentTags.filter(t => t !== tag));\n };\n\n const handleSubmit = async (e: React.FormEvent) => {\n e.preventDefault();\n await onSave(formData);\n };\n\n const renderField = (fieldConfig: FieldConfig) => {\n if (!visibleFields.has(fieldConfig.key)) return null;\n \n const isEditable = editableFields.has(fieldConfig.key);\n const value = formData[fieldConfig.key];\n\n const fieldWrapper = (content: React.ReactNode) => (\n <div key={fieldConfig.key} className=\"space-y-xs\">\n <div className=\"flex items-center justify-between\">\n <label className=\"text-sm font-medium\">\n {fieldConfig.label}\n {fieldConfig.required && <span className=\"text-red-500 ml-1\">*</span>}\n </label>\n {onFieldVisibilityChange && (\n <Button\n variant=\"ghost\"\n size=\"sm\"\n onClick={() => onFieldVisibilityChange(fieldConfig.key, false)}\n className=\"h-icon-md w-icon-md p-0\"\n >\n <EyeOff className=\"h-3 w-3\" />\n </Button>\n )}\n </div>\n {content}\n </div>\n );\n\n if (!isEditable) {\n return fieldWrapper(\n <div className=\"px-sm py-xs bg-muted/50 rounded-md text-sm\">\n {Array.isArray(value) ? value.join(', ') : value || 'Not specified'}\n </div>\n );\n }\n\n switch (fieldConfig.type) {\n case 'select':\n return fieldWrapper(\n <Select\n value={e.target.value as string || ''}\n onValueChange={(newValue) => handleInputChange(fieldConfig.key, newValue)}\n >\n <SelectTrigger>\n <SelectValue placeholder={`Select ${fieldConfig.label.toLowerCase()}`} />\n </SelectTrigger>\n <SelectContent>\n {fieldConfig.options?.map(option => (\n <SelectItem key={option.value} value={option.value}>\n {option.label}\n </SelectItem>\n ))}\n </SelectContent>\n </Select>\n );\n\n case 'textarea':\n return fieldWrapper(\n <Textarea\n value={e.target.value as string || ''}\n onChange={(e) => handleInputChange(fieldConfig.key, e.target.value)}\n placeholder={fieldConfig.placeholder}\n maxLength={fieldConfig.validation?.maxLength}\n rows={3}\n />\n );\n\n case 'tags':\n const tags = (e.target.value as string[]) || [];\n return fieldWrapper(\n <div className=\"space-y-xs\">\n <div className=\"flex flex-wrap gap-xs\">\n {tags.map(tag => (\n <Badge\n key={tag}\n variant=\"secondary\"\n className=\"cursor-pointer hover:bg-destructive hover:text-destructive-foreground\"\n onClick={() => handleTagRemove(fieldConfig.key as 'languages' | 'skills', tag)}\n >\n {tag}\n <X className=\"ml-1 h-3 w-3\" />\n </Badge>\n ))}\n </div>\n {activeTagField === fieldConfig.key ? (\n <div className=\"flex gap-xs\">\n <Input\n value={newTag}\n onChange={(e) => setNewTag(e.target.value)}\n placeholder={`Add ${fieldConfig.label.toLowerCase()}`}\n onKeyPress={(e) => {\n if (e.key === 'Enter') {\n e.preventDefault();\n handleTagAdd(fieldConfig.key as 'languages' | 'skills', newTag);\n }\n }}\n autoFocus\n />\n <Button\n type=\"button\"\n variant=\"outline\"\n onClick={() => handleTagAdd(fieldConfig.key as 'languages' | 'skills', newTag)}\n >\n Add\n </Button>\n <Button\n type=\"button\"\n variant=\"ghost\"\n onClick={() => {\n setActiveTagField(null);\n setNewTag('');\n }}\n >\n Cancel\n </Button>\n </div>\n ) : (\n <Button\n type=\"button\"\n variant=\"outline\"\n size=\"sm\"\n onClick={() => setActiveTagField(fieldConfig.key)}\n className=\"w-fit\"\n >\n <Plus className=\"mr-1 h-3 w-3\" />\n Add {fieldConfig.label.slice(0, -1)}\n </Button>\n )}\n </div>\n );\n\n default:\n return fieldWrapper(\n <Input\n type={fieldConfig.type}\n value={e.target.value as string || ''}\n onChange={(e) => handleInputChange(fieldConfig.key, e.target.value)}\n placeholder={fieldConfig.placeholder}\n minLength={fieldConfig.validation?.minLength}\n maxLength={fieldConfig.validation?.maxLength}\n pattern={fieldConfig.validation?.pattern}\n />\n );\n }\n };\n\n if (loading) {\n return (\n <div className=\"space-y-lg\">\n <div className=\"flex flex-col items-center space-y-md\">\n <Skeleton className=\"h-component-lg w-component-lg rounded-full\" />\n <Skeleton className=\"h-icon-xs w-component-xl\" />\n </div>\n <div className=\"grid grid-cols-1 md:grid-cols-2 gap-lg\">\n {Array.from({ length: 8 }).map((_, i) => (\n <div key={i} className=\"space-y-xs\">\n <Skeleton className=\"h-icon-xs w-component-lg\" />\n <Skeleton className=\"h-icon-xl w-full\" />\n </div>\n ))}\n </div>\n </div>\n );\n }\n\n const groupedFields = PROFILE_FIELD_CONFIG.reduce((acc, field) => {\n if (!acc[field.section]) acc[field.section] = [];\n acc[field.section].push(field);\n return acc;\n }, {} as Record<string, FieldConfig[]>);\n\n return (\n <form onSubmit={handleSubmit} className=\"space-y-xl\">\n {/* Avatar Section */}\n <div className=\"flex flex-col items-center space-y-md\">\n <div className=\"relative\">\n <Avatar className=\"h-component-lg w-component-lg\">\n {formData.avatar_url ? (\n <img \n src={formData.avatar_url} \n alt=\"Profile\" \n className=\"h-full w-full object-cover\" \n />\n ) : (\n <User className=\"h-icon-2xl w-icon-2xl\" />\n )}\n </Avatar>\n <Button\n type=\"button\"\n variant=\"outline\"\n size=\"sm\"\n className=\"absolute -bottom-2 -right-2 rounded-full h-icon-lg w-icon-lg p-0\"\n >\n <Camera className=\"h-icon-xs w-icon-xs\" />\n </Button>\n </div>\n \n {profile && (\n <div className=\"text-center space-y-xs\">\n <Badge variant={profile.status === 'active' ? 'default' : 'secondary'}>\n {profile.status}\n </Badge>\n <div className=\"text-sm text-muted-foreground\">\n Profile {profile.profile_completion_percentage}% complete\n </div>\n </div>\n )}\n </div>\n\n {/* Form Sections */}\n {Object.entries(groupedFields).map(([section, fields]) => (\n <Card key={section} className=\"p-lg\">\n <h3 className=\"text-lg font-semibold mb-4 capitalize\">\n {section === 'basic' ? 'Basic Information' : \n section === 'contact' ? 'Contact Information' : \n section === 'professional' ? 'Professional Information' : \n 'Metadata'}\n </h3>\n <div className=\"grid grid-cols-1 md:grid-cols-2 gap-lg\">\n {fields.map(renderField)}\n </div>\n </Card>\n ))}\n\n {/* Hidden Fields */}\n {onFieldVisibilityChange && (\n <Card className=\"p-lg\">\n <h3 className=\"text-lg font-semibold mb-4\">Hidden Fields</h3>\n <div className=\"flex flex-wrap gap-xs\">\n {PROFILE_FIELD_CONFIG\n .filter(field => !visibleFields.has(field.key))\n .map(field => (\n <Button\n key={field.key}\n type=\"button\"\n variant=\"outline\"\n size=\"sm\"\n onClick={() => onFieldVisibilityChange(field.key, true)}\n className=\"h-icon-lg\"\n >\n <Eye className=\"mr-1 h-3 w-3\" />\n {field.label}\n </Button>\n ))}\n </div>\n </Card>\n )}\n\n {/* Save Button */}\n <div className=\"flex justify-end\">\n <Button type=\"submit\" disabled={saving}>\n <Save className=\"mr-2 h-icon-xs w-icon-xs\" />\n {saving ? 'Saving...' : 'Save Changes'}\n </Button>\n </div>\n </form>\n );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/profile/basic/views/ProfileTableView.tsx","messages":[{"ruleId":"@next/next/no-img-element","severity":1,"message":"Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` or a custom image loader to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","line":212,"column":2,"nodeType":"JSXOpeningElement","endLine":216,"endColumn":4}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { User, Edit, Eye, Download, ArrowUpDown, MoreHorizontal } from \"lucide-react\";\nimport { useMemo } from 'react';\nimport { \n Card, \n Avatar, \n Badge, \n Button,\n Skeleton\n} from '@ghxstship/ui';\nimport type { UserProfile, ProfileSort } from '../types';\n\ninterface ProfileTableViewProps {\n profiles: UserProfile[];\n loading: boolean;\n selectedItems: string[];\n onSelectItem: (id: string, selected: boolean) => void;\n onSelectAll: (ids: string[], selected: boolean) => void;\n onSort?: (sort: ProfileSort) => void;\n onEdit?: (profile: UserProfile) => void;\n onView?: (profile: UserProfile) => void;\n onExport?: (profile: UserProfile) => void;\n currentSort?: ProfileSort;\n}\n\nexport default function ProfileTableView({\n profiles,\n loading,\n selectedItems,\n onSelectItem,\n onSelectAll,\n onSort,\n onEdit,\n onView,\n onExport,\n currentSort\n}: ProfileTableViewProps) {\n const allSelected = profiles.length > 0 && profiles.every(profile => selectedItems.includes(profile.id));\n const someSelected = profiles.some(profile => selectedItems.includes(profile.id));\n\n const handleSelectAll = () => {\n const profileIds = profiles.map(profile => profile.id);\n onSelectAll(profileIds, !allSelected);\n };\n\n const handleSort = (field: keyof UserProfile) => {\n if (!onSort) return;\n \n const direction = currentSort?.field === field && currentSort?.direction === 'asc' ? 'desc' : 'asc';\n onSort({ field, direction });\n };\n\n const getSortIcon = (field: keyof UserProfile) => {\n if (currentSort?.field !== field) return <ArrowUpDown className=\"h-3 w-3 opacity-50\" />;\n return <ArrowUpDown className={`h-3 w-3 ${currentSort.direction === 'desc' ? 'rotate-180' : ''}`} />;\n };\n\n const formatDate = (dateString?: string) => {\n if (!dateString) return 'Not specified';\n return new Date(dateString).toLocaleDateString();\n };\n\n const getCompletionColor = (percentage: number) => {\n if (percentage >= 80) return 'text-green-600';\n if (percentage >= 60) return 'text-yellow-600';\n return 'text-red-600';\n };\n\n if (loading) {\n return (\n <Card className=\"p-lg\">\n <div className=\"space-y-md\">\n <Skeleton className=\"h-icon-lg w-full\" />\n {Array.from({ length: 5 }).map((_, i) => (\n <div key={i} className=\"flex items-center gap-md\">\n <Skeleton className=\"h-icon-xs w-icon-xs\" />\n <Skeleton className=\"h-icon-lg w-icon-lg rounded-full\" />\n <Skeleton className=\"h-icon-xs flex-1\" />\n <Skeleton className=\"h-icon-xs w-component-lg\" />\n <Skeleton className=\"h-icon-xs w-component-md\" />\n </div>\n ))}\n </div>\n </Card>\n );\n }\n\n if (profiles.length === 0) {\n return (\n <Card className=\"p-xsxl text-center\">\n <User className=\"h-icon-2xl w-icon-2xl text-muted-foreground mx-auto mb-4\" />\n <h3 className=\"text-lg font-semibold mb-2\">No Profiles Found</h3>\n <p className=\"text-muted-foreground\">\n No profiles match the current filters.\n </p>\n </Card>\n );\n }\n\n return (\n <Card className=\"p-lg\">\n <div className=\"overflow-x-auto\">\n <table className=\"w-full\">\n <thead>\n <tr className=\"border-b\">\n <th className=\"text-left p-xs\">\n <input\n type=\"checkbox\"\n checked={allSelected}\n ref={(input) => {\n if (input) input.indeterminate = someSelected && !allSelected;\n }}\n onChange={handleSelectAll}\n className=\"h-icon-xs w-icon-xs rounded border-border\"\n />\n </th>\n <th className=\"text-left p-xs\">Profile</th>\n <th className=\"text-left p-xs\">\n <Button\n variant=\"ghost\"\n size=\"sm\"\n onClick={() => handleSort('job_title')}\n className=\"h-auto p-0 font-semibold\"\n >\n Position\n {getSortIcon('job_title')}\n </Button>\n </th>\n <th className=\"text-left p-xs\">\n <Button\n variant=\"ghost\"\n size=\"sm\"\n onClick={() => handleSort('department')}\n className=\"h-auto p-0 font-semibold\"\n >\n Department\n {getSortIcon('department')}\n </Button>\n </th>\n <th className=\"text-left p-xs\">\n <Button\n variant=\"ghost\"\n size=\"sm\"\n onClick={() => handleSort('employment_type')}\n className=\"h-auto p-0 font-semibold\"\n >\n Type\n {getSortIcon('employment_type')}\n </Button>\n </th>\n <th className=\"text-left p-xs\">\n <Button\n variant=\"ghost\"\n size=\"sm\"\n onClick={() => handleSort('profile_completion_percentage')}\n className=\"h-auto p-0 font-semibold\"\n >\n Completion\n {getSortIcon('profile_completion_percentage')}\n </Button>\n </th>\n <th className=\"text-left p-xs\">\n <Button\n variant=\"ghost\"\n size=\"sm\"\n onClick={() => handleSort('status')}\n className=\"h-auto p-0 font-semibold\"\n >\n Status\n {getSortIcon('status')}\n </Button>\n </th>\n <th className=\"text-left p-xs\">\n <Button\n variant=\"ghost\"\n size=\"sm\"\n onClick={() => handleSort('updated_at')}\n className=\"h-auto p-0 font-semibold\"\n >\n Updated\n {getSortIcon('updated_at')}\n </Button>\n </th>\n <th className=\"text-left p-xs\">Actions</th>\n </tr>\n </thead>\n <tbody>\n {profiles.map((profile) => {\n const isSelected = selectedItems.includes(profile.id);\n \n return (\n <tr \n key={profile.id} \n className={`border-b hover:bg-muted/50 ${\n isSelected ? 'bg-muted/30' : ''\n }`}\n >\n <td className=\"p-xs\">\n <input\n type=\"checkbox\"\n checked={isSelected}\n onChange={(e) => onSelectItem(profile.id, e.target.checked)}\n className=\"h-icon-xs w-icon-xs rounded border-border\"\n />\n </td>\n \n <td className=\"p-xs\">\n <div className=\"flex items-center gap-sm\">\n <Avatar className=\"h-icon-lg w-icon-lg\">\n {profile.avatar_url ? (\n <img \n src={profile.avatar_url} \n alt=\"Profile\" \n className=\"h-full w-full object-cover\" \n />\n ) : (\n <User className=\"h-icon-xs w-icon-xs\" />\n )}\n </Avatar>\n <div>\n <div className=\"font-medium text-sm\">\n {profile.employee_id || 'No ID'}\n </div>\n <div className=\"text-xs text-muted-foreground\">\n {profile.nationality || 'Not specified'}\n </div>\n </div>\n </div>\n </td>\n \n <td className=\"p-xs\">\n <div className=\"text-sm\">\n {profile.job_title || 'No Title'}\n </div>\n </td>\n \n <td className=\"p-xs\">\n <div className=\"text-sm\">\n {profile.department || 'Unassigned'}\n </div>\n </td>\n \n <td className=\"p-xs\">\n {profile.employment_type && (\n <Badge variant=\"outline\" className=\"text-xs\">\n {profile.employment_type}\n </Badge>\n )}\n </td>\n \n <td className=\"p-xs\">\n <div className={`text-sm font-medium ${getCompletionColor(profile.profile_completion_percentage)}`}>\n {profile.profile_completion_percentage}%\n </div>\n <div className=\"w-component-md bg-muted rounded-full h-1 mt-1\">\n <div\n className=\"bg-primary h-1 rounded-full transition-all\"\n style={{ width: `${profile.profile_completion_percentage}%` }}\n />\n </div>\n </td>\n \n <td className=\"p-xs\">\n <Badge variant={profile.status === 'active' ? 'default' : 'secondary'}>\n {profile.status}\n </Badge>\n </td>\n \n <td className=\"p-xs\">\n <div className=\"text-sm text-muted-foreground\">\n {formatDate(profile.updated_at)}\n </div>\n </td>\n \n <td className=\"p-xs\">\n <div className=\"flex items-center gap-xs\">\n {onView && (\n <Button\n variant=\"ghost\"\n size=\"sm\"\n onClick={() => onView(profile)}\n className=\"h-icon-md w-icon-md p-0\"\n >\n <Eye className=\"h-3 w-3\" />\n </Button>\n )}\n {onEdit && (\n <Button\n variant=\"ghost\"\n size=\"sm\"\n onClick={() => onEdit(profile)}\n className=\"h-icon-md w-icon-md p-0\"\n >\n <Edit className=\"h-3 w-3\" />\n </Button>\n )}\n {onExport && (\n <Button\n variant=\"ghost\"\n size=\"sm\"\n onClick={() => onExport(profile)}\n className=\"h-icon-md w-icon-md p-0\"\n >\n <Download className=\"h-3 w-3\" />\n </Button>\n )}\n </div>\n </td>\n </tr>\n );\n })}\n </tbody>\n </table>\n </div>\n </Card>\n );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/profile/certifications/CertificationsClient.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadCertifications'. Either include it or remove the dependency array.","line":51,"column":6,"nodeType":"ArrayExpression","endLine":51,"endColumn":21,"suggestions":[{"desc":"Update the dependencies array to be: [loadCertifications, orgId, userId]","fix":{"range":[1379,1394],"text":"[loadCertifications, orgId, userId]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\n\nimport { useState, useEffect } from 'react';\nimport { useTranslations } from 'next-intl';\nimport { createBrowserClient } from '@ghxstship/auth';\nimport {\n  Badge,\n  Button,\n  Card,\n  Input,\n  UnifiedInput\n} from \"@ghxstship/ui\";\nimport { Award, Calendar, ExternalLink, ExternalTrash2, Plus, Save, Trash2 } from 'lucide-react';\n\ninterface Certification {\n  id: string;\n  name: string;\n  issuing_organization: string;\n  certification_number?: string;\n  issue_date?: string;\n  expiry_date?: string;\n  status: 'active' | 'expired' | 'suspended' | 'revoked';\n  verification_url?: string;\n  attachment_url?: string;\n  notes?: string;\n  created_at: string;\n  updated_at: string;\n}\n\nexport default function CertificationsClient({ orgId, userId }: { orgId: string; userId: string }) {\n  const t = useTranslations('profile');\n  const sb = createBrowserClient();\n  const [certifications, setCertifications] = useState<Certification[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [saving, setSaving] = useState(false);\n  const [showAddForm, setShowAddForm] = useState(false);\n  const [formData, setFormData] = useState({\n    name: '',\n    issuing_organization: '',\n    certification_number: '',\n    issue_date: '',\n    expiry_date: '',\n    verification_url: '',\n    attachment_url: '',\n    notes: ''\n  });\n\n  useEffect(() => {\n    loadCertifications();\n  }, [orgId, userId]);\n\n  const loadCertifications = async () => {\n    try {\n      setLoading(true);\n      \n      const { data: userData } = await sb\n        .from('users')\n        .select('id')\n        .eq('auth_id', userId)\n        .single();\n\n      if (userData) {\n        const { data: certificationsData } = await sb\n          .from('user_certifications')\n          .select('*')\n          .eq('user_id', userData.id)\n          .eq('organization_id', orgId)\n          .order('created_at', { ascending: false });\n\n        setCertifications(certificationsData || []);\n      }\n    } catch (error) {\n      console.error('Error loading certifications:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleAdd = async () => {\n    try {\n      setSaving(true);\n      \n      const { data: userData } = await sb\n        .from('users')\n        .select('id')\n        .eq('auth_id', userId)\n        .single();\n\n      if (userData) {\n        const { error } = await sb\n          .from('user_certifications')\n          .insert({\n            ...formData,\n            user_id: userData.id,\n            organization_id: orgId,\n            status: 'active'\n          });\n\n        if (error) throw error;\n        \n        setFormData({\n          name: '',\n          issuing_organization: '',\n          certification_number: '',\n          issue_date: '',\n          expiry_date: '',\n          verification_url: '',\n          attachment_url: '',\n          notes: ''\n        });\n        setShowAddForm(false);\n        await loadCertifications();\n      }\n    } catch (error) {\n      console.error('Error adding certification:', error);\n    } finally {\n      setSaving(false);\n    }\n  };\n\n  const handleDelete = async (certificationId: string) => {\n    try {\n      const { error } = await sb\n        .from('user_certifications')\n        .delete()\n        .eq('id', certificationId);\n\n      if (error) throw error;\n      await loadCertifications();\n    } catch (error) {\n      console.error('Error deleting certification:', error);\n    }\n  };\n\n  const getStatusColor = (status: string, expiryDate?: string) => {\n    if (status === 'expired') return 'destructive';\n    if (expiryDate) {\n      const expiry = new Date(expiryDate);\n      const now = new Date();\n      const thirtyDaysFromNow = new Date();\n      thirtyDaysFromNow.setDate(now.getDate() + 30);\n      \n      if (expiry < now) return 'destructive';\n      if (expiry <= thirtyDaysFromNow) return 'warning';\n    }\n    return 'default';\n  };\n\n  const getStatusText = (status: string, expiryDate?: string) => {\n    if (status === 'expired') return 'Expired';\n    if (expiryDate) {\n      const expiry = new Date(expiryDate);\n      const now = new Date();\n      const thirtyDaysFromNow = new Date();\n      thirtyDaysFromNow.setDate(now.getDate() + 30);\n      \n      if (expiry < now) return 'Expired';\n      if (expiry <= thirtyDaysFromNow) return 'Expiring Soon';\n    }\n    return 'Active';\n  };\n\n  if (loading) {\n    return (\n      <div className=\"stack-md\">\n        <div className=\"animate-pulse stack-md\">\n          <div className=\"h-icon-xs bg-secondary rounded w-3/4\"></div>\n          <div className=\"h-icon-xs bg-secondary rounded w-1/2\"></div>\n          <div className=\"h-icon-xs bg-secondary rounded w-2/3\"></div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"stack-lg\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center gap-sm\">\n          <Award className=\"h-icon-sm w-icon-sm\" />\n          <h3 className=\"text-body text-heading-4\">Certifications</h3>\n        </div>\n        <Button onClick={() => setShowAddForm(true)}>\n          <Plus className=\"h-icon-xs w-icon-xs mr-sm\" />\n          Add Certification\n        </Button>\n      </div>\n\n      {/* Add Form */}\n      {showAddForm && (\n        <Card>\n          <div className=\"p-md\">\n            <h4 className=\"form-label mb-md\">Add New Certification</h4>\n            \n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-md mb-md\">\n              <div className=\"stack-sm\">\n                <label className=\"text-body-sm form-label\">Certification Name *</label>\n                <Input                   value={formData.name}\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => setFormData(prev => ({ ...prev, name: e.target.value }))}\n                  placeholder=\"AWS Solutions Architect\"\n                />\n              </div>\n              \n              <div className=\"stack-sm\">\n                <label className=\"text-body-sm form-label\">Issuing Organization *</label>\n                <Input                   value={formData.issuing_organization}\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => setFormData(prev => ({ ...prev, issuing_organization: e.target.value }))}\n                  placeholder=\"Amazon Web Services\"\n                />\n              </div>\n              \n              <div className=\"stack-sm\">\n                <label className=\"text-body-sm form-label\">Certification Number</label>\n                <Input                   value={formData.certification_number}\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => setFormData(prev => ({ ...prev, certification_number: e.target.value }))}\n                  placeholder=\"AWS-SAA-123456\"\n                />\n              </div>\n              \n              <div className=\"stack-sm\">\n                <label className=\"text-body-sm form-label\">Issue Date</label>\n                <Input                   type=\"date\"\n                  value={formData.issue_date}\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => setFormData(prev => ({ ...prev, issue_date: e.target.value }))}\n                />\n              </div>\n              \n              <div className=\"stack-sm\">\n                <label className=\"text-body-sm form-label\">Expiry Date</label>\n                <Input                   type=\"date\"\n                  value={formData.expiry_date}\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => setFormData(prev => ({ ...prev, expiry_date: e.target.value }))}\n                />\n              </div>\n              \n              <div className=\"stack-sm\">\n                <label className=\"text-body-sm form-label\">Verification URL</label>\n                <Input                   value={formData.verification_url}\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => setFormData(prev => ({ ...prev, verification_url: e.target.value }))}\n                  placeholder=\"https://verify.aws.com/...\"\n                />\n              </div>\n            </div>\n            \n            <div className=\"stack-sm mb-md\">\n              <label className=\"text-body-sm form-label\">Notes</label>\n              <textarea\n                value={formData.notes}\n                onChange={(e: React.ChangeEvent<HTMLInputElement>) => setFormData(prev => ({ ...prev, notes: e.target.value }))}\n                className=\"w-full  px-md py-sm border border-input bg-background rounded-md\"\n                rows={3}\n                placeholder=\"Additional notes about this certification...\"\n              />\n            </div>\n            \n            <div className=\"flex gap-sm\">\n              <Button onClick={handleAdd} disabled={saving || !formData.name || !formData.issuing_organization}>\n                <Save className=\"h-icon-xs w-icon-xs mr-sm\" />\n                {saving ? 'Adding...' : 'Add Certification'}\n              </Button>\n              <Button variant=\"outline\" onClick={() => setShowAddForm(false)}>\n                Cancel\n              </Button>\n            </div>\n          </div>\n        </Card>\n      )}\n\n      {/* Certifications List */}\n      <div className=\"stack-md\">\n        {certifications.length === 0 ? (\n          <Card>\n            <div className=\"p-xl text-center color-muted\">\n              <Award className=\"h-icon-2xl w-icon-2xl mx-auto mb-md opacity-50\" />\n              <p>No certifications added yet.</p>\n              <p className=\"text-body-sm\">Add your professional certifications to showcase your expertise.</p>\n            </div>\n          </Card>\n        ) : (\n          certifications.map((cert: any) => (\n            <Card key={cert.id}>\n              <div className=\"p-md\">\n                <div className=\"flex items-start justify-between\">\n                  <div className=\"flex-1\">\n                    <div className=\"flex items-center gap-sm mb-sm\">\n                      <h4 className=\"form-label\">{cert.name}</h4>\n                      <Badge variant={getStatusColor(cert.status, cert.expiry_date)}>\n                        {getStatusText(cert.status, cert.expiry_date)}\n                      </Badge>\n                    </div>\n                    \n                    <p className=\"text-body-sm color-muted mb-sm\">\n                      Issued by {cert.issuing_organization}\n                    </p>\n                    \n                    {cert.certification_number && (\n                      <p className=\"text-body-sm\">\n                        <span className=\"form-label\">Number:</span> {cert.certification_number}\n                      </p>\n                    )}\n                    \n                    <div className=\"flex items-center gap-md text-body-sm color-muted mt-sm\">\n                      {cert.issue_date && (\n                        <div className=\"flex items-center gap-xs\">\n                          <Calendar className=\"h-3 w-3\" />\n                          Issued: {new Date(cert.issue_date).toLocaleDateString()}\n                        </div>\n                      )}\n                      {cert.expiry_date && (\n                        <div className=\"flex items-center gap-xs\">\n                          <Calendar className=\"h-3 w-3\" />\n                          Expires: {new Date(cert.expiry_date).toLocaleDateString()}\n                        </div>\n                      )}\n                    </div>\n                    \n                    {cert.notes && (\n                      <p className=\"text-body-sm mt-sm color-muted\">{cert.notes}</p>\n                    )}\n                  </div>\n                  \n                  <div className=\"flex items-center gap-sm\">\n                    {cert.verification_url && (\n                      <Button\n                       \n                        variant=\"outline\"\n                        onClick={() => window.open(cert.verification_url, '_blank')}\n                      >\n                        <ExternalLink className=\"h-3 w-3\" />\n                      </Button>\n                    )}\n                    <Button\n                     \n                      variant=\"outline\"\n                      onClick={() => handleDelete(cert.id)}\n                    >\n                      <Trash2 className=\"h-3 w-3\" />\n                    </Button>\n                  </div>\n                </div>\n              </div>\n            </Card>\n          ))\n        )}\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/profile/certifications/drawers/CreateCertificationsDrawer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/profile/certifications/lib/certificationService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/profile/certifications/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/profile/certifications/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/profile/certifications/views/CertificationAnalyticsView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/profile/certifications/views/CertificationGridView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/profile/certifications/views/CertificationListView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/profile/certifications/views/CertificationTableView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/profile/contact/ContactClient.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'setFormErrors'. Either include it or remove the dependency array.","line":182,"column":5,"nodeType":"ArrayExpression","endLine":182,"endColumn":7,"suggestions":[{"desc":"Update the dependencies array to be: [setFormErrors]","fix":{"range":[5776,5778],"text":"[setFormErrors]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'setFormErrors'. Either include it or remove the dependency array.","line":211,"column":5,"nodeType":"ArrayExpression","endLine":211,"endColumn":78,"suggestions":[{"desc":"Update the dependencies array to be: [formData, setFormErrors, userId, fetchContact, fetchContactsList, view, fetchAnalytics]","fix":{"range":[6453,6526],"text":"[formData, setFormErrors, userId, fetchContact, fetchContactsList, view, fetchAnalytics]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { FileText, CreditCard, List, Map, BarChart3, RefreshCw, ShieldCheck, AlertTriangle, type LucideIcon } from \"lucide-react\";\nimport { useState, useEffect, useCallback, useMemo } from 'react';\nimport {\n  Badge,\n  Button,\n  Card,\n  Tabs,\n  TabsContent,\n  TabsList,\n  TabsTrigger\n} from \"@ghxstship/ui\";\nimport type { \n ContactInfo,\n ContactFilters,\n ContactSort,\n ContactStats,\n ContactAnalytics,\n ViewType,\n ContactFormData\n} from './types';\nimport {\n VIEW_CONFIG,\n QUICK_FILTERS,\n createEmptyContact,\n createEmptyContactStats,\n createEmptyContactAnalytics,\n validateContactForm\n} from './types';\nimport ContactFormView from './views/ContactFormView';\nimport ContactCardView from './views/ContactCardView';\nimport ContactListView from './views/ContactListView';\nimport ContactMapView from './views/ContactMapView';\nimport ContactAnalyticsView from './views/ContactAnalyticsView';\n\nconst DEFAULT_FILTERS: ContactFilters = {\n search: '',\n verification_status: 'all',\n preferred_contact_method: 'all',\n has_emergency_contact: false\n};\n\nconst DEFAULT_SORT: ContactSort = {\n field: 'phone_primary',\n direction: 'asc'\n};\n\ninterface ContactClientProps {\n orgId: string;\n userId: string;\n}\n\nexport default function ContactClient({ orgId, userId }: ContactClientProps) {\n const [contact, setContact] = useState<ContactInfo | null>(null);\n const [contactsList, setContactsList] = useState<ContactInfo[]>([]);\n const [stats, setStats] = useState<ContactStats>(createEmptyContactStats());\n const [analytics, setAnalytics] = useState<ContactAnalytics>(createEmptyContactAnalytics());\n const [formData, setFormData] = useState<ContactFormData>(createEmptyContact());\n const [formErrors, setFormErrors] = useState<Record<string, string>({});\n const [filters, setFilters] = useState<ContactFilters>(DEFAULT_FILTERS);\n const [sort, setSort] = useState<ContactSort>(DEFAULT_SORT);\n const [view, setView] = useState<ViewType>('form');\n const [selectedItems, setSelectedItems] = useState<string[]>([]);\n const [loading, setLoading] = useState(true);\n const [saving, setSaving] = useState(false);\n const [analyticsLoading, setAnalyticsLoading] = useState(false);\n const [selectedContactId, setSelectedContactId] = useState<string | null>(null);\n\n const fetchContact = useCallback(async () => {\n try {\n setLoading(true);\n const response = await fetch(`/api/v1/profile/contact?user_id=${userId}`);\n if (!response.ok) throw new Error('Failed to fetch contact');\n const data = await response.json();\n setContact(data);\n setFormData({\n phone_primary: data.phone_primary || '',\n phone_secondary: data.phone_secondary || '',\n phone_mobile: data.phone_mobile || '',\n phone_work: data.phone_work || '',\n phone_extension: data.phone_extension || '',\n address_line1: data.address_line1 || '',\n address_line2: data.address_line2 || '',\n city: data.city || '',\n state_province: data.state_province || '',\n postal_code: data.postal_code || '',\n country: data.country || '',\n billing_address_line1: data.billing_address_line1 || '',\n billing_address_line2: data.billing_address_line2 || '',\n billing_city: data.billing_city || '',\n billing_state_province: data.billing_state_province || '',\n billing_postal_code: data.billing_postal_code || '',\n billing_country: data.billing_country || '',\n billing_same_as_primary: data.billing_same_as_primary || false,\n emergency_contact_name: data.emergency_contact_name || '',\n emergency_contact_relationship: data.emergency_contact_relationship || '',\n emergency_contact_phone: data.emergency_contact_phone || '',\n emergency_contact_email: data.emergency_contact_email || '',\n timezone: data.timezone || '',\n preferred_contact_method: data.preferred_contact_method || 'email',\n do_not_contact: data.do_not_contact || false,\n contact_notes: data.contact_notes || ''\n });\n } catch (error) {\n console.error('Error fetching contact:', error);\n setContact(null);\n } finally {\n setLoading(false);\n }\n }, [userId]);\n\n const fetchContactsList = useCallback(async () => {\n try {\n const params = new URLSearchParams();\n params.append('view_all', 'true');\n Object.entries(filters).forEach(([key, value]) => {\n if (value !== undefined && value !== null) {\n params.append(key, String(value));\n }\n });\n\n const response = await fetch(`/api/v1/profile/contact?${params.toString()}`);\n if (!response.ok) {\n if (response.status === 403) {\n setContactsList(prev => (contact ? [contact] : prev));\n setStats(createEmptyContactStats());\n return;\n }\n throw new Error('Failed to fetch contacts list');\n }\n const data = await response.json();\n setContactsList(data.contacts || []);\n setStats(data.stats || createEmptyContactStats());\n } catch (error) {\n console.error('Error fetching contacts list:', error);\n setContactsList(contact ? [contact] : []);\n setStats(createEmptyContactStats());\n }\n }, [filters, contact]);\n\n const fetchAnalytics = useCallback(async () => {\n try {\n setAnalyticsLoading(true);\n const response = await fetch(`/api/v1/profile/contact/analytics`);\n if (!response.ok) throw new Error('Failed to fetch analytics');\n const data = await response.json();\n setAnalytics(data);\n } catch (error) {\n console.error('Error fetching contact analytics:', error);\n setAnalytics(createEmptyContactAnalytics());\n } finally {\n setAnalyticsLoading(false);\n }\n }, []);\n\n useEffect(() => {\n fetchContact();\n }, [fetchContact]);\n\n useEffect(() => {\n fetchContactsList();\n }, [fetchContactsList]);\n\n useEffect(() => {\n if (view === 'analytics') {\n fetchAnalytics();\n }\n }, [view, fetchAnalytics]);\n\n const handleFieldChange = useCallback((field: keyof ContactFormData, value: unknown) => {\n setFormData(prev => ({\n ...prev,\n [field]: value\n }));\n setFormErrors(prev => {\n if (!prev[field]) return prev;\n const next = { ...prev };\n delete next[field];\n return next;\n });\n }, []);\n\n const handleSave = useCallback(async () => {\n const errors = validateContactForm(formData);\n if (Object.keys(errors).length > 0) {\n setFormErrors(errors);\n return;\n }\n\n try {\n setSaving(true);\n const response = await fetch(`/api/v1/profile/contact?user_id=${userId}`, {\n method: 'PUT',\n headers: { 'Content-Type': 'application/json' },\n body: JSON.stringify(formData)\n });\n\n if (!response.ok) throw new Error('Failed to save contact');\n\n await Promise.all([\n fetchContact(),\n fetchContactsList(),\n view === 'analytics' ? fetchAnalytics() : Promise.resolve(),\n ]);\n } catch (error) {\n console.error('Error saving contact:', error);\n } finally {\n setSaving(false);\n }\n }, [formData, fetchContact, fetchContactsList, fetchAnalytics, userId, view]);\n\n const handleVerify = useCallback(async () => {\n try {\n const response = await fetch(`/api/v1/profile/contact?user_id=${userId}&action=verify`, {\n method: 'POST'\n });\n if (!response.ok) throw new Error('Failed to verify contact');\n await Promise.all([\n fetchContact(),\n fetchContactsList(),\n ]);\n } catch (error) {\n console.error('Error verifying contact:', error);\n }\n }, [fetchContact, fetchContactsList, userId]);\n\n const handleSelectContact = useCallback((contact: ContactInfo) => {\n setSelectedContactId(contact.id);\n setContact(contact);\n setFormData({\n phone_primary: contact.phone_primary || '',\n phone_secondary: contact.phone_secondary || '',\n phone_mobile: contact.phone_mobile || '',\n phone_work: contact.phone_work || '',\n phone_extension: contact.phone_extension || '',\n address_line1: contact.address_line1 || '',\n address_line2: contact.address_line2 || '',\n city: contact.city || '',\n state_province: contact.state_province || '',\n postal_code: contact.postal_code || '',\n country: contact.country || '',\n billing_address_line1: contact.billing_address_line1 || '',\n billing_address_line2: contact.billing_address_line2 || '',\n billing_city: contact.billing_city || '',\n billing_state_province: contact.billing_state_province || '',\n billing_postal_code: contact.billing_postal_code || '',\n billing_country: contact.billing_country || '',\n billing_same_as_primary: contact.billing_same_as_primary || false,\n emergency_contact_name: contact.emergency_contact_name || '',\n emergency_contact_relationship: contact.emergency_contact_relationship || '',\n emergency_contact_phone: contact.emergency_contact_phone || '',\n emergency_contact_email: contact.emergency_contact_email || '',\n timezone: contact.timezone || '',\n preferred_contact_method: contact.preferred_contact_method || 'email',\n do_not_contact: contact.do_not_contact || false,\n contact_notes: contact.contact_notes || ''\n });\n }, []);\n\n const handleSelectItem = useCallback((id: string, selected: boolean) => {\n setSelectedItems(prev => {\n if (selected) {\n return prev.includes(id) ? prev : [...prev, id];\n }\n return prev.filter(itemId => itemId !== id);\n });\n }, []);\n\n const handleSelectAll = useCallback((ids: string[], selected: boolean) => {\n setSelectedItems(selected ? Array.from(new Set([...selectedItems, ...ids])) : []);\n }, [selectedItems]);\n\n const iconMap: Record<ViewType, LucideIcon> = useMemo(() => ({\n form: FileText,\n card: CreditCard,\n list: List,\n map: Map,\n analytics: BarChart3\n }), []);\n\n const selectedContact = selectedContactId\n ? contactsList.find(c => c.id === selectedContactId) || contact\n : contact;\n\n return (\n <div className=\"space-y-lg\">\n <Card className=\"p-md flex items-center justify-between\">\n <div className=\"space-y-xs\">\n <div className=\"flex items-center gap-xs\">\n <Badge variant=\"outline\">Contact</Badge>\n <span className=\"text-sm text-muted-foreground\">\n {contact?.verification_status === 'verified' ? (\n <span className=\"text-green-600 flex items-center gap-xs\">\n <ShieldCheck className=\"h-icon-xs w-icon-xs\" /> Contact verified\n </span>\n ) : (\n <span className=\"text-yellow-600 flex items-center gap-xs\">\n <AlertTriangle className=\"h-icon-xs w-icon-xs\" /> Verification pending\n </span>\n )}\n </span>\n </div>\n <h1 className=\"text-2xl font-semibold\">\n Contact Information\n </h1>\n </div>\n <Button variant=\"outline\" size=\"sm\" onClick={() => {\n fetchContact();\n fetchContactsList();\n if (view === 'analytics') fetchAnalytics();\n }}>\n <RefreshCw className=\"mr-2 h-icon-xs w-icon-xs\" />\n Refresh\n </Button>\n </Card>\n\n <Tabs value={view} onChange={(e) => setView(e.target.value as ViewType)}>\n <TabsList className=\"grid grid-cols-5 w-full\">\n {Object.entries(VIEW_CONFIG).map(([key, { label, icon }]) => {\n const Icon = iconMap[key as ViewType] ?? FileText;\n return (\n <TabsTrigger key={key} value={key} className=\"flex items-center gap-xs\">\n <Icon className=\"h-icon-xs w-icon-xs\" />\n {label}\n </TabsTrigger>\n );\n })}\n </TabsList>\n\n <TabsContent value=\"form\">\n <ContactFormView\n contact={selectedContact}\n formData={formData}\n formErrors={formErrors}\n loading={loading}\n saving={saving}\n onFieldChange={handleFieldChange}\n onSave={handleSave}\n onVerify={handleVerify}\n />\n </TabsContent>\n\n <TabsContent value=\"card\">\n <ContactCardView\n contact={selectedContact}\n loading={loading}\n onEdit={() => setView('form')}\n onVerify={contact?.verification_status !== 'verified' ? handleVerify : undefined}\n />\n </TabsContent>\n\n <TabsContent value=\"list\">\n <ContactListView\n contacts={contactsList}\n loading={loading}\n selectedItems={selectedItems}\n filters={filters}\n sort={sort}\n onSelectItem={handleSelectItem}\n onSelectAll={handleSelectAll}\n onChangeFilters={(newFilters) => {\n setFilters(prev => ({ ...prev, ...newFilters }));\n }}\n onChangeSort={setSort}\n onExport={(contact) => {\n const contactsToExport = contact ? [contact] : contactsList.filter(c => selectedItems.includes(c.id));\n const rows = [\n ['Name', 'Primary Phone', 'Preferred Method', 'City', 'State', 'Country'],\n ...contactsToExport.map(item => [\n item.emergency_contact_name || '',\n item.phone_primary || '',\n item.preferred_contact_method || '',\n item.city || '',\n item.state_province || '',\n item.country || '',\n ]),\n ];\n const csvContent = rows.map(row => row.map(cell => `\"${cell}\"`).join(',')).join('\\n');\n const blob = new Blob([csvContent], { type: 'text/csv' });\n const url = URL.createObjectURL(blob);\n const link = document.createElement('a');\n link.href = url;\n link.download = contact ? `contact-${contact.id}.csv` : `contacts-${new Date().toISOString().split('T')[0]}.csv`;\n link.click();\n URL.revokeObjectURL(url);\n }}\n onViewContact={handleSelectContact}\n />\n </TabsContent>\n\n <TabsContent value=\"map\">\n <ContactMapView\n contacts={contactsList}\n loading={loading}\n selectedContactId={selectedContactId}\n onSelectContact={handleSelectContact}\n />\n </TabsContent>\n\n <TabsContent value=\"analytics\">\n <ContactAnalyticsView\n stats={stats}\n analytics={analytics}\n loading={loading}\n analyticsLoading={analyticsLoading}\n />\n </TabsContent>\n </Tabs>\n </div>\n );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/profile/contact/ContactInfoClient.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadProfile'. Either include it or remove the dependency array.","line":46,"column":6,"nodeType":"ArrayExpression","endLine":46,"endColumn":21,"suggestions":[{"desc":"Update the dependencies array to be: [loadProfile, orgId, userId]","fix":{"range":[1132,1147],"text":"[loadProfile, orgId, userId]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\n\nimport { useState, useEffect } from 'react';\nimport { useTranslations } from 'next-intl';\nimport { createBrowserClient } from '@ghxstship/auth';\nimport {\n  Button,\n  Card,\n  Input,\n  UnifiedInput\n} from \"@ghxstship/ui\";\nimport { Save, Phone, Mail, MapPin } from 'lucide-react';\n\ninterface UserProfile {\n  id: string;\n  phone_primary?: string;\n  phone_secondary?: string;\n  address_line1?: string;\n  address_line2?: string;\n  city?: string;\n  state_province?: string;\n  postal_code?: string;\n  country?: string;\n}\n\nexport default function ContactInfoClient({ orgId, userId }: { orgId: string; userId: string }) {\n  const t = useTranslations('profile');\n  const sb = createBrowserClient();\n  const [profile, setProfile] = useState<UserProfile | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [saving, setSaving] = useState(false);\n  const [formData, setFormData] = useState({\n    phone_primary: '',\n    phone_secondary: '',\n    address_line1: '',\n    address_line2: '',\n    city: '',\n    state_province: '',\n    postal_code: '',\n    country: ''\n  });\n\n  useEffect(() => {\n    loadProfile();\n  }, [orgId, userId]);\n\n  const loadProfile = async () => {\n    try {\n      setLoading(true);\n      \n      const { data: userData } = await sb\n        .from('users')\n        .select('id')\n        .eq('auth_id', userId)\n        .single();\n\n      if (userData) {\n        const { data: profileData } = await sb\n          .from('user_profiles')\n          .select('*')\n          .eq('user_id', userData.id)\n          .eq('organization_id', orgId)\n          .single();\n\n        if (profileData) {\n          setProfile(profileData);\n          setFormData({\n            phone_primary: profileData.phone_primary || '',\n            phone_secondary: profileData.phone_secondary || '',\n            address_line1: profileData.address_line1 || '',\n            address_line2: profileData.address_line2 || '',\n            city: profileData.city || '',\n            state_province: profileData.state_province || '',\n            postal_code: profileData.postal_code || '',\n            country: profileData.country || ''\n          });\n        }\n      }\n    } catch (error) {\n      console.error('Error loading profile:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleSave = async () => {\n    if (!profile) return;\n    \n    try {\n      setSaving(true);\n      \n      const { error } = await sb\n        .from('user_profiles')\n        .update({\n          ...formData,\n          updated_at: new Date().toISOString()\n        })\n        .eq('id', profile.id);\n\n      if (error) throw error;\n      \n      await loadProfile();\n    } catch (error) {\n      console.error('Error saving contact info:', error);\n    } finally {\n      setSaving(false);\n    }\n  };\n\n  if (loading) {\n    return (\n      <div className=\"stack-lg\">\n        <div className=\"animate-pulse stack-md\">\n          <div className=\"h-icon-xs bg-secondary rounded w-3/4\"></div>\n          <div className=\"h-icon-xs bg-secondary rounded w-1/2\"></div>\n          <div className=\"h-icon-xs bg-secondary rounded w-2/3\"></div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"stack-lg\">\n      {/* Phone Numbers */}\n      <Card>\n        <div className=\"p-md\">\n          <div className=\"flex items-center gap-sm mb-md\">\n            <Phone className=\"h-icon-sm w-icon-sm\" />\n            <h3 className=\"text-body text-heading-4\">Phone Numbers</h3>\n          </div>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-md\">\n            <div className=\"stack-sm\">\n              <label className=\"text-body-sm form-label\">Primary Phone</label>\n              <Input                 value={formData.phone_primary}\n                onChange={(e: React.ChangeEvent<HTMLInputElement>) => setFormData(prev => ({ ...prev, phone_primary: e.target.value }))}\n                placeholder=\"+1 (555) 123-4567\"\n              />\n            </div>\n            \n            <div className=\"stack-sm\">\n              <label className=\"text-body-sm form-label\">Secondary Phone</label>\n              <Input                 value={formData.phone_secondary}\n                onChange={(e: React.ChangeEvent<HTMLInputElement>) => setFormData(prev => ({ ...prev, phone_secondary: e.target.value }))}\n                placeholder=\"+1 (555) 987-6543\"\n              />\n            </div>\n          </div>\n        </div>\n      </Card>\n\n      {/* Address */}\n      <Card>\n        <div className=\"p-md\">\n          <div className=\"flex items-center gap-sm mb-md\">\n            <MapPin className=\"h-icon-sm w-icon-sm\" />\n            <h3 className=\"text-body text-heading-4\">Address</h3>\n          </div>\n          \n          <div className=\"stack-md\">\n            <div className=\"stack-sm\">\n              <label className=\"text-body-sm form-label\">Address Line 1</label>\n              <Input                 value={formData.address_line1}\n                onChange={(e: React.ChangeEvent<HTMLInputElement>) => setFormData(prev => ({ ...prev, address_line1: e.target.value }))}\n                placeholder=\"123 Main Street\"\n              />\n            </div>\n            \n            <div className=\"stack-sm\">\n              <label className=\"text-body-sm form-label\">Address Line 2</label>\n              <Input                 value={formData.address_line2}\n                onChange={(e: React.ChangeEvent<HTMLInputElement>) => setFormData(prev => ({ ...prev, address_line2: e.target.value }))}\n                placeholder=\"Apt 4B, Suite 200\"\n              />\n            </div>\n            \n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-md\">\n              <div className=\"stack-sm\">\n                <label className=\"text-body-sm form-label\">City</label>\n                <Input                   value={formData.city}\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => setFormData(prev => ({ ...prev, city: e.target.value }))}\n                  placeholder=\"San Francisco\"\n                />\n              </div>\n              \n              <div className=\"stack-sm\">\n                <label className=\"text-body-sm form-label\">State/Province</label>\n                <Input                   value={formData.state_province}\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => setFormData(prev => ({ ...prev, state_province: e.target.value }))}\n                  placeholder=\"California\"\n                />\n              </div>\n              \n              <div className=\"stack-sm\">\n                <label className=\"text-body-sm form-label\">Postal Code</label>\n                <Input                   value={formData.postal_code}\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => setFormData(prev => ({ ...prev, postal_code: e.target.value }))}\n                  placeholder=\"94102\"\n                />\n              </div>\n            </div>\n            \n            <div className=\"stack-sm\">\n              <label className=\"text-body-sm form-label\">Country</label>\n              <Input                 value={formData.country}\n                onChange={(e: React.ChangeEvent<HTMLInputElement>) => setFormData(prev => ({ ...prev, country: e.target.value }))}\n                placeholder=\"United States\"\n              />\n            </div>\n          </div>\n        </div>\n      </Card>\n\n      {/* Save Button */}\n      <div className=\"flex justify-end\">\n        <Button onClick={handleSave} disabled={saving}>\n          <Save className=\"h-icon-xs w-icon-xs mr-sm\" />\n          {saving ? 'Saving...' : 'Save Changes'}\n        </Button>\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/profile/contact/drawers/CreateContactDrawer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/profile/contact/lib/contactService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/profile/contact/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/profile/contact/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/profile/contact/views/ContactAnalyticsView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/profile/contact/views/ContactCardView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/profile/contact/views/ContactFormView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/profile/contact/views/ContactListView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/profile/contact/views/ContactMapView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/profile/create/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/profile/drawers/BulkActionsDrawer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/profile/drawers/CreateProfileDrawer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/profile/drawers/EditProfileDrawer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/profile/drawers/ExportDrawer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/profile/emergency/EmergencyClient.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'setFormErrors'. Either include it or remove the dependency array.","line":211,"column":4,"nodeType":"ArrayExpression","endLine":211,"endColumn":68,"suggestions":[{"desc":"Update the dependencies array to be: [fetchAnalytics, fetchContacts, formData, selectedContact, setFormErrors, view]","fix":{"range":[6083,6147],"text":"[fetchAnalytics, fetchContacts, formData, selectedContact, setFormErrors, view]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { FileText, Contact2, Users, Table, BarChart3, RefreshCw, ShieldAlert, ShieldCheck, type LucideIcon } from \"lucide-react\";\nimport { useCallback, useEffect, useMemo, useState } from 'react';\nimport {\n  Badge,\n  Button,\n  Card,\n  Tabs,\n  TabsContent,\n  TabsList,\n  TabsTrigger\n} from \"@ghxstship/ui\";\nimport type {\n EmergencyContact,\n EmergencyContactFilters,\n EmergencyContactSort,\n EmergencyContactStats,\n EmergencyContactAnalytics,\n EmergencyViewType,\n EmergencyContactFormData\n} from './types';\nimport {\n VIEW_CONFIG,\n QUICK_FILTERS,\n createEmptyFormData,\n createEmptyStats,\n createEmptyAnalytics,\n validateEmergencyForm,\n formatPhone\n} from './types';\nimport EmergencyFormView from './views/EmergencyFormView';\nimport EmergencyCardView from './views/EmergencyCardView';\nimport EmergencyRosterView from './views/EmergencyRosterView';\nimport EmergencyTableView from './views/EmergencyTableView';\nimport EmergencyAnalyticsView from './views/EmergencyAnalyticsView';\n\nconst DEFAULT_FILTERS: EmergencyContactFilters = {\n search: '',\n priority: 'all',\n verification_status: 'all',\n is_primary: 'all',\n availability: 'all'\n};\n\nconst DEFAULT_SORT: EmergencyContactSort = {\n field: 'priority_level',\n direction: 'asc'\n};\n\ninterface EmergencyClientProps {\n orgId: string;\n userId: string;\n}\n\ninterface FetchContactsResponse {\n contacts: EmergencyContact[];\n total: number;\n stats: EmergencyContactStats;\n}\n\nfunction EmergencyClient({ orgId, userId }: EmergencyClientProps) {\n const [contacts, setContacts] = useState<EmergencyContact[]>([]);\n const [stats, setStats] = useState<EmergencyContactStats>(createEmptyStats());\n const [analytics, setAnalytics] = useState<EmergencyContactAnalytics>(createEmptyAnalytics());\n const [selectedContactId, setSelectedContactId] = useState<string | null>(null);\n const [formData, setFormData] = useState<EmergencyContactFormData>(createEmptyFormData());\n const [formErrors, setFormErrors] = useState<Record<string, string>({});\n const [filters, setFilters] = useState<EmergencyContactFilters>(DEFAULT_FILTERS);\n const [sort, setSort] = useState<EmergencyContactSort>(DEFAULT_SORT);\n const [view, setView] = useState<EmergencyViewType>('form');\n const [selectedIds, setSelectedIds] = useState<string[]>([]);\n const [loading, setLoading] = useState(true);\n const [saving, setSaving] = useState(false);\n const [analyticsLoading, setAnalyticsLoading] = useState(false);\n\n const selectedContact = useMemo(() => {\n if (!selectedContactId) return null;\n return contacts.find(contact => contact.id === selectedContactId) ?? null;\n }, [contacts, selectedContactId]);\n\n const fetchContacts = useCallback(async () => {\n try {\n setLoading(true);\n const params = new URLSearchParams();\n params.append('view_all', 'true');\n Object.entries(filters).forEach(([key, value]) => {\n if (value !== undefined && value !== null) {\n params.append(key, String(value));\n }\n });\n\n const response = await fetch(`/api/v1/profile/emergency?${params.toString()}`);\n if (!response.ok) {\n throw new Error('Failed to load emergency contacts');\n }\n\n const data = await response.json() as FetchContactsResponse;\n const nextContacts = data.contacts ?? [];\n setContacts(nextContacts);\n setStats(data.stats ?? createEmptyStats());\n\n setSelectedIds(prev => prev.filter(id => nextContacts.some(contact => contact.id === id)));\n\n if (nextContacts.length === 0) {\n setSelectedContactId(null);\n setFormData(createEmptyFormData());\n return;\n }\n\n const existingSelection = selectedContactId\n ? nextContacts.find(contact => contact.id === selectedContactId)\n : undefined;\n\n const nextSelected = existingSelection\n || nextContacts.find(contact => contact.is_primary)\n || nextContacts[0];\n\n setSelectedContactId(nextSelected.id);\n setFormData(mapContactToForm(nextSelected));\n } catch (error) {\n console.error('Error loading emergency contacts:', error);\n setContacts([]);\n setStats(createEmptyStats());\n setSelectedContactId(null);\n setFormData(createEmptyFormData());\n } finally {\n setLoading(false);\n }\n }, [filters, selectedContactId]);\n\n const fetchAnalytics = useCallback(async () => {\n try {\n setAnalyticsLoading(true);\n const response = await fetch('/api/v1/profile/emergency/analytics');\n if (!response.ok) {\n throw new Error('Failed to load emergency analytics');\n }\n const data = await response.json() as EmergencyContactAnalytics;\n setAnalytics(data);\n } catch (error) {\n console.error('Error fetching emergency analytics:', error);\n setAnalytics(createEmptyAnalytics());\n } finally {\n setAnalyticsLoading(false);\n }\n }, []);\n\n useEffect(() => {\n void fetchContacts();\n }, [fetchContacts]);\n\n useEffect(() => {\n if (view === 'analytics') {\n void fetchAnalytics();\n }\n }, [view, fetchAnalytics]);\n\n const handleFieldChange = useCallback((field: keyof EmergencyContactFormData, value: EmergencyContactFormData[keyof EmergencyContactFormData]) => {\n setFormData(prev => ({\n ...prev,\n [field]: value\n }));\n setFormErrors(prev => {\n if (!prev[field]) return prev;\n delete next[field];\n return next;\n });\n}, [setFormErrors]);\n\n  const handleNewContact = useCallback(() => {\n    setSelectedContactId(null);\n    setFormData(createEmptyFormData());\n    setFormErrors({});\n  }, [setSelectedContactId, setFormData, setFormErrors]);\n\n const handleSave = useCallback(async () => {\n const errors = validateEmergencyForm(formData);\n if (Object.keys(errors).length > 0) {\n setFormErrors(errors);\n return;\n }\n\n const payload = mapFormToPayload(formData);\n\n try {\n setSaving(true);\n const endpoint = selectedContact\n ? `/api/v1/profile/emergency?contact_id=${selectedContact.id}`\n : '/api/v1/profile/emergency';\n\n const response = await fetch(endpoint, {\n method: selectedContact ? 'PUT' : 'POST',\n headers: { 'Content-Type': 'application/json' },\n body: JSON.stringify(payload)\n });\n\n if (!response.ok) {\n throw new Error('Failed to save emergency contact');\n }\n\n await Promise.all([\n fetchContacts(),\n view === 'analytics' ? fetchAnalytics() : Promise.resolve(),\n ]);\n } catch (error) {\n console.error('Error saving emergency contact:', error);\n } finally {\n setSaving(false);\n }\n}, [fetchAnalytics, fetchContacts, formData, selectedContact, view]);\n\n  const handleVerify = useCallback(async (contactId: string) => {\n    try {\n      const response = await fetch(`/api/v1/profile/emergency?contact_id=${contactId}&action=verify`, {\n        method: 'POST'\n      });\n      if (!response.ok) {\n        throw new Error('Failed to verify emergency contact');\n      }\n      await fetchContacts();\n    } catch (error) {\n      console.error('Error verifying emergency contact:', error);\n    }\n  }, [fetchContacts]);\n\n  const handleVerifyContact = useCallback((contact: EmergencyContact) => {\n    void handleVerify(contact.id);\n  }, [handleVerify]);\n\n  const handleDelete = useCallback(async (contactId: string) => {\n    if (!confirm('Delete this emergency contact?')) {\n      return;\n    }\n    try {\n      const response = await fetch(`/api/v1/profile/emergency?contact_id=${contactId}`, {\n        method: 'DELETE'\n      });\n      if (!response.ok) {\n        throw new Error('Failed to delete emergency contact');\n      }\n      await fetchContacts();\n    } catch (error) {\n      console.error('Error deleting emergency contact:', error);\n    }\n  }, [fetchContacts]);\n\n const handleSelectContact = useCallback((contact: EmergencyContact) => {\n setSelectedContactId(contact.id);\n setFormData(mapContactToForm(contact));\n setView('form');\n }, []);\n\n const handleSelectItem = useCallback((id: string, selected: boolean) => {\n setSelectedIds(prev => {\n if (selected) {\n return prev.includes(id) ? prev : [...prev, id];\n }\n return prev.filter(existing => existing !== id);\n });\n }, []);\n\n const handleSelectAll = useCallback((ids: string[], selected: boolean) => {\n setSelectedIds(selected ? Array.from(new Set([...selectedIds, ...ids])) : []);\n }, [selectedIds]);\n\n const handleFiltersChange = useCallback((nextFilters: Partial<EmergencyContactFilters>) => {\n setFilters(prev => ({ ...prev, ...nextFilters }));\n }, []);\n\n const handleSortChange = useCallback((nextSort: EmergencyContactSort) => {\n setSort(nextSort);\n }, []);\n\n const handleExport = useCallback((list: EmergencyContact[]) => {\n const exportList = list.length > 0 ? list : contacts.filter(contact => selectedIds.includes(contact.id));\n if (exportList.length === 0) {\n console.warn('No contacts selected for export');\n return;\n }\n\n const rows = [\n ['Name', 'Relationship', 'Priority', 'Primary Phone', 'Email', 'Address', 'Verification', 'Primary', 'Backup'],\n ...exportList.map(contact => [\n contact.name,\n contact.relationship,\n contact.priority_level,\n formatPhone(contact.phone_primary),\n contact.email ?? '',\n formatAddressString(contact),\n contact.verification_status,\n contact.is_primary ? 'Yes' : 'No',\n contact.is_backup ? 'Yes' : 'No',\n ]),\n ];\n\n const csv = rows.map(row => row.map(cell => `\"${cell.replace(/\"/g, '\"\"')}\"`).join(',')).join('\\n');\n const blob = new Blob([csv], { type: 'text/csv' });\n const url = URL.createObjectURL(blob);\n const link = document.createElement('a');\n link.href = url;\n link.download = `emergency-contacts-${new Date().toISOString().split('T')[0]}.csv`;\n link.click();\n URL.revokeObjectURL(url);\n }, [contacts, selectedIds]);\n\n const iconMap: Record<EmergencyViewType, LucideIcon> = useMemo(() => ({\n form: FileText,\n card: Contact2,\n roster: Users,\n table: Table,\n analytics: BarChart3\n }), []);\n\n const quickFilterValue = useMemo(() => {\n if (filters.is_primary === 'primary') return 'primary';\n if (filters.is_primary === 'backup') return 'backup';\n if (filters.priority === 'critical') return 'critical';\n if (filters.verification_status === 'pending') return 'pending';\n return 'all';\n }, [filters]);\n\n return (\n <div className=\"space-y-lg\">\n <Card className=\"p-md flex flex-col gap-md md:flex-row md:items-center md:justify-between\">\n <div className=\"space-y-xs\">\n <div className=\"flex items-center gap-xs\">\n <Badge variant=\"outline\">Emergency</Badge>\n <span className=\"text-sm text-muted-foreground\">\n {selectedContact?.verification_status === 'verified' ? (\n <span className=\"text-green-600 flex items-center gap-xs\">\n <ShieldCheck className=\"h-icon-xs w-icon-xs\" /> Contact verified\n </span>\n ) : (\n <span className=\"text-yellow-600 flex items-center gap-xs\">\n <ShieldAlert className=\"h-icon-xs w-icon-xs\" /> Verification pending\n </span>\n )}\n </span>\n </div>\n <h1 className=\"text-2xl font-semibold\">Emergency Contacts</h1>\n <p className=\"text-sm text-muted-foreground\">\n {selectedContact\n ? `${selectedContact.name} · ${selectedContact.relationship} · ${formatPhone(selectedContact.phone_primary)}`\n : 'Create a new emergency contact or select one from the roster.'}\n </p>\n </div>\n <div className=\"flex flex-wrap items-center gap-xs\">\n <Button variant=\"outline\" size=\"sm\" onClick={handleNewContact}>\n New Contact\n </Button>\n <Button variant=\"outline\" size=\"sm\" onClick={() => {\n fetchContacts();\n if (view === 'analytics') fetchAnalytics();\n }}>\n <RefreshCw className=\"mr-2 h-icon-xs w-icon-xs\" />\n Refresh\n </Button>\n </div>\n </Card>\n\n <Card className=\"p-md\">\n <div className=\"flex flex-wrap gap-xs\">\n {QUICK_FILTERS.map(filter => (\n <Button\n key={filter.value}\n variant={quickFilterValue === filter.value ? 'default' : 'outline'}\n size=\"sm\"\n onClick={() => {\n switch (filter.value) {\n case 'primary':\n setFilters(prev => ({ ...prev, is_primary: 'primary' }));\n break;\n case 'backup':\n setFilters(prev => ({ ...prev, is_primary: 'backup' }));\n break;\n case 'critical':\n setFilters(prev => ({ ...prev, priority: 'critical' }));\n break;\n case 'pending':\n setFilters(prev => ({ ...prev, verification_status: 'pending' }));\n break;\n default:\n setFilters(DEFAULT_FILTERS);\n }\n }}\n >\n {filter.label}\n </Button>\n ))}\n </div>\n </Card>\n\n <Tabs value={view} onChange={(e) => setView(e.target.value as EmergencyViewType)}>\n <TabsList className=\"grid grid-cols-5 w-full\">\n {Object.entries(VIEW_CONFIG).map(([key, { label }]) => {\n const Icon = iconMap[key as EmergencyViewType] ?? FileText;\n return (\n <TabsTrigger key={key} value={key} className=\"flex items-center gap-xs\">\n <Icon className=\"h-icon-xs w-icon-xs\" />\n {label}\n </TabsTrigger>\n );\n })}\n </TabsList>\n\n <TabsContent value=\"form\">\n <EmergencyFormView\n contact={selectedContact}\n formData={formData}\n formErrors={formErrors}\n loading={loading}\n saving={saving}\n onFieldChange={handleFieldChange}\n onSave={handleSave}\n onVerify={selectedContact ? () => handleVerify(selectedContact.id) : undefined}\n />\n </TabsContent>\n\n <TabsContent value=\"card\">\n <EmergencyCardView\n contact={selectedContact}\n loading={loading}\n onEdit={() => setView('form')}\n onVerify={selectedContact ? () => handleVerify(selectedContact.id) : undefined}\n />\n </TabsContent>\n\n <TabsContent value=\"roster\">\n <EmergencyRosterView\n contacts={contacts}\n loading={loading}\n selectedIds={selectedIds}\n filters={filters}\n onToggleSelect={handleSelectItem}\n onToggleSelectAll={(selected) => handleSelectAll(contacts.map(contact => contact.id), selected)}\n onFiltersChange={handleFiltersChange}\n onExport={handleExport}\n onEdit={handleSelectContact}\n onDelete={handleDelete}\n onVerify={handleVerifyContact}\n />\n </TabsContent>\n\n <TabsContent value=\"table\">\n <EmergencyTableView\n contacts={contacts}\n loading={loading}\n selectedIds={selectedIds}\n filters={filters}\n sort={sort}\n onToggleSelect={handleSelectItem}\n onToggleAll={(selected) => handleSelectAll(contacts.map(contact => contact.id), selected)}\n onFiltersChange={handleFiltersChange}\n onSortChange={handleSortChange}\n onExport={handleExport}\n onEdit={handleSelectContact}\n onVerify={handleVerifyContact}\n />\n </TabsContent>\n\n <TabsContent value=\"analytics\">\n <EmergencyAnalyticsView\n stats={stats}\n analytics={analytics}\n loading={loading}\n analyticsLoading={analyticsLoading}\n />\n </TabsContent>\n </Tabs>\n </div>\n );\n}\n\nfunction mapContactToForm(contact: EmergencyContact): EmergencyContactFormData {\n return {\n name: contact.name,\n relationship: contact.relationship,\n phone_primary: contact.phone_primary,\n phone_secondary: contact.phone_secondary ?? '',\n email: contact.email ?? '',\n address: contact.address ?? '',\n city: contact.city ?? '',\n state_province: contact.state_province ?? '',\n country: contact.country ?? '',\n postal_code: contact.postal_code ?? '',\n notes: contact.notes ?? '',\n is_primary: contact.is_primary,\n is_backup: contact.is_backup,\n priority_level: contact.priority_level,\n availability: contact.availability ?? '24_7',\n response_time_minutes: contact.response_time_minutes ?? 15,\n verification_status: contact.verification_status\n };\n}\n\nfunction mapFormToPayload(data: EmergencyContactFormData) {\n return {\n name: data.name,\n relationship: data.relationship,\n phone_primary: data.phone_primary,\n phone_secondary: data.phone_secondary || null,\n email: data.email || null,\n address: data.address || null,\n city: data.city || null,\n state_province: data.state_province || null,\n country: data.country || null,\n postal_code: data.postal_code || null,\n notes: data.notes || null,\n is_primary: data.is_primary,\n is_backup: data.is_backup,\n priority_level: data.priority_level,\n availability: data.availability || null,\n response_time_minutes: data.response_time_minutes ?? null,\n verification_status: data.verification_status\n };\n}\n\nfunction formatAddressString(contact: EmergencyContact): string {\n return [\n contact.address ?? '',\n contact.city ?? '',\n contact.state_province ?? '',\n contact.postal_code ?? '',\n contact.country ?? '',\n ].filter(Boolean).join(', ');\n}\n\n// Wrapper component for ModuleTemplate compatibility\nexport function EmergencyTabComponent({ user, orgId }: { user: unknown; orgId: string }) {\n return <EmergencyClient orgId={orgId} userId={user?.id || ''} />;\n}\n\nexport default EmergencyClient;\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/profile/emergency/EmergencyContactClient.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadEmergencyContacts'. Either include it or remove the dependency array.","line":73,"column":6,"nodeType":"ArrayExpression","endLine":73,"endColumn":21,"suggestions":[{"desc":"Update the dependencies array to be: [loadEmergencyContacts, orgId, userId]","fix":{"range":[2031,2046],"text":"[loadEmergencyContacts, orgId, userId]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\n\nimport { useState, useEffect } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { z } from 'zod';\nimport { useTranslations } from 'next-intl';\nimport { createBrowserClient } from '@ghxstship/auth';\nimport {\n  Badge,\n  Button,\n  Card,\n  Drawer,\n  Input,\n  Select,\n  UnifiedInput\n} from \"@ghxstship/ui\";\nimport { Phone, Plus, Edit, Trash2, User, AlertTriangle } from 'lucide-react';\n\nconst emergencyContactSchema = z.object({\n  name: z.string().min(1, 'Name is required'),\n  relationship: z.string().min(1, 'Relationship is required'),\n  phone_primary: z.string().min(1, 'Primary phone is required'),\n  phone_secondary: z.string().optional(),\n  email: z.string().email().optional(),\n  address: z.string().optional(),\n  is_primary: z.boolean().default(false),\n  notes: z.string().optional()\n});\n\ntype EmergencyContactForm = z.infer<typeof emergencyContactSchema>;\n\ninterface EmergencyContact {\n  id: string;\n  name: string;\n  relationship: string;\n  phone_primary: string;\n  phone_secondary?: string;\n  email?: string;\n  address?: string;\n  is_primary: boolean;\n  notes?: string;\n  created_at: string;\n}\n\nexport default function EmergencyContactClient({ orgId, userId }: { orgId: string; userId: string }) {\n  const t = useTranslations('profile');\n  const sb = createBrowserClient();\n  \n  const [contacts, setContacts] = useState<EmergencyContact[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [drawerOpen, setDrawerOpen] = useState(false);\n  const [editingContact, setEditingContact] = useState<EmergencyContact | null>(null);\n  const [saving, setSaving] = useState(false);\n\n  const form = useForm<EmergencyContactForm>({\n    resolver: zodResolver(emergencyContactSchema),\n    defaultValues: {\n      name: '',\n      relationship: '',\n      phone_primary: '',\n      phone_secondary: '',\n      email: '',\n      address: '',\n      is_primary: false,\n      notes: ''\n    }\n  });\n\n  useEffect(() => {\n    loadEmergencyContacts();\n  }, [orgId, userId]);\n\n  const loadEmergencyContacts = async () => {\n    try {\n      setLoading(true);\n      \n      const { data, error } = await sb\n        .from('emergency_contacts')\n        .select('*')\n        .eq('organization_id', orgId)\n        .eq('user_id', userId)\n        .order('is_primary', { ascending: false })\n        .order('created_at', { ascending: true });\n\n      if (error) throw error;\n      setContacts(data || []);\n    } catch (error) {\n      console.error('Error loading emergency contacts:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const openDrawer = (contact?: EmergencyContact) => {\n    if (contact) {\n      setEditingContact(contact);\n      form.reset({\n        name: contact.name,\n        relationship: contact.relationship,\n        phone_primary: contact.phone_primary,\n        phone_secondary: contact.phone_secondary || '',\n        email: contact.email || '',\n        address: contact.address || '',\n        is_primary: contact.is_primary,\n        notes: contact.notes || ''\n      });\n    } else {\n      setEditingContact(null);\n      form.reset();\n    }\n    setDrawerOpen(true);\n  };\n\n  const onSubmit = async (data: EmergencyContactForm) => {\n    setSaving(true);\n    try {\n      if (editingContact) {\n        const { error } = await sb\n          .from('emergency_contacts')\n          .update(data)\n          .eq('id', editingContact.id);\n\n        if (error) throw error;\n      } else {\n        const { error } = await sb\n          .from('emergency_contacts')\n          .insert({\n            ...data,\n            user_id: userId,\n            organization_id: orgId\n          });\n\n        if (error) throw error;\n      }\n\n      setDrawerOpen(false);\n      loadEmergencyContacts();\n    } catch (error) {\n      console.error('Error saving emergency contact:', error);\n    } finally {\n      setSaving(false);\n    }\n  };\n\n  const deleteContact = async (contactId: string) => {\n    if (!confirm('Are you sure you want to delete this emergency contact?')) return;\n\n    try {\n      const { error } = await sb\n        .from('emergency_contacts')\n        .delete()\n        .eq('id', contactId);\n\n      if (error) throw error;\n      loadEmergencyContacts();\n    } catch (error) {\n      console.error('Error deleting emergency contact:', error);\n    }\n  };\n\n  if (loading) {\n    return (\n      <div className=\"stack-md\">\n        {[...Array(2)].map((_, i) => (\n          <div key={i} className=\"animate-pulse\">\n            <div className=\"h-component-lg bg-secondary rounded-lg\"></div>\n          </div>\n        ))}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"stack-lg\">\n      <div className=\"flex items-center justify-between\">\n        <h2 className=\"text-heading-4 text-heading-4\">Emergency Contacts</h2>\n        <Button onClick={() => openDrawer()} className=\"flex items-center gap-sm\">\n          <Plus className=\"h-icon-xs w-icon-xs\" />\n          Add Contact\n        </Button>\n      </div>\n\n      <div className=\"stack-md\">\n        {contacts.length > 0 ? (\n          contacts.map((contact: any) => (\n            <Card key={contact.id}>\n              <div className=\"p-lg\">\n                <div className=\"flex items-start justify-between\">\n                  <div className=\"flex items-start gap-md\">\n                    <div className=\"p-sm bg-destructive/10 rounded-lg\">\n                      <AlertTriangle className=\"h-icon-md w-icon-md color-destructive\" />\n                    </div>\n                    \n                    <div>\n                      <div className=\"flex items-center gap-sm mb-sm\">\n                        <h3 className=\"text-body text-heading-4\">{contact.name}</h3>\n                        {contact.is_primary && (\n                          <Badge variant=\"destructive\">Primary</Badge>\n                        )}\n                      </div>\n                      \n                      <div className=\"stack-xs text-body-sm color-muted\">\n                        <div className=\"flex items-center gap-sm\">\n                          <User className=\"h-icon-xs w-icon-xs\" />\n                          <span>{contact.relationship}</span>\n                        </div>\n                        \n                        <div className=\"flex items-center gap-sm\">\n                          <Phone className=\"h-icon-xs w-icon-xs\" />\n                          <span>{contact.phone_primary}</span>\n                          {contact.phone_secondary && (\n                            <span>• {contact.phone_secondary}</span>\n                          )}\n                        </div>\n                        \n                        {contact.email && (\n                          <div className=\"flex items-center gap-sm\">\n                            <span>✉</span>\n                            <span>{contact.email}</span>\n                          </div>\n                        )}\n                        \n                        {contact.address && (\n                          <div className=\"text-body-sm mt-sm\">\n                            <strong>Address:</strong> {contact.address}\n                          </div>\n                        )}\n                        \n                        {contact.notes && (\n                          <div className=\"text-body-sm mt-sm\">\n                            <strong>Notes:</strong> {contact.notes}\n                          </div>\n                        )}\n                      </div>\n                    </div>\n                  </div>\n                  \n                  <div className=\"flex items-center gap-sm\">\n                    <Button\n                      variant=\"outline\"\n                     \n                      onClick={() => openDrawer(contact)}\n                    >\n                      <Edit className=\"h-icon-xs w-icon-xs\" />\n                    </Button>\n                    <Button\n                      variant=\"outline\"\n                     \n                      onClick={() => deleteContact(contact.id)}\n                    >\n                      <Trash2 className=\"h-icon-xs w-icon-xs\" />\n                    </Button>\n                  </div>\n                </div>\n              </div>\n            </Card>\n          ))\n        ) : (\n          <Card>\n            <div className=\"p-xl text-center\">\n              <AlertTriangle className=\"h-icon-2xl w-icon-2xl mx-auto mb-md color-muted opacity-50\" />\n              <h3 className=\"text-body form-label mb-sm\">No Emergency Contacts</h3>\n              <p className=\"color-muted mb-md\">\n                Add emergency contacts for safety and security purposes.\n              </p>\n              <Button onClick={() => openDrawer()}>\n                <Plus className=\"h-icon-xs w-icon-xs mr-sm\" />\n                Add Emergency Contact\n              </Button>\n            </div>\n          </Card>\n        )}\n      </div>\n\n      <Drawer\n        open={drawerOpen}\n        onClose={() => setDrawerOpen(false)}\n        title={editingContact ? 'Edit Emergency Contact' : 'Add Emergency Contact'}\n      >\n        <form onSubmit={form.handleSubmit(onSubmit)} className=\"stack-lg\">\n          <div className=\"grid grid-cols-1 gap-md\">\n            <Input               label=\"Full Name\"\n              placeholder=\"Enter contact's full name\"\n              {...form.register('name')}\n              error={form.formState.errors.name?.message}\n              required\n            />\n\n            <Input               label=\"Relationship\"\n              placeholder=\"e.g., Spouse, Parent, Sibling, Friend\"\n              {...form.register('relationship')}\n              error={form.formState.errors.relationship?.message}\n              required\n            />\n\n            <div className=\"grid grid-cols-2 gap-md\">\n              <Input                 label=\"Primary Phone\"\n                placeholder=\"Enter primary phone number\"\n                {...form.register('phone_primary')}\n                error={form.formState.errors.phone_primary?.message}\n                required\n              />\n\n              <Input                 label=\"Secondary Phone\"\n                placeholder=\"Enter secondary phone (optional)\"\n                {...form.register('phone_secondary')}\n                error={form.formState.errors.phone_secondary?.message}\n              />\n            </div>\n\n            <Input               label=\"Email\"\n              type=\"email\"\n              placeholder=\"Enter email address (optional)\"\n              {...form.register('email')}\n              error={form.formState.errors.email?.message}\n            />\n\n            <Input               label=\"Address\"\n              placeholder=\"Enter full address (optional)\"\n              {...form.register('address')}\n              error={form.formState.errors.address?.message}\n            />\n\n            <Input               label=\"Notes\"\n              placeholder=\"Any additional notes (optional)\"\n              {...form.register('notes')}\n              error={form.formState.errors.notes?.message}\n            />\n\n            <div className=\"flex items-center gap-sm\">\n              <input\n                type=\"checkbox\"\n                id=\"is_primary\"\n                {...form.register('is_primary')}\n                className=\"rounded border-border\"\n              />\n              <label htmlFor=\"is_primary\" className=\"text-body-sm form-label\">\n                Set as primary emergency contact\n              </label>\n            </div>\n          </div>\n\n          <div className=\"flex justify-end gap-sm pt-md border-t\">\n            <Button\n              type=\"button\"\n              variant=\"outline\"\n              onClick={() => setDrawerOpen(false)}\n              disabled={saving}\n            >\n              Cancel\n            </Button>\n            <Button type=\"submit\" loading={saving}>\n              {editingContact ? 'Update Contact' : 'Add Contact'}\n            </Button>\n          </div>\n        </form>\n      </Drawer>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/profile/emergency/drawers/CreateEmergencyDrawer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/profile/emergency/lib/emergencyService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/profile/emergency/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/profile/emergency/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/profile/emergency/views/EmergencyAnalyticsView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/profile/emergency/views/EmergencyCardView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/profile/emergency/views/EmergencyFormView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/profile/emergency/views/EmergencyRosterView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/profile/emergency/views/EmergencyTableView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/profile/endorsements/CreateEndorsementClient.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/profile/endorsements/EndorsementsClient.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/profile/endorsements/drawers/CreateEndorsementsDrawer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/profile/endorsements/lib/endorsementService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/profile/endorsements/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/profile/endorsements/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/profile/endorsements/views/EndorsementAnalyticsView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/profile/endorsements/views/EndorsementCardView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/profile/endorsements/views/EndorsementFormView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/profile/endorsements/views/EndorsementGridView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/profile/endorsements/views/EndorsementListView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/profile/health/CreateHealthRecordClient.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/profile/health/HealthClient.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/profile/health/HealthInfoClient.tsx","messages":[{"ruleId":"jsx-a11y/aria-props","severity":1,"message":"aria-: This attribute is an invalid ARIA attribute.","line":86,"column":154,"nodeType":"JSXAttribute","endLine":86,"endColumn":159}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\n\nimport React from \"react\";\n\nimport {\n  Badge,\n  Button,\n  Card,\n  Input,\n  UnifiedInput,\n  cn\n} from \"@ghxstship/ui\";\nimport { Edit } from \"lucide-react\";\nimport { useState, useEffect } from 'react'\nimport { createClient } from \"../../../../../lib/supabase/client\"\n\ninterface ClientProps {\n  className?: string\n}\n\nexport default function Client({ className }: ClientProps) {\n  const [data, setData] = useState<any[]>([])\n  const [loading, setLoading] = useState(true)\n\n  useEffect(() => {\n    let isMounted = true\n    const supabase = createClient()\n    async function fetchRecords() {\n      try {\n        setLoading(true)\n        const { data: auth } = await supabase.auth.getUser()\n        let items: unknown[] = []\n        if (auth?.user) {\n          const { data: profiles, error } = await supabase\n            .from('user_profiles')\n            .select('id, full_name, status')\n            .eq('id', auth.user.id)\n            .limit(1)\n          if (!error && profiles) {\n            const mockData: Array<{ id: string; full_name: string; status: string }> = [\n              { id: '1', full_name: 'John Doe', status: 'Active' },\n              { id: '2', full_name: 'Jane Smith', status: 'Active' },\n            ]\n            items = profiles.map((p: any) => ({\n              id: p.id,\n              name: p.full_name || 'Profile',\n              status: p.status || 'active'\n            }))\n          }\n        }\n        if (isMounted) setData(items)\n      } catch (err) {\n        // console.error('HealthInfoClient fetch error:', err)\n        if (isMounted) setData([])\n      } finally {\n        if (isMounted) setLoading(false)\n      }\n    }\n    fetchRecords()\n    return () => { isMounted = false }\n  }, [])\n\n  if (loading) {\n    return (\n      <div className={className}>\n        <Card className=\"p-md\">\n          <div className=\"animate-pulse space-y-md\">\n            <div className=\"h-icon-xs bg-secondary rounded w-1/4\"></div>\n            <div className=\"h-icon-xs bg-secondary rounded w-1/2\"></div>\n            <div className=\"h-icon-xs bg-secondary rounded w-3/4\"></div>\n          </div>\n        </Card>\n      </div>\n    )\n  }\n\n  return (\n    <div className={className}>\n      <div className=\"mb-md\">\n        <h1 className=\"text-heading-lg text-heading-3 mb-sm\">Health Information</h1>\n        <p className=\"color-foreground-subtle\">View and manage your health-related profile information</p>\n      </div>\n\n      <div className=\"mb-md\">\n        <Input onChange={(e: React.ChangeEvent<HTMLInputElement>) => {}} placeholder=\"Search health records...\" className=\"w-full sm:w-auto sm:max-w-sm\" aria- />\n      </div>\n\n      <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-md\">\n        {data.map((item: any) => (\n          <Card key={item.id} className=\"p-md\">\n            <div className=\"flex flex-col sm:flex-row items-center justify-between\">\n              <div>\n                <h2 className=\"text-body text-heading-3\">{item.name}</h2>\n                <p className=\"text-body-sm color-foreground-subtle\">ID: {item.id}</p>\n              </div>\n              <div className=\"flex flex-col sm:flex-row items-center gap-sm\">\n                <Badge variant={item.status === 'active' ? 'default' : 'secondary'}>\n                  {item.status}\n                </Badge>\n                <Button variant=\"default\" size=\"sm\" onClick={() => console.log(\"Edit clicked\")}>Edit</Button>\n              </div>\n            </div>\n          </Card>\n        ))}\n      </div>\n    </div>\n  )\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/profile/health/drawers/CreateHealthDrawer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/profile/health/lib/healthService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/profile/health/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/profile/health/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/profile/health/views/HealthAnalyticsView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/profile/health/views/HealthCalendarView.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useMemo has unnecessary dependencies: 'currentMonth' and 'currentYear'. Either exclude them or remove the dependency array.","line":52,"column":5,"nodeType":"ArrayExpression","endLine":52,"endColumn":64,"suggestions":[{"desc":"Update the dependencies array to be: [daysInMonth, startingDayOfWeek]","fix":{"range":[1387,1446],"text":"[daysInMonth, startingDayOfWeek]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { ChevronLeft, ChevronRight, Calendar, Clock, AlertTriangle, Bell, Activity } from \"lucide-react\";\nimport { useState, useMemo } from 'react';\nimport { Card, Button, Badge } from '@ghxstship/ui';\nimport type { HealthRecord } from '../types';\nimport {\n RECORD_TYPE_LABELS,\n formatDateShort,\n getDaysUntilExpiry,\n getExpiryUrgency,\n getRecordTypeIcon\n} from '../types';\n\ninterface HealthCalendarViewProps {\n records: HealthRecord[];\n loading: boolean;\n onEdit: (record: HealthRecord) => void;\n}\n\nexport default function HealthCalendarView({\n records,\n loading,\n onEdit\n}: HealthCalendarViewProps) {\n const [currentDate, setCurrentDate] = useState(new Date());\n\n const currentYear = currentDate.getFullYear();\n const currentMonth = currentDate.getMonth();\n\n // Get first day of month and number of days\n const firstDayOfMonth = new Date(currentYear, currentMonth, 1);\n const lastDayOfMonth = new Date(currentYear, currentMonth + 1, 0);\n const daysInMonth = lastDayOfMonth.getDate();\n const startingDayOfWeek = firstDayOfMonth.getDay();\n\n // Generate calendar days\n const calendarDays = useMemo(() => {\n const days = [];\n \n // Add empty cells for days before the first day of the month\n for (let i = 0; i < startingDayOfWeek; i++) {\n days.push(null);\n }\n \n // Add days of the month\n for (let day = 1; day <= daysInMonth; day++) {\n days.push(day);\n }\n \n return days;\n }, [currentYear, currentMonth, daysInMonth, startingDayOfWeek]);\n\n // Group records by date\n const recordsByDate = useMemo(() => {\n const grouped: Record<string, HealthRecord[]> = {};\n \n records.forEach(record => {\n // Add to recorded date\n const recordedDate = new Date(record.date_recorded);\n if (recordedDate.getFullYear() === currentYear && recordedDate.getMonth() === currentMonth) {\n const day = recordedDate.getDate();\n const key = `recorded-${day}`;\n if (!grouped[key]) grouped[key] = [];\n grouped[key].push(record);\n }\n \n // Add to expiry date if exists\n if (record.expiry_date) {\n const expiryDate = new Date(record.expiry_date);\n if (expiryDate.getFullYear() === currentYear && expiryDate.getMonth() === currentMonth) {\n const day = expiryDate.getDate();\n const key = `expiry-${day}`;\n if (!grouped[key]) grouped[key] = [];\n grouped[key].push(record);\n }\n }\n });\n \n return grouped;\n }, [records, currentYear, currentMonth]);\n\n const navigateMonth = (direction: 'prev' | 'next') => {\n setCurrentDate(prev => {\n const newDate = new Date(prev);\n if (direction === 'prev') {\n newDate.setMonth(prev.getMonth() - 1);\n } else {\n newDate.setMonth(prev.getMonth() + 1);\n }\n return newDate;\n });\n };\n\n const goToToday = () => {\n setCurrentDate(new Date());\n };\n\n const monthName = firstDayOfMonth.toLocaleDateString('en-US', { \n month: 'long', \n year: 'numeric' \n });\n\n if (loading) {\n return (\n <Card className=\"p-lg\">\n <div className=\"space-y-md\">\n <div className=\"h-icon-lg w-container-xs bg-muted animate-pulse rounded\" />\n <div className=\"grid grid-cols-7 gap-xs\">\n {[...Array(35)].map((_, i) => (\n <div key={i} className=\"h-component-lg bg-muted animate-pulse rounded\" />\n ))}\n </div>\n </div>\n </Card>\n );\n }\n\n return (\n <div className=\"space-y-md\">\n {/* Header */}\n <Card className=\"p-md\">\n <div className=\"flex items-center justify-between\">\n <div className=\"flex items-center gap-md\">\n <h2 className=\"text-xl font-semibold flex items-center gap-xs\">\n <Calendar className=\"h-icon-sm w-icon-sm\" />\n {monthName}\n </h2>\n <Button variant=\"outline\" size=\"sm\" onClick={goToToday}>\n Today\n </Button>\n </div>\n <div className=\"flex items-center gap-xs\">\n <Button variant=\"outline\" size=\"sm\" onClick={() => navigateMonth('prev')}>\n <ChevronLeft className=\"h-icon-xs w-icon-xs\" />\n </Button>\n <Button variant=\"outline\" size=\"sm\" onClick={() => navigateMonth('next')}>\n <ChevronRight className=\"h-icon-xs w-icon-xs\" />\n </Button>\n </div>\n </div>\n </Card>\n\n {/* Legend */}\n <Card className=\"p-md\">\n <div className=\"flex items-center gap-lg text-sm\">\n <div className=\"flex items-center gap-xs\">\n <div className=\"w-3 h-3 bg-blue-500 rounded-full\" />\n <span>Recorded</span>\n </div>\n <div className=\"flex items-center gap-xs\">\n <div className=\"w-3 h-3 bg-orange-500 rounded-full\" />\n <span>Expires</span>\n </div>\n <div className=\"flex items-center gap-xs\">\n <div className=\"w-3 h-3 bg-red-500 rounded-full\" />\n <span>Expired</span>\n </div>\n <div className=\"flex items-center gap-xs\">\n <Bell className=\"h-3 w-3\" />\n <span>Reminder</span>\n </div>\n </div>\n </Card>\n\n {/* Calendar */}\n <Card className=\"p-md\">\n <div className=\"space-y-md\">\n {/* Day headers */}\n <div className=\"grid grid-cols-7 gap-xs\">\n {['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'].map(day => (\n <div key={day} className=\"p-xs text-center font-medium text-muted-foreground\">\n {day}\n </div>\n ))}\n </div>\n\n {/* Calendar grid */}\n <div className=\"grid grid-cols-7 gap-xs\">\n {calendarDays.map((day, index) => {\n if (day === null) {\n return <div key={index} className=\"h-component-lg\" />;\n }\n\n const recordedRecords = recordsByDate[`recorded-${day}`] || [];\n const expiryRecords = recordsByDate[`expiry-${day}`] || [];\n const allDayRecords = [...recordedRecords, ...expiryRecords];\n \n const isToday = new Date().toDateString() === new Date(currentYear, currentMonth, day).toDateString();\n \n return (\n <div\n key={day}\n className={`h-component-lg p-xs border rounded-lg ${\n isToday ? 'bg-primary/10 border-primary' : 'border-border'\n } ${allDayRecords.length > 0 ? 'hover:bg-muted/50' : ''}`}\n >\n <div className=\"h-full flex flex-col\">\n <div className=\"flex items-center justify-between mb-1\">\n <span className={`text-sm font-medium ${\n isToday ? 'text-primary' : 'text-foreground'\n }`}>\n {day}\n </span>\n {allDayRecords.some(r => r.reminder_enabled) && (\n <Bell className=\"h-3 w-3 text-muted-foreground\" />\n )}\n </div>\n \n <div className=\"flex-1 space-y-xs overflow-hidden\">\n {/* Recorded events */}\n {recordedRecords.slice(0, 2).map((record, i) => (\n <button\n key={`recorded-${record.id}-${i}`}\n onClick={() => onEdit(record)}\n className=\"w-full text-left\"\n >\n <div className=\"flex items-center gap-xs p-xs bg-blue-100 text-blue-800 rounded text-xs hover:bg-blue-200 transition-colors\">\n <span>{getRecordTypeIcon(record.record_type)}</span>\n <span className=\"truncate\">{record.title}</span>\n </div>\n </button>\n ))}\n \n {/* Expiry events */}\n {expiryRecords.slice(0, 2 - recordedRecords.length).map((record, i) => {\n const daysUntilExpiry = getDaysUntilExpiry(record.expiry_date!);\n const isExpired = daysUntilExpiry < 0;\n const isExpiringSoon = daysUntilExpiry <= 7 && daysUntilExpiry >= 0;\n \n return (\n <button\n key={`expiry-${record.id}-${i}`}\n onClick={() => onEdit(record)}\n className=\"w-full text-left\"\n >\n <div className={`flex items-center gap-xs p-xs rounded text-xs hover:opacity-80 transition-colors ${\n isExpired \n ? 'bg-red-100 text-red-800' \n : isExpiringSoon \n ? 'bg-orange-100 text-orange-800'\n : 'bg-yellow-100 text-yellow-800'\n }`}>\n {isExpired ? (\n <AlertTriangle className=\"h-3 w-3\" />\n ) : (\n <Clock className=\"h-3 w-3\" />\n )}\n <span className=\"truncate\">{record.title}</span>\n </div>\n </button>\n );\n })}\n \n {/* Show more indicator */}\n {allDayRecords.length > 2 && (\n <div className=\"text-xs text-muted-foreground text-center\">\n +{allDayRecords.length - 2} more\n </div>\n )}\n </div>\n </div>\n </div>\n );\n })}\n </div>\n </div>\n </Card>\n\n {/* Upcoming Events */}\n {records.length > 0 && (\n <Card className=\"p-md\">\n <h3 className=\"font-semibold mb-4 flex items-center gap-xs\">\n <Clock className=\"h-icon-xs w-icon-xs\" />\n Upcoming Events\n </h3>\n <div className=\"space-y-xs\">\n {records\n .filter(record => {\n if (!record.expiry_date) return false;\n const daysUntil = getDaysUntilExpiry(record.expiry_date);\n return daysUntil >= 0 && daysUntil <= 30;\n })\n .sort((a, b) => getDaysUntilExpiry(a.expiry_date!) - getDaysUntilExpiry(b.expiry_date!))\n .slice(0, 5)\n .map(record => {\n const daysUntil = getDaysUntilExpiry(record.expiry_date!);\n const urgency = getExpiryUrgency(daysUntil);\n \n return (\n <button\n key={record.id}\n onClick={() => onEdit(record)}\n className=\"w-full text-left p-sm border rounded-lg hover:bg-muted/50 transition-colors\"\n >\n <div className=\"flex items-center justify-between\">\n <div className=\"flex items-center gap-sm\">\n <span className=\"text-lg\">{getRecordTypeIcon(record.record_type)}</span>\n <div>\n <p className=\"font-medium\">{record.title}</p>\n <p className=\"text-sm text-muted-foreground\">\n {RECORD_TYPE_LABELS[record.record_type]}\n {record.provider && ` • ${record.provider}`}\n </p>\n </div>\n </div>\n <div className=\"text-right\">\n <Badge \n variant={urgency === 'critical' ? 'destructive' : 'outline'}\n className=\"mb-1\"\n >\n {daysUntil === 0 ? 'Today' : daysUntil === 1 ? 'Tomorrow' : `${daysUntil} days`}\n </Badge>\n <p className=\"text-xs text-muted-foreground\">\n {formatDateShort(record.expiry_date!)}\n </p>\n </div>\n </div>\n </button>\n );\n })}\n \n {records.filter(r => r.expiry_date && getDaysUntilExpiry(r.expiry_date) >= 0 && getDaysUntilExpiry(r.expiry_date) <= 30).length === 0 && (\n <div className=\"text-center py-xl text-muted-foreground\">\n <Activity className=\"h-icon-lg w-icon-lg mx-auto mb-2 opacity-50\" />\n <p>No upcoming events in the next 30 days</p>\n </div>\n )}\n </div>\n </Card>\n )}\n </div>\n );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/profile/health/views/HealthCardView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/profile/health/views/HealthFormView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/profile/health/views/HealthTimelineView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/profile/history/CreateHistoryEntryClient.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/profile/history/HistoryClient.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/profile/history/drawers/CreateHistoryDrawer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/profile/history/drawers/EditHistoryDrawer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/profile/history/drawers/ViewHistoryDrawer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/profile/history/lib/historyService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/profile/history/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/profile/history/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/profile/history/views/HistoryAnalyticsView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/profile/history/views/HistoryCardView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/profile/history/views/HistoryFormView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/profile/history/views/HistoryResumeView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/profile/history/views/HistoryTimelineView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/profile/job-history/JobHistoryClient.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadJobHistory'. Either include it or remove the dependency array.","line":83,"column":6,"nodeType":"ArrayExpression","endLine":83,"endColumn":21,"suggestions":[{"desc":"Update the dependencies array to be: [loadJobHistory, orgId, userId]","fix":{"range":[2368,2383],"text":"[loadJobHistory, orgId, userId]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\n\nimport { useState, useEffect } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { z } from 'zod';\nimport { useTranslations } from 'next-intl';\nimport { createBrowserClient } from '@ghxstship/auth';\nimport {\n  Badge,\n  Button,\n  Card,\n  Drawer,\n  Input,\n  Select,\n  Textarea,\n  UnifiedInput\n} from \"@ghxstship/ui\";\nimport { Briefcase, Building, Calendar, Clock, Edit, History, MapPin, Plus, Trash2 } from \"lucide-react\";\n\nconst jobHistorySchema = z.object({\n  company_name: z.string().min(1, 'Company name is required'),\n  job_title: z.string().min(1, 'Job title is required'),\n  department: z.string().optional(),\n  employment_type: z.enum(['full-time', 'part-time', 'contract', 'freelance', 'intern']),\n  start_date: z.string().min(1, 'Start date is required'),\n  end_date: z.string().optional(),\n  is_current: z.boolean().default(false),\n  location: z.string().optional(),\n  description: z.string().optional(),\n  achievements: z.array(z.string()).default([]),\n  skills_used: z.array(z.string()).default([])\n});\n\ntype JobHistoryForm = z.infer<typeof jobHistorySchema>;\n\ninterface JobHistory {\n  id: string;\n  company_name: string;\n  job_title: string;\n  department?: string;\n  employment_type: string;\n  start_date: string;\n  end_date?: string;\n  is_current: boolean;\n  location?: string;\n  description?: string;\n  achievements: string[];\n  skills_used: string[];\n  created_at: string;\n}\n\nexport default function JobHistoryClient({ orgId, userId }: { orgId: string; userId: string }) {\n  const t = useTranslations('profile');\n  const sb = createBrowserClient();\n  \n  const [jobHistory, setJobHistory] = useState<JobHistory[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [drawerOpen, setDrawerOpen] = useState(false);\n  const [editingJob, setEditingJob] = useState<JobHistory | null>(null);\n  const [saving, setSaving] = useState(false);\n\n  const form = useForm<JobHistoryForm>({\n    resolver: zodResolver(jobHistorySchema),\n    defaultValues: {\n      company_name: '',\n      job_title: '',\n      department: '',\n      employment_type: 'full-time',\n      start_date: '',\n      end_date: '',\n      is_current: false,\n      location: '',\n      description: '',\n      achievements: [],\n      skills_used: []\n    }\n  });\n\n  useEffect(() => {\n    loadJobHistory();\n  }, [orgId, userId]);\n\n  const loadJobHistory = async () => {\n    try {\n      setLoading(true);\n      \n      const { data, error } = await sb\n        .from('job_history')\n        .select('*')\n        .eq('organization_id', orgId)\n        .eq('user_id', userId)\n        .order('start_date', { ascending: false });\n\n      if (error) throw error;\n      setJobHistory(data || []);\n    } catch (error) {\n      console.error('Error loading job history:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const openDrawer = (job?: JobHistory) => {\n    if (job) {\n      setEditingJob(job);\n      form.reset({\n        company_name: job.company_name,\n        job_title: job.job_title,\n        department: job.department || '',\n        employment_type: job.employment_type as any,\n        start_date: job.start_date,\n        end_date: job.end_date || '',\n        is_current: job.is_current,\n        location: job.location || '',\n        description: job.description || '',\n        achievements: job.achievements || [],\n        skills_used: job.skills_used || []\n      });\n    } else {\n      setEditingJob(null);\n      form.reset();\n    }\n    setDrawerOpen(true);\n  };\n\n  const onSubmit = async (data: JobHistoryForm) => {\n    setSaving(true);\n    try {\n      if (editingJob) {\n        // Update existing job\n        const { error } = await sb\n          .from('job_history')\n          .update({\n            ...data,\n            end_date: data.is_current ? null : data.end_date\n          })\n          .eq('id', editingJob.id);\n\n        if (error) throw error;\n      } else {\n        // Create new job\n        const { error } = await sb\n          .from('job_history')\n          .insert({\n            ...data,\n            user_id: userId,\n            organization_id: orgId,\n            end_date: data.is_current ? null : data.end_date\n          });\n\n        if (error) throw error;\n      }\n\n      // Log activity\n      await sb\n        .from('user_profile_activity')\n        .insert({\n          user_id: userId,\n          organization_id: orgId,\n          activity_type: 'job_history_added',\n          activity_description: `${editingJob ? 'Updated' : 'Added'} job history: ${data.job_title} at ${data.company_name}`,\n          performed_by: userId\n        });\n\n      setDrawerOpen(false);\n      loadJobHistory();\n    } catch (error) {\n      console.error('Error saving job history:', error);\n    } finally {\n      setSaving(false);\n    }\n  };\n\n  const deleteJob = async (jobId: string) => {\n    if (!confirm('Are you sure you want to delete this job history entry?')) return;\n\n    try {\n      const { error } = await sb\n        .from('job_history')\n        .delete()\n        .eq('id', jobId);\n\n      if (error) throw error;\n      loadJobHistory();\n    } catch (error) {\n      console.error('Error deleting job history:', error);\n    }\n  };\n\n  const formatEmploymentType = (type: string) => {\n    return type.split('-').map(word => \n      word.charAt(0).toUpperCase() + word.slice(1)\n    ).join(' ');\n  };\n\n  const calculateDuration = (startDate: string, endDate?: string) => {\n    const start = new Date(startDate);\n    const end = endDate ? new Date(endDate) : new Date();\n    \n    const months = (end.getFullYear() - start.getFullYear()) * 12 + \n                   (end.getMonth() - start.getMonth());\n    \n    if (months < 12) {\n      return `${months} month${months !== 1 ? 's' : ''}`;\n    }\n    \n    const years = Math.floor(months / 12);\n    const remainingMonths = months % 12;\n    \n    if (remainingMonths === 0) {\n      return `${years} year${years !== 1 ? 's' : ''}`;\n    }\n    \n    return `${years} year${years !== 1 ? 's' : ''}, ${remainingMonths} month${remainingMonths !== 1 ? 's' : ''}`;\n  };\n\n  if (loading) {\n    return (\n      <div className=\"stack-md\">\n        {[...Array(3)].map((_, i) => (\n          <div key={i} className=\"animate-pulse\">\n            <div className=\"h-component-xl bg-secondary rounded-lg\"></div>\n          </div>\n        ))}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"stack-lg\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <h2 className=\"text-heading-4 text-heading-4\">Job History</h2>\n        <Button onClick={() => openDrawer()} className=\"flex items-center gap-sm\">\n          <Plus className=\"h-icon-xs w-icon-xs\" />\n          Add Job\n        </Button>\n      </div>\n\n      {/* Job History List */}\n      <div className=\"stack-md\">\n        {jobHistory.length > 0 ? (\n          jobHistory.map((job: any) => (\n            <Card key={job.id}>\n              <div className=\"p-lg\">\n                <div className=\"flex items-start justify-between mb-md\">\n                  <div className=\"flex items-start gap-md\">\n                    <div className=\"p-sm bg-accent/10 rounded-lg\">\n                      <Briefcase className=\"h-icon-md w-icon-md color-accent\" />\n                    </div>\n                    \n                    <div>\n                      <h3 className=\"text-body text-heading-4\">{job.job_title}</h3>\n                      <div className=\"flex items-center gap-sm color-muted mb-sm\">\n                        <Building className=\"h-icon-xs w-icon-xs\" />\n                        <span>{job.company_name}</span>\n                        {job.department && <span>• {job.department}</span>}\n                      </div>\n                      \n                      <div className=\"flex items-center gap-md text-body-sm color-muted mb-sm\">\n                        <div className=\"flex items-center gap-xs\">\n                          <Calendar className=\"h-icon-xs w-icon-xs\" />\n                          <span>\n                            {new Date(job.start_date).toLocaleDateString()} - {' '}\n                            {job.is_current ? 'Present' : \n                             job.end_date ? new Date(job.end_date).toLocaleDateString() : 'Present'\n                            }\n                          </span>\n                        </div>\n                        \n                        <div className=\"flex items-center gap-xs\">\n                          <Clock className=\"h-icon-xs w-icon-xs\" />\n                          <span>{calculateDuration(job.start_date, job.end_date)}</span>\n                        </div>\n                      </div>\n                      \n                      {job.location && (\n                        <div className=\"flex items-center gap-xs text-body-sm color-muted mb-sm\">\n                          <MapPin className=\"h-icon-xs w-icon-xs\" />\n                          <span>{job.location}</span>\n                        </div>\n                      )}\n                      \n                      <div className=\"flex items-center gap-sm mb-sm\">\n                        <Badge variant=\"secondary\">\n                          {formatEmploymentType(job.employment_type)}\n                        </Badge>\n                        {job.is_current && (\n                          <Badge variant=\"success\">Current</Badge>\n                        )}\n                      </div>\n                    </div>\n                  </div>\n                  \n                  <div className=\"flex items-center gap-sm\">\n                    <Button\n                      variant=\"outline\"\n                     \n                      onClick={() => openDrawer(job)}\n                    >\n                      <Edit className=\"h-icon-xs w-icon-xs\" />\n                    </Button>\n                    <Button\n                      variant=\"outline\"\n                     \n                      onClick={() => deleteJob(job.id)}\n                    >\n                      <Trash2 className=\"h-icon-xs w-icon-xs\" />\n                    </Button>\n                  </div>\n                </div>\n                \n                {job.description && (\n                  <div className=\"mb-md\">\n                    <h4 className=\"form-label mb-sm\">Description</h4>\n                    <p className=\"text-body-sm color-muted\">{job.description}</p>\n                  </div>\n                )}\n                \n                {job.achievements && job.achievements.length > 0 && (\n                  <div className=\"mb-md\">\n                    <h4 className=\"form-label mb-sm\">Key Achievements</h4>\n                    <ul className=\"list-disc list-inside text-body-sm color-muted stack-xs\">\n                      {job.achievements.map((achievement, index) => (\n                        <li key={index}>{achievement}</li>\n                      ))}\n                    </ul>\n                  </div>\n                )}\n                \n                {job.skills_used && job.skills_used.length > 0 && (\n                  <div>\n                    <h4 className=\"form-label mb-sm\">Skills Used</h4>\n                    <div className=\"flex flex-wrap gap-sm\">\n                      {job.skills_used.map((skill, index) => (\n                        <Badge key={index} variant=\"outline\">\n                          {skill}\n                        </Badge>\n                      ))}\n                    </div>\n                  </div>\n                )}\n              </div>\n            </Card>\n          ))\n        ) : (\n          <Card>\n            <div className=\"p-xl text-center\">\n              <Briefcase className=\"h-icon-2xl w-icon-2xl mx-auto mb-md color-muted opacity-50\" />\n              <h3 className=\"text-body form-label mb-sm\">No Job History</h3>\n              <p className=\"color-muted mb-md\">\n                Add your work experience to showcase your professional background.\n              </p>\n              <Button onClick={() => openDrawer()}>\n                <Plus className=\"h-icon-xs w-icon-xs mr-sm\" />\n                Add Your First Job\n              </Button>\n            </div>\n          </Card>\n        )}\n      </div>\n\n      {/* Add/Edit Job Drawer */}\n      <Drawer\n        open={drawerOpen}\n        onClose={() => setDrawerOpen(false)}\n        title={editingJob ? 'Edit Job History' : 'Add Job History'}\n        description=\"Add details about your work experience\"\n      >\n        <form onSubmit={form.handleSubmit(onSubmit)} className=\"stack-lg\">\n          <div className=\"grid grid-cols-1 gap-md\">\n            <Input               label=\"Company Name\"\n              placeholder=\"Enter company name\"\n              {...form.register('company_name')}\n             \n              required\n            />\n\n            <Input               label=\"Job Title\"\n              placeholder=\"Enter job title\"\n              {...form.register('job_title')}\n             \n              required\n            />\n\n            <div className=\"grid grid-cols-2 gap-md\">\n              <Input                 label=\"Department\"\n                placeholder=\"Enter department (optional)\"\n                {...form.register('department')}\n               \n              />\n\n              <Select\n                {...form.register('employment_type')}\n              >\n                <option value=\"full-time\">Full Time</option>\n                <option value=\"part-time\">Part Time</option>\n                <option value=\"contract\">Contract</option>\n                <option value=\"freelance\">Freelance</option>\n                <option value=\"intern\">Intern</option>\n              </Select>\n            </div>\n\n            <div className=\"grid grid-cols-2 gap-md\">\n              <Input                 label=\"Start Date\"\n                type=\"date\"\n                {...form.register('start_date')}\n               \n                required\n              />\n\n              <Input                 label=\"End Date\"\n                type=\"date\"\n                {...form.register('end_date')}\n               \n                disabled={form.watch('is_current')}\n              />\n            </div>\n\n            <div className=\"flex items-center gap-sm\">\n              <input\n                type=\"checkbox\"\n                id=\"is_current\"\n                {...form.register('is_current')}\n                className=\"rounded border-border\"\n              />\n              <label htmlFor=\"is_current\" className=\"text-body-sm form-label\">\n                This is my current job\n              </label>\n            </div>\n\n            <Input               label=\"Location\"\n              placeholder=\"Enter location (optional)\"\n              {...form.register('location')}\n             \n            />\n\n            <Textarea\n              label=\"Description\"\n              placeholder=\"Describe your role and responsibilities (optional)\"\n              {...form.register('description')}\n             \n              rows={4}\n            />\n          </div>\n\n          <div className=\"flex justify-end gap-sm pt-md border-t\">\n            <Button\n              type=\"button\"\n              variant=\"outline\"\n              onClick={() => setDrawerOpen(false)}\n              disabled={saving}\n            >\n              Cancel\n            </Button>\n            <Button type=\"submit\" loading={saving}>\n              {editingJob ? 'Update Job' : 'Add Job'}\n            </Button>\n          </div>\n        </form>\n      </Drawer>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/profile/job-history/drawers/CreateJobHistoryDrawer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/profile/job-history/drawers/EditJobHistoryDrawer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/profile/job-history/drawers/ViewJobHistoryDrawer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/profile/job-history/lib/jobHistoryService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/profile/job-history/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/profile/job-history/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/profile/job-history/views/JobHistoryAnalyticsView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/profile/job-history/views/JobHistoryCardView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/profile/job-history/views/JobHistoryFormView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/profile/job-history/views/JobHistoryResumeView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/profile/job-history/views/JobHistoryTimelineView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/profile/lib/api.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/profile/lib/export.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/profile/lib/import.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/profile/lib/mutations.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/profile/lib/permissions.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/profile/lib/profile-service.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/profile/lib/queries.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/profile/lib/realtime.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/profile/lib/validations.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/profile/overview/ProfileClient.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/profile/overview/ProfileOverviewClient.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'loadProfileOverview' and 'loadRecentActivity'. Either include them or remove the dependency array.","line":46,"column":6,"nodeType":"ArrayExpression","endLine":46,"endColumn":21,"suggestions":[{"desc":"Update the dependencies array to be: [loadProfileOverview, loadRecentActivity, orgId, userId]","fix":{"range":[1305,1320],"text":"[loadProfileOverview, loadRecentActivity, orgId, userId]"}}]},{"ruleId":"@next/next/no-img-element","severity":1,"message":"Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` or a custom image loader to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","line":138,"column":17,"nodeType":"JSXOpeningElement","endLine":142,"endColumn":19}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\n\nimport { useState, useEffect } from 'react';\nimport { useTranslations } from 'next-intl';\nimport { createBrowserClient } from '@ghxstship/auth';\nimport { Card, Badge, Button } from '@ghxstship/ui';\nimport { AlertCircle, Award, Briefcase, Calendar, Camera, CheckCircle, Edit, History, Mail, MapPin, Phone, User } from \"lucide-react\";\n\ninterface ProfileOverview {\n  id: string;\n  user_id: string;\n  avatar_url?: string;\n  full_name: string;\n  email: string;\n  job_title?: string;\n  department?: string;\n  phone_primary?: string;\n  location?: string;\n  profile_completion_percentage: number;\n  status: string;\n  last_login?: string;\n  created_at: string;\n  certifications_count: number;\n  job_history_count: number;\n}\n\ninterface RecentActivity {\n  id: string;\n  activity_type: string;\n  activity_description: string;\n  created_at: string;\n}\n\nexport default function ProfileOverviewClient({ orgId, userId }: { orgId: string; userId: string }) {\n  const t = useTranslations('profile');\n  const sb = createBrowserClient();\n  \n  const [profile, setProfile] = useState<ProfileOverview | null>(null);\n  const [activities, setActivities] = useState<RecentActivity[]>([]);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    loadProfileOverview();\n    loadRecentActivity();\n  }, [orgId, userId]);\n\n  const loadProfileOverview = async () => {\n    try {\n      // Get user profile with aggregated data\n      const { data: profileData, error: profileError } = await sb\n        .from('user_profiles')\n        .select(`\n          *,\n          user:users(full_name, email),\n          certifications:certifications(count),\n          job_history:job_history(count)\n        `)\n        .eq('organization_id', orgId)\n        .eq('user_id', userId)\n        .single();\n\n      if (profileError && profileError.code !== 'PGRST116') {\n        throw profileError;\n      }\n\n      if (profileData) {\n        setProfile({\n          ...profileData,\n          full_name: profileData.user?.full_name || 'Unknown User',\n          email: profileData.user?.email || '',\n          certifications_count: profileData.certifications?.length || 0,\n          job_history_count: profileData.job_history?.length || 0\n        });\n      }\n    } catch (error) {\n      console.error('Error loading profile overview:', error);\n    }\n  };\n\n  const loadRecentActivity = async () => {\n    try {\n      const { data, error } = await sb\n        .from('user_profile_activity')\n        .select('*')\n        .eq('organization_id', orgId)\n        .eq('user_id', userId)\n        .order('created_at', { ascending: false })\n        .limit(5);\n\n      if (error) throw error;\n      setActivities(data || []);\n    } catch (error) {\n      console.error('Error loading recent activity:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const getCompletionColor = (percentage: number) => {\n    if (percentage >= 80) return 'success';\n    if (percentage >= 50) return 'warning';\n    return 'destructive';\n  };\n\n  const getStatusBadge = (status: string) => {\n    const statusConfig = {\n      active: { variant: 'success' as const, label: 'Active' },\n      inactive: { variant: 'secondary' as const, label: 'Inactive' },\n      pending: { variant: 'warning' as const, label: 'Pending' }\n    };\n    \n    return statusConfig[status as keyof typeof statusConfig] || statusConfig.pending;\n  };\n\n  if (loading) {\n    return (\n      <div className=\"stack-lg\">\n        <div className=\"animate-pulse\">\n          <div className=\"h-component-xl bg-secondary rounded-lg mb-md\"></div>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-md\">\n            <div className=\"h-container-xs bg-secondary rounded-lg\"></div>\n            <div className=\"h-container-xs bg-secondary rounded-lg\"></div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"stack-lg\">\n      {/* Profile Header */}\n      <Card>\n        <div className=\"flex items-start gap-lg p-lg\">\n          <div className=\"relative\">\n            <div className=\"h-component-lg w-component-lg rounded-full bg-secondary flex items-center justify-center\">\n              {profile?.avatar_url ? (\n                <img \n                  src={profile.avatar_url} \n                  alt={profile.full_name || 'User'}\n                  className=\"h-component-lg w-component-lg rounded-full object-cover\"\n                />\n              ) : (\n                <User className=\"h-icon-lg w-icon-lg color-muted\" />\n              )}\n            </div>\n            <Button\n             \n              variant=\"outline\"\n              className=\"absolute -bottom-2 -right-2 h-icon-lg w-icon-lg rounded-full p-0\"\n            >\n              <Camera className=\"h-icon-xs w-icon-xs\" />\n            </Button>\n          </div>\n          \n          <div className=\"flex-1\">\n            <div className=\"flex items-center justify-between mb-sm\">\n              <h1 className=\"text-heading-3 text-heading-3\">{profile?.full_name || 'Unknown User'}</h1>\n              <Badge {...getStatusBadge(profile?.status || 'pending')}>\n                {getStatusBadge(profile?.status || 'pending').label}\n              </Badge>\n            </div>\n            \n            <div className=\"stack-sm text-body-sm color-muted\">\n              {profile?.job_title && (\n                <div className=\"flex items-center gap-sm\">\n                  <Briefcase className=\"h-icon-xs w-icon-xs\" />\n                  <span>{profile.job_title}</span>\n                  {profile.department && <span>• {profile.department}</span>}\n                </div>\n              )}\n              \n              <div className=\"flex items-center gap-sm\">\n                <Mail className=\"h-icon-xs w-icon-xs\" />\n                <span>{profile?.email}</span>\n              </div>\n              \n              {profile?.phone_primary && (\n                <div className=\"flex items-center gap-sm\">\n                  <Phone className=\"h-icon-xs w-icon-xs\" />\n                  <span>{profile.phone_primary}</span>\n                </div>\n              )}\n              \n              {profile?.location && (\n                <div className=\"flex items-center gap-sm\">\n                  <MapPin className=\"h-icon-xs w-icon-xs\" />\n                  <span>{profile.location}</span>\n                </div>\n              )}\n            </div>\n          </div>\n          \n          <Button variant=\"outline\" className=\"flex items-center gap-sm\">\n            <Edit className=\"h-icon-xs w-icon-xs\" />\n            Edit Profile\n          </Button>\n        </div>\n      </Card>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-lg\">\n        {/* Profile Completion */}\n        <Card>\n          <div className=\"p-lg\">\n            <div className=\"flex items-center justify-between mb-md\">\n              <h3 className=\"text-body text-heading-4\">Profile Completion</h3>\n              <Badge variant={getCompletionColor(profile?.profile_completion_percentage || 0)}>\n                {profile?.profile_completion_percentage || 0}%\n              </Badge>\n            </div>\n            \n            <div className=\"w-full bg-secondary rounded-full h-2 mb-md\">\n              <div \n                className=\"bg-accent h-2 rounded-full transition-all duration-300\" \n                style={{ width: `${profile?.profile_completion_percentage || 0}%` }}\n              ></div>\n            </div>\n            \n            <div className=\"stack-sm text-body-sm\">\n              <div className=\"flex items-center gap-sm color-muted\">\n                <CheckCircle className=\"h-icon-xs w-icon-xs color-success\" />\n                <span>Basic information completed</span>\n              </div>\n              <div className=\"flex items-center gap-sm color-muted\">\n                <AlertCircle className=\"h-icon-xs w-icon-xs color-warning\" />\n                <span>Add professional certifications</span>\n              </div>\n              <div className=\"flex items-center gap-sm color-muted\">\n                <AlertCircle className=\"h-icon-xs w-icon-xs color-warning\" />\n                <span>Complete job history</span>\n              </div>\n            </div>\n          </div>\n        </Card>\n\n        {/* Quick Stats */}\n        <Card>\n          <div className=\"p-lg\">\n            <h3 className=\"text-body text-heading-4 mb-md\">Quick Stats</h3>\n            \n            <div className=\"grid grid-cols-2 gap-md\">\n              <div className=\"text-center p-md bg-secondary/50 rounded-lg\">\n                <div className=\"text-heading-3 text-heading-3 color-accent\">\n                  {profile?.certifications_count || 0}\n                </div>\n                <div className=\"text-body-sm color-muted\">Certifications</div>\n              </div>\n              \n              <div className=\"text-center p-md bg-secondary/50 rounded-lg\">\n                <div className=\"text-heading-3 text-heading-3 color-success\">\n                  {profile?.job_history_count || 0}\n                </div>\n                <div className=\"text-body-sm color-muted\">Job History</div>\n              </div>\n            </div>\n            \n            <div className=\"mt-md pt-md border-t\">\n              <div className=\"flex items-center gap-sm text-body-sm color-muted\">\n                <Calendar className=\"h-icon-xs w-icon-xs\" />\n                <span>\n                  Member since {profile?.created_at ? \n                    new Date(profile.created_at).toLocaleDateString() : 'Unknown'\n                  }\n                </span>\n              </div>\n            </div>\n          </div>\n        </Card>\n\n        {/* Recent Activity */}\n        <Card className=\"md:col-span-2\">\n          <div className=\"p-lg\">\n            <h3 className=\"text-body text-heading-4 mb-md\">Recent Activity</h3>\n            \n            {activities.length > 0 ? (\n              <div className=\"stack-sm\">\n                {activities.map((activity: any) => (\n                  <div key={activity.id} className=\"flex items-center gap-sm p-sm bg-secondary/50 rounded-lg\">\n                    <div className=\"h-2 w-2 bg-accent rounded-full\"></div>\n                    <div className=\"flex-1\">\n                      <div className=\"text-body-sm form-label\">{activity.activity_description}</div>\n                      <div className=\"text-body-sm color-muted\">\n                        {new Date(activity.created_at).toLocaleString()}\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            ) : (\n              <div className=\"text-center py-xl color-muted\">\n                <User className=\"h-icon-2xl w-icon-2xl mx-auto mb-sm opacity-50\" />\n                <p>No recent activity</p>\n              </div>\n            )}\n          </div>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/profile/overview/drawers/BulkActionsDrawer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/profile/overview/drawers/CreateEditProfileOverviewDrawer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/profile/overview/drawers/ExportDrawer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/profile/overview/lib/profileOverviewService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/profile/overview/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/profile/overview/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/profile/overview/views/ProfileOverviewAnalyticsView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/profile/overview/views/ProfileOverviewCalendarView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/profile/overview/views/ProfileOverviewGridView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/profile/overview/views/ProfileOverviewKanbanView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/profile/overview/views/ProfileOverviewListView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/profile/overview/views/ProfileOverviewTableView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/profile/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/profile/performance/CreatePerformanceReviewClient.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/profile/performance/PerformanceClient.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/profile/performance/drawers/CreatePerformanceDrawer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/profile/performance/drawers/CreatePerformanceReviewDrawer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/profile/performance/lib/performanceService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/profile/performance/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/profile/performance/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/profile/performance/views/PerformanceAnalyticsView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/profile/performance/views/PerformanceGridView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/profile/performance/views/PerformanceListView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/profile/performance/views/PerformanceTableView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/profile/professional/CreateProfessionalClient.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/profile/professional/ProfessionalClient.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadProfessionalProfile'. Either include it or remove the dependency array.","line":102,"column":6,"nodeType":"ArrayExpression","endLine":102,"endColumn":21,"suggestions":[{"desc":"Update the dependencies array to be: [loadProfessionalProfile, orgId, userId]","fix":{"range":[2836,2851],"text":"[loadProfessionalProfile, orgId, userId]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\n\nimport { useState, useEffect } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { z } from 'zod';\nimport { useTranslations } from 'next-intl';\nimport { createBrowserClient } from '@ghxstship/auth';\nimport { \n  Briefcase, \n  Edit, \n  Save, \n  Award, \n  Target,\n  Users,\n  TrendingUp,\n  Calendar\n} from 'lucide-react';import {\n  Badge,\n  Button,\n  Card,\n  Input,\n  Select,\n  Textarea,\n  UnifiedInput\n} from \"@ghxstship/ui\";\nimport { Card, Button, Select, Textarea, Badge } from '@ghxstship/ui';\n\n\nconst professionalSchema = z.object({\n  job_title: z.string().optional(),\n  department: z.string().optional(),\n  employee_id: z.string().optional(),\n  hire_date: z.string().optional(),\n  employment_type: z.enum(['full-time', 'part-time', 'contract', 'freelance', 'intern']).optional(),\n  manager_id: z.string().optional(),\n  skills: z.array(z.string()).default([]),\n  bio: z.string().optional(),\n  linkedin_url: z.string().url().optional().or(z.literal('')),\n  website_url: z.string().url().optional().or(z.literal('')),\n  salary_range: z.string().optional(),\n  performance_rating: z.enum(['exceeds', 'meets', 'below', 'not-rated']).optional(),\n  career_goals: z.string().optional(),\n  mentorship_interests: z.array(z.string()).default([])\n});\n\ntype ProfessionalForm = z.infer<typeof professionalSchema>;\n\ninterface ProfessionalProfile {\n  id: string;\n  job_title?: string;\n  department?: string;\n  employee_id?: string;\n  hire_date?: string;\n  employment_type?: string;\n  manager_id?: string;\n  skills: string[];\n  bio?: string;\n  linkedin_url?: string;\n  website_url?: string;\n  salary_range?: string;\n  performance_rating?: string;\n  career_goals?: string;\n  mentorship_interests: string[];\n  updated_at: string;\n}\n\nexport default function ProfessionalClient({ orgId, userId }: { orgId: string; userId: string }) {\n  const t = useTranslations('profile');\n  const sb = createBrowserClient();\n  \n  const [profile, setProfile] = useState<ProfessionalProfile | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [editing, setEditing] = useState(false);\n  const [saving, setSaving] = useState(false);\n  const [skillInput, setSkillInput] = useState('');\n  const [mentorshipInput, setMentorshipInput] = useState('');\n\n  const form = useForm<ProfessionalForm>({\n    resolver: zodResolver(professionalSchema),\n    defaultValues: {\n      job_title: '',\n      department: '',\n      employee_id: '',\n      hire_date: '',\n      employment_type: 'full-time',\n      manager_id: '',\n      skills: [],\n      bio: '',\n      linkedin_url: '',\n      website_url: '',\n      salary_range: '',\n      performance_rating: 'not-rated',\n      career_goals: '',\n      mentorship_interests: []\n    }\n  });\n\n  useEffect(() => {\n    loadProfessionalProfile();\n  }, [orgId, userId]);\n\n  const loadProfessionalProfile = async () => {\n    try {\n      setLoading(true);\n      \n      const { data, error } = await sb\n        .from('user_profiles')\n        .select('*')\n        .eq('organization_id', orgId)\n        .eq('user_id', userId)\n        .single();\n\n      if (error && error.code !== 'PGRST116') {\n        throw error;\n      }\n\n      if (data) {\n        setProfile(data);\n        form.reset({\n          job_title: data.job_title || '',\n          department: data.department || '',\n          employee_id: data.employee_id || '',\n          hire_date: data.hire_date || '',\n          employment_type: data.employment_type || 'full-time',\n          manager_id: data.manager_id || '',\n          skills: data.skills || [],\n          bio: data.bio || '',\n          linkedin_url: data.linkedin_url || '',\n          website_url: data.website_url || '',\n          salary_range: data.salary_range || '',\n          performance_rating: data.performance_rating || 'not-rated',\n          career_goals: data.career_goals || '',\n          mentorship_interests: data.mentorship_interests || []\n        });\n      }\n    } catch (error) {\n      console.error('Error loading professional profile:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const onSubmit = async (data: ProfessionalForm) => {\n    setSaving(true);\n    try {\n      const { error } = await sb\n        .from('user_profiles')\n        .upsert({\n          user_id: userId,\n          organization_id: orgId,\n          ...data,\n          linkedin_url: data.linkedin_url || null,\n          website_url: data.website_url || null\n        });\n\n      if (error) throw error;\n\n      // Log activity\n      await sb\n        .from('user_profile_activity')\n        .insert({\n          user_id: userId,\n          organization_id: orgId,\n          activity_type: 'profile_updated',\n          activity_description: 'Updated professional information',\n          performed_by: userId\n        });\n\n      setEditing(false);\n      loadProfessionalProfile();\n    } catch (error) {\n      console.error('Error saving professional profile:', error);\n    } finally {\n      setSaving(false);\n    }\n  };\n\n  const addSkill = () => {\n    if (skillInput.trim()) {\n      const currentSkills = form.getValues('skills');\n      if (!currentSkills.includes(skillInput.trim())) {\n        form.setValue('skills', [...currentSkills, skillInput.trim()]);\n        setSkillInput('');\n      }\n    }\n  };\n\n  const removeSkill = (skillToRemove: string) => {\n    const currentSkills = form.getValues('skills');\n    form.setValue('skills', currentSkills.filter(skill => skill !== skillToRemove));\n  };\n\n  const addMentorshipInterest = () => {\n    if (mentorshipInput.trim()) {\n      const currentInterests = form.getValues('mentorship_interests');\n      if (!currentInterests.includes(mentorshipInput.trim())) {\n        form.setValue('mentorship_interests', [...currentInterests, mentorshipInput.trim()]);\n        setMentorshipInput('');\n      }\n    }\n  };\n\n  const removeMentorshipInterest = (interestToRemove: string) => {\n    const currentInterests = form.getValues('mentorship_interests');\n    form.setValue('mentorship_interests', currentInterests.filter(interest => interest !== interestToRemove));\n  };\n\n  const formatEmploymentType = (type: string) => {\n    return type.split('-').map(word => \n      word.charAt(0).toUpperCase() + word.slice(1)\n    ).join(' ');\n  };\n\n  const getPerformanceRatingColor = (rating: string) => {\n    const colors = {\n      exceeds: 'success',\n      meets: 'secondary',\n      below: 'warning',\n      'not-rated': 'outline'\n    };\n    return colors[rating as keyof typeof colors] || 'outline';\n  };\n\n  if (loading) {\n    return (\n      <div className=\"stack-lg\">\n        <div className=\"animate-pulse\">\n          <div className=\"h-icon-lg bg-secondary rounded mb-md\"></div>\n          <div className=\"stack-md\">\n            <div className=\"h-component-xl bg-secondary rounded\"></div>\n            <div className=\"h-component-lg bg-secondary rounded\"></div>\n            <div className=\"h-component-lg bg-secondary rounded\"></div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"stack-lg\">\n      <div className=\"flex items-center justify-between\">\n        <h2 className=\"text-heading-4 text-heading-4\">Professional Information</h2>\n        {!editing ? (\n          <Button onClick={() => setEditing(true)} className=\"flex items-center gap-sm\">\n            <Edit className=\"h-icon-xs w-icon-xs\" />\n            Edit Profile\n          </Button>\n        ) : (\n          <div className=\"flex items-center gap-sm\">\n            <Button\n              variant=\"outline\"\n              onClick={() => {\n                setEditing(false);\n                form.reset();\n              }}\n            >\n              Cancel\n            </Button>\n            <Button\n              onClick={form.handleSubmit(onSubmit)}\n              loading={saving}\n              className=\"flex items-center gap-sm\"\n            >\n              <Save className=\"h-icon-xs w-icon-xs\" />\n              Save Changes\n            </Button>\n          </div>\n        )}\n      </div>\n\n      <form onSubmit={form.handleSubmit(onSubmit)} className=\"stack-lg\">\n        {/* Employment Information */}\n        <Card>\n          <div className=\"p-lg\">\n            <div className=\"flex items-center gap-sm mb-md\">\n              <Briefcase className=\"h-icon-sm w-icon-sm color-accent\" />\n              <h3 className=\"text-body text-heading-4\">Employment Details</h3>\n            </div>\n            \n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-md\">\n              <Input                 label=\"Job Title\"\n                placeholder=\"Enter your job title\"\n                {...form.register('job_title')}\n               \n                disabled={!editing}\n              />\n\n              <Input                 label=\"Department\"\n                placeholder=\"Enter your department\"\n                {...form.register('department')}\n               \n                disabled={!editing}\n              />\n\n              <Input                 label=\"Employee ID\"\n                placeholder=\"Enter employee ID\"\n                {...form.register('employee_id')}\n               \n                disabled={!editing}\n              />\n\n              <Input                 label=\"Hire Date\"\n                type=\"date\"\n                {...form.register('hire_date')}\n               \n                disabled={!editing}\n              />\n\n              <Select\n                {...form.register('employment_type')}\n                disabled={!editing}\n              >\n                <option value=\"full-time\">Full Time</option>\n                <option value=\"part-time\">Part Time</option>\n                <option value=\"contract\">Contract</option>\n                <option value=\"freelance\">Freelance</option>\n                <option value=\"intern\">Intern</option>\n              </Select>\n\n              <Select\n                {...form.register('performance_rating')}\n                disabled={!editing}\n              >\n                <option value=\"not-rated\">Not Rated</option>\n                <option value=\"exceeds\">Exceeds Expectations</option>\n                <option value=\"meets\">Meets Expectations</option>\n                <option value=\"below\">Below Expectations</option>\n              </Select>\n            </div>\n\n            {!editing && profile && (\n              <div className=\"mt-md flex items-center gap-md\">\n                {profile.employment_type && (\n                  <Badge variant=\"secondary\">\n                    {formatEmploymentType(profile.employment_type)}\n                  </Badge>\n                )}\n                {profile.performance_rating && profile.performance_rating !== 'not-rated' && (\n                  <Badge variant={getPerformanceRatingColor(profile.performance_rating) as any}>\n                    {profile.performance_rating === 'exceeds' ? 'Exceeds Expectations' :\n                     profile.performance_rating === 'meets' ? 'Meets Expectations' :\n                     'Below Expectations'}\n                  </Badge>\n                )}\n              </div>\n            )}\n          </div>\n        </Card>\n\n        {/* Skills */}\n        <Card>\n          <div className=\"p-lg\">\n            <div className=\"flex items-center gap-sm mb-md\">\n              <Award className=\"h-icon-sm w-icon-sm color-secondary\" />\n              <h3 className=\"text-body text-heading-4\">Skills & Expertise</h3>\n            </div>\n            \n            {editing && (\n              <div className=\"flex gap-sm mb-md\">\n                <Input                   placeholder=\"Add a skill\"\n                  value={skillInput}\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => setSkillInput(e.target.value)}\n                  onKeyPress={(e: any) => e.key === 'Enter' && (e.preventDefault(), addSkill())}\n                />\n                <Button type=\"button\" onClick={addSkill}>Add</Button>\n              </div>\n            )}\n            \n            <div className=\"flex flex-wrap gap-sm\">\n              {form.watch('skills').map((skill, index) => (\n                <Badge\n                  key={index}\n                  variant=\"outline\"\n                  className=\"flex items-center gap-xs\"\n                >\n                  {skill}\n                  {editing && (\n                    <button\n                      type=\"button\"\n                      onClick={() => removeSkill(skill)}\n                      className=\"ml-xs color-destructive hover:color-destructive/80\"\n                    >\n                      ×\n                    </button>\n                  )}\n                </Badge>\n              ))}\n            </div>\n          </div>\n        </Card>\n\n        {/* Professional Bio */}\n        <Card>\n          <div className=\"p-lg\">\n            <div className=\"flex items-center gap-sm mb-md\">\n              <Users className=\"h-icon-sm w-icon-sm color-success\" />\n              <h3 className=\"text-body text-heading-4\">Professional Bio</h3>\n            </div>\n            \n            <Textarea\n              label=\"Bio\"\n              placeholder=\"Write a brief professional bio\"\n              {...form.register('bio')}\n             \n              disabled={!editing}\n              rows={4}\n            />\n          </div>\n        </Card>\n\n        {/* Career Development */}\n        <Card>\n          <div className=\"p-lg\">\n            <div className=\"flex items-center gap-sm mb-md\">\n              <TrendingUp className=\"h-icon-sm w-icon-sm color-warning\" />\n              <h3 className=\"text-body text-heading-4\">Career Development</h3>\n            </div>\n            \n            <div className=\"stack-md\">\n              <Textarea\n                label=\"Career Goals\"\n                placeholder=\"Describe your career goals and aspirations\"\n                {...form.register('career_goals')}\n               \n                disabled={!editing}\n                rows={3}\n              />\n              \n              <div>\n                <label className=\"block text-body-sm form-label mb-sm\">Mentorship Interests</label>\n                {editing && (\n                  <div className=\"flex gap-sm mb-md\">\n                    <Input                       placeholder=\"Add mentorship interest\"\n                      value={mentorshipInput}\n                      onChange={(e: React.ChangeEvent<HTMLInputElement>) => setMentorshipInput(e.target.value)}\n                      onKeyPress={(e: any) => e.key === 'Enter' && (e.preventDefault(), addMentorshipInterest())}\n                    />\n                    <Button type=\"button\" onClick={addMentorshipInterest}>Add</Button>\n                  </div>\n                )}\n                \n                <div className=\"flex flex-wrap gap-sm\">\n                  {form.watch('mentorship_interests').map((interest, index) => (\n                    <Badge\n                      key={index}\n                      variant=\"outline\"\n                      className=\"flex items-center gap-xs\"\n                    >\n                      {interest}\n                      {editing && (\n                        <button\n                          type=\"button\"\n                          onClick={() => removeMentorshipInterest(interest)}\n                          className=\"ml-xs color-destructive hover:color-destructive/80\"\n                        >\n                          ×\n                        </button>\n                      )}\n                    </Badge>\n                  ))}\n                </div>\n              </div>\n            </div>\n          </div>\n        </Card>\n\n        {/* Online Presence */}\n        <Card>\n          <div className=\"p-lg\">\n            <div className=\"flex items-center gap-sm mb-md\">\n              <Target className=\"h-icon-sm w-icon-sm color-accent\" />\n              <h3 className=\"text-body text-heading-4\">Online Presence</h3>\n            </div>\n            \n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-md\">\n              <Input                 label=\"LinkedIn URL\"\n                placeholder=\"https://linkedin.com/in/username\"\n                {...form.register('linkedin_url')}\n               \n                disabled={!editing}\n              />\n\n              <Input                 label=\"Website URL\"\n                placeholder=\"https://yourwebsite.com\"\n                {...form.register('website_url')}\n               \n                disabled={!editing}\n              />\n            </div>\n          </div>\n        </Card>\n      </form>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/profile/professional/drawers/CreateProfessionalDrawer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/profile/professional/lib/professionalService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/profile/professional/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/profile/professional/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/profile/professional/views/ProfessionalAnalyticsView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/profile/professional/views/ProfessionalCalendarView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/profile/professional/views/ProfessionalGridView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/profile/professional/views/ProfessionalKanbanView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/profile/professional/views/ProfessionalListView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/profile/professional/views/ProfessionalTableView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/profile/travel/CreateTravelRecordClient.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/profile/travel/TravelClient.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'form'. Either include it or remove the dependency array.","line":115,"column":6,"nodeType":"ArrayExpression","endLine":115,"endColumn":56,"suggestions":[{"desc":"Update the dependencies array to be: [form]","fix":{"range":[3298,3348],"text":"[form]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a complex expression in the dependency array. Extract it to a separate variable so it can be statically checked.","line":115,"column":7,"nodeType":"CallExpression","endLine":115,"endColumn":31},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a complex expression in the dependency array. Extract it to a separate variable so it can be statically checked.","line":115,"column":33,"nodeType":"CallExpression","endLine":115,"endColumn":55}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\n\nimport { useState, useEffect } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { z } from 'zod';\nimport { useTranslations } from 'next-intl';\nimport { createBrowserClient } from '@ghxstship/auth';\nimport { Calendar, Clock, CreditCard, Edit, Globe, History, MapPin, Plane, Plus, Save, Trash2 } from \"lucide-react\";import {\n  Badge,\n  Button,\n  Card,\n  Drawer,\n  Input,\n  Select,\n  Textarea,\n  UnifiedInput\n} from \"@ghxstship/ui\";\nimport {\n  Card,\n  Button,\n  Select,\n  Textarea,\n  Badge,\n  Drawer\n} from '@ghxstship/ui';\n\n\nconst travelRecordSchema = z.object({\n  travel_type: z.enum(['business', 'personal', 'relocation', 'training', 'conference', 'other']),\n  destination: z.string().min(1, 'Destination is required'),\n  country: z.string().min(1, 'Country is required'),\n  purpose: z.string().min(1, 'Purpose is required'),\n  start_date: z.string(),\n  end_date: z.string(),\n  duration_days: z.number().min(1),\n  accommodation: z.string().optional(),\n  transportation: z.string().optional(),\n  visa_required: z.boolean().default(false),\n  visa_status: z.enum(['not-required', 'pending', 'approved', 'denied']).optional(),\n  passport_used: z.string().optional(),\n  notes: z.string().optional(),\n  expenses: z.number().optional()\n});\n\ntype TravelRecordForm = z.infer<typeof travelRecordSchema>;\n\ninterface TravelRecord {\n  id: string;\n  travel_type: string;\n  destination: string;\n  country: string;\n  purpose: string;\n  start_date: string;\n  end_date: string;\n  duration_days: number;\n  accommodation?: string;\n  transportation?: string;\n  visa_required: boolean;\n  visa_status?: string;\n  passport_used?: string;\n  notes?: string;\n  expenses?: number;\n  created_at: string;\n}\n\nexport default function TravelClient({ orgId, userId }: { orgId: string; userId: string }) {\n  const t = useTranslations('profile');\n  const sb = createBrowserClient();\n  \n  const [travelRecords, setTravelRecords] = useState<TravelRecord[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [drawerOpen, setDrawerOpen] = useState(false);\n  const [editingRecord, setEditingRecord] = useState<TravelRecord | null>(null);\n  const [saving, setSaving] = useState(false);\n  const [filterType, setFilterType] = useState<string>('all');\n\n  const form = useForm<TravelRecordForm>({\n    resolver: zodResolver(travelRecordSchema),\n    defaultValues: {\n      travel_type: 'business',\n      destination: '',\n      country: '',\n      purpose: '',\n      start_date: '',\n      end_date: '',\n      duration_days: 1,\n      accommodation: '',\n      transportation: '',\n      visa_required: false,\n      visa_status: 'not-required',\n      passport_used: '',\n      notes: '',\n      expenses: 0\n    }\n  });\n\n  useEffect(() => {\n    loadTravelRecords();\n  }, [orgId, userId]);\n\n  useEffect(() => {\n    // Calculate duration when dates change\n    const startDate = form.watch('start_date');\n    const endDate = form.watch('end_date');\n    \n    if (startDate && endDate) {\n      const start = new Date(startDate);\n      const end = new Date(endDate);\n      const diffTime = Math.abs(end.getTime() - start.getTime());\n      const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24)) + 1;\n      form.setValue('duration_days', diffDays);\n    }\n  }, [form.watch('start_date'), form.watch('end_date')]);\n\n  const loadTravelRecords = async () => {\n    try {\n      setLoading(true);\n      \n      // Mock travel records data\n      const mockRecords: TravelRecord[] = [\n        {\n          id: '1',\n          travel_type: 'business',\n          destination: 'Port Royal, Jamaica',\n          country: 'Jamaica',\n          purpose: 'Maritime Operations Conference',\n          start_date: '2024-01-15',\n          end_date: '2024-01-20',\n          duration_days: 6,\n          accommodation: 'Royal Caribbean Resort',\n          transportation: 'Company Vessel',\n          visa_required: false,\n          visa_status: 'not-required',\n          passport_used: 'Maritime Passport #12345',\n          notes: 'Attended advanced navigation workshops and fleet coordination meetings.',\n          expenses: 2500,\n          created_at: '2024-01-15T10:00:00Z'\n        },\n        {\n          id: '2',\n          travel_type: 'training',\n          destination: 'Portsmouth, England',\n          country: 'United Kingdom',\n          purpose: 'Advanced Maritime Certification',\n          start_date: '2023-09-01',\n          end_date: '2023-09-30',\n          duration_days: 30,\n          accommodation: 'Naval Academy Quarters',\n          transportation: 'Commercial Flight',\n          visa_required: true,\n          visa_status: 'approved',\n          passport_used: 'Standard Passport #67890',\n          notes: 'Completed advanced navigation and maritime law certification program.',\n          expenses: 5000,\n          created_at: '2023-09-01T08:00:00Z'\n        },\n        {\n          id: '3',\n          travel_type: 'personal',\n          destination: 'Tortuga Island',\n          country: 'Caribbean Territory',\n          purpose: 'Family Vacation',\n          start_date: '2023-12-20',\n          end_date: '2023-12-27',\n          duration_days: 8,\n          accommodation: 'Beachfront Villa',\n          transportation: 'Private Yacht',\n          visa_required: false,\n          visa_status: 'not-required',\n          notes: 'Holiday break with family. Explored local maritime history.',\n          expenses: 3000,\n          created_at: '2023-12-20T12:00:00Z'\n        }\n      ];\n      \n      setTravelRecords(mockRecords);\n    } catch (error) {\n      console.error('Error loading travel records:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const onSubmit = async (data: TravelRecordForm) => {\n    setSaving(true);\n    try {\n      if (editingRecord) {\n        // Update existing record\n        const updatedRecords = travelRecords.map(record =>\n          record.id === editingRecord.id\n            ? { ...record, ...data }\n            : record\n        );\n        setTravelRecords(updatedRecords);\n      } else {\n        // Create new record\n        const newRecord: TravelRecord = {\n          id: Date.now().toString(),\n          ...data,\n          created_at: new Date().toISOString()\n        };\n        setTravelRecords([newRecord, ...travelRecords]);\n      }\n\n      // Log activity\n      await sb\n        .from('user_profile_activity')\n        .insert({\n          user_id: userId,\n          organization_id: orgId,\n          activity_type: editingRecord ? 'travel_record_updated' : 'travel_record_added',\n          activity_description: editingRecord \n            ? `Updated travel record: ${data.destination}`\n            : `Added new travel record: ${data.destination}`,\n          performed_by: userId\n        });\n\n      setDrawerOpen(false);\n      setEditingRecord(null);\n      form.reset();\n    } catch (error) {\n      console.error('Error saving travel record:', error);\n    } finally {\n      setSaving(false);\n    }\n  };\n\n  const handleEdit = (record: TravelRecord) => {\n    setEditingRecord(record);\n    form.reset({\n      travel_type: record.travel_type as any,\n      destination: record.destination,\n      country: record.country,\n      purpose: record.purpose,\n      start_date: record.start_date,\n      end_date: record.end_date,\n      duration_days: record.duration_days,\n      accommodation: record.accommodation || '',\n      transportation: record.transportation || '',\n      visa_required: record.visa_required,\n      visa_status: record.visa_status as any || 'not-required',\n      passport_used: record.passport_used || '',\n      notes: record.notes || '',\n      expenses: record.expenses || 0\n    });\n    setDrawerOpen(true);\n  };\n\n  const handleDelete = async (recordId: string) => {\n    if (confirm('Are you sure you want to delete this travel record?')) {\n      const record = travelRecords.find(r => r.id === recordId);\n      setTravelRecords(travelRecords.filter(r => r.id !== recordId));\n      \n      // Log activity\n      if (record) {\n        await sb\n          .from('user_profile_activity')\n          .insert({\n            user_id: userId,\n            organization_id: orgId,\n            activity_type: 'travel_record_deleted',\n            activity_description: `Deleted travel record: ${record.destination}`,\n            performed_by: userId\n          });\n      }\n    }\n  };\n\n  const getTravelTypeIcon = (type: string) => {\n    const icons = {\n      business: Plane,\n      personal: Globe,\n      relocation: MapPin,\n      training: Calendar,\n      conference: Clock,\n      other: Plane\n    };\n    return icons[type as keyof typeof icons] || Plane;\n  };\n\n  const getTravelTypeColor = (type: string) => {\n    const colors = {\n      business: 'blue',\n      personal: 'green',\n      relocation: 'purple',\n      training: 'orange',\n      conference: 'red',\n      other: 'gray'\n    };\n    return colors[type as keyof typeof colors] || 'gray';\n  };\n\n  const getVisaStatusColor = (status?: string) => {\n    const colors = {\n      'not-required': 'secondary',\n      'pending': 'warning',\n      'approved': 'success',\n      'denied': 'destructive'\n    };\n    return colors[status as keyof typeof colors] || 'secondary';\n  };\n\n  const formatTravelType = (type: string) => {\n    return type.charAt(0).toUpperCase() + type.slice(1);\n  };\n\n  const formatVisaStatus = (status?: string) => {\n    if (!status) return 'Not Required';\n    return status.split('-').map(word => \n      word.charAt(0).toUpperCase() + word.slice(1)\n    ).join(' ');\n  };\n\n  const calculateTotalExpenses = () => {\n    return travelRecords.reduce((total, record) => total + (record.expenses || 0), 0);\n  };\n\n  const calculateTotalDays = () => {\n    return travelRecords.reduce((total, record) => total + record.duration_days, 0);\n  };\n\n  const filteredRecords = filterType === 'all' \n    ? travelRecords \n    : travelRecords.filter(record => record.travel_type === filterType);\n\n  // Sort records by start date (most recent first)\n  const sortedRecords = [...filteredRecords].sort((a, b) => \n    new Date(b.start_date).getTime() - new Date(a.start_date).getTime()\n  );\n\n  if (loading) {\n    return (\n      <div className=\"stack-lg\">\n        <div className=\"animate-pulse\">\n          <div className=\"h-icon-lg bg-secondary rounded mb-md\"></div>\n          <div className=\"stack-md\">\n            <div className=\"h-component-xl bg-secondary rounded\"></div>\n            <div className=\"h-component-xl bg-secondary rounded\"></div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"stack-lg\">\n      <div className=\"flex items-center justify-between\">\n        <h2 className=\"text-heading-4 text-heading-4\">Travel History</h2>\n        <Button \n          onClick={() => {\n            setEditingRecord(null);\n            form.reset();\n            setDrawerOpen(true);\n          }}\n          className=\"flex items-center gap-sm\"\n        >\n          <Plus className=\"h-icon-xs w-icon-xs\" />\n          Add Travel Record\n        </Button>\n      </div>\n\n      {/* Travel Summary */}\n      {travelRecords.length > 0 && (\n        <Card>\n          <div className=\"p-lg\">\n            <div className=\"flex items-center gap-sm mb-md\">\n              <Globe className=\"h-icon-sm w-icon-sm color-accent\" />\n              <h3 className=\"text-body text-heading-4\">Travel Summary</h3>\n            </div>\n            \n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-md\">\n              <div className=\"text-center\">\n                <div className=\"text-heading-3 text-heading-3 color-accent\">{travelRecords.length}</div>\n                <div className=\"text-body-sm color-muted\">Total Trips</div>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"text-heading-3 text-heading-3 color-success\">{calculateTotalDays()}</div>\n                <div className=\"text-body-sm color-muted\">Days Traveled</div>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"text-heading-3 text-heading-3 color-secondary\">\n                  ${calculateTotalExpenses().toLocaleString()}\n                </div>\n                <div className=\"text-body-sm color-muted\">Total Expenses</div>\n              </div>\n            </div>\n          </div>\n        </Card>\n      )}\n\n      {/* Filter Tabs */}\n      <div className=\"flex gap-sm flex-wrap\">\n        {['all', 'business', 'personal', 'training', 'conference', 'relocation', 'other'].map((type: any) => (\n          <Button\n            key={type}\n            variant={filterType === type ? 'primary' : 'outline'}\n           \n            onClick={() => setFilterType(type)}\n          >\n            {type === 'all' ? 'All Trips' : formatTravelType(type)}\n          </Button>\n        ))}\n      </div>\n\n      {sortedRecords.length === 0 ? (\n        <Card>\n          <div className=\"p-xl text-center\">\n            <Plane className=\"h-icon-2xl w-icon-2xl color-muted mx-auto mb-md\" />\n            <h3 className=\"text-body text-heading-4 mb-sm\">No Travel Records</h3>\n            <p className=\"color-muted mb-md\">\n              Keep track of your business trips, training, and personal travel history.\n            </p>\n            <Button \n              onClick={() => {\n                setEditingRecord(null);\n                form.reset();\n                setDrawerOpen(true);\n              }}\n            >\n              Add Your First Trip\n            </Button>\n          </div>\n        </Card>\n      ) : (\n        <div className=\"stack-md\">\n          {sortedRecords.map((record: any) => {\n            const IconComponent = getTravelTypeIcon(record.travel_type);\n            \n            return (\n              <Card key={record.id}>\n                <div className=\"p-lg\">\n                  <div className=\"flex items-start justify-between mb-md\">\n                    <div className=\"flex items-center gap-sm\">\n                      <div className={`h-icon-xl w-icon-xl bg-${getTravelTypeColor(record.travel_type)}-100 rounded-full flex items-center justify-center`}>\n                        <IconComponent className={`h-icon-sm w-icon-sm text-${getTravelTypeColor(record.travel_type)}-600`} />\n                      </div>\n                      <div>\n                        <h3 className=\"text-body text-heading-4\">{record.destination}</h3>\n                        <p className=\"text-body-sm color-muted\">{record.country}</p>\n                        <div className=\"flex items-center gap-sm mt-xs\">\n                          <Badge variant=\"outline\">\n                            {formatTravelType(record.travel_type)}\n                          </Badge>\n                          {record.visa_required && (\n                            <Badge variant={getVisaStatusColor(record.visa_status) as any}>\n                              Visa: {formatVisaStatus(record.visa_status)}\n                            </Badge>\n                          )}\n                        </div>\n                      </div>\n                    </div>\n                    <div className=\"flex items-center gap-sm\">\n                      <Button\n                        variant=\"outline\"\n                       \n                        onClick={() => handleEdit(record)}\n                      >\n                        <Edit className=\"h-icon-xs w-icon-xs\" />\n                      </Button>\n                      <Button\n                        variant=\"outline\"\n                       \n                        onClick={() => handleDelete(record.id)}\n                      >\n                        <Trash2 className=\"h-icon-xs w-icon-xs\" />\n                      </Button>\n                    </div>\n                  </div>\n\n                  <div className=\"mb-md\">\n                    <h4 className=\"text-body-sm form-label mb-xs\">Purpose</h4>\n                    <p className=\"text-body-sm color-muted\">{record.purpose}</p>\n                  </div>\n\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-md mb-md\">\n                    <div>\n                      <h4 className=\"text-body-sm form-label mb-xs\">Travel Dates</h4>\n                      <div className=\"flex items-center gap-xs text-body-sm color-muted\">\n                        <Calendar className=\"h-icon-xs w-icon-xs\" />\n                        {new Date(record.start_date).toLocaleDateString()} - {new Date(record.end_date).toLocaleDateString()}\n                      </div>\n                      <div className=\"flex items-center gap-xs text-body-sm color-muted mt-xs\">\n                        <Clock className=\"h-icon-xs w-icon-xs\" />\n                        {record.duration_days} day{record.duration_days !== 1 ? 's' : ''}\n                      </div>\n                    </div>\n\n                    {record.expenses && (\n                      <div>\n                        <h4 className=\"text-body-sm form-label mb-xs\">Expenses</h4>\n                        <p className=\"text-body-sm color-muted\">\n                          ${record.expenses.toLocaleString()}\n                        </p>\n                      </div>\n                    )}\n                  </div>\n\n                  {(record.accommodation || record.transportation) && (\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-md mb-md\">\n                      {record.accommodation && (\n                        <div>\n                          <h4 className=\"text-body-sm form-label mb-xs\">Accommodation</h4>\n                          <p className=\"text-body-sm color-muted\">{record.accommodation}</p>\n                        </div>\n                      )}\n                      \n                      {record.transportation && (\n                        <div>\n                          <h4 className=\"text-body-sm form-label mb-xs\">Transportation</h4>\n                          <p className=\"text-body-sm color-muted\">{record.transportation}</p>\n                        </div>\n                      )}\n                    </div>\n                  )}\n\n                  {record.passport_used && (\n                    <div className=\"mb-md\">\n                      <h4 className=\"text-body-sm form-label mb-xs\">Passport Used</h4>\n                      <div className=\"flex items-center gap-xs text-body-sm color-muted\">\n                        <CreditCard className=\"h-icon-xs w-icon-xs\" />\n                        {record.passport_used}\n                      </div>\n                    </div>\n                  )}\n\n                  {record.notes && (\n                    <div className=\"mb-md p-sm bg-secondary rounded-lg\">\n                      <h4 className=\"text-body-sm form-label mb-xs\">Notes</h4>\n                      <p className=\"text-body-sm color-muted\">{record.notes}</p>\n                    </div>\n                  )}\n                </div>\n              </Card>\n            );\n          })}\n        </div>\n      )}\n\n      <Drawer\n        open={drawerOpen}\n        onClose={() => setDrawerOpen(false)}\n        title={editingRecord ? 'Edit Travel Record' : 'Add New Travel Record'}\n        description={editingRecord ? 'Update travel record details' : 'Add a new travel record'}\n      >\n        <form onSubmit={form.handleSubmit(onSubmit)} className=\"stack-md\">\n          <Select\n            {...form.register('travel_type')}\n          >\n            <option value=\"business\">Business</option>\n            <option value=\"personal\">Personal</option>\n            <option value=\"training\">Training</option>\n            <option value=\"conference\">Conference</option>\n            <option value=\"relocation\">Relocation</option>\n            <option value=\"other\">Other</option>\n          </Select>\n\n          <div className=\"grid grid-cols-2 gap-md\">\n            <Input               label=\"Destination\"\n              placeholder=\"City, location\"\n              {...form.register('destination')}\n             \n            />\n\n            <Input               label=\"Country\"\n              placeholder=\"Country name\"\n              {...form.register('country')}\n             \n            />\n          </div>\n\n          <Input             label=\"Purpose\"\n            placeholder=\"Purpose of travel\"\n            {...form.register('purpose')}\n           \n          />\n\n          <div className=\"grid grid-cols-3 gap-md\">\n            <Input               label=\"Start Date\"\n              type=\"date\"\n              {...form.register('start_date')}\n             \n            />\n\n            <Input               label=\"End Date\"\n              type=\"date\"\n              {...form.register('end_date')}\n             \n            />\n\n            <Input               label=\"Duration (Days)\"\n              type=\"number\"\n              {...form.register('duration_days', { valueAsNumber: true })}\n             \n              disabled\n            />\n          </div>\n\n          <div className=\"grid grid-cols-2 gap-md\">\n            <Input               label=\"Accommodation\"\n              placeholder=\"Hotel, residence, etc.\"\n              {...form.register('accommodation')}\n             \n            />\n\n            <Input               label=\"Transportation\"\n              placeholder=\"Flight, car, ship, etc.\"\n              {...form.register('transportation')}\n             \n            />\n          </div>\n\n          <div className=\"grid grid-cols-2 gap-md\">\n            <div className=\"flex items-center cluster-sm\">\n              <input\n                type=\"checkbox\"\n                id=\"visa_required\"\n                {...form.register('visa_required')}\n                className=\"rounded border-border\"\n              />\n              <label htmlFor=\"visa_required\" className=\"text-body-sm form-label\">\n                Visa required for this trip\n              </label>\n            </div>\n\n            {form.watch('visa_required') && (\n              <Select\n                {...form.register('visa_status')}\n              >\n                <option value=\"pending\">Pending</option>\n                <option value=\"approved\">Approved</option>\n                <option value=\"denied\">Denied</option>\n              </Select>\n            )}\n          </div>\n\n          <div className=\"grid grid-cols-2 gap-md\">\n            <Input               label=\"Passport Used\"\n              placeholder=\"Passport number or type\"\n              {...form.register('passport_used')}\n             \n            />\n\n            <Input               label=\"Expenses ($)\"\n              type=\"number\"\n              placeholder=\"0\"\n              {...form.register('expenses', { valueAsNumber: true })}\n             \n            />\n          </div>\n\n          <Textarea\n            label=\"Notes\"\n            placeholder=\"Additional notes about the trip\"\n            {...form.register('notes')}\n           \n            rows={3}\n          />\n\n          <div className=\"flex justify-end gap-sm pt-md\">\n            <Button\n              type=\"button\"\n              variant=\"outline\"\n              onClick={() => setDrawerOpen(false)}\n            >\n              Cancel\n            </Button>\n            <Button type=\"submit\" loading={saving}>\n              <Save className=\"h-icon-xs w-icon-xs mr-sm\" />\n              {editingRecord ? 'Update' : 'Save'} Record\n            </Button>\n          </div>\n        </form>\n      </Drawer>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/profile/travel/TravelPreferencesClient.tsx","messages":[{"ruleId":"jsx-a11y/aria-props","severity":1,"message":"aria-: This attribute is an invalid ARIA attribute.","line":86,"column":158,"nodeType":"JSXAttribute","endLine":86,"endColumn":163}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\n\nimport React from \"react\";\n\nimport {\n  Badge,\n  Button,\n  Card,\n  Input,\n  UnifiedInput,\n  cn\n} from \"@ghxstship/ui\";\nimport { Edit } from \"lucide-react\";\nimport { useState, useEffect } from 'react'\nimport { createClient } from \"../../../../../lib/supabase/client\"\n\ninterface ClientProps {\n  className?: string\n}\n\nexport default function Client({ className }: ClientProps) {\n  const [data, setData] = useState<any[]>([])\n  const [loading, setLoading] = useState(true)\n\n  useEffect(() => {\n    let isMounted = true\n    const supabase = createClient()\n    async function fetchPreferences() {\n      try {\n        setLoading(true)\n        const { data: auth } = await supabase.auth.getUser()\n        let items: unknown[] = []\n        if (auth?.user) {\n          const { data: prefs, error } = await supabase\n            .from('user_travel_preferences')\n            .select('id, preference_name, status')\n            .eq('user_id', auth.user.id)\n            .limit(25)\n          if (!error && prefs) {\n            const mockData: Array<{ id: string; preference_name: string; status: string }> = [\n              { id: '1', preference_name: 'Window Seat', status: 'Active' },\n              { id: '2', preference_name: 'Aisle Seat', status: 'Active' },\n            ]\n            items = prefs.map((p: any) => ({\n              id: p.id,\n              name: p.preference_name || 'Preference',\n              status: p.status || 'active'\n            }))\n          }\n        }\n        if (isMounted) setData(items)\n      } catch (err) {\n        // console.error('TravelPreferencesClient fetch error:', err)\n        if (isMounted) setData([])\n      } finally {\n        if (isMounted) setLoading(false)\n      }\n    }\n    fetchPreferences()\n    return () => { isMounted = false }\n  }, [])\n\n  if (loading) {\n    return (\n      <div className={className}>\n        <Card className=\"p-md\">\n          <div className=\"animate-pulse space-y-md\">\n            <div className=\"h-icon-xs bg-secondary rounded w-1/4\"></div>\n            <div className=\"h-icon-xs bg-secondary rounded w-1/2\"></div>\n            <div className=\"h-icon-xs bg-secondary rounded w-3/4\"></div>\n          </div>\n        </Card>\n      </div>\n    )\n  }\n\n  return (\n    <div className={className}>\n      <div className=\"mb-md\">\n        <h1 className=\"text-heading-lg text-heading-3 mb-sm\">Travel Preferences</h1>\n        <p className=\"color-foreground-subtle\">Manage your travel and accommodation preferences</p>\n      </div>\n\n      <div className=\"mb-md\">\n        <Input onChange={(e: React.ChangeEvent<HTMLInputElement>) => {}} placeholder=\"Search travel preferences...\" className=\"w-full sm:w-auto sm:max-w-sm\" aria- />\n      </div>\n\n      <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-md\">\n        {data.map((item: any) => (\n          <Card key={item.id} className=\"p-md\">\n            <div className=\"flex flex-col sm:flex-row items-center justify-between\">\n              <div>\n                <h2 className=\"text-body text-heading-3\">{item.name}</h2>\n                <p className=\"text-body-sm color-foreground-subtle\">ID: {item.id}</p>\n              </div>\n              <div className=\"flex flex-col sm:flex-row items-center gap-sm\">\n                <Badge variant={item.status === 'active' ? 'default' : 'secondary'}>\n                  {item.status}\n                </Badge>\n                <Button variant=\"default\" size=\"sm\" onClick={() => console.log(\"Edit clicked\")}>Edit</Button>\n              </div>\n            </div>\n          </Card>\n        ))}\n      </div>\n    </div>\n  )\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/profile/travel/drawers/CreateTravelDrawer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/profile/travel/drawers/CreateTravelRecordDrawer.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'setFormErrors'. Either include it or remove the dependency array.","line":81,"column":5,"nodeType":"ArrayExpression","endLine":81,"endColumn":21,"suggestions":[{"desc":"Update the dependencies array to be: [isOpen, record, setFormErrors]","fix":{"range":[2015,2031],"text":"[isOpen, record, setFormErrors]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { X, Save, Plane, Calendar, CreditCard, Globe, ShieldCheck } from \"lucide-react\";\nimport { useEffect, useMemo, useState } from 'react';\nimport {\n Button,\n Input,\n Textarea,\n Select,\n SelectContent,\n SelectItem,\n SelectTrigger,\n SelectValue,\n Label,\n Checkbox,\n Badge\n} from '@ghxstship/ui';\nimport type { TravelRecord, TravelFormData, TravelType, VisaStatus, TravelStatus } from '../types';\nimport {\n TRAVEL_TYPE_LABELS,\n VISA_STATUS_LABELS,\n TRAVEL_STATUS_LABELS,\n COMMON_COUNTRIES,\n CURRENCIES,\n createEmptyFormData,\n validateTravelForm\n} from '../types';\n\ninterface CreateTravelRecordDrawerProps {\n isOpen: boolean;\n onClose: () => void;\n onSave: (data: TravelFormData) => Promise<void>;\n record?: TravelRecord | null;\n loading?: boolean;\n recentCountries?: string[];\n recentDestinations?: string[];\n}\n\nexport default function CreateTravelRecordDrawer({\n isOpen,\n onClose,\n onSave,\n record,\n loading = false,\n recentCountries = [],\n recentDestinations = []\n}: CreateTravelRecordDrawerProps) {\n const [formData, setFormData] = useState<TravelFormData>(createEmptyFormData());\n const [formErrors, setFormErrors] = useState<Record<string, string>({});\n\n useEffect(() => {\n if (!isOpen) {\n return;\n }\n\n if (record) {\n setFormData({\n travel_type: record.travel_type,\n destination: record.destination,\n country: record.country,\n purpose: record.purpose,\n start_date: record.start_date,\n end_date: record.end_date,\n accommodation: record.accommodation || '',\n transportation: record.transportation || '',\n visa_required: record.visa_required,\n visa_status: record.visa_status,\n passport_used: record.passport_used || '',\n notes: record.notes || '',\n expenses: record.expenses !== null && record.expenses !== undefined ? record.expenses.toString() : '',\n currency: record.currency || 'USD',\n status: record.status,\n booking_reference: record.booking_reference || '',\n emergency_contact: record.emergency_contact || ''\n });\n } else {\n setFormData(createEmptyFormData());\n }\n\n setFormErrors({});\n }, [isOpen, record]);\n\n const countryOptions = useMemo(() => {\n const combined = new Set<string>([\n ...recentCountries,\n ...COMMON_COUNTRIES,\n ]);\n return Array.from(combined).sort();\n }, [recentCountries]);\n\n const destinationSuggestions = useMemo(() => {\n return Array.from(new Set(recentDestinations)).slice(0, 10);\n }, [recentDestinations]);\n\n if (!isOpen) return null;\n\n const handleInputChange = (field: keyof TravelFormData, value: string | boolean) => {\n setFormData(prev => ({\n ...prev,\n [field]: value\n }));\n\n if (formErrors[field as string]) {\n setFormErrors(prev => {\n const next = { ...prev };\n delete next[field as string];\n return next;\n });\n }\n };\n\n const handleSubmit = async () => {\n const errors = validateTravelForm(formData);\n if (Object.keys(errors).length > 0) {\n setFormErrors(errors);\n return;\n }\n\n await onSave(formData);\n };\n\n return (\n <div className=\"fixed inset-0 z-50 overflow-hidden\">\n <div className=\"absolute inset-0 bg-black/50\" onClick={onClose} />\n <div className=\"absolute right-0 top-0 h-full w-full max-w-2xl bg-background shadow-xl\">\n <div className=\"flex h-full flex-col\">\n {/* Header */}\n <div className=\"flex items-center justify-between border-b p-lg\">\n <div>\n <h2 className=\"text-xl font-semibold\">\n {record ? 'Edit Travel Record' : 'Create Travel Record'}\n </h2>\n <p className=\"text-sm text-muted-foreground\">\n {record ? 'Update the details of this travel record' : 'Log a new trip with full travel details'}\n </p>\n </div>\n <Button variant=\"ghost\" size=\"sm\" onClick={onClose}>\n <X className=\"h-icon-xs w-icon-xs\" />\n </Button>\n </div>\n\n {/* Content */}\n <div className=\"flex-1 overflow-y-auto p-lg\">\n <div className=\"grid grid-cols-1 gap-lg\">\n {/* Trip Overview */}\n <div className=\"space-y-md\">\n <div className=\"flex items-center gap-xs\">\n <Plane className=\"h-icon-sm w-icon-sm text-primary\" />\n <h3 className=\"font-medium\">Trip Overview</h3>\n </div>\n <div className=\"grid grid-cols-1 md:grid-cols-2 gap-md\">\n <div>\n <Label htmlFor=\"travel_type\">Travel Type</Label>\n <Select\n value={formData.travel_type}\n onChange={(e) => handleInputChange('travel_type', e.target.value as TravelType)}\n disabled={loading}\n >\n <SelectTrigger>\n <SelectValue />\n </SelectTrigger>\n <SelectContent>\n {Object.entries(TRAVEL_TYPE_LABELS).map(([value, label]) => (\n <SelectItem key={value} value={value}>\n {label}\n </SelectItem>\n ))}\n </SelectContent>\n </Select>\n </div>\n <div>\n <Label htmlFor=\"status\">Travel Status</Label>\n <Select\n value={formData.status}\n onChange={(e) => handleInputChange('status', e.target.value as TravelStatus)}\n disabled={loading}\n >\n <SelectTrigger>\n <SelectValue />\n </SelectTrigger>\n <SelectContent>\n {Object.entries(TRAVEL_STATUS_LABELS).map(([value, label]) => (\n <SelectItem key={value} value={value}>\n {label}\n </SelectItem>\n ))}\n </SelectContent>\n </Select>\n </div>\n </div>\n\n <div className=\"grid grid-cols-1 md:grid-cols-2 gap-md\">\n <div>\n <Label htmlFor=\"destination\">Destination</Label>\n <Input\n \n placeholder=\"City or location\"\n value={formData.destination}\n onChange={(event) => handleInputChange('destination', event.target.value)}\n disabled={loading}\n list=\"travel-destination-suggestions\"\n />\n {formErrors.destination && (\n <p className=\"text-sm text-destructive\">{formErrors.destination}</p>\n )}\n {destinationSuggestions.length > 0 && (\n <datalist >\n {destinationSuggestions.map(destination => (\n <option key={destination} value={destination} />\n ))}\n </datalist>\n )}\n </div>\n <div>\n <Label htmlFor=\"country\">Country</Label>\n <Select\n value={formData.country || ''}\n onChange={(e) => handleInputChange('country', value)}\n disabled={loading}\n >\n <SelectTrigger>\n <SelectValue placeholder=\"Select country\" />\n </SelectTrigger>\n <SelectContent>\n {countryOptions.map(country => (\n <SelectItem key={country} value={country}>\n {country}\n </SelectItem>\n ))}\n </SelectContent>\n </Select>\n {formErrors.country && (\n <p className=\"text-sm text-destructive\">{formErrors.country}</p>\n )}\n </div>\n </div>\n\n <div>\n <Label htmlFor=\"purpose\">Purpose</Label>\n <Input\n \n placeholder=\"Trip purpose\"\n value={formData.purpose}\n onChange={(event) => handleInputChange('purpose', event.target.value)}\n disabled={loading}\n />\n {formErrors.purpose && (\n <p className=\"text-sm text-destructive\">{formErrors.purpose}</p>\n )}\n </div>\n </div>\n\n {/* Travel Dates */}\n <div className=\"space-y-md\">\n <div className=\"flex items-center gap-xs\">\n <Calendar className=\"h-icon-sm w-icon-sm text-primary\" />\n <h3 className=\"font-medium\">Travel Dates</h3>\n </div>\n <div className=\"grid grid-cols-1 md:grid-cols-2 gap-md\">\n <div>\n <Label htmlFor=\"start_date\">Start Date</Label>\n <Input\n \n type=\"date\"\n value={formData.start_date}\n onChange={(event) => handleInputChange('start_date', event.target.value)}\n disabled={loading}\n />\n {formErrors.start_date && (\n <p className=\"text-sm text-destructive\">{formErrors.start_date}</p>\n )}\n </div>\n <div>\n <Label htmlFor=\"end_date\">End Date</Label>\n <Input\n \n type=\"date\"\n value={formData.end_date}\n onChange={(event) => handleInputChange('end_date', event.target.value)}\n disabled={loading}\n />\n {formErrors.end_date && (\n <p className=\"text-sm text-destructive\">{formErrors.end_date}</p>\n )}\n </div>\n </div>\n </div>\n\n {/* Travel Logistics */}\n <div className=\"space-y-md\">\n <div className=\"flex items-center gap-xs\">\n <Globe className=\"h-icon-sm w-icon-sm text-primary\" />\n <h3 className=\"font-medium\">Travel Logistics</h3>\n </div>\n <div className=\"grid grid-cols-1 md:grid-cols-2 gap-md\">\n <div>\n <Label htmlFor=\"accommodation\">Accommodation</Label>\n <Input\n \n placeholder=\"Hotel, Airbnb, etc.\"\n value={formData.accommodation}\n onChange={(event) => handleInputChange('accommodation', event.target.value)}\n disabled={loading}\n />\n </div>\n <div>\n <Label htmlFor=\"transportation\">Transportation</Label>\n <Input\n \n placeholder=\"Flight, car, train, etc.\"\n value={formData.transportation}\n onChange={(event) => handleInputChange('transportation', event.target.value)}\n disabled={loading}\n />\n </div>\n </div>\n <div className=\"grid grid-cols-1 md:grid-cols-2 gap-md\">\n <div>\n <Label htmlFor=\"booking_reference\">Booking Reference</Label>\n <Input\n \n placeholder=\"Booking confirmation number\"\n value={formData.booking_reference}\n onChange={(event) => handleInputChange('booking_reference', event.target.value)}\n disabled={loading}\n />\n </div>\n <div>\n <Label htmlFor=\"emergency_contact\">Emergency Contact</Label>\n <Input\n \n placeholder=\"Name, phone, or email\"\n value={formData.emergency_contact}\n onChange={(event) => handleInputChange('emergency_contact', event.target.value)}\n disabled={loading}\n />\n </div>\n </div>\n </div>\n\n {/* Visa & Passport */}\n <div className=\"space-y-md\">\n <div className=\"flex items-center gap-xs\">\n <ShieldCheck className=\"h-icon-sm w-icon-sm text-primary\" />\n <h3 className=\"font-medium\">Visa & Passport</h3>\n </div>\n <div className=\"grid grid-cols-1 md:grid-cols-2 gap-md\">\n <div className=\"flex items-center gap-xs\">\n <Checkbox\n \n checked={formData.visa_required}\n onCheckedChange={(checked) => handleInputChange('visa_required', !!checked)}\n disabled={loading}\n />\n <Label htmlFor=\"visa_required\">Visa required for this trip</Label>\n </div>\n {formData.visa_required && (\n <div>\n <Label htmlFor=\"visa_status\">Visa Status</Label>\n <Select\n value={formData.visa_status}\n onChange={(e) => handleInputChange('visa_status', e.target.value as VisaStatus)}\n disabled={loading}\n >\n <SelectTrigger>\n <SelectValue />\n </SelectTrigger>\n <SelectContent>\n {Object.entries(VISA_STATUS_LABELS).map(([value, label]) => (\n <SelectItem key={value} value={value}>\n {label}\n </SelectItem>\n ))}\n </SelectContent>\n </Select>\n </div>\n )}\n </div>\n <div>\n <Label htmlFor=\"passport_used\">Passport Used</Label>\n <Input\n \n placeholder=\"Passport number or descriptor\"\n value={formData.passport_used}\n onChange={(event) => handleInputChange('passport_used', event.target.value)}\n disabled={loading}\n />\n </div>\n </div>\n\n {/* Expenses */}\n <div className=\"space-y-md\">\n <div className=\"flex items-center gap-xs\">\n <CreditCard className=\"h-icon-sm w-icon-sm text-primary\" />\n <h3 className=\"font-medium\">Travel Expenses</h3>\n </div>\n <div className=\"grid grid-cols-1 md:grid-cols-2 gap-md\">\n <div>\n <Label htmlFor=\"expenses\">Total Expenses</Label>\n <Input\n \n type=\"number\"\n min=\"0\"\n placeholder=\"0\"\n value={formData.expenses}\n onChange={(event) => handleInputChange('expenses', event.target.value)}\n disabled={loading}\n />\n {formErrors.expenses && (\n <p className=\"text-sm text-destructive\">{formErrors.expenses}</p>\n )}\n </div>\n <div>\n <Label htmlFor=\"currency\">Currency</Label>\n <Select\n value={formData.currency}\n onChange={(e) => handleInputChange('currency', value)}\n disabled={loading}\n >\n <SelectTrigger>\n <SelectValue />\n </SelectTrigger>\n <SelectContent>\n {CURRENCIES.map(currency => (\n <SelectItem key={currency.code} value={currency.code}>\n {currency.code} — {currency.name}\n </SelectItem>\n ))}\n </SelectContent>\n </Select>\n </div>\n </div>\n </div>\n\n {/* Notes */}\n <div className=\"space-y-xs\">\n <Label htmlFor=\"notes\">Notes</Label>\n <Textarea\n \n placeholder=\"Additional notes, travel instructions, or important details\"\n value={formData.notes}\n onChange={(event) => handleInputChange('notes', event.target.value)}\n disabled={loading}\n rows={4}\n />\n </div>\n </div>\n </div>\n\n {/* Footer */}\n <div className=\"border-t p-lg\">\n <div className=\"flex items-center justify-end gap-sm\">\n <Button variant=\"outline\" onClick={onClose} disabled={loading}>\n Cancel\n </Button>\n <Button onClick={handleSubmit} disabled={loading}>\n <Save className=\"h-icon-xs w-icon-xs mr-2\" />\n {loading ? 'Saving...' : record ? 'Update Trip' : 'Create Trip'}\n </Button>\n </div>\n </div>\n </div>\n </div>\n </div>\n );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/profile/travel/lib/travelService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/profile/travel/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/profile/travel/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/profile/travel/views/TravelAnalyticsView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/profile/travel/views/TravelCalendarView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/profile/travel/views/TravelGridView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/profile/travel/views/TravelKanbanView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/profile/travel/views/TravelListView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/profile/travel/views/TravelTableView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/profile/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/profile/uniform/CreateUniformItemClient.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/profile/uniform/UniformClient.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/profile/uniform/drawers/BulkActionsDrawer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/profile/uniform/drawers/CreateEditUniformSizingDrawer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/profile/uniform/drawers/CreateUniformDrawer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/profile/uniform/drawers/ExportDrawer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/profile/uniform/lib/uniformSizingService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/profile/uniform/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/profile/uniform/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/profile/uniform/views/UniformSizingAnalyticsView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/profile/uniform/views/UniformSizingCalendarView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/profile/uniform/views/UniformSizingGridView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/profile/uniform/views/UniformSizingKanbanView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/profile/uniform/views/UniformSizingListView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/profile/uniform/views/UniformSizingTableView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/profile/views/ProfileAnalyticsView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/profile/views/ProfileCalendarView.tsx","messages":[{"ruleId":"@next/next/no-img-element","severity":1,"message":"Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` or a custom image loader to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","line":105,"column":2,"nodeType":"JSXOpeningElement","endLine":105,"endColumn":58}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { Calendar, User } from \"lucide-react\";\nimport { Card, Badge, Avatar } from '@ghxstship/ui';\nimport type { UserProfile, FieldConfig } from '../types';\n\ninterface ProfileCalendarViewProps {\n profiles: UserProfile[];\n loading: boolean;\n selectedIds: string[];\n onSelectionChange: (ids: string[]) => void;\n onEdit: (profile: UserProfile) => void;\n fieldConfig: FieldConfig[];\n}\n\nexport default function ProfileCalendarView({\n profiles,\n loading,\n selectedIds,\n onSelectionChange,\n onEdit,\n fieldConfig\n}: ProfileCalendarViewProps) {\n if (loading) {\n return (\n <Card className=\"p-xl text-center\">\n <div className=\"animate-pulse space-y-md\">\n <div className=\"w-icon-2xl h-icon-2xl bg-muted rounded-full mx-auto\" />\n <div className=\"w-container-xs h-icon-xs bg-muted rounded mx-auto\" />\n <div className=\"w-component-xl h-3 bg-muted rounded mx-auto\" />\n </div>\n </Card>\n );\n }\n\n // Group profiles by hire date for calendar view\n const profilesByDate = profiles.reduce((acc, profile) => {\n if (profile.hire_date) {\n const date = new Date(profile.hire_date).toDateString();\n if (!acc[date]) {\n acc[date] = [];\n }\n acc[date].push(profile);\n }\n return acc;\n }, {} as Record<string, UserProfile[]>);\n\n const sortedDates = Object.keys(profilesByDate).sort((a, b) => \n new Date(b).getTime() - new Date(a).getTime()\n );\n\n return (\n <div className=\"space-y-lg\">\n <div className=\"flex items-center gap-sm mb-lg\">\n <Calendar className=\"h-icon-sm w-icon-sm\" />\n <h2 className=\"text-lg font-semibold\">Profiles by Hire Date</h2>\n </div>\n\n {sortedDates.length === 0 ? (\n <Card className=\"p-xl text-center\">\n <Calendar className=\"h-icon-2xl w-icon-2xl text-muted-foreground mx-auto mb-md\" />\n <h3 className=\"text-lg font-semibold mb-sm\">No hire dates available</h3>\n <p className=\"text-muted-foreground\">\n Profiles with hire dates will appear here in a timeline view.\n </p>\n </Card>\n ) : (\n <div className=\"space-y-md\">\n {sortedDates.map((dateString) => {\n const date = new Date(dateString);\n const dateProfiles = profilesByDate[dateString];\n \n return (\n <Card key={dateString} className=\"p-md\">\n <div className=\"flex items-center gap-md mb-md\">\n <div className=\"flex-shrink-0\">\n <div className=\"w-icon-2xl h-icon-2xl bg-primary/10 rounded-full flex items-center justify-center\">\n <Calendar className=\"h-icon-md w-icon-md text-primary\" />\n </div>\n </div>\n <div>\n <h3 className=\"font-semibold\">\n {date.toLocaleDateString('en-US', { \n weekday: 'long',\n year: 'numeric',\n month: 'long',\n day: 'numeric'\n })}\n </h3>\n <p className=\"text-sm text-muted-foreground\">\n {dateProfiles.length} profile{dateProfiles.length !== 1 ? 's' : ''} hired\n </p>\n </div>\n </div>\n\n <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-md\">\n {dateProfiles.map((profile) => (\n <div\n key={profile.id}\n className=\"flex items-center gap-sm p-sm rounded-lg border cursor-pointer hover:bg-muted/50 transition-colors\"\n onClick={() => onEdit(profile)}\n >\n <Avatar className=\"h-icon-lg w-icon-lg\">\n {profile.avatar_url ? (\n <img src={profile.avatar_url} alt={profile.full_name} />\n ) : (\n <div className=\"flex items-center justify-center h-full w-full bg-primary/10 text-primary font-semibold text-xs\">\n {profile.full_name.split(' ').map(n => n[0]).join('').toUpperCase()}\n </div>\n )}\n </Avatar>\n <div className=\"flex-1 min-w-0\">\n <p className=\"font-medium text-sm truncate\">{profile.full_name}</p>\n <p className=\"text-xs text-muted-foreground truncate\">\n {profile.position} • {profile.department}\n </p>\n </div>\n <Badge \n variant={profile.status === 'active' ? 'success' : 'secondary'}\n size=\"sm\"\n >\n {profile.status}\n </Badge>\n </div>\n ))}\n </div>\n </Card>\n );\n })}\n </div>\n )}\n </div>\n );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/profile/views/ProfileGridView.tsx","messages":[{"ruleId":"@next/next/no-img-element","severity":1,"message":"Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` or a custom image loader to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","line":178,"column":2,"nodeType":"JSXOpeningElement","endLine":178,"endColumn":58}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { User, Mail, Phone, MapPin, Calendar, MoreHorizontal, Edit, Eye, Trash2, UserCheck, Building } from \"lucide-react\";\nimport { useState } from 'react';\nimport {\n  Avatar,\n  Badge,\n  Button,\n  Card,\n  Checkbox,\n  Dropdown,\n  DropdownItem,\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger\n} from \"@ghxstship/ui\";\n\nimport type { UserProfile, FieldConfig } from '../types';\n\ninterface ProfileGridViewProps {\n profiles: UserProfile[];\n loading: boolean;\n selectedIds: string[];\n onSelectionChange: (ids: string[]) => void;\n onEdit: (profile: UserProfile) => void;\n fieldConfig: FieldConfig[];\n}\n\nexport default function ProfileGridView({\n profiles,\n loading,\n selectedIds,\n onSelectionChange,\n onEdit,\n fieldConfig\n}: ProfileGridViewProps) {\n const [hoveredId, setHoveredId] = useState<string | null>(null);\n\n const handleSelectProfile = (profileId: string, checked: boolean) => {\n if (checked) {\n onSelectionChange([...selectedIds, profileId]);\n } else {\n onSelectionChange(selectedIds.filter(id => id !== profileId));\n }\n };\n\n const handleSelectAll = (checked: boolean) => {\n if (checked) {\n onSelectionChange(profiles.map(p => p.id));\n } else {\n onSelectionChange([]);\n }\n };\n\n const getStatusColor = (status: string) => {\n switch (status) {\n case 'active':\n return 'success';\n case 'inactive':\n return 'destructive';\n case 'pending':\n return 'warning';\n case 'suspended':\n return 'destructive';\n default:\n return 'secondary';\n }\n };\n\n const getCompletionColor = (percentage: number) => {\n if (percentage >= 90) return 'text-green-600';\n if (percentage >= 70) return 'text-yellow-600';\n return 'text-red-600';\n };\n\n if (loading) {\n return (\n <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-md\">\n {Array.from({ length: 8 }).map((_, i) => (\n <Card key={i} className=\"p-lg animate-pulse\">\n <div className=\"flex items-start gap-md\">\n <div className=\"w-icon-2xl h-icon-2xl bg-muted rounded-full\" />\n <div className=\"flex-1 space-y-sm\">\n <div className=\"h-icon-xs bg-muted rounded w-3/4\" />\n <div className=\"h-3 bg-muted rounded w-1/2\" />\n <div className=\"h-3 bg-muted rounded w-2/3\" />\n </div>\n </div>\n </Card>\n ))}\n </div>\n );\n }\n\n if (profiles.length === 0) {\n return (\n <Card className=\"p-xl text-center\">\n <User className=\"h-icon-2xl w-icon-2xl text-muted-foreground mx-auto mb-md\" />\n <h3 className=\"text-lg font-semibold mb-sm\">No profiles found</h3>\n <p className=\"text-muted-foreground mb-lg\">\n Get started by creating your first profile or adjust your filters.\n </p>\n <Button>Create Profile</Button>\n </Card>\n );\n }\n\n return (\n <div className=\"space-y-md\">\n {/* Header with bulk selection */}\n <div className=\"flex items-center gap-sm\">\n <Checkbox\n checked={selectedIds.length === profiles.length}\n onCheckedChange={handleSelectAll}\n indeterminate={selectedIds.length > 0 && selectedIds.length < profiles.length}\n />\n <span className=\"text-sm text-muted-foreground\">\n {selectedIds.length > 0 ? `${selectedIds.length} selected` : 'Select all'}\n </span>\n </div>\n\n {/* Grid */}\n <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-md\">\n {profiles.map((profile) => (\n <Card\n key={profile.id}\n className={`p-lg transition-all duration-200 hover:shadow-md cursor-pointer ${\n selectedIds.includes(profile.id) ? 'ring-2 ring-primary' : ''\n }`}\n onMouseEnter={() => setHoveredId(profile.id)}\n onMouseLeave={() => setHoveredId(null)}\n >\n {/* Header with selection and actions */}\n <div className=\"flex items-start justify-between mb-md\">\n <Checkbox\n checked={selectedIds.includes(profile.id)}\n onCheckedChange={(checked) => handleSelectProfile(profile.id, checked as boolean)}\n onClick={(e) => e.stopPropagation()}\n />\n \n <DropdownMenu>\n <DropdownMenuTrigger asChild>\n <Button\n variant=\"ghost\"\n size=\"sm\"\n className={`h-icon-lg w-icon-lg p-0 transition-opacity ${\n hoveredId === profile.id ? 'opacity-100' : 'opacity-0'\n }`}\n onClick={(e) => e.stopPropagation()}\n >\n <MoreHorizontal className=\"h-icon-xs w-icon-xs\" />\n </Button>\n </DropdownMenuTrigger>\n <DropdownMenuContent align=\"end\">\n <DropdownMenuItem onClick={() => onEdit(profile)}>\n <Eye className=\"h-icon-xs w-icon-xs mr-sm\" />\n View Details\n </DropdownMenuItem>\n <DropdownMenuItem onClick={() => onEdit(profile)}>\n <Edit className=\"h-icon-xs w-icon-xs mr-sm\" />\n Edit Profile\n </DropdownMenuItem>\n <DropdownMenuItem className=\"text-destructive\">\n <Trash2 className=\"h-icon-xs w-icon-xs mr-sm\" />\n Delete Profile\n </DropdownMenuItem>\n </DropdownMenuContent>\n </DropdownMenu>\n </div>\n\n {/* Profile Avatar and Basic Info */}\n <div className=\"flex items-start gap-md mb-md\">\n <Avatar className=\"h-icon-2xl w-icon-2xl\">\n {profile.avatar_url ? (\n <img src={profile.avatar_url} alt={profile.full_name} />\n ) : (\n <div className=\"flex items-center justify-center h-full w-full bg-primary/10 text-primary font-semibold\">\n {profile.full_name.split(' ').map(n => n[0]).join('').toUpperCase()}\n </div>\n )}\n </Avatar>\n \n <div className=\"flex-1 min-w-0\">\n <h3 className=\"font-semibold text-sm truncate\" title={profile.full_name}>\n {profile.full_name}\n </h3>\n <p className=\"text-xs text-muted-foreground truncate\" title={profile.position}>\n {profile.position || 'No position set'}\n </p>\n <Badge \n variant={getStatusColor(profile.status) as unknown} \n size=\"sm\" \n className=\"mt-xs\"\n >\n {profile.status}\n </Badge>\n </div>\n </div>\n\n {/* Contact Information */}\n <div className=\"space-y-xs mb-md\">\n <div className=\"flex items-center gap-xs text-xs text-muted-foreground\">\n <Mail className=\"h-3 w-3 flex-shrink-0\" />\n <span className=\"truncate\" title={profile.email}>\n {profile.email}\n </span>\n </div>\n \n {profile.phone && (\n <div className=\"flex items-center gap-xs text-xs text-muted-foreground\">\n <Phone className=\"h-3 w-3 flex-shrink-0\" />\n <span>{profile.phone}</span>\n </div>\n )}\n \n {profile.department && (\n <div className=\"flex items-center gap-xs text-xs text-muted-foreground\">\n <Building className=\"h-3 w-3 flex-shrink-0\" />\n <span className=\"truncate\">{profile.department}</span>\n </div>\n )}\n </div>\n\n {/* Profile Completion */}\n <div className=\"space-y-xs mb-md\">\n <div className=\"flex items-center justify-between text-xs\">\n <span className=\"text-muted-foreground\">Profile Completion</span>\n <span className={`font-medium ${getCompletionColor(profile.completion_percentage)}`}>\n {profile.completion_percentage}%\n </span>\n </div>\n <div className=\"w-full bg-muted rounded-full h-1.5\">\n <div \n className=\"bg-primary h-1.5 rounded-full transition-all duration-300\" \n style={{ width: `${profile.completion_percentage}%` }}\n />\n </div>\n </div>\n\n {/* Additional Stats */}\n <div className=\"grid grid-cols-2 gap-md text-center\">\n <div>\n <p className=\"text-xs font-medium\">{profile.certifications_count || 0}</p>\n <p className=\"text-xs text-muted-foreground\">Certifications</p>\n </div>\n <div>\n <p className=\"text-xs font-medium\">{profile.endorsements_count || 0}</p>\n <p className=\"text-xs text-muted-foreground\">Endorsements</p>\n </div>\n </div>\n\n {/* Last Activity */}\n {profile.last_login && (\n <div className=\"mt-md pt-md border-t border-border\">\n <div className=\"flex items-center gap-xs text-xs text-muted-foreground\">\n <Calendar className=\"h-3 w-3\" />\n <span>\n Last login: {new Date(profile.last_login).toLocaleDateString()}\n </span>\n </div>\n </div>\n )}\n </Card>\n ))}\n </div>\n\n {/* Load More / Pagination */}\n {profiles.length > 0 && (\n <div className=\"text-center pt-lg\">\n <Button variant=\"outline\">\n Load More Profiles\n </Button>\n </div>\n )}\n </div>\n );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/profile/views/ProfileKanbanView.tsx","messages":[{"ruleId":"@next/next/no-img-element","severity":1,"message":"Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` or a custom image loader to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","line":79,"column":2,"nodeType":"JSXOpeningElement","endLine":79,"endColumn":58}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { User } from \"lucide-react\";\nimport { Card, Badge, Avatar } from '@ghxstship/ui';\nimport type { UserProfile, FieldConfig } from '../types';\n\ninterface ProfileKanbanViewProps {\n profiles: UserProfile[];\n loading: boolean;\n selectedIds: string[];\n onSelectionChange: (ids: string[]) => void;\n onEdit: (profile: UserProfile) => void;\n fieldConfig: FieldConfig[];\n}\n\nexport default function ProfileKanbanView({\n profiles,\n loading,\n selectedIds,\n onSelectionChange,\n onEdit,\n fieldConfig\n}: ProfileKanbanViewProps) {\n const columns = [\n { id: 'pending', title: 'Pending', status: 'pending' },\n { id: 'active', title: 'Active', status: 'active' },\n { id: 'inactive', title: 'Inactive', status: 'inactive' },\n ];\n\n const getProfilesByStatus = (status: string) => {\n return profiles.filter(profile => profile.status === status);\n };\n\n if (loading) {\n return (\n <div className=\"grid grid-cols-1 md:grid-cols-3 gap-lg\">\n {columns.map((column) => (\n <div key={column.id} className=\"space-y-md\">\n <h3 className=\"font-semibold\">{column.title}</h3>\n <div className=\"space-y-sm\">\n {Array.from({ length: 3 }).map((_, i) => (\n <Card key={i} className=\"p-md animate-pulse\">\n <div className=\"flex items-center gap-sm mb-sm\">\n <div className=\"w-icon-lg h-icon-lg bg-muted rounded-full\" />\n <div className=\"w-component-lg h-icon-xs bg-muted rounded\" />\n </div>\n <div className=\"w-full h-3 bg-muted rounded\" />\n </Card>\n ))}\n </div>\n </div>\n ))}\n </div>\n );\n }\n\n return (\n <div className=\"grid grid-cols-1 md:grid-cols-3 gap-lg\">\n {columns.map((column) => {\n const columnProfiles = getProfilesByStatus(column.status);\n \n return (\n <div key={column.id} className=\"space-y-md\">\n <div className=\"flex items-center justify-between\">\n <h3 className=\"font-semibold\">{column.title}</h3>\n <Badge variant=\"outline\">{columnProfiles.length}</Badge>\n </div>\n \n <div className=\"space-y-sm\">\n {columnProfiles.map((profile) => (\n <Card\n key={profile.id}\n className=\"p-md cursor-pointer hover:shadow-sm transition-shadow\"\n onClick={() => onEdit(profile)}\n >\n <div className=\"flex items-center gap-sm mb-sm\">\n <Avatar className=\"h-icon-lg w-icon-lg\">\n {profile.avatar_url ? (\n <img src={profile.avatar_url} alt={profile.full_name} />\n ) : (\n <div className=\"flex items-center justify-center h-full w-full bg-primary/10 text-primary font-semibold text-xs\">\n {profile.full_name.split(' ').map(n => n[0]).join('').toUpperCase()}\n </div>\n )}\n </Avatar>\n <div className=\"flex-1 min-w-0\">\n <p className=\"font-medium text-sm truncate\">{profile.full_name}</p>\n <p className=\"text-xs text-muted-foreground truncate\">{profile.position}</p>\n </div>\n </div>\n \n <div className=\"space-y-xs\">\n <div className=\"flex items-center justify-between text-xs\">\n <span className=\"text-muted-foreground\">Completion</span>\n <span className=\"font-medium\">{profile.completion_percentage}%</span>\n </div>\n <div className=\"w-full bg-muted rounded-full h-1\">\n <div \n className=\"bg-primary h-1 rounded-full transition-all duration-300\" \n style={{ width: `${profile.completion_percentage}%` }}\n />\n </div>\n </div>\n </Card>\n ))}\n \n {columnProfiles.length === 0 && (\n <Card className=\"p-md text-center text-muted-foreground\">\n <User className=\"h-icon-lg w-icon-lg mx-auto mb-sm opacity-50\" />\n <p className=\"text-sm\">No {column.title.toLowerCase()} profiles</p>\n </Card>\n )}\n </div>\n </div>\n );\n })}\n </div>\n );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/profile/views/ProfileListView.tsx","messages":[{"ruleId":"@next/next/no-img-element","severity":1,"message":"Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` or a custom image loader to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","line":128,"column":2,"nodeType":"JSXOpeningElement","endLine":128,"endColumn":58}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { User, Mail, Phone, Building, Calendar, Edit, Eye, MoreHorizontal } from \"lucide-react\";\nimport {\n Card,\n Badge,\n Button,\n Avatar,\n Checkbox\n} from '@ghxstship/ui';\n\nimport type { UserProfile, FieldConfig } from '../types';\n\ninterface ProfileListViewProps {\n profiles: UserProfile[];\n loading: boolean;\n selectedIds: string[];\n onSelectionChange: (ids: string[]) => void;\n onEdit: (profile: UserProfile) => void;\n fieldConfig: FieldConfig[];\n}\n\nexport default function ProfileListView({\n profiles,\n loading,\n selectedIds,\n onSelectionChange,\n onEdit,\n fieldConfig\n}: ProfileListViewProps) {\n const handleSelectProfile = (profileId: string, checked: boolean) => {\n if (checked) {\n onSelectionChange([...selectedIds, profileId]);\n } else {\n onSelectionChange(selectedIds.filter(id => id !== profileId));\n }\n };\n\n const handleSelectAll = (checked: boolean) => {\n if (checked) {\n onSelectionChange(profiles.map(p => p.id));\n } else {\n onSelectionChange([]);\n }\n };\n\n const getStatusColor = (status: string) => {\n switch (status) {\n case 'active':\n return 'success';\n case 'inactive':\n return 'destructive';\n case 'pending':\n return 'warning';\n case 'suspended':\n return 'destructive';\n default:\n return 'secondary';\n }\n };\n\n if (loading) {\n return (\n <div className=\"space-y-sm\">\n {Array.from({ length: 10 }).map((_, i) => (\n <Card key={i} className=\"p-md animate-pulse\">\n <div className=\"flex items-center gap-md\">\n <div className=\"w-icon-xl h-icon-xl bg-muted rounded-full\" />\n <div className=\"flex-1 space-y-sm\">\n <div className=\"h-icon-xs bg-muted rounded w-1/4\" />\n <div className=\"h-3 bg-muted rounded w-1/3\" />\n </div>\n <div className=\"w-component-lg h-icon-md bg-muted rounded\" />\n </div>\n </Card>\n ))}\n </div>\n );\n }\n\n if (profiles.length === 0) {\n return (\n <Card className=\"p-xl text-center\">\n <User className=\"h-icon-2xl w-icon-2xl text-muted-foreground mx-auto mb-md\" />\n <h3 className=\"text-lg font-semibold mb-sm\">No profiles found</h3>\n <p className=\"text-muted-foreground mb-lg\">\n Get started by creating your first profile or adjust your filters.\n </p>\n <Button>Create Profile</Button>\n </Card>\n );\n }\n\n return (\n <div className=\"space-y-md\">\n {/* Header with bulk selection */}\n <div className=\"flex items-center gap-sm\">\n <Checkbox\n checked={selectedIds.length === profiles.length}\n onCheckedChange={handleSelectAll}\n indeterminate={selectedIds.length > 0 && selectedIds.length < profiles.length}\n />\n <span className=\"text-sm text-muted-foreground\">\n {selectedIds.length > 0 ? `${selectedIds.length} selected` : 'Select all'}\n </span>\n </div>\n\n {/* List */}\n <div className=\"space-y-sm\">\n {profiles.map((profile) => (\n <Card\n key={profile.id}\n className={`p-md transition-all duration-200 hover:shadow-sm cursor-pointer ${\n selectedIds.includes(profile.id) ? 'ring-2 ring-primary' : ''\n }`}\n >\n <div className=\"flex items-center gap-md\">\n {/* Selection Checkbox */}\n <Checkbox\n checked={selectedIds.includes(profile.id)}\n onCheckedChange={(checked) => handleSelectProfile(profile.id, checked as boolean)}\n onClick={(e) => e.stopPropagation()}\n />\n\n {/* Avatar */}\n <Avatar className=\"h-icon-xl w-icon-xl\">\n {profile.avatar_url ? (\n <img src={profile.avatar_url} alt={profile.full_name} />\n ) : (\n <div className=\"flex items-center justify-center h-full w-full bg-primary/10 text-primary font-semibold\">\n {profile.full_name.split(' ').map(n => n[0]).join('').toUpperCase()}\n </div>\n )}\n </Avatar>\n\n {/* Basic Info */}\n <div className=\"flex-1 min-w-0\">\n <div className=\"flex items-center gap-sm mb-xs\">\n <h3 className=\"font-semibold truncate\" title={profile.full_name}>\n {profile.full_name}\n </h3>\n <Badge \n variant={getStatusColor(profile.status) as unknown} \n size=\"sm\"\n >\n {profile.status}\n </Badge>\n </div>\n \n <div className=\"flex items-center gap-md text-sm text-muted-foreground\">\n <div className=\"flex items-center gap-xs\">\n <Mail className=\"h-3 w-3\" />\n <span className=\"truncate\" title={profile.email}>\n {profile.email}\n </span>\n </div>\n \n {profile.position && (\n <div className=\"flex items-center gap-xs\">\n <User className=\"h-3 w-3\" />\n <span className=\"truncate\">{profile.position}</span>\n </div>\n )}\n \n {profile.department && (\n <div className=\"flex items-center gap-xs\">\n <Building className=\"h-3 w-3\" />\n <span className=\"truncate\">{profile.department}</span>\n </div>\n )}\n </div>\n </div>\n\n {/* Profile Completion */}\n <div className=\"hidden md:flex items-center gap-sm\">\n <div className=\"text-right\">\n <p className=\"text-sm font-medium\">{profile.completion_percentage}%</p>\n <p className=\"text-xs text-muted-foreground\">Complete</p>\n </div>\n <div className=\"w-component-md bg-muted rounded-full h-2\">\n <div \n className=\"bg-primary h-2 rounded-full transition-all duration-300\" \n style={{ width: `${profile.completion_percentage}%` }}\n />\n </div>\n </div>\n\n {/* Stats */}\n <div className=\"hidden lg:flex items-center gap-md text-sm\">\n <div className=\"text-center\">\n <p className=\"font-medium\">{profile.certifications_count || 0}</p>\n <p className=\"text-xs text-muted-foreground\">Certs</p>\n </div>\n <div className=\"text-center\">\n <p className=\"font-medium\">{profile.endorsements_count || 0}</p>\n <p className=\"text-xs text-muted-foreground\">Endorsements</p>\n </div>\n </div>\n\n {/* Last Login */}\n {profile.last_login && (\n <div className=\"hidden xl:block text-sm text-muted-foreground\">\n <div className=\"flex items-center gap-xs\">\n <Calendar className=\"h-3 w-3\" />\n <span>{new Date(profile.last_login).toLocaleDateString()}</span>\n </div>\n </div>\n )}\n\n {/* Actions */}\n <div className=\"flex items-center gap-sm\">\n <Button\n variant=\"ghost\"\n size=\"sm\"\n onClick={() => onEdit(profile)}\n >\n <Eye className=\"h-icon-xs w-icon-xs\" />\n </Button>\n <Button\n variant=\"ghost\"\n size=\"sm\"\n onClick={() => onEdit(profile)}\n >\n <Edit className=\"h-icon-xs w-icon-xs\" />\n </Button>\n </div>\n </div>\n </Card>\n ))}\n </div>\n\n {/* Load More */}\n {profiles.length > 0 && (\n <div className=\"text-center pt-lg\">\n <Button variant=\"outline\">\n Load More Profiles\n </Button>\n </div>\n )}\n </div>\n );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/profile/views/ProfileTableView.tsx","messages":[{"ruleId":"@next/next/no-img-element","severity":1,"message":"Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` or a custom image loader to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","line":268,"column":2,"nodeType":"JSXOpeningElement","endLine":268,"endColumn":58}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { ArrowUpDown, ArrowUp, ArrowDown, Edit, Eye, User } from \"lucide-react\";\nimport {\n Table,\n TableBody,\n TableCell,\n TableHead,\n TableHeader,\n TableRow,\n Badge,\n Button,\n Avatar,\n Checkbox\n} from '@ghxstship/ui';\n\nimport type { UserProfile, FieldConfig, ProfileSort } from '../types';\n\ninterface ProfileTableViewProps {\n profiles: UserProfile[];\n loading: boolean;\n selectedIds: string[];\n onSelectionChange: (ids: string[]) => void;\n onEdit: (profile: UserProfile) => void;\n onSort: (sort: ProfileSort) => void;\n currentSort: ProfileSort;\n fieldConfig: FieldConfig[];\n}\n\nexport default function ProfileTableView({\n profiles,\n loading,\n selectedIds,\n onSelectionChange,\n onEdit,\n onSort,\n currentSort,\n fieldConfig\n}: ProfileTableViewProps) {\n const handleSelectProfile = (profileId: string, checked: boolean) => {\n if (checked) {\n onSelectionChange([...selectedIds, profileId]);\n } else {\n onSelectionChange(selectedIds.filter(id => id !== profileId));\n }\n };\n\n const handleSelectAll = (checked: boolean) => {\n if (checked) {\n onSelectionChange(profiles.map(p => p.id));\n } else {\n onSelectionChange([]);\n }\n };\n\n const handleSort = (field: keyof UserProfile) => {\n const direction = currentSort.field === field && currentSort.direction === 'asc' ? 'desc' : 'asc';\n onSort({ field, direction });\n };\n\n const getSortIcon = (field: string) => {\n if (currentSort.field !== field) {\n return <ArrowUpDown className=\"h-icon-xs w-icon-xs\" />;\n }\n return currentSort.direction === 'asc' ? \n <ArrowUp className=\"h-icon-xs w-icon-xs\" /> : \n <ArrowDown className=\"h-icon-xs w-icon-xs\" />;\n };\n\n const getStatusColor = (status: string) => {\n switch (status) {\n case 'active':\n return 'success';\n case 'inactive':\n return 'destructive';\n case 'pending':\n return 'warning';\n case 'suspended':\n return 'destructive';\n default:\n return 'secondary';\n }\n };\n\n if (loading) {\n return (\n <div className=\"border rounded-md\">\n <Table>\n <TableHeader>\n <TableRow>\n <TableHead className=\"w-icon-2xl\">\n <div className=\"w-icon-xs h-icon-xs bg-muted rounded animate-pulse\" />\n </TableHead>\n <TableHead>Name</TableHead>\n <TableHead>Email</TableHead>\n <TableHead>Department</TableHead>\n <TableHead>Position</TableHead>\n <TableHead>Status</TableHead>\n <TableHead>Completion</TableHead>\n <TableHead>Actions</TableHead>\n </TableRow>\n </TableHeader>\n <TableBody>\n {Array.from({ length: 10 }).map((_, i) => (\n <TableRow key={i}>\n <TableCell>\n <div className=\"w-icon-xs h-icon-xs bg-muted rounded animate-pulse\" />\n </TableCell>\n <TableCell>\n <div className=\"flex items-center gap-sm\">\n <div className=\"w-icon-lg h-icon-lg bg-muted rounded-full animate-pulse\" />\n <div className=\"w-component-xl h-icon-xs bg-muted rounded animate-pulse\" />\n </div>\n </TableCell>\n <TableCell>\n <div className=\"w-40 h-icon-xs bg-muted rounded animate-pulse\" />\n </TableCell>\n <TableCell>\n <div className=\"w-component-lg h-icon-xs bg-muted rounded animate-pulse\" />\n </TableCell>\n <TableCell>\n <div className=\"w-28 h-icon-xs bg-muted rounded animate-pulse\" />\n </TableCell>\n <TableCell>\n <div className=\"w-component-md h-icon-md bg-muted rounded animate-pulse\" />\n </TableCell>\n <TableCell>\n <div className=\"w-component-lg h-icon-xs bg-muted rounded animate-pulse\" />\n </TableCell>\n <TableCell>\n <div className=\"flex gap-xs\">\n <div className=\"w-icon-lg h-icon-lg bg-muted rounded animate-pulse\" />\n <div className=\"w-icon-lg h-icon-lg bg-muted rounded animate-pulse\" />\n </div>\n </TableCell>\n </TableRow>\n ))}\n </TableBody>\n </Table>\n </div>\n );\n }\n\n if (profiles.length === 0) {\n return (\n <div className=\"border rounded-md p-xl text-center\">\n <User className=\"h-icon-2xl w-icon-2xl text-muted-foreground mx-auto mb-md\" />\n <h3 className=\"text-lg font-semibold mb-sm\">No profiles found</h3>\n <p className=\"text-muted-foreground mb-lg\">\n Get started by creating your first profile or adjust your filters.\n </p>\n <Button>Create Profile</Button>\n </div>\n );\n }\n\n return (\n <div className=\"border rounded-md\">\n <Table>\n <TableHeader>\n <TableRow>\n <TableHead className=\"w-icon-2xl\">\n <Checkbox\n checked={selectedIds.length === profiles.length}\n onCheckedChange={handleSelectAll}\n indeterminate={selectedIds.length > 0 && selectedIds.length < profiles.length}\n />\n </TableHead>\n <TableHead>\n <Button\n variant=\"ghost\"\n size=\"sm\"\n className=\"h-auto p-0 font-semibold\"\n onClick={() => handleSort('full_name')}\n >\n Name\n {getSortIcon('full_name')}\n </Button>\n </TableHead>\n <TableHead>\n <Button\n variant=\"ghost\"\n size=\"sm\"\n className=\"h-auto p-0 font-semibold\"\n onClick={() => handleSort('email')}\n >\n Email\n {getSortIcon('email')}\n </Button>\n </TableHead>\n <TableHead>\n <Button\n variant=\"ghost\"\n size=\"sm\"\n className=\"h-auto p-0 font-semibold\"\n onClick={() => handleSort('department')}\n >\n Department\n {getSortIcon('department')}\n </Button>\n </TableHead>\n <TableHead>\n <Button\n variant=\"ghost\"\n size=\"sm\"\n className=\"h-auto p-0 font-semibold\"\n onClick={() => handleSort('position')}\n >\n Position\n {getSortIcon('position')}\n </Button>\n </TableHead>\n <TableHead>\n <Button\n variant=\"ghost\"\n size=\"sm\"\n className=\"h-auto p-0 font-semibold\"\n onClick={() => handleSort('status')}\n >\n Status\n {getSortIcon('status')}\n </Button>\n </TableHead>\n <TableHead>\n <Button\n variant=\"ghost\"\n size=\"sm\"\n className=\"h-auto p-0 font-semibold\"\n onClick={() => handleSort('completion_percentage')}\n >\n Completion\n {getSortIcon('completion_percentage')}\n </Button>\n </TableHead>\n <TableHead>\n <Button\n variant=\"ghost\"\n size=\"sm\"\n className=\"h-auto p-0 font-semibold\"\n onClick={() => handleSort('last_login')}\n >\n Last Login\n {getSortIcon('last_login')}\n </Button>\n </TableHead>\n <TableHead className=\"w-component-lg\">Actions</TableHead>\n </TableRow>\n </TableHeader>\n <TableBody>\n {profiles.map((profile) => (\n <TableRow\n key={profile.id}\n className={`cursor-pointer hover:bg-muted/50 ${\n selectedIds.includes(profile.id) ? 'bg-muted/30' : ''\n }`}\n >\n <TableCell>\n <Checkbox\n checked={selectedIds.includes(profile.id)}\n onCheckedChange={(checked) => handleSelectProfile(profile.id, checked as boolean)}\n onClick={(e) => e.stopPropagation()}\n />\n </TableCell>\n <TableCell>\n <div className=\"flex items-center gap-sm\">\n <Avatar className=\"h-icon-lg w-icon-lg\">\n {profile.avatar_url ? (\n <img src={profile.avatar_url} alt={profile.full_name} />\n ) : (\n <div className=\"flex items-center justify-center h-full w-full bg-primary/10 text-primary font-semibold text-xs\">\n {profile.full_name.split(' ').map(n => n[0]).join('').toUpperCase()}\n </div>\n )}\n </Avatar>\n <div>\n <p className=\"font-medium\">{profile.full_name}</p>\n {profile.employee_id && (\n <p className=\"text-xs text-muted-foreground\">ID: {profile.employee_id}</p>\n )}\n </div>\n </div>\n </TableCell>\n <TableCell>\n <div>\n <p className=\"font-medium\">{profile.email}</p>\n {profile.phone && (\n <p className=\"text-xs text-muted-foreground\">{profile.phone}</p>\n )}\n </div>\n </TableCell>\n <TableCell>\n {profile.department ? (\n <Badge variant=\"outline\">{profile.department}</Badge>\n ) : (\n <span className=\"text-muted-foreground\">-</span>\n )}\n </TableCell>\n <TableCell>\n {profile.position || <span className=\"text-muted-foreground\">-</span>}\n </TableCell>\n <TableCell>\n <Badge variant={getStatusColor(profile.status) as unknown}>\n {profile.status}\n </Badge>\n </TableCell>\n <TableCell>\n <div className=\"flex items-center gap-sm\">\n <div className=\"w-component-md bg-muted rounded-full h-2\">\n <div \n className=\"bg-primary h-2 rounded-full transition-all duration-300\" \n style={{ width: `${profile.completion_percentage}%` }}\n />\n </div>\n <span className=\"text-sm font-medium w-icon-xl\">\n {profile.completion_percentage}%\n </span>\n </div>\n </TableCell>\n <TableCell>\n {profile.last_login ? (\n <span className=\"text-sm\">\n {new Date(profile.last_login).toLocaleDateString()}\n </span>\n ) : (\n <span className=\"text-muted-foreground\">Never</span>\n )}\n </TableCell>\n <TableCell>\n <div className=\"flex items-center gap-xs\">\n <Button\n variant=\"ghost\"\n size=\"sm\"\n onClick={(e) => {\n e.stopPropagation();\n onEdit(profile);\n }}\n >\n <Eye className=\"h-icon-xs w-icon-xs\" />\n </Button>\n <Button\n variant=\"ghost\"\n size=\"sm\"\n onClick={(e) => {\n e.stopPropagation();\n onEdit(profile);\n }}\n >\n <Edit className=\"h-icon-xs w-icon-xs\" />\n </Button>\n </div>\n </TableCell>\n </TableRow>\n ))}\n </TableBody>\n </Table>\n </div>\n );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/programming/ProgrammingClient.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadData'. Either include it or remove the dependency array.","line":120,"column":6,"nodeType":"ArrayExpression","endLine":120,"endColumn":13,"suggestions":[{"desc":"Update the dependencies array to be: [loadData, orgId]","fix":{"range":[2505,2512],"text":"[loadData, orgId]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\n\nimport { useEffect, useState } from 'react';\nimport {\n  Drawer,\n  type DataRecord,\n  StateManagerProvider,\n  DataViewProvider,\n  ViewSwitcher,\n  DataActions,\n  DataGrid,\n  KanbanBoard,\n  CalendarView,\n  ListView\n} from '@ghxstship/ui';\nimport { useTranslations } from 'next-intl';\nimport { createBrowserClient } from '@ghxstship/auth';\n\nexport default function ProgrammingClient({ orgId }: { orgId: string }) {\n  const t = useTranslations('programming');\n  const sb = createBrowserClient();\n  \n  const [data, setData] = useState<DataRecord[]>([]);\n  const [loading, setLoading] = useState(false);\n\n  // Define field configuration for programming data\n  const fields: FieldConfig[] = [\n    {\n      key: 'name',\n      label: t('name'),\n      type: 'text',\n      sortable: true,\n      filterable: true\n    },\n    {\n      key: 'description',\n      label: t('description'),\n      type: 'text',\n      sortable: false,\n      filterable: true\n    },\n    {\n      key: 'type',\n      label: t('type'),\n      type: 'select',\n      sortable: true,\n      filterable: true,\n      options: [\n        { value: 'event', label: t('event') },\n        { value: 'space', label: t('space') }\n      ]\n    },\n    {\n      key: 'event_date',\n      label: t('eventDate'),\n      type: 'date',\n      sortable: true,\n      filterable: true\n    },\n    {\n      key: 'start_time',\n      label: t('startTime'),\n      type: 'text',\n      sortable: true,\n      filterable: false\n    },\n    {\n      key: 'end_time',\n      label: t('endTime'),\n      type: 'text',\n      sortable: true,\n      filterable: false\n    },\n    {\n      key: 'location',\n      label: t('location'),\n      type: 'text',\n      sortable: true,\n      filterable: true\n    },\n    {\n      key: 'capacity',\n      label: t('capacity'),\n      type: 'number',\n      sortable: true,\n      filterable: true\n    },\n    {\n      key: 'status',\n      label: t('status'),\n      type: 'select',\n      sortable: true,\n      filterable: true,\n      options: [\n        { value: 'draft', label: t('draft') },\n        { value: 'published', label: t('published') },\n        { value: 'cancelled', label: t('cancelled') }\n      ]\n    },\n    {\n      key: 'record_type',\n      label: t('recordType'),\n      type: 'text',\n      sortable: true,\n      filterable: true\n    },\n    {\n      key: 'created_at',\n      label: t('createdAt'),\n      type: 'date',\n      sortable: true,\n      filterable: false\n    }\n  ];\n\n  // Load data from Supabase\n  useEffect(() => {\n    loadData();\n  }, [orgId]);\n\n  const loadData = async () => {\n    if (!orgId) return;\n    \n    try {\n      setLoading(true);\n      \n      // Load events\n      const { data: eventsData, error: eventsError } = await sb\n        .from('events')\n        .select('*')\n        .eq('organization_id', orgId)\n        .order('created_at', { ascending: false });\n      \n      if (eventsError) throw eventsError;\n      \n      // Load spaces\n      const { data: spacesData, error: spacesError } = await sb\n        .from('spaces')\n        .select('*')\n        .eq('organization_id', orgId)\n        .order('created_at', { ascending: false });\n      \n      if (spacesError) throw spacesError;\n      \n      // Combine data with record_type field\n      const combinedData = [\n        ...(eventsData || []).map(event => ({ ...event, record_type: 'event' })),\n        ...(spacesData || []).map(space => ({ ...space, record_type: 'space' }))\n      ];\n      \n      setData(combinedData);\n    } catch (error) {\n      console.error('Error loading programming data:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Configure DataView\n  const config: DataViewConfig = {\n    id: 'programming-data',\n    name: t('programming'),\n    viewType: 'grid',\n    defaultView: 'grid',\n    fields,\n    data,\n    \n    // Callback functions (placeholder implementations)\n    onSearch: (query: string) => {\n      console.log('Search:', query);\n    },\n    onFilter: (filters: any[]) => {\n      console.log('Filter:', filters);\n    },\n    onSort: (sorts: any[]) => {\n      console.log('Sort:', sorts);\n    },\n    onRefresh: () => {\n      loadData();\n    },\n    onExport: (data: any[], format: string) => {\n      console.log('Export:', format, data);\n    },\n    onImport: (data: any[]) => {\n      console.log('Import:', data);\n    }\n  };\n\n  return (\n    <div className=\"stack-md\">\n      <DataViewProvider config={config}>\n        <StateManagerProvider>\n          <div className=\"stack-md\">\n            <div className=\"flex items-center justify-between mb-md\">\n              <h1 className=\"text-heading-3 text-heading-3\">{t('programming')}</h1>\n              <div className=\"flex items-center gap-sm\">\n                <ViewSwitcher />\n                <DataActions />\n              </div>\n            </div>\n\n            {/* Data Views */}\n            <DataGrid />\n            \n            <KanbanBoard \n              columns={[\n                { id: 'draft', title: t('draft') },\n                { id: 'published', title: t('published') },\n                { id: 'cancelled', title: t('cancelled') }\n              ]}\n              statusField=\"status\"\n              titleField=\"name\"\n            />\n            \n            <CalendarView \n              startDateField=\"event_date\"\n              titleField=\"name\"\n            />\n            \n            <ListView titleField=\"name\" />\n            \n            <Drawer title=\"Details\"\n              open={false}\n              onClose={() => {}}\n            >\n              <div>Details placeholder</div>\n            </Drawer>\n          </div>\n        </StateManagerProvider>\n      </DataViewProvider>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/programming/ProgrammingClient.unified.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/programming/[id]/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/programming/calendar/CalendarClient.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadEvents'. Either include it or remove the dependency array.","line":41,"column":6,"nodeType":"ArrayExpression","endLine":41,"endColumn":26,"suggestions":[{"desc":"Update the dependencies array to be: [orgId, currentDate, loadEvents]","fix":{"range":[1038,1058],"text":"[orgId, currentDate, loadEvents]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\n\nimport { useEffect, useState } from 'react';\nimport { Button, Card, Badge } from '@ghxstship/ui';\nimport { useTranslations } from 'next-intl';\nimport { createBrowserClient } from '@ghxstship/auth';\nimport { \n  Calendar, \n  ChevronLeft, \n  ChevronRight, \n  Plus, \n  Clock, \n  MapPin,\n  Users,\n  Filter\n} from 'lucide-react';\n\ninterface Event {\n  id: string;\n  name: string;\n  kind: 'performance' | 'activation' | 'workshop';\n  starts_at: string;\n  ends_at: string;\n  project_name: string;\n  status: string;\n}\n\nexport default function CalendarClient({ orgId }: { orgId: string }) {\n  const t = useTranslations('programming');\n  const sb = createBrowserClient();\n  \n  const [events, setEvents] = useState<Event[]>([]);\n  const [loading, setLoading] = useState(false);\n  const [currentDate, setCurrentDate] = useState(new Date());\n  const [viewMode, setViewMode] = useState<'month' | 'week' | 'day'>('month');\n  const [selectedFilters, setSelectedFilters] = useState<string[]>([]);\n\n  useEffect(() => {\n    loadEvents();\n  }, [orgId, currentDate]);\n\n  const loadEvents = async () => {\n    if (!orgId) return;\n    \n    try {\n      setLoading(true);\n      \n      // Get start and end of current month for filtering\n      const startOfMonth = new Date(currentDate.getFullYear(), currentDate.getMonth(), 1);\n      const endOfMonth = new Date(currentDate.getFullYear(), currentDate.getMonth() + 1, 0);\n      \n      const { data: eventsData, error } = await sb\n        .from('events')\n        .select(`\n          *,\n          projects!inner(\n            name,\n            organization_id\n          )\n        `)\n        .eq('projects.organization_id', orgId)\n        .gte('starts_at', startOfMonth.toISOString())\n        .lte('starts_at', endOfMonth.toISOString())\n        .order('starts_at', { ascending: true });\n      \n      if (error) throw error;\n      \n      const transformedEvents = (eventsData || []).map(event => ({\n        ...event,\n        project_name: event.projects?.name || 'Unknown Project',\n        status: computeEventStatus(event)\n      }));\n      \n      setEvents(transformedEvents);\n    } catch (error) {\n      console.error('Error loading events:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const computeEventStatus = (event: any) => {\n    const now = new Date();\n    const startDate = event.starts_at ? new Date(event.starts_at) : null;\n    const endDate = event.ends_at ? new Date(event.ends_at) : null;\n\n    if (!startDate) return 'draft';\n    if (startDate > now) return 'scheduled';\n    if (endDate && endDate < now) return 'completed';\n    if (startDate <= now && (!endDate || endDate >= now)) return 'in_progress';\n    \n    return 'draft';\n  };\n\n  const navigateMonth = (direction: 'prev' | 'next') => {\n    const newDate = new Date(currentDate);\n    if (direction === 'prev') {\n      newDate.setMonth(newDate.getMonth() - 1);\n    } else {\n      newDate.setMonth(newDate.getMonth() + 1);\n    }\n    setCurrentDate(newDate);\n  };\n\n  const getDaysInMonth = () => {\n    const year = currentDate.getFullYear();\n    const month = currentDate.getMonth();\n    const firstDay = new Date(year, month, 1);\n    const lastDay = new Date(year, month + 1, 0);\n    const daysInMonth = lastDay.getDate();\n    const startingDayOfWeek = firstDay.getDay();\n\n    const days = [];\n    \n    // Add empty cells for days before the first day of the month\n    for (let i = 0; i < startingDayOfWeek; i++) {\n      days.push(null);\n    }\n    \n    // Add days of the month\n    for (let day = 1; day <= daysInMonth; day++) {\n      days.push(new Date(year, month, day));\n    }\n    \n    return days;\n  };\n\n  const getEventsForDate = (date: Date | null) => {\n    if (!date) return [];\n    \n    return events.filter(event => {\n      const eventDate = new Date(event.starts_at);\n      return eventDate.toDateString() === date.toDateString();\n    });\n  };\n\n  const getEventTypeColor = (kind: string) => {\n    switch (kind) {\n      case 'performance':\n        return 'bg-accent';\n      case 'activation':\n        return 'bg-success';\n      case 'workshop':\n        return 'bg-secondary';\n      default:\n        return 'bg-secondary-foreground';\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'scheduled':\n        return 'color-accent bg-accent/10';\n      case 'in_progress':\n        return 'color-success bg-success/10';\n      case 'completed':\n        return 'color-muted bg-secondary/50';\n      case 'cancelled':\n        return 'color-destructive bg-destructive/10';\n      default:\n        return 'color-warning bg-warning/10';\n    }\n  };\n\n  const monthNames = [\n    'January', 'February', 'March', 'April', 'May', 'June',\n    'July', 'August', 'September', 'October', 'November', 'December'\n  ];\n\n  const weekDays = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\n\n  return (\n    <div className=\"stack-lg\">\n      {/* Calendar Header */}\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center gap-md\">\n          <div className=\"flex items-center gap-sm\">\n            <Button\n              variant=\"outline\"\n             \n              onClick={() => navigateMonth('prev')}\n            >\n              <ChevronLeft className=\"h-icon-xs w-icon-xs\" />\n            </Button>\n            <h2 className=\"text-heading-4 text-heading-4 min-w-content-narrow text-center\">\n              {monthNames[currentDate.getMonth()]} {currentDate.getFullYear()}\n            </h2>\n            <Button\n              variant=\"outline\"\n             \n              onClick={() => navigateMonth('next')}\n            >\n              <ChevronRight className=\"h-icon-xs w-icon-xs\" />\n            </Button>\n          </div>\n          \n          <Button\n            variant=\"outline\"\n           \n            onClick={() => setCurrentDate(new Date())}\n          >\n            Today\n          </Button>\n        </div>\n\n        <div className=\"flex items-center gap-sm\">\n          <Button>\n            <Filter className=\"h-icon-xs w-icon-xs mr-sm\" />\n            Filter\n          </Button>\n          <Button>\n            <Plus className=\"h-icon-xs w-icon-xs mr-sm\" />\n            Create Event\n          </Button>\n        </div>\n      </div>\n\n      {/* Event Type Legend */}\n      <div className=\"flex items-center gap-md text-body-sm\">\n        <div className=\"flex items-center gap-sm\">\n          <div className=\"w-3 h-3 rounded-full bg-accent\"></div>\n          <span>Performance</span>\n        </div>\n        <div className=\"flex items-center gap-sm\">\n          <div className=\"w-3 h-3 rounded-full bg-success\"></div>\n          <span>Activation</span>\n        </div>\n        <div className=\"flex items-center gap-sm\">\n          <div className=\"w-3 h-3 rounded-full bg-secondary\"></div>\n          <span>Workshop</span>\n        </div>\n      </div>\n\n      {/* Calendar Grid */}\n      <Card className=\"p-0\">\n        <div className=\"grid grid-cols-7 gap-0\">\n          {/* Week day headers */}\n          {weekDays.map(day => (\n            <div\n              key={day}\n              className=\"p-sm text-center text-body-sm form-label color-muted border-b border-r last:border-r-0\"\n            >\n              {day}\n            </div>\n          ))}\n          \n          {/* Calendar days */}\n          {getDaysInMonth().map((date, index) => {\n            const dayEvents = getEventsForDate(date);\n            const isToday = date && date.toDateString() === new Date().toDateString();\n            \n            return (\n              <div\n                key={index}\n                className={`min-h-header-lg p-sm border-b border-r last:border-r-0 ${\n                  date ? 'bg-background hover:bg-secondary/50' : 'bg-secondary/20'\n                } ${isToday ? 'bg-accent/10' : ''}`}\n              >\n                {date && (\n                  <>\n                    <div className={`text-body-sm form-label mb-sm ${\n                      isToday ? 'color-accent text-heading-3' : 'color-foreground'\n                    }`}>\n                      {date.getDate()}\n                    </div>\n                    \n                    <div className=\"stack-md\">\n                      {dayEvents.slice(0, 3).map(event => (\n                        <div\n                          key={event.id}\n                          className=\"text-body-sm p-xs rounded cursor-pointer hover:opacity-80 transition-opacity\"\n                          style={{ backgroundColor: `${getEventTypeColor(event.kind)}20` }}\n                        >\n                          <div className=\"flex items-center gap-xs\">\n                            <div className={`w-2 h-2 rounded-full ${getEventTypeColor(event.kind)}`}></div>\n                            <span className=\"truncate form-label\">{event.name}</span>\n                          </div>\n                          <div className=\"color-muted mt-xs flex items-center gap-xs\">\n                            <Clock className=\"h-3 w-3\" />\n                            <span>\n                              {new Date(event.starts_at).toLocaleTimeString([], { \n                                hour: '2-digit', \n                                minute: '2-digit' \n                              })}\n                            </span>\n                          </div>\n                        </div>\n                      ))}\n                      \n                      {dayEvents.length > 3 && (\n                        <div className=\"text-body-sm color-muted p-xs\">\n                          +{dayEvents.length - 3} more\n                        </div>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            );\n          })}\n        </div>\n      </Card>\n\n      {/* Upcoming Events List */}\n      <Card>\n        <div className=\"p-lg\">\n          <h3 className=\"text-body text-heading-4 mb-md\">Upcoming Events This Month</h3>\n          \n          {loading ? (\n            <div className=\"text-center py-xl color-muted\">\n              Loading events...\n            </div>\n          ) : events.length === 0 ? (\n            <div className=\"text-center py-xl color-muted\">\n              <Calendar className=\"h-icon-2xl w-icon-2xl mx-auto mb-md opacity-50\" />\n              <p>No events scheduled for this month</p>\n              <Button>\n                <Plus className=\"h-icon-xs w-icon-xs mr-sm\" />\n                Create Your First Event\n              </Button>\n            </div>\n          ) : (\n            <div className=\"stack-sm\">\n              {events.slice(0, 5).map(event => (\n                <div\n                  key={event.id}\n                  className=\"flex items-center justify-between p-sm rounded-lg border hover:bg-secondary/50 cursor-pointer transition-colors\"\n                >\n                  <div className=\"flex items-center gap-sm\">\n                    <div className={`w-3 h-3 rounded-full ${getEventTypeColor(event.kind)}`}></div>\n                    <div>\n                      <div className=\"form-label\">{event.name}</div>\n                      <div className=\"text-body-sm color-muted flex items-center gap-md\">\n                        <span className=\"flex items-center gap-xs\">\n                          <Calendar className=\"h-3 w-3\" />\n                          {new Date(event.starts_at).toLocaleDateString()}\n                        </span>\n                        <span className=\"flex items-center gap-xs\">\n                          <Clock className=\"h-3 w-3\" />\n                          {new Date(event.starts_at).toLocaleTimeString([], { \n                            hour: '2-digit', \n                            minute: '2-digit' \n                          })}\n                        </span>\n                        <span className=\"flex items-center gap-xs\">\n                          <MapPin className=\"h-3 w-3\" />\n                          {event.project_name}\n                        </span>\n                      </div>\n                    </div>\n                  </div>\n                  \n                  <div className=\"flex items-center gap-sm\">\n                    <Badge variant=\"outline\">\n                      {event.status.replace('_', ' ')}\n                    </Badge>\n                    <Badge variant=\"outline\">\n                      {event.kind}\n                    </Badge>\n                  </div>\n                </div>\n              ))}\n              \n              {events.length > 5 && (\n                <div className=\"text-center pt-md\">\n                  <Button>\n                    View All {events.length} Events\n                  </Button>\n                </div>\n              )}\n            </div>\n          )}\n        </div>\n      </Card>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/programming/calendar/CreateCalendarClient.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'loadProjects' and 'projects.length'. Either include them or remove the dependency array.","line":74,"column":6,"nodeType":"ArrayExpression","endLine":74,"endColumn":14,"suggestions":[{"desc":"Update the dependencies array to be: [isOpen, loadProjects, projects.length]","fix":{"range":[2122,2130],"text":"[isOpen, loadProjects, projects.length]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\n\nimport { useState, useEffect } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { z } from 'zod';\nimport {\n  Badge,\n  Button,\n  Card,\n  Drawer,\n  Input,\n  Select,\n  Textarea,\n  UnifiedInput\n} from \"@ghxstship/ui\";\nimport { useTranslations } from 'next-intl';\nimport { createBrowserClient } from '@ghxstship/auth';\nimport { Plus, Calendar, Clock, MapPin, Users } from 'lucide-react';\nimport { usePostHog } from 'posthog-js/react';\n\n// Form validation schema\nconst createEventSchema = z.object({\n  name: z.string().min(1, 'Event name is required'),\n  description: z.string().optional(),\n  kind: z.enum(['performance', 'activation', 'workshop', 'meeting', 'rehearsal', 'setup', 'breakdown']),\n  project_id: z.string().uuid('Please select a project'),\n  start_at: z.string().min(1, 'Start time is required'),\n  end_at: z.string().min(1, 'End time is required'),\n  location: z.string().optional(),\n  capacity: z.number().min(0).optional(),\n  status: z.enum(['draft', 'scheduled', 'in_progress', 'completed', 'cancelled']).default('draft')\n});\n\ntype CreateEventForm = z.infer<typeof createEventSchema>;\n\ninterface Project {\n  id: string;\n  name: string;\n  status: string;\n}\n\nexport default function CreateCalendarClient({ orgId }: { orgId: string }) {\n  const t = useTranslations('programming');\n  const sb = createBrowserClient();\n  const posthog = usePostHog();\n  \n  const [isOpen, setIsOpen] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [projects, setProjects] = useState<Project[]>([]);\n  const [loadingProjects, setLoadingProjects] = useState(false);\n\n  const form = useForm<CreateEventForm>({\n    resolver: zodResolver(createEventSchema),\n    defaultValues: {\n      name: '',\n      description: '',\n      kind: 'performance',\n      project_id: '',\n      start_at: '',\n      end_at: '',\n      location: '',\n      capacity: undefined,\n      status: 'draft'\n    }\n  });\n\n  // Load projects when drawer opens\n  useEffect(() => {\n    if (isOpen && projects.length === 0) {\n      loadProjects();\n    }\n  }, [isOpen]);\n\n  const loadProjects = async () => {\n    setLoadingProjects(true);\n    try {\n      const { data, error } = await sb\n        .from('projects')\n        .select('id, name, status')\n        .eq('organization_id', orgId)\n        .eq('status', 'active')\n        .order('name');\n\n      if (error) throw error;\n      setProjects(data || []);\n    } catch (error) {\n      console.error('Error loading projects:', error);\n    } finally {\n      setLoadingProjects(false);\n    }\n  };\n\n  const onSubmit = async (data: CreateEventForm) => {\n    setIsLoading(true);\n    try {\n      const { error } = await sb\n        .from('events')\n        .insert({\n          ...data,\n          organization_id: orgId,\n          capacity: data.capacity || null\n        });\n\n      if (error) throw error;\n\n      // Track event creation\n      posthog?.capture('programming_event_created', {\n        event_kind: data.kind,\n        project_id: data.project_id,\n        organization_id: orgId\n      });\n\n      // Reset form and close drawer\n      form.reset();\n      setIsOpen(false);\n      \n      // Refresh the page to show new event\n      window.location.reload();\n    } catch (error) {\n      console.error('Error creating event:', error);\n      // Error handling implemented\n      alert('An error occurred while creating the event. Please try again.');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const eventKindOptions = [\n    { value: 'performance', label: 'Performance' },\n    { value: 'activation', label: 'Activation' },\n    { value: 'workshop', label: 'Workshop' },\n    { value: 'meeting', label: 'Meeting' },\n    { value: 'rehearsal', label: 'Rehearsal' },\n    { value: 'setup', label: 'Setup' },\n    { value: 'breakdown', label: 'Breakdown' }\n  ];\n\n  const statusOptions = [\n    { value: 'draft', label: 'Draft' },\n    { value: 'scheduled', label: 'Scheduled' },\n    { value: 'in_progress', label: 'In Progress' },\n    { value: 'completed', label: 'Completed' },\n    { value: 'cancelled', label: 'Cancelled' }\n  ];\n\n  return (\n    <>\n      <Button\n        onClick={() => setIsOpen(true)}\n        className=\"flex items-center gap-sm\"\n       \n      >\n        <Plus className=\"h-icon-xs w-icon-xs\" />\n        Create Event\n      </Button>\n\n      <Drawer\n        open={isOpen}\n        onClose={() => setIsOpen(false)}\n        title=\"Create New Event\"\n        description=\"Add a new event to the programming calendar\"\n      >\n        <form onSubmit={form.handleSubmit(onSubmit)} className=\"stack-lg\">\n          <div className=\"grid grid-cols-1 gap-md\">\n            <Input               label=\"Event Name\"\n              placeholder=\"Enter event name\"\n              {...form.register('name')}\n             \n              required\n            />\n\n            <Textarea\n              label=\"Description\"\n              placeholder=\"Enter event description (optional)\"\n              {...form.register('description')}\n             \n              rows={3}\n            />\n\n            <div className=\"grid grid-cols-2 gap-md\">\n              <Select\n                {...form.register('kind')}\n              >\n                <option value=\"\">Select type</option>\n                {eventKindOptions.map(option => (\n                  <option key={option.value} value={option.value}>\n                    {option.label}\n                  </option>\n                ))}\n              </Select>\n\n              <Select\n                {...form.register('status')}\n              >\n                {statusOptions.map(option => (\n                  <option key={option.value} value={option.value}>\n                    {option.label}\n                  </option>\n                ))}\n              </Select>\n            </div>\n\n            <Select\n              {...form.register('project_id')}\n              disabled={loadingProjects}\n            >\n              <option value=\"\">\n                {loadingProjects ? 'Loading projects...' : 'Select project'}\n              </option>\n              {projects.map(project => (\n                <option key={project.id} value={project.id}>\n                  {project.name}\n                </option>\n              ))}\n            </Select>\n\n            <div className=\"grid grid-cols-2 gap-md\">\n              <Input                 label=\"Start Time\"\n                type=\"datetime-local\"\n                {...form.register('start_at')}\n               \n                required\n              />\n\n              <Input                 label=\"End Time\"\n                type=\"datetime-local\"\n                {...form.register('end_at')}\n               \n                required\n              />\n            </div>\n\n            <div className=\"grid grid-cols-2 gap-md\">\n              <Input                 label=\"Location\"\n                placeholder=\"Enter location (optional)\"\n                {...form.register('location')}\n               \n              />\n\n              <Input                 label=\"Capacity\"\n                type=\"number\"\n                placeholder=\"Enter capacity (optional)\"\n                {...form.register('capacity', { valueAsNumber: true })}\n               \n                min={0}\n              />\n            </div>\n          </div>\n\n          <div className=\"flex justify-end gap-sm pt-md border-t\">\n            <Button\n              type=\"button\"\n              variant=\"outline\"\n              onClick={() => setIsOpen(false)}\n              disabled={isLoading}\n            >\n              Cancel\n            </Button>\n            <Button\n              type=\"submit\"\n              loading={isLoading}\n              className=\"flex items-center gap-sm\"\n            >\n              <Calendar className=\"h-icon-xs w-icon-xs\" />\n              Create Event\n            </Button>\n          </div>\n        </form>\n      </Drawer>\n    </>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/programming/calendar/ProgrammingCalendarClient.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/programming/calendar/drawers/CreateProgrammingEventDrawer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/programming/calendar/drawers/EditProgrammingEventDrawer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/programming/calendar/drawers/ViewProgrammingEventDrawer.tsx","messages":[{"ruleId":"@next/next/no-img-element","severity":1,"message":"Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` or a custom image loader to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","line":266,"column":2,"nodeType":"JSXOpeningElement","endLine":270,"endColumn":4}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport { Calendar, Clock, Edit, MapPin, Users, Activity, Tag, Briefcase, Radio, Settings, FileText } from \"lucide-react\";\nimport { AppDrawer, Badge, Button, Card } from \"@ghxstship/ui\";\nimport { format, parseISO, differenceInHours } from \"date-fns\";\nimport type { ProgrammingEvent } from \"../types\";\nimport { EVENT_TYPE_LABEL, STATUS_BADGE } from \"../ProgrammingCalendarClient\";\n\ntype ViewProgrammingEventDrawerProps = {\n open: boolean;\n onOpenChange: (open: boolean) => void;\n event: ProgrammingEvent;\n onEdit?: () => void;\n onDelete?: () => void;\n users: { id: string; email: string; full_name?: string | null; avatar_url?: string | null }[];\n};\n\nexport default function ViewProgrammingEventDrawer({\n open,\n onOpenChange,\n event,\n onEdit,\n onDelete,\n users\n}: ViewProgrammingEventDrawerProps) {\n const statusConfig = STATUS_BADGE[event.status];\n \n // Calculate event duration\n const getDuration = () => {\n if (!event.end_at) return null;\n const hours = differenceInHours(parseISO(event.end_at), parseISO(event.start_at));\n if (hours < 1) return \"< 1 hour\";\n if (hours === 1) return \"1 hour\";\n return `${hours} hours`;\n };\n\n // Get user by ID\n const getUserById = (userId?: string) => {\n if (!userId) return null;\n return users.find(user => user.id === userId);\n };\n\n return (\n <AppDrawer\n open={open}\n onClose={() => onOpenChange(false)}\n title={event.title}\n description={event.project?.name || \"Programming Event\"}\n icon={<Calendar className=\"h-icon-sm w-icon-sm\" />}\n \n >\n <div className=\"space-y-lg\">\n {/* Header Actions */}\n <div className=\"flex justify-between items-start\">\n <div className=\"flex items-center gap-xs\">\n <Badge variant={statusConfig.variant}>{statusConfig.label}</Badge>\n <Badge variant=\"outline\">{EVENT_TYPE_LABEL[event.event_type]}</Badge>\n </div>\n {onEdit && (\n <Button\n variant=\"outline\"\n size=\"sm\"\n onClick={onEdit}\n >\n <Edit className=\"h-icon-xs w-icon-xs mr-2\" />\n Edit\n </Button>\n )}\n </div>\n\n {/* Description */}\n {event.description && (\n <div>\n <h3 className=\"font-medium mb-2 flex items-center gap-xs\">\n <FileText className=\"h-icon-xs w-icon-xs\" />\n Description\n </h3>\n <p className=\"text-sm text-muted-foreground whitespace-pre-wrap\">\n {event.description}\n </p>\n </div>\n )}\n\n {/* Schedule */}\n <div>\n <h3 className=\"font-medium mb-3 flex items-center gap-xs\">\n <Clock className=\"h-icon-xs w-icon-xs\" />\n Schedule\n </h3>\n <div className=\"space-y-sm\">\n <div className=\"flex items-center justify-between p-sm bg-muted/50 rounded-lg\">\n <span className=\"text-sm\">Start Time</span>\n <span className=\"text-sm font-medium\">\n {format(parseISO(event.start_at), \"MMMM d, yyyy 'at' h:mm a\")}\n </span>\n </div>\n \n {event.end_at && (\n <div className=\"flex items-center justify-between p-sm bg-muted/50 rounded-lg\">\n <span className=\"text-sm\">End Time</span>\n <span className=\"text-sm font-medium\">\n {format(parseISO(event.end_at), \"MMMM d, yyyy 'at' h:mm a\")}\n </span>\n </div>\n )}\n\n {getDuration() && (\n <div className=\"flex items-center justify-between p-sm bg-muted/50 rounded-lg\">\n <span className=\"text-sm\">Duration</span>\n <span className=\"text-sm font-medium\">{getDuration()}</span>\n </div>\n )}\n\n {event.setup_start && (\n <div className=\"flex items-center justify-between p-sm bg-info/10 rounded-lg\">\n <span className=\"text-sm\">Setup Start</span>\n <span className=\"text-sm font-medium\">\n {format(parseISO(event.setup_start), \"MMMM d, yyyy 'at' h:mm a\")}\n </span>\n </div>\n )}\n\n {event.teardown_end && (\n <div className=\"flex items-center justify-between p-sm bg-info/10 rounded-lg\">\n <span className=\"text-sm\">Teardown End</span>\n <span className=\"text-sm font-medium\">\n {format(parseISO(event.teardown_end), \"MMMM d, yyyy 'at' h:mm a\")}\n </span>\n </div>\n )}\n </div>\n </div>\n\n {/* Location & Capacity */}\n {(event.location || event.capacity) && (\n <div>\n <h3 className=\"font-medium mb-3 flex items-center gap-xs\">\n <MapPin className=\"h-icon-xs w-icon-xs\" />\n Venue Details\n </h3>\n <div className=\"space-y-sm\">\n {event.location && (\n <div className=\"flex items-center justify-between p-sm bg-muted/50 rounded-lg\">\n <span className=\"text-sm\">Location</span>\n <span className=\"text-sm font-medium\">{event.location}</span>\n </div>\n )}\n {event.capacity && (\n <div className=\"flex items-center justify-between p-sm bg-muted/50 rounded-lg\">\n <span className=\"text-sm\">Capacity</span>\n <span className=\"text-sm font-medium\">{event.capacity} people</span>\n </div>\n )}\n </div>\n </div>\n )}\n\n {/* Project Info */}\n {event.project && (\n <div>\n <h3 className=\"font-medium mb-2 flex items-center gap-xs\">\n <Briefcase className=\"h-icon-xs w-icon-xs\" />\n Project\n </h3>\n <Card className=\"p-sm\">\n <div className=\"flex items-center justify-between\">\n <span className=\"font-medium\">{event.project.name}</span>\n <Badge variant={\n event.project.status === \"active\" ? \"success\" :\n event.project.status === \"planning\" ? \"warning\" :\n event.project.status === \"on_hold\" ? \"secondary\" :\n \"destructive\"\n }>\n {event.project.status}\n </Badge>\n </div>\n </Card>\n </div>\n )}\n\n {/* Broadcast */}\n {event.broadcast_url && (\n <div>\n <h3 className=\"font-medium mb-2 flex items-center gap-xs\">\n <Radio className=\"h-icon-xs w-icon-xs\" />\n Broadcast\n </h3>\n <Card className=\"p-sm\">\n <a\n href={event.broadcast_url as any as any}\n target=\"_blank\"\n rel=\"noopener noreferrer\"\n className=\"text-sm text-primary hover:underline break-all\"\n >\n {event.broadcast_url}\n </a>\n </Card>\n </div>\n )}\n\n {/* Tags */}\n {event.tags && event.tags.length > 0 && (\n <div>\n <h3 className=\"font-medium mb-3 flex items-center gap-xs\">\n <Tag className=\"h-icon-xs w-icon-xs\" />\n Tags\n </h3>\n <div className=\"flex flex-wrap gap-xs\">\n {event.tags.map((tag) => (\n <Badge key={tag} variant=\"secondary\">\n {tag}\n </Badge>\n ))}\n </div>\n </div>\n )}\n\n {/* Resources */}\n {event.resources && event.resources.length > 0 && (\n <div>\n <h3 className=\"font-medium mb-3 flex items-center gap-xs\">\n <Settings className=\"h-icon-xs w-icon-xs\" />\n Resources\n </h3>\n <div className=\"space-y-xs\">\n {event.resources.map((resource, index) => (\n <Card key={index} className=\"p-sm\">\n <div className=\"flex items-center justify-between\">\n <span className=\"text-sm font-medium\">{resource.name}</span>\n <Badge variant=\"outline\">Qty: {resource.quantity}</Badge>\n </div>\n </Card>\n ))}\n </div>\n </div>\n )}\n\n {/* Staffing */}\n {event.staffing && event.staffing.length > 0 && (\n <div>\n <h3 className=\"font-medium mb-3 flex items-center gap-xs\">\n <Users className=\"h-icon-xs w-icon-xs\" />\n Staffing\n </h3>\n <div className=\"space-y-xs\">\n {event.staffing.map((staff, index) => {\n const user = getUserById(staff.user_id);\n \n return (\n <Card key={index} className=\"p-sm\">\n <div className=\"flex items-center justify-between\">\n <div>\n <div className=\"text-sm font-medium\">{staff.role}</div>\n {user && (\n <div className=\"text-xs text-muted-foreground\">\n {user.full_name || user.email}\n </div>\n )}\n {staff.notes && (\n <div className=\"text-xs text-muted-foreground mt-1\">\n {staff.notes}\n </div>\n )}\n </div>\n {user && user.avatar_url && (\n <img\n src={user.avatar_url}\n alt={user.full_name || user.email}\n className=\"h-icon-lg w-icon-lg rounded-full\"\n />\n )}\n </div>\n </Card>\n );\n })}\n </div>\n </div>\n )}\n\n {/* Activity */}\n <div>\n <h3 className=\"font-medium mb-3 flex items-center gap-xs\">\n <Activity className=\"h-icon-xs w-icon-xs\" />\n Activity\n </h3>\n <div className=\"space-y-xs text-sm text-muted-foreground\">\n <div className=\"flex items-center justify-between\">\n <span>Created</span>\n <span>{format(parseISO(event.created_at || event.start_at), \"MMM d, yyyy 'at' h:mm a\")}</span>\n </div>\n <div className=\"flex items-center justify-between\">\n <span>Last Updated</span>\n <span>{format(parseISO(event.updated_at || event.start_at), \"MMM d, yyyy 'at' h:mm a\")}</span>\n </div>\n <div className=\"flex items-center justify-between\">\n <span>Timezone</span>\n <span>{event.timezone || \"UTC\"}</span>\n </div>\n {event.is_all_day && (\n <div className=\"flex items-center justify-between\">\n <span>All Day Event</span>\n <Badge variant=\"secondary\">Yes</Badge>\n </div>\n )}\n </div>\n </div>\n\n {/* Close Button */}\n <div className=\"pt-6 border-t\">\n <Button\n variant=\"outline\"\n className=\"w-full\"\n onClick={() => onOpenChange(false)}\n >\n Close\n </Button>\n </div>\n </div>\n </AppDrawer>\n );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/programming/calendar/lib/calendarService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/programming/calendar/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/programming/calendar/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/programming/calendar/views/ProgrammingCalendarBoardView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/programming/calendar/views/ProgrammingCalendarGridView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/programming/calendar/views/ProgrammingCalendarListView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/programming/calendar/views/ProgrammingCalendarTimelineView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/programming/call-sheets/CallSheetsClient.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadCallSheets'. Either include it or remove the dependency array.","line":95,"column":6,"nodeType":"ArrayExpression","endLine":95,"endColumn":13,"suggestions":[{"desc":"Update the dependencies array to be: [loadCallSheets, orgId]","fix":{"range":[2184,2191],"text":"[loadCallSheets, orgId]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\n\nimport { useEffect, useState } from 'react';\nimport {\n  Drawer,\n  type Button,\n  Card,\n  Badge,\n  StateManagerProvider,\n  DataViewProvider,\n  ViewSwitcher,\n  DataActions,\n  DataGrid,\n  KanbanBoard,\n  ListView,\n  Button\n} from '@ghxstship/ui';\nimport { useTranslations } from 'next-intl';\nimport { createBrowserClient } from '@ghxstship/auth';\nimport { Plus, FileText, Calendar, Clock, Users, CheckCircle } from 'lucide-react';\n\nexport default function CallSheetsClient({ orgId }: { orgId: string }) {\n  const t = useTranslations('programming');\n  const sb = createBrowserClient();\n  \n  const [data, setData] = useState<DataRecord[]>([]);\n  const [loading, setLoading] = useState(false);\n  const [selectedRecord, setSelectedRecord] = useState<any>(null);\n  const [drawerOpen, setDrawerOpen] = useState(false);\n  const [drawerMode, setDrawerMode] = useState<'view' | 'edit' | 'create'>('view');\n\n  // Define field configuration for call sheets\n  const fields: FieldConfig[] = [\n    {\n      key: 'event_name',\n      label: 'Event',\n      type: 'text',\n      sortable: true,\n      filterable: true,\n      width: 200\n    },\n    {\n      key: 'call_date',\n      label: 'Call Date',\n      type: 'date',\n      required: true,\n      sortable: true,\n      filterable: true,\n      width: 130\n    },\n    {\n      key: 'call_time',\n      label: 'Call Time',\n      type: 'text',\n      sortable: true,\n      filterable: true,\n      width: 120\n    },\n    {\n      key: 'location',\n      label: 'Location',\n      type: 'text',\n      sortable: true,\n      filterable: true,\n      width: 150\n    },\n    {\n      key: 'status',\n      label: 'Status',\n      type: 'select',\n      options: [\n        { value: 'draft', label: 'Draft' },\n        { value: 'published', label: 'Published' },\n        { value: 'distributed', label: 'Distributed' },\n        { value: 'completed', label: 'Completed' }\n      ],\n      sortable: true,\n      filterable: true,\n      groupable: true,\n      width: 120\n    },\n    {\n      key: 'created_at',\n      label: 'Created',\n      type: 'date',\n      sortable: true,\n      filterable: true,\n      width: 120\n    }\n  ];\n\n  useEffect(() => {\n    loadCallSheets();\n  }, [orgId]);\n\n  const loadCallSheets = async () => {\n    if (!orgId) return;\n    \n    try {\n      setLoading(true);\n      \n      const { data: callSheetsData, error } = await sb\n        .from('call_sheets')\n        .select(`\n          *,\n          events!inner(\n            name,\n            starts_at,\n            projects!inner(\n              organization_id\n            )\n          )\n        `)\n        .eq('events.projects.organization_id', orgId)\n        .order('call_date', { ascending: false });\n      \n      if (error) throw error;\n      \n      // Transform data to include event name and computed fields\n      const transformedData = (callSheetsData || []).map(callSheet => ({\n        ...callSheet,\n        event_name: callSheet.events?.name || 'Unknown Event',\n        event_date: callSheet.events?.starts_at,\n        status: callSheet.status || 'draft',\n        call_time: callSheet.details?.call_time || 'TBD',\n        location: callSheet.details?.location || 'TBD'\n      }));\n      \n      setData(transformedData);\n    } catch (error) {\n      console.error('Error loading call sheets:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleCreateCallSheet = () => {\n    setSelectedRecord(null);\n    setDrawerMode('create');\n    setDrawerOpen(true);\n  };\n\n  const handleEditCallSheet = (callSheet: any) => {\n    setSelectedRecord(callSheet);\n    setDrawerMode('edit');\n    setDrawerOpen(true);\n  };\n\n  const handleViewCallSheet = (callSheet: any) => {\n    setSelectedRecord(callSheet);\n    setDrawerMode('view');\n    setDrawerOpen(true);\n  };\n\n  const handleSaveCallSheet = async (callSheetData: any) => {\n    try {\n      if (drawerMode === 'create') {\n        const { error } = await sb.from('call_sheets').insert(callSheetData);\n        if (error) throw error;\n      } else if (drawerMode === 'edit') {\n        const { error } = await sb\n          .from('call_sheets')\n          .update(callSheetData)\n          .eq('id', selectedRecord.id);\n        if (error) throw error;\n      }\n      \n      await loadCallSheets();\n      setDrawerOpen(false);\n    } catch (error) {\n      console.error('Error saving call sheet:', error);\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'draft':\n        return 'color-muted bg-secondary';\n      case 'published':\n        return 'color-accent bg-accent/10';\n      case 'distributed':\n        return 'color-success bg-success/10';\n      case 'completed':\n        return 'color-secondary bg-secondary/10';\n      default:\n        return 'color-muted bg-secondary';\n    }\n  };\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case 'completed':\n        return CheckCircle;\n      case 'distributed':\n        return Users;\n      case 'published':\n        return FileText;\n      default:\n        return Clock;\n    }\n  };\n\n  // Configure DataView\n  const config: DataViewConfig = {\n    id: 'call-sheets-management',\n    name: 'Call Sheets Management',\n    viewType: 'grid',\n    defaultView: 'grid',\n    fields,\n    data,\n    \n    onSearch: (query: string) => {\n      console.log('Search call sheets:', query);\n    },\n    onFilter: (filters: any[]) => {\n      console.log('Filter call sheets:', filters);\n    },\n    onSort: (sorts: any[]) => {\n      console.log('Sort call sheets:', sorts);\n    },\n    onRefresh: loadCallSheets,\n    onExport: (data: any[], format: string) => {\n      console.log('Export call sheets:', format, data);\n    },\n    onImport: (data: any[]) => {\n      console.log('Import call sheets:', data);\n    }\n  };\n\n  // Get upcoming call sheets for quick overview\n  const upcomingCallSheets = data\n    .filter(cs => new Date(cs.call_date) >= new Date())\n    .sort((a, b) => new Date(a.call_date).getTime() - new Date(b.call_date).getTime())\n    .slice(0, 3);\n\n  const statusCounts = data.reduce((acc, cs) => {\n    acc[cs.status] = (acc[cs.status] || 0) + 1;\n    return acc;\n  }, {});\n\n  return (\n    <div className=\"stack-md\">\n      <DataViewProvider config={config}>\n        <StateManagerProvider>\n          <div className=\"stack-md\">\n            {/* Header Actions */}\n            <div className=\"flex items-center justify-between mb-md\">\n              <div className=\"flex items-center gap-md\">\n                <h2 className=\"text-body text-heading-4\">Call Sheets Management</h2>\n                <Button>\n                  <Plus className=\"h-icon-xs w-icon-xs mr-sm\" />\n                  Create Call Sheet\n                </Button>\n              </div>\n              <div className=\"flex items-center gap-sm\">\n                <ViewSwitcher />\n                <DataActions />\n              </div>\n            </div>\n\n            {/* Status Overview Cards */}\n            <div className=\"grid grid-cols-1 md:grid-cols-4 gap-md mb-lg\">\n              {[\n                { status: 'draft', label: 'Draft', icon: Clock },\n                { status: 'published', label: 'Published', icon: FileText },\n                { status: 'distributed', label: 'Distributed', icon: Users },\n                { status: 'completed', label: 'Completed', icon: CheckCircle }\n              ].map(({ status, label, icon: IconComponent }) => (\n                <Card key={status} className=\"p-md\">\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center gap-sm\">\n                      <IconComponent className=\"h-icon-xs w-icon-xs\" />\n                      <span className=\"form-label\">{label}</span>\n                    </div>\n                    <Badge variant=\"outline\">\n                      {statusCounts[status] || 0}\n                    </Badge>\n                  </div>\n                </Card>\n              ))}\n            </div>\n\n            {/* Upcoming Call Sheets */}\n            {upcomingCallSheets.length > 0 && (\n              <Card className=\"p-md mb-lg\">\n                <h3 className=\"text-heading-4 mb-sm flex items-center gap-sm\">\n                  <Calendar className=\"h-icon-xs w-icon-xs\" />\n                  Upcoming Call Sheets\n                </h3>\n                <div className=\"stack-sm\">\n                  {upcomingCallSheets.map((callSheet: any) => (\n                    <div\n                      key={callSheet.id}\n                      className=\"flex items-center justify-between p-sm rounded border cursor-pointer hover:bg-secondary/50\"\n                      onClick={() => handleViewCallSheet(callSheet)}\n                    >\n                      <div>\n                        <div className=\"form-label\">{callSheet.event_name}</div>\n                        <div className=\"text-body-sm color-muted flex items-center gap-md\">\n                          <span className=\"flex items-center gap-xs\">\n                            <Calendar className=\"h-3 w-3\" />\n                            {new Date(callSheet.call_date).toLocaleDateString()}\n                          </span>\n                          <span className=\"flex items-center gap-xs\">\n                            <Clock className=\"h-3 w-3\" />\n                            {callSheet.call_time}\n                          </span>\n                          {callSheet.location !== 'TBD' && (\n                            <span>{callSheet.location}</span>\n                          )}\n                        </div>\n                      </div>\n                      <Badge className={getStatusColor(callSheet.status)}>\n                        {callSheet.status}\n                      </Badge>\n                    </div>\n                  ))}\n                </div>\n              </Card>\n            )}\n\n            {/* Data Views */}\n            <DataGrid />\n            \n            <KanbanBoard \n              columns={[\n                { id: 'draft', title: 'Draft' },\n                { id: 'published', title: 'Published' },\n                { id: 'distributed', title: 'Distributed' },\n                { id: 'completed', title: 'Completed' }\n              ]}\n              statusField=\"status\"\n              titleField=\"event_name\"\n              onCardClick={handleViewCallSheet}\n            />\n            \n            <ListView \n              titleField=\"event_name\"\n              subtitleField=\"call_date\"\n              onItemClick={handleViewCallSheet}\n            />\n            \n            {/* Call Sheet Details Drawer */}\n            <Drawer\n              open={drawerOpen}\n              onClose={() => {\n                setDrawerOpen(false);\n                setSelectedRecord(null);\n              }}\n              title={\n                drawerMode === 'create' \n                  ? 'Create Call Sheet' \n                  : `${selectedRecord?.event_name} Call Sheet` || 'Call Sheet Details'\n              }\n            >\n              {/* Custom Call Sheet Details */}\n              {selectedRecord && (\n                <div className=\"stack-md mt-lg\">\n                  <div className=\"grid grid-cols-2 gap-md\">\n                    <div className=\"flex items-center gap-sm text-body-sm color-muted\">\n                      <Calendar className=\"h-icon-xs w-icon-xs\" />\n                      <span>\n                        {new Date(selectedRecord.call_date).toLocaleDateString()}\n                      </span>\n                    </div>\n                    <div className=\"flex items-center gap-sm text-body-sm color-muted\">\n                      <Clock className=\"h-icon-xs w-icon-xs\" />\n                      <span>\n                        {selectedRecord.call_time || 'Call time TBD'}\n                      </span>\n                    </div>\n                  </div>\n                  \n                  {selectedRecord.location && selectedRecord.location !== 'TBD' && (\n                    <div className=\"flex items-center gap-sm text-body-sm color-muted\">\n                      <Users className=\"h-icon-xs w-icon-xs\" />\n                      <span>{selectedRecord.location}</span>\n                    </div>\n                  )}\n                  \n                  <div className=\"pt-md border-t\">\n                    <Badge className={getStatusColor(selectedRecord.status)}>\n                      {selectedRecord.status || 'Draft'}\n                    </Badge>\n                  </div>\n                  \n                  {selectedRecord.details && typeof selectedRecord.details === 'object' && (\n                    <div className=\"pt-md border-t\">\n                      <h4 className=\"form-label mb-sm\">Call Sheet Details</h4>\n                      <div className=\"text-body-sm color-muted bg-secondary/50 p-sm rounded\">\n                        <pre className=\"whitespace-pre-wrap\">\n                          {JSON.stringify(selectedRecord.details, null, 2)}\n                        </pre>\n                      </div>\n                    </div>\n                  )}\n                </div>\n              )}\n            </Drawer>\n\n            {/* Empty State */}\n            {!loading && data.length === 0 && (\n              <Card className=\"p-xl text-center\">\n                <FileText className=\"h-icon-2xl w-icon-2xl mx-auto mb-md color-muted\" />\n                <h3 className=\"text-body text-heading-4 mb-sm\">No Call Sheets Yet</h3>\n                <p className=\"color-muted mb-md\">\n                  Create call sheets to organize production schedules and ensure everyone knows when and where to be.\n                </p>\n                <Button onClick={handleCreateCallSheet}>\n                  <Plus className=\"h-icon-xs w-icon-xs mr-sm\" />\n                  Create First Call Sheet\n                </Button>\n              </Card>\n            )}\n          </div>\n        </StateManagerProvider>\n      </DataViewProvider>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/programming/call-sheets/CreateCallSheetClient.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/programming/call-sheets/ProgrammingCallSheetsClient.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/programming/call-sheets/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/programming/call-sheets/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/programming/create/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/programming/drawers/CreateDrawer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/programming/drawers/EditDrawer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/programming/drawers/ViewDrawer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/programming/drawers/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/programming/error.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/programming/events/CreateEventClient.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/programming/events/EventsClient.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadEvents'. Either include it or remove the dependency array.","line":101,"column":6,"nodeType":"ArrayExpression","endLine":101,"endColumn":13,"suggestions":[{"desc":"Update the dependencies array to be: [loadEvents, orgId]","fix":{"range":[2401,2408],"text":"[loadEvents, orgId]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\n\nimport { useEffect, useState } from 'react';\nimport {\n  Drawer,\n  type Button,\n  StateManagerProvider,\n  DataViewProvider,\n  ViewSwitcher,\n  DataActions,\n  DataGrid,\n  KanbanBoard,\n  CalendarView,\n  ListView,\n  Button\n} from '@ghxstship/ui';\nimport { useTranslations } from 'next-intl';\nimport { createBrowserClient } from '@ghxstship/auth';\nimport { Plus, Calendar, MapPin, Clock } from 'lucide-react';\n\nexport default function EventsClient({ orgId }: { orgId: string }) {\n  const t = useTranslations('programming');\n  const sb = createBrowserClient();\n  \n  const [data, setData] = useState<DataRecord[]>([]);\n  const [loading, setLoading] = useState(false);\n  const [selectedRecord, setSelectedRecord] = useState<any>(null);\n  const [drawerOpen, setDrawerOpen] = useState(false);\n  const [drawerMode, setDrawerMode] = useState<'view' | 'edit' | 'create'>('view');\n\n  // Define field configuration for events\n  const fields: FieldConfig[] = [\n    {\n      key: 'name',\n      label: 'Event Name',\n      type: 'text',\n      required: true,\n      sortable: true,\n      filterable: true,\n      width: 200\n    },\n    {\n      key: 'kind',\n      label: 'Type',\n      type: 'select',\n      options: [\n        { value: 'performance', label: 'Performance' },\n        { value: 'activation', label: 'Activation' },\n        { value: 'workshop', label: 'Workshop' }\n      ],\n      sortable: true,\n      filterable: true,\n      groupable: true,\n      width: 120\n    },\n    {\n      key: 'project_name',\n      label: 'Project',\n      type: 'text',\n      sortable: true,\n      filterable: true,\n      width: 150\n    },\n    {\n      key: 'starts_at',\n      label: 'Start Date',\n      type: 'date',\n      sortable: true,\n      filterable: true,\n      width: 180\n    },\n    {\n      key: 'ends_at',\n      label: 'End Date',\n      type: 'date',\n      sortable: true,\n      filterable: true,\n      width: 180\n    },\n    {\n      key: 'status',\n      label: 'Status',\n      type: 'select',\n      options: [\n        { value: 'draft', label: 'Draft' },\n        { value: 'scheduled', label: 'Scheduled' },\n        { value: 'in_progress', label: 'In Progress' },\n        { value: 'completed', label: 'Completed' },\n        { value: 'cancelled', label: 'Cancelled' }\n      ],\n      sortable: true,\n      filterable: true,\n      groupable: true,\n      width: 120\n    }\n  ];\n\n  useEffect(() => {\n    loadEvents();\n  }, [orgId]);\n\n  const loadEvents = async () => {\n    if (!orgId) return;\n    \n    try {\n      setLoading(true);\n      \n      const { data: eventsData, error } = await sb\n        .from('events')\n        .select(`\n          *,\n          projects!inner(\n            name,\n            organization_id\n          ),\n          lineups(count),\n          riders(count),\n          call_sheets(count)\n        `)\n        .eq('projects.organization_id', orgId)\n        .order('starts_at', { ascending: false });\n      \n      if (error) throw error;\n      \n      // Transform data to include project name and computed status\n      const transformedData = (eventsData || []).map(event => ({\n        ...event,\n        project_name: event.projects?.name || 'Unknown Project',\n        status: computeEventStatus(event),\n        lineups_count: event.lineups?.[0]?.count || 0,\n        riders_count: event.riders?.[0]?.count || 0,\n        call_sheets_count: event.call_sheets?.[0]?.count || 0\n      }));\n      \n      setData(transformedData);\n    } catch (error) {\n      console.error('Error loading events:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const computeEventStatus = (event: any) => {\n    const now = new Date();\n    const startDate = event.starts_at ? new Date(event.starts_at) : null;\n    const endDate = event.ends_at ? new Date(event.ends_at) : null;\n\n    if (!startDate) return 'draft';\n    if (startDate > now) return 'scheduled';\n    if (endDate && endDate < now) return 'completed';\n    if (startDate <= now && (!endDate || endDate >= now)) return 'in_progress';\n    \n    return 'draft';\n  };\n\n  const handleCreateEvent = () => {\n    setSelectedRecord(null);\n    setDrawerMode('create');\n    setDrawerOpen(true);\n  };\n\n  const handleEditEvent = (event: any) => {\n    setSelectedRecord(event);\n    setDrawerMode('edit');\n    setDrawerOpen(true);\n  };\n\n  const handleViewEvent = (event: any) => {\n    setSelectedRecord(event);\n    setDrawerMode('view');\n    setDrawerOpen(true);\n  };\n\n  const handleSaveEvent = async (eventData: any) => {\n    try {\n      if (drawerMode === 'create') {\n        const { error } = await sb.from('events').insert(eventData);\n        if (error) throw error;\n      } else if (drawerMode === 'edit') {\n        const { error } = await sb\n          .from('events')\n          .update(eventData)\n          .eq('id', selectedRecord.id);\n        if (error) throw error;\n      }\n      \n      await loadEvents();\n      setDrawerOpen(false);\n    } catch (error) {\n      console.error('Error saving event:', error);\n    }\n  };\n\n  // Configure DataView\n  const config: DataViewConfig = {\n    id: 'events-management',\n    name: 'Events Management',\n    viewType: 'grid',\n    defaultView: 'grid',\n    fields,\n    data,\n    \n    onSearch: (query: string) => {\n      console.log('Search events:', query);\n    },\n    onFilter: (filters: any[]) => {\n      console.log('Filter events:', filters);\n    },\n    onSort: (sorts: any[]) => {\n      console.log('Sort events:', sorts);\n    },\n    onRefresh: loadEvents,\n    onExport: (data: any[], format: string) => {\n      console.log('Export events:', format, data);\n    },\n    onImport: (data: any[]) => {\n      console.log('Import events:', data);\n    }\n  };\n\n  return (\n    <div className=\"stack-md\">\n      <DataViewProvider config={config}>\n        <StateManagerProvider>\n          <div className=\"stack-md\">\n            {/* Header Actions */}\n            <div className=\"flex items-center justify-between mb-md\">\n              <div className=\"flex items-center gap-md\">\n                <h2 className=\"text-body text-heading-4\">Events Management</h2>\n                <Button>\n                  <Plus className=\"h-icon-xs w-icon-xs mr-sm\" />\n                  Create Event\n                </Button>\n              </div>\n              <div className=\"flex items-center gap-sm\">\n                <ViewSwitcher />\n                <DataActions />\n              </div>\n            </div>\n\n            {/* Data Views */}\n            <DataGrid />\n            \n            <KanbanBoard \n              columns={[\n                { id: 'draft', title: 'Draft' },\n                { id: 'scheduled', title: 'Scheduled' },\n                { id: 'in_progress', title: 'In Progress' },\n                { id: 'completed', title: 'Completed' },\n                { id: 'cancelled', title: 'Cancelled' }\n              ]}\n              statusField=\"status\"\n              titleField=\"name\"\n              onCardClick={handleViewEvent}\n            />\n            \n            <CalendarView \n              startDateField=\"starts_at\"\n              endDateField=\"ends_at\"\n              titleField=\"name\"\n              \n            />\n            \n            <ListView \n              titleField=\"name\"\n              subtitleField=\"project_name\"\n              onItemClick={handleViewEvent}\n            />\n            \n            {/* Event Details Drawer */}\n            <Drawer\n              open={drawerOpen}\n              onClose={() => {\n                setDrawerOpen(false);\n                setSelectedRecord(null);\n              }}\n              title={\n                drawerMode === 'create' \n                  ? 'Create Event' \n                  : selectedRecord?.name || 'Event Details'\n              }\n            >\n              {/* Custom Event Details */}\n              {selectedRecord && (\n                <div className=\"stack-md mt-lg\">\n                  <div className=\"grid grid-cols-2 gap-md\">\n                    <div className=\"flex items-center gap-sm text-body-sm color-muted\">\n                      <Calendar className=\"h-icon-xs w-icon-xs\" />\n                      <span>\n                        {selectedRecord.starts_at \n                          ? new Date(selectedRecord.starts_at).toLocaleDateString()\n                          : 'No start date'\n                        }\n                      </span>\n                    </div>\n                    <div className=\"flex items-center gap-sm text-body-sm color-muted\">\n                      <Clock className=\"h-icon-xs w-icon-xs\" />\n                      <span>\n                        {selectedRecord.starts_at \n                          ? new Date(selectedRecord.starts_at).toLocaleTimeString()\n                          : 'No start time'\n                        }\n                      </span>\n                    </div>\n                  </div>\n                  \n                  <div className=\"grid grid-cols-3 gap-md pt-md border-t\">\n                    <div className=\"text-center\">\n                      <div className=\"text-heading-3 text-heading-3\">{selectedRecord.lineups_count || 0}</div>\n                      <div className=\"text-body-sm color-muted\">Lineups</div>\n                    </div>\n                    <div className=\"text-center\">\n                      <div className=\"text-heading-3 text-heading-3\">{selectedRecord.riders_count || 0}</div>\n                      <div className=\"text-body-sm color-muted\">Riders</div>\n                    </div>\n                    <div className=\"text-center\">\n                      <div className=\"text-heading-3 text-heading-3\">{selectedRecord.call_sheets_count || 0}</div>\n                      <div className=\"text-body-sm color-muted\">Call Sheets</div>\n                    </div>\n                  </div>\n                </div>\n              )}\n            </Drawer>\n          </div>\n        </StateManagerProvider>\n      </DataViewProvider>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/programming/events/ProgrammingEventsClient.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/programming/events/drawers/CreateProgrammingEventDrawer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/programming/events/drawers/EditProgrammingEventDrawer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/programming/events/drawers/ViewProgrammingEventDrawer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/programming/events/lib/eventsService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/programming/events/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/programming/events/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/programming/events/views/ProgrammingEventsBoardView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/programming/events/views/ProgrammingEventsCalendarView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/programming/events/views/ProgrammingEventsListView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/programming/events/views/ProgrammingEventsTimelineView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/programming/itineraries/CreateItineraryClient.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/programming/itineraries/ItinerariesClient.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchItineraries'. Either include it or remove the dependency array.","line":66,"column":6,"nodeType":"ArrayExpression","endLine":66,"endColumn":13,"suggestions":[{"desc":"Update the dependencies array to be: [fetchItineraries, orgId]","fix":{"range":[1815,1822],"text":"[fetchItineraries, orgId]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\n\nimport React, { useState, useEffect } from 'react';\nimport { Plus, Search, Calendar } from 'lucide-react';\nimport {\n  Badge,\n  Button,\n  Drawer,\n  DrawerContent,\n  DrawerDescription,\n  DrawerFooter,\n  DrawerHeader,\n  DrawerTitle,\n  Input\n} from \"@ghxstship/ui\";\nimport { UnifiedInput } from '@ghxstship/ui';\nimport { Badge } from '@ghxstship/ui';\nimport { Drawer } from '@ghxstship/ui';\nimport { EmptyState } from '@ghxstship/ui';\nimport { createServerClient } from '@ghxstship/auth';\n\n// Types\ninterface Itinerary {\n  id: string;\n  name: string;\n  description?: string;\n  type: 'business' | 'personal' | 'crew' | 'training' | 'event';\n  status: 'draft' | 'confirmed' | 'in_progress' | 'completed' | 'cancelled';\n  start_date: string;\n  end_date: string;\n  created_at: string;\n  updated_at: string;\n  user_id: string;\n  org_id: string;\n}\n\ninterface ItinerariesClientProps {\n  user;\n  orgId: string;\n}\n\n// Constants\nconst ITINERARY_STATUSES = [\n  { value: 'draft', label: 'Draft', color: 'default' as const },\n  { value: 'confirmed', label: 'Confirmed', color: 'info' as const },\n  { value: 'in_progress', label: 'In Progress', color: 'warning' as const },\n  { value: 'completed', label: 'Completed', color: 'success' as const },\n  { value: 'cancelled', label: 'Cancelled', color: 'destructive' as const }\n];\n\nexport default function ItinerariesClient({ user, orgId }: ItinerariesClientProps) {\n  const [itineraries, setItineraries] = useState<Itinerary[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [isCreateOpen, setIsCreateOpen] = useState(false);\n\n  const supabase = createServerClient({\n    get: () => ({ name: '', value: '' }),\n    set: () => {},\n    remove: () => {}\n  });\n\n  useEffect(() => {\n    fetchItineraries();\n  }, [orgId]);\n\n  const fetchItineraries = async () => {\n    try {\n      setLoading(true);\n      const { data, error } = await supabase\n        .from('itineraries')\n        .select('*')\n        .eq('org_id', orgId)\n        .order('created_at', { ascending: false });\n\n      if (error) throw error;\n      setItineraries(data || []);\n    } catch (error) {\n      console.error('Error fetching itineraries:', error);\n      console.error('Failed to load itineraries');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleCreate = () => {\n    setIsCreateOpen(true);\n  };\n\n  const getStatusColor = (status: string): import('@ghxstship/ui').BadgeProps['variant'] => {\n    const statusConfig = ITINERARY_STATUSES.find(s => s.value === status);\n    return statusConfig?.color || 'default';\n  };\n\n  // Filter itineraries\n  const filteredItineraries = itineraries.filter(itinerary => {\n    const matchesSearch = itinerary.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         itinerary.description?.toLowerCase().includes(searchTerm.toLowerCase());\n    return matchesSearch;\n  });\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center h-container-sm\">\n        <div className=\"animate-spin rounded-full h-icon-lg w-icon-lg border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"stack-lg\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-heading-3 text-heading-3\">Itineraries</h1>\n          <p className=\"color-muted\">\n            Manage travel schedules and itineraries\n          </p>\n        </div>\n        <Button onClick={handleCreate} className=\"flex items-center gap-sm\">\n          <Plus className=\"h-icon-xs w-icon-xs\" />\n          New Itinerary\n        </Button>\n      </div>\n\n      {/* Search */}\n      <div className=\"flex-1\">\n        <div className=\"relative\">\n          <Search className=\"absolute left-3 top-xs/2 transform -translate-y-1/2 color-muted h-icon-xs w-icon-xs\" />\n          <Input             placeholder=\"Search itineraries...\"\n            value={searchTerm}\n            onChange={(e: React.ChangeEvent<HTMLInputElement>) => setSearchTerm(e.target.value)}\n            className=\"pl-2xl\"\n          />\n        </div>\n      </div>\n\n      {/* Data Views */}\n      {filteredItineraries.length === 0 ? (\n        <EmptyState\n          icon={<Plus />}\n          title=\"No itineraries found\"\n          description=\"Create your first itinerary to get started with travel and schedule management.\"\n        />\n      ) : (\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-md mt-md\">\n          {filteredItineraries.map((itinerary: any) => (\n            <div key={itinerary.id} className=\"p-md border rounded-lg hover:shadow-elevated transition-shadow cursor-pointer\">\n              <div className=\"flex items-start justify-between mb-sm\">\n                <h3 className=\"form-label\">{itinerary.name}</h3>\n                <Badge variant={getStatusColor(itinerary.status)}>\n                  {itinerary.status}\n                </Badge>\n              </div>\n              {itinerary.description && (\n                <p className=\"text-body-sm color-muted mb-sm\">{itinerary.description}</p>\n              )}\n              <div className=\"flex items-center gap-sm text-body-sm color-muted\">\n                <Calendar className=\"h-3 w-3\" />\n                {new Date(itinerary.start_date).toLocaleDateString()} - {new Date(itinerary.end_date).toLocaleDateString()}\n              </div>\n            </div>\n          ))}\n        </div>\n      )}\n\n      {/* Create Drawer */}\n      <Drawer\n        open={isCreateOpen}\n        onClose={() => setIsCreateOpen(false)}\n        title=\"Create Itinerary\"\n      >\n        <div>Create form placeholder</div>\n      </Drawer>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/programming/itineraries/ProgrammingItinerariesClient.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/programming/itineraries/drawers/CreateProgrammingItineraryDrawer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/programming/itineraries/drawers/EditProgrammingItineraryDrawer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/programming/itineraries/drawers/ViewProgrammingItineraryDrawer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/programming/itineraries/lib/itinerariesService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/programming/itineraries/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/programming/itineraries/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/programming/itineraries/views/ProgrammingItinerariesCalendarView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/programming/itineraries/views/ProgrammingItinerariesListView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/programming/itineraries/views/ProgrammingItinerariesMapView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/programming/itineraries/views/ProgrammingItinerariesTimelineView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/programming/lib/api.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/programming/lib/export.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/programming/lib/import.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/programming/lib/mutations.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/programming/lib/permissions.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/programming/lib/programming-service.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/programming/lib/queries.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/programming/lib/realtime.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/programming/lib/validations.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/programming/lineups/CreateLineupClient.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/programming/lineups/LineupsClient.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadLineups'. Either include it or remove the dependency array.","line":94,"column":6,"nodeType":"ArrayExpression","endLine":94,"endColumn":13,"suggestions":[{"desc":"Update the dependencies array to be: [loadLineups, orgId]","fix":{"range":[2134,2141],"text":"[loadLineups, orgId]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\n\nimport { useEffect, useState } from 'react';\nimport {\n  Drawer,\n  type Button,\n  Card,\n  Badge,\n  StateManagerProvider,\n  DataViewProvider,\n  ViewSwitcher,\n  DataActions,\n  DataGrid,\n  ListView,\n  Button\n} from '@ghxstship/ui';\nimport { useTranslations } from 'next-intl';\nimport { createBrowserClient } from '@ghxstship/auth';\nimport { Plus, Users, Clock, Calendar, Music, MapPin } from 'lucide-react';\n\nexport default function LineupsClient({ orgId }: { orgId: string }) {\n  const t = useTranslations('programming');\n  const sb = createBrowserClient();\n  \n  const [data, setData] = useState<DataRecord[]>([]);\n  const [loading, setLoading] = useState(false);\n  const [selectedRecord, setSelectedRecord] = useState<any>(null);\n  const [drawerOpen, setDrawerOpen] = useState(false);\n  const [drawerMode, setDrawerMode] = useState<'view' | 'edit' | 'create'>('view');\n\n  // Define field configuration for lineups\n  const fields: FieldConfig[] = [\n    {\n      key: 'performer',\n      label: 'Performer',\n      type: 'text',\n      required: true,\n      sortable: true,\n      filterable: true,\n      width: 200\n    },\n    {\n      key: 'event_name',\n      label: 'Event',\n      type: 'text',\n      sortable: true,\n      filterable: true,\n      width: 180\n    },\n    {\n      key: 'stage',\n      label: 'Stage/Location',\n      type: 'text',\n      sortable: true,\n      filterable: true,\n      groupable: true,\n      width: 150\n    },\n    {\n      key: 'set_time',\n      label: 'Set Time',\n      type: 'text',\n      sortable: true,\n      filterable: true,\n      width: 120\n    },\n    {\n      key: 'duration',\n      label: 'Duration (min)',\n      type: 'number',\n      sortable: true,\n      filterable: true,\n      width: 120\n    },\n    {\n      key: 'status',\n      label: 'Status',\n      type: 'select',\n      options: [\n        { value: 'confirmed', label: 'Confirmed' },\n        { value: 'tentative', label: 'Tentative' },\n        { value: 'cancelled', label: 'Cancelled' }\n      ],\n      sortable: true,\n      filterable: true,\n      groupable: true,\n      width: 120\n    }\n  ];\n\n  useEffect(() => {\n    loadLineups();\n  }, [orgId]);\n\n  const loadLineups = async () => {\n    if (!orgId) return;\n    \n    try {\n      setLoading(true);\n      \n      const { data: lineupsData, error } = await sb\n        .from('lineups')\n        .select(`\n          *,\n          events!inner(\n            name,\n            starts_at,\n            projects!inner(\n              organization_id\n            )\n          )\n        `)\n        .eq('events.projects.organization_id', orgId)\n        .order('set_time', { ascending: true });\n      \n      if (error) throw error;\n      \n      // Transform data to include event name and computed fields\n      const transformedData = (lineupsData || []).map(lineup => ({\n        ...lineup,\n        event_name: lineup.events?.name || 'Unknown Event',\n        event_date: lineup.events?.starts_at,\n        status: lineup.status || 'tentative'\n      }));\n      \n      setData(transformedData);\n    } catch (error) {\n      console.error('Error loading lineups:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleCreateLineup = () => {\n    setSelectedRecord(null);\n    setDrawerMode('create');\n    setDrawerOpen(true);\n  };\n\n  const handleEditLineup = (lineup: any) => {\n    setSelectedRecord(lineup);\n    setDrawerMode('edit');\n    setDrawerOpen(true);\n  };\n\n  const handleViewLineup = (lineup: any) => {\n    setSelectedRecord(lineup);\n    setDrawerMode('view');\n    setDrawerOpen(true);\n  };\n\n  const handleSaveLineup = async (lineupData: any) => {\n    try {\n      if (drawerMode === 'create') {\n        const { error } = await sb.from('lineups').insert(lineupData);\n        if (error) throw error;\n      } else if (drawerMode === 'edit') {\n        const { error } = await sb\n          .from('lineups')\n          .update(lineupData)\n          .eq('id', selectedRecord.id);\n        if (error) throw error;\n      }\n      \n      await loadLineups();\n      setDrawerOpen(false);\n    } catch (error) {\n      console.error('Error saving lineup:', error);\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'confirmed':\n        return 'color-success bg-success/10';\n      case 'tentative':\n        return 'color-warning bg-warning/10';\n      case 'cancelled':\n        return 'color-destructive bg-destructive/10';\n      default:\n        return 'color-muted bg-secondary/10';\n    }\n  };\n\n  // Configure DataView\n  const config: DataViewConfig = {\n    id: 'lineups-management',\n    name: 'Lineups Management',\n    viewType: 'grid',\n    defaultView: 'grid',\n    fields,\n    data,\n    \n    onSearch: (query: string) => {\n      console.log('Search lineups:', query);\n    },\n    onFilter: (filters: any[]) => {\n      console.log('Filter lineups:', filters);\n    },\n    onSort: (sorts: any[]) => {\n      console.log('Sort lineups:', sorts);\n    },\n    onRefresh: loadLineups,\n    onExport: (data: any[], format: string) => {\n      console.log('Export lineups:', format, data);\n    },\n    onImport: (data: any[]) => {\n      console.log('Import lineups:', data);\n    }\n  };\n\n  // Group lineups by stage for better visualization\n  const lineupsByStage = data.reduce((acc, lineup) => {\n    const stage = lineup.stage || 'Unassigned';\n    if (!acc[stage]) {\n      acc[stage] = [];\n    }\n    acc[stage].push(lineup);\n    return acc;\n  }, {});\n\n  return (\n    <div className=\"stack-md\">\n      <DataViewProvider config={config}>\n        <StateManagerProvider>\n          <div className=\"stack-md\">\n            {/* Header Actions */}\n            <div className=\"flex items-center justify-between mb-md\">\n              <div className=\"flex items-center gap-md\">\n                <h2 className=\"text-body text-heading-4\">Lineups Management</h2>\n                <Button>\n                  <Plus className=\"h-icon-xs w-icon-xs mr-sm\" />\n                  Add Performer\n                </Button>\n              </div>\n              <div className=\"flex items-center gap-sm\">\n                <ViewSwitcher />\n                <DataActions />\n              </div>\n            </div>\n\n            {/* Stage Overview Cards */}\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-md mb-lg\">\n              {Object.entries(lineupsByStage).map(([stage, stageLineups]: [string, any]) => (\n                <Card key={stage} className=\"p-md\">\n                  <div className=\"flex items-center justify-between mb-sm\">\n                    <h3 className=\"text-heading-4 flex items-center gap-sm\">\n                      <MapPin className=\"h-icon-xs w-icon-xs\" />\n                      {stage}\n                    </h3>\n                    <Badge variant=\"secondary\">\n                      {stageLineups.length} performers\n                    </Badge>\n                  </div>\n                  \n                  <div className=\"stack-sm\">\n                    {stageLineups.slice(0, 3).map((lineup: any) => (\n                      <div\n                        key={lineup.id}\n                        className=\"flex items-center justify-between text-body-sm p-sm rounded border cursor-pointer hover:bg-secondary/50\"\n                        onClick={() => handleViewLineup(lineup)}\n                      >\n                        <div>\n                          <div className=\"form-label\">{lineup.performer}</div>\n                          <div className=\"color-muted flex items-center gap-sm\">\n                            <Clock className=\"h-3 w-3\" />\n                            {lineup.set_time || 'TBD'}\n                            {lineup.duration && (\n                              <span>({lineup.duration}min)</span>\n                            )}\n                          </div>\n                        </div>\n                        <Badge variant=\"outline\">\n                          {lineup.status}\n                        </Badge>\n                      </div>\n                    ))}\n                    \n                    {stageLineups.length > 3 && (\n                      <div className=\"text-body-sm color-muted text-center pt-sm\">\n                        +{stageLineups.length - 3} more performers\n                      </div>\n                    )}\n                  </div>\n                </Card>\n              ))}\n            </div>\n\n            {/* Data Views */}\n            <DataGrid />\n            \n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-md mt-md\">\n              {data.map((lineup: any) => (\n                <div key={lineup.id} className=\"p-md border rounded-lg hover:shadow-elevated transition-shadow cursor-pointer\" onClick={() => handleViewLineup(lineup)}>\n                  <h3 className=\"form-label\">{lineup.performer}</h3>\n                  <p className=\"text-body-sm color-muted\">{lineup.stage}</p>\n                </div>\n              ))}\n            </div>\n            \n            <ListView \n              titleField=\"performer\"\n              subtitleField=\"event_name\"\n              onItemClick={handleViewLineup}\n            />\n            \n            {/* Lineup Details Drawer */}\n            <Drawer\n              open={drawerOpen}\n              onClose={() => {\n                setDrawerOpen(false);\n                setSelectedRecord(null);\n              }}\n              title={\n                drawerMode === 'create' \n                  ? 'Add Performer to Lineup' \n                  : selectedRecord?.performer || 'Lineup Details'\n              }\n            >\n              {/* Custom Lineup Details */}\n              {selectedRecord && (\n                <div className=\"stack-md mt-lg\">\n                  <div className=\"grid grid-cols-2 gap-md\">\n                    <div className=\"flex items-center gap-sm text-body-sm color-muted\">\n                      <Calendar className=\"h-icon-xs w-icon-xs\" />\n                      <span>\n                        {selectedRecord.event_date \n                          ? new Date(selectedRecord.event_date).toLocaleDateString()\n                          : 'No event date'\n                        }\n                      </span>\n                    </div>\n                    <div className=\"flex items-center gap-sm text-body-sm color-muted\">\n                      <Clock className=\"h-icon-xs w-icon-xs\" />\n                      <span>\n                        {selectedRecord.set_time || 'Set time TBD'}\n                      </span>\n                    </div>\n                  </div>\n                  \n                  <div className=\"flex items-center gap-sm text-body-sm color-muted\">\n                    <MapPin className=\"h-icon-xs w-icon-xs\" />\n                    <span>{selectedRecord.stage || 'Stage TBD'}</span>\n                  </div>\n                  \n                  {selectedRecord.duration && (\n                    <div className=\"flex items-center gap-sm text-body-sm color-muted\">\n                      <Music className=\"h-icon-xs w-icon-xs\" />\n                      <span>{selectedRecord.duration} minute set</span>\n                    </div>\n                  )}\n                  \n                  <div className=\"pt-md border-t\">\n                    <Badge className={getStatusColor(selectedRecord.status)}>\n                      {selectedRecord.status?.replace('_', ' ') || 'Status Unknown'}\n                    </Badge>\n                  </div>\n                </div>\n              )}\n            </Drawer>\n\n            {/* Empty State */}\n            {!loading && data.length === 0 && (\n              <Card className=\"p-xl text-center\">\n                <Users className=\"h-icon-2xl w-icon-2xl mx-auto mb-md color-muted\" />\n                <h3 className=\"text-body text-heading-4 mb-sm\">No Lineups Yet</h3>\n                <p className=\"color-muted mb-md\">\n                  Start building your event lineups by adding performers and their set times.\n                </p>\n                <Button onClick={handleCreateLineup}>\n                  <Plus className=\"h-icon-xs w-icon-xs mr-sm\" />\n                  Add First Performer\n                </Button>\n              </Card>\n            )}\n          </div>\n        </StateManagerProvider>\n      </DataViewProvider>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/programming/lineups/ProgrammingLineupsClient.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/programming/lineups/drawers/CreateProgrammingLineupDrawer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/programming/lineups/drawers/EditProgrammingLineupDrawer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/programming/lineups/drawers/ViewProgrammingLineupDrawer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/programming/lineups/lib/lineupsService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/programming/lineups/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/programming/lineups/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/programming/lineups/views/ProgrammingLineupsGridView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/programming/lineups/views/ProgrammingLineupsListView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/programming/lineups/views/ProgrammingLineupsScheduleView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/programming/lineups/views/ProgrammingLineupsTimelineView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/programming/loading.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/programming/metadata.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/programming/not-found.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/programming/overview/ProgrammingClient.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/programming/overview/ProgrammingOverviewClient.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/programming/overview/lib/overviewService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/programming/overview/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/programming/overview/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/programming/overview/views/ProgrammingOverviewAnalyticsView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/programming/overview/views/ProgrammingOverviewDashboardView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/programming/overview/views/ProgrammingOverviewGridView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/programming/overview/views/ProgrammingOverviewTimelineView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/programming/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/programming/performances/CreatePerformanceClient.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/programming/performances/PerformancesClient.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadPerformances'. Either include it or remove the dependency array.","line":122,"column":6,"nodeType":"ArrayExpression","endLine":122,"endColumn":13,"suggestions":[{"desc":"Update the dependencies array to be: [loadPerformances, orgId]","fix":{"range":[2625,2632],"text":"[loadPerformances, orgId]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\n\nimport { useEffect, useState } from 'react';\nimport {\n  Drawer,\n  type Button,\n  Card,\n  Badge,\n  StateManagerProvider,\n  DataViewProvider,\n  ViewSwitcher,\n  DataActions,\n  DataGrid,\n  KanbanBoard,\n  CalendarView,\n  ListView,\n  Button\n} from '@ghxstship/ui';\nimport { useTranslations } from 'next-intl';\nimport { createBrowserClient } from '@ghxstship/auth';\nimport { \n  Plus, \n  Calendar, \n  Clock, \n  Users, \n  Music, \n  Mic,\n  Star,\n  MapPin,\n  FileText\n} from 'lucide-react';\n\nexport default function PerformancesClient({ orgId }: { orgId: string }) {\n  const t = useTranslations('programming');\n  const sb = createBrowserClient();\n  \n  const [data, setData] = useState<DataRecord[]>([]);\n  const [loading, setLoading] = useState(false);\n  const [selectedRecord, setSelectedRecord] = useState<any>(null);\n  const [drawerOpen, setDrawerOpen] = useState(false);\n  const [drawerMode, setDrawerMode] = useState<'view' | 'edit' | 'create'>('view');\n\n  // Define field configuration for performances\n  const fields: FieldConfig[] = [\n    {\n      key: 'name',\n      label: 'Performance Name',\n      type: 'text',\n      required: true,\n      sortable: true,\n      filterable: true,\n      width: 200\n    },\n    {\n      key: 'project_name',\n      label: 'Project',\n      type: 'text',\n      sortable: true,\n      filterable: true,\n      width: 150\n    },\n    {\n      key: 'starts_at',\n      label: 'Performance Date',\n      type: 'date',\n      sortable: true,\n      filterable: true,\n      width: 180\n    },\n    {\n      key: 'duration_minutes',\n      label: 'Duration (min)',\n      type: 'number',\n      sortable: true,\n      filterable: true,\n      width: 120\n    },\n    {\n      key: 'venue',\n      label: 'Venue',\n      type: 'text',\n      sortable: true,\n      filterable: true,\n      width: 150\n    },\n    {\n      key: 'status',\n      label: 'Status',\n      type: 'select',\n      options: [\n        { value: 'planning', label: 'Planning' },\n        { value: 'rehearsal', label: 'Rehearsal' },\n        { value: 'ready', label: 'Ready' },\n        { value: 'live', label: 'Live' },\n        { value: 'completed', label: 'Completed' },\n        { value: 'cancelled', label: 'Cancelled' }\n      ],\n      sortable: true,\n      filterable: true,\n      groupable: true,\n      width: 120\n    },\n    {\n      key: 'lineup_count',\n      label: 'Performers',\n      type: 'number',\n      sortable: true,\n      width: 100\n    },\n    {\n      key: 'technical_requirements',\n      label: 'Tech Requirements',\n      type: 'text',\n      filterable: true,\n      width: 180\n    }\n  ];\n\n  useEffect(() => {\n    loadPerformances();\n  }, [orgId]);\n\n  const loadPerformances = async () => {\n    if (!orgId) return;\n    \n    try {\n      setLoading(true);\n      \n      const { data: performancesData, error } = await sb\n        .from('events')\n        .select(`\n          *,\n          projects!inner(\n            name,\n            organization_id\n          ),\n          lineups(\n            id,\n            performer,\n            stage,\n            start_time,\n            end_time\n          ),\n          riders(\n            id,\n            kind,\n            details\n          ),\n          call_sheets(\n            id,\n            call_date,\n            details\n          )\n        `)\n        .eq('kind', 'performance')\n        .eq('projects.organization_id', orgId)\n        .order('starts_at', { ascending: false });\n      \n      if (error) throw error;\n      \n      // Transform data to include computed fields\n      const transformedData = (performancesData || []).map(performance => {\n        const duration = performance.ends_at && performance.starts_at \n          ? Math.round((new Date(performance.ends_at).getTime() - new Date(performance.starts_at).getTime()) / (1000 * 60))\n          : null;\n          \n        return {\n          ...performance,\n          project_name: performance.projects?.name || 'Unknown Project',\n          status: computePerformanceStatus(performance),\n          duration_minutes: duration,\n          lineup_count: performance.lineups?.length || 0,\n          riders_count: performance.riders?.length || 0,\n          call_sheets_count: performance.call_sheets?.length || 0,\n          venue: performance.location || 'TBD',\n          technical_requirements: performance.riders?.find((r: any) => r.kind === 'technical')?.details?.summary || 'None specified'\n        };\n      });\n      \n      setData(transformedData);\n    } catch (error) {\n      console.error('Error loading performances:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const computePerformanceStatus = (performance: any) => {\n    const now = new Date();\n    const startDate = performance.starts_at ? new Date(performance.starts_at) : null;\n    const endDate = performance.ends_at ? new Date(performance.ends_at) : null;\n\n    if (!startDate) return 'planning';\n    \n    // Check if performance is happening now\n    if (startDate <= now && (!endDate || endDate >= now)) return 'live';\n    \n    // Check if performance is completed\n    if (endDate && endDate < now) return 'completed';\n    \n    // Check if performance is soon (within 2 hours)\n    const twoHoursFromNow = new Date(now.getTime() + 2 * 60 * 60 * 1000);\n    if (startDate <= twoHoursFromNow && startDate > now) return 'ready';\n    \n    // Check if we have lineups (indicates rehearsal stage)\n    if (performance.lineups && performance.lineups.length > 0) return 'rehearsal';\n    \n    return 'planning';\n  };\n\n  const handleCreatePerformance = () => {\n    setSelectedRecord(null);\n    setDrawerMode('create');\n    setDrawerOpen(true);\n  };\n\n  const handleEditPerformance = (performance: any) => {\n    setSelectedRecord(performance);\n    setDrawerMode('edit');\n    setDrawerOpen(true);\n  };\n\n  const handleViewPerformance = (performance: any) => {\n    setSelectedRecord(performance);\n    setDrawerMode('view');\n    setDrawerOpen(true);\n  };\n\n  const handleSavePerformance = async (performanceData: any) => {\n    try {\n      const eventData = {\n        ...performanceData,\n        kind: 'performance'\n      };\n      \n      if (drawerMode === 'create') {\n        const { error } = await sb.from('events').insert(eventData);\n        if (error) throw error;\n      } else if (drawerMode === 'edit') {\n        const { error } = await sb\n          .from('events')\n          .update(eventData)\n          .eq('id', selectedRecord.id);\n        if (error) throw error;\n      }\n      \n      await loadPerformances();\n      setDrawerOpen(false);\n    } catch (error) {\n      console.error('Error saving performance:', error);\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'planning':\n        return 'color-muted bg-secondary/50';\n      case 'rehearsal':\n        return 'color-warning bg-warning/10';\n      case 'ready':\n        return 'color-accent bg-accent/10';\n      case 'live':\n        return 'color-success bg-success/10';\n      case 'completed':\n        return 'color-secondary bg-secondary/10';\n      case 'cancelled':\n        return 'color-destructive bg-destructive/10';\n      default:\n        return 'color-muted bg-secondary/50';\n    }\n  };\n\n  // Configure DataView\n  const config: DataViewConfig = {\n    id: 'performances-management',\n    name: 'Performances Management',\n    viewType: 'grid',\n    defaultView: 'grid',\n    fields,\n    data,\n    \n    onSearch: (query: string) => {\n      console.log('Search performances:', query);\n    },\n    onFilter: (filters: any[]) => {\n      console.log('Filter performances:', filters);\n    },\n    onSort: (sorts: any[]) => {\n      console.log('Sort performances:', sorts);\n    },\n    onRefresh: loadPerformances,\n    onExport: (data: any[], format: string) => {\n      console.log('Export performances:', format, data);\n    },\n    onImport: (data: any[]) => {\n      console.log('Import performances:', data);\n    }\n  };\n\n  return (\n    <div className=\"stack-md\">\n      <DataViewProvider config={config}>\n        <StateManagerProvider>\n          <div className=\"stack-md\">\n            {/* Header Actions */}\n            <div className=\"flex items-center justify-between mb-md\">\n              <div className=\"flex items-center gap-md\">\n                <h2 className=\"text-body text-heading-4\">Performance Management</h2>\n                <Button>\n                  <Plus className=\"h-icon-xs w-icon-xs mr-sm\" />\n                  Create Performance\n                </Button>\n              </div>\n              <div className=\"flex items-center gap-sm\">\n                <ViewSwitcher />\n                <DataActions />\n              </div>\n            </div>\n\n            {/* Performance Stats */}\n            <div className=\"grid grid-cols-1 md:grid-cols-4 gap-md mb-lg\">\n              <Card className=\"p-md\">\n                <div className=\"flex items-center gap-sm\">\n                  <div className=\"p-sm bg-accent/10 rounded-lg\">\n                    <Calendar className=\"h-icon-sm w-icon-sm color-accent\" />\n                  </div>\n                  <div>\n                    <div className=\"text-heading-3 text-heading-3\">\n                      {data.filter(p => p.status === 'ready' || p.status === 'live').length}\n                    </div>\n                    <div className=\"text-body-sm color-muted\">Upcoming</div>\n                  </div>\n                </div>\n              </Card>\n              \n              <Card className=\"p-md\">\n                <div className=\"flex items-center gap-sm\">\n                  <div className=\"p-sm bg-success/10 rounded-lg\">\n                    <Music className=\"h-icon-sm w-icon-sm color-success\" />\n                  </div>\n                  <div>\n                    <div className=\"text-heading-3 text-heading-3\">\n                      {data.filter(p => p.status === 'live').length}\n                    </div>\n                    <div className=\"text-body-sm color-muted\">Live Now</div>\n                  </div>\n                </div>\n              </Card>\n              \n              <Card className=\"p-md\">\n                <div className=\"flex items-center gap-sm\">\n                  <div className=\"p-sm bg-secondary/10 rounded-lg\">\n                    <Users className=\"h-icon-sm w-icon-sm color-secondary\" />\n                  </div>\n                  <div>\n                    <div className=\"text-heading-3 text-heading-3\">\n                      {data.reduce((sum, p) => sum + (p.lineup_count || 0), 0)}\n                    </div>\n                    <div className=\"text-body-sm color-muted\">Total Performers</div>\n                  </div>\n                </div>\n              </Card>\n              \n              <Card className=\"p-md\">\n                <div className=\"flex items-center gap-sm\">\n                  <div className=\"p-sm bg-warning/10 rounded-lg\">\n                    <Star className=\"h-icon-sm w-icon-sm color-warning\" />\n                  </div>\n                  <div>\n                    <div className=\"text-heading-3 text-heading-3\">\n                      {data.filter(p => p.status === 'completed').length}\n                    </div>\n                    <div className=\"text-body-sm color-muted\">Completed</div>\n                  </div>\n                </div>\n              </Card>\n            </div>\n\n            {/* Data Views */}\n            <DataGrid />\n            \n            <KanbanBoard \n              columns={[\n                { id: 'planning', title: 'Planning' },\n                { id: 'rehearsal', title: 'Rehearsal' },\n                { id: 'ready', title: 'Ready' },\n                { id: 'live', title: 'Live' },\n                { id: 'completed', title: 'Completed' }\n              ]}\n              statusField=\"status\"\n              titleField=\"name\"\n              onCardClick={handleViewPerformance}\n            />\n            \n            <CalendarView \n              startDateField=\"starts_at\"\n              endDateField=\"ends_at\"\n              titleField=\"name\"\n              \n            />\n            \n            <ListView \n              titleField=\"name\"\n              subtitleField=\"project_name\"\n              onItemClick={handleViewPerformance}\n            />\n            \n            {/* Performance Details Drawer */}\n            <Drawer\n              open={drawerOpen}\n              onClose={() => {\n                setDrawerOpen(false);\n                setSelectedRecord(null);\n              }}\n              title={\n                drawerMode === 'create' \n                  ? 'Create Performance' \n                  : selectedRecord?.name || 'Performance Details'\n              }\n            >\n              {/* Custom Performance Details */}\n              {selectedRecord && (\n                <div className=\"stack-lg mt-lg\">\n                  {/* Performance Info */}\n                  <div className=\"grid grid-cols-2 gap-md\">\n                    <div className=\"flex items-center gap-sm text-body-sm\">\n                      <Calendar className=\"h-icon-xs w-icon-xs color-muted\" />\n                      <span className=\"form-label\">Date:</span>\n                      <span>\n                        {selectedRecord.starts_at \n                          ? new Date(selectedRecord.starts_at).toLocaleDateString()\n                          : 'Not scheduled'\n                        }\n                      </span>\n                    </div>\n                    <div className=\"flex items-center gap-sm text-body-sm\">\n                      <Clock className=\"h-icon-xs w-icon-xs color-muted\" />\n                      <span className=\"form-label\">Time:</span>\n                      <span>\n                        {selectedRecord.starts_at \n                          ? new Date(selectedRecord.starts_at).toLocaleTimeString([], { \n                              hour: '2-digit', \n                              minute: '2-digit' \n                            })\n                          : 'TBD'\n                        }\n                      </span>\n                    </div>\n                    <div className=\"flex items-center gap-sm text-body-sm\">\n                      <MapPin className=\"h-icon-xs w-icon-xs color-muted\" />\n                      <span className=\"form-label\">Venue:</span>\n                      <span>{selectedRecord.venue || 'TBD'}</span>\n                    </div>\n                    <div className=\"flex items-center gap-sm text-body-sm\">\n                      <Clock className=\"h-icon-xs w-icon-xs color-muted\" />\n                      <span className=\"form-label\">Duration:</span>\n                      <span>{selectedRecord.duration_minutes ? `${selectedRecord.duration_minutes} min` : 'TBD'}</span>\n                    </div>\n                  </div>\n\n                  {/* Status Badge */}\n                  <div className=\"flex items-center gap-sm\">\n                    <span className=\"form-label text-body-sm\">Status:</span>\n                    <Badge className={getStatusColor(selectedRecord.status)}>\n                      {selectedRecord.status?.replace('_', ' ') || 'Unknown'}\n                    </Badge>\n                  </div>\n                  \n                  {/* Performance Metrics */}\n                  <div className=\"grid grid-cols-3 gap-md pt-md border-t\">\n                    <div className=\"text-center\">\n                      <div className=\"text-heading-3 text-heading-3 color-accent\">{selectedRecord.lineup_count || 0}</div>\n                      <div className=\"text-body-sm color-muted flex items-center justify-center gap-xs\">\n                        <Users className=\"h-3 w-3\" />\n                        Performers\n                      </div>\n                    </div>\n                    <div className=\"text-center\">\n                      <div className=\"text-heading-3 text-heading-3 color-success\">{selectedRecord.riders_count || 0}</div>\n                      <div className=\"text-body-sm color-muted flex items-center justify-center gap-xs\">\n                        <FileText className=\"h-3 w-3\" />\n                        Riders\n                      </div>\n                    </div>\n                    <div className=\"text-center\">\n                      <div className=\"text-heading-3 text-heading-3 color-secondary\">{selectedRecord.call_sheets_count || 0}</div>\n                      <div className=\"text-body-sm color-muted flex items-center justify-center gap-xs\">\n                        <Calendar className=\"h-3 w-3\" />\n                        Call Sheets\n                      </div>\n                    </div>\n                  </div>\n\n                  {/* Technical Requirements */}\n                  {selectedRecord.technical_requirements && selectedRecord.technical_requirements !== 'None specified' && (\n                    <div className=\"pt-md border-t\">\n                      <h4 className=\"form-label text-body-sm mb-sm flex items-center gap-sm\">\n                        <Mic className=\"h-icon-xs w-icon-xs\" />\n                        Technical Requirements\n                      </h4>\n                      <p className=\"text-body-sm color-muted bg-secondary/50 p-sm rounded-lg\">\n                        {selectedRecord.technical_requirements}\n                      </p>\n                    </div>\n                  )}\n\n                  {/* Quick Actions */}\n                  <div className=\"flex gap-sm pt-md border-t\">\n                    <Button asChild>\n                      <a href={`/programming/lineups?event_id=${selectedRecord.id}`}>\n                        <Users className=\"h-icon-xs w-icon-xs mr-sm\" />\n                        Manage Lineup\n                      </a>\n                    </Button>\n                    <Button asChild>\n                      <a href={`/programming/riders?event_id=${selectedRecord.id}`}>\n                        <FileText className=\"h-icon-xs w-icon-xs mr-sm\" />\n                        Tech Riders\n                      </a>\n                    </Button>\n                    <Button asChild>\n                      <a href={`/programming/call-sheets?event_id=${selectedRecord.id}`}>\n                        <Calendar className=\"h-icon-xs w-icon-xs mr-sm\" />\n                        Call Sheets\n                      </a>\n                    </Button>\n                  </div>\n                </div>\n              )}\n            </Drawer>\n          </div>\n        </StateManagerProvider>\n      </DataViewProvider>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/programming/performances/ProgrammingPerformancesClient.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/programming/performances/drawers/CreateProgrammingPerformanceDrawer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/programming/performances/drawers/EditProgrammingPerformanceDrawer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/programming/performances/drawers/ViewProgrammingPerformanceDrawer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/programming/performances/lib/performancesService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/programming/performances/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/programming/performances/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/programming/performances/views/ProgrammingPerformancesAnalyticsView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/programming/performances/views/ProgrammingPerformancesGridView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/programming/performances/views/ProgrammingPerformancesListView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/programming/performances/views/ProgrammingPerformancesTimelineView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/programming/riders/CreateRiderClient.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/programming/riders/ProgrammingRidersClient.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/programming/riders/RidersClient.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadRiders'. Either include it or remove the dependency array.","line":100,"column":6,"nodeType":"ArrayExpression","endLine":100,"endColumn":13,"suggestions":[{"desc":"Update the dependencies array to be: [loadRiders, orgId]","fix":{"range":[2463,2470],"text":"[loadRiders, orgId]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\n\nimport { useEffect, useState } from 'react';\nimport {\n  Drawer,\n  type Button,\n  Card,\n  Badge,\n  StateManagerProvider,\n  DataViewProvider,\n  ViewSwitcher,\n  DataActions,\n  DataGrid,\n  KanbanBoard,\n  ListView,\n  Button\n} from '@ghxstship/ui';\nimport { useTranslations } from 'next-intl';\nimport { createBrowserClient } from '@ghxstship/auth';\nimport { Plus, FileText, Mic, Utensils, Settings, Calendar } from 'lucide-react';\n\nexport default function RidersClient({ orgId }: { orgId: string }) {\n  const t = useTranslations('programming');\n  const sb = createBrowserClient();\n  \n  const [data, setData] = useState<DataRecord[]>([]);\n  const [loading, setLoading] = useState(false);\n  const [selectedRecord, setSelectedRecord] = useState<any>(null);\n  const [drawerOpen, setDrawerOpen] = useState(false);\n  const [drawerMode, setDrawerMode] = useState<'view' | 'edit' | 'create'>('view');\n\n  // Define field configuration for riders\n  const fields: FieldConfig[] = [\n    {\n      key: 'event_name',\n      label: 'Event',\n      type: 'text',\n      sortable: true,\n      filterable: true,\n      width: 200\n    },\n    {\n      key: 'kind',\n      label: 'Rider Type',\n      type: 'select',\n      options: [\n        { value: 'technical', label: 'Technical' },\n        { value: 'hospitality', label: 'Hospitality' },\n        { value: 'stage_plot', label: 'Stage Plot' }\n      ],\n      required: true,\n      sortable: true,\n      filterable: true,\n      groupable: true,\n      width: 150\n    },\n    {\n      key: 'status',\n      label: 'Status',\n      type: 'select',\n      options: [\n        { value: 'draft', label: 'Draft' },\n        { value: 'pending_review', label: 'Pending Review' },\n        { value: 'approved', label: 'Approved' },\n        { value: 'fulfilled', label: 'Fulfilled' }\n      ],\n      sortable: true,\n      filterable: true,\n      groupable: true,\n      width: 130\n    },\n    {\n      key: 'priority',\n      label: 'Priority',\n      type: 'select',\n      options: [\n        { value: 'low', label: 'Low' },\n        { value: 'medium', label: 'Medium' },\n        { value: 'high', label: 'High' },\n        { value: 'critical', label: 'Critical' }\n      ],\n      sortable: true,\n      filterable: true,\n      groupable: true,\n      width: 100\n    },\n    {\n      key: 'created_at',\n      label: 'Created',\n      type: 'date',\n      sortable: true,\n      filterable: true,\n      width: 120\n    }\n  ];\n\n  useEffect(() => {\n    loadRiders();\n  }, [orgId]);\n\n  const loadRiders = async () => {\n    if (!orgId) return;\n    \n    try {\n      setLoading(true);\n      \n      const { data: ridersData, error } = await sb\n        .from('riders')\n        .select(`\n          *,\n          events!inner(\n            name,\n            projects!inner(\n              organization_id\n            )\n          )\n        `)\n        .eq('events.projects.organization_id', orgId)\n        .order('created_at', { ascending: false });\n      \n      if (error) throw error;\n      \n      // Transform data to include event name and computed fields\n      const transformedData = (ridersData || []).map(rider => ({\n        ...rider,\n        event_name: rider.events?.name || 'Unknown Event',\n        status: rider.status || 'draft',\n        priority: rider.priority || 'medium'\n      }));\n      \n      setData(transformedData);\n    } catch (error) {\n      console.error('Error loading riders:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleCreateRider = () => {\n    setSelectedRecord(null);\n    setDrawerMode('create');\n    setDrawerOpen(true);\n  };\n\n  const handleEditRider = (rider: any) => {\n    setSelectedRecord(rider);\n    setDrawerMode('edit');\n    setDrawerOpen(true);\n  };\n\n  const handleViewRider = (rider: any) => {\n    setSelectedRecord(rider);\n    setDrawerMode('view');\n    setDrawerOpen(true);\n  };\n\n  const handleSaveRider = async (riderData: any) => {\n    try {\n      if (drawerMode === 'create') {\n        const { error } = await sb.from('riders').insert(riderData);\n        if (error) throw error;\n      } else if (drawerMode === 'edit') {\n        const { error } = await sb\n          .from('riders')\n          .update(riderData)\n          .eq('id', selectedRecord.id);\n        if (error) throw error;\n      }\n      \n      await loadRiders();\n      setDrawerOpen(false);\n    } catch (error) {\n      console.error('Error saving rider:', error);\n    }\n  };\n\n  const getRiderIcon = (kind: string) => {\n    switch (kind) {\n      case 'technical':\n        return Settings;\n      case 'hospitality':\n        return Utensils;\n      case 'stage_plot':\n        return Mic;\n      default:\n        return FileText;\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'draft':\n        return 'color-muted bg-secondary/50';\n      case 'pending_review':\n        return 'color-warning-foreground bg-warning/10';\n      case 'approved':\n        return 'text-info-foreground bg-info/10';\n      case 'fulfilled':\n        return 'color-success-foreground bg-success/10';\n      default:\n        return 'color-muted bg-secondary/50';\n    }\n  };\n\n  const getPriorityColor = (priority: string) => {\n    switch (priority) {\n      case 'low':\n        return 'color-muted bg-secondary/50';\n      case 'medium':\n        return 'text-info-foreground bg-info/10';\n      case 'high':\n        return 'color-warning-foreground bg-warning/10';\n      case 'critical':\n        return 'color-destructive-foreground bg-destructive/10';\n      default:\n        return 'color-muted bg-secondary/50';\n    }\n  };\n\n  // Configure DataView\n  const config: DataViewConfig = {\n    id: 'riders-management',\n    name: 'Riders Management',\n    viewType: 'grid',\n    defaultView: 'grid',\n    fields,\n    data,\n    \n    onSearch: (query: string) => {\n      console.log('Search riders:', query);\n    },\n    onFilter: (filters: any[]) => {\n      console.log('Filter riders:', filters);\n    },\n    onSort: (sorts: any[]) => {\n      console.log('Sort riders:', sorts);\n    },\n    onRefresh: loadRiders,\n    onExport: (data: any[], format: string) => {\n      console.log('Export riders:', format, data);\n    },\n    onImport: (data: any[]) => {\n      console.log('Import riders:', data);\n    }\n  };\n\n  // Group riders by type for better visualization\n  const ridersByType = data.reduce((acc, rider) => {\n    const type = rider.kind || 'technical';\n    if (!acc[type]) {\n      acc[type] = [];\n    }\n    acc[type].push(rider);\n    return acc;\n  }, {});\n\n  const riderTypeLabels: { [key: string]: string } = {\n    technical: 'Technical Riders',\n    hospitality: 'Hospitality Riders',\n    stage_plot: 'Stage Plots'\n  };\n\n  return (\n    <div className=\"stack-md\">\n      <DataViewProvider config={config}>\n        <StateManagerProvider>\n          <div className=\"stack-md\">\n            {/* Header Actions */}\n            <div className=\"flex items-center justify-between mb-md\">\n              <div className=\"flex items-center gap-md\">\n                <h2 className=\"text-body text-heading-4\">Riders Management</h2>\n                <Button>\n                  <Plus className=\"h-icon-xs w-icon-xs mr-sm\" />\n                  Create Rider\n                </Button>\n              </div>\n              <div className=\"flex items-center gap-sm\">\n                <ViewSwitcher />\n                <DataActions />\n              </div>\n            </div>\n\n            {/* Rider Type Overview Cards */}\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-md mb-lg\">\n              {Object.entries(ridersByType).map(([type, typeRiders]: [string, any]) => {\n                const IconComponent = getRiderIcon(type);\n                const pendingCount = typeRiders.filter((r: any) => r.status === 'pending_review').length;\n                const approvedCount = typeRiders.filter((r: any) => r.status === 'approved').length;\n                \n                return (\n                  <Card key={type} className=\"p-md\">\n                    <div className=\"flex items-center justify-between mb-sm\">\n                      <h3 className=\"text-heading-4 flex items-center gap-sm\">\n                        <IconComponent className=\"h-icon-xs w-icon-xs\" />\n                        {riderTypeLabels[type] || type}\n                      </h3>\n                      <Badge variant=\"secondary\">\n                        {typeRiders.length} riders\n                      </Badge>\n                    </div>\n                    \n                    <div className=\"stack-sm\">\n                      <div className=\"flex justify-between text-body-sm\">\n                        <span className=\"color-muted\">Pending Review:</span>\n                        <span className=\"form-label color-warning\">{pendingCount}</span>\n                      </div>\n                      <div className=\"flex justify-between text-body-sm\">\n                        <span className=\"color-muted\">Approved:</span>\n                        <span className=\"form-label color-success\">{approvedCount}</span>\n                      </div>\n                    </div>\n                    \n                    <div className=\"mt-sm stack-xs\">\n                      {typeRiders.slice(0, 2).map((rider: any) => (\n                        <div\n                          key={rider.id}\n                          className=\"flex items-center justify-between text-body-sm p-sm rounded border cursor-pointer hover:bg-secondary/50\"\n                          onClick={() => handleViewRider(rider)}\n                        >\n                          <div>\n                            <div className=\"form-label\">{rider.event_name}</div>\n                            <div className=\"color-muted flex items-center gap-xs\">\n                              <Calendar className=\"h-3 w-3\" />\n                              {new Date(rider.created_at).toLocaleDateString()}\n                            </div>\n                          </div>\n                          <div className=\"flex flex-col gap-xs\">\n                            <Badge variant=\"outline\">\n                              {rider.status.replace('_', ' ')}\n                            </Badge>\n                            <Badge variant=\"outline\">\n                              {rider.priority}\n                            </Badge>\n                          </div>\n                        </div>\n                      ))}\n                      \n                      {typeRiders.length > 2 && (\n                        <div className=\"text-body-sm color-muted text-center pt-xs\">\n                          +{typeRiders.length - 2} more riders\n                        </div>\n                      )}\n                    </div>\n                  </Card>\n                );\n              })}\n            </div>\n\n            {/* Data Views */}\n            <DataGrid />\n            \n            <KanbanBoard \n              columns={[\n                { id: 'draft', title: 'Draft' },\n                { id: 'pending_review', title: 'Pending Review' },\n                { id: 'approved', title: 'Approved' },\n                { id: 'fulfilled', title: 'Fulfilled' }\n              ]}\n              statusField=\"status\"\n              titleField=\"event_name\"\n              onCardClick={handleViewRider}\n            />\n            \n            <ListView \n              titleField=\"event_name\"\n              subtitleField=\"kind\"\n              onItemClick={handleViewRider}\n            />\n            \n            {/* Rider Details Drawer */}\n            <Drawer\n              open={drawerOpen}\n              onClose={() => {\n                setDrawerOpen(false);\n                setSelectedRecord(null);\n              }}\n              title={\n                drawerMode === 'create' \n                  ? 'Create New Rider' \n                  : `${selectedRecord?.kind?.replace('_', ' ')} Rider` || 'Rider Details'\n              }\n            >\n              {/* Custom Rider Details */}\n              {selectedRecord && (\n                <div className=\"stack-md mt-lg\">\n                  <div className=\"grid grid-cols-2 gap-md\">\n                    <div className=\"flex items-center gap-sm text-body-sm color-muted\">\n                      <FileText className=\"h-icon-xs w-icon-xs\" />\n                      <span>\n                        {selectedRecord.kind?.replace('_', ' ') || 'Technical'} Rider\n                      </span>\n                    </div>\n                    <div className=\"flex items-center gap-sm text-body-sm color-muted\">\n                      <Calendar className=\"h-icon-xs w-icon-xs\" />\n                      <span>\n                        Created {new Date(selectedRecord.created_at).toLocaleDateString()}\n                      </span>\n                    </div>\n                  </div>\n                  \n                  <div className=\"flex items-center gap-md\">\n                    <Badge className={getStatusColor(selectedRecord.status)}>\n                      {selectedRecord.status?.replace('_', ' ') || 'Draft'}\n                    </Badge>\n                    <Badge className={getPriorityColor(selectedRecord.priority)}>\n                      {selectedRecord.priority || 'Medium'} Priority\n                    </Badge>\n                  </div>\n                  \n                  {selectedRecord.details && (\n                    <div className=\"pt-md border-t\">\n                      <h4 className=\"form-label mb-sm\">Rider Details</h4>\n                      <div className=\"text-body-sm color-muted bg-secondary/50 p-sm rounded\">\n                        {typeof selectedRecord.details === 'object' \n                          ? JSON.stringify(selectedRecord.details, null, 2)\n                          : selectedRecord.details\n                        }\n                      </div>\n                    </div>\n                  )}\n                </div>\n              )}\n            </Drawer>\n\n            {/* Empty State */}\n            {!loading && data.length === 0 && (\n              <Card className=\"p-xl text-center\">\n                <FileText className=\"h-icon-2xl w-icon-2xl mx-auto mb-md color-muted\" />\n                <h3 className=\"text-body text-heading-4 mb-sm\">No Riders Yet</h3>\n                <p className=\"color-muted mb-md\">\n                  Start creating technical and hospitality riders for your events to ensure all requirements are met.\n                </p>\n                <Button onClick={handleCreateRider}>\n                  <Plus className=\"h-icon-xs w-icon-xs mr-sm\" />\n                  Create First Rider\n                </Button>\n              </Card>\n            )}\n          </div>\n        </StateManagerProvider>\n      </DataViewProvider>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/programming/riders/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/programming/riders/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/programming/spaces/CreateSpaceClient.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/programming/spaces/ProgrammingSpacesClient.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchSpaces'. Either include it or remove the dependency array.","line":118,"column":5,"nodeType":"ArrayExpression","endLine":118,"endColumn":22,"suggestions":[{"desc":"Update the dependencies array to be: [supabase, orgId, fetchSpaces]","fix":{"range":[3243,3260],"text":"[supabase, orgId, fetchSpaces]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { Plus, Search, Filter, Download, Upload, MoreHorizontal, MapPin, Users, Square, Home, Grid3X3, List, BarChart3, Clock } from \"lucide-react\";\nimport { useCallback, useEffect, useMemo, useState } from 'react';\nimport { createBrowserClient } from '@ghxstship/auth';\nimport {\n Badge,\n Button,\n Card,\n Input,\n Select,\n SelectContent,\n SelectItem,\n SelectTrigger,\n SelectValue,\n Tabs,\n TabsTrigger,\n  Drawer,\n  DrawerContent,\n  DrawerHeader,\n  DrawerTitle,\n  DrawerDescription,\n  DrawerFooter\n} from \"@ghxstship/ui\";\n\nimport type {\n ProgrammingSpace,\n SpaceFilters,\n SpaceSort,\n ViewType,\n SpaceKind,\n SpaceStatus,\n SpaceAccessLevel,\n SpaceProject\n} from './types';\n\n// Import view components\nimport ProgrammingSpacesListView from './views/ProgrammingSpacesListView';\nimport ProgrammingSpacesGridView from './views/ProgrammingSpacesGridView';\nimport ProgrammingSpacesTimelineView from './views/ProgrammingSpacesTimelineView';\nimport ProgrammingSpacesAnalyticsView from './views/ProgrammingSpacesAnalyticsView';\n\n// Import drawer components\nimport CreateProgrammingSpaceDrawer from './drawers/CreateProgrammingSpaceDrawer';\nimport EditProgrammingSpaceDrawer from './drawers/EditProgrammingSpaceDrawer';\nimport ViewProgrammingSpaceDrawer from './drawers/ViewProgrammingSpaceDrawer';\n\ninterface User {\n id: string;\n email: string;\n full_name?: string | null;\n avatar_url?: string | null;\n}\n\ninterface ProgrammingSpacesClientProps {\n orgId: string;\n currentUserId: string;\n initialSpaces: ProgrammingSpace[];\n projects: SpaceProject[];\n users: User[];\n}\n\nexport default function ProgrammingSpacesClient({\n orgId,\n currentUserId,\n initialSpaces,\n projects,\n users\n}: ProgrammingSpacesClientProps) {\n const supabase = useMemo(() => createBrowserClient(), []);\n\n // State management\n const [spaces, setSpaces] = useState<ProgrammingSpace[]>(initialSpaces);\n const [loading, setLoading] = useState(false);\n const [selectedSpaces, setSelectedSpaces] = useState<string[]>([]);\n const [currentView, setCurrentView] = useState<ViewType>('list');\n const [searchQuery, setSearchQuery] = useState('');\n const [filters, setFilters] = useState<SpaceFilters>({});\n const [sort, setSort] = useState<SpaceSort>({ field: 'name', direction: 'asc' });\n\n // Drawer state\n const [createDrawerOpen, setCreateDrawerOpen] = useState(false);\n const [editDrawerOpen, setEditDrawerOpen] = useState(false);\n const [viewDrawerOpen, setViewDrawerOpen] = useState(false);\n const [selectedSpace, setSelectedSpace] = useState<ProgrammingSpace | null>(null);\n\n // Real-time subscription\n useEffect(() => {\n const channel = supabase\n .channel(`programming_spaces_${orgId}`)\n .on(\n 'postgres_changes',\n {\n event: '*',\n schema: 'public',\n table: 'programming_spaces',\n filter: `organization_id=eq.${orgId}`\n },\n (payload) => {\n if (payload.eventType === 'INSERT') {\n fetchSpaces();\n } else if (payload.eventType === 'UPDATE') {\n setSpaces((prev: unknown) =>\n prev.map((space) =>\n space.id === payload.new.id ? { ...space, ...payload.new } : space\n )\n );\n } else if (payload.eventType === 'DELETE') {\n setSpaces((prev: unknown) => prev.filter((space) => space.id !== payload.old.id));\n }\n }\n )\n .subscribe();\n\n return () => {\n supabase.removeChannel(channel);\n };\n }, [supabase, orgId]);\n\n // Fetch spaces with filters\n const fetchSpaces = useCallback(async () => {\n try {\n setLoading(true);\n const params = new URLSearchParams();\n\n if (filters.project_id) params.append('project_id', filters.project_id);\n if (filters.kind) params.append('kind', filters.kind);\n if (filters.status) params.append('status', filters.status);\n if (filters.access_level) params.append('access_level', filters.access_level);\n if (filters.building) params.append('building', filters.building);\n if (filters.floor) params.append('floor', filters.floor);\n if (searchQuery) params.append('search', searchQuery);\n if (filters.min_capacity) params.append('min_capacity', filters.min_capacity.toString());\n if (filters.max_capacity) params.append('max_capacity', filters.max_capacity.toString());\n if (filters.is_bookable !== undefined) params.append('is_bookable', filters.is_bookable.toString());\n\n const response = await fetch(`/api/v1/programming/spaces?${params}`);\n if (!response.ok) throw new Error('Failed to fetch spaces');\n\n const data = await response.json();\n setSpaces(data);\n } catch (error) {\n console.error('Error fetching spaces:', error);\n } finally {\n setLoading(false);\n }\n }, [filters, searchQuery]);\n\n // Trigger fetch when filters change\n useEffect(() => {\n fetchSpaces();\n }, [fetchSpaces]);\n\n // Filter and sort spaces\n const filteredAndSortedSpaces = useMemo(() => {\n let filtered = [...spaces];\n\n // Apply local search if no server search\n if (searchQuery && !filters.search) {\n const query = searchQuery.toLowerCase();\n filtered = filtered.filter(\n (space) =>\n space.name?.toLowerCase().includes(query) ||\n space.description?.toLowerCase().includes(query) ||\n space.location?.toLowerCase().includes(query) ||\n space.building?.toLowerCase().includes(query)\n );\n }\n\n // Apply sorting\n filtered.sort((a, b) => {\n const aValue = a[sort.field];\n const bValue = b[sort.field];\n\n if (aValue === null || aValue === undefined) return 1;\n if (bValue === null || bValue === undefined) return -1;\n\n if (typeof aValue === 'string' && typeof bValue === 'string') {\n return sort.direction === 'asc'\n ? aValue.localeCompare(bValue)\n : bValue.localeCompare(aValue);\n }\n\n if (aValue < bValue) return sort.direction === 'asc' ? -1 : 1;\n if (aValue > bValue) return sort.direction === 'asc' ? 1 : -1;\n return 0;\n });\n\n return filtered;\n }, [spaces, searchQuery, filters.search, sort]);\n\n // Get unique buildings and floors for filters\n const buildings = useMemo(() => {\n const uniqueBuildings = [...new Set(spaces.map(s => s.building).filter(Boolean))];\n return uniqueBuildings.sort();\n }, [spaces]);\n\n const floors = useMemo(() => {\n const uniqueFloors = [...new Set(spaces.map(s => s.floor).filter(Boolean))];\n return uniqueFloors.sort();\n }, [spaces]);\n\n // Handlers\n const handleCreateSpace = () => {\n setCreateDrawerOpen(true);\n };\n\n const handleEditSpace = (space: ProgrammingSpace) => {\n setSelectedSpace(space);\n setEditDrawerOpen(true);\n };\n\n const handleViewSpace = (space: ProgrammingSpace) => {\n setSelectedSpace(space);\n setViewDrawerOpen(true);\n };\n\n const handleDeleteSpace = async (spaceId: string) => {\n try {\n const response = await fetch(`/api/v1/programming/spaces/${spaceId}`, {\n method: 'DELETE'\n });\n\n if (!response.ok) throw new Error('Failed to delete space');\n\n setSpaces((prev: unknown) => prev.filter((space) => space.id !== spaceId));\n } catch (error) {\n console.error('Error deleting space:', error);\n }\n };\n\n const handleBulkAction = async (action: string, spaceIds: string[]) => {\n try {\n setLoading(true);\n \n switch (action) {\n case 'delete':\n await Promise.all(\n spaceIds.map((id) =>\n fetch(`/api/v1/programming/spaces/${id}`, { method: 'DELETE' })\n )\n );\n setSpaces((prev: unknown) => prev.filter((space) => !spaceIds.includes(space.id)));\n break;\n case 'available':\n await Promise.all(\n spaceIds.map((id) =>\n fetch(`/api/v1/programming/spaces/${id}`, {\n method: 'PATCH',\n headers: { 'Content-Type': 'application/json' },\n body: JSON.stringify({ status: 'available' })\n })\n )\n );\n fetchSpaces();\n break;\n case 'maintenance':\n await Promise.all(\n spaceIds.map((id) =>\n fetch(`/api/v1/programming/spaces/${id}`, {\n method: 'PATCH',\n headers: { 'Content-Type': 'application/json' },\n body: JSON.stringify({ status: 'maintenance' })\n })\n )\n );\n fetchSpaces();\n break;\n }\n \n setSelectedSpaces([]);\n } catch (error) {\n console.error('Error performing bulk action:', error);\n } finally {\n setLoading(false);\n }\n };\n\n const handleSuccess = () => {\n fetchSpaces();\n setCreateDrawerOpen(false);\n setEditDrawerOpen(false);\n setSelectedSpace(null);\n };\n\n // Export functionality\n const handleExport = () => {\n const csvContent = [\n ['Name', 'Kind', 'Status', 'Access Level', 'Capacity', 'Building', 'Floor', 'Location'].join(','),\n ...filteredAndSortedSpaces.map((space) =>\n [\n space.name,\n space.kind,\n space.status,\n space.access_level,\n space.capacity || '',\n space.building || '',\n space.floor || '',\n space.location || '',\n ].join(',')\n ),\n ].join('\\n');\n\n const blob = new Blob([csvContent], { type: 'text/csv' });\n const url = URL.createObjectURL(blob);\n const a = document.createElement('a');\n a.href = url;\n a.download = `programming-spaces-${new Date().toISOString().split('T')[0]}.csv`;\n a.click();\n URL.revokeObjectURL(url);\n };\n\n // View icons\n const viewIcons = {\n list: List,\n grid: Grid3X3,\n timeline: Clock,\n analytics: BarChart3\n };\n\n return (\n <div className=\"space-y-lg\">\n {/* Header */}\n <div className=\"flex items-center justify-between\">\n <div>\n <h1 className=\"text-2xl font-bold\">Programming Spaces</h1>\n <p className=\"text-muted-foreground\">\n Manage venues, rooms, and facilities for events and productions\n </p>\n </div>\n <Button onClick={handleCreateSpace}>\n <Plus className=\"mr-2 h-icon-xs w-icon-xs\" />\n Create Space\n </Button>\n </div>\n\n {/* Filters and Search */}\n <Card className=\"p-md\">\n <div className=\"flex flex-col gap-md md:flex-row md:items-center md:justify-between\">\n <div className=\"flex flex-1 items-center gap-md\">\n <div className=\"relative flex-1 max-w-sm\">\n <Search className=\"absolute left-3 top-xs/2 h-icon-xs w-icon-xs -translate-y-1/2 text-muted-foreground\" />\n <Input\n placeholder=\"Search spaces...\"\n value={searchQuery}\n onChange={(e) => setSearchQuery(e.target.value)}\n className=\"pl-9\"\n />\n </div>\n\n <Select\n value={filters.kind || ''}\n onChange={(e) =>\n setFilters((prev: unknown) => ({ ...prev, kind: e.target.value as SpaceKind || undefined }))\n }\n >\n <SelectTrigger className=\"w-40\">\n <SelectValue placeholder=\"All Types\" />\n </SelectTrigger>\n <SelectContent>\n <SelectItem value=\"\">All Types</SelectItem>\n <SelectItem value=\"room\">Room</SelectItem>\n <SelectItem value=\"green_room\">Green Room</SelectItem>\n <SelectItem value=\"dressing_room\">Dressing Room</SelectItem>\n <SelectItem value=\"meeting_room\">Meeting Room</SelectItem>\n <SelectItem value=\"classroom\">Classroom</SelectItem>\n <SelectItem value=\"studio\">Studio</SelectItem>\n <SelectItem value=\"rehearsal_room\">Rehearsal Room</SelectItem>\n <SelectItem value=\"storage\">Storage</SelectItem>\n <SelectItem value=\"office\">Office</SelectItem>\n <SelectItem value=\"lounge\">Lounge</SelectItem>\n <SelectItem value=\"other\">Other</SelectItem>\n </SelectContent>\n </Select>\n\n <Select\n value={filters.status || ''}\n onChange={(e) =>\n setFilters((prev: unknown) => ({ ...prev, status: e.target.value as SpaceStatus || undefined }))\n }\n >\n <SelectTrigger className=\"w-40\">\n <SelectValue placeholder=\"All Status\" />\n </SelectTrigger>\n <SelectContent>\n <SelectItem value=\"\">All Status</SelectItem>\n <SelectItem value=\"available\">Available</SelectItem>\n <SelectItem value=\"occupied\">Occupied</SelectItem>\n <SelectItem value=\"reserved\">Reserved</SelectItem>\n <SelectItem value=\"maintenance\">Maintenance</SelectItem>\n <SelectItem value=\"cleaning\">Cleaning</SelectItem>\n <SelectItem value=\"out_of_service\">Out of Service</SelectItem>\n </SelectContent>\n </Select>\n\n {buildings.length > 0 && (\n <Select\n value={filters.building || ''}\n onChange={(e) =>\n setFilters((prev: unknown) => ({ ...prev, building: e.target.value || undefined }))\n }\n >\n <SelectTrigger className=\"w-40\">\n <SelectValue placeholder=\"All Buildings\" />\n </SelectTrigger>\n <SelectContent>\n <SelectItem value=\"\">All Buildings</SelectItem>\n {buildings.map((building) => (\n <SelectItem key={building} value={building}>\n {building}\n </SelectItem>\n ))}\n </SelectContent>\n </Select>\n )}\n\n <Select\n value={filters.project_id || ''}\n onChange={(e) =>\n setFilters((prev: unknown) => ({ ...prev, project_id: e.target.value || undefined }))\n }\n >\n <SelectTrigger className=\"w-container-xs\">\n <SelectValue placeholder=\"All Projects\" />\n </SelectTrigger>\n <SelectContent>\n <SelectItem value=\"\">All Projects</SelectItem>\n {projects.map((project) => (\n <SelectItem key={project.id} value={project.id}>\n {project.name}\n </SelectItem>\n ))}\n </SelectContent>\n </Select>\n </div>\n\n <div className=\"flex items-center gap-xs\">\n <Button variant=\"outline\" size=\"sm\" onClick={handleExport}>\n <Download className=\"mr-2 h-icon-xs w-icon-xs\" />\n Export\n </Button>\n\n {/* View Switcher */}\n <div className=\"flex items-center rounded-lg border p-xs\">\n {(['list', 'grid', 'timeline', 'analytics'] as ViewType[]).map((view) => {\n const Icon = viewIcons[view];\n return (\n <Button\n key={view}\n variant={currentView === view ? 'default' : 'ghost'}\n size=\"sm\"\n onClick={() => setCurrentView(view)}\n className=\"h-icon-lg w-icon-lg p-0\"\n >\n <Icon className=\"h-icon-xs w-icon-xs\" />\n </Button>\n );\n })}\n </div>\n </div>\n </div>\n\n {/* Bulk Actions */}\n {selectedSpaces.length > 0 && (\n <div className=\"mt-4 flex items-center gap-xs rounded-lg border bg-muted/50 p-sm\">\n <span className=\"text-sm text-muted-foreground\">\n {selectedSpaces.length} space(s) selected\n </span>\n <div className=\"flex gap-xs\">\n <Button\n size=\"sm\"\n variant=\"outline\"\n onClick={() => handleBulkAction('available', selectedSpaces)}\n >\n Mark Available\n </Button>\n <Button\n size=\"sm\"\n variant=\"outline\"\n onClick={() => handleBulkAction('maintenance', selectedSpaces)}\n >\n Mark Maintenance\n </Button>\n <Button\n size=\"sm\"\n variant=\"destructive\"\n onClick={() => handleBulkAction('delete', selectedSpaces)}\n >\n Delete\n </Button>\n </div>\n </div>\n )}\n </Card>\n\n {/* Content */}\n <div className=\"min-h-content-lg\">\n {currentView === 'list' && (\n <ProgrammingSpacesListView\n spaces={filteredAndSortedSpaces}\n loading={loading}\n selectedSpaces={selectedSpaces}\n onSelectionChange={setSelectedSpaces}\n onEdit={handleEditSpace}\n onView={handleViewSpace}\n onDelete={handleDeleteSpace}\n sort={sort}\n onSortChange={setSort}\n />\n )}\n\n {currentView === 'grid' && (\n <ProgrammingSpacesGridView\n spaces={filteredAndSortedSpaces}\n loading={loading}\n onEdit={handleEditSpace}\n onView={handleViewSpace}\n onDelete={handleDeleteSpace}\n />\n )}\n\n {currentView === 'timeline' && (\n <ProgrammingSpacesTimelineView\n spaces={filteredAndSortedSpaces}\n loading={loading}\n onEdit={handleEditSpace}\n onView={handleViewSpace}\n />\n )}\n\n {currentView === 'analytics' && (\n <ProgrammingSpacesAnalyticsView\n spaces={filteredAndSortedSpaces}\n loading={loading}\n />\n )}\n </div>\n\n {/* Drawers */}\n <CreateProgrammingSpaceDrawer\n open={createDrawerOpen}\n onClose={() => setCreateDrawerOpen(false)}\n orgId={orgId}\n currentUserId={currentUserId}\n projects={projects}\n onSuccess={handleSuccess}\n />\n\n {selectedSpace && (\n <>\n <EditProgrammingSpaceDrawer\n open={editDrawerOpen}\n onClose={() => setEditDrawerOpen(false)}\n space={selectedSpace}\n orgId={orgId}\n currentUserId={currentUserId}\n projects={projects}\n onSuccess={handleSuccess}\n />\n\n <ViewProgrammingSpaceDrawer\n open={viewDrawerOpen}\n onClose={() => setViewDrawerOpen(false)}\n space={selectedSpace}\n users={users}\n onEdit={() => {\n setViewDrawerOpen(false);\n setEditDrawerOpen(true);\n }}\n onDelete={() => {\n handleDeleteSpace(selectedSpace.id);\n setViewDrawerOpen(false);\n setSelectedSpace(null);\n }}\n />\n </>\n )}\n </div>\n );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/programming/spaces/SpacesClient.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadSpaces'. Either include it or remove the dependency array.","line":96,"column":6,"nodeType":"ArrayExpression","endLine":96,"endColumn":13,"suggestions":[{"desc":"Update the dependencies array to be: [loadSpaces, orgId]","fix":{"range":[2379,2386],"text":"[loadSpaces, orgId]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\n\nimport { useEffect, useState } from 'react';\nimport {\n  Drawer,\n  type Button,\n  Card,\n  Badge,\n  StateManagerProvider,\n  DataViewProvider,\n  ViewSwitcher,\n  DataActions,\n  DataGrid,\n  KanbanBoard,\n  ListView,\n  Button\n} from '@ghxstship/ui';\nimport { useTranslations } from 'next-intl';\nimport { createBrowserClient } from '@ghxstship/auth';\nimport { Plus, MapPin, Users, Square, Home, Coffee, Presentation } from 'lucide-react';\n\nexport default function SpacesClient({ orgId }: { orgId: string }) {\n  const t = useTranslations('programming');\n  const sb = createBrowserClient();\n  \n  const [data, setData] = useState<DataRecord[]>([]);\n  const [loading, setLoading] = useState(false);\n  const [selectedRecord, setSelectedRecord] = useState<any>(null);\n  const [drawerOpen, setDrawerOpen] = useState(false);\n  const [drawerMode, setDrawerMode] = useState<'view' | 'edit' | 'create'>('view');\n\n  // Define field configuration for spaces\n  const fields: FieldConfig[] = [\n    {\n      key: 'name',\n      label: 'Space Name',\n      type: 'text',\n      required: true,\n      sortable: true,\n      filterable: true,\n      width: 200\n    },\n    {\n      key: 'kind',\n      label: 'Space Type',\n      type: 'select',\n      options: [\n        { value: 'room', label: 'Room' },\n        { value: 'green_room', label: 'Green Room' },\n        { value: 'dressing_room', label: 'Dressing Room' },\n        { value: 'meeting_room', label: 'Meeting Room' },\n        { value: 'classroom', label: 'Classroom' }\n      ],\n      required: true,\n      sortable: true,\n      filterable: true,\n      groupable: true,\n      width: 150\n    },\n    {\n      key: 'capacity',\n      label: 'Capacity',\n      type: 'number',\n      sortable: true,\n      filterable: true,\n      width: 100\n    },\n    {\n      key: 'location',\n      label: 'Location',\n      type: 'text',\n      sortable: true,\n      filterable: true,\n      width: 150\n    },\n    {\n      key: 'availability',\n      label: 'Availability',\n      type: 'select',\n      options: [\n        { value: 'available', label: 'Available' },\n        { value: 'occupied', label: 'Occupied' },\n        { value: 'maintenance', label: 'Maintenance' },\n        { value: 'reserved', label: 'Reserved' }\n      ],\n      sortable: true,\n      filterable: true,\n      groupable: true,\n      width: 120\n    }\n  ];\n\n  useEffect(() => {\n    loadSpaces();\n  }, [orgId]);\n\n  const loadSpaces = async () => {\n    if (!orgId) return;\n    \n    try {\n      setLoading(true);\n      \n      const { data: spacesData, error } = await sb\n        .from('spaces')\n        .select('*')\n        .eq('organization_id', orgId)\n        .order('name', { ascending: true });\n      \n      if (error) throw error;\n      \n      // Transform data to include computed availability status\n      const transformedData = (spacesData || []).map(space => ({\n        ...space,\n        availability: space.availability || 'available'\n      }));\n      \n      setData(transformedData);\n    } catch (error) {\n      console.error('Error loading spaces:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleCreateSpace = () => {\n    setSelectedRecord(null);\n    setDrawerMode('create');\n    setDrawerOpen(true);\n  };\n\n  const handleEditSpace = (space: any) => {\n    setSelectedRecord(space);\n    setDrawerMode('edit');\n    setDrawerOpen(true);\n  };\n\n  const handleViewSpace = (space: any) => {\n    setSelectedRecord(space);\n    setDrawerMode('view');\n    setDrawerOpen(true);\n  };\n\n  const handleSaveSpace = async (spaceData: any) => {\n    try {\n      if (drawerMode === 'create') {\n        const { error } = await sb.from('spaces').insert({\n          ...spaceData,\n          organization_id: orgId\n        });\n        if (error) throw error;\n      } else if (drawerMode === 'edit') {\n        const { error } = await sb\n          .from('spaces')\n          .update(spaceData)\n          .eq('id', selectedRecord.id);\n        if (error) throw error;\n      }\n      \n      await loadSpaces();\n      setDrawerOpen(false);\n    } catch (error) {\n      console.error('Error saving space:', error);\n    }\n  };\n\n  const getSpaceIcon = (kind: string) => {\n    switch (kind) {\n      case 'green_room':\n        return Coffee;\n      case 'dressing_room':\n        return Home;\n      case 'meeting_room':\n        return Presentation;\n      case 'classroom':\n        return Users;\n      default:\n        return Square;\n    }\n  };\n\n  const getAvailabilityColor = (availability: string) => {\n    switch (availability) {\n      case 'available':\n        return 'color-success bg-success/10';\n      case 'occupied':\n        return 'color-destructive bg-destructive/10';\n      case 'maintenance':\n        return 'color-warning bg-warning/10';\n      case 'reserved':\n        return 'color-accent bg-accent/10';\n      default:\n        return 'color-muted bg-secondary';\n    }\n  };\n\n  // Configure DataView\n  const config: DataViewConfig = {\n    id: 'spaces-management',\n    name: 'Spaces Management',\n    viewType: 'grid',\n    defaultView: 'grid',\n    fields,\n    data,\n    \n    onSearch: (query: string) => {\n      console.log('Search spaces:', query);\n    },\n    onFilter: (filters: any[]) => {\n      console.log('Filter spaces:', filters);\n    },\n    onSort: (sorts: any[]) => {\n      console.log('Sort spaces:', sorts);\n    },\n    onRefresh: loadSpaces,\n    onExport: (data: any[], format: string) => {\n      console.log('Export spaces:', format, data);\n    },\n    onImport: (data: any[]) => {\n      console.log('Import spaces:', data);\n    }\n  };\n\n  // Group spaces by type for better visualization\n  const spacesByType = data.reduce((acc, space) => {\n    const type = space.kind || 'room';\n    if (!acc[type]) {\n      acc[type] = [];\n    }\n    acc[type].push(space);\n    return acc;\n  }, {});\n\n  const spaceTypeLabels: { [key: string]: string } = {\n    room: 'General Rooms',\n    green_room: 'Green Rooms',\n    dressing_room: 'Dressing Rooms',\n    meeting_room: 'Meeting Rooms',\n    classroom: 'Classrooms'\n  };\n\n  return (\n    <div className=\"stack-md\">\n      <DataViewProvider config={config}>\n        <StateManagerProvider>\n          <div className=\"stack-md\">\n            {/* Header Actions */}\n            <div className=\"flex items-center justify-between mb-md\">\n              <div className=\"flex items-center gap-md\">\n                <h2 className=\"text-body text-heading-4\">Spaces Management</h2>\n                <Button>\n                  <Plus className=\"h-icon-xs w-icon-xs mr-sm\" />\n                  Add Space\n                </Button>\n              </div>\n              <div className=\"flex items-center gap-sm\">\n                <ViewSwitcher />\n                <DataActions />\n              </div>\n            </div>\n\n            {/* Space Type Overview Cards */}\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-md mb-lg\">\n              {Object.entries(spacesByType).map(([type, typeSpaces]: [string, any]) => {\n                const IconComponent = getSpaceIcon(type);\n                const availableSpaces = typeSpaces.filter((s: any) => s.availability === 'available').length;\n                const totalCapacity = typeSpaces.reduce((sum: number, s) => sum + (s.capacity || 0), 0);\n                \n                return (\n                  <Card key={type} className=\"p-md\">\n                    <div className=\"flex items-center justify-between mb-sm\">\n                      <h3 className=\"text-heading-4 flex items-center gap-sm\">\n                        <IconComponent className=\"h-icon-xs w-icon-xs\" />\n                        {spaceTypeLabels[type] || type}\n                      </h3>\n                      <Badge variant=\"secondary\">\n                        {typeSpaces.length} spaces\n                      </Badge>\n                    </div>\n                    \n                    <div className=\"stack-sm\">\n                      <div className=\"flex justify-between text-body-sm\">\n                        <span className=\"color-muted\">Available:</span>\n                        <span className=\"form-label color-success\">{availableSpaces}</span>\n                      </div>\n                      <div className=\"flex justify-between text-body-sm\">\n                        <span className=\"color-muted\">Total Capacity:</span>\n                        <span className=\"form-label\">{totalCapacity}</span>\n                      </div>\n                    </div>\n                    \n                    <div className=\"mt-sm stack-xs\">\n                      {typeSpaces.slice(0, 2).map((space: any) => (\n                        <div\n                          key={space.id}\n                          className=\"flex items-center justify-between text-body-sm p-sm rounded border cursor-pointer hover:bg-secondary/50\"\n                          onClick={() => handleViewSpace(space)}\n                        >\n                          <div>\n                            <div className=\"form-label\">{space.name}</div>\n                            <div className=\"color-muted flex items-center gap-xs\">\n                              <MapPin className=\"h-3 w-3\" />\n                              {space.location || 'Location TBD'}\n                            </div>\n                          </div>\n                          <Badge variant=\"outline\">\n                            {space.availability}\n                          </Badge>\n                        </div>\n                      ))}\n                      \n                      {typeSpaces.length > 2 && (\n                        <div className=\"text-body-sm color-muted text-center pt-xs\">\n                          +{typeSpaces.length - 2} more spaces\n                        </div>\n                      )}\n                    </div>\n                  </Card>\n                );\n              })}\n            </div>\n\n            {/* Data Views */}\n            <DataGrid />\n            \n            <KanbanBoard \n              columns={[\n                { id: 'available', title: 'Available' },\n                { id: 'occupied', title: 'Occupied' },\n                { id: 'reserved', title: 'Reserved' },\n                { id: 'maintenance', title: 'Maintenance' }\n              ]}\n              statusField=\"availability\"\n              titleField=\"name\"\n              onCardClick={handleViewSpace}\n            />\n            \n            <ListView \n              titleField=\"name\"\n              subtitleField=\"kind\"\n              onItemClick={handleViewSpace}\n            />\n            \n            {/* Space Details Drawer */}\n            <Drawer\n              open={drawerOpen}\n              onClose={() => {\n                setDrawerOpen(false);\n                setSelectedRecord(null);\n              }}\n              title={\n                drawerMode === 'create' \n                  ? 'Add New Space' \n                  : selectedRecord?.name || 'Space Details'\n              }\n            >\n              {/* Custom Space Details */}\n              {selectedRecord && (\n                <div className=\"stack-md mt-lg\">\n                  <div className=\"grid grid-cols-2 gap-md\">\n                    <div className=\"flex items-center gap-sm text-body-sm color-muted\">\n                      <Square className=\"h-icon-xs w-icon-xs\" />\n                      <span>\n                        {selectedRecord.kind?.replace('_', ' ') || 'General Room'}\n                      </span>\n                    </div>\n                    <div className=\"flex items-center gap-sm text-body-sm color-muted\">\n                      <Users className=\"h-icon-xs w-icon-xs\" />\n                      <span>\n                        {selectedRecord.capacity ? `${selectedRecord.capacity} people` : 'Capacity TBD'}\n                      </span>\n                    </div>\n                  </div>\n                  \n                  {selectedRecord.location && (\n                    <div className=\"flex items-center gap-sm text-body-sm color-muted\">\n                      <MapPin className=\"h-icon-xs w-icon-xs\" />\n                      <span>{selectedRecord.location}</span>\n                    </div>\n                  )}\n                  \n                  <div className=\"pt-md border-t\">\n                    <Badge className={getAvailabilityColor(selectedRecord.availability)}>\n                      {selectedRecord.availability?.replace('_', ' ') || 'Available'}\n                    </Badge>\n                  </div>\n                </div>\n              )}\n            </Drawer>\n\n            {/* Empty State */}\n            {!loading && data.length === 0 && (\n              <Card className=\"p-xl text-center\">\n                <Square className=\"h-icon-2xl w-icon-2xl mx-auto mb-md color-muted\" />\n                <h3 className=\"text-body text-heading-4 mb-sm\">No Spaces Yet</h3>\n                <p className=\"color-muted mb-md\">\n                  Start managing your venue spaces by adding rooms, green rooms, dressing rooms, and other facilities.\n                </p>\n                <Button onClick={handleCreateSpace}>\n                  <Plus className=\"h-icon-xs w-icon-xs mr-sm\" />\n                  Add First Space\n                </Button>\n              </Card>\n            )}\n          </div>\n        </StateManagerProvider>\n      </DataViewProvider>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/programming/spaces/drawers/CreateProgrammingSpaceDrawer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/programming/spaces/drawers/EditProgrammingSpaceDrawer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/programming/spaces/drawers/ViewProgrammingSpaceDrawer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/programming/spaces/lib/spacesService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/programming/spaces/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/programming/spaces/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/programming/spaces/views/ProgrammingSpacesAnalyticsView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/programming/spaces/views/ProgrammingSpacesGridView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/programming/spaces/views/ProgrammingSpacesListView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/programming/spaces/views/ProgrammingSpacesTimelineView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/programming/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/programming/views/CalendarView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/programming/views/CardView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/programming/views/ChartView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/programming/views/GalleryView.tsx","messages":[{"ruleId":"@next/next/no-img-element","severity":1,"message":"Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` or a custom image loader to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","line":139,"column":13,"nodeType":"JSXOpeningElement","endLine":144,"endColumn":15},{"ruleId":"@next/next/no-img-element","severity":1,"message":"Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` or a custom image loader to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","line":322,"column":21,"nodeType":"JSXOpeningElement","endLine":326,"endColumn":23}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport React, { useState } from 'react';\nimport { MoreHorizontal, Edit, Trash2, Eye, ZoomIn, Download } from 'lucide-react';\nimport {\n  Badge,\n  Button,\n  Card,\n  CardContent,\n  CardDescription,\n  CardFooter,\n  CardHeader,\n  CardTitle,\n  Checkbox,\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger\n} from \"@ghxstship/ui\";\nimport { Card, CardContent ,\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuSeparator\n} from '@ghxstship/ui';\nimport { Checkbox ,\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuSeparator\n} from '@ghxstship/ui';\nimport { Badge ,\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuSeparator\n} from '@ghxstship/ui';\nimport {\n  Dropdown,\n  \n  DropdownItem,\n  DropdownMenuTrigger\n} from '@ghxstship/ui';\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle\n} from '@ghxstship/ui';\nimport type { ProgrammingEntity } from '../types';\n\ninterface ImageViewProps<T extends ProgrammingEntity> {\n  data: T[];\n  loading?: boolean;\n  selectable?: boolean;\n  selectedIds?: string[];\n  onSelectionChange?: (ids: string[]) => void;\n  onEdit?: (item: T) => void;\n  onDelete?: (item: T) => void;\n  onView?: (item: T) => void;\n  getImageUrl?: (item: T) => string | null;\n  getThumbnailUrl?: (item: T) => string | null;\n  renderImageItem?: (item: T) => React.ReactNode;\n  emptyMessage?: string;\n  className?: string;\n  columns?: number; // 2-6 columns\n}\n\nexport function ImageView<T extends ProgrammingEntity>({\n  data,\n  loading = false,\n  selectable = false,\n  selectedIds = [],\n  onSelectionChange,\n  onEdit,\n  onDelete,\n  onView,\n  getImageUrl,\n  getThumbnailUrl,\n  renderImageItem,\n  emptyMessage = 'No items to display',\n  className,\n  columns = 4\n}: ImageViewProps<T>) {\n  const [internalSelectedIds, setInternalSelectedIds] = useState<string[]>(selectedIds);\n  const [lightboxOpen, setLightboxOpen] = useState(false);\n  const [lightboxItem, setLightboxItem] = useState<T | null>(null);\n\n  const selectedIdsToUse = onSelectionChange ? selectedIds : internalSelectedIds;\n  const setSelectedIds = onSelectionChange || setInternalSelectedIds;\n\n  const handleSelectItem = (itemId: string, checked: boolean) => {\n    if (checked) {\n      setSelectedIds([...selectedIdsToUse, itemId]);\n    } else {\n      setSelectedIds(selectedIdsToUse.filter(id => id !== itemId));\n    }\n  };\n\n  const openLightbox = (item: T) => {\n    setLightboxItem(item);\n    setLightboxOpen(true);\n  };\n\n  const closeLightbox = () => {\n    setLightboxOpen(false);\n    setLightboxItem(null);\n  };\n\n  const getGridClass = () => {\n    switch (columns) {\n      case 2: return 'grid-cols-2';\n      case 3: return 'grid-cols-3';\n      case 4: return 'grid-cols-4';\n      case 5: return 'grid-cols-5';\n      case 6: return 'grid-cols-6';\n      default: return 'grid-cols-4';\n    }\n  };\n\n  // Default gallery item renderer\n  const defaultRenderImageItem = (item: T) => {\n    const imageUrl = getImageUrl?.(item) || getThumbnailUrl?.(item);\n    const isEvent = 'start_date' in item && 'end_date' in item;\n    const isPerformance = 'date' in item && 'venue' in item;\n    const isWorkshop = 'instructor' in item;\n\n    return (\n      <Card className={`group relative overflow-hidden hover:shadow-lg transition-shadow ${\n        selectedIdsToUse.includes(item.id) ? 'ring-2 ring-blue-500' : ''\n      }`}>\n        {/* Image/Thumbnail */}\n        <div className=\"aspect-square bg-gray-100 relative overflow-hidden\">\n          {imageUrl ? (\n            <img\n              src={imageUrl}\n              alt={item.title || 'Item'}\n              className=\"w-full h-full object-cover group-hover:scale-105 transition-transform duration-200 cursor-pointer\"\n              onClick={() => openLightbox(item)}\n            />\n          ) : (\n            <div className=\"w-full h-full flex items-center justify-center bg-gradient-to-br from-gray-100 to-gray-200\">\n              <div className=\"text-center text-gray-400\">\n                <div className=\"text-4xl mb-2\">📷</div>\n                <div className=\"text-sm\">No image</div>\n              </div>\n            </div>\n          )}\n\n          {/* Overlay with actions */}\n          <div className=\"absolute inset-0 bg-black bg-opacity-0 group-hover:bg-opacity-40 transition-all duration-200\">\n            <div className=\"absolute top-xs right-2 opacity-0 group-hover:opacity-100 transition-opacity\">\n              <div className=\"flex gap-xs\">\n                {imageUrl && (\n                  <Button\n                    variant=\"secondary\"\n                    size=\"sm\"\n                    onClick={() => openLightbox(item)}\n                    className=\"h-icon-lg w-icon-lg p-0\"\n                  >\n                    <ZoomIn className=\"h-icon-xs w-icon-xs\" />\n                  </Button>\n                )}\n                <DropdownMenu>\n                  <DropdownMenuTrigger asChild>\n                    <Button variant=\"secondary\" size=\"sm\" className=\"h-icon-lg w-icon-lg p-0\">\n                      <MoreHorizontal className=\"h-icon-xs w-icon-xs\" />\n                    </Button>\n                  </DropdownMenuTrigger>\n                  <DropdownMenuContent align=\"end\">\n                    {onView && (\n                      <DropdownMenuItem onClick={() => onView(item)}>\n                        <Eye className=\"h-icon-xs w-icon-xs mr-2\" />\n                        View\n                      </DropdownMenuItem>\n                    )}\n                    {onEdit && (\n                      <DropdownMenuItem onClick={() => onEdit(item)}>\n                        <Edit className=\"h-icon-xs w-icon-xs mr-2\" />\n                        Edit\n                      </DropdownMenuItem>\n                    )}\n                    {onDelete && (\n                      <DropdownMenuItem\n                        onClick={() => onDelete(item)}\n                        className=\"text-red-600\"\n                      >\n                        <Trash2 className=\"h-icon-xs w-icon-xs mr-2\" />\n                        Delete\n                      </DropdownMenuItem>\n                    )}\n                  </DropdownMenuContent>\n                </DropdownMenu>\n              </div>\n            </div>\n          </div>\n\n          {/* Selection checkbox */}\n          {selectable && (\n            <div className=\"absolute top-xs left-2\">\n              <Checkbox\n                checked={selectedIdsToUse.includes(item.id)}\n                onCheckedChange={(checked) => handleSelectItem(item.id, checked as boolean)}\n                className=\"bg-white/80 backdrop-blur-sm\"\n              />\n            </div>\n          )}\n        </div>\n\n        {/* Content */}\n        <CardContent className=\"p-sm\">\n          <div className=\"space-y-xs\">\n            <h3 className=\"font-medium text-sm line-clamp-xs\">\n              {item.title || 'Untitled'}\n            </h3>\n\n            {/* Status and type badges */}\n            <div className=\"flex items-center gap-xs\">\n              {'status' in item && (\n                <Badge variant=\"secondary\" className=\"text-xs\">\n                  {item.status}\n                </Badge>\n              )}\n              {'type' in item && (\n                <Badge variant=\"outline\" className=\"text-xs\">\n                  {item.type}\n                </Badge>\n              )}\n            </div>\n\n            {/* Date information */}\n            <div className=\"text-xs text-gray-500\">\n              {isEvent && (\n                <div>\n                  {new Date((item as any).start_date).toLocaleDateString()} - {' '}\n                  {new Date((item as any).end_date).toLocaleDateString()}\n                </div>\n              )}\n              {isPerformance && (\n                <div>\n                  {new Date((item as any).date).toLocaleDateString()}\n                </div>\n              )}\n              {isWorkshop && (\n                <div>\n                  {new Date((item as any).start_date).toLocaleDateString()}\n                </div>\n              )}\n            </div>\n\n            {/* Additional metadata */}\n            <div className=\"text-xs text-gray-500\">\n              {('location' in item || 'venue' in item) && (\n                <div>{(item as any).location || (item as any).venue}</div>\n              )}\n              {('instructor' in item) && (\n                <div>Instructor: {(item as any).instructor}</div>\n              )}\n              {('capacity' in item) && (\n                <div>Capacity: {(item as any).capacity}</div>\n              )}\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  };\n\n  if (loading) {\n    return (\n      <div className={`grid ${getGridClass()} gap-md ${className}`}>\n        {Array.from({ length: 12 }).map((_, i) => (\n          <Card key={i} className=\"overflow-hidden\">\n            <div className=\"aspect-square bg-gray-200 animate-pulse\" />\n            <CardContent className=\"p-sm\">\n              <div className=\"space-y-xs\">\n                <div className=\"h-icon-xs bg-gray-200 animate-pulse rounded\" />\n                <div className=\"h-3 bg-gray-200 animate-pulse rounded w-2/3\" />\n                <div className=\"h-3 bg-gray-200 animate-pulse rounded w-1/2\" />\n              </div>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n    );\n  }\n\n  if (data.length === 0) {\n    return (\n      <div className={`text-center py-xsxl ${className}`}>\n        <p className=\"text-gray-500\">{emptyMessage}</p>\n      </div>\n    );\n  }\n\n  return (\n    <>\n      <div className={`grid ${getGridClass()} gap-md ${className}`}>\n        {data.map((item) => (\n          <div key={item.id}>\n            {renderImageItem ? renderImageItem(item) : defaultRenderImageItem(item)}\n          </div>\n        ))}\n      </div>\n\n      {/* Lightbox Dialog */}\n      <Dialog open={lightboxOpen} onOpenChange={setLightboxOpen}>\n        <DialogContent className=\"max-w-4xl max-h-[90vh] p-0\">\n          <DialogHeader className=\"p-md pb-0\">\n            <DialogTitle>{lightboxItem?.title || 'Item Details'}</DialogTitle>\n          </DialogHeader>\n          <div className=\"p-md pt-0\">\n            {lightboxItem && (\n              <div className=\"space-y-md\">\n                {/* Large image */}\n                {(getImageUrl?.(lightboxItem) || getThumbnailUrl?.(lightboxItem)) && (\n                  <div className=\"relative\">\n                    <img\n                      src={getImageUrl?.(lightboxItem) || getThumbnailUrl?.(lightboxItem) || ''}\n                      alt={lightboxItem.title || 'Item'}\n                      className=\"w-full max-h-container-lg object-contain rounded-lg\"\n                    />\n                  </div>\n                )}\n\n                {/* Item details */}\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-md\">\n                  <div>\n                    <h3 className=\"font-medium mb-2\">Details</h3>\n                    <dl className=\"space-y-xs text-sm\">\n                      <div className=\"flex justify-between\">\n                        <dt className=\"text-gray-600\">Title:</dt>\n                        <dd className=\"font-medium\">{lightboxItem.title || 'Untitled'}</dd>\n                      </div>\n                      {lightboxItem.description && (\n                        <div className=\"flex justify-between\">\n                          <dt className=\"text-gray-600\">Description:</dt>\n                          <dd className=\"font-medium\">{lightboxItem.description}</dd>\n                        </div>\n                      )}\n                      {'status' in lightboxItem && (\n                        <div className=\"flex justify-between\">\n                          <dt className=\"text-gray-600\">Status:</dt>\n                          <dd className=\"font-medium\">{lightboxItem.status}</dd>\n                        </div>\n                      )}\n                      {'type' in lightboxItem && (\n                        <div className=\"flex justify-between\">\n                          <dt className=\"text-gray-600\">Type:</dt>\n                          <dd className=\"font-medium\">{lightboxItem.type}</dd>\n                        </div>\n                      )}\n                    </dl>\n                  </div>\n\n                  <div>\n                    <h3 className=\"font-medium mb-2\">Actions</h3>\n                    <div className=\"flex gap-xs\">\n                      {onView && (\n                        <Button variant=\"outline\" onClick={() => { onView(lightboxItem); closeLightbox(); }}>\n                          <Eye className=\"h-icon-xs w-icon-xs mr-2\" />\n                          View Details\n                        </Button>\n                      )}\n                      {onEdit && (\n                        <Button variant=\"outline\" onClick={() => { onEdit(lightboxItem); closeLightbox(); }}>\n                          <Edit className=\"h-icon-xs w-icon-xs mr-2\" />\n                          Edit\n                        </Button>\n                      )}\n                      {onDelete && (\n                        <Button variant=\"outline\" onClick={() => { onDelete(lightboxItem); closeLightbox(); }} className=\"text-red-600\">\n                          <Trash2 className=\"h-icon-xs w-icon-xs mr-2\" />\n                          Delete\n                        </Button>\n                      )}\n                    </div>\n                  </div>\n                </div>\n              </div>\n            )}\n          </div>\n        </DialogContent>\n      </Dialog>\n    </>\n  );\n}\n\nexport default ImageView;\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/programming/views/KanbanView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/programming/views/ListView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/programming/views/TableView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/programming/views/TimelineView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/programming/workshops/CreateWorkshopClient.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/programming/workshops/ProgrammingWorkshopsClient.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchWorkshops'. Either include it or remove the dependency array.","line":120,"column":5,"nodeType":"ArrayExpression","endLine":120,"endColumn":22,"suggestions":[{"desc":"Update the dependencies array to be: [supabase, orgId, fetchWorkshops]","fix":{"range":[3391,3408],"text":"[supabase, orgId, fetchWorkshops]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { Plus, Search, Download, Grid3X3, List, BarChart3, Calendar } from \"lucide-react\";\nimport { useCallback, useEffect, useMemo, useState } from 'react';\nimport { createBrowserClient } from '@ghxstship/auth';\nimport {\n Badge,\n Button,\n Card,\n Input,\n Select,\n SelectContent,\n SelectItem,\n SelectTrigger,\n SelectValue,\n  Drawer,\n  DrawerContent,\n  DrawerHeader,\n  DrawerTitle,\n  DrawerDescription,\n  DrawerFooter\n} from \"@ghxstship/ui\";\n\nimport type {\n ProgrammingWorkshop,\n WorkshopFilters,\n WorkshopSort,\n ViewType,\n WorkshopCategory,\n WorkshopStatus,\n WorkshopSkillLevel,\n WorkshopFormat,\n WorkshopProject,\n WorkshopEvent\n} from './types';\n\n// Import view components\nimport ProgrammingWorkshopsListView from './views/ProgrammingWorkshopsListView';\nimport ProgrammingWorkshopsGridView from './views/ProgrammingWorkshopsGridView';\nimport ProgrammingWorkshopsTimelineView from './views/ProgrammingWorkshopsTimelineView';\nimport ProgrammingWorkshopsAnalyticsView from './views/ProgrammingWorkshopsAnalyticsView';\n\n// Import drawer components\nimport CreateProgrammingWorkshopDrawer from './drawers/CreateProgrammingWorkshopDrawer';\nimport EditProgrammingWorkshopDrawer from './drawers/EditProgrammingWorkshopDrawer';\nimport ViewProgrammingWorkshopDrawer from './drawers/ViewProgrammingWorkshopDrawer';\n\ninterface User {\n id: string;\n email: string;\n full_name?: string | null;\n avatar_url?: string | null;\n}\n\ninterface ProgrammingWorkshopsClientProps {\n orgId: string;\n currentUserId: string;\n initialWorkshops: ProgrammingWorkshop[];\n projects: WorkshopProject[];\n events: WorkshopEvent[];\n users: User[];\n}\n\nexport default function ProgrammingWorkshopsClient({\n orgId,\n currentUserId,\n initialWorkshops,\n projects,\n events,\n users\n}: ProgrammingWorkshopsClientProps) {\n const supabase = useMemo(() => createBrowserClient(), []);\n\n // State management\n const [workshops, setWorkshops] = useState<ProgrammingWorkshop[]>(initialWorkshops);\n const [loading, setLoading] = useState(false);\n const [selectedWorkshops, setSelectedWorkshops] = useState<string[]>([]);\n const [currentView, setCurrentView] = useState<ViewType>('list');\n const [searchQuery, setSearchQuery] = useState('');\n const [filters, setFilters] = useState<WorkshopFilters>({});\n const [sort, setSort] = useState<WorkshopSort>({ field: 'start_date', direction: 'asc' });\n\n // Drawer state\n const [createDrawerOpen, setCreateDrawerOpen] = useState(false);\n const [editDrawerOpen, setEditDrawerOpen] = useState(false);\n const [viewDrawerOpen, setViewDrawerOpen] = useState(false);\n const [selectedWorkshop, setSelectedWorkshop] = useState<ProgrammingWorkshop | null>(null);\n\n // Real-time subscription\n useEffect(() => {\n const channel = supabase\n .channel(`programming_workshops_${orgId}`)\n .on(\n 'postgres_changes',\n {\n event: '*',\n schema: 'public',\n table: 'programming_workshops',\n filter: `organization_id=eq.${orgId}`\n },\n (payload) => {\n if (payload.eventType === 'INSERT') {\n fetchWorkshops();\n } else if (payload.eventType === 'UPDATE') {\n setWorkshops((prev: unknown) =>\n prev.map((workshop) =>\n workshop.id === payload.new.id ? { ...workshop, ...payload.new } : workshop\n )\n );\n } else if (payload.eventType === 'DELETE') {\n setWorkshops((prev: unknown) => prev.filter((workshop) => workshop.id !== payload.old.id));\n }\n }\n )\n .subscribe();\n\n return () => {\n supabase.removeChannel(channel);\n };\n }, [supabase, orgId]);\n\n // Fetch workshops with filters\n const fetchWorkshops = useCallback(async () => {\n try {\n setLoading(true);\n const params = new URLSearchParams();\n\n if (filters.project_id) params.append('project_id', filters.project_id);\n if (filters.event_id) params.append('event_id', filters.event_id);\n if (filters.category) params.append('category', filters.category);\n if (filters.status) params.append('status', filters.status);\n if (filters.skill_level) params.append('skill_level', filters.skill_level);\n if (filters.format) params.append('format', filters.format);\n if (searchQuery) params.append('search', searchQuery);\n if (filters.start_date_from) params.append('start_date_from', filters.start_date_from);\n if (filters.start_date_to) params.append('start_date_to', filters.start_date_to);\n if (filters.price_min !== undefined) params.append('price_min', filters.price_min.toString());\n if (filters.price_max !== undefined) params.append('price_max', filters.price_max.toString());\n if (filters.has_availability !== undefined) params.append('has_availability', filters.has_availability.toString());\n if (filters.certification_available !== undefined) params.append('certification_available', filters.certification_available.toString());\n\n const response = await fetch(`/api/v1/programming/workshops?${params}`);\n if (!response.ok) throw new Error('Failed to fetch workshops');\n\n const data = await response.json();\n setWorkshops(data);\n } catch (error) {\n console.error('Error fetching workshops:', error);\n } finally {\n setLoading(false);\n }\n }, [filters, searchQuery]);\n\n // Trigger fetch when filters change\n useEffect(() => {\n fetchWorkshops();\n }, [fetchWorkshops]);\n\n // Filter and sort workshops\n const filteredAndSortedWorkshops = useMemo(() => {\n let filtered = [...workshops];\n\n // Apply local search if no server search\n if (searchQuery && !filters.search) {\n const query = searchQuery.toLowerCase();\n filtered = filtered.filter(\n (workshop) =>\n workshop.title?.toLowerCase().includes(query) ||\n workshop.description?.toLowerCase().includes(query) ||\n workshop.agenda?.toLowerCase().includes(query)\n );\n }\n\n // Apply sorting\n filtered.sort((a, b) => {\n const aValue = a[sort.field];\n const bValue = b[sort.field];\n\n if (aValue === null || aValue === undefined) return 1;\n if (bValue === null || bValue === undefined) return -1;\n\n if (typeof aValue === 'string' && typeof bValue === 'string') {\n return sort.direction === 'asc'\n ? aValue.localeCompare(bValue)\n : bValue.localeCompare(aValue);\n }\n\n if (aValue < bValue) return sort.direction === 'asc' ? -1 : 1;\n if (aValue > bValue) return sort.direction === 'asc' ? 1 : -1;\n return 0;\n });\n\n return filtered;\n }, [workshops, searchQuery, filters.search, sort]);\n\n // Handlers\n const handleCreateWorkshop = () => {\n setCreateDrawerOpen(true);\n };\n\n const handleEditWorkshop = (workshop: ProgrammingWorkshop) => {\n setSelectedWorkshop(workshop);\n setEditDrawerOpen(true);\n };\n\n const handleViewWorkshop = (workshop: ProgrammingWorkshop) => {\n setSelectedWorkshop(workshop);\n setViewDrawerOpen(true);\n };\n\n const handleDeleteWorkshop = async (workshopId: string) => {\n try {\n const response = await fetch(`/api/v1/programming/workshops/${workshopId}`, {\n method: 'DELETE'\n });\n\n if (!response.ok) throw new Error('Failed to delete workshop');\n\n setWorkshops((prev: unknown) => prev.filter((workshop) => workshop.id !== workshopId));\n } catch (error) {\n console.error('Error deleting workshop:', error);\n }\n };\n\n const handleBulkAction = async (action: string, workshopIds: string[]) => {\n try {\n setLoading(true);\n \n switch (action) {\n case 'delete':\n await Promise.all(\n workshopIds.map((id) =>\n fetch(`/api/v1/programming/workshops/${id}`, { method: 'DELETE' })\n )\n );\n setWorkshops((prev: unknown) => prev.filter((workshop) => !workshopIds.includes(workshop.id)));\n break;\n case 'cancel':\n await Promise.all(\n workshopIds.map((id) =>\n fetch(`/api/v1/programming/workshops/${id}`, {\n method: 'PATCH',\n headers: { 'Content-Type': 'application/json' },\n body: JSON.stringify({ status: 'cancelled' })\n })\n )\n );\n fetchWorkshops();\n break;\n case 'open_registration':\n await Promise.all(\n workshopIds.map((id) =>\n fetch(`/api/v1/programming/workshops/${id}`, {\n method: 'PATCH',\n headers: { 'Content-Type': 'application/json' },\n body: JSON.stringify({ status: 'open_registration' })\n })\n )\n );\n fetchWorkshops();\n break;\n }\n \n setSelectedWorkshops([]);\n } catch (error) {\n console.error('Error performing bulk action:', error);\n } finally {\n setLoading(false);\n }\n };\n\n const handleSuccess = () => {\n fetchWorkshops();\n setCreateDrawerOpen(false);\n setEditDrawerOpen(false);\n setSelectedWorkshop(null);\n };\n\n // Export functionality\n const handleExport = () => {\n const csvContent = [\n ['Title', 'Category', 'Status', 'Skill Level', 'Format', 'Start Date', 'Participants', 'Price'].join(','),\n ...filteredAndSortedWorkshops.map((workshop) =>\n [\n workshop.title,\n workshop.category,\n workshop.status,\n workshop.skill_level,\n workshop.format,\n new Date(workshop.start_date).toLocaleDateString(),\n `${workshop.current_participants}${workshop.max_participants ? `/${workshop.max_participants}` : ''}`,\n workshop.price ? `${workshop.currency || '$'}${workshop.price}` : 'Free',\n ].join(',')\n ),\n ].join('\\n');\n\n const blob = new Blob([csvContent], { type: 'text/csv' });\n const url = URL.createObjectURL(blob);\n const a = document.createElement('a');\n a.href = url;\n a.download = `programming-workshops-${new Date().toISOString().split('T')[0]}.csv`;\n a.click();\n URL.revokeObjectURL(url);\n };\n\n // View icons\n const viewIcons = {\n list: List,\n grid: Grid3X3,\n timeline: Calendar,\n analytics: BarChart3\n };\n\n return (\n <div className=\"space-y-lg\">\n {/* Header */}\n <div className=\"flex items-center justify-between\">\n <div>\n <h1 className=\"text-2xl font-bold\">Programming Workshops</h1>\n <p className=\"text-muted-foreground\">\n Manage educational workshops, training sessions, and learning experiences\n </p>\n </div>\n <Button onClick={handleCreateWorkshop}>\n <Plus className=\"mr-2 h-icon-xs w-icon-xs\" />\n Create Workshop\n </Button>\n </div>\n\n {/* Filters and Search */}\n <Card className=\"p-md\">\n <div className=\"flex flex-col gap-md md:flex-row md:items-center md:justify-between\">\n <div className=\"flex flex-1 items-center gap-md\">\n <div className=\"relative flex-1 max-w-sm\">\n <Search className=\"absolute left-3 top-xs/2 h-icon-xs w-icon-xs -translate-y-1/2 text-muted-foreground\" />\n <Input\n placeholder=\"Search workshops...\"\n value={searchQuery}\n onChange={(e) => setSearchQuery(e.target.value)}\n className=\"pl-9\"\n />\n </div>\n\n <Select\n value={filters.category || ''}\n onChange={(e) =>\n setFilters((prev: unknown) => ({ ...prev, category: e.target.value as WorkshopCategory || undefined }))\n }\n >\n <SelectTrigger className=\"w-40\">\n <SelectValue placeholder=\"All Categories\" />\n </SelectTrigger>\n <SelectContent>\n <SelectItem value=\"\">All Categories</SelectItem>\n <SelectItem value=\"technical\">Technical</SelectItem>\n <SelectItem value=\"creative\">Creative</SelectItem>\n <SelectItem value=\"business\">Business</SelectItem>\n <SelectItem value=\"leadership\">Leadership</SelectItem>\n <SelectItem value=\"production\">Production</SelectItem>\n <SelectItem value=\"design\">Design</SelectItem>\n <SelectItem value=\"marketing\">Marketing</SelectItem>\n <SelectItem value=\"finance\">Finance</SelectItem>\n <SelectItem value=\"legal\">Legal</SelectItem>\n <SelectItem value=\"other\">Other</SelectItem>\n </SelectContent>\n </Select>\n\n <Select\n value={filters.status || ''}\n onChange={(e) =>\n setFilters((prev: unknown) => ({ ...prev, status: e.target.value as WorkshopStatus || undefined }))\n }\n >\n <SelectTrigger className=\"w-40\">\n <SelectValue placeholder=\"All Status\" />\n </SelectTrigger>\n <SelectContent>\n <SelectItem value=\"\">All Status</SelectItem>\n <SelectItem value=\"planning\">Planning</SelectItem>\n <SelectItem value=\"open_registration\">Open Registration</SelectItem>\n <SelectItem value=\"registration_closed\">Registration Closed</SelectItem>\n <SelectItem value=\"full\">Full</SelectItem>\n <SelectItem value=\"in_progress\">In Progress</SelectItem>\n <SelectItem value=\"completed\">Completed</SelectItem>\n <SelectItem value=\"cancelled\">Cancelled</SelectItem>\n <SelectItem value=\"postponed\">Postponed</SelectItem>\n </SelectContent>\n </Select>\n\n <Select\n value={filters.skill_level || ''}\n onChange={(e) =>\n setFilters((prev: unknown) => ({ ...prev, skill_level: e.target.value as WorkshopSkillLevel || undefined }))\n }\n >\n <SelectTrigger className=\"w-40\">\n <SelectValue placeholder=\"All Levels\" />\n </SelectTrigger>\n <SelectContent>\n <SelectItem value=\"\">All Levels</SelectItem>\n <SelectItem value=\"beginner\">Beginner</SelectItem>\n <SelectItem value=\"intermediate\">Intermediate</SelectItem>\n <SelectItem value=\"advanced\">Advanced</SelectItem>\n <SelectItem value=\"expert\">Expert</SelectItem>\n <SelectItem value=\"all_levels\">All Levels</SelectItem>\n </SelectContent>\n </Select>\n\n <Select\n value={filters.format || ''}\n onChange={(e) =>\n setFilters((prev: unknown) => ({ ...prev, format: e.target.value as WorkshopFormat || undefined }))\n }\n >\n <SelectTrigger className=\"w-40\">\n <SelectValue placeholder=\"All Formats\" />\n </SelectTrigger>\n <SelectContent>\n <SelectItem value=\"\">All Formats</SelectItem>\n <SelectItem value=\"in_person\">In Person</SelectItem>\n <SelectItem value=\"virtual\">Virtual</SelectItem>\n <SelectItem value=\"hybrid\">Hybrid</SelectItem>\n </SelectContent>\n </Select>\n\n <Select\n value={filters.project_id || ''}\n onChange={(e) =>\n setFilters((prev: unknown) => ({ ...prev, project_id: e.target.value || undefined }))\n }\n >\n <SelectTrigger className=\"w-container-xs\">\n <SelectValue placeholder=\"All Projects\" />\n </SelectTrigger>\n <SelectContent>\n <SelectItem value=\"\">All Projects</SelectItem>\n {projects.map((project) => (\n <SelectItem key={project.id} value={project.id}>\n {project.name}\n </SelectItem>\n ))}\n </SelectContent>\n </Select>\n </div>\n\n <div className=\"flex items-center gap-xs\">\n <Button variant=\"outline\" size=\"sm\" onClick={handleExport}>\n <Download className=\"mr-2 h-icon-xs w-icon-xs\" />\n Export\n </Button>\n\n {/* View Switcher */}\n <div className=\"flex items-center rounded-lg border p-xs\">\n {(['list', 'grid', 'timeline', 'analytics'] as ViewType[]).map((view) => {\n const Icon = viewIcons[view];\n return (\n <Button\n key={view}\n variant={currentView === view ? 'default' : 'ghost'}\n size=\"sm\"\n onClick={() => setCurrentView(view)}\n className=\"h-icon-lg w-icon-lg p-0\"\n >\n <Icon className=\"h-icon-xs w-icon-xs\" />\n </Button>\n );\n })}\n </div>\n </div>\n </div>\n\n {/* Bulk Actions */}\n {selectedWorkshops.length > 0 && (\n <div className=\"mt-4 flex items-center gap-xs rounded-lg border bg-muted/50 p-sm\">\n <span className=\"text-sm text-muted-foreground\">\n {selectedWorkshops.length} workshop(s) selected\n </span>\n <div className=\"flex gap-xs\">\n <Button\n size=\"sm\"\n variant=\"outline\"\n onClick={() => handleBulkAction('open_registration', selectedWorkshops)}\n >\n Open Registration\n </Button>\n <Button\n size=\"sm\"\n variant=\"outline\"\n onClick={() => handleBulkAction('cancel', selectedWorkshops)}\n >\n Cancel\n </Button>\n <Button\n size=\"sm\"\n variant=\"destructive\"\n onClick={() => handleBulkAction('delete', selectedWorkshops)}\n >\n Delete\n </Button>\n </div>\n </div>\n )}\n </Card>\n\n {/* Content */}\n <div className=\"min-h-content-lg\">\n {currentView === 'list' && (\n <ProgrammingWorkshopsListView\n workshops={filteredAndSortedWorkshops}\n loading={loading}\n selectedWorkshops={selectedWorkshops}\n onSelectionChange={setSelectedWorkshops}\n onEdit={handleEditWorkshop}\n onView={handleViewWorkshop}\n onDelete={handleDeleteWorkshop}\n sort={sort}\n onSortChange={setSort}\n />\n )}\n\n {currentView === 'grid' && (\n <ProgrammingWorkshopsGridView\n workshops={filteredAndSortedWorkshops}\n loading={loading}\n onEdit={handleEditWorkshop}\n onView={handleViewWorkshop}\n onDelete={handleDeleteWorkshop}\n />\n )}\n\n {currentView === 'timeline' && (\n <ProgrammingWorkshopsTimelineView\n workshops={filteredAndSortedWorkshops}\n loading={loading}\n onEdit={handleEditWorkshop}\n onView={handleViewWorkshop}\n />\n )}\n\n {currentView === 'analytics' && (\n <ProgrammingWorkshopsAnalyticsView\n workshops={filteredAndSortedWorkshops}\n loading={loading}\n />\n )}\n </div>\n\n {/* Drawers */}\n <CreateProgrammingWorkshopDrawer\n open={createDrawerOpen}\n onClose={() => setCreateDrawerOpen(false)}\n orgId={orgId}\n currentUserId={currentUserId}\n projects={projects}\n events={events}\n users={users}\n onSuccess={handleSuccess}\n />\n\n {selectedWorkshop && (\n <>\n <EditProgrammingWorkshopDrawer\n open={editDrawerOpen}\n onClose={() => setEditDrawerOpen(false)}\n workshop={selectedWorkshop}\n orgId={orgId}\n currentUserId={currentUserId}\n projects={projects}\n events={events}\n users={users}\n onSuccess={handleSuccess}\n />\n\n <ViewProgrammingWorkshopDrawer\n open={viewDrawerOpen}\n onClose={() => setViewDrawerOpen(false)}\n workshop={selectedWorkshop}\n users={users}\n onEdit={() => {\n setViewDrawerOpen(false);\n setEditDrawerOpen(true);\n }}\n onDelete={() => {\n handleDeleteWorkshop(selectedWorkshop.id);\n setViewDrawerOpen(false);\n setSelectedWorkshop(null);\n }}\n />\n </>\n )}\n </div>\n );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/programming/workshops/WorkshopsClient.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadWorkshops'. Either include it or remove the dependency array.","line":131,"column":6,"nodeType":"ArrayExpression","endLine":131,"endColumn":13,"suggestions":[{"desc":"Update the dependencies array to be: [loadWorkshops, orgId]","fix":{"range":[2957,2964],"text":"[loadWorkshops, orgId]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\n\nimport { useEffect, useState } from 'react';\nimport {\n  Drawer,\n  type Button,\n  Card,\n  Badge,\n  StateManagerProvider,\n  DataViewProvider,\n  ViewSwitcher,\n  DataActions,\n  DataGrid,\n  KanbanBoard,\n  CalendarView,\n  ListView,\n  Button\n} from '@ghxstship/ui';\nimport { useTranslations } from 'next-intl';\nimport { createBrowserClient } from '@ghxstship/auth';\nimport { \n  Plus, \n  Calendar, \n  Clock, \n  Users, \n  BookOpen,\n  GraduationCap,\n  MapPin,\n  User,\n  Target\n} from 'lucide-react';\n\nexport default function WorkshopsClient({ orgId }: { orgId: string }) {\n  const t = useTranslations('programming');\n  const sb = createBrowserClient();\n  \n  const [data, setData] = useState<DataRecord[]>([]);\n  const [loading, setLoading] = useState(false);\n  const [selectedRecord, setSelectedRecord] = useState<any>(null);\n  const [drawerOpen, setDrawerOpen] = useState(false);\n  const [drawerMode, setDrawerMode] = useState<'view' | 'edit' | 'create'>('view');\n\n  // Define field configuration for workshops\n  const fields: FieldConfig[] = [\n    {\n      key: 'name',\n      label: 'Workshop Title',\n      type: 'text',\n      required: true,\n      sortable: true,\n      filterable: true,\n      width: 200\n    },\n    {\n      key: 'project_name',\n      label: 'Project',\n      type: 'text',\n      sortable: true,\n      filterable: true,\n      width: 150\n    },\n    {\n      key: 'starts_at',\n      label: 'Start Date',\n      type: 'date',\n      sortable: true,\n      filterable: true,\n      width: 130\n    },\n    {\n      key: 'duration_minutes',\n      label: 'Duration (min)',\n      type: 'number',\n      sortable: true,\n      filterable: true,\n      width: 120\n    },\n    {\n      key: 'instructor',\n      label: 'Instructor',\n      type: 'text',\n      sortable: true,\n      filterable: true,\n      width: 150\n    },\n    {\n      key: 'max_participants',\n      label: 'Max Participants',\n      type: 'number',\n      sortable: true,\n      filterable: true,\n      width: 130\n    },\n    {\n      key: 'status',\n      label: 'Status',\n      type: 'select',\n      options: [\n        { value: 'planning', label: 'Planning' },\n        { value: 'open_registration', label: 'Open Registration' },\n        { value: 'full', label: 'Full' },\n        { value: 'in_progress', label: 'In Progress' },\n        { value: 'completed', label: 'Completed' },\n        { value: 'cancelled', label: 'Cancelled' }\n      ],\n      sortable: true,\n      filterable: true,\n      groupable: true,\n      width: 140\n    },\n    {\n      key: 'skill_level',\n      label: 'Skill Level',\n      type: 'select',\n      options: [\n        { value: 'beginner', label: 'Beginner' },\n        { value: 'intermediate', label: 'Intermediate' },\n        { value: 'advanced', label: 'Advanced' },\n        { value: 'all_levels', label: 'All Levels' }\n      ],\n      sortable: true,\n      filterable: true,\n      groupable: true,\n      width: 120\n    }\n  ];\n\n  useEffect(() => {\n    loadWorkshops();\n  }, [orgId]);\n\n  const loadWorkshops = async () => {\n    if (!orgId) return;\n    \n    try {\n      setLoading(true);\n      \n      const { data: workshopsData, error } = await sb\n        .from('events')\n        .select(`\n          *,\n          projects!inner(\n            name,\n            organization_id\n          )\n        `)\n        .eq('kind', 'workshop')\n        .eq('projects.organization_id', orgId)\n        .order('starts_at', { ascending: false });\n      \n      if (error) throw error;\n      \n      // Transform data to include computed fields\n      const transformedData = (workshopsData || []).map(workshop => {\n        const duration = workshop.ends_at && workshop.starts_at \n          ? Math.round((new Date(workshop.ends_at).getTime() - new Date(workshop.starts_at).getTime()) / (1000 * 60))\n          : null;\n          \n        return {\n          ...workshop,\n          project_name: workshop.projects?.name || 'Unknown Project',\n          status: computeWorkshopStatus(workshop),\n          duration_minutes: duration,\n          instructor: workshop.instructor || 'TBD',\n          max_participants: workshop.max_participants || 20,\n          skill_level: workshop.skill_level || 'all_levels',\n          current_participants: workshop.current_participants || 0\n        };\n      });\n      \n      setData(transformedData);\n    } catch (error) {\n      console.error('Error loading workshops:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const computeWorkshopStatus = (workshop: any) => {\n    const now = new Date();\n    const startDate = workshop.starts_at ? new Date(workshop.starts_at) : null;\n    const endDate = workshop.ends_at ? new Date(workshop.ends_at) : null;\n\n    if (!startDate) return 'planning';\n    \n    // Check if workshop is happening now\n    if (startDate <= now && (!endDate || endDate >= now)) return 'in_progress';\n    \n    // Check if workshop is completed\n    if (endDate && endDate < now) return 'completed';\n    \n    // Check registration status for future workshops\n    if (startDate > now) {\n      const maxParticipants = workshop.max_participants || 20;\n      const currentParticipants = workshop.current_participants || 0;\n      \n      if (currentParticipants >= maxParticipants) return 'full';\n      return 'open_registration';\n    }\n    \n    return 'planning';\n  };\n\n  const handleCreateWorkshop = () => {\n    setSelectedRecord(null);\n    setDrawerMode('create');\n    setDrawerOpen(true);\n  };\n\n  const handleEditWorkshop = (workshop: any) => {\n    setSelectedRecord(workshop);\n    setDrawerMode('edit');\n    setDrawerOpen(true);\n  };\n\n  const handleViewWorkshop = (workshop: any) => {\n    setSelectedRecord(workshop);\n    setDrawerMode('view');\n    setDrawerOpen(true);\n  };\n\n  const handleSaveWorkshop = async (workshopData: any) => {\n    try {\n      const eventData = {\n        ...workshopData,\n        kind: 'workshop'\n      };\n      \n      if (drawerMode === 'create') {\n        const { error } = await sb.from('events').insert(eventData);\n        if (error) throw error;\n      } else if (drawerMode === 'edit') {\n        const { error } = await sb\n          .from('events')\n          .update(eventData)\n          .eq('id', selectedRecord.id);\n        if (error) throw error;\n      }\n      \n      await loadWorkshops();\n      setDrawerOpen(false);\n    } catch (error) {\n      console.error('Error saving workshop:', error);\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'planning':\n        return 'color-muted bg-secondary/50';\n      case 'open_registration':\n        return 'color-success bg-success/10';\n      case 'full':\n        return 'color-warning bg-warning/10';\n      case 'in_progress':\n        return 'color-accent bg-accent/10';\n      case 'completed':\n        return 'color-secondary bg-secondary/10';\n      case 'cancelled':\n        return 'color-destructive bg-destructive/10';\n      default:\n        return 'color-muted bg-secondary/50';\n    }\n  };\n\n  const getSkillLevelColor = (level: string) => {\n    switch (level) {\n      case 'beginner':\n        return 'color-success bg-success/10';\n      case 'intermediate':\n        return 'color-warning bg-warning/10';\n      case 'advanced':\n        return 'color-destructive bg-destructive/10';\n      case 'all_levels':\n        return 'color-accent bg-accent/10';\n      default:\n        return 'color-muted bg-secondary/50';\n    }\n  };\n\n  // Configure DataView\n  const config: DataViewConfig = {\n    id: 'workshops-management',\n    name: 'Workshops Management',\n    viewType: 'grid',\n    defaultView: 'grid',\n    fields,\n    data,\n    \n    onSearch: (query: string) => {\n      console.log('Search workshops:', query);\n    },\n    onFilter: (filters: any[]) => {\n      console.log('Filter workshops:', filters);\n    },\n    onSort: (sorts: any[]) => {\n      console.log('Sort workshops:', sorts);\n    },\n    onRefresh: loadWorkshops,\n    onExport: (data: any[], format: string) => {\n      console.log('Export workshops:', format, data);\n    },\n    onImport: (data: any[]) => {\n      console.log('Import workshops:', data);\n    }\n  };\n\n  return (\n    <div className=\"stack-md\">\n      <DataViewProvider config={config}>\n        <StateManagerProvider>\n          <div className=\"stack-md\">\n            {/* Header Actions */}\n            <div className=\"flex items-center justify-between mb-md\">\n              <div className=\"flex items-center gap-md\">\n                <h2 className=\"text-body text-heading-4\">Workshop Management</h2>\n                <Button>\n                  <Plus className=\"h-icon-xs w-icon-xs mr-sm\" />\n                  Create Workshop\n                </Button>\n              </div>\n              <div className=\"flex items-center gap-sm\">\n                <ViewSwitcher />\n                <DataActions />\n              </div>\n            </div>\n\n            {/* Workshop Stats */}\n            <div className=\"grid grid-cols-1 md:grid-cols-4 gap-md mb-lg\">\n              <Card className=\"p-md\">\n                <div className=\"flex items-center gap-sm\">\n                  <div className=\"p-sm bg-success/10 rounded-lg\">\n                    <BookOpen className=\"h-icon-sm w-icon-sm color-success\" />\n                  </div>\n                  <div>\n                    <div className=\"text-heading-3 text-heading-3\">\n                      {data.filter(w => w.status === 'open_registration').length}\n                    </div>\n                    <div className=\"text-body-sm color-muted\">Open Registration</div>\n                  </div>\n                </div>\n              </Card>\n              \n              <Card className=\"p-md\">\n                <div className=\"flex items-center gap-sm\">\n                  <div className=\"p-sm bg-accent/10 rounded-lg\">\n                    <GraduationCap className=\"h-icon-sm w-icon-sm color-accent\" />\n                  </div>\n                  <div>\n                    <div className=\"text-heading-3 text-heading-3\">\n                      {data.filter(w => w.status === 'in_progress').length}\n                    </div>\n                    <div className=\"text-body-sm color-muted\">In Progress</div>\n                  </div>\n                </div>\n              </Card>\n              \n              <Card className=\"p-md\">\n                <div className=\"flex items-center gap-sm\">\n                  <div className=\"p-sm bg-secondary/10 rounded-lg\">\n                    <Users className=\"h-icon-sm w-icon-sm color-secondary\" />\n                  </div>\n                  <div>\n                    <div className=\"text-heading-3 text-heading-3\">\n                      {data.reduce((sum, w) => sum + (w.current_participants || 0), 0)}\n                    </div>\n                    <div className=\"text-body-sm color-muted\">Total Participants</div>\n                  </div>\n                </div>\n              </Card>\n              \n              <Card className=\"p-md\">\n                <div className=\"flex items-center gap-sm\">\n                  <div className=\"p-sm bg-warning/10 rounded-lg\">\n                    <Target className=\"h-icon-sm w-icon-sm color-warning\" />\n                  </div>\n                  <div>\n                    <div className=\"text-heading-3 text-heading-3\">\n                      {data.filter(w => w.status === 'completed').length}\n                    </div>\n                    <div className=\"text-body-sm color-muted\">Completed</div>\n                  </div>\n                </div>\n              </Card>\n            </div>\n\n            {/* Data Views */}\n            <DataGrid />\n            \n            <KanbanBoard \n              columns={[\n                { id: 'planning', title: 'Planning' },\n                { id: 'open_registration', title: 'Open Registration' },\n                { id: 'full', title: 'Full' },\n                { id: 'in_progress', title: 'In Progress' },\n                { id: 'completed', title: 'Completed' }\n              ]}\n              statusField=\"status\"\n              titleField=\"name\"\n              onCardClick={handleViewWorkshop}\n            />\n            \n            <CalendarView \n              startDateField=\"starts_at\"\n              endDateField=\"ends_at\"\n              titleField=\"name\"\n              \n            />\n            \n            <ListView \n              titleField=\"name\"\n              subtitleField=\"project_name\"\n              onItemClick={handleViewWorkshop}\n            />\n            \n            {/* Workshop Details Drawer */}\n            <Drawer\n              open={drawerOpen}\n              onClose={() => {\n                setDrawerOpen(false);\n                setSelectedRecord(null);\n              }}\n              title={\n                drawerMode === 'create' \n                  ? 'Create Workshop' \n                  : selectedRecord?.name || 'Workshop Details'\n              }\n            >\n              {/* Custom Workshop Details */}\n              {selectedRecord && (\n                <div className=\"stack-lg mt-lg\">\n                  {/* Workshop Info */}\n                  <div className=\"grid grid-cols-2 gap-md\">\n                    <div className=\"flex items-center gap-sm text-body-sm\">\n                      <Calendar className=\"h-icon-xs w-icon-xs color-muted\" />\n                      <span className=\"form-label\">Date:</span>\n                      <span>\n                        {selectedRecord.starts_at \n                          ? new Date(selectedRecord.starts_at).toLocaleDateString()\n                          : 'Not scheduled'\n                        }\n                      </span>\n                    </div>\n                    <div className=\"flex items-center gap-sm text-body-sm\">\n                      <Clock className=\"h-icon-xs w-icon-xs color-muted\" />\n                      <span className=\"form-label\">Time:</span>\n                      <span>\n                        {selectedRecord.starts_at \n                          ? new Date(selectedRecord.starts_at).toLocaleTimeString([], { \n                              hour: '2-digit', \n                              minute: '2-digit' \n                            })\n                          : 'TBD'\n                        }\n                      </span>\n                    </div>\n                    <div className=\"flex items-center gap-sm text-body-sm\">\n                      <User className=\"h-icon-xs w-icon-xs color-muted\" />\n                      <span className=\"form-label\">Instructor:</span>\n                      <span>{selectedRecord.instructor || 'TBD'}</span>\n                    </div>\n                    <div className=\"flex items-center gap-sm text-body-sm\">\n                      <Clock className=\"h-icon-xs w-icon-xs color-muted\" />\n                      <span className=\"form-label\">Duration:</span>\n                      <span>{selectedRecord.duration_minutes ? `${selectedRecord.duration_minutes} min` : 'TBD'}</span>\n                    </div>\n                  </div>\n\n                  {/* Status and Level Badges */}\n                  <div className=\"flex items-center gap-md\">\n                    <div className=\"flex items-center gap-sm\">\n                      <span className=\"form-label text-body-sm\">Status:</span>\n                      <Badge className={getStatusColor(selectedRecord.status)}>\n                        {selectedRecord.status?.replace('_', ' ') || 'Planning'}\n                      </Badge>\n                    </div>\n                    <div className=\"flex items-center gap-sm\">\n                      <span className=\"form-label text-body-sm\">Level:</span>\n                      <Badge className={getSkillLevelColor(selectedRecord.skill_level)}>\n                        {selectedRecord.skill_level?.replace('_', ' ') || 'All Levels'}\n                      </Badge>\n                    </div>\n                  </div>\n                  \n                  {/* Participation Metrics */}\n                  <div className=\"grid grid-cols-2 gap-md pt-md border-t\">\n                    <div className=\"text-center\">\n                      <div className=\"text-heading-3 text-heading-3 color-accent\">\n                        {selectedRecord.current_participants || 0}\n                      </div>\n                      <div className=\"text-body-sm color-muted flex items-center justify-center gap-xs\">\n                        <Users className=\"h-3 w-3\" />\n                        Current Participants\n                      </div>\n                    </div>\n                    <div className=\"text-center\">\n                      <div className=\"text-heading-3 text-heading-3 color-success\">\n                        {selectedRecord.max_participants || 20}\n                      </div>\n                      <div className=\"text-body-sm color-muted flex items-center justify-center gap-xs\">\n                        <Target className=\"h-3 w-3\" />\n                        Max Capacity\n                      </div>\n                    </div>\n                  </div>\n\n                  {/* Workshop Description */}\n                  {selectedRecord.description && (\n                    <div className=\"pt-md border-t\">\n                      <h4 className=\"form-label text-body-sm mb-sm flex items-center gap-sm\">\n                        <BookOpen className=\"h-icon-xs w-icon-xs\" />\n                        Workshop Description\n                      </h4>\n                      <p className=\"text-body-sm color-muted bg-secondary/50 p-sm rounded-lg\">\n                        {selectedRecord.description}\n                      </p>\n                    </div>\n                  )}\n\n                  {/* Quick Actions */}\n                  <div className=\"flex gap-sm pt-md border-t\">\n                    <Button>\n                      <Users className=\"h-icon-xs w-icon-xs mr-sm\" />\n                      Manage Participants\n                    </Button>\n                    <Button>\n                      <BookOpen className=\"h-icon-xs w-icon-xs mr-sm\" />\n                      Course Materials\n                    </Button>\n                    <Button>\n                      <MapPin className=\"h-icon-xs w-icon-xs mr-sm\" />\n                      Room Assignment\n                    </Button>\n                  </div>\n                </div>\n              )}\n            </Drawer>\n\n            {/* Empty State */}\n            {!loading && data.length === 0 && (\n              <Card className=\"p-xl text-center\">\n                <BookOpen className=\"h-icon-2xl w-icon-2xl mx-auto mb-md color-muted\" />\n                <h3 className=\"text-body text-heading-4 mb-sm\">No Workshops Yet</h3>\n                <p className=\"color-muted mb-md\">\n                  Start creating educational workshops and training sessions for your events.\n                </p>\n                <Button onClick={handleCreateWorkshop}>\n                  <Plus className=\"h-icon-xs w-icon-xs mr-sm\" />\n                  Create First Workshop\n                </Button>\n              </Card>\n            )}\n          </div>\n        </StateManagerProvider>\n      </DataViewProvider>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/programming/workshops/drawers/CreateProgrammingWorkshopDrawer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/programming/workshops/drawers/EditProgrammingWorkshopDrawer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/programming/workshops/drawers/ViewProgrammingWorkshopDrawer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/programming/workshops/lib/workshopsService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/programming/workshops/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/programming/workshops/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/programming/workshops/views/ProgrammingWorkshopsAnalyticsView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/programming/workshops/views/ProgrammingWorkshopsGridView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/programming/workshops/views/ProgrammingWorkshopsListView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/programming/workshops/views/ProgrammingWorkshopsTimelineView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/projects/ProjectsClient.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/projects/ProjectsClient.unified.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/projects/[id]/edit/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/projects/[id]/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/projects/activations/ActivationsClient.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'selectedActivations'. Either exclude it or remove the dependency array.","line":253,"column":4,"nodeType":"ArrayExpression","endLine":253,"endColumn":49,"suggestions":[{"desc":"Update the dependencies array to be: [setSelectedActivations]","fix":{"range":[7837,7882],"text":"[setSelectedActivations]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport { Grid3x3, LayoutGrid, Calendar, List, Search, Filter, Download, Upload, MoreVertical, Plus, Edit, Trash2, Eye, Copy, CheckCircle, Clock, Play, Rocket, DollarSign, Building, MapPin, ArrowUpDown, Columns } from \"lucide-react\";\nimport { useState, useCallback, useMemo, useEffect } from 'react';\nimport { useRouter } from \"next/navigation\";\nimport { createBrowserClient } from \"@ghxstship/auth\";\nimport {\n Card,\n Button,\n Badge,\n Input,\n Select,\n Checkbox,\n Tabs,\n Dropdown,\n \n DropdownItem,\n \n toast,\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuSeparator\n} from \"@ghxstship/ui\";\nimport { format, parseISO } from \"date-fns\";\nimport CreateActivationDrawer from \"./drawers/CreateActivationDrawer\";\nimport EditActivationDrawer from \"./drawers/EditActivationDrawer\";\nimport ViewActivationDrawer from \"./drawers/ViewActivationDrawer\";\nimport ActivationGridView from \"./views/ActivationGridView\";\nimport ActivationKanbanView from \"./views/ActivationKanbanView\";\nimport ActivationCalendarView from \"./views/ActivationCalendarView\";\nimport ActivationListView from \"./views/ActivationListView\";\n\n// Types\nexport interface Activation {\n id: string;\n name: string;\n description?: string;\n status: \"planning\" | \"ready\" | \"active\" | \"completed\" | \"cancelled\";\n activation_type: \"soft_launch\" | \"beta\" | \"full_launch\" | \"pilot\" | \"rollout\";\n project_id?: string;\n project?: {\n id: string;\n name: string;\n status: string;\n };\n scheduled_date?: string;\n actual_date?: string;\n completion_date?: string;\n location?: string;\n budget?: number;\n actual_cost?: number;\n success_metrics?: Record<string, unknown>;\n stakeholders?: string[];\n dependencies?: string[];\n risks?: string[];\n notes?: string;\n created_at: string;\n updated_at: string;\n organization_id: string;\n}\n\ninterface ActivationsClientProps {\n orgId: string;\n initialActivations?: Activation[];\n projects?: Array<{ id: string; name: string }>;\n}\n\n// View configurations\nconst VIEW_TYPES = [\n { id: \"grid\", label: \"Grid\", icon: Grid3x3 },\n { id: \"kanban\", label: \"Kanban\", icon: LayoutGrid },\n { id: \"calendar\", label: \"Calendar\", icon: Calendar },\n { id: \"list\", label: \"List\", icon: List },\n] as const;\n\ntype ViewType = typeof VIEW_TYPES[number][\"id\"];\n\n// Field configuration\nexport const FIELD_CONFIG = [\n { id: \"name\", label: \"Name\", visible: true, sortable: true },\n { id: \"status\", label: \"Status\", visible: true, sortable: true },\n { id: \"activation_type\", label: \"Type\", visible: true, sortable: true },\n { id: \"project\", label: \"Project\", visible: true, sortable: true },\n { id: \"scheduled_date\", label: \"Scheduled Date\", visible: true, sortable: true },\n { id: \"actual_date\", label: \"Actual Date\", visible: false, sortable: true },\n { id: \"completion_date\", label: \"Completion Date\", visible: false, sortable: true },\n { id: \"location\", label: \"Location\", visible: true, sortable: false },\n { id: \"budget\", label: \"Budget\", visible: true, sortable: true },\n { id: \"actual_cost\", label: \"Actual Cost\", visible: false, sortable: true },\n { id: \"created_at\", label: \"Created\", visible: false, sortable: true },\n { id: \"updated_at\", label: \"Updated\", visible: false, sortable: true },\n];\n\nexport default function ActivationsClient({\n orgId,\n initialActivations = [],\n projects = []\n}: ActivationsClientProps) {\n const router = useRouter();\n const supabase = createBrowserClient();\n\n // State\n const [activations, setActivations] = useState<Activation[]>(initialActivations);\n const [loading, setLoading] = useState(false);\n const [viewType, setViewType] = useState<ViewType>(\"grid\");\n const [searchQuery, setSearchQuery] = useState(\"\");\n const [selectedStatus, setSelectedStatus] = useState<string>(\"all\");\n const [selectedType, setSelectedType] = useState<string>(\"all\");\n const [selectedProject, setSelectedProject] = useState<string>(\"all\");\n const [sortField, setSortField] = useState<string>(\"scheduled_date\");\n const [sortDirection, setSortDirection] = useState<\"asc\" | \"desc\">(\"desc\");\n const [selectedActivations, setSelectedActivations] = useState<Set<string>>(new Set());\n const [fieldVisibility, setFieldVisibility] = useState(FIELD_CONFIG);\n\n // Drawers\n const [createDrawerOpen, setCreateDrawerOpen] = useState(false);\n const [editDrawerOpen, setEditDrawerOpen] = useState(false);\n const [viewDrawerOpen, setViewDrawerOpen] = useState(false);\n const [selectedActivation, setSelectedActivation] = useState<Activation | null>(null);\n\n // Load activations from Supabase\n const loadActivations = useCallback(async () => {\n setLoading(true);\n try {\n const query = supabase\n .from(\"project_activations\")\n .select(`\n *,\n project:projects(id, name, status)\n `)\n .eq(\"organization_id\", orgId)\n .order(sortField, { ascending: sortDirection === \"asc\" });\n\n // Apply filters\n if (selectedStatus !== \"all\") {\n query.eq(\"status\", selectedStatus);\n }\n if (selectedType !== \"all\") {\n query.eq(\"activation_type\", selectedType);\n }\n if (selectedProject !== \"all\") {\n query.eq(\"project_id\", selectedProject);\n }\n\n const { data, error } = await query;\n\n if (error) throw error;\n setActivations(data || []);\n } catch (error) {\n console.error(\"Error loading activations:\", error);\n toast.error(\"Failed to load activations\");\n } finally {\n setLoading(false);\n }\n }, [supabase, orgId, selectedStatus, selectedType, selectedProject, sortField, sortDirection]);\n\n // Load activations on mount and when filters change\n useEffect(() => {\n loadActivations();\n }, [loadActivations]);\n\n // Real-time subscription\n useEffect(() => {\n const channel = supabase\n .channel(\"activations-changes\")\n .on(\n \"postgres_changes\",\n {\n event: \"*\",\n schema: \"public\",\n table: \"project_activations\",\n filter: `organization_id=eq.${orgId}`\n },\n (payload) => {\n loadActivations();\n }\n )\n .subscribe();\n\n return () => {\n supabase.removeChannel(channel);\n };\n }, [supabase, orgId, loadActivations]);\n\n // Filter activations based on search\n const filteredActivations = useMemo(() => {\n return activations.filter((activation) => {\n if (searchQuery) {\n const query = searchQuery.toLowerCase();\n return (\n activation.name.toLowerCase().includes(query) ||\n activation.description?.toLowerCase().includes(query) ||\n activation.location?.toLowerCase().includes(query) ||\n activation.project?.name.toLowerCase().includes(query)\n );\n }\n return true;\n });\n }, [activations, searchQuery]);\n\n // Sort activations\n const sortedActivations = useMemo(() => {\n return [...filteredActivations].sort((a, b) => {\n let aVal: unknown = a[sortField as keyof Activation];\n let bVal: unknown = b[sortField as keyof Activation];\n\n // Handle nested project field\n if (sortField === \"project\") {\n aVal = a.project?.name || \"\";\n bVal = b.project?.name || \"\";\n }\n\n // Handle dates\n if (sortField.includes(\"date\") || sortField.includes(\"_at\")) {\n aVal = aVal ? new Date(aVal).getTime() : 0;\n bVal = bVal ? new Date(bVal).getTime() : 0;\n }\n\n // Handle numbers\n if (typeof aVal === \"number\" && typeof bVal === \"number\") {\n return sortDirection === \"asc\" ? aVal - bVal : bVal - aVal;\n }\n\n // Handle strings\n const aStr = String(aVal || \"\").toLowerCase();\n const bStr = String(bVal || \"\").toLowerCase();\n return sortDirection === \"asc\" \n ? aStr.localeCompare(bStr)\n : bStr.localeCompare(aStr);\n });\n }, [filteredActivations, sortField, sortDirection]);\n\n // Handle selection\n const handleSelectAll = useCallback(() => {\n if (selectedActivations.size === sortedActivations.length) {\n setSelectedActivations(new Set());\n } else {\n setSelectedActivations(new Set(sortedActivations.map((a) => a.id)));\n }\n  }, [selectedActivations, sortedActivations, setSelectedActivations]);\n\n const handleSelectActivation = useCallback((id: string) => {\n setSelectedActivations((prev: Set<string>) => {\n const next = new Set(prev);\n if (next.has(id)) {\n next.delete(id);\n } else {\n next.add(id);\n }\n});\n}, [selectedActivations, setSelectedActivations]);\n\n// Handle actions\nconst handleView = useCallback(\n  (activation: Activation) => {\n    setSelectedActivation(activation);\n    setViewDrawerOpen(true);\n  },\n  [setSelectedActivation, setViewDrawerOpen]\n);\n\nconst handleEdit = useCallback(\n  (activation: Activation) => {\n    setSelectedActivation(activation);\n    setEditDrawerOpen(true);\n  },\n  [setSelectedActivation, setEditDrawerOpen]\n);\n\n const handleDelete = useCallback(async (activation: Activation) => {\n if (!confirm(`Are you sure you want to delete \"${activation.name}\"?`)) return;\n\n try {\n const { error } = await supabase\n .from(\"project_activations\")\n .delete()\n .eq(\"id\", activation.id);\n\n if (error) throw error;\n \n toast.success(\"Activation deleted successfully\");\n loadActivations();\n } catch (error) {\n console.error(\"Error deleting activation:\", error);\n toast.error(\"Failed to delete activation\");\n }\n }, [supabase, loadActivations]);\n\n const handleDuplicate = useCallback(async (activation: Activation) => {\n try {\n const { id, created_at, updated_at, ...activationData } = activation;\n const { data, error } = await supabase\n .from(\"project_activations\")\n .insert({\n ...activationData,\n name: `${activation.name} (Copy)`,\n status: \"planning\"\n })\n .select()\n .single();\n\n if (error) throw error;\n \n toast.success(\"Activation duplicated successfully\");\n loadActivations();\n } catch (error) {\n console.error(\"Error duplicating activation:\", error);\n toast.error(\"Failed to duplicate activation\");\n }\n }, [supabase, loadActivations]);\n\n const handleStatusChange = useCallback(async (activation: Activation, newStatus: string) => {\n try {\n const updates: unknown = { status: newStatus };\n \n // Set actual_date when activation goes active\n if (newStatus === \"active\" && !activation.actual_date) {\n updates.actual_date = new Date().toISOString();\n }\n \n // Set completion_date when activation is completed\n if (newStatus === \"completed\" && !activation.completion_date) {\n updates.completion_date = new Date().toISOString();\n }\n\n const { error } = await supabase\n .from(\"project_activations\")\n .update(updates)\n .eq(\"id\", activation.id);\n\n if (error) throw error;\n \n toast.success(`Activation status updated to ${newStatus}`);\n loadActivations();\n } catch (error) {\n console.error(\"Error updating activation status:\", error);\n toast.error(\"Failed to update activation status\");\n }\n }, [supabase, loadActivations]);\n\n return (\n <div className=\"space-y-md\">\n {/* Header */}\n <Card className=\"p-lg\">\n <div className=\"flex items-center justify-between mb-md\">\n <div>\n <h1 className=\"text-2xl font-bold\">Project Activations</h1>\n <p className=\"text-muted-foreground\">\n Manage project launches, go-live processes, and activations\n </p>\n </div>\n <Button onClick={() => setCreateDrawerOpen(true)}>\n <Plus className=\"mr-2 h-icon-xs w-icon-xs\" />\n New Activation\n </Button>\n </div>\n\n {/* Filters and View Switcher */}\n <div className=\"flex flex-col lg:flex-row gap-md\">\n <div className=\"flex-1 flex flex-wrap gap-sm\">\n <div className=\"relative flex-1 min-w-content-narrow\">\n <Search className=\"absolute left-3 top-xs/2 transform -translate-y-1/2 h-icon-xs w-icon-xs text-muted-foreground\" />\n <Input\n placeholder=\"Search activations...\"\n value={searchQuery}\n onChange={(e) => setSearchQuery(e.target.value)}\n className=\"pl-9\"\n />\n </div>\n \n <Select value={selectedStatus} onValueChange={setSelectedStatus}>\n <option value=\"all\">All Status</option>\n <option value=\"planning\">Planning</option>\n <option value=\"ready\">Ready</option>\n <option value=\"active\">Active</option>\n <option value=\"completed\">Completed</option>\n <option value=\"cancelled\">Cancelled</option>\n </Select>\n\n <Select value={selectedType} onValueChange={setSelectedType}>\n <option value=\"all\">All Types</option>\n <option value=\"soft_launch\">Soft Launch</option>\n <option value=\"beta\">Beta</option>\n <option value=\"full_launch\">Full Launch</option>\n <option value=\"pilot\">Pilot</option>\n <option value=\"rollout\">Rollout</option>\n </Select>\n\n {projects.length > 0 && (\n <Select value={selectedProject} onValueChange={setSelectedProject}>\n <option value=\"all\">All Projects</option>\n {projects.map((project) => (\n <option key={project.id} value={project.id}>\n {project.name}\n </option>\n ))}\n </Select>\n )}\n </div>\n\n {/* View Switcher */}\n <div className=\"flex items-center gap-sm\">\n <DropdownMenu>\n <DropdownMenuTrigger asChild>\n <Button variant=\"outline\" size=\"sm\">\n <Columns className=\"mr-2 h-icon-xs w-icon-xs\" />\n Columns\n </Button>\n </DropdownMenuTrigger>\n <DropdownMenuContent align=\"end\" className=\"w-content-narrow\">\n {fieldVisibility.map((field) => (\n <DropdownMenuItem key={field.id} asChild>\n <label className=\"flex items-center gap-xs cursor-pointer\">\n <Checkbox\n checked={field.visible}\n onCheckedChange={(checked) => {\n setFieldVisibility((prev: unknown) =>\n prev.map((f) =>\n f.id === field.id ? { ...f, visible: !!checked } : f\n )\n );\n }}\n />\n {field.label}\n </label>\n </DropdownMenuItem>\n ))}\n </DropdownMenuContent>\n </DropdownMenu>\n\n <div className=\"flex rounded-md shadow-sm\">\n {VIEW_TYPES.map((view) => {\n const Icon = view.icon;\n return (\n <Button\n key={view.id}\n variant={viewType === view.id ? \"secondary\" : \"outline\"}\n size=\"sm\"\n onClick={() => setViewType(view.id as ViewType)}\n className=\"rounded-none first:rounded-l-md last:rounded-r-md\"\n >\n <Icon className=\"h-icon-xs w-icon-xs\" />\n </Button>\n );\n })}\n </div>\n </div>\n </div>\n </Card>\n\n {/* Bulk Actions Bar */}\n {selectedActivations.size > 0 && (\n <Card className=\"p-sm\">\n <div className=\"flex items-center justify-between\">\n <div className=\"flex items-center gap-sm\">\n <Checkbox\n checked={selectedActivations.size === sortedActivations.length}\n onCheckedChange={handleSelectAll}\n />\n <span className=\"text-sm text-muted-foreground\">\n {selectedActivations.size} selected\n </span>\n </div>\n <div className=\"flex items-center gap-sm\">\n <Button\n variant=\"outline\"\n size=\"sm\"\n onClick={() => handleStatusChange(Array.from(selectedActivations)[0] as unknown, \"active\")}\n >\n Set Active\n </Button>\n <Button\n variant=\"outline\"\n size=\"sm\"\n onClick={() => handleStatusChange(Array.from(selectedActivations)[0] as unknown, \"completed\")}\n >\n Set Completed\n </Button>\n <Button\n variant=\"destructive\"\n size=\"sm\"\n onClick={async () => {\n if (confirm(`Delete ${selectedActivations.size} activations?`)) {\n for (const id of selectedActivations) {\n await supabase.from(\"project_activations\").delete().eq(\"id\", id);\n }\n loadActivations();\n setSelectedActivations(new Set());\n }\n }}\n >\n Delete\n </Button>\n </div>\n </div>\n </Card>\n )}\n\n {/* Content Views */}\n <Card className=\"p-lg\">\n {loading ? (\n <div className=\"flex items-center justify-center py-xl\">\n <div className=\"animate-spin rounded-full h-icon-lg w-icon-lg border-b-2 border-primary\"></div>\n </div>\n ) : sortedActivations.length === 0 ? (\n <div className=\"text-center py-xl\">\n <Rocket className=\"mx-auto h-icon-2xl w-icon-2xl text-muted-foreground mb-md\" />\n <h3 className=\"text-lg font-semibold mb-sm\">No activations found</h3>\n <p className=\"text-muted-foreground mb-md\">\n {searchQuery || selectedStatus !== \"all\" || selectedType !== \"all\"\n ? \"Try adjusting your filters\"\n : \"Get started by creating your first activation\"}\n </p>\n {!searchQuery && selectedStatus === \"all\" && selectedType === \"all\" && (\n <Button onClick={() => setCreateDrawerOpen(true)}>\n <Plus className=\"mr-2 h-icon-xs w-icon-xs\" />\n Create Activation\n </Button>\n )}\n </div>\n ) : (\n <>\n {viewType === \"grid\" && (\n <ActivationGridView\n activations={sortedActivations}\n selectedActivations={selectedActivations}\n onSelectActivation={handleSelectActivation}\n onView={handleView}\n onEdit={handleEdit}\n onDelete={handleDelete}\n onDuplicate={handleDuplicate}\n onStatusChange={handleStatusChange}\n />\n )}\n {viewType === \"kanban\" && (\n <ActivationKanbanView\n activations={sortedActivations}\n selectedActivations={selectedActivations}\n onSelectActivation={handleSelectActivation}\n onView={handleView}\n onEdit={handleEdit}\n onDelete={handleDelete}\n onStatusChange={handleStatusChange}\n />\n )}\n {viewType === \"calendar\" && (\n <ActivationCalendarView\n activations={sortedActivations}\n onView={handleView}\n />\n )}\n {viewType === \"list\" && (\n <ActivationListView\n activations={sortedActivations}\n selectedActivations={selectedActivations}\n fieldVisibility={fieldVisibility}\n sortField={sortField}\n sortDirection={sortDirection}\n onSelectAll={handleSelectAll}\n onSelectActivation={handleSelectActivation}\n onSort={(field) => {\n if (sortField === field) {\n setSortDirection(sortDirection === \"asc\" ? \"desc\" : \"asc\");\n } else {\n setSortField(field);\n setSortDirection(\"asc\");\n }\n }}\n onView={handleView}\n onEdit={handleEdit}\n onDelete={handleDelete}\n onDuplicate={handleDuplicate}\n onStatusChange={handleStatusChange}\n />\n )}\n </>\n )}\n </Card>\n\n {/* Drawers */}\n <CreateActivationDrawer\n open={createDrawerOpen}\n onClose={() => setCreateDrawerOpen(false)}\n orgId={orgId}\n projects={projects}\n onSuccess={loadActivations}\n />\n \n {selectedActivation && (\n <>\n <EditActivationDrawer\n open={editDrawerOpen}\n onClose={() => setEditDrawerOpen(false)}\n activation={selectedActivation}\n projects={projects}\n onSuccess={loadActivations}\n />\n \n <ViewActivationDrawer\n open={viewDrawerOpen}\n onClose={() => setViewDrawerOpen(false)}\n activation={selectedActivation}\n onEdit={() => {\n setViewDrawerOpen(false);\n setEditDrawerOpen(true);\n }}\n />\n </>\n )}\n </div>\n );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/projects/activations/ActivationsTableClient.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/projects/activations/CreateActivationClient.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/projects/activations/drawers/CreateActivationDrawer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/projects/activations/drawers/EditActivationDrawer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/projects/activations/drawers/ViewActivationDrawer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/projects/activations/lib/activations-service.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/projects/activations/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/projects/activations/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/projects/activations/views/ActivationCalendarView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/projects/activations/views/ActivationGridView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/projects/activations/views/ActivationKanbanView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/projects/activations/views/ActivationListView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/projects/create/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/projects/drawers/CreateDrawer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/projects/drawers/EditDrawer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/projects/drawers/ViewDrawer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/projects/drawers/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/projects/error.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/projects/files/FilesFilterBar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/projects/files/FilesTableClient.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/projects/files/FilesUploadClient.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/projects/files/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/projects/inspections/CreateInspectionClient.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/projects/inspections/CreateInspectionDrawer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/projects/inspections/EditInspectionDrawer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/projects/inspections/InspectionsClient.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/projects/inspections/InspectionsTableClient.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/projects/inspections/ViewInspectionDrawer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/projects/inspections/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/projects/inspections/views/InspectionCalendarView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/projects/inspections/views/InspectionGridView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/projects/inspections/views/InspectionKanbanView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/projects/inspections/views/InspectionListView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/projects/lib/api.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/projects/lib/export.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/projects/lib/import.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/projects/lib/mutations.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/projects/lib/permissions.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/projects/lib/projects-service.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/projects/lib/queries.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/projects/lib/realtime.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/projects/lib/validations.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/projects/loading.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/projects/locations/CreateLocationClient.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/projects/locations/CreateLocationDrawer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/projects/locations/EditLocationDrawer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/projects/locations/LocationsClient.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'setSelectedLocations'. Either include it or remove the dependency array.","line":277,"column":5,"nodeType":"ArrayExpression","endLine":277,"endColumn":41,"suggestions":[{"desc":"Update the dependencies array to be: [selectedLocations.size, setSelectedLocations, sortedLocations]","fix":{"range":[8765,8801],"text":"[selectedLocations.size, setSelectedLocations, sortedLocations]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'setSelectedLocations'. Either include it or remove the dependency array.","line":289,"column":5,"nodeType":"ArrayExpression","endLine":289,"endColumn":7,"suggestions":[{"desc":"Update the dependencies array to be: [setSelectedLocations]","fix":{"range":[9027,9029],"text":"[setSelectedLocations]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'setSelectedLocations'. Either include it or remove the dependency array.","line":372,"column":5,"nodeType":"ArrayExpression","endLine":372,"endColumn":49,"suggestions":[{"desc":"Update the dependencies array to be: [selectedLocations, supabase, setSelectedLocations, loadLocations]","fix":{"range":[11329,11373],"text":"[selectedLocations, supabase, setSelectedLocations, loadLocations]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport { Grid3x3, Map, List, LayoutGrid, Search, Filter, Download, Upload, MoreVertical, Plus, Edit, Trash2, Eye, Copy, Archive, MapPin, Building, Users, Navigation, Globe, Home, Warehouse, Store, Building2, TreePine, Waves, Mountain, ChevronDown, ArrowUpDown, ArrowUp, ArrowDown, Columns, ExternalLink } from \"lucide-react\";\nimport { useState, useCallback, useMemo, useEffect } from 'react';\nimport { useRouter } from \"next/navigation\";\nimport { createBrowserClient } from \"@ghxstship/auth\";\nimport {\n Card,\n Button,\n Badge,\n Input,\n Select,\n Checkbox,\n Tabs,\n toast\n} from \"@ghxstship/ui\";\nimport { format, parseISO } from \"date-fns\";\nimport CreateLocationDrawer from \"./CreateLocationDrawer\";\nimport EditLocationDrawer from \"./EditLocationDrawer\";\nimport ViewLocationDrawer from \"./ViewLocationDrawer\";\nimport LocationGridView from \"./views/LocationGridView\";\nimport LocationMapView from \"./views/LocationMapView\";\nimport LocationListView from \"./views/LocationListView\";\nimport LocationGalleryView from \"./views/LocationGalleryView\";\n\n// Types\nexport interface Location {\n id: string;\n organization_id: string;\n project_id?: string;\n project?: {\n id: string;\n name: string;\n status: string;\n };\n name: string;\n type?: \"venue\" | \"office\" | \"warehouse\" | \"retail\" | \"outdoor\" | \"studio\" | \"residential\" | \"other\";\n address?: string;\n city?: string;\n state?: string;\n country?: string;\n postal_code?: string;\n coordinates?: { x: number; y: number } | null;\n capacity?: number;\n size?: number; // square feet/meters\n amenities?: string[];\n accessibility_features?: string[];\n parking_available?: boolean;\n parking_capacity?: number;\n public_transport?: string;\n contact_name?: string;\n contact_phone?: string;\n contact_email?: string;\n operating_hours?: string;\n rental_rate?: number;\n currency?: string;\n availability_status?: \"available\" | \"booked\" | \"maintenance\" | \"unavailable\";\n images?: string[];\n floor_plans?: string[];\n notes?: string;\n tags?: string[];\n is_featured?: boolean;\n is_demo?: boolean;\n created_at: string;\n updated_at: string;\n created_by?: string;\n}\n\ninterface LocationsClientProps {\n orgId: string;\n projectId?: string;\n initialLocations?: Location[];\n projects?: Array<{ id: string; name: string }>;\n}\n\n// View configurations\nconst VIEW_TYPES = [\n { id: \"grid\", label: \"Grid\", icon: Grid3x3 },\n { id: \"map\", label: \"Map\", icon: Map },\n { id: \"list\", label: \"List\", icon: List },\n { id: \"gallery\", label: \"Gallery\", icon: LayoutGrid },\n] as const;\n\ntype ViewType = typeof VIEW_TYPES[number][\"id\"];\n\n// Field configuration for visibility and ordering\nconst FIELD_CONFIG = [\n { id: \"name\", label: \"Name\", visible: true, sortable: true },\n { id: \"type\", label: \"Type\", visible: true, sortable: true },\n { id: \"address\", label: \"Address\", visible: true, sortable: false },\n { id: \"city\", label: \"City\", visible: true, sortable: true },\n { id: \"state\", label: \"State\", visible: false, sortable: true },\n { id: \"country\", label: \"Country\", visible: false, sortable: true },\n { id: \"capacity\", label: \"Capacity\", visible: true, sortable: true },\n { id: \"size\", label: \"Size\", visible: false, sortable: true },\n { id: \"availability_status\", label: \"Availability\", visible: true, sortable: true },\n { id: \"rental_rate\", label: \"Rate\", visible: false, sortable: true },\n { id: \"project\", label: \"Project\", visible: true, sortable: true },\n { id: \"contact_name\", label: \"Contact\", visible: false, sortable: false },\n { id: \"created_at\", label: \"Created\", visible: false, sortable: true },\n { id: \"updated_at\", label: \"Updated\", visible: false, sortable: true },\n];\n\nexport default function LocationsClient({\n orgId,\n projectId,\n initialLocations = [],\n projects = []\n}: LocationsClientProps) {\n const router = useRouter();\n const supabase = createBrowserClient();\n\n // State\n const [locations, setLocations] = useState<Location[]>(initialLocations);\n const [loading, setLoading] = useState(false);\n const [viewType, setViewType] = useState<ViewType>(\"grid\");\n const [searchQuery, setSearchQuery] = useState(\"\");\n const [selectedType, setSelectedType] = useState<string>(\"all\");\n const [selectedAvailability, setSelectedAvailability] = useState<string>(\"all\");\n const [selectedProject, setSelectedProject] = useState<string>(projectId || \"all\");\n const [sortField, setSortField] = useState<string>(\"created_at\");\n const [sortDirection, setSortDirection] = useState<\"asc\" | \"desc\">(\"desc\");\n const [selectedLocations, setSelectedLocations] = useState<Set<string>(new Set());\n const [fieldVisibility, setFieldVisibility] = useState(FIELD_CONFIG);\n\n // Drawers\n const [createDrawerOpen, setCreateDrawerOpen] = useState(false);\n const [editDrawerOpen, setEditDrawerOpen] = useState(false);\n const [viewDrawerOpen, setViewDrawerOpen] = useState(false);\n const [selectedLocation, setSelectedLocation] = useState<Location | null>(null);\n\n // Load locations from Supabase\n const loadLocations = useCallback(async () => {\n setLoading(true);\n try {\n let query = supabase\n .from(\"locations\")\n .select(`\n *,\n project:projects(id, name, status)\n `)\n .eq(\"organization_id\", orgId)\n .order(sortField, { ascending: sortDirection === \"asc\" });\n\n // Apply filters\n if (projectId) {\n query = query.eq(\"project_id\", projectId);\n } else if (selectedProject !== \"all\") {\n query = query.eq(\"project_id\", selectedProject);\n }\n\n const { data, error } = await query;\n\n if (error) throw error;\n \n // Transform data to match our interface\n const transformedData = (data || []).map(loc => ({\n ...loc,\n type: loc.type || \"other\",\n availability_status: loc.availability_status || \"available\",\n amenities: loc.amenities || [],\n accessibility_features: loc.accessibility_features || [],\n images: loc.images || [],\n floor_plans: loc.floor_plans || [],\n tags: loc.tags || []\n }));\n \n setLocations(transformedData);\n } catch (error) {\n console.error(\"Error loading locations:\", error);\n toast.error(\"Failed to load locations\");\n } finally {\n setLoading(false);\n }\n }, [supabase, orgId, projectId, selectedProject, sortField, sortDirection]);\n\n // Load locations on mount and when filters change\n useEffect(() => {\n loadLocations();\n }, [loadLocations]);\n\n // Real-time subscription\n useEffect(() => {\n const channel = supabase\n .channel(\"locations-changes\")\n .on(\n \"postgres_changes\",\n {\n event: \"*\",\n schema: \"public\",\n table: \"locations\",\n filter: `organization_id=eq.${orgId}`\n },\n (payload) => {\n loadLocations();\n }\n )\n .subscribe();\n\n return () => {\n supabase.removeChannel(channel);\n };\n }, [supabase, orgId, loadLocations]);\n\n // Filter locations based on search\n const filteredLocations = useMemo(() => {\n return locations.filter((location) => {\n if (searchQuery) {\n const query = searchQuery.toLowerCase();\n return (\n location.name.toLowerCase().includes(query) ||\n location.address?.toLowerCase().includes(query) ||\n location.city?.toLowerCase().includes(query) ||\n location.state?.toLowerCase().includes(query) ||\n location.country?.toLowerCase().includes(query) ||\n location.notes?.toLowerCase().includes(query) ||\n location.contact_name?.toLowerCase().includes(query) ||\n location.tags?.some(tag => tag.toLowerCase().includes(query))\n );\n }\n return true;\n });\n }, [locations, searchQuery]);\n\n // Apply type and availability filters\n const filteredAndTypedLocations = useMemo(() => {\n return filteredLocations.filter((location) => {\n if (selectedType !== \"all\" && location.type !== selectedType) {\n return false;\n }\n if (selectedAvailability !== \"all\" && location.availability_status !== selectedAvailability) {\n return false;\n }\n return true;\n });\n }, [filteredLocations, selectedType, selectedAvailability]);\n\n // Sort locations\n const sortedLocations = useMemo(() => {\n return [...filteredAndTypedLocations].sort((a, b) => {\n let aVal: unknown = a[sortField as keyof Location];\n let bVal: unknown = b[sortField as keyof Location];\n\n // Handle nested fields\n if (sortField === \"project\") {\n aVal = a.project?.name || \"\";\n bVal = b.project?.name || \"\";\n }\n\n // Handle dates\n if (sortField.includes(\"_at\")) {\n aVal = aVal ? new Date(aVal).getTime() : 0;\n bVal = bVal ? new Date(bVal).getTime() : 0;\n }\n\n // Handle numbers\n if (typeof aVal === \"number\" && typeof bVal === \"number\") {\n return sortDirection === \"asc\" ? aVal - bVal : bVal - aVal;\n }\n\n // Handle strings\n const aStr = String(aVal || \"\").toLowerCase();\n const bStr = String(bVal || \"\").toLowerCase();\n return sortDirection === \"asc\" \n ? aStr.localeCompare(bStr)\n : bStr.localeCompare(aStr);\n });\n }, [filteredAndTypedLocations, sortField, sortDirection]);\n\n // Handle selection\n const handleSelectAll = useCallback(() => {\n if (selectedLocations.size === sortedLocations.length) {\n setSelectedLocations(new Set());\n } else {\n setSelectedLocations(new Set(sortedLocations.map((l) => l.id)));\n }\n }, [selectedLocations, sortedLocations]);\n\n const handleSelectLocation = useCallback((id: string) => {\n setSelectedLocations((prev: unknown) => {\n const next = new Set(prev);\n if (next.has(id)) {\n next.delete(id);\n } else {\n next.add(id);\n }\n return next;\n });\n }, []);\n\n // Handle actions\n const handleView = useCallback((location: Location) => {\n setSelectedLocation(location);\n setViewDrawerOpen(true);\n }, []);\n\n const handleEdit = useCallback((location: Location) => {\n setSelectedLocation(location);\n setEditDrawerOpen(true);\n }, []);\n\n const handleDelete = useCallback(async (location: Location) => {\n if (!confirm(`Are you sure you want to delete \"${location.name}\"?`)) return;\n\n try {\n const { error } = await supabase\n .from(\"locations\")\n .delete()\n .eq(\"id\", location.id);\n\n if (error) throw error;\n \n toast.success(\"Location deleted successfully\");\n loadLocations();\n } catch (error) {\n console.error(\"Error deleting location:\", error);\n toast.error(\"Failed to delete location\");\n }\n }, [supabase, loadLocations]);\n\n const handleDuplicate = useCallback(async (location: Location) => {\n try {\n const { id, created_at, updated_at, ...locationData } = location;\n const { data, error } = await supabase\n .from(\"locations\")\n .insert({\n ...locationData,\n name: `${location.name} (Copy)`\n })\n .select()\n .single();\n\n if (error) throw error;\n \n toast.success(\"Location duplicated successfully\");\n loadLocations();\n } catch (error) {\n console.error(\"Error duplicating location:\", error);\n toast.error(\"Failed to duplicate location\");\n }\n }, [supabase, loadLocations]);\n\n const handleNavigate = useCallback((location: Location) => {\n if (location.coordinates) {\n const { x: lng, y: lat } = location.coordinates;\n window.open(`https://maps.google.com/?q=${lat},${lng}`, \"_blank\");\n } else if (location.address) {\n const query = encodeURIComponent(`${location.address}, ${location.city}, ${location.state} ${location.postal_code}`);\n window.open(`https://maps.google.com/?q=${query}`, \"_blank\");\n }\n }, []);\n\n // Bulk actions\n const handleBulkDelete = useCallback(async () => {\n if (!confirm(`Are you sure you want to delete ${selectedLocations.size} locations?`)) return;\n\n try {\n const { error } = await supabase\n .from(\"locations\")\n .delete()\n .in(\"id\", Array.from(selectedLocations));\n\n if (error) throw error;\n \n toast.success(`${selectedLocations.size} locations deleted successfully`);\n setSelectedLocations(new Set());\n loadLocations();\n } catch (error) {\n console.error(\"Error deleting locations:\", error);\n toast.error(\"Failed to delete locations\");\n }\n }, [supabase, selectedLocations, loadLocations]);\n\n const handleBulkExport = useCallback(() => {\n const selectedData = sortedLocations.filter(l => selectedLocations.has(l.id));\n const csv = convertToCSV(selectedData.length > 0 ? selectedData : sortedLocations);\n downloadCSV(csv, \"locations.csv\");\n }, [sortedLocations, selectedLocations]);\n\n // Helper functions for export\n const convertToCSV = (data: Location[]) => {\n const headers = [\"Name\", \"Type\", \"Address\", \"City\", \"State\", \"Country\", \"Capacity\", \"Size\", \"Availability\", \"Project\"];\n const rows = data.map(l => [\n l.name,\n l.type || \"\",\n l.address || \"\",\n l.city || \"\",\n l.state || \"\",\n l.country || \"\",\n l.capacity?.toString() || \"\",\n l.size?.toString() || \"\",\n l.availability_status || \"\",\n l.project?.name || \"\",\n ]);\n return [headers, ...rows].map(row => row.join(\",\")).join(\"\\n\");\n };\n\n const downloadCSV = (csv: string, filename: string) => {\n const blob = new Blob([csv], { type: \"text/csv\" });\n const url = window.URL.createObjectURL(blob);\n const a = document.createElement(\"a\");\n a.href = url;\n a.download = filename;\n a.click();\n window.URL.revokeObjectURL(url);\n };\n\n // Get type icon\n const getTypeIcon = (type: string) => {\n switch (type) {\n case \"venue\":\n return Building2;\n case \"office\":\n return Building;\n case \"warehouse\":\n return Warehouse;\n case \"retail\":\n return Store;\n case \"outdoor\":\n return TreePine;\n case \"studio\":\n return Home;\n case \"residential\":\n return Home;\n default:\n return MapPin;\n }\n };\n\n // Get availability badge variant\n const getAvailabilityBadgeVariant = (status: string) => {\n switch (status) {\n case \"available\":\n return \"success\";\n case \"booked\":\n return \"warning\";\n case \"maintenance\":\n return \"secondary\";\n case \"unavailable\":\n return \"destructive\";\n default:\n return \"default\";\n }\n };\n\n // Get type badge variant\n const getTypeBadgeVariant = (type: string) => {\n switch (type) {\n case \"venue\":\n return \"info\";\n case \"office\":\n return \"secondary\";\n case \"warehouse\":\n return \"warning\";\n case \"retail\":\n return \"success\";\n case \"outdoor\":\n return \"default\";\n default:\n return \"outline\";\n }\n };\n\n return (\n <div className=\"space-y-md\">\n {/* Header */}\n <Card className=\"p-lg\">\n <div className=\"flex items-center justify-between mb-md\">\n <div>\n <h1 className=\"text-2xl font-bold\">Project Locations</h1>\n <p className=\"text-muted-foreground\">\n Manage venues, offices, and event locations\n </p>\n </div>\n <Button onClick={() => setCreateDrawerOpen(true)}>\n <Plus className=\"mr-2 h-icon-xs w-icon-xs\" />\n Add Location\n </Button>\n </div>\n\n {/* Filters and View Switcher */}\n <div className=\"flex flex-col lg:flex-row gap-md\">\n <div className=\"flex-1 flex flex-wrap gap-sm\">\n <div className=\"relative flex-1 min-w-content-narrow\">\n <Search className=\"absolute left-3 top-xs/2 transform -translate-y-1/2 h-icon-xs w-icon-xs text-muted-foreground\" />\n <Input\n placeholder=\"Search locations...\"\n value={searchQuery}\n onChange={(e) => setSearchQuery(e.target.value)}\n className=\"pl-9\"\n />\n </div>\n \n <Select value={selectedType} onValueChange={setSelectedType}>\n <option value=\"all\">All Types</option>\n <option value=\"venue\">Venue</option>\n <option value=\"office\">Office</option>\n <option value=\"warehouse\">Warehouse</option>\n <option value=\"retail\">Retail</option>\n <option value=\"outdoor\">Outdoor</option>\n <option value=\"studio\">Studio</option>\n <option value=\"residential\">Residential</option>\n <option value=\"other\">Other</option>\n </Select>\n\n <Select value={selectedAvailability} onValueChange={setSelectedAvailability}>\n <option value=\"all\">All Availability</option>\n <option value=\"available\">Available</option>\n <option value=\"booked\">Booked</option>\n <option value=\"maintenance\">Maintenance</option>\n <option value=\"unavailable\">Unavailable</option>\n </Select>\n\n {!projectId && projects.length > 0 && (\n <Select value={selectedProject} onValueChange={setSelectedProject}>\n <option value=\"all\">All Projects</option>\n {projects.map((project) => (\n <option key={project.id} value={project.id}>\n {project.name}\n </option>\n ))}\n </Select>\n )}\n </div>\n\n {/* View Switcher */}\n <div className=\"flex items-center gap-sm\">\n <Button\n variant=\"outline\"\n size=\"sm\"\n onClick={handleBulkExport}\n >\n <Download className=\"mr-2 h-icon-xs w-icon-xs\" />\n Export\n </Button>\n\n <div className=\"flex rounded-md shadow-sm\">\n {VIEW_TYPES.map((view) => {\n const Icon = view.icon;\n return (\n <Button\n key={view.id}\n variant={viewType === view.id ? \"default\" : \"outline\"}\n size=\"sm\"\n onClick={() => setViewType(view.id as ViewType)}\n className=\"rounded-none first:rounded-l-md last:rounded-r-md\"\n >\n <Icon className=\"h-icon-xs w-icon-xs\" />\n </Button>\n );\n })}\n </div>\n </div>\n </div>\n </Card>\n\n {/* Bulk Actions Bar */}\n {selectedLocations.size > 0 && (\n <Card className=\"p-sm\">\n <div className=\"flex items-center justify-between\">\n <div className=\"flex items-center gap-sm\">\n <Checkbox\n checked={selectedLocations.size === sortedLocations.length}\n onChange={handleSelectAll}\n />\n <span className=\"text-sm text-muted-foreground\">\n {selectedLocations.size} selected\n </span>\n </div>\n <div className=\"flex items-center gap-sm\">\n <Button\n variant=\"outline\"\n size=\"sm\"\n onClick={handleBulkExport}\n >\n Export Selected\n </Button>\n <Button\n variant=\"destructive\"\n size=\"sm\"\n onClick={handleBulkDelete}\n >\n Delete Selected\n </Button>\n </div>\n </div>\n </Card>\n )}\n\n {/* Content Views */}\n <Card className=\"p-lg\">\n {loading ? (\n <div className=\"flex items-center justify-center py-xl\">\n <div className=\"animate-spin rounded-full h-icon-lg w-icon-lg border-b-2 border-primary\"></div>\n </div>\n ) : sortedLocations.length === 0 ? (\n <div className=\"text-center py-xl\">\n <MapPin className=\"mx-auto h-icon-2xl w-icon-2xl text-muted-foreground mb-md\" />\n <h3 className=\"text-lg font-semibold mb-sm\">No locations found</h3>\n <p className=\"text-muted-foreground mb-md\">\n {searchQuery || selectedType !== \"all\" || selectedAvailability !== \"all\"\n ? \"Try adjusting your filters\"\n : \"Get started by adding your first location\"}\n </p>\n {!searchQuery && selectedType === \"all\" && selectedAvailability === \"all\" && (\n <Button onClick={() => setCreateDrawerOpen(true)}>\n <Plus className=\"mr-2 h-icon-xs w-icon-xs\" />\n Add Location\n </Button>\n )}\n </div>\n ) : (\n <>\n {viewType === \"grid\" && (\n <LocationGridView\n locations={sortedLocations}\n selectedLocations={selectedLocations}\n onSelectLocation={handleSelectLocation}\n onView={handleView}\n onEdit={handleEdit}\n onDelete={handleDelete}\n onDuplicate={handleDuplicate}\n onNavigate={handleNavigate}\n getTypeIcon={getTypeIcon}\n getAvailabilityBadgeVariant={getAvailabilityBadgeVariant}\n getTypeBadgeVariant={getTypeBadgeVariant}\n />\n )}\n {viewType === \"map\" && (\n <LocationMapView\n locations={sortedLocations}\n onView={handleView}\n getTypeIcon={getTypeIcon}\n getAvailabilityBadgeVariant={getAvailabilityBadgeVariant}\n />\n )}\n {viewType === \"list\" && (\n <LocationListView\n locations={sortedLocations}\n selectedLocations={selectedLocations}\n fieldVisibility={fieldVisibility}\n sortField={sortField}\n sortDirection={sortDirection}\n onSelectAll={handleSelectAll}\n onSelectLocation={handleSelectLocation}\n onSort={(field) => {\n if (sortField === field) {\n setSortDirection(sortDirection === \"asc\" ? \"desc\" : \"asc\");\n } else {\n setSortField(field);\n setSortDirection(\"asc\");\n }\n }}\n onView={handleView}\n onEdit={handleEdit}\n onDelete={handleDelete}\n onDuplicate={handleDuplicate}\n onNavigate={handleNavigate}\n getTypeBadgeVariant={getTypeBadgeVariant}\n getAvailabilityBadgeVariant={getAvailabilityBadgeVariant}\n />\n )}\n {viewType === \"gallery\" && (\n <LocationGalleryView\n locations={sortedLocations}\n selectedLocations={selectedLocations}\n onSelectLocation={handleSelectLocation}\n onView={handleView}\n onEdit={handleEdit}\n onDelete={handleDelete}\n onNavigate={handleNavigate}\n getTypeIcon={getTypeIcon}\n getAvailabilityBadgeVariant={getAvailabilityBadgeVariant}\n />\n )}\n </>\n )}\n </Card>\n\n {/* Drawers */}\n <CreateLocationDrawer\n open={createDrawerOpen}\n onClose={() => setCreateDrawerOpen(false)}\n orgId={orgId}\n projectId={projectId}\n projects={projects}\n onSuccess={loadLocations}\n />\n \n {selectedLocation && (\n <>\n <EditLocationDrawer\n open={editDrawerOpen}\n onClose={() => setEditDrawerOpen(false)}\n location={selectedLocation}\n projects={projects}\n onSuccess={loadLocations}\n />\n \n <ViewLocationDrawer\n open={viewDrawerOpen}\n onClose={() => setViewDrawerOpen(false)}\n location={selectedLocation}\n onEdit={() => {\n setViewDrawerOpen(false);\n setEditDrawerOpen(true);\n }}\n onNavigate={() => handleNavigate(selectedLocation)}\n getTypeIcon={getTypeIcon}\n getAvailabilityBadgeVariant={getAvailabilityBadgeVariant}\n getTypeBadgeVariant={getTypeBadgeVariant}\n />\n </>\n )}\n </div>\n );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/projects/locations/LocationsTableClient.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/projects/locations/ViewLocationDrawer.tsx","messages":[{"ruleId":"jsx-a11y/alt-text","severity":1,"message":"Image elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","line":50,"column":2,"nodeType":"JSXOpeningElement","endLine":50,"endColumn":43},{"ruleId":"@next/next/no-img-element","severity":1,"message":"Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` or a custom image loader to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","line":56,"column":2,"nodeType":"JSXOpeningElement","endLine":60,"endColumn":4},{"ruleId":"@next/next/no-img-element","severity":1,"message":"Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` or a custom image loader to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","line":402,"column":2,"nodeType":"JSXOpeningElement","endLine":406,"endColumn":4}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport { Accessibility, Building, Calendar, Car, Clock, Coffee, DollarSign, Edit, ExternalShare2, Eye, FileText, Image, Mail, MapPin, Monitor, Navigation, Phone, Share2, Tag, Train, Users, Wifi } from 'lucide-react';\nimport {\n  AppDrawer,\n  Badge,\n  Button,\n  Tabs,\n  TabsContent\n} from \"@ghxstship/ui\";\nimport { AppDrawer } from \"@ghxstship/ui\";\nimport { format, parseISO, formatDistanceToNow } from \"date-fns\";\nimport type { Location } from \"./LocationsClient\";\nimport type { LucideIcon } from \"lucide-react\";\n\ninterface ViewLocationDrawerProps {\n open: boolean;\n onOpenChange: (open: boolean) => void;\n location: Location;\n onEdit?: () => void;\n onNavigate?: () => void;\n getTypeIcon: (type: string) => LucideIcon;\n getAvailabilityBadgeVariant: (status: string) => any;\n getTypeBadgeVariant: (type: string) => any;\n}\n\nexport default function ViewLocationDrawer({\n open,\n onOpenChange,\n location,\n onEdit,\n onNavigate,\n getTypeIcon,\n getAvailabilityBadgeVariant,\n getTypeBadgeVariant\n}: ViewLocationDrawerProps) {\n const TypeIcon = getTypeIcon(location.type || \"other\");\n\n // Custom tabs for location details\n const tabs = [\n {\n key: \"overview\",\n label: \"Overview\",\n content: (\n <div className=\"space-y-md\">\n {/* Location Images */}\n {location.images && location.images.length > 0 && (\n <div className=\"space-y-sm\">\n <h4 className=\"font-semibold flex items-center gap-xs\">\n <Image className=\"h-icon-xs w-icon-xs\" />\n Photos\n </h4>\n <div className=\"grid grid-cols-2 gap-sm\">\n {location.images.slice(0, 4).map((image, index) => (\n <div key={index} className=\"aspect-video bg-muted rounded-lg overflow-hidden\">\n <img\n src={image}\n alt={`${location.name} ${index + 1}`}\n className=\"w-full h-full object-cover\"\n />\n </div>\n ))}\n </div>\n {location.images.length > 4 && (\n <p className=\"text-sm text-muted-foreground\">\n +{location.images.length - 4} more photos\n </p>\n )}\n </div>\n )}\n\n {/* Type and Availability */}\n <div className=\"grid grid-cols-2 gap-md\">\n <div className=\"space-y-xs\">\n <div className=\"flex items-center gap-xs text-sm text-muted-foreground\">\n <TypeIcon className=\"h-icon-xs w-icon-xs\" />\n <span>Type</span>\n </div>\n <Badge variant={getTypeBadgeVariant(location.type || \"other\")}>\n {location.type || \"other\"}\n </Badge>\n </div>\n\n <div className=\"space-y-xs\">\n <div className=\"flex items-center gap-xs text-sm text-muted-foreground\">\n <Calendar className=\"h-icon-xs w-icon-xs\" />\n <span>Availability</span>\n </div>\n <Badge variant={getAvailabilityBadgeVariant(location.availability_status || \"available\")}>\n {location.availability_status || \"available\"}\n </Badge>\n </div>\n </div>\n\n {/* Address */}\n {(location.address || location.city) && (\n <div className=\"space-y-xs\">\n <div className=\"flex items-center gap-xs text-sm text-muted-foreground\">\n <MapPin className=\"h-icon-xs w-icon-xs\" />\n <span>Address</span>\n </div>\n <p className=\"font-medium\">\n {[location.address, location.city, location.state, location.postal_code, location.country]\n .filter(Boolean)\n .join(\", \")}\n </p>\n {(location.coordinates || location.address) && (\n <Button\n variant=\"outline\"\n size=\"sm\"\n onClick={onNavigate}\n className=\"mt-xs\"\n >\n <Navigation className=\"mr-2 h-icon-xs w-icon-xs\" />\n Get Directions\n </Button>\n )}\n </div>\n )}\n\n {/* Capacity and Size */}\n <div className=\"grid grid-cols-2 gap-md\">\n {location.capacity && (\n <div className=\"space-y-xs\">\n <div className=\"flex items-center gap-xs text-sm text-muted-foreground\">\n <Users className=\"h-icon-xs w-icon-xs\" />\n <span>Capacity</span>\n </div>\n <p className=\"font-medium\">{location.capacity.toLocaleString()} people</p>\n </div>\n )}\n\n {location.size && (\n <div className=\"space-y-xs\">\n <div className=\"flex items-center gap-xs text-sm text-muted-foreground\">\n <Building className=\"h-icon-xs w-icon-xs\" />\n <span>Size</span>\n </div>\n <p className=\"font-medium\">{location.size.toLocaleString()} sq ft</p>\n </div>\n )}\n </div>\n\n {/* Rental Rate */}\n {location.rental_rate && (\n <div className=\"space-y-xs\">\n <div className=\"flex items-center gap-xs text-sm text-muted-foreground\">\n <DollarSign className=\"h-icon-xs w-icon-xs\" />\n <span>Rental Rate</span>\n </div>\n <p className=\"font-medium text-lg\">\n {location.currency || \"$\"}{location.rental_rate.toLocaleString()} / day\n </p>\n </div>\n )}\n\n {/* Operating Hours */}\n {location.operating_hours && (\n <div className=\"space-y-xs\">\n <div className=\"flex items-center gap-xs text-sm text-muted-foreground\">\n <Clock className=\"h-icon-xs w-icon-xs\" />\n <span>Operating Hours</span>\n </div>\n <p className=\"font-medium\">{location.operating_hours}</p>\n </div>\n )}\n\n {/* Project */}\n {location.project && (\n <div className=\"space-y-xs\">\n <div className=\"flex items-center gap-xs text-sm text-muted-foreground\">\n <FileText className=\"h-icon-xs w-icon-xs\" />\n <span>Project</span>\n </div>\n <p className=\"font-medium\">{location.project.name}</p>\n </div>\n )}\n\n {/* Notes */}\n {location.notes && (\n <div className=\"space-y-xs\">\n <div className=\"flex items-center gap-xs text-sm text-muted-foreground\">\n <FileText className=\"h-icon-xs w-icon-xs\" />\n <span>Notes</span>\n </div>\n <p className=\"text-sm\">{location.notes}</p>\n </div>\n )}\n\n {/* Tags */}\n {location.tags && location.tags.length > 0 && (\n <div className=\"space-y-xs\">\n <div className=\"flex items-center gap-xs text-sm text-muted-foreground\">\n <Tag className=\"h-icon-xs w-icon-xs\" />\n <span>Tags</span>\n </div>\n <div className=\"flex flex-wrap gap-xs\">\n {location.tags.map((tag, index) => (\n <Badge key={index} variant=\"outline\">\n {tag}\n </Badge>\n ))}\n </div>\n </div>\n )}\n\n {/* Featured Badge */}\n {location.is_featured && (\n <Badge variant=\"warning\" className=\"w-fit\">\n ⭐ Featured Location\n </Badge>\n )}\n </div>\n )\n },\n {\n key: \"amenities\",\n label: \"Amenities & Access\",\n content: (\n <div className=\"space-y-md\">\n {/* Amenities */}\n {location.amenities && location.amenities.length > 0 ? (\n <div className=\"space-y-sm\">\n <h4 className=\"font-semibold flex items-center gap-xs\">\n <Wifi className=\"h-icon-xs w-icon-xs\" />\n Amenities\n </h4>\n <div className=\"grid grid-cols-2 gap-sm\">\n {location.amenities.map((amenity, index) => (\n <div key={index} className=\"flex items-center gap-xs\">\n <div className=\"w-2 h-2 rounded-full bg-primary\" />\n <span className=\"text-sm\">{amenity}</span>\n </div>\n ))}\n </div>\n </div>\n ) : (\n <div className=\"text-center py-md text-muted-foreground\">\n <Coffee className=\"mx-auto h-icon-lg w-icon-lg mb-sm opacity-50\" />\n <p className=\"text-sm\">No amenities listed</p>\n </div>\n )}\n\n {/* Accessibility Features */}\n {location.accessibility_features && location.accessibility_features.length > 0 && (\n <div className=\"space-y-sm\">\n <h4 className=\"font-semibold flex items-center gap-xs\">\n <Accessibility className=\"h-icon-xs w-icon-xs\" />\n Accessibility Features\n </h4>\n <div className=\"grid grid-cols-1 gap-sm\">\n {location.accessibility_features.map((feature, index) => (\n <div key={index} className=\"flex items-center gap-xs\">\n <div className=\"w-2 h-2 rounded-full bg-success\" />\n <span className=\"text-sm\">{feature}</span>\n </div>\n ))}\n </div>\n </div>\n )}\n\n {/* Parking */}\n <div className=\"space-y-sm\">\n <h4 className=\"font-semibold flex items-center gap-xs\">\n <Car className=\"h-icon-xs w-icon-xs\" />\n Parking\n </h4>\n {location.parking_available ? (\n <div className=\"space-y-xs\">\n <Badge variant=\"success\">Parking Available</Badge>\n {location.parking_capacity && (\n <p className=\"text-sm\">\n Capacity: {location.parking_capacity} vehicles\n </p>\n )}\n </div>\n ) : (\n <Badge variant=\"secondary\">No Parking</Badge>\n )}\n </div>\n\n {/* Public Transport */}\n {location.public_transport && (\n <div className=\"space-y-sm\">\n <h4 className=\"font-semibold flex items-center gap-xs\">\n <Train className=\"h-icon-xs w-icon-xs\" />\n Public Transport\n </h4>\n <p className=\"text-sm\">{location.public_transport}</p>\n </div>\n )}\n </div>\n )\n },\n {\n key: \"contact\",\n label: \"Contact\",\n content: (\n <div className=\"space-y-md\">\n {location.contact_name || location.contact_phone || location.contact_email ? (\n <>\n {/* Contact Person */}\n {location.contact_name && (\n <div className=\"space-y-xs\">\n <div className=\"flex items-center gap-xs text-sm text-muted-foreground\">\n <Users className=\"h-icon-xs w-icon-xs\" />\n <span>Contact Person</span>\n </div>\n <p className=\"font-medium\">{location.contact_name}</p>\n </div>\n )}\n\n {/* Phone */}\n {location.contact_phone && (\n <div className=\"space-y-xs\">\n <div className=\"flex items-center gap-xs text-sm text-muted-foreground\">\n <Phone className=\"h-icon-xs w-icon-xs\" />\n <span>Phone</span>\n </div>\n <a\n href={`tel:${location.contact_phone as any as any}`}\n className=\"font-medium text-primary hover:underline\"\n >\n {location.contact_phone}\n </a>\n </div>\n )}\n\n {/* Email */}\n {location.contact_email && (\n <div className=\"space-y-xs\">\n <div className=\"flex items-center gap-xs text-sm text-muted-foreground\">\n <Mail className=\"h-icon-xs w-icon-xs\" />\n <span>Email</span>\n </div>\n <a\n href={`mailto:${location.contact_email as any as any}`}\n className=\"font-medium text-primary hover:underline\"\n >\n {location.contact_email}\n </a>\n </div>\n )}\n </>\n ) : (\n <div className=\"text-center py-lg text-muted-foreground\">\n <Phone className=\"mx-auto h-icon-lg w-icon-lg mb-sm opacity-50\" />\n <p>No contact information available</p>\n </div>\n )}\n\n {/* Quick Actions */}\n <div className=\"space-y-sm pt-md border-t\">\n <h4 className=\"font-semibold\">Quick Actions</h4>\n <div className=\"space-y-sm\">\n {location.contact_phone && (\n <Button\n variant=\"outline\"\n className=\"w-full justify-start\"\n onClick={() => window.open(`tel:${location.contact_phone}`, \"_blank\")}\n >\n <Phone className=\"mr-2 h-icon-xs w-icon-xs\" />\n Call {location.contact_name || \"Contact\"}\n </Button>\n )}\n {location.contact_email && (\n <Button\n variant=\"outline\"\n className=\"w-full justify-start\"\n onClick={() => window.open(`mailto:${location.contact_email}`, \"_blank\")}\n >\n <Mail className=\"mr-2 h-icon-xs w-icon-xs\" />\n Email {location.contact_name || \"Contact\"}\n </Button>\n )}\n {(location.coordinates || location.address) && (\n <Button\n variant=\"outline\"\n className=\"w-full justify-start\"\n onClick={onNavigate}\n >\n <Navigation className=\"mr-2 h-icon-xs w-icon-xs\" />\n Get Directions\n </Button>\n )}\n </div>\n </div>\n </div>\n )\n },\n {\n key: \"floorplans\",\n label: \"Floor Plans\",\n content: (\n <div className=\"space-y-md\">\n {location.floor_plans && location.floor_plans.length > 0 ? (\n <div className=\"space-y-sm\">\n <h4 className=\"font-semibold\">Available Floor Plans</h4>\n <div className=\"grid grid-cols-1 gap-sm\">\n {location.floor_plans.map((plan, index) => (\n <div key={index} className=\"border rounded-lg overflow-hidden\">\n <img\n src={plan}\n alt={`Floor plan ${index + 1}`}\n className=\"w-full\"\n />\n </div>\n ))}\n </div>\n </div>\n ) : (\n <div className=\"text-center py-lg text-muted-foreground\">\n <FileText className=\"mx-auto h-icon-lg w-icon-lg mb-sm opacity-50\" />\n <p>No floor plans available</p>\n </div>\n )}\n </div>\n )\n },\n ];\n\n return (\n <AppDrawer\n open={open}\n onClose={() => onOpenChange(false)}\n title={location.name}\n mode=\"view\"\n tabs={tabs}\n actions={[\n {\n key: \"navigate\",\n label: \"Navigate\",\n icon: <Navigation className=\"h-icon-xs w-icon-xs\" />,\n onClick: onNavigate\n },\n {\n key: \"share\",\n label: \"Share\",\n icon: <Share2 className=\"h-icon-xs w-icon-xs\" />,\n onClick: async () => {\n const text = `${location.name}\\n${location.address || \"\"}, ${location.city || \"\"}, ${location.state || \"\"}`;\n await navigator.clipboard.writeText(text);\n // Toast would show \"Location copied to clipboard\"\n }\n },\n {\n key: \"edit\",\n label: \"Edit\",\n icon: <Edit className=\"h-icon-xs w-icon-xs\" />,\n onClick: onEdit\n },\n ]}\n />\n );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/projects/locations/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/projects/locations/views/LocationGalleryView.tsx","messages":[{"ruleId":"@next/next/no-img-element","severity":1,"message":"Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` or a custom image loader to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","line":70,"column":2,"nodeType":"JSXOpeningElement","endLine":74,"endColumn":4}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport { Card, Badge, Button, Checkbox } from \"@ghxstship/ui\";\nimport type { Location } from \"../LocationsClient\";\nimport type { LucideIcon } from \"lucide-react\";\nimport { ImageOff, MapPin, Users, Phone, Mail, Navigation, Eye, Edit, Trash2 } from \"lucide-react\";\n\ninterface LocationGalleryViewProps {\n locations: Location[];\n selectedLocations: Set<string>;\n onSelectLocation: (id: string) => void;\n onView: (location: Location) => void;\n onEdit: (location: Location) => void;\n onDelete: (location: Location) => void;\n onNavigate: (location: Location) => void;\n getTypeIcon: (type: string) => LucideIcon;\n getAvailabilityBadgeVariant: (status: string) => any;\n}\n\nexport default function LocationGalleryView({\n locations,\n selectedLocations,\n onSelectLocation,\n onView,\n onEdit,\n onDelete,\n onNavigate,\n getTypeIcon,\n getAvailabilityBadgeVariant\n}: LocationGalleryViewProps) {\n // Filter locations with images for gallery view\n const locationsWithImages = locations.filter(l => l.images && l.images.length > 0);\n const locationsWithoutImages = locations.filter(l => !l.images || l.images.length === 0);\n\n if (locationsWithImages.length === 0) {\n return (\n <div className=\"text-center py-xl\">\n <ImageOff className=\"mx-auto h-icon-2xl w-icon-2xl text-muted-foreground mb-md\" />\n <h3 className=\"text-lg font-semibold mb-sm\">No Location Images</h3>\n <p className=\"text-muted-foreground mb-md\">\n Upload images to your locations to see them in gallery view\n </p>\n {locationsWithoutImages.length > 0 && (\n <p className=\"text-sm text-muted-foreground\">\n {locationsWithoutImages.length} location{locationsWithoutImages.length > 1 ? \"s\" : \"\"} without images\n </p>\n )}\n </div>\n );\n }\n\n return (\n <div className=\"space-y-lg\">\n {/* Gallery Grid */}\n <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-md\">\n {locationsWithImages.map((location) => {\n const TypeIcon = getTypeIcon(location.type || \"other\");\n \n return (\n <Card\n key={location.id}\n className={`overflow-hidden cursor-pointer hover:shadow-lg transition-shadow ${\n selectedLocations.has(location.id) ? \"ring-2 ring-primary\" : \"\"\n }`}\n onClick={() => onView(location)}\n >\n {/* Image Gallery */}\n <div className=\"relative h-container-xs bg-muted\">\n {location.images && location.images[0] && (\n <img\n src={location.images[0]}\n alt={location.name}\n className=\"w-full h-full object-cover\"\n />\n )}\n \n {/* Selection Checkbox */}\n <div className=\"absolute top-sm left-sm\">\n <Checkbox\n checked={selectedLocations.has(location.id)}\n onChange={() => onSelectLocation(location.id)}\n onClick={(e: React.MouseEvent) => e.stopPropagation()}\n className=\"bg-white/90\"\n />\n </div>\n\n {/* Image Count Badge */}\n {location.images && location.images.length > 1 && (\n <div className=\"absolute bottom-sm right-sm\">\n <Badge variant=\"secondary\" className=\"bg-black/50 text-white\">\n +{location.images.length - 1} photos\n </Badge>\n </div>\n )}\n\n {/* Featured Badge */}\n {location.is_featured && (\n <div className=\"absolute top-sm right-sm\">\n <Badge variant=\"warning\">Featured</Badge>\n </div>\n )}\n </div>\n\n {/* Content */}\n <div className=\"p-md space-y-sm\">\n {/* Title and Type */}\n <div>\n <h3 className=\"font-semibold text-lg line-clamp-xs\">{location.name}</h3>\n <div className=\"flex items-center gap-xs mt-xs\">\n <TypeIcon className=\"h-icon-xs w-icon-xs text-muted-foreground\" />\n <span className=\"text-sm text-muted-foreground\">{location.type || \"other\"}</span>\n <Badge \n variant={getAvailabilityBadgeVariant(location.availability_status || \"available\")}\n className=\"ml-auto\"\n >\n {location.availability_status || \"available\"}\n </Badge>\n </div>\n </div>\n\n {/* Address */}\n {(location.address || location.city) && (\n <div className=\"flex items-start gap-xs text-sm text-muted-foreground\">\n <MapPin className=\"h-3 w-3 mt-0.5 flex-shrink-0\" />\n <span className=\"line-clamp-xs\">\n {[location.address, location.city, location.state, location.country]\n .filter(Boolean)\n .join(\", \")}\n </span>\n </div>\n )}\n\n {/* Details Grid */}\n <div className=\"grid grid-cols-2 gap-sm text-sm\">\n {location.capacity && (\n <div className=\"flex items-center gap-xs\">\n <Users className=\"h-3 w-3 text-muted-foreground\" />\n <span>{location.capacity} capacity</span>\n </div>\n )}\n {location.size && (\n <div>\n {location.size.toLocaleString()} sq ft\n </div>\n )}\n {location.rental_rate && (\n <div className=\"font-medium\">\n {location.currency || \"$\"}{location.rental_rate.toLocaleString()}/day\n </div>\n )}\n {location.parking_available && (\n <div className=\"text-muted-foreground\">\n Parking available\n </div>\n )}\n </div>\n\n {/* Contact */}\n {location.contact_name && (\n <div className=\"flex items-center gap-md text-sm text-muted-foreground border-t pt-sm\">\n <div className=\"flex items-center gap-xs\">\n <Phone className=\"h-3 w-3\" />\n <span className=\"truncate\">{location.contact_name}</span>\n </div>\n {location.contact_email && (\n <div className=\"flex items-center gap-xs\">\n <Mail className=\"h-3 w-3\" />\n <span className=\"truncate\">{location.contact_email}</span>\n </div>\n )}\n </div>\n )}\n\n {/* Actions */}\n <div className=\"flex items-center gap-xs pt-sm border-t\">\n <Button\n variant=\"outline\"\n size=\"sm\"\n className=\"flex-1\"\n onClick={(e) => {\n e.stopPropagation();\n onNavigate(location);\n }}\n >\n <Navigation className=\"h-3 w-3 mr-1\" />\n Navigate\n </Button>\n <Button\n variant=\"ghost\"\n size=\"sm\"\n onClick={(e) => {\n e.stopPropagation();\n onView(location);\n }}\n >\n <Eye className=\"h-icon-xs w-icon-xs\" />\n </Button>\n <Button\n variant=\"ghost\"\n size=\"sm\"\n onClick={(e) => {\n e.stopPropagation();\n onEdit(location);\n }}\n >\n <Edit className=\"h-icon-xs w-icon-xs\" />\n </Button>\n <Button\n variant=\"ghost\"\n size=\"sm\"\n onClick={(e) => {\n e.stopPropagation();\n onDelete(location);\n }}\n >\n <Trash2 className=\"h-icon-xs w-icon-xs text-destructive\" />\n </Button>\n </div>\n </div>\n </Card>\n );\n })}\n </div>\n\n {/* Locations without images */}\n {locationsWithoutImages.length > 0 && (\n <div className=\"space-y-sm\">\n <h3 className=\"text-sm font-medium text-muted-foreground\">\n Locations without images ({locationsWithoutImages.length})\n </h3>\n <div className=\"grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-sm\">\n {locationsWithoutImages.map((location) => {\n const TypeIcon = getTypeIcon(location.type || \"other\");\n \n return (\n <Card\n key={location.id}\n className={`p-sm cursor-pointer hover:shadow-md transition-shadow ${\n selectedLocations.has(location.id) ? \"ring-2 ring-primary\" : \"\"\n }`}\n onClick={() => onView(location)}\n >\n <div className=\"flex items-center gap-sm\">\n <Checkbox\n checked={selectedLocations.has(location.id)}\n onChange={() => onSelectLocation(location.id)}\n onClick={(e: React.MouseEvent) => e.stopPropagation()}\n />\n <TypeIcon className=\"h-icon-xs w-icon-xs text-muted-foreground\" />\n <div className=\"flex-1 min-w-0\">\n <p className=\"font-medium text-sm truncate\">{location.name}</p>\n <p className=\"text-xs text-muted-foreground truncate\">\n {location.city || location.address || \"No address\"}\n </p>\n </div>\n <Button\n variant=\"ghost\"\n size=\"sm\"\n onClick={(e) => {\n e.stopPropagation();\n onEdit(location);\n }}\n >\n <Edit className=\"h-3 w-3\" />\n </Button>\n </div>\n </Card>\n );\n })}\n </div>\n </div>\n )}\n </div>\n );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/projects/locations/views/LocationGridView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/projects/locations/views/LocationListView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/projects/locations/views/LocationMapView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/projects/metadata.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/projects/not-found.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/projects/overview/AutoSeedOnFirstRun.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/projects/overview/CreateProjectClient.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/projects/overview/ProjectsOverviewClient.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadOverviewData'. Either include it or remove the dependency array.","line":57,"column":6,"nodeType":"ArrayExpression","endLine":57,"endColumn":13,"suggestions":[{"desc":"Update the dependencies array to be: [loadOverviewData, orgId]","fix":{"range":[1449,1456],"text":"[loadOverviewData, orgId]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\n\nimport { useState, useEffect } from 'react';\nimport { useRouter } from 'next/navigation';\nimport { useTranslations } from 'next-intl';\nimport { createBrowserClient } from '@ghxstship/auth';\nimport { Card, Badge, Button } from '@ghxstship/ui';\nimport { \n  BarChart3, \n  Calendar, \n  Clock, \n  DollarSign, \n  TrendingUp, \n  Users, \n  AlertTriangle,\n  CheckCircle,\n  Plus,\n  ArrowRight\n} from 'lucide-react';\n\ninterface ProjectStats {\n  totalProjects: number;\n  activeProjects: number;\n  completedProjects: number;\n  totalBudget: number;\n  totalTasks: number;\n  completedTasks: number;\n  overdueTasks: number;\n  totalRisks: number;\n  highRisks: number;\n}\n\ninterface RecentProject {\n  id: string;\n  name: string;\n  status: string;\n  budget: number;\n  created_at: string;\n  tasks_count?: number;\n  completion_percentage?: number;\n}\n\nexport default function ProjectsOverviewClient({ orgId }: { orgId: string }) {\n  const t = useTranslations('projects');\n  const router = useRouter();\n  const [loading, setLoading] = useState(true);\n  const [seedLoading, setSeedLoading] = useState(false);\n  const [message, setMessage] = useState<string | null>(null);\n  const [error, setError] = useState<string | null>(null);\n  const [stats, setStats] = useState<ProjectStats | null>(null);\n  const [recentProjects, setRecentProjects] = useState<RecentProject[]>([]);\n  const sb = createBrowserClient();\n\n  useEffect(() => {\n    loadOverviewData();\n  }, [orgId]);\n\n  async function loadOverviewData() {\n    setLoading(true);\n    try {\n      // Load projects\n      const { data: projects } = await sb\n        .from('projects')\n        .select('*')\n        .eq('organization_id', orgId);\n\n      // Load tasks\n      const { data: tasks } = await sb\n        .from('tasks')\n        .select('*')\n        .eq('organization_id', orgId);\n\n      // Load risks\n      const { data: risks } = await sb\n        .from('risks')\n        .select('*')\n        .eq('organization_id', orgId);\n\n      if (projects) {\n        const totalBudget = projects.reduce((sum, p) => sum + (p.budget || 0), 0);\n        const activeProjects = projects.filter(p => p.status === 'active').length;\n        const completedProjects = projects.filter(p => p.status === 'completed').length;\n\n        const completedTasks = tasks?.filter(t => t.status === 'done').length || 0;\n        const overdueTasks = tasks?.filter(t => \n          t.due_at && new Date(t.due_at) < new Date() && t.status !== 'done'\n        ).length || 0;\n\n        const highRisks = risks?.filter(r => \n          r.impact === 'high' || r.impact === 'very_high'\n        ).length || 0;\n\n        setStats({\n          totalProjects: projects.length,\n          activeProjects,\n          completedProjects,\n          totalBudget,\n          totalTasks: tasks?.length || 0,\n          completedTasks,\n          overdueTasks,\n          totalRisks: risks?.length || 0,\n          highRisks\n        });\n\n        // Set recent projects (last 5)\n        setRecentProjects(\n          projects\n            .sort((a, b) => new Date(b.created_at).getTime() - new Date(a.created_at).getTime())\n            .slice(0, 5)\n        );\n      }\n    } catch (error) {\n      console.error('Error loading overview data:', error);\n      setError('Failed to load overview data');\n    } finally {\n      setLoading(false);\n    }\n  }\n\n  async function onSeedDemo() {\n    setSeedLoading(true);\n    setMessage(null);\n    setError(null);\n    try {\n      const res = await fetch(`/api/organizations/${orgId}/demo`, { method: 'POST' });\n      const json = await res.json();\n      if (!res.ok) throw new Error(json?.error || 'Request failed');\n      setMessage(t('empty.seeded'));\n      if (typeof window !== 'undefined' && (window as any).posthog) {\n        (window as any).posthog.capture('demo.seeded', { organization_id: orgId });\n      }\n      await loadOverviewData(); // Refresh data after seeding\n      router.refresh();\n    } catch (e) {\n      setError(e?.message || t('empty.error'));\n    } finally {\n      setSeedLoading(false);\n    }\n  }\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'active': return 'bg-success/10 color-success';\n      case 'completed': return 'bg-accent/10 color-accent';\n      case 'on_hold': return 'bg-warning/10 color-warning';\n      case 'cancelled': return 'bg-destructive/10 color-destructive';\n      default: return 'bg-secondary/50 color-muted';\n    }\n  };\n\n  const formatCurrency = (amount: number) => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD',\n      minimumFractionDigits: 0,\n      maximumFractionDigits: 0\n    }).format(amount);\n  };\n\n  if (loading) {\n    return (\n      <div className=\"stack-lg\">\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-md\">\n          {[...Array(4)].map((_, i) => (\n            <Card key={i} className=\"animate-pulse\">\n              <div className=\"h-component-lg bg-secondary rounded\"></div>\n            </Card>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  if (!stats || stats.totalProjects === 0) {\n    return (\n      <div className=\"text-center py-xsxl\">\n        <div className=\"mx-auto w-component-lg h-component-lg bg-secondary/50 rounded-full flex items-center justify-center mb-md\">\n          <BarChart3 className=\"w-icon-2xl h-icon-2xl color-muted\" />\n        </div>\n        <h3 className=\"text-body text-heading-4 mb-sm\">No Projects Yet</h3>\n        <p className=\"color-muted mb-lg\">Get started by creating your first project or seeding demo data.</p>\n        <div className=\"flex items-center justify-center gap-md\">\n          <Button onClick={() => router.push('/projects?create=true')}>\n            <Plus className=\"w-icon-xs h-icon-xs mr-sm\" />\n            Create Project\n          </Button>\n          <Button \n            variant=\"outline\" \n            onClick={onSeedDemo}\n            disabled={seedLoading}\n          >\n            {seedLoading ? 'Seeding...' : 'Seed Demo Data'}\n          </Button>\n        </div>\n        {message && (\n          <div className=\"mt-md color-success text-body-sm\">{message}</div>\n        )}\n        {error && (\n          <div className=\"mt-md color-destructive text-body-sm\">{error}</div>\n        )}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"stack-lg\">\n      {/* Key Metrics */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-md\">\n        <Card className=\"p-lg\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-body-sm form-label color-muted\">Total Projects</p>\n              <p className=\"text-heading-3\">{stats.totalProjects}</p>\n            </div>\n            <BarChart3 className=\"w-icon-lg h-icon-lg color-accent\" />\n          </div>\n          <div className=\"mt-sm flex items-center text-body-sm\">\n            <span className=\"color-success\">{stats.activeProjects} active</span>\n            <span className=\"mx-sm\">•</span>\n            <span className=\"color-muted\">{stats.completedProjects} completed</span>\n          </div>\n        </Card>\n\n        <Card className=\"p-lg\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-body-sm form-label color-muted\">Total Budget</p>\n              <p className=\"text-heading-3\">{formatCurrency(stats.totalBudget)}</p>\n            </div>\n            <DollarSign className=\"w-icon-lg h-icon-lg color-success\" />\n          </div>\n          <div className=\"mt-sm text-body-sm color-muted\">\n            Across all projects\n          </div>\n        </Card>\n\n        <Card className=\"p-lg\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-body-sm form-label color-muted\">Tasks Progress</p>\n              <p className=\"text-heading-3\">\n                {stats.totalTasks > 0 ? Math.round((stats.completedTasks / stats.totalTasks) * 100) : 0}%\n              </p>\n            </div>\n            <CheckCircle className=\"w-icon-lg h-icon-lg color-accent\" />\n          </div>\n          <div className=\"mt-sm flex items-center text-body-sm\">\n            <span className=\"color-success\">{stats.completedTasks} done</span>\n            <span className=\"mx-sm\">•</span>\n            <span className=\"color-destructive\">{stats.overdueTasks} overdue</span>\n          </div>\n        </Card>\n\n        <Card className=\"p-lg\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-body-sm form-label color-muted\">Risk Status</p>\n              <p className=\"text-heading-3\">{stats.totalRisks}</p>\n            </div>\n            <AlertTriangle className=\"w-icon-lg h-icon-lg color-warning\" />\n          </div>\n          <div className=\"mt-sm text-body-sm\">\n            <span className=\"color-destructive\">{stats.highRisks} high priority</span>\n          </div>\n        </Card>\n      </div>\n\n      {/* Recent Projects */}\n      <Card className=\"p-lg\">\n        <div className=\"flex items-center justify-between mb-md\">\n          <h3 className=\"text-body text-heading-4\">Recent Projects</h3>\n          <Button \n            variant=\"outline\" \n           \n            onClick={() => router.push('/projects')}\n          >\n            View All\n            <ArrowRight className=\"w-icon-xs h-icon-xs ml-sm\" />\n          </Button>\n        </div>\n        <div className=\"stack-sm\">\n          {recentProjects.map((project: any) => (\n            <div \n              key={project.id}\n              className=\"flex items-center justify-between p-sm border rounded-lg hover:bg-secondary/50 cursor-pointer\"\n              onClick={() => router.push('/projects/' + project.id as any)}\n            >\n              <div className=\"flex-1\">\n                <div className=\"flex items-center gap-sm\">\n                  <h4 className=\"form-label\">{project.name}</h4>\n                  <Badge className={getStatusColor(project.status)}>\n                    {project.status}\n                  </Badge>\n                </div>\n                <div className=\"flex items-center gap-md mt-xs text-body-sm color-muted\">\n                  <span className=\"flex items-center gap-xs\">\n                    <DollarSign className=\"w-3 h-3\" />\n                    {formatCurrency(project.budget || 0)}\n                  </span>\n                  <span className=\"flex items-center gap-xs\">\n                    <Calendar className=\"w-3 h-3\" />\n                    {new Date(project.created_at).toLocaleDateString()}\n                  </span>\n                </div>\n              </div>\n              <ArrowRight className=\"w-icon-xs h-icon-xs color-muted\" />\n            </div>\n          ))}\n        </div>\n      </Card>\n\n      {/* Quick Actions */}\n      <Card className=\"p-lg\">\n        <h3 className=\"text-body text-heading-4 mb-md\">Quick Actions</h3>\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-md\">\n          <Button \n            variant=\"outline\" \n            className=\"h-auto p-md flex flex-col items-center gap-sm\"\n            onClick={() => router.push('/projects?create=true')}\n          >\n            <Plus className=\"w-icon-md h-icon-md\" />\n            <span>Create Project</span>\n          </Button>\n          <Button \n            variant=\"outline\" \n            className=\"h-auto p-md flex flex-col items-center gap-sm\"\n            onClick={() => router.push('/projects/tasks')}\n          >\n            <Clock className=\"w-icon-md h-icon-md\" />\n            <span>View Tasks</span>\n          </Button>\n          <Button \n            variant=\"outline\" \n            className=\"h-auto p-md flex flex-col items-center gap-sm\"\n            onClick={() => router.push('/projects/risks')}\n          >\n            <AlertTriangle className=\"w-icon-md h-icon-md\" />\n            <span>Manage Risks</span>\n          </Button>\n        </div>\n      </Card>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/projects/overview/ProjectsOverviewEnhanced.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/projects/overview/ProjectsTableClient.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/projects/overview/drawers/CreateProjectDrawer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/projects/overview/drawers/EditProjectDrawer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/projects/overview/drawers/ViewProjectDrawer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/projects/overview/lib/projects-service.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/projects/overview/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/projects/overview/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/projects/overview/views/ProjectCalendarView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/projects/overview/views/ProjectGridView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/projects/overview/views/ProjectKanbanView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/projects/overview/views/ProjectListView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/projects/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/projects/risks/CreateRiskClient.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/projects/risks/CreateRiskDrawer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/projects/risks/EditRiskDrawer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/projects/risks/RisksClient.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'setSelectedRisks'. Either include it or remove the dependency array.","line":300,"column":5,"nodeType":"ArrayExpression","endLine":300,"endColumn":33,"suggestions":[{"desc":"Update the dependencies array to be: [selectedRisks.size, setSelectedRisks, sortedRisks]","fix":{"range":[9418,9446],"text":"[selectedRisks.size, setSelectedRisks, sortedRisks]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'setSelectedRisks'. Either include it or remove the dependency array.","line":312,"column":5,"nodeType":"ArrayExpression","endLine":312,"endColumn":7,"suggestions":[{"desc":"Update the dependencies array to be: [setSelectedRisks]","fix":{"range":[9664,9666],"text":"[setSelectedRisks]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport { Grid3x3, LayoutGrid, List, BarChart3, Search, Filter, Download, Plus, AlertTriangle, Shield, TrendingUp, Activity, Target, Zap, AlertCircle, CheckCircle, Clock, ArrowUpDown } from \"lucide-react\";\nimport { useState, useCallback, useMemo, useEffect } from 'react';\nimport { useRouter } from \"next/navigation\";\nimport { createBrowserClient } from \"@ghxstship/auth\";\nimport {\n Card,\n Button,\n Badge,\n Input,\n Select,\n Checkbox,\n toast\n} from \"@ghxstship/ui\";\nimport { format, parseISO, isBefore } from \"date-fns\";\nimport CreateRiskDrawer from \"./CreateRiskDrawer\";\nimport EditRiskDrawer from \"./EditRiskDrawer\";\nimport ViewRiskDrawer from \"./ViewRiskDrawer\";\nimport RiskGridView from \"./views/RiskGridView\";\nimport RiskMatrixView from \"./views/RiskMatrixView\";\nimport RiskListView from \"./views/RiskListView\";\nimport RiskHeatmapView from \"./views/RiskHeatmapView\";\n\n// Types\nexport interface Risk {\n id: string;\n project_id: string;\n organization_id: string;\n project?: {\n id: string;\n name: string;\n status: string;\n };\n title: string;\n description: string;\n category: \"technical\" | \"financial\" | \"operational\" | \"legal\" | \"environmental\" | \"safety\";\n probability: \"very_low\" | \"low\" | \"medium\" | \"high\" | \"very_high\";\n impact: \"very_low\" | \"low\" | \"medium\" | \"high\" | \"very_high\";\n risk_score: number;\n status: \"identified\" | \"assessed\" | \"mitigated\" | \"closed\";\n owner_id?: string;\n owner?: {\n id: string;\n email: string;\n full_name?: string;\n };\n mitigation_plan?: string;\n contingency_plan?: string;\n identified_date: string;\n review_date?: string;\n closed_date?: string;\n created_at: string;\n updated_at: string;\n created_by?: string;\n updated_by?: string;\n}\n\ninterface RisksClientProps {\n orgId: string;\n projectId?: string;\n initialRisks?: Risk[];\n projects?: Array<{ id: string; name: string }>;\n users?: Array<{ id: string; email: string; full_name?: string }>;\n}\n\nconst VIEW_TYPES = [\n { id: \"grid\", label: \"Grid\", icon: Grid3x3 },\n { id: \"matrix\", label: \"Matrix\", icon: LayoutGrid },\n { id: \"heatmap\", label: \"Heatmap\", icon: BarChart3 },\n { id: \"list\", label: \"List\", icon: List },\n] as const;\n\ntype ViewType = typeof VIEW_TYPES[number][\"id\"];\n\nconst FIELD_CONFIG = [\n { id: \"title\", label: \"Title\", visible: true, sortable: true },\n { id: \"category\", label: \"Category\", visible: true, sortable: true },\n { id: \"probability\", label: \"Probability\", visible: true, sortable: true },\n { id: \"impact\", label: \"Impact\", visible: true, sortable: true },\n { id: \"risk_score\", label: \"Risk Score\", visible: true, sortable: true },\n { id: \"status\", label: \"Status\", visible: true, sortable: true },\n { id: \"owner\", label: \"Owner\", visible: true, sortable: true },\n { id: \"project\", label: \"Project\", visible: true, sortable: true },\n { id: \"identified_date\", label: \"Identified\", visible: false, sortable: true },\n { id: \"review_date\", label: \"Review Date\", visible: false, sortable: true },\n { id: \"created_at\", label: \"Created\", visible: false, sortable: true },\n];\n\nexport default function RisksClient({\n orgId,\n projectId,\n initialRisks = [],\n projects = [],\n users = []\n}: RisksClientProps) {\n const router = useRouter();\n const supabase = createBrowserClient();\n\n // State\n const [risks, setRisks] = useState<Risk[]>(initialRisks);\n const [loading, setLoading] = useState(false);\n const [viewType, setViewType] = useState<ViewType>(\"grid\");\n const [searchQuery, setSearchQuery] = useState(\"\");\n const [selectedCategory, setSelectedCategory] = useState<string>(\"all\");\n const [selectedStatus, setSelectedStatus] = useState<string>(\"all\");\n const [selectedProbability, setSelectedProbability] = useState<string>(\"all\");\n const [selectedImpact, setSelectedImpact] = useState<string>(\"all\");\n const [selectedProject, setSelectedProject] = useState<string>(projectId || \"all\");\n const [sortField, setSortField] = useState<string>(\"risk_score\");\n const [sortDirection, setSortDirection] = useState<\"asc\" | \"desc\">(\"desc\");\n const [selectedRisks, setSelectedRisks] = useState<Set<string>(new Set());\n const [fieldVisibility, setFieldVisibility] = useState(FIELD_CONFIG);\n\n // Drawers\n const [createDrawerOpen, setCreateDrawerOpen] = useState(false);\n const [editDrawerOpen, setEditDrawerOpen] = useState(false);\n const [viewDrawerOpen, setViewDrawerOpen] = useState(false);\n const [selectedRisk, setSelectedRisk] = useState<Risk | null>(null);\n\n // Calculate risk score\n const calculateRiskScore = (probability: string, impact: string): number => {\n const probMap: Record<string, number> = {\n very_low: 1,\n low: 2,\n medium: 3,\n high: 4,\n very_high: 5\n };\n return probMap[probability] * probMap[impact];\n };\n\n // Load risks from Supabase\n const loadRisks = useCallback(async () => {\n setLoading(true);\n try {\n let query = supabase\n .from(\"project_risks\")\n .select(`\n *,\n project:projects(id, name, status),\n owner:users!project_risks_owner_id_fkey(id, email, full_name)\n `)\n .eq(\"organization_id\", orgId)\n .order(sortField, { ascending: sortDirection === \"asc\" });\n\n if (projectId) {\n query = query.eq(\"project_id\", projectId);\n } else if (selectedProject !== \"all\") {\n query = query.eq(\"project_id\", selectedProject);\n }\n\n const { data, error } = await query;\n if (error) throw error;\n setRisks(data || []);\n } catch (error) {\n console.error(\"Error loading risks:\", error);\n toast.error(\"Failed to load risks\");\n } finally {\n setLoading(false);\n }\n }, [supabase, orgId, projectId, selectedProject, sortField, sortDirection]);\n\n // Load risks on mount\n useEffect(() => {\n loadRisks();\n }, [loadRisks]);\n\n // Real-time subscription\n useEffect(() => {\n const channel = supabase\n .channel(\"risks-changes\")\n .on(\n \"postgres_changes\",\n {\n event: \"*\",\n schema: \"public\",\n table: \"project_risks\",\n filter: `organization_id=eq.${orgId}`\n },\n () => {\n loadRisks();\n }\n )\n .subscribe();\n\n return () => {\n supabase.removeChannel(channel);\n };\n }, [supabase, orgId, loadRisks]);\n\n // Filter risks\n const filteredRisks = useMemo(() => {\n return risks.filter((risk) => {\n if (searchQuery) {\n const query = searchQuery.toLowerCase();\n return (\n risk.title.toLowerCase().includes(query) ||\n risk.description.toLowerCase().includes(query) ||\n risk.mitigation_plan?.toLowerCase().includes(query) ||\n risk.project?.name.toLowerCase().includes(query)\n );\n }\n return true;\n });\n }, [risks, searchQuery]);\n\n // Apply filters\n const filteredAndTypedRisks = useMemo(() => {\n return filteredRisks.filter((risk) => {\n if (selectedCategory !== \"all\" && risk.category !== selectedCategory) return false;\n if (selectedStatus !== \"all\" && risk.status !== selectedStatus) return false;\n if (selectedProbability !== \"all\" && risk.probability !== selectedProbability) return false;\n if (selectedImpact !== \"all\" && risk.impact !== selectedImpact) return false;\n return true;\n });\n }, [filteredRisks, selectedCategory, selectedStatus, selectedProbability, selectedImpact]);\n\n // Sort risks\n const sortedRisks = useMemo(() => {\n return [...filteredAndTypedRisks].sort((a, b) => {\n let aVal: unknown = a[sortField as keyof Risk];\n let bVal: unknown = b[sortField as keyof Risk];\n\n if (sortField === \"owner\") {\n aVal = a.owner?.full_name || a.owner?.email || \"\";\n bVal = b.owner?.full_name || b.owner?.email || \"\";\n } else if (sortField === \"project\") {\n aVal = a.project?.name || \"\";\n bVal = b.project?.name || \"\";\n }\n\n if (sortField.includes(\"date\") || sortField.includes(\"_at\")) {\n aVal = aVal ? new Date(aVal).getTime() : 0;\n bVal = bVal ? new Date(bVal).getTime() : 0;\n }\n\n if (typeof aVal === \"number\" && typeof bVal === \"number\") {\n return sortDirection === \"asc\" ? aVal - bVal : bVal - aVal;\n }\n\n const aStr = String(aVal || \"\").toLowerCase();\n const bStr = String(bVal || \"\").toLowerCase();\n return sortDirection === \"asc\" \n ? aStr.localeCompare(bStr)\n : bStr.localeCompare(aStr);\n });\n}, [filteredAndTypedRisks, sortField, sortDirection]);\n\n// Group risks for matrix view\nconst riskMatrix = useMemo(() => {\n const matrix: Record<string, Record<string, Risk[]>> = {};\n const probabilities = [\"very_high\", \"high\", \"medium\", \"low\", \"very_low\"];\n const impacts = [\"very_low\", \"low\", \"medium\", \"high\", \"very_high\"];\n\n probabilities.forEach(prob => {\n matrix[prob] = {};\n impacts.forEach(imp => {\n matrix[prob][imp] = [];\n });\n });\n\n sortedRisks.forEach(risk => {\n if (matrix[risk.probability] && matrix[risk.probability][risk.impact]) {\n matrix[risk.probability][risk.impact].push(risk);\n }\n });\n\n return matrix;\n }, [sortedRisks]);\n\n // Calculate statistics\n const statistics = useMemo(() => {\n const stats = {\n total: risks.length,\n identified: risks.filter(r => r.status === \"identified\").length,\n assessed: risks.filter(r => r.status === \"assessed\").length,\n mitigated: risks.filter(r => r.status === \"mitigated\").length,\n closed: risks.filter(r => r.status === \"closed\").length,\n critical: risks.filter(r => r.risk_score >= 20).length,\n high: risks.filter(r => r.risk_score >= 12 && r.risk_score < 20).length,\n medium: risks.filter(r => r.risk_score >= 6 && r.risk_score < 12).length,\n low: risks.filter(r => r.risk_score < 6).length,\n overdue: risks.filter(r => \n r.review_date && \n r.status !== \"closed\" && \n isBefore(parseISO(r.review_date), new Date())\n ).length\n };\n return stats;\n }, [risks]);\n\n // Handle selection\n const handleSelectAll = useCallback(() => {\n if (selectedRisks.size === sortedRisks.length) {\n setSelectedRisks(new Set());\n } else {\n setSelectedRisks(new Set(sortedRisks.map((r) => r.id)));\n }\n }, [selectedRisks, sortedRisks]);\n\n const handleSelectRisk = useCallback((id: string) => {\n setSelectedRisks((prev: unknown) => {\n const next = new Set(prev);\n if (next.has(id)) {\n next.delete(id);\n } else {\n next.add(id);\n }\n return next;\n });\n }, []);\n\n // Handle actions\n const handleView = useCallback((risk: Risk) => {\n setSelectedRisk(risk);\n setViewDrawerOpen(true);\n }, []);\n\n const handleEdit = useCallback((risk: Risk) => {\n setSelectedRisk(risk);\n setEditDrawerOpen(true);\n }, []);\n\n const handleDelete = useCallback(async (risk: Risk) => {\n if (!confirm(`Are you sure you want to delete \"${risk.title}\"?`)) return;\n\n try {\n const { error } = await supabase\n .from(\"project_risks\")\n .delete()\n .eq(\"id\", risk.id);\n\n if (error) throw error;\n toast.success(\"Risk deleted successfully\");\n loadRisks();\n } catch (error) {\n console.error(\"Error deleting risk:\", error);\n toast.error(\"Failed to delete risk\");\n }\n }, [supabase, loadRisks]);\n\n const handleDuplicate = useCallback(async (risk: Risk) => {\n try {\n const { id, created_at, updated_at, ...riskData } = risk;\n const { data, error } = await supabase\n .from(\"project_risks\")\n .insert({\n ...riskData,\n title: `${risk.title} (Copy)`,\n status: \"identified\",\n identified_date: new Date().toISOString().split(\"T\")[0]\n })\n .select()\n .single();\n\n if (error) throw error;\n toast.success(\"Risk duplicated successfully\");\n loadRisks();\n } catch (error) {\n console.error(\"Error duplicating risk:\", error);\n toast.error(\"Failed to duplicate risk\");\n }\n }, [supabase, loadRisks]);\n\n // Bulk actions\n const handleBulkExport = useCallback(() => {\n const selectedData = sortedRisks.filter(r => selectedRisks.has(r.id));\n const csv = convertToCSV(selectedData.length > 0 ? selectedData : sortedRisks);\n downloadCSV(csv, \"risks.csv\");\n }, [sortedRisks, selectedRisks]);\n\n const convertToCSV = (data: Risk[]) => {\n const headers = [\"Title\", \"Category\", \"Probability\", \"Impact\", \"Score\", \"Status\", \"Owner\", \"Project\"];\n const rows = data.map(r => [\n r.title,\n r.category,\n r.probability,\n r.impact,\n r.risk_score.toString(),\n r.status,\n r.owner?.full_name || r.owner?.email || \"\",\n r.project?.name || \"\",\n ]);\n return [headers, ...rows].map(row => row.join(\",\")).join(\"\\n\");\n };\n\n const downloadCSV = (csv: string, filename: string) => {\n const blob = new Blob([csv], { type: \"text/csv\" });\n const url = window.URL.createObjectURL(blob);\n const a = document.createElement(\"a\");\n a.href = url;\n a.download = filename;\n a.click();\n window.URL.revokeObjectURL(url);\n };\n\n // Get helper functions\n const getCategoryIcon = (category: string) => {\n switch (category) {\n case \"technical\": return Activity;\n case \"financial\": return TrendingUp;\n case \"operational\": return Target;\n case \"legal\": return Shield;\n case \"environmental\": return AlertCircle;\n case \"safety\": return AlertTriangle;\n default: return AlertTriangle;\n }\n };\n\n const getRiskLevelColor = (score: number) => {\n if (score >= 20) return \"text-destructive\";\n if (score >= 12) return \"text-warning\";\n if (score >= 6) return \"text-yellow-500\";\n return \"text-success\";\n };\n\n const getRiskLevelBadgeVariant = (score: number) => {\n if (score >= 20) return \"destructive\";\n if (score >= 12) return \"warning\";\n if (score >= 6) return \"secondary\";\n return \"success\";\n };\n\n const getStatusBadgeVariant = (status: string) => {\n switch (status) {\n case \"identified\": return \"secondary\";\n case \"assessed\": return \"warning\";\n case \"mitigated\": return \"success\";\n case \"closed\": return \"default\";\n default: return \"outline\";\n }\n };\n\n const getCategoryBadgeVariant = (category: string) => {\n switch (category) {\n case \"technical\": return \"info\";\n case \"financial\": return \"warning\";\n case \"operational\": return \"secondary\";\n case \"legal\": return \"destructive\";\n case \"environmental\": return \"success\";\n case \"safety\": return \"destructive\";\n default: return \"default\";\n }\n };\n\n return (\n <div className=\"space-y-md\">\n {/* Header */}\n <Card className=\"p-lg\">\n <div className=\"flex items-center justify-between mb-md\">\n <div>\n <h1 className=\"text-2xl font-bold\">Risk Management</h1>\n <p className=\"text-muted-foreground\">\n Identify, assess, and mitigate project risks\n </p>\n </div>\n <Button onClick={() => setCreateDrawerOpen(true)}>\n <Plus className=\"mr-2 h-icon-xs w-icon-xs\" />\n Add Risk\n </Button>\n </div>\n\n {/* Statistics Cards */}\n <div className=\"grid grid-cols-2 md:grid-cols-4 lg:grid-cols-6 gap-md mb-md\">\n <Card className=\"p-sm\">\n <div className=\"flex items-center justify-between\">\n <div>\n <p className=\"text-sm text-muted-foreground\">Total</p>\n <p className=\"text-2xl font-bold\">{statistics.total}</p>\n </div>\n <AlertTriangle className=\"h-icon-lg w-icon-lg text-muted-foreground\" />\n </div>\n </Card>\n <Card className=\"p-sm\">\n <div className=\"flex items-center justify-between\">\n <div>\n <p className=\"text-sm text-muted-foreground\">Critical</p>\n <p className=\"text-2xl font-bold text-destructive\">{statistics.critical}</p>\n </div>\n <Zap className=\"h-icon-lg w-icon-lg text-destructive\" />\n </div>\n </Card>\n <Card className=\"p-sm\">\n <div className=\"flex items-center justify-between\">\n <div>\n <p className=\"text-sm text-muted-foreground\">High</p>\n <p className=\"text-2xl font-bold text-warning\">{statistics.high}</p>\n </div>\n <TrendingUp className=\"h-icon-lg w-icon-lg text-warning\" />\n </div>\n </Card>\n <Card className=\"p-sm\">\n <div className=\"flex items-center justify-between\">\n <div>\n <p className=\"text-sm text-muted-foreground\">Mitigated</p>\n <p className=\"text-2xl font-bold text-success\">{statistics.mitigated}</p>\n </div>\n <Shield className=\"h-icon-lg w-icon-lg text-success\" />\n </div>\n </Card>\n <Card className=\"p-sm\">\n <div className=\"flex items-center justify-between\">\n <div>\n <p className=\"text-sm text-muted-foreground\">Closed</p>\n <p className=\"text-2xl font-bold text-info\">{statistics.closed}</p>\n </div>\n <CheckCircle className=\"h-icon-lg w-icon-lg text-info\" />\n </div>\n </Card>\n <Card className=\"p-sm\">\n <div className=\"flex items-center justify-between\">\n <div>\n <p className=\"text-sm text-muted-foreground\">Overdue</p>\n <p className=\"text-2xl font-bold text-destructive\">{statistics.overdue}</p>\n </div>\n <Clock className=\"h-icon-lg w-icon-lg text-destructive\" />\n </div>\n </Card>\n </div>\n\n {/* Filters and View Switcher */}\n <div className=\"flex flex-col lg:flex-row gap-md\">\n <div className=\"flex-1 flex flex-wrap gap-sm\">\n <div className=\"relative flex-1 min-w-content-narrow\">\n <Search className=\"absolute left-3 top-xs/2 transform -translate-y-1/2 h-icon-xs w-icon-xs text-muted-foreground\" />\n <Input\n placeholder=\"Search risks...\"\n value={searchQuery}\n onChange={(e) => setSearchQuery(e.target.value)}\n className=\"pl-9\"\n />\n </div>\n \n <Select value={selectedCategory} onValueChange={setSelectedCategory}>\n <option value=\"all\">All Categories</option>\n <option value=\"technical\">Technical</option>\n <option value=\"financial\">Financial</option>\n <option value=\"operational\">Operational</option>\n <option value=\"legal\">Legal</option>\n <option value=\"environmental\">Environmental</option>\n <option value=\"safety\">Safety</option>\n </Select>\n\n <Select value={selectedStatus} onValueChange={setSelectedStatus}>\n <option value=\"all\">All Status</option>\n <option value=\"identified\">Identified</option>\n <option value=\"assessed\">Assessed</option>\n <option value=\"mitigated\">Mitigated</option>\n <option value=\"closed\">Closed</option>\n </Select>\n\n <Select value={selectedProbability} onValueChange={setSelectedProbability}>\n <option value=\"all\">All Probability</option>\n <option value=\"very_low\">Very Low</option>\n <option value=\"low\">Low</option>\n <option value=\"medium\">Medium</option>\n <option value=\"high\">High</option>\n <option value=\"very_high\">Very High</option>\n </Select>\n\n {!projectId && projects.length > 0 && (\n <Select value={selectedProject} onValueChange={setSelectedProject}>\n <option value=\"all\">All Projects</option>\n {projects.map((project) => (\n <option key={project.id} value={project.id}>\n {project.name}\n </option>\n ))}\n </Select>\n )}\n </div>\n\n {/* View Switcher */}\n <div className=\"flex items-center gap-sm\">\n <Button variant=\"outline\" size=\"sm\" onClick={handleBulkExport}>\n <Download className=\"mr-2 h-icon-xs w-icon-xs\" />\n Export\n </Button>\n\n <div className=\"flex rounded-md shadow-sm\">\n {VIEW_TYPES.map((view) => {\n const Icon = view.icon;\n return (\n <Button\n key={view.id}\n variant={viewType === view.id ? \"default\" : \"outline\"}\n size=\"sm\"\n onClick={() => setViewType(view.id as ViewType)}\n className=\"rounded-none first:rounded-l-md last:rounded-r-md\"\n >\n <Icon className=\"h-icon-xs w-icon-xs\" />\n </Button>\n );\n })}\n </div>\n </div>\n </div>\n </Card>\n\n {/* Bulk Actions Bar */}\n {selectedRisks.size > 0 && (\n <Card className=\"p-sm\">\n <div className=\"flex items-center justify-between\">\n <div className=\"flex items-center gap-sm\">\n <Checkbox\n checked={selectedRisks.size === sortedRisks.length}\n onChange={handleSelectAll}\n />\n <span className=\"text-sm text-muted-foreground\">\n {selectedRisks.size} selected\n </span>\n </div>\n <div className=\"flex items-center gap-sm\">\n <Button variant=\"outline\" size=\"sm\" onClick={handleBulkExport}>\n Export Selected\n </Button>\n <Button\n variant=\"destructive\"\n size=\"sm\"\n onClick={async () => {\n if (!confirm(`Delete ${selectedRisks.size} risks?`)) return;\n const { error } = await supabase\n .from(\"project_risks\")\n .delete()\n .in(\"id\", Array.from(selectedRisks));\n if (!error) {\n toast.success(\"Risks deleted\");\n setSelectedRisks(new Set());\n loadRisks();\n }\n }}\n >\n Delete Selected\n </Button>\n </div>\n </div>\n </Card>\n )}\n\n {/* Content Views */}\n <Card className=\"p-lg\">\n {loading ? (\n <div className=\"flex items-center justify-center py-xl\">\n <div className=\"animate-spin rounded-full h-icon-lg w-icon-lg border-b-2 border-primary\"></div>\n </div>\n ) : sortedRisks.length === 0 ? (\n <div className=\"text-center py-xl\">\n <AlertTriangle className=\"mx-auto h-icon-2xl w-icon-2xl text-muted-foreground mb-md\" />\n <h3 className=\"text-lg font-semibold mb-sm\">No risks found</h3>\n <p className=\"text-muted-foreground mb-md\">\n {searchQuery || selectedCategory !== \"all\" || selectedStatus !== \"all\"\n ? \"Try adjusting your filters\"\n : \"Get started by identifying your first risk\"}\n </p>\n {!searchQuery && selectedCategory === \"all\" && selectedStatus === \"all\" && (\n <Button onClick={() => setCreateDrawerOpen(true)}>\n <Plus className=\"mr-2 h-icon-xs w-icon-xs\" />\n Add Risk\n </Button>\n )}\n </div>\n ) : (\n <>\n {viewType === \"grid\" && (\n <RiskGridView\n risks={sortedRisks}\n selectedRisks={selectedRisks}\n onSelectRisk={handleSelectRisk}\n onView={handleView}\n onEdit={handleEdit}\n onDelete={handleDelete}\n onDuplicate={handleDuplicate}\n getCategoryIcon={getCategoryIcon}\n getRiskLevelColor={getRiskLevelColor}\n getRiskLevelBadgeVariant={getRiskLevelBadgeVariant}\n getStatusBadgeVariant={getStatusBadgeVariant}\n getCategoryBadgeVariant={getCategoryBadgeVariant}\n />\n )}\n {viewType === \"matrix\" && (\n <RiskMatrixView\n riskMatrix={riskMatrix}\n onView={handleView}\n getRiskLevelColor={getRiskLevelColor}\n />\n )}\n {viewType === \"heatmap\" && (\n <RiskHeatmapView\n risks={sortedRisks}\n onView={handleView}\n />\n )}\n {viewType === \"list\" && (\n <RiskListView\n risks={sortedRisks}\n selectedRisks={selectedRisks}\n fieldVisibility={fieldVisibility}\n sortField={sortField}\n sortDirection={sortDirection}\n onSelectAll={handleSelectAll}\n onSelectRisk={handleSelectRisk}\n onSort={(field) => {\n if (sortField === field) {\n setSortDirection(sortDirection === \"asc\" ? \"desc\" : \"asc\");\n } else {\n setSortField(field);\n setSortDirection(\"asc\");\n }\n }}\n onView={handleView}\n onEdit={handleEdit}\n onDelete={handleDelete}\n onDuplicate={handleDuplicate}\n getRiskLevelBadgeVariant={getRiskLevelBadgeVariant}\n getStatusBadgeVariant={getStatusBadgeVariant}\n getCategoryBadgeVariant={getCategoryBadgeVariant}\n />\n )}\n </>\n )}\n </Card>\n\n {/* Drawers */}\n <CreateRiskDrawer\n open={createDrawerOpen}\n onClose={() => setCreateDrawerOpen(false)}\n orgId={orgId}\n projectId={projectId}\n projects={projects}\n users={users}\n onSuccess={loadRisks}\n />\n \n {selectedRisk && (\n <>\n <EditRiskDrawer\n open={editDrawerOpen}\n onClose={() => setEditDrawerOpen(false)}\n risk={selectedRisk}\n projects={projects}\n users={users}\n onSuccess={loadRisks}\n />\n \n <ViewRiskDrawer\n open={viewDrawerOpen}\n onClose={() => setViewDrawerOpen(false)}\n risk={selectedRisk}\n onEdit={() => {\n setViewDrawerOpen(false);\n setEditDrawerOpen(true);\n }}\n getCategoryIcon={getCategoryIcon}\n getRiskLevelColor={getRiskLevelColor}\n getRiskLevelBadgeVariant={getRiskLevelBadgeVariant}\n getStatusBadgeVariant={getStatusBadgeVariant}\n getCategoryBadgeVariant={getCategoryBadgeVariant}\n />\n </>\n )}\n </div>\n );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/projects/risks/RisksTableClient.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/projects/risks/ViewRiskDrawer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/projects/risks/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/projects/risks/views/RiskGridView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/projects/risks/views/RiskHeatmapView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/projects/risks/views/RiskListView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/projects/risks/views/RiskMatrixView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/projects/schedule/CreateMilestoneClient.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/projects/schedule/CreateMilestoneDrawer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/projects/schedule/CreateTaskDrawer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/projects/schedule/EditMilestoneDrawer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/projects/schedule/EditTaskDrawer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/projects/schedule/ScheduleClient.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/projects/schedule/ViewMilestoneDrawer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/projects/schedule/ViewTaskDrawer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/projects/schedule/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/projects/schedule/views/ScheduleCalendarView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/projects/schedule/views/ScheduleGanttView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/projects/schedule/views/ScheduleListView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/projects/schedule/views/ScheduleTimelineView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/projects/tasks/CreateTaskClient.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/projects/tasks/TasksClient.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'setSelectedItems'. Either include it or remove the dependency array.","line":384,"column":5,"nodeType":"ArrayExpression","endLine":384,"endColumn":35,"suggestions":[{"desc":"Update the dependencies array to be: [filteredTasks, selectedItems.size, setSelectedItems]","fix":{"range":[9853,9883],"text":"[filteredTasks, selectedItems.size, setSelectedItems]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'setSelectedItems'. Either include it or remove the dependency array.","line":406,"column":5,"nodeType":"ArrayExpression","endLine":406,"endColumn":41,"suggestions":[{"desc":"Update the dependencies array to be: [selectedItems, supabase, setSelectedItems, loadTasks]","fix":{"range":[10436,10472],"text":"[selectedItems, supabase, setSelectedItems, loadTasks]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport { ListTodo, LayoutGrid, Calendar, Activity, Search, Filter, Download, Upload, Plus, Edit, Trash2, Eye, Copy, Clock, CheckCircle, AlertCircle, Users, MoreVertical, ArrowUpDown, ChevronDown, Tag, TrendingUp, AlertTriangle, Briefcase, Target } from \"lucide-react\";\nimport { useState, useCallback, useMemo, useEffect } from 'react';\nimport { useRouter } from \"next/navigation\";\nimport { createBrowserClient } from \"@ghxstship/auth\";\nimport {\n Card,\n Button,\n Badge,\n Input,\n Select,\n Checkbox,\n Progress,\n Dropdown,\n \n DropdownItem,\n \n toast,\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuSeparator\n} from \"@ghxstship/ui\";\nimport { format, parseISO, differenceInDays, isOverdue, startOfWeek, endOfWeek } from \"date-fns\";\nimport CreateTaskDrawer from \"./drawers/CreateTaskDrawer\";\nimport EditTaskDrawer from \"./drawers/EditTaskDrawer\";\nimport ViewTaskDrawer from \"./drawers/ViewTaskDrawer\";\nimport TaskBoardView from \"./views/TaskBoardView\";\nimport TaskListView from \"./views/TaskListView\";\nimport TaskCalendarView from \"./views/TaskCalendarView\";\nimport TaskTimelineView from \"./views/TaskTimelineView\";\n\n// Types\nexport interface Project {\n id: string;\n name: string;\n status: string;\n}\n\nexport interface User {\n id: string;\n email: string;\n full_name?: string;\n avatar_url?: string;\n}\n\nexport interface Task {\n id: string;\n project_id: string;\n organization_id: string;\n project?: Project;\n title: string;\n description?: string;\n status: \"todo\" | \"in_progress\" | \"review\" | \"done\" | \"blocked\";\n priority: \"low\" | \"medium\" | \"high\" | \"critical\";\n assignee_id?: string;\n assignee?: User;\n reporter_id?: string;\n reporter?: User;\n parent_task_id?: string;\n parent_task?: Task;\n subtasks?: Task[];\n estimated_hours?: number;\n actual_hours?: number;\n start_date?: string;\n due_date?: string;\n completed_at?: string;\n tags?: string[];\n dependencies?: string[];\n attachments?: string[];\n position: number;\n created_at: string;\n updated_at: string;\n created_by?: string;\n updated_by?: string;\n}\n\ninterface TasksClientProps {\n orgId: string;\n projectId?: string;\n initialTasks?: Task[];\n projects?: Project[];\n users?: User[];\n}\n\n// View configurations\nconst VIEW_TYPES = [\n { id: \"board\", label: \"Board\", icon: LayoutGrid },\n { id: \"list\", label: \"List\", icon: ListTodo },\n { id: \"calendar\", label: \"Calendar\", icon: Calendar },\n { id: \"timeline\", label: \"Timeline\", icon: Activity },\n] as const;\n\ntype ViewType = typeof VIEW_TYPES[number][\"id\"];\n\nexport default function TasksClient({\n orgId,\n projectId,\n initialTasks = [],\n projects = [],\n users = []\n}: TasksClientProps) {\n const router = useRouter();\n const supabase = createBrowserClient();\n\n // State\n const [tasks, setTasks] = useState<Task[]>(initialTasks);\n const [loading, setLoading] = useState(false);\n const [viewType, setViewType] = useState<ViewType>(\"board\");\n const [searchQuery, setSearchQuery] = useState(\"\");\n const [selectedProject, setSelectedProject] = useState<string>(projectId || \"all\");\n const [selectedStatus, setSelectedStatus] = useState<string>(\"all\");\n const [selectedPriority, setSelectedPriority] = useState<string>(\"all\");\n const [selectedAssignee, setSelectedAssignee] = useState<string>(\"all\");\n const [selectedTags, setSelectedTags] = useState<string[]>([]);\n const [selectedItems, setSelectedItems] = useState<Set<string>(new Set());\n const [showSubtasks, setShowSubtasks] = useState(true);\n const [showCompleted, setShowCompleted] = useState(true);\n\n // Drawers\n const [createDrawerOpen, setCreateDrawerOpen] = useState(false);\n const [editDrawerOpen, setEditDrawerOpen] = useState(false);\n const [viewDrawerOpen, setViewDrawerOpen] = useState(false);\n const [selectedTask, setSelectedTask] = useState<Task | null>(null);\n\n // Load tasks from Supabase\n const loadTasks = useCallback(async () => {\n setLoading(true);\n try {\n let query = supabase\n .from(\"project_tasks\")\n .select(`\n *,\n project:projects(id, name, status),\n assignee:users!project_tasks_assignee_id_fkey(id, email, full_name, avatar_url),\n reporter:users!project_tasks_reporter_id_fkey(id, email, full_name, avatar_url),\n parent_task:project_tasks!parent_task_id(id, title, status),\n subtasks:project_tasks!parent_task_id(\n id, title, status, priority, assignee_id, due_date\n )\n `)\n .eq(\"organization_id\", orgId);\n\n // Apply project filter\n if (projectId) {\n query = query.eq(\"project_id\", projectId);\n } else if (selectedProject !== \"all\") {\n query = query.eq(\"project_id\", selectedProject);\n }\n\n // Apply status filter\n if (!showCompleted) {\n query = query.neq(\"status\", \"done\");\n }\n\n // Order by position and creation date\n query = query.order(\"position\", { ascending: true })\n .order(\"created_at\", { ascending: false });\n\n const { data, error } = await query;\n\n if (error) throw error;\n\n setTasks(data || []);\n } catch (error) {\n console.error(\"Error loading tasks:\", error);\n toast.error(\"Failed to load tasks\");\n } finally {\n setLoading(false);\n }\n }, [supabase, orgId, projectId, selectedProject, showCompleted]);\n\n // Load tasks on mount and when filters change\n useEffect(() => {\n loadTasks();\n }, [loadTasks]);\n\n // Real-time subscriptions\n useEffect(() => {\n const channel = supabase\n .channel(\"tasks-changes\")\n .on(\n \"postgres_changes\",\n {\n event: \"*\",\n schema: \"public\",\n table: \"project_tasks\",\n filter: `organization_id=eq.${orgId}`\n },\n () => {\n loadTasks();\n }\n )\n .subscribe();\n\n return () => {\n supabase.removeChannel(channel);\n };\n }, [supabase, orgId, loadTasks]);\n\n // Filter tasks\n const filteredTasks = useMemo(() => {\n return tasks.filter(task => {\n // Don't show subtasks at root level if showSubtasks is false\n if (!showSubtasks && task.parent_task_id) {\n return false;\n }\n\n // Search filter\n if (searchQuery) {\n const query = searchQuery.toLowerCase();\n const matchesSearch = \n task.title.toLowerCase().includes(query) ||\n task.description?.toLowerCase().includes(query) ||\n task.tags?.some(tag => tag.toLowerCase().includes(query));\n if (!matchesSearch) return false;\n }\n\n // Status filter\n if (selectedStatus !== \"all\" && task.status !== selectedStatus) {\n return false;\n }\n\n // Priority filter\n if (selectedPriority !== \"all\" && task.priority !== selectedPriority) {\n return false;\n }\n\n // Assignee filter\n if (selectedAssignee !== \"all\") {\n if (selectedAssignee === \"unassigned\" && task.assignee_id) return false;\n if (selectedAssignee !== \"unassigned\" && task.assignee_id !== selectedAssignee) return false;\n }\n\n // Tag filter\n if (selectedTags.length > 0) {\n if (!task.tags || !selectedTags.every(tag => task.tags!.includes(tag))) {\n return false;\n }\n }\n\n return true;\n });\n }, [tasks, searchQuery, selectedStatus, selectedPriority, selectedAssignee, selectedTags, showSubtasks]);\n\n // Get all unique tags\n const allTags = useMemo(() => {\n const tags = new Set<string>();\n tasks.forEach(task => {\n task.tags?.forEach(tag => tags.add(tag));\n });\n return Array.from(tags).sort();\n }, [tasks]);\n\n // Calculate statistics\n const statistics = useMemo(() => {\n const stats = {\n total: filteredTasks.length,\n todo: 0,\n inProgress: 0,\n review: 0,\n done: 0,\n blocked: 0,\n overdue: 0,\n dueThisWeek: 0,\n critical: 0,\n high: 0,\n unassigned: 0,\n withSubtasks: 0\n };\n\n const today = new Date();\n const weekStart = startOfWeek(today);\n const weekEnd = endOfWeek(today);\n\n filteredTasks.forEach(task => {\n // Status counts\n switch (task.status) {\n case \"todo\": stats.todo++; break;\n case \"in_progress\": stats.inProgress++; break;\n case \"review\": stats.review++; break;\n case \"done\": stats.done++; break;\n case \"blocked\": stats.blocked++; break;\n }\n\n // Priority counts\n if (task.priority === \"critical\") stats.critical++;\n if (task.priority === \"high\") stats.high++;\n\n // Assignment\n if (!task.assignee_id) stats.unassigned++;\n\n // Subtasks\n if (task.subtasks && task.subtasks.length > 0) stats.withSubtasks++;\n\n // Due dates\n if (task.due_date) {\n const dueDate = parseISO(task.due_date);\n if (dueDate < today && task.status !== \"done\") {\n stats.overdue++;\n }\n if (dueDate >= weekStart && dueDate <= weekEnd) {\n stats.dueThisWeek++;\n }\n }\n });\n\n return stats;\n }, [filteredTasks]);\n\n // Handle actions\n const handleCreateTask = useCallback(() => {\n setSelectedTask(null);\n setCreateDrawerOpen(true);\n }, []);\n\n const handleViewTask = useCallback((task: Task) => {\n setSelectedTask(task);\n setViewDrawerOpen(true);\n }, []);\n\n const handleEditTask = useCallback((task: Task) => {\n setSelectedTask(task);\n setEditDrawerOpen(true);\n }, []);\n\n const handleDuplicateTask = useCallback(async (task: Task) => {\n try {\n const { data, error } = await supabase\n .from(\"project_tasks\")\n .insert({\n organization_id: task.organization_id,\n project_id: task.project_id,\n title: `${task.title} (Copy)`,\n description: task.description,\n status: \"todo\",\n priority: task.priority,\n assignee_id: task.assignee_id,\n estimated_hours: task.estimated_hours,\n tags: task.tags,\n position: task.position + 1\n })\n .select()\n .single();\n\n if (error) throw error;\n\n toast.success(\"Task duplicated successfully\");\n loadTasks();\n } catch (error) {\n console.error(\"Error duplicating task:\", error);\n toast.error(\"Failed to duplicate task\");\n }\n }, [supabase, loadTasks]);\n\n const handleDeleteTask = useCallback(async (task: Task) => {\n if (!confirm(`Are you sure you want to delete \"${task.title}\"?`)) return;\n\n try {\n const { error } = await supabase\n .from(\"project_tasks\")\n .delete()\n .eq(\"id\", task.id);\n\n if (error) throw error;\n\n toast.success(\"Task deleted successfully\");\n loadTasks();\n } catch (error) {\n console.error(\"Error deleting task:\", error);\n toast.error(\"Failed to delete task\");\n }\n }, [supabase, loadTasks]);\n\n // Bulk actions\n const handleSelectAll = useCallback(() => {\n if (selectedItems.size === filteredTasks.length) {\n setSelectedItems(new Set());\n } else {\n setSelectedItems(new Set(filteredTasks.map(t => t.id)));\n }\n }, [filteredTasks, selectedItems]);\n\n const handleBulkDelete = useCallback(async () => {\n if (selectedItems.size === 0) return;\n \n if (!confirm(`Are you sure you want to delete ${selectedItems.size} tasks?`)) return;\n\n try {\n const { error } = await supabase\n .from(\"project_tasks\")\n .delete()\n .in(\"id\", Array.from(selectedItems));\n\n if (error) throw error;\n\n toast.success(`${selectedItems.size} tasks deleted successfully`);\n setSelectedItems(new Set());\n loadTasks();\n } catch (error) {\n console.error(\"Error deleting tasks:\", error);\n toast.error(\"Failed to delete tasks\");\n }\n }, [supabase, selectedItems, loadTasks]);\n\n const handleBulkExport = useCallback(() => {\n const selectedTasks = filteredTasks.filter(t => selectedItems.has(t.id));\n const dataToExport = selectedItems.size > 0 ? selectedTasks : filteredTasks;\n \n const csv = convertToCSV(dataToExport);\n downloadCSV(csv, \"tasks.csv\");\n }, [filteredTasks, selectedItems]);\n\n // Helper functions for export\n const convertToCSV = (tasks: Task[]) => {\n const headers = [\"Title\", \"Status\", \"Priority\", \"Assignee\", \"Project\", \"Due Date\", \"Tags\"];\n const rows = tasks.map(task => [\n task.title,\n task.status,\n task.priority,\n task.assignee?.full_name || task.assignee?.email || \"Unassigned\",\n task.project?.name || \"\",\n task.due_date ? format(parseISO(task.due_date), \"yyyy-MM-dd\") : \"\",\n task.tags?.join(\", \") || \"\",\n ]);\n return [headers, ...rows].map(row => row.join(\",\")).join(\"\\n\");\n };\n\n const downloadCSV = (csv: string, filename: string) => {\n const blob = new Blob([csv], { type: \"text/csv\" });\n const url = window.URL.createObjectURL(blob);\n const a = document.createElement(\"a\");\n a.href = url;\n a.download = filename;\n a.click();\n window.URL.revokeObjectURL(url);\n };\n\n // Get status color\n const getStatusColor = (status: string) => {\n switch (status) {\n case \"done\": return \"text-success\";\n case \"in_progress\": return \"text-info\";\n case \"review\": return \"text-warning\";\n case \"blocked\": return \"text-destructive\";\n default: return \"text-muted-foreground\";\n }\n };\n\n // Get priority color\n const getPriorityColor = (priority: string) => {\n switch (priority) {\n case \"critical\": return \"text-destructive\";\n case \"high\": return \"text-warning\";\n case \"medium\": return \"text-info\";\n default: return \"text-muted-foreground\";\n }\n };\n\n return (\n <div className=\"space-y-md\">\n {/* Header */}\n <Card className=\"p-lg\">\n <div className=\"flex items-center justify-between mb-md\">\n <div>\n <h1 className=\"text-2xl font-bold\">Tasks</h1>\n <p className=\"text-muted-foreground\">\n Manage and track project tasks\n </p>\n </div>\n <Button onClick={handleCreateTask}>\n <Plus className=\"mr-2 h-icon-xs w-icon-xs\" />\n Create Task\n </Button>\n </div>\n\n {/* Statistics Cards */}\n <div className=\"grid grid-cols-2 md:grid-cols-4 lg:grid-cols-6 gap-md mb-md\">\n <Card className=\"p-sm\">\n <div className=\"flex items-center justify-between\">\n <div>\n <p className=\"text-sm text-muted-foreground\">Total</p>\n <p className=\"text-2xl font-bold\">{statistics.total}</p>\n </div>\n <ListTodo className=\"h-icon-lg w-icon-lg text-muted-foreground\" />\n </div>\n </Card>\n <Card className=\"p-sm\">\n <div className=\"flex items-center justify-between\">\n <div>\n <p className=\"text-sm text-muted-foreground\">In Progress</p>\n <p className=\"text-2xl font-bold text-info\">{statistics.inProgress}</p>\n </div>\n <Clock className=\"h-icon-lg w-icon-lg text-info\" />\n </div>\n </Card>\n <Card className=\"p-sm\">\n <div className=\"flex items-center justify-between\">\n <div>\n <p className=\"text-sm text-muted-foreground\">Review</p>\n <p className=\"text-2xl font-bold text-warning\">{statistics.review}</p>\n </div>\n <Eye className=\"h-icon-lg w-icon-lg text-warning\" />\n </div>\n </Card>\n <Card className=\"p-sm\">\n <div className=\"flex items-center justify-between\">\n <div>\n <p className=\"text-sm text-muted-foreground\">Completed</p>\n <p className=\"text-2xl font-bold text-success\">{statistics.done}</p>\n </div>\n <CheckCircle className=\"h-icon-lg w-icon-lg text-success\" />\n </div>\n </Card>\n <Card className=\"p-sm\">\n <div className=\"flex items-center justify-between\">\n <div>\n <p className=\"text-sm text-muted-foreground\">Overdue</p>\n <p className=\"text-2xl font-bold text-destructive\">{statistics.overdue}</p>\n </div>\n <AlertTriangle className=\"h-icon-lg w-icon-lg text-destructive\" />\n </div>\n </Card>\n <Card className=\"p-sm\">\n <div className=\"flex items-center justify-between\">\n <div>\n <p className=\"text-sm text-muted-foreground\">Critical</p>\n <p className=\"text-2xl font-bold text-destructive\">{statistics.critical}</p>\n </div>\n <AlertCircle className=\"h-icon-lg w-icon-lg text-destructive\" />\n </div>\n </Card>\n </div>\n\n {/* Filters and View Switcher */}\n <div className=\"flex flex-col lg:flex-row gap-md\">\n <div className=\"flex-1 flex flex-wrap gap-sm\">\n <div className=\"relative flex-1 min-w-content-narrow\">\n <Search className=\"absolute left-3 top-xs/2 transform -translate-y-1/2 h-icon-xs w-icon-xs text-muted-foreground\" />\n <Input\n placeholder=\"Search tasks...\"\n value={searchQuery}\n onChange={(e) => setSearchQuery(e.target.value)}\n className=\"pl-9\"\n />\n </div>\n \n {!projectId && projects.length > 0 && (\n <Select value={selectedProject} onValueChange={setSelectedProject}>\n <option value=\"all\">All Projects</option>\n {projects.map((project) => (\n <option key={project.id} value={project.id}>\n {project.name}\n </option>\n ))}\n </Select>\n )}\n\n <Select value={selectedStatus} onValueChange={setSelectedStatus}>\n <option value=\"all\">All Status</option>\n <option value=\"todo\">To Do</option>\n <option value=\"in_progress\">In Progress</option>\n <option value=\"review\">Review</option>\n <option value=\"done\">Done</option>\n <option value=\"blocked\">Blocked</option>\n </Select>\n\n <Select value={selectedPriority} onValueChange={setSelectedPriority}>\n <option value=\"all\">All Priorities</option>\n <option value=\"critical\">Critical</option>\n <option value=\"high\">High</option>\n <option value=\"medium\">Medium</option>\n <option value=\"low\">Low</option>\n </Select>\n\n {users.length > 0 && (\n <Select value={selectedAssignee} onValueChange={setSelectedAssignee}>\n <option value=\"all\">All Assignees</option>\n <option value=\"unassigned\">Unassigned</option>\n {users.map((user) => (\n <option key={user.id} value={user.id}>\n {user.full_name || user.email}\n </option>\n ))}\n </Select>\n )}\n\n {allTags.length > 0 && (\n <DropdownMenu>\n <DropdownMenuTrigger asChild>\n <Button variant=\"outline\" size=\"sm\">\n <Tag className=\"mr-2 h-icon-xs w-icon-xs\" />\n Tags ({selectedTags.length})\n <ChevronDown className=\"ml-2 h-icon-xs w-icon-xs\" />\n </Button>\n </DropdownMenuTrigger>\n <DropdownMenuContent>\n {allTags.map((tag) => (\n <DropdownMenuItem key={tag}>\n <Checkbox\n checked={selectedTags.includes(tag)}\n onChange={(e) => {\n if (e.target.checked) {\n setSelectedTags([...selectedTags, tag]);\n } else {\n setSelectedTags(selectedTags.filter(t => t !== tag));\n }\n }}\n label={tag}\n />\n </DropdownMenuItem>\n ))}\n </DropdownMenuContent>\n </DropdownMenu>\n )}\n\n <Checkbox\n checked={showSubtasks}\n onChange={(e) => setShowSubtasks(e.target.checked)}\n \n />\n\n <Checkbox\n checked={showCompleted}\n onChange={(e) => setShowCompleted(e.target.checked)}\n \n />\n </div>\n\n {/* View Switcher and Actions */}\n <div className=\"flex items-center gap-sm\">\n {selectedItems.size > 0 && (\n <>\n <Button\n variant=\"outline\"\n size=\"sm\"\n onClick={handleBulkDelete}\n >\n <Trash2 className=\"mr-2 h-icon-xs w-icon-xs\" />\n Delete ({selectedItems.size})\n </Button>\n <Button\n variant=\"outline\"\n size=\"sm\"\n onClick={handleBulkExport}\n >\n <Download className=\"mr-2 h-icon-xs w-icon-xs\" />\n Export\n </Button>\n </>\n )}\n\n <Button\n variant=\"outline\"\n size=\"sm\"\n onClick={handleSelectAll}\n >\n {selectedItems.size === filteredTasks.length ? \"Deselect All\" : \"Select All\"}\n </Button>\n\n <div className=\"flex rounded-md shadow-sm\">\n {VIEW_TYPES.map((view) => {\n const Icon = view.icon;\n return (\n <Button\n key={view.id}\n variant={viewType === view.id ? \"default\" : \"outline\"}\n size=\"sm\"\n onClick={() => setViewType(view.id as ViewType)}\n className=\"rounded-none first:rounded-l-md last:rounded-r-md\"\n >\n <Icon className=\"h-icon-xs w-icon-xs\" />\n </Button>\n );\n })}\n </div>\n </div>\n </div>\n </Card>\n\n {/* Content Views */}\n <Card className=\"p-lg\">\n {loading ? (\n <div className=\"flex items-center justify-center py-xl\">\n <div className=\"animate-spin rounded-full h-icon-lg w-icon-lg border-b-2 border-primary\"></div>\n </div>\n ) : filteredTasks.length === 0 ? (\n <div className=\"text-center py-xl\">\n <ListTodo className=\"mx-auto h-icon-2xl w-icon-2xl text-muted-foreground mb-md\" />\n <h3 className=\"text-lg font-semibold mb-sm\">No tasks found</h3>\n <p className=\"text-muted-foreground mb-md\">\n {searchQuery || selectedStatus !== \"all\" || selectedPriority !== \"all\"\n ? \"Try adjusting your filters\"\n : \"Get started by creating your first task\"}\n </p>\n <Button onClick={handleCreateTask}>\n <Plus className=\"mr-2 h-icon-xs w-icon-xs\" />\n Create Task\n </Button>\n </div>\n ) : (\n <>\n {viewType === \"board\" && (\n <TaskBoardView\n tasks={filteredTasks}\n selectedItems={selectedItems}\n onSelectItem={(id) => {\n const next = new Set(selectedItems);\n if (next.has(id)) {\n next.delete(id);\n } else {\n next.add(id);\n }\n setSelectedItems(next);\n }}\n onViewTask={handleViewTask}\n onEditTask={handleEditTask}\n onDuplicateTask={handleDuplicateTask}\n onDeleteTask={handleDeleteTask}\n />\n )}\n {viewType === \"list\" && (\n <TaskListView\n tasks={filteredTasks}\n selectedItems={selectedItems}\n onSelectItem={(id) => {\n const next = new Set(selectedItems);\n if (next.has(id)) {\n next.delete(id);\n } else {\n next.add(id);\n }\n setSelectedItems(next);\n }}\n onViewTask={handleViewTask}\n onEditTask={handleEditTask}\n onDuplicateTask={handleDuplicateTask}\n onDeleteTask={handleDeleteTask}\n />\n )}\n {viewType === \"calendar\" && (\n <TaskCalendarView\n tasks={filteredTasks}\n onViewTask={handleViewTask}\n onEditTask={handleEditTask}\n />\n )}\n {viewType === \"timeline\" && (\n <TaskTimelineView\n tasks={filteredTasks}\n onViewTask={handleViewTask}\n onEditTask={handleEditTask}\n />\n )}\n </>\n )}\n </Card>\n\n {/* Drawers */}\n <CreateTaskDrawer\n open={createDrawerOpen}\n onClose={() => setCreateDrawerOpen(false)}\n orgId={orgId}\n projectId={projectId}\n projects={projects}\n users={users}\n onSuccess={loadTasks}\n />\n \n {selectedTask && (\n <>\n <EditTaskDrawer\n open={editDrawerOpen}\n onClose={() => setEditDrawerOpen(false)}\n task={selectedTask}\n projects={projects}\n users={users}\n onSuccess={loadTasks}\n />\n \n <ViewTaskDrawer\n open={viewDrawerOpen}\n onClose={() => setViewDrawerOpen(false)}\n task={selectedTask}\n onEdit={() => {\n setViewDrawerOpen(false);\n setEditDrawerOpen(true);\n }}\n />\n </>\n )}\n </div>\n );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/projects/tasks/TasksTableClient.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/projects/tasks/drawers/CreateTaskDrawer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/projects/tasks/drawers/EditTaskDrawer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/projects/tasks/drawers/ViewTaskDrawer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/projects/tasks/lib/tasks-service.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/projects/tasks/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/projects/tasks/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/projects/tasks/views/TaskBoardView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/projects/tasks/views/TaskCalendarView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/projects/tasks/views/TaskListView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/projects/tasks/views/TaskTimelineView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/projects/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/projects/views/CalendarView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/projects/views/CardView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/projects/views/ChartView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/projects/views/FormView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/projects/views/GalleryView.tsx","messages":[{"ruleId":"jsx-a11y/alt-text","severity":1,"message":"Image elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","line":54,"column":48,"nodeType":"JSXOpeningElement","endLine":54,"endColumn":89},{"ruleId":"@next/next/no-img-element","severity":1,"message":"Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` or a custom image loader to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","line":103,"column":21,"nodeType":"JSXOpeningElement","endLine":107,"endColumn":23},{"ruleId":"@next/next/no-img-element","severity":1,"message":"Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` or a custom image loader to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","line":182,"column":15,"nodeType":"JSXOpeningElement","endLine":186,"endColumn":17}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport React, { useState } from 'react';\nimport { Image, Video, File, Eye, Download, MoreHorizontal } from 'lucide-react';\nimport {\n  Badge,\n  Button,\n  Card,\n  CardContent,\n  CardDescription,\n  CardFooter,\n  CardHeader,\n  CardTitle,\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger\n} from \"@ghxstship/ui\";\nimport { Badge } from '@ghxstship/ui';\nimport { Card, CardContent } from '@ghxstship/ui';\nimport { Dropdown,  DropdownItem, DropdownMenuTrigger } from '@ghxstship/ui';\n\nexport interface ImageViewProps {\n  data: unknown[];\n  onItemClick?: (item: unknown) => void;\n  onDownload?: (item: unknown) => void;\n  onView?: (item: unknown) => void;\n  loading?: boolean;\n  emptyMessage?: string;\n  className?: string;\n  layout?: 'grid' | 'masonry';\n  imageField?: string;\n  titleField?: string;\n  subtitleField?: string;\n}\n\nexport default function ImageView({\n  data,\n  onItemClick,\n  onDownload,\n  onView,\n  loading = false,\n  emptyMessage = \"No media available\",\n  className = \"\",\n  layout = 'grid',\n  imageField = 'file_url',\n  titleField = 'name',\n  subtitleField = 'description'\n}: ImageViewProps) {\n  const [selectedItem, setSelectedItem] = useState<(null);\n\n  const getFileIcon = (fileType: string) => {\n    if (fileType?.startsWith('image/')) return <Image className=\"h-icon-lg w-icon-lg\" />;\n    if (fileType?.startsWith('video/')) return <Video className=\"h-icon-lg w-icon-lg\" />;\n    return <File className=\"h-icon-lg w-icon-lg\" />;\n  };\n\n  const getFileTypeColor = (fileType: string) => {\n    if (fileType?.startsWith('image/')) return 'text-green-500';\n    if (fileType?.startsWith('video/')) return 'text-blue-500';\n    return 'text-gray-500';\n  };\n\n  if (loading) {\n    return (\n      <div className={`${layout === 'grid' ? 'grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-md' : 'columns-2 md:columns-3 lg:columns-4 gap-md'} ${className}`}>\n        {Array.from({ length: 12 }).map((_, i) => (\n          <div key={i} className=\"animate-pulse break-inside-avoid mb-4\">\n            <div className=\"bg-muted rounded-lg aspect-square mb-2\"></div>\n            <div className=\"h-3 bg-muted rounded w-3/4 mb-1\"></div>\n            <div className=\"h-2 bg-muted rounded w-1/2\"></div>\n          </div>\n        ))}\n      </div>\n    );\n  }\n\n  if (data.length === 0) {\n    return (\n      <div className={`flex items-center justify-center p-xl ${className}`}>\n        <div className=\"text-center text-muted-foreground\">\n          {emptyMessage}\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <>\n      <div className={`${layout === 'grid' ? 'grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-md' : 'columns-2 md:columns-3 lg:columns-4 gap-md'} ${className}`}>\n        {data.map((item) => (\n          <Card\n            key={item.id}\n            className=\"break-inside-avoid cursor-pointer hover:shadow-md transition-shadow group\"\n            onClick={() => onItemClick?.(item)}\n          >\n            <CardContent className=\"p-sm\">\n              {/* Media Preview */}\n              <div className=\"aspect-square bg-muted rounded-lg mb-3 flex items-center justify-center overflow-hidden\">\n                {item[imageField] ? (\n                  item.file_type?.startsWith('image/') ? (\n                    <img\n                      src={item[imageField]}\n                      alt={item[titleField]}\n                      className=\"w-full h-full object-cover group-hover:scale-105 transition-transform\"\n                    />\n                  ) : (\n                    <div className={`${getFileTypeColor(item.file_type)}`}>\n                      {getFileIcon(item.file_type)}\n                    </div>\n                  )\n                ) : (\n                  <div className=\"text-muted-foreground\">\n                    <File className=\"h-icon-lg w-icon-lg\" />\n                  </div>\n                )}\n              </div>\n\n              {/* Content */}\n              <div className=\"space-y-xs\">\n                <h3 className=\"font-medium text-sm line-clamp-xs\">\n                  {item[titleField] || item.name || 'Untitled'}\n                </h3>\n\n                {item[subtitleField] && (\n                  <p className=\"text-xs text-muted-foreground line-clamp-xs\">\n                    {item[subtitleField]}\n                  </p>\n                )}\n\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center gap-xs\">\n                    <Badge variant=\"outline\" className=\"text-xs\">\n                      {item.category || 'File'}\n                    </Badge>\n                    {item.file_size && (\n                      <span className=\"text-xs text-muted-foreground\">\n                        {(item.file_size / 1024 / 1024).toFixed(1)}MB\n                      </span>\n                    )}\n                  </div>\n\n                  <DropdownMenu>\n                    <DropdownMenuTrigger asChild>\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onClick={(e) => e.stopPropagation()}\n                        className=\"h-icon-md w-icon-md p-0 opacity-60 hover:opacity-100\"\n                      >\n                        <MoreHorizontal className=\"h-3 w-3\" />\n                      </Button>\n                    </DropdownMenuTrigger>\n                    <DropdownMenuContent align=\"end\">\n                      {onView && (\n                        <DropdownMenuItem onClick={() => onView(item)}>\n                          <Eye className=\"mr-2 h-3 w-3\" />\n                          View\n                        </DropdownMenuItem>\n                      )}\n                      {onDownload && (\n                        <DropdownMenuItem onClick={() => onDownload(item)}>\n                          <Download className=\"mr-2 h-3 w-3\" />\n                          Download\n                        </DropdownMenuItem>\n                      )}\n                    </DropdownMenuContent>\n                  </DropdownMenu>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n\n      {/* Lightbox for full-size viewing */}\n      {selectedItem && (\n        <div className=\"fixed inset-0 bg-black/50 flex items-center justify-center z-50\">\n          <div className=\"max-w-4xl max-h-[90vh] p-md\">\n            {selectedItem[imageField] && selectedItem.file_type?.startsWith('image/') && (\n              <img\n                src={selectedItem[imageField]}\n                alt={selectedItem[titleField]}\n                className=\"max-w-full max-h-full object-contain\"\n              />\n            )}\n            <Button\n              variant=\"secondary\"\n              onClick={() => setSelectedItem(null)}\n              className=\"mt-4\"\n            >\n              Close\n            </Button>\n          </div>\n        </div>\n      )}\n    </>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/projects/views/GanttView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/projects/views/KanbanView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/projects/views/ListView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/projects/views/ProjectsChartView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/projects/views/TableView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/projects/views/TimelineView.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook React.useMemo has a missing dependency: 'dateField'. Either include it or remove the dependency array.","line":73,"column":6,"nodeType":"ArrayExpression","endLine":73,"endColumn":27,"suggestions":[{"desc":"Update the dependencies array to be: [groupBy, sortedData, dateField]","fix":{"range":[2009,2030],"text":"[groupBy, sortedData, dateField]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport React from 'react';\nimport { Clock, CheckCircle, Circle, AlertCircle } from 'lucide-react';\nimport { Badge } from '@ghxstship/ui';\nimport { format, isAfter, isBefore, isEqual } from 'date-fns';\n\nexport interface TimelineViewProps {\n  data: unknown[];\n  dateField?: string;\n  titleField?: string;\n  descriptionField?: string;\n  statusField?: string;\n  onItemClick?: (item: unknown) => void;\n  loading?: boolean;\n  emptyMessage?: string;\n  className?: string;\n  groupBy?: 'month' | 'week' | 'day' | 'none';\n}\n\nexport default function TimelineView({\n  data,\n  dateField = 'created_at',\n  titleField = 'title',\n  descriptionField = 'description',\n  statusField = 'status',\n  onItemClick,\n  loading = false,\n  emptyMessage = \"No timeline events\",\n  className = \"\",\n  groupBy = 'month'\n}: TimelineViewProps) {\n  // Sort data by date\n  const sortedData = React.useMemo(() => {\n    return [...data].sort((a, b) => {\n      const dateA = new Date(a[dateField]).getTime();\n      const dateB = new Date(b[dateField]).getTime();\n      return dateB - dateA; // Most recent first\n    });\n  }, [data, dateField]);\n\n  // Group data by time period\n  const groupedData = React.useMemo(() => {\n    if (groupBy === 'none') return { 'All Events': sortedData };\n\n    const groups: Record<string, any[]> = {};\n\n    sortedData.forEach(item => {\n      const date = new Date(item[dateField]);\n      let groupKey: string;\n\n      switch (groupBy) {\n        case 'month':\n          groupKey = format(date, 'MMMM yyyy');\n          break;\n        case 'week':\n          const weekStart = new Date(date);\n          weekStart.setDate(date.getDate() - date.getDay());\n          groupKey = `Week of ${format(weekStart, 'MMM d, yyyy')}`;\n          break;\n        case 'day':\n          groupKey = format(date, 'MMMM d, yyyy');\n          break;\n        default:\n          groupKey = 'All Events';\n      }\n\n      if (!groups[groupKey]) groups[groupKey] = [];\n      groups[groupKey].push(item);\n    });\n\n    return groups;\n  }, [sortedData, groupBy]);\n\n  const getStatusIcon = (status: string) => {\n    switch (status?.toLowerCase()) {\n      case 'completed':\n      case 'done':\n        return <CheckCircle className=\"h-icon-xs w-icon-xs text-green-500\" />;\n      case 'in_progress':\n      case 'active':\n        return <Clock className=\"h-icon-xs w-icon-xs text-blue-500\" />;\n      case 'pending':\n        return <Circle className=\"h-icon-xs w-icon-xs text-gray-500\" />;\n      case 'blocked':\n      case 'failed':\n        return <AlertCircle className=\"h-icon-xs w-icon-xs text-red-500\" />;\n      default:\n        return <Circle className=\"h-icon-xs w-icon-xs text-gray-400\" />;\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status?.toLowerCase()) {\n      case 'completed':\n      case 'done':\n        return 'border-green-500';\n      case 'in_progress':\n      case 'active':\n        return 'border-blue-500';\n      case 'pending':\n        return 'border-gray-500';\n      case 'blocked':\n      case 'failed':\n        return 'border-red-500';\n      default:\n        return 'border-gray-400';\n    }\n  };\n\n  if (loading) {\n    return (\n      <div className={`space-y-lg ${className}`}>\n        {Array.from({ length: 3 }).map((_, i) => (\n          <div key={i} className=\"animate-pulse\">\n            <div className=\"h-icon-md bg-muted rounded w-container-xs mb-4\"></div>\n            <div className=\"space-y-sm\">\n              {Array.from({ length: 2 }).map((_, j) => (\n                <div key={j} className=\"flex gap-md\">\n                  <div className=\"w-icon-xs h-icon-xs bg-muted rounded-full mt-1\"></div>\n                  <div className=\"flex-1 space-y-xs\">\n                    <div className=\"h-icon-xs bg-muted rounded w-3/4\"></div>\n                    <div className=\"h-3 bg-muted rounded w-1/2\"></div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </div>\n        ))}\n      </div>\n    );\n  }\n\n  if (data.length === 0) {\n    return (\n      <div className={`flex items-center justify-center p-xl ${className}`}>\n        <div className=\"text-center text-muted-foreground\">\n          {emptyMessage}\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className={`space-y-xl ${className}`}>\n      {Object.entries(groupedData).map(([groupName, items]) => (\n        <div key={groupName}>\n          {groupBy !== 'none' && (\n            <h3 className=\"text-lg font-semibold mb-4 text-muted-foreground border-b pb-2\">\n              {groupName}\n            </h3>\n          )}\n\n          <div className=\"space-y-md\">\n            {items.map((item, index) => (\n              <div\n                key={item.id}\n                className=\"flex gap-md cursor-pointer hover:bg-muted/30 p-sm rounded-lg transition-colors\"\n                onClick={() => onItemClick?.(item)}\n              >\n                {/* Timeline connector */}\n                <div className=\"flex flex-col items-center\">\n                  <div className={`w-icon-xs h-icon-xs rounded-full border-2 ${getStatusColor(item[statusField])} bg-background flex items-center justify-center`}>\n                    {getStatusIcon(item[statusField])}\n                  </div>\n                  {index < items.length - 1 && (\n                    <div className=\"w-px h-icon-lg bg-border mt-2\"></div>\n                  )}\n                </div>\n\n                {/* Content */}\n                <div className=\"flex-1 min-w-0\">\n                  <div className=\"flex items-start justify-between\">\n                    <div className=\"flex-1\">\n                      <h4 className=\"font-medium text-sm\">\n                        {item[titleField] || item.name || item.title}\n                      </h4>\n                      {item[descriptionField] && (\n                        <p className=\"text-sm text-muted-foreground mt-1 line-clamp-xs\">\n                          {item[descriptionField]}\n                        </p>\n                      )}\n                    </div>\n\n                    <div className=\"flex items-center gap-xs ml-4\">\n                      <Badge variant=\"outline\" className=\"text-xs\">\n                        {item[statusField]}\n                      </Badge>\n                      <span className=\"text-xs text-muted-foreground\">\n                        {format(new Date(item[dateField]), 'MMM d, yyyy')}\n                      </span>\n                    </div>\n                  </div>\n\n                  {/* Additional metadata */}\n                  <div className=\"flex items-center gap-md mt-2 text-xs text-muted-foreground\">\n                    {item.priority && (\n                      <span>Priority: {item.priority}</span>\n                    )}\n                    {item.assignee && (\n                      <span>Assignee: {item.assignee.full_name || item.assignee.email}</span>\n                    )}\n                    {item.due_date && (\n                      <span>Due: {format(new Date(item.due_date), 'MMM d, yyyy')}</span>\n                    )}\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/resources/ResourcesClient.tsx","messages":[],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchResources'. Either include it or remove the dependency array.","line":75,"column":6,"nodeType":"ArrayExpression","endLine":75,"endColumn":30,"suggestions":[{"desc":"Update the dependencies array to be: [searchTerm, filterType, fetchResources]","fix":{"range":[2147,2171],"text":"[searchTerm, filterType, fetchResources]"}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/resources/components/ResourceForm.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/resources/drawers/CreateDrawer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/resources/drawers/DetailDrawer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/resources/featured/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/resources/hooks/useResourcesOverview.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/resources/lib/resources-service.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/resources/overview/ResourcesOverviewClient.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/resources/overview/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/resources/policies/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/resources/procedures/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/resources/templates/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/resources/trainings/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/resources/views/CardView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/resources/views/GridView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/resources/views/ListView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/settings/CreateSettingsClient.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/settings/SettingsClient.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/settings/SettingsClient.unified.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/settings/SettingsClient_New.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/settings/[id]/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/settings/account/AccountClient.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/settings/account/AccountSettingsClient.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/settings/account/drawers/EditAccountDrawer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/settings/account/lib/account-service.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/settings/account/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/settings/account/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/settings/account/views/AccountGridView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/settings/account/views/AccountListView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/settings/automations/AutomationsSettingsClient.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadAutomationRules'. Either include it or remove the dependency array.","line":68,"column":5,"nodeType":"ArrayExpression","endLine":68,"endColumn":12,"suggestions":[{"desc":"Update the dependencies array to be: [loadAutomationRules, toast]","fix":{"range":[1824,1831],"text":"[loadAutomationRules, toast]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\nimport { Activity, Award, Calendar, Clock, Edit, FileText, Play, Plus, Search, Settings, Trash2, TrendingUp, User } from \"lucide-react\";\nimport { useEffect, useMemo, useState } from 'react';\nimport {\n Card,\n Button,\n Badge,\n Loader,\n Textarea,\n Input,\n useToastContext\n} from '@ghxstship/ui';\nimport {\n fetchAutomationRules,\n createAutomationRule,\n updateAutomationRule,\n deleteAutomationRule,\n type AutomationRuleSummary,\n type AutomationAction,\n type AutomationCondition\n} from '@/lib/services/settingsAutomationsClient';\n\ninterface AutomationFormState {\n name: string;\n description: string;\n triggerType: string;\n triggerConfig: string;\n conditions: string;\n actions: string;\n isActive: boolean;\n}\n\nconst emptyForm: AutomationFormState = {\n name: '',\n description: '',\n triggerType: '',\n triggerConfig: '{\\n \"event\": \"\"\\n}',\n conditions: '[]',\n actions: '[\\n {\\n \"type\": \"\",\\n \"config\": {},\\n \"order\": 1\\n }\\n]',\n isActive: true\n};\n\nfunction parseJsonOrThrow<T>(value: string, label: string): T {\n try {\n return JSON.parse(value) as T;\n } catch (error) {\n throw new Error(`Invalid ${label}. Please provide valid JSON.`);\n }\n}\n\nfunction formatJson(value: unknown): string {\n return JSON.stringify(value, null, 2);\n}\n\nexport default function AutomationsSettingsClient() {\n const { toast } = useToastContext();\n const [automationRules, setAutomationRules] = useState<AutomationRuleSummary[]>([]);\n const [loading, setLoading] = useState(true);\n const [saving, setSaving] = useState(false);\n const [showForm, setShowForm] = useState(false);\n const [editingRuleId, setEditingRuleId] = useState<string | null>(null);\n const [form, setForm] = useState<AutomationFormState>(emptyForm);\n\n const isEditing = useMemo(() => editingRuleId !== null, [editingRuleId]);\n\n useEffect(() => {\n void loadAutomationRules();\n }, [toast]);\n\n const loadAutomationRules = async () => {\n try {\n setLoading(true);\n const rules = await fetchAutomationRules();\n setAutomationRules(rules);\n } catch (error) {\n console.error('Error loading automation rules:', error);\n toast.error('Failed to load automation rules');\n } finally {\n setLoading(false);\n }\n };\n\n const resetForm = () => {\n setForm(emptyForm);\n setEditingRuleId(null);\n };\n\n const handleCreateNew = () => {\n resetForm();\n setShowForm(true);\n };\n\n const handleEditRule = (rule: AutomationRuleSummary) => {\n setForm({\n name: rule.name,\n description: rule.description ?? '',\n triggerType: rule.triggerType,\n triggerConfig: formatJson(rule.triggerConfig),\n conditions: formatJson(rule.conditions ?? []),\n actions: formatJson(rule.actions),\n isActive: rule.isActive\n });\n setEditingRuleId(rule.id);\n setShowForm(true);\n };\n\n const handleDeleteRule = async (rule: AutomationRuleSummary) => {\n const confirmed = window.confirm(`Delete automation rule \"${rule.name}\"?`);\n if (!confirmed) return;\n\n try {\n await deleteAutomationRule(rule.id);\n toast.success('Automation rule deleted');\n void loadAutomationRules();\n } catch (error) {\n console.error('Error deleting automation rule:', error);\n toast.error('Failed to delete automation rule');\n }\n };\n\n const handleToggleActive = async (rule: AutomationRuleSummary) => {\n try {\n await updateAutomationRule(rule.id, { isActive: !rule.isActive });\n toast.success(`Automation ${rule.isActive ? 'paused' : 'activated'}`);\n void loadAutomationRules();\n } catch (error) {\n console.error('Error toggling automation rule:', error);\n toast.error('Failed to update automation status');\n }\n };\n\n const handleSubmit = async () => {\n try {\n setSaving(true);\n\n if (!form.name.trim()) {\n throw new Error('Name is required.');\n }\n if (!form.triggerType.trim()) {\n throw new Error('Trigger type is required.');\n }\n\n const triggerConfig = parseJsonOrThrow<Record<string, unknown>(form.triggerConfig, 'trigger configuration');\n const actions = parseJsonOrThrow<AutomationAction[]>(form.actions, 'actions');\n const conditions = form.conditions.trim()\n ? parseJsonOrThrow<AutomationCondition[]>(form.conditions, 'conditions')\n : [];\n\n if (!Array.isArray(actions) || actions.length === 0) {\n throw new Error('At least one action is required.');\n }\n\n const payload = {\n name: form.name.trim(),\n description: form.description.trim() || undefined,\n triggerType: form.triggerType.trim(),\n triggerConfig,\n conditions,\n actions,\n isActive: form.isActive\n };\n\n if (isEditing && editingRuleId) {\n await updateAutomationRule(editingRuleId, payload);\n toast.success('Automation rule updated');\n } else {\n await createAutomationRule(payload);\n toast.success('Automation rule created');\n }\n\n resetForm();\n setShowForm(false);\n void loadAutomationRules();\n } catch (error) {\n console.error('Error saving automation rule:', error);\n toast.error(error instanceof Error ? error.message : 'Failed to save automation rule');\n } finally {\n setSaving(false);\n }\n };\n\n const renderForm = () => (\n <Card>\n <div className=\"p-lg space-y-md\">\n <div className=\"flex items-center justify-between\">\n <h2 className=\"text-xl font-semibold\">\n {isEditing ? 'Edit Automation Rule' : 'Create Automation Rule'}\n </h2>\n <div className=\"flex gap-xs\">\n <Button variant=\"outline\" onClick={() => { resetForm(); setShowForm(false); }} disabled={saving}>\n Cancel\n </Button>\n <Button onClick={handleSubmit} disabled={saving}>\n {saving ? 'Saving...' : isEditing ? 'Update Rule' : 'Create Rule'}\n </Button>\n </div>\n </div>\n\n <div className=\"grid grid-cols-1 md:grid-cols-2 gap-md\">\n <div className=\"space-y-xs\">\n <label className=\"text-sm font-medium\">Name</label>\n <Input\n value={form.name}\n onChange={(event) => setForm((prev: unknown) => ({ ...prev, name: event.target.value }))}\n placeholder=\"Automation name\"\n />\n </div>\n <div className=\"space-y-xs\">\n <label className=\"text-sm font-medium\">Trigger Type</label>\n <Input\n value={form.triggerType}\n onChange={(event) => setForm((prev: unknown) => ({ ...prev, triggerType: event.target.value }))}\n placeholder=\"e.g. lead.created\"\n />\n </div>\n </div>\n\n <div className=\"space-y-xs\">\n <label className=\"text-sm font-medium\">Description</label>\n <Textarea\n value={form.description}\n onChange={(event) => setForm((prev: unknown) => ({ ...prev, description: event.target.value }))}\n placeholder=\"Optional description\"\n rows={2}\n />\n </div>\n\n <div className=\"space-y-xs\">\n <label className=\"text-sm font-medium\">Trigger Configuration (JSON)</label>\n <Textarea\n value={form.triggerConfig}\n onChange={(event) => setForm((prev: unknown) => ({ ...prev, triggerConfig: event.target.value }))}\n rows={6}\n />\n </div>\n\n <div className=\"space-y-xs\">\n <label className=\"text-sm font-medium\">Conditions (JSON array)</label>\n <Textarea\n value={form.conditions}\n onChange={(event) => setForm((prev: unknown) => ({ ...prev, conditions: event.target.value }))}\n rows={6}\n placeholder=\"[]\"\n />\n </div>\n\n <div className=\"space-y-xs\">\n <label className=\"text-sm font-medium\">Actions (JSON array)</label>\n <Textarea\n value={form.actions}\n onChange={(event) => setForm((prev: unknown) => ({ ...prev, actions: event.target.value }))}\n rows={6}\n />\n </div>\n\n <div className=\"flex items-center justify-between\">\n <div className=\"space-y-xs\">\n <p className=\"text-sm font-medium\">Status</p>\n <p className=\"text-xs text-muted-foreground\">\n Active automations will run automatically when triggers are satisfied.\n </p>\n </div>\n <Button\n variant={form.isActive ? 'success' : 'outline'}\n onClick={() => setForm((prev: unknown) => ({ ...prev, isActive: !prev.isActive }))}\n type=\"button\"\n >\n {form.isActive ? 'Active' : 'Inactive'}\n </Button>\n </div>\n </div>\n </Card>\n );\n\n const renderRule = (rule: AutomationRuleSummary) => (\n <Card key={rule.id}>\n <div className=\"p-lg space-y-md\">\n <div className=\"flex flex-wrap items-start justify-between gap-md\">\n <div>\n <div className=\"flex items-center gap-sm\">\n <h3 className=\"text-lg font-semibold\">{rule.name}</h3>\n <Badge variant={rule.isActive ? 'success' : 'secondary'}>\n {rule.isActive ? 'Active' : 'Paused'}\n </Badge>\n </div>\n {rule.description && (\n <p className=\"text-sm text-muted-foreground mt-1\">{rule.description}</p>\n )}\n </div>\n <div className=\"flex gap-xs\">\n <Button variant=\"outline\" size=\"sm\" onClick={() => handleToggleActive(rule)}>\n {rule.isActive ? 'Pause' : 'Activate'}\n </Button>\n <Button variant=\"outline\" size=\"sm\" onClick={() => handleEditRule(rule)}>\n Edit\n </Button>\n <Button variant=\"destructive\" size=\"sm\" onClick={() => handleDeleteRule(rule)}>\n Delete\n </Button>\n </div>\n </div>\n\n <div className=\"grid grid-cols-1 md:grid-cols-2 gap-md text-sm\">\n <div className=\"space-y-sm\">\n <div>\n <p className=\"font-medium text-muted-foreground\">Trigger</p>\n <p className=\"mt-1\">Type: <span className=\"font-mono\">{rule.triggerType}</span></p>\n <pre className=\"mt-2 bg-muted/50 rounded-md p-sm text-xs overflow-x-auto\">\n {formatJson(rule.triggerConfig)}\n </pre>\n </div>\n\n <div>\n <p className=\"font-medium text-muted-foreground\">Conditions</p>\n {rule.conditions && rule.conditions.length > 0 ? (\n <pre className=\"mt-2 bg-muted/50 rounded-md p-sm text-xs overflow-x-auto\">\n {formatJson(rule.conditions)}\n </pre>\n ) : (\n <p className=\"mt-1 text-muted-foreground\">No additional conditions</p>\n )}\n </div>\n </div>\n <div className=\"space-y-sm\">\n <div>\n <p className=\"font-medium text-muted-foreground\">Actions</p>\n <pre className=\"mt-2 bg-muted/50 rounded-md p-sm text-xs overflow-x-auto\">\n {formatJson(rule.actions)}\n </pre>\n </div>\n <div className=\"flex items-center gap-md text-xs text-muted-foreground\">\n <span>Runs: {rule.runCount ?? 0}</span>\n {rule.lastRunAt && (\n <span>Last run: {new Date(rule.lastRunAt).toLocaleString()}</span>\n )}\n <span>Created: {new Date(rule.createdAt).toLocaleString()}</span>\n {rule.updatedAt && (\n <span>Updated: {new Date(rule.updatedAt).toLocaleString()}</span>\n )}\n </div>\n </div>\n </div>\n </div>\n </Card>\n );\n\n return (\n <div className=\"space-y-lg\">\n <div className=\"flex flex-wrap items-center justify-between gap-sm\">\n <div>\n <h1 className=\"text-3xl font-bold\">Automations</h1>\n <p className=\"text-muted-foreground mt-1\">\n Build rules that react to platform events and orchestrate downstream actions.\n </p>\n </div>\n <Button onClick={handleCreateNew}>\n Create Automation\n </Button>\n </div>\n\n {showForm && renderForm()}\n\n <Card>\n <div className=\"p-lg\">\n {loading ? (\n <div className=\"flex items-center justify-center h-container-xs\">\n <Loader className=\"h-icon-lg w-icon-lg animate-spin\" />\n </div>\n ) : automationRules.length === 0 ? (\n <div className=\"py-16 text-center space-y-sm\">\n <p className=\"text-lg font-medium\">No automation rules yet</p>\n <p className=\"text-sm text-muted-foreground\">\n Automations will appear here once you create them.\n </p>\n <Button variant=\"outline\" onClick={handleCreateNew}>\n Create your first rule\n </Button>\n </div>\n ) : (\n <div className=\"space-y-md\">\n {automationRules.map(renderRule)}\n </div>\n )}\n </div>\n </Card>\n </div>\n );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/settings/automations/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/settings/billing/BillingClient.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"The 'handleExport' function makes the dependencies of useEffect Hook (at line 170) change on every render. To fix this, wrap the definition of 'handleExport' in its own useCallback() Hook.","line":203,"column":8,"nodeType":"VariableDeclarator","endLine":224,"endColumn":3,"suggestions":[{"desc":"Wrap the definition of 'handleExport' in its own useCallback() Hook.","fix":{"range":[4597,5159],"text":"useCallback(async (format: 'csv' | 'json') => {\n try {\n const blob = await billingService.exportRecords({\n format,\n includeMetadata: true\n });\n\n const url = URL.createObjectURL(blob);\n const a = document.createElement('a');\n a.href = url;\n a.download = `billing-records.${format}`;\n document.body.appendChild(a);\n a.click();\n document.body.removeChild(a);\n URL.revokeObjectURL(url);\n\n toast.success(`Records exported as ${format.toUpperCase()}`);\n } catch (err) {\n const message = err instanceof Error ? err.message : 'Failed to export records';\n toast.error(message);\n }\n })"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"The 'handleExport' function makes the dependencies of useMemo Hook (at line 200) change on every render. To fix this, wrap the definition of 'handleExport' in its own useCallback() Hook.","line":203,"column":8,"nodeType":"VariableDeclarator","endLine":224,"endColumn":3,"suggestions":[{"desc":"Wrap the definition of 'handleExport' in its own useCallback() Hook.","fix":{"range":[4597,5159],"text":"useCallback(async (format: 'csv' | 'json') => {\n try {\n const blob = await billingService.exportRecords({\n format,\n includeMetadata: true\n });\n\n const url = URL.createObjectURL(blob);\n const a = document.createElement('a');\n a.href = url;\n a.download = `billing-records.${format}`;\n document.body.appendChild(a);\n a.click();\n document.body.removeChild(a);\n URL.revokeObjectURL(url);\n\n toast.success(`Records exported as ${format.toUpperCase()}`);\n } catch (err) {\n const message = err instanceof Error ? err.message : 'Failed to export records';\n toast.error(message);\n }\n })"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { CreditCard, DollarSign, Download, FileText, History, Package, RefreshCw, Settings, TrendingUp } from \"lucide-react\";\nimport { useState, useEffect, useCallback, useMemo } from 'react';\nimport {\n  Badge,\n  Button,\n  Card,\n  CardContent,\n  DataViewProvider,\n  StateManagerProvider,\n  Tabs,\n  TabsContent,\n  TabsList,\n  TabsTrigger,\n  ViewSwitcher,\n  useToastContext\n} from \"@ghxstship/ui\";\nimport type { \n BillingRecord, \n BillingViewConfig, \n BillingFieldConfig,\n BillingStatistics,\n BillingSearchParams,\n BillingClientProps\n} from './types';\nimport { billingService } from './lib/billing-service';\n\n// Field configuration for ATLVS DataViews\nconst fieldConfig: BillingFieldConfig[] = [\n {\n key: 'id',\n label: 'ID',\n type: 'text',\n width: 100,\n sortable: true,\n filterable: false\n },\n {\n key: 'name',\n label: 'Name',\n type: 'text',\n width: 200,\n sortable: true,\n filterable: true,\n required: true\n },\n {\n key: 'type',\n label: 'Type',\n type: 'select',\n width: 120,\n sortable: true,\n filterable: true,\n options: [\n { value: 'subscription', label: 'Subscription' },\n { value: 'invoice', label: 'Invoice' },\n { value: 'payment', label: 'Payment' },\n { value: 'plan', label: 'Plan' }\n ]\n },\n {\n key: 'amount',\n label: 'Amount',\n type: 'text',\n width: 120,\n sortable: true,\n filterable: true\n },\n {\n key: 'status',\n label: 'Status',\n type: 'select',\n width: 100,\n sortable: true,\n filterable: true,\n options: [\n { value: 'active', label: 'Active' },\n { value: 'paid', label: 'Paid' },\n { value: 'open', label: 'Open' },\n { value: 'current', label: 'Current' },\n { value: 'available', label: 'Available' }\n ]\n },\n {\n key: 'description',\n label: 'Description',\n type: 'textarea',\n width: 300,\n sortable: false,\n filterable: true\n },\n {\n key: 'category',\n label: 'Category',\n type: 'select',\n width: 120,\n sortable: true,\n filterable: true,\n options: [\n { value: 'subscriptions', label: 'Subscriptions' },\n { value: 'invoices', label: 'Invoices' },\n { value: 'payments', label: 'Payments' },\n { value: 'plans', label: 'Plans' }\n ]\n },\n {\n key: 'created_at',\n label: 'Created',\n type: 'date',\n width: 150,\n sortable: true,\n filterable: true\n },\n {\n key: 'updated_at',\n label: 'Updated',\n type: 'date',\n width: 150,\n sortable: true,\n filterable: true\n }\n];\n\nexport default function BillingClient({ userId, orgId }: BillingClientProps) {\n const { toast } = useToastContext();\n \n // State management\n const [records, setRecords] = useState<BillingRecord[]>([]);\n const [loading, setLoading] = useState(true);\n const [error, setError] = useState<string | null>(null);\n const [selectedRecords, setSelectedRecords] = useState<string[]>([]);\n const [statistics, setStatistics] = useState<BillingStatistics | null>(null);\n \n // View state\n const [currentView, setCurrentView] = useState<'grid' | 'list'>('grid');\n const [searchParams, setSearchParams] = useState<BillingSearchParams>({});\n const [activeTab, setActiveTab] = useState('overview');\n\n // Load billing records\n const loadRecords = useCallback(async (params?: BillingSearchParams) => {\n try {\n setLoading(true);\n setError(null);\n const data = await billingService.getBillingRecords(params);\n setRecords(data);\n } catch (err) {\n const message = err instanceof Error ? err.message : 'Failed to load billing records';\n setError(message);\n toast.error(message);\n } finally {\n setLoading(false);\n }\n }, [toast]);\n\n // Load statistics\n const loadStatistics = useCallback(async () => {\n try {\n const stats = await billingService.getStatistics();\n setStatistics(stats);\n } catch (err) {\n console.error('Failed to load statistics:', err);\n }\n }, []);\n\n // Initial data load\n useEffect(() => {\n loadRecords();\n loadStatistics();\n }, [loadRecords, loadStatistics, handleExport]);\n\n // ATLVS DataViews configuration\n const dataViewConfig: BillingViewConfig = useMemo(() => ({\n id: 'billing',\n name: 'Billing Management',\n viewType: currentView,\n defaultView: 'grid',\n fields: fieldConfig,\n data: records,\n onSearch: async (query: string) => {\n const params = { ...searchParams, query };\n setSearchParams(params);\n await loadRecords(params);\n },\n onFilter: async (filters: unknown) => {\n const params = { ...searchParams, ...filters };\n setSearchParams(params);\n await loadRecords(params);\n },\n onSort: async (sorts: unknown) => {\n },\n onRefresh: async () => {\n await loadRecords(searchParams);\n await loadStatistics();\n return records;\n },\n onExport: (data: unknown, format: unknown) => {\n handleExport(format);\n }\n }), [currentView, records, searchParams, loadRecords, loadStatistics, handleExport]);\n\n // Event handlers\n const handleExport = async (format: 'csv' | 'json') => {\n try {\n const blob = await billingService.exportRecords({\n format,\n includeMetadata: true\n });\n\n const url = URL.createObjectURL(blob);\n const a = document.createElement('a');\n a.href = url;\n a.download = `billing-records.${format}`;\n document.body.appendChild(a);\n a.click();\n document.body.removeChild(a);\n URL.revokeObjectURL(url);\n\n toast.success(`Records exported as ${format.toUpperCase()}`);\n } catch (err) {\n const message = err instanceof Error ? err.message : 'Failed to export records';\n toast.error(message);\n }\n };\n\n const handleRefresh = async () => {\n await loadRecords(searchParams);\n await loadStatistics();\n };\n\n // View switcher component\n const ViewSwitcher = () => (\n <div className=\"flex items-center gap-xs\">\n <Button\n variant={currentView === 'grid' ? 'default' : 'outline'}\n size=\"sm\"\n onClick={() => setCurrentView('grid')}\n >\n Grid\n </Button>\n <Button\n variant={currentView === 'list' ? 'default' : 'outline'}\n size=\"sm\"\n onClick={() => setCurrentView('list')}\n >\n List\n </Button>\n </div>\n );\n\n // Simple grid view for billing\n const renderBillingGrid = () => {\n if (loading) {\n return (\n <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-md\">\n {[...Array(6)].map((_, i) => (\n <Card key={i} className=\"animate-pulse\">\n <CardContent className=\"p-lg\">\n <div className=\"h-icon-xs bg-muted rounded w-3/4 mb-2\"></div>\n <div className=\"h-3 bg-muted rounded w-1/2\"></div>\n </CardContent>\n </Card>\n ))}\n </div>\n );\n }\n\n const subscriptionRecords = records.filter(r => r.type === 'subscription');\n const invoiceRecords = records.filter(r => r.type === 'invoice');\n const paymentRecords = records.filter(r => r.type === 'payment');\n const planRecords = records.filter(r => r.type === 'plan');\n\n return (\n <div className=\"space-y-lg\">\n {/* Current Subscription */}\n {subscriptionRecords.length > 0 && (\n <div>\n <h3 className=\"text-lg font-semibold mb-4\">Current Subscription</h3>\n <div className=\"grid grid-cols-1 gap-md\">\n {subscriptionRecords.map((record) => (\n <Card key={record.id} className=\"border-2 border-primary\">\n <CardContent className=\"p-lg\">\n <div className=\"flex items-start justify-between mb-3\">\n <div>\n <h4 className=\"font-medium text-lg\">{record.name}</h4>\n <p className=\"text-sm text-muted-foreground\">{record.description}</p>\n </div>\n <div className=\"text-right\">\n <div className=\"text-2xl font-bold\">{record.amount}</div>\n <Badge variant=\"primary\">{record.status}</Badge>\n </div>\n </div>\n </CardContent>\n </Card>\n ))}\n </div>\n </div>\n )}\n\n {/* Recent Invoices */}\n {invoiceRecords.length > 0 && (\n <div>\n <h3 className=\"text-lg font-semibold mb-4\">Recent Invoices ({invoiceRecords.length})</h3>\n <div className=\"grid grid-cols-1 md:grid-cols-2 gap-md\">\n {invoiceRecords.slice(0, 4).map((record) => (\n <Card key={record.id} className=\"hover:shadow-md transition-shadow\">\n <CardContent className=\"p-lg\">\n <div className=\"flex items-start justify-between mb-3\">\n <div>\n <h4 className=\"font-medium\">{record.name}</h4>\n <p className=\"text-sm text-muted-foreground\">{record.description}</p>\n </div>\n <div className=\"text-right\">\n <div className=\"font-bold\">{record.amount}</div>\n <Badge variant={record.status === 'paid' ? 'default' : 'destructive'}>\n {record.status}\n </Badge>\n </div>\n </div>\n </CardContent>\n </Card>\n ))}\n </div>\n </div>\n )}\n\n {/* Payment Methods */}\n {paymentRecords.length > 0 && (\n <div>\n <h3 className=\"text-lg font-semibold mb-4\">Payment Methods ({paymentRecords.length})</h3>\n <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-md\">\n {paymentRecords.map((record) => (\n <Card key={record.id} className=\"hover:shadow-md transition-shadow\">\n <CardContent className=\"p-lg\">\n <div className=\"flex items-center gap-sm mb-3\">\n <CreditCard className=\"h-icon-lg w-icon-lg text-muted-foreground\" />\n <div>\n <h4 className=\"font-medium\">{record.name}</h4>\n <p className=\"text-sm text-muted-foreground\">{record.description}</p>\n </div>\n </div>\n <Badge variant={record.amount === 'Default' ? 'default' : 'outline'}>\n {record.amount}\n </Badge>\n </CardContent>\n </Card>\n ))}\n </div>\n </div>\n )}\n\n {/* Available Plans */}\n {planRecords.length > 0 && (\n <div>\n <h3 className=\"text-lg font-semibold mb-4\">Available Plans ({planRecords.length})</h3>\n <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-md\">\n {planRecords.map((record) => (\n <Card key={record.id} className={`hover:shadow-md transition-shadow ${\n record.status === 'current' ? 'border-2 border-primary' : ''\n }`}>\n <CardContent className=\"p-lg\">\n <div className=\"text-center mb-4\">\n <h4 className=\"font-medium text-lg\">{record.name}</h4>\n <div className=\"text-2xl font-bold mt-2\">{record.amount}</div>\n </div>\n <p className=\"text-sm text-muted-foreground text-center mb-3\">\n {record.description}\n </p>\n <Badge \n variant={record.status === 'current' ? 'default' : 'outline'}\n className=\"w-full justify-center\"\n >\n {record.status === 'current' ? 'Current Plan' : 'Available'}\n </Badge>\n </CardContent>\n </Card>\n ))}\n </div>\n </div>\n )}\n </div>\n );\n };\n\n if (error) {\n return (\n <div className=\"flex items-center justify-center h-container-lg\">\n <div className=\"text-center\">\n <p className=\"text-destructive mb-4\">{error}</p>\n <Button onClick={() => loadRecords()}>\n <RefreshCw className=\"h-icon-xs w-icon-xs mr-2\" />\n Retry\n </Button>\n </div>\n </div>\n );\n }\n\n return (\n <DataViewProvider config={dataViewConfig}>\n <StateManagerProvider>\n <div className=\"space-y-lg\">\n {/* Header */}\n <div className=\"flex items-center justify-between\">\n <div>\n <h1 className=\"text-3xl font-bold\">Billing & Subscription</h1>\n <p className=\"text-muted-foreground mt-1\">\n Manage your subscription, billing, and payment methods\n </p>\n </div>\n <div className=\"flex items-center gap-sm\">\n <Button variant=\"outline\" onClick={handleRefresh} disabled={loading}>\n <RefreshCw className=\"h-icon-xs w-icon-xs mr-2\" />\n Refresh\n </Button>\n <Button variant=\"outline\" onClick={() => handleExport('csv')}>\n <Download className=\"h-icon-xs w-icon-xs mr-2\" />\n Export\n </Button>\n </div>\n </div>\n\n {/* Statistics */}\n {statistics && (\n <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-md\">\n <div className=\"bg-card p-md rounded-lg border\">\n <div className=\"flex items-center gap-xs mb-2\">\n <Package className=\"h-icon-sm w-icon-sm text-blue-600\" />\n <div className=\"text-sm font-medium\">Current Plan</div>\n </div>\n <div className=\"text-2xl font-bold\">{statistics.currentPlan}</div>\n <div className=\"text-xs text-muted-foreground\">\n Next billing: {new Date(statistics.nextBillingDate).toLocaleDateString()}\n </div>\n </div>\n <div className=\"bg-card p-md rounded-lg border\">\n <div className=\"flex items-center gap-xs mb-2\">\n <DollarSign className=\"h-icon-sm w-icon-sm text-green-600\" />\n <div className=\"text-sm font-medium\">Monthly Spend</div>\n </div>\n <div className=\"text-2xl font-bold\">${statistics.monthlySpend}</div>\n <div className=\"text-xs text-muted-foreground\">\n current billing cycle\n </div>\n </div>\n <div className=\"bg-card p-md rounded-lg border\">\n <div className=\"flex items-center gap-xs mb-2\">\n <FileText className=\"h-icon-sm w-icon-sm text-purple-600\" />\n <div className=\"text-sm font-medium\">Invoices</div>\n </div>\n <div className=\"text-2xl font-bold\">{statistics.paidInvoices}</div>\n <div className=\"text-xs text-muted-foreground\">\n of {statistics.totalInvoices} total\n </div>\n </div>\n <div className=\"bg-card p-md rounded-lg border\">\n <div className=\"flex items-center gap-xs mb-2\">\n <TrendingUp className=\"h-icon-sm w-icon-sm text-orange-600\" />\n <div className=\"text-sm font-medium\">Usage</div>\n </div>\n <div className=\"text-2xl font-bold\">\n {statistics.usageMetrics.users.current}/{statistics.usageMetrics.users.limit}\n </div>\n <div className=\"text-xs text-muted-foreground\">\n users this month\n </div>\n </div>\n </div>\n )}\n\n {/* Tab Navigation */}\n <Tabs value={activeTab} onValueChange={setActiveTab}>\n <TabsList className=\"grid w-full grid-cols-4\">\n <TabsTrigger value=\"overview\">\n <Package className=\"h-icon-xs w-icon-xs mr-2\" />\n Overview\n </TabsTrigger>\n <TabsTrigger value=\"subscription\">\n <Package className=\"h-icon-xs w-icon-xs mr-2\" />\n Subscription\n </TabsTrigger>\n <TabsTrigger value=\"invoices\">\n <FileText className=\"h-icon-xs w-icon-xs mr-2\" />\n Invoices\n </TabsTrigger>\n <TabsTrigger value=\"settings\">\n <Settings className=\"h-icon-xs w-icon-xs mr-2\" />\n Settings\n </TabsTrigger>\n </TabsList>\n\n <TabsContent value=\"overview\" className=\"space-y-md\">\n {/* View Controls */}\n <div className=\"flex items-center justify-between\">\n <ViewSwitcher />\n <div className=\"flex items-center gap-xs\">\n {selectedRecords.length > 0 && (\n <Button variant=\"outline\" size=\"sm\">\n Actions ({selectedRecords.length})\n </Button>\n )}\n </div>\n </div>\n\n {/* Main Content */}\n {renderBillingGrid()}\n </TabsContent>\n\n <TabsContent value=\"subscription\" className=\"space-y-md\">\n <div className=\"bg-card p-xl rounded-lg border text-center\">\n <Package className=\"h-icon-2xl w-icon-2xl mx-auto mb-4 text-muted-foreground\" />\n <h3 className=\"text-lg font-semibold mb-2\">Subscription Management</h3>\n <p className=\"text-muted-foreground mb-4\">\n Subscription management is available through the overview interface above.\n </p>\n <Button onClick={() => setActiveTab('overview')}>\n Go to Overview\n </Button>\n </div>\n </TabsContent>\n\n <TabsContent value=\"invoices\" className=\"space-y-md\">\n <div className=\"bg-card p-xl rounded-lg border text-center\">\n <FileText className=\"h-icon-2xl w-icon-2xl mx-auto mb-4 text-muted-foreground\" />\n <h3 className=\"text-lg font-semibold mb-2\">Invoice History</h3>\n <p className=\"text-muted-foreground mb-4\">\n Invoice history is available through the overview interface above.\n </p>\n <Button onClick={() => setActiveTab('overview')}>\n Go to Overview\n </Button>\n </div>\n </TabsContent>\n\n <TabsContent value=\"settings\" className=\"space-y-md\">\n <div className=\"bg-card p-xl rounded-lg border text-center\">\n <Settings className=\"h-icon-2xl w-icon-2xl mx-auto mb-4 text-muted-foreground\" />\n <h3 className=\"text-lg font-semibold mb-2\">Billing Settings</h3>\n <p className=\"text-muted-foreground mb-4\">\n Billing settings configuration will be available in a future update.\n </p>\n <Button onClick={() => setActiveTab('overview')}>\n Go to Overview\n </Button>\n </div>\n </TabsContent>\n </Tabs>\n </div>\n </StateManagerProvider>\n </DataViewProvider>\n );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/settings/billing/BillingPortalClient.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/settings/billing/BillingSettingsClient.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/settings/billing/Plans.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/settings/billing/lib/billing-service.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/settings/billing/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/settings/billing/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/settings/components/AccountSettings.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'profile'. Either include it or remove the dependency array.","line":99,"column":6,"nodeType":"ArrayExpression","endLine":99,"endColumn":24,"suggestions":[{"desc":"Update the dependencies array to be: [userId, supabase, profile]","fix":{"range":[2191,2209],"text":"[userId, supabase, profile]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useState, useEffect } from 'react';\nimport { User, Lock, Shield, Smartphone, Key, Globe, Clock, AlertCircle, Save, Eye, EyeOff } from \"lucide-react\";\nimport { createBrowserClient } from '@ghxstship/auth';\nimport {\n  Alert,\n  AlertDescription,\n  Badge,\n  Button,\n  Card,\n  CardContent,\n  CardHeader,\n  CardTitle,\n  Input,\n  Label,\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n  Separator,\n  Switch,\n  Tabs,\n  TabsContent,\n  TabsList,\n  TabsTrigger\n} from \"@ghxstship/ui\";\n\ninterface AccountSettingsProps {\n  userId: string;\n  orgId: string;\n}\n\ninterface UserProfile {\n  id: string;\n  email: string;\n  name: string;\n  avatar_url?: string;\n  phone?: string;\n  timezone?: string;\n  language?: string;\n  created_at: string;\n  updated_at: string;\n}\n\nexport default function AccountSettings({ userId, orgId }: AccountSettingsProps) {\n  const [loading, setLoading] = useState(true);\n  const [saving, setSaving] = useState(false);\n  const [profile, setProfile] = useState<UserProfile | null>(null);\n  const [showPassword, setShowPassword] = useState(false);\n  // const toast = useToast();\n  const supabase = createBrowserClient();\n\n  // Form states\n  const [profileForm, setProfileForm] = useState({\n    name: '',\n    phone: '',\n    timezone: 'UTC',\n    language: 'en'\n  });\n\n  const [passwordForm, setPasswordForm] = useState({\n    currentPassword: '',\n    newPassword: '',\n    confirmPassword: ''\n  });\n\n  const [twoFactorEnabled, setTwoFactorEnabled] = useState(false);\n\n  useEffect(() => {\n    const loadProfile = async () => {\n      try {\n        const { data: { user } } = await supabase.auth.getUser();\n        if (!user) throw new Error('Not authenticated');\n\n        const { data, error } = await supabase\n          .from('profiles')\n          .select('*')\n          .single();\n\n        if (error) throw error;\n\n        setProfile(data);\n        if (!profile) {\n          console.error('Unable to load user profile');\n          return;\n        }\n\n        setLoading(false);\n      } catch (error) {\n        console.error('Error loading profile:', error);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    loadProfile();\n  }, [userId, supabase]);\n\n  const handleProfileUpdate = async () => {\n    if (!profile) return;\n\n    setSaving(true);\n    try {\n      const { error } = await supabase\n        .from('profiles')\n        .update({\n          name: profileForm.name,\n          phone: profileForm.phone,\n          timezone: profileForm.timezone,\n          language: profileForm.language,\n          updated_at: new Date().toISOString()\n        })\n        .eq('id', profile.id);\n\n      if (error) throw error;\n\n      toast({\n        title: 'Success',\n        description: 'Profile updated successfully'\n      });\n    } catch (error) {\n      console.error('Error updating profile:', error);\n      toast({\n        title: 'Error',\n        description: 'Failed to update profile',\n        variant: 'destructive'\n      });\n    } finally {\n      setSaving(false);\n    }\n  };\n\n  const handlePasswordChange = async () => {\n    if (passwordForm.newPassword !== passwordForm.confirmPassword) {\n      toast({\n        title: 'Error',\n        description: 'Passwords do not match',\n        variant: 'destructive'\n      });\n      return;\n    }\n\n    setSaving(true);\n    try {\n      const { error } = await supabase.auth.updateUser({\n        password: passwordForm.newPassword\n      });\n\n      if (error) throw error;\n\n      setPasswordForm({\n        currentPassword: '',\n        newPassword: '',\n        confirmPassword: ''\n      });\n\n      toast({\n        title: 'Success',\n        description: 'Password updated successfully'\n      });\n    } catch (error) {\n      console.error('Error updating password:', error);\n      toast({\n        title: 'Error',\n        description: 'Failed to update password',\n        variant: 'destructive'\n      });\n    } finally {\n      setSaving(false);\n    }\n  };\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center p-xl\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-icon-lg w-icon-lg border-b-2 border-primary mx-auto\"></div>\n          <p className=\"mt-2 text-sm text-muted-foreground\">Loading account settings...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-lg\">\n      <Tabs defaultValue=\"profile\" className=\"space-y-lg\">\n        <TabsList className=\"grid w-full grid-cols-5\">\n          <TabsTrigger value=\"profile\">Profile</TabsTrigger>\n          <TabsTrigger value=\"password\">Password</TabsTrigger>\n          <TabsTrigger value=\"security\">Security</TabsTrigger>\n          <TabsTrigger value=\"sessions\">Sessions</TabsTrigger>\n          <TabsTrigger value=\"api-keys\">API Keys</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"profile\" className=\"space-y-lg\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-xs\">\n                <User className=\"h-icon-sm w-icon-sm\" />\n                Profile Information\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-md\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-md\">\n                <div className=\"space-y-xs\">\n                  <Label htmlFor=\"email\">Email Address</Label>\n                  <Input\n                    id=\"email\"\n                    type=\"email\"\n                    value={profile?.email || ''}\n                    disabled\n                    className=\"bg-muted\"\n                  />\n                  <p className=\"text-xs text-muted-foreground\">\n                    Email cannot be changed. Contact support if needed.\n                  </p>\n                </div>\n\n                <div className=\"space-y-xs\">\n                  <Label htmlFor=\"name\">Full Name</Label>\n                  <Input\n                    id=\"name\"\n                    value={profileForm.name}\n                    onChange={(e) => setProfileForm(prev => ({ ...prev, name: e.target.value }))}\n                    placeholder=\"Enter your full name\"\n                  />\n                </div>\n\n                <div className=\"space-y-xs\">\n                  <Label htmlFor=\"phone\">Phone Number</Label>\n                  <Input\n                    id=\"phone\"\n                    value={profileForm.phone}\n                    onChange={(e) => setProfileForm(prev => ({ ...prev, phone: e.target.value }))}\n                    placeholder=\"Enter your phone number\"\n                  />\n                </div>\n\n                <div className=\"space-y-xs\">\n                  <Label htmlFor=\"timezone\">Timezone</Label>\n                  <Select\n                    value={profileForm.timezone}\n                    onChange={(e) => setProfileForm(prev => ({ ...prev, timezone: value }))}\n                  >\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Select timezone\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"UTC\">UTC</SelectItem>\n                      <SelectItem value=\"America/New_York\">Eastern Time</SelectItem>\n                      <SelectItem value=\"America/Chicago\">Central Time</SelectItem>\n                      <SelectItem value=\"America/Denver\">Mountain Time</SelectItem>\n                      <SelectItem value=\"America/Los_Angeles\">Pacific Time</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div className=\"space-y-xs\">\n                  <Label htmlFor=\"language\">Language</Label>\n                  <Select\n                    value={profileForm.language}\n                    onChange={(e) => setProfileForm(prev => ({ ...prev, language: value }))}\n                  >\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Select language\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"en\">English</SelectItem>\n                      <SelectItem value=\"es\">Spanish</SelectItem>\n                      <SelectItem value=\"fr\">French</SelectItem>\n                      <SelectItem value=\"de\">German</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n\n              <Separator />\n\n              <div className=\"flex justify-end\">\n                <Button onClick={handleProfileUpdate} disabled={saving}>\n                  <Save className=\"h-icon-xs w-icon-xs mr-2\" />\n                  {saving ? 'Saving...' : 'Save Changes'}\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"password\" className=\"space-y-lg\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-xs\">\n                <Lock className=\"h-icon-sm w-icon-sm\" />\n                Change Password\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-md\">\n              <Alert>\n                <AlertCircle className=\"h-icon-xs w-icon-xs\" />\n                <AlertDescription>\n                  Password must be at least 8 characters long and contain a mix of letters, numbers, and symbols.\n                </AlertDescription>\n              </Alert>\n\n              <div className=\"space-y-md\">\n                <div className=\"space-y-xs\">\n                  <Label htmlFor=\"current-password\">Current Password</Label>\n                  <div className=\"relative\">\n                    <Input\n                      id=\"current-password\"\n                      type={showPassword ? \"text\" : \"password\"}\n                      value={passwordForm.currentPassword}\n                      onChange={(e) => setPasswordForm(prev => ({ ...prev, currentPassword: e.target.value }))}\n                      placeholder=\"Enter current password\"\n                    />\n                    <Button\n                      type=\"button\"\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      className=\"absolute right-0 top-0 h-full px-sm py-xs hover:bg-transparent\"\n                      onClick={() => setShowPassword(!showPassword)}\n                    >\n                      {showPassword ? <EyeOff className=\"h-icon-xs w-icon-xs\" /> : <Eye className=\"h-icon-xs w-icon-xs\" />}\n                    </Button>\n                  </div>\n                </div>\n\n                <div className=\"space-y-xs\">\n                  <Label htmlFor=\"new-password\">New Password</Label>\n                  <Input\n                    id=\"new-password\"\n                    type=\"password\"\n                    value={passwordForm.newPassword}\n                    onChange={(e) => setPasswordForm(prev => ({ ...prev, newPassword: e.target.value }))}\n                    placeholder=\"Enter new password\"\n                  />\n                </div>\n\n                <div className=\"space-y-xs\">\n                  <Label htmlFor=\"confirm-password\">Confirm New Password</Label>\n                  <Input\n                    id=\"confirm-password\"\n                    type=\"password\"\n                    value={passwordForm.confirmPassword}\n                    onChange={(e) => setPasswordForm(prev => ({ ...prev, confirmPassword: e.target.value }))}\n                    placeholder=\"Confirm new password\"\n                  />\n                </div>\n              </div>\n\n              <Separator />\n\n              <div className=\"flex justify-end\">\n                <Button onClick={handlePasswordChange} disabled={saving}>\n                  <Lock className=\"h-icon-xs w-icon-xs mr-2\" />\n                  {saving ? 'Updating...' : 'Update Password'}\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"security\" className=\"space-y-lg\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-xs\">\n                <Shield className=\"h-icon-sm w-icon-sm\" />\n                Two-Factor Authentication\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-md\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"space-y-0.5\">\n                  <Label>Enable 2FA</Label>\n                  <p className=\"text-sm text-muted-foreground\">\n                    Add an extra layer of security to your account\n                  </p>\n                </div>\n                <Switch\n                  checked={twoFactorEnabled}\n                  onCheckedChange={setTwoFactorEnabled}\n                />\n              </div>\n\n              {twoFactorEnabled ? (\n                <Alert>\n                  <Smartphone className=\"h-icon-xs w-icon-xs\" />\n                  <AlertDescription>\n                    Two-factor authentication is enabled. Use an authenticator app to generate codes.\n                  </AlertDescription>\n                </Alert>\n              ) : (\n                <Alert>\n                  <AlertCircle className=\"h-icon-xs w-icon-xs\" />\n                  <AlertDescription>\n                    Two-factor authentication is disabled. Enable it to secure your account.\n                  </AlertDescription>\n                </Alert>\n              )}\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-xs\">\n                <Clock className=\"h-icon-sm w-icon-sm\" />\n                Session Management\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <p className=\"text-sm text-muted-foreground mb-4\">\n                Manage your active sessions across devices.\n              </p>\n              <Button variant=\"outline\" size=\"sm\">\n                View Active Sessions\n              </Button>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"sessions\" className=\"space-y-lg\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Active Sessions</CardTitle>\n              <p className=\"text-sm text-muted-foreground\">\n                Manage devices and sessions where you're currently signed in.\n              </p>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-center py-xl\">\n                <Globe className=\"mx-auto h-icon-2xl w-icon-2xl text-muted-foreground\" />\n                <p className=\"mt-2 text-sm text-muted-foreground\">\n                  Session management interface will be implemented here\n                </p>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"api-keys\" className=\"space-y-lg\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-xs\">\n                <Key className=\"h-icon-sm w-icon-sm\" />\n                API Keys\n              </CardTitle>\n              <p className=\"text-sm text-muted-foreground\">\n                Manage API keys for programmatic access to your account.\n              </p>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-center py-xl\">\n                <Key className=\"mx-auto h-icon-2xl w-icon-2xl text-muted-foreground\" />\n                <p className=\"mt-2 text-sm text-muted-foreground\">\n                  API key management interface will be implemented here\n                </p>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/settings/components/BillingSettings.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/settings/components/IntegrationsSettings.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/settings/components/NotificationsSettings.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'preferences'. Either include it or remove the dependency array. You can also do a functional update 'setPreferences(p => ...)' if you only need 'preferences' in the 'setPreferences' call.","line":149,"column":6,"nodeType":"ArrayExpression","endLine":149,"endColumn":24,"suggestions":[{"desc":"Update the dependencies array to be: [userId, supabase, preferences]","fix":{"range":[3452,3470],"text":"[userId, supabase, preferences]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useState, useEffect } from 'react';\nimport { Bell, Mail, Smartphone, Monitor, Volume2, VolumeX, Settings as SettingsIcon } from \"lucide-react\";\nimport { createBrowserClient } from '@ghxstship/auth';\nimport {\n  Card,\n  CardContent,\n  CardHeader,\n  CardTitle,\n  Button,\n  Label,\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n  Switch,\n  Separator\n} from '@ghxstship/ui';\n\ninterface NotificationsSettingsProps {\n  userId: string;\n  orgId: string;\n}\n\ninterface NotificationPreferences {\n  email: {\n    enabled: boolean;\n    project_updates: boolean;\n    task_assignments: boolean;\n    mentions: boolean;\n    comments: boolean;\n    deadlines: boolean;\n    weekly_digest: boolean;\n  };\n  sms: {\n    enabled: boolean;\n    urgent_tasks: boolean;\n    deadlines: boolean;\n  };\n  push: {\n    enabled: boolean;\n    project_updates: boolean;\n    task_assignments: boolean;\n    mentions: boolean;\n  };\n  in_app: {\n    enabled: boolean;\n    sound_enabled: boolean;\n    desktop_notifications: boolean;\n  };\n  digest: {\n    frequency: 'none' | 'daily' | 'weekly' | 'monthly';\n    include_metrics: boolean;\n    include_tasks: boolean;\n  };\n}\n\nconst NOTIFICATION_TYPES = [\n  {\n    key: 'project_updates',\n    label: 'Project Updates',\n    description: 'Changes to project status, milestones, and progress'\n  },\n  {\n    key: 'task_assignments',\n    label: 'Task Assignments',\n    description: 'When tasks are assigned to you or your team'\n  },\n  {\n    key: 'mentions',\n    label: 'Mentions & Tags',\n    description: 'When someone mentions you in comments or tasks'\n  },\n  {\n    key: 'comments',\n    label: 'Comments & Replies',\n    description: 'New comments on tasks and projects you follow'\n  },\n  {\n    key: 'deadlines',\n    label: 'Deadlines & Reminders',\n    description: 'Upcoming deadlines and task reminders'\n  }\n];\n\nexport default function NotificationsSettings({ userId, orgId }: NotificationsSettingsProps) {\n  const [loading, setLoading] = useState(true);\n  const [saving, setSaving] = useState(false);\n  const [preferences, setPreferences] = useState<NotificationPreferences>({\n    email: {\n      enabled: true,\n      project_updates: true,\n      task_assignments: true,\n      mentions: true,\n      comments: true,\n      deadlines: true,\n      weekly_digest: true\n    },\n    sms: {\n      enabled: false,\n      urgent_tasks: true,\n      deadlines: true\n    },\n    push: {\n      enabled: true,\n      project_updates: false,\n      task_assignments: true,\n      mentions: true\n    },\n    in_app: {\n      enabled: true,\n      sound_enabled: true,\n      desktop_notifications: true\n    },\n    digest: {\n      frequency: 'weekly',\n      include_metrics: true,\n      include_tasks: true\n    }\n  });\n\n  const supabase = createBrowserClient();\n\n  useEffect(() => {\n    const loadNotificationPreferences = async () => {\n      try {\n        // Load user notification preferences\n        const { data, error } = await supabase\n          .from('user_notification_settings')\n          .select('*')\n          .eq('user_id', userId)\n          .single();\n\n        if (error && error.code !== 'PGRST116') throw error;\n\n        if (data?.preferences) {\n          setPreferences({ ...preferences, ...data.preferences });\n        }\n      } catch (error) {\n        console.error('Error loading notification preferences:', error);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    loadNotificationPreferences();\n  }, [userId, supabase]);\n\n  const handleSavePreferences = async () => {\n    setSaving(true);\n    try {\n      const { error } = await supabase\n        .from('user_notification_settings')\n        .upsert({\n          user_id: userId,\n          preferences,\n          updated_at: new Date().toISOString()\n        });\n\n      if (error) throw error;\n\n\n    } catch (error) {\n      console.error('Error saving notification preferences:', error);\n    } finally {\n      setSaving(false);\n    }\n  };\n\n  const updateEmailPreference = (key: keyof NotificationPreferences['email'], value: boolean) => {\n    setPreferences(prev => ({\n      ...prev,\n      email: {\n        ...prev.email,\n        [key]: value\n      }\n    }));\n  };\n\n  const updateSmsPreference = (key: keyof NotificationPreferences['sms'], value: boolean) => {\n    setPreferences(prev => ({\n      ...prev,\n      sms: {\n        ...prev.sms,\n        [key]: value\n      }\n    }));\n  };\n\n  const updatePushPreference = (key: keyof NotificationPreferences['push'], value: boolean) => {\n    setPreferences(prev => ({\n      ...prev,\n      push: {\n        ...prev.push,\n        [key]: value\n      }\n    }));\n  };\n\n  const updateInAppPreference = (key: keyof NotificationPreferences['in_app'], value: boolean) => {\n    setPreferences(prev => ({\n      ...prev,\n      in_app: {\n        ...prev.in_app,\n        [key]: value\n      }\n    }));\n  };\n\n  const updateDigestPreference = (key: keyof NotificationPreferences['digest'], value: unknown) => {\n    setPreferences(prev => ({\n      ...prev,\n      digest: {\n        ...prev.digest,\n        [key]: value\n      }\n    }));\n  };\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center p-xl\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-icon-lg w-icon-lg border-b-2 border-primary mx-auto\"></div>\n          <p className=\"mt-2 text-sm text-muted-foreground\">Loading notification settings...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-lg\">\n      {/* Email Notifications */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-xs\">\n            <Mail className=\"h-icon-sm w-icon-sm\" />\n            Email Notifications\n          </CardTitle>\n          <p className=\"text-sm text-muted-foreground\">\n            Configure which activities trigger email notifications.\n          </p>\n        </CardHeader>\n        <CardContent className=\"space-y-lg\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"space-y-0.5\">\n              <Label>Enable Email Notifications</Label>\n              <p className=\"text-sm text-muted-foreground\">Receive notifications via email</p>\n            </div>\n            <Switch\n              checked={preferences.email.enabled}\n              onCheckedChange={(checked) => updateEmailPreference('enabled', checked)}\n            />\n          </div>\n\n          {preferences.email.enabled && (\n            <div className=\"space-y-md ml-6\">\n              {NOTIFICATION_TYPES.map((type) => (\n                <div key={type.key} className=\"flex items-center justify-between\">\n                  <div className=\"space-y-0.5\">\n                    <Label>{type.label}</Label>\n                    <p className=\"text-sm text-muted-foreground\">{type.description}</p>\n                  </div>\n                  <Switch\n                    checked={preferences.email[type.key as keyof NotificationPreferences['email']] as boolean}\n                    onCheckedChange={(checked) => updateEmailPreference(type.key as keyof NotificationPreferences['email'], checked)}\n                  />\n                </div>\n              ))}\n\n              <Separator />\n\n              <div className=\"flex items-center justify-between\">\n                <div className=\"space-y-0.5\">\n                  <Label>Weekly Digest</Label>\n                  <p className=\"text-sm text-muted-foreground\">Receive a weekly summary of activity</p>\n                </div>\n                <Switch\n                  checked={preferences.email.weekly_digest}\n                  onCheckedChange={(checked) => updateEmailPreference('weekly_digest', checked)}\n                />\n              </div>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* SMS Notifications */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-xs\">\n            <Smartphone className=\"h-icon-sm w-icon-sm\" />\n            SMS Notifications\n          </CardTitle>\n          <p className=\"text-sm text-muted-foreground\">\n            Configure SMS notifications for critical updates.\n          </p>\n        </CardHeader>\n        <CardContent className=\"space-y-lg\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"space-y-0.5\">\n              <Label>Enable SMS Notifications</Label>\n              <p className=\"text-sm text-muted-foreground\">Receive notifications via text message</p>\n            </div>\n            <Switch\n              checked={preferences.sms.enabled}\n              onCheckedChange={(checked) => updateSmsPreference('enabled', checked)}\n            />\n          </div>\n\n          {preferences.sms.enabled && (\n            <div className=\"space-y-md ml-6\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"space-y-0.5\">\n                  <Label>Urgent Tasks</Label>\n                  <p className=\"text-sm text-muted-foreground\">High-priority task notifications</p>\n                </div>\n                <Switch\n                  checked={preferences.sms.urgent_tasks}\n                  onCheckedChange={(checked) => updateSmsPreference('urgent_tasks', checked)}\n                />\n              </div>\n\n              <div className=\"flex items-center justify-between\">\n                <div className=\"space-y-0.5\">\n                  <Label>Deadlines</Label>\n                  <p className=\"text-sm text-muted-foreground\">Task deadline reminders</p>\n                </div>\n                <Switch\n                  checked={preferences.sms.deadlines}\n                  onCheckedChange={(checked) => updateSmsPreference('deadlines', checked)}\n                />\n              </div>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Push Notifications */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-xs\">\n            <Monitor className=\"h-icon-sm w-icon-sm\" />\n            Push Notifications\n          </CardTitle>\n          <p className=\"text-sm text-muted-foreground\">\n            Configure browser push notifications.\n          </p>\n        </CardHeader>\n        <CardContent className=\"space-y-lg\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"space-y-0.5\">\n              <Label>Enable Push Notifications</Label>\n              <p className=\"text-sm text-muted-foreground\">Receive notifications in your browser</p>\n            </div>\n            <Switch\n              checked={preferences.push.enabled}\n              onCheckedChange={(checked) => updatePushPreference('enabled', checked)}\n            />\n          </div>\n\n          {preferences.push.enabled && (\n            <div className=\"space-y-md ml-6\">\n              {NOTIFICATION_TYPES.slice(0, 3).map((type) => (\n                <div key={type.key} className=\"flex items-center justify-between\">\n                  <div className=\"space-y-0.5\">\n                    <Label>{type.label}</Label>\n                    <p className=\"text-sm text-muted-foreground\">{type.description}</p>\n                  </div>\n                  <Switch\n                    checked={preferences.push[type.key as keyof NotificationPreferences['push']] as boolean}\n                    onCheckedChange={(checked) => updatePushPreference(type.key as keyof NotificationPreferences['push'], checked)}\n                  />\n                </div>\n              ))}\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* In-App Notifications */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-xs\">\n            <Bell className=\"h-icon-sm w-icon-sm\" />\n            In-App Notifications\n          </CardTitle>\n          <p className=\"text-sm text-muted-foreground\">\n            Configure in-app notification preferences.\n          </p>\n        </CardHeader>\n        <CardContent className=\"space-y-lg\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"space-y-0.5\">\n              <Label>Enable In-App Notifications</Label>\n              <p className=\"text-sm text-muted-foreground\">Show notifications within the application</p>\n            </div>\n            <Switch\n              checked={preferences.in_app.enabled}\n              onCheckedChange={(checked) => updateInAppPreference('enabled', checked)}\n            />\n          </div>\n\n          {preferences.in_app.enabled && (\n            <div className=\"space-y-md ml-6\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"space-y-0.5\">\n                  <Label>Sound Notifications</Label>\n                  <p className=\"text-sm text-muted-foreground\">Play sound for notifications</p>\n                </div>\n                <Switch\n                  checked={preferences.in_app.sound_enabled}\n                  onCheckedChange={(checked) => updateInAppPreference('sound_enabled', checked)}\n                />\n              </div>\n\n              <div className=\"flex items-center justify-between\">\n                <div className=\"space-y-0.5\">\n                  <Label>Desktop Notifications</Label>\n                  <p className=\"text-sm text-muted-foreground\">Show desktop notifications</p>\n                </div>\n                <Switch\n                  checked={preferences.in_app.desktop_notifications}\n                  onCheckedChange={(checked) => updateInAppPreference('desktop_notifications', checked)}\n                />\n              </div>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Digest Settings */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-xs\">\n            <SettingsIcon className=\"h-icon-sm w-icon-sm\" />\n            Digest Preferences\n          </CardTitle>\n          <p className=\"text-sm text-muted-foreground\">\n            Configure summary emails and reports.\n          </p>\n        </CardHeader>\n        <CardContent className=\"space-y-lg\">\n          <div className=\"space-y-xs\">\n            <Label htmlFor=\"digest-frequency\">Digest Frequency</Label>\n            <Select\n              value={preferences.digest.frequency}\n              onChange={(value: unknown) => updateDigestPreference('frequency', value)}\n            >\n              <SelectTrigger>\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"none\">No digest</SelectItem>\n                <SelectItem value=\"daily\">Daily</SelectItem>\n                <SelectItem value=\"weekly\">Weekly</SelectItem>\n                <SelectItem value=\"monthly\">Monthly</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n\n          {preferences.digest.frequency !== 'none' && (\n            <div className=\"space-y-md\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"space-y-0.5\">\n                  <Label>Include Metrics</Label>\n                  <p className=\"text-sm text-muted-foreground\">Project progress and team metrics</p>\n                </div>\n                <Switch\n                  checked={preferences.digest.include_metrics}\n                  onCheckedChange={(checked) => updateDigestPreference('include_metrics', checked)}\n                />\n              </div>\n\n              <div className=\"flex items-center justify-between\">\n                <div className=\"space-y-0.5\">\n                  <Label>Include Task Updates</Label>\n                  <p className=\"text-sm text-muted-foreground\">Recent task activity and assignments</p>\n                </div>\n                <Switch\n                  checked={preferences.digest.include_tasks}\n                  onCheckedChange={(checked) => updateDigestPreference('include_tasks', checked)}\n                />\n              </div>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Save Button */}\n      <div className=\"flex justify-end\">\n        <Button onClick={handleSavePreferences} disabled={saving}>\n          <Bell className=\"h-icon-xs w-icon-xs mr-2\" />\n          {saving ? 'Saving...' : 'Save Notification Settings'}\n        </Button>\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/settings/components/OrganizationSettings.tsx","messages":[{"ruleId":"@next/next/no-img-element","severity":1,"message":"Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` or a custom image loader to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","line":305,"column":23,"nodeType":"JSXOpeningElement","endLine":305,"endColumn":119}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useState, useEffect } from 'react';\nimport { Building, Globe, Upload, Trash2, CheckCircle, AlertTriangle, Settings as SettingsIcon } from \"lucide-react\";\nimport { createBrowserClient } from '@ghxstship/auth';\nimport {\n  Card,\n  CardContent,\n  CardHeader,\n  CardTitle,\n  Button,\n  Input,\n  Label,\n  Textarea,\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n  Badge,\n  Alert,\n  AlertDescription,\n  Separator\n} from '@ghxstship/ui';\n\ninterface OrganizationSettingsProps {\n  userId: string;\n  orgId: string;\n}\n\ninterface OrganizationProfile {\n  id: string;\n  name: string;\n  description?: string;\n  website?: string;\n  industry?: string;\n  size?: string;\n  logo_url?: string;\n  address?: {\n    street?: string;\n    city?: string;\n    state?: string;\n    country?: string;\n    postal_code?: string;\n  };\n}\n\ninterface Domain {\n  id: string;\n  domain: string;\n  status: 'pending' | 'verified' | 'failed';\n  verified_at?: string;\n  created_at: string;\n}\n\nexport default function OrganizationSettings({ userId, orgId }: OrganizationSettingsProps) {\n  const [loading, setLoading] = useState(true);\n  const [saving, setSaving] = useState(false);\n  const [organization, setOrganization] = useState<OrganizationProfile | null>(null);\n  const [domains, setDomains] = useState<Domain[]>([]);\n  const [newDomain, setNewDomain] = useState('');\n  const [showDemoData, setShowDemoData] = useState(false);\n\n  const supabase = createBrowserClient();\n\n  useEffect(() => {\n    const loadOrganizationData = async () => {\n      try {\n        // Load organization profile\n        const { data: orgData, error: orgError } = await supabase\n          .from('organizations')\n          .select('*')\n          .eq('id', orgId)\n          .single();\n\n        if (orgError) throw orgError;\n\n        setOrganization(orgData);\n\n        // Load domains\n        const { data: domainsData, error: domainsError } = await supabase\n          .from('organization_domains')\n          .select('*')\n          .eq('organization_id', orgId)\n          .order('created_at', { ascending: false });\n\n        if (domainsError && domainsError.code !== 'PGRST116') throw domainsError;\n\n        setDomains(domainsData || []);\n\n      } catch (error) {\n        console.error('Error loading organization data:', error);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    loadOrganizationData();\n  }, [orgId, supabase]);\n\n  const handleSaveOrganization = async () => {\n    if (!organization) return;\n\n    setSaving(true);\n    try {\n      const { error } = await supabase\n        .from('organizations')\n        .update({\n          name: organization.name,\n          description: organization.description,\n          website: organization.website,\n          industry: organization.industry,\n          size: organization.size,\n          address: organization.address,\n          updated_at: new Date().toISOString()\n        })\n        .eq('id', orgId);\n\n      if (error) throw error;\n\n\n    } catch (error) {\n      console.error('Error updating organization:', error);\n    } finally {\n      setSaving(false);\n    }\n  };\n\n  const handleAddDomain = async () => {\n    if (!newDomain.trim()) return;\n\n    try {\n      const { data, error } = await supabase\n        .from('organization_domains')\n        .insert({\n          organization_id: orgId,\n          domain: newDomain.trim(),\n          status: 'pending'\n        })\n        .select()\n        .single();\n\n      if (error) throw error;\n\n      setDomains(prev => [data, ...prev]);\n      setNewDomain('');\n\n    } catch (error) {\n      console.error('Error adding domain:', error);\n    }\n  };\n\n  const handleVerifyDomain = async (domainId: string) => {\n    try {\n      const { error } = await supabase\n        .from('organization_domains')\n        .update({\n          status: 'verified',\n          verified_at: new Date().toISOString()\n        })\n        .eq('id', domainId);\n\n      if (error) throw error;\n\n      setDomains(prev => prev.map(domain =>\n        domain.id === domainId\n          ? { ...domain, status: 'verified', verified_at: new Date().toISOString() }\n          : domain\n      ));\n\n    } catch (error) {\n      console.error('Error verifying domain:', error);\n    }\n  };\n\n  const handleRemoveDomain = async (domainId: string) => {\n    try {\n      const { error } = await supabase\n        .from('organization_domains')\n        .delete()\n        .eq('id', domainId);\n\n      if (error) throw error;\n\n      setDomains(prev => prev.filter(domain => domain.id !== domainId));\n\n    } catch (error) {\n      console.error('Error removing domain:', error);\n    }\n  };\n\n  const handleRemoveDemoData = async () => {\n    try {\n      // This would call the demo removal API\n      setShowDemoData(false);\n    } catch (error) {\n      console.error('Error removing demo data:', error);\n    }\n  };\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center p-xl\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-icon-lg w-icon-lg border-b-2 border-primary mx-auto\"></div>\n          <p className=\"mt-2 text-sm text-muted-foreground\">Loading organization settings...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-lg\">\n      {/* Organization Profile */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-xs\">\n            <Building className=\"h-icon-sm w-icon-sm\" />\n            Organization Profile\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-lg\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-lg\">\n            <div className=\"space-y-md\">\n              <div className=\"space-y-xs\">\n                <Label htmlFor=\"org-name\">Organization Name</Label>\n                <Input\n                  id=\"org-name\"\n                  value={organization?.name || ''}\n                  onChange={(e) => setOrganization(prev => prev ? { ...prev, name: e.target.value } : null)}\n                  placeholder=\"Enter organization name\"\n                />\n              </div>\n\n              <div className=\"space-y-xs\">\n                <Label htmlFor=\"org-description\">Description</Label>\n                <Textarea\n                  id=\"org-description\"\n                  value={organization?.description || ''}\n                  onChange={(e) => setOrganization(prev => prev ? { ...prev, description: e.target.value } : null)}\n                  placeholder=\"Brief description of your organization\"\n                  rows={3}\n                />\n              </div>\n\n              <div className=\"space-y-xs\">\n                <Label htmlFor=\"org-website\">Website</Label>\n                <Input\n                  id=\"org-website\"\n                  type=\"url\"\n                  value={organization?.website || ''}\n                  onChange={(e) => setOrganization(prev => prev ? { ...prev, website: e.target.value } : null)}\n                  placeholder=\"https://www.example.com\"\n                />\n              </div>\n            </div>\n\n            <div className=\"space-y-md\">\n              <div className=\"space-y-xs\">\n                <Label htmlFor=\"org-industry\">Industry</Label>\n                <Select\n                  value={organization?.industry || ''}\n                  onChange={(e) => setOrganization(prev => prev ? { ...prev, industry: value } : null)}\n                >\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Select industry\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"technology\">Technology</SelectItem>\n                    <SelectItem value=\"healthcare\">Healthcare</SelectItem>\n                    <SelectItem value=\"finance\">Finance</SelectItem>\n                    <SelectItem value=\"education\">Education</SelectItem>\n                    <SelectItem value=\"manufacturing\">Manufacturing</SelectItem>\n                    <SelectItem value=\"retail\">Retail</SelectItem>\n                    <SelectItem value=\"consulting\">Consulting</SelectItem>\n                    <SelectItem value=\"other\">Other</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div className=\"space-y-xs\">\n                <Label htmlFor=\"org-size\">Organization Size</Label>\n                <Select\n                  value={organization?.size || ''}\n                  onChange={(e) => setOrganization(prev => prev ? { ...prev, size: value } : null)}\n                >\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Select size\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"1-10\">1-10 employees</SelectItem>\n                    <SelectItem value=\"11-50\">11-50 employees</SelectItem>\n                    <SelectItem value=\"51-200\">51-200 employees</SelectItem>\n                    <SelectItem value=\"201-1000\">201-1000 employees</SelectItem>\n                    <SelectItem value=\"1000+\">1000+ employees</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div className=\"space-y-xs\">\n                <Label>Organization Logo</Label>\n                <div className=\"flex items-center gap-md\">\n                  <div className=\"w-component-md h-component-md bg-muted rounded-lg flex items-center justify-center\">\n                    {organization?.logo_url ? (\n                      <img src={organization.logo_url} alt=\"Logo\" className=\"w-full h-full object-cover rounded-lg\" />\n                    ) : (\n                      <Building className=\"h-icon-lg w-icon-lg text-muted-foreground\" />\n                    )}\n                  </div>\n                  <Button variant=\"outline\" size=\"sm\">\n                    <Upload className=\"h-icon-xs w-icon-xs mr-2\" />\n                    Upload Logo\n                  </Button>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          <Separator />\n\n          <div className=\"flex justify-end\">\n            <Button onClick={handleSaveOrganization} disabled={saving}>\n              <Building className=\"h-icon-xs w-icon-xs mr-2\" />\n              {saving ? 'Saving...' : 'Save Organization'}\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Domain Management */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-xs\">\n            <Globe className=\"h-icon-sm w-icon-sm\" />\n            Domain Management\n          </CardTitle>\n          <p className=\"text-sm text-muted-foreground\">\n            Manage verified domains for your organization. Verified domains allow you to invite users with matching email addresses.\n          </p>\n        </CardHeader>\n        <CardContent className=\"space-y-md\">\n          {/* Add Domain */}\n          <div className=\"flex gap-md\">\n            <div className=\"flex-1\">\n              <Input\n                placeholder=\"example.com\"\n                value={newDomain}\n                onChange={(e) => setNewDomain(e.target.value)}\n                onKeyPress={(e) => e.key === 'Enter' && handleAddDomain()}\n              />\n            </div>\n            <Button onClick={handleAddDomain} disabled={!newDomain.trim()}>\n              Add Domain\n            </Button>\n          </div>\n\n          {/* Domains List */}\n          <div className=\"space-y-md\">\n            {domains.length === 0 ? (\n              <div className=\"text-center py-xl text-muted-foreground\">\n                <Globe className=\"mx-auto h-icon-2xl w-icon-2xl mb-4\" />\n                <p>No domains configured</p>\n                <p className=\"text-sm\">Add a domain above to get started</p>\n              </div>\n            ) : (\n              domains.map((domain) => (\n                <div key={domain.id} className=\"flex items-center justify-between p-md border rounded-lg\">\n                  <div className=\"flex items-center gap-sm\">\n                    <div className={`p-xs rounded-full ${\n                      domain.status === 'verified'\n                        ? 'bg-green-100 dark:bg-green-900'\n                        : domain.status === 'pending'\n                        ? 'bg-yellow-100 dark:bg-yellow-900'\n                        : 'bg-red-100 dark:bg-red-900'\n                    }`}>\n                      {domain.status === 'verified' ? (\n                        <CheckCircle className=\"h-icon-xs w-icon-xs text-green-600 dark:text-green-400\" />\n                      ) : domain.status === 'pending' ? (\n                        <AlertTriangle className=\"h-icon-xs w-icon-xs text-yellow-600 dark:text-yellow-400\" />\n                      ) : (\n                        <AlertTriangle className=\"h-icon-xs w-icon-xs text-red-600 dark:text-red-400\" />\n                      )}\n                    </div>\n                    <div>\n                      <p className=\"font-medium\">{domain.domain}</p>\n                      <p className=\"text-sm text-muted-foreground\">\n                        Status: {domain.status}\n                        {domain.verified_at && ` • Verified ${new Date(domain.verified_at).toLocaleDateString()}`}\n                      </p>\n                    </div>\n                  </div>\n\n                  <div className=\"flex items-center gap-xs\">\n                    <Badge variant={\n                      domain.status === 'verified' ? 'default' :\n                      domain.status === 'pending' ? 'secondary' : 'destructive'\n                    }>\n                      {domain.status}\n                    </Badge>\n\n                    {domain.status === 'pending' && (\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => handleVerifyDomain(domain.id)}\n                      >\n                        Verify\n                      </Button>\n                    )}\n\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={() => handleRemoveDomain(domain.id)}\n                      className=\"text-red-600 hover:text-red-700 hover:bg-red-50\"\n                    >\n                      <Trash2 className=\"h-icon-xs w-icon-xs\" />\n                    </Button>\n                  </div>\n                </div>\n              ))\n            )}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Demo Data Management */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-xs\">\n            <Trash2 className=\"h-icon-sm w-icon-sm\" />\n            Demo Data Management\n          </CardTitle>\n          <p className=\"text-sm text-muted-foreground\">\n            Remove demo data that was pre-populated in your organization.\n          </p>\n        </CardHeader>\n        <CardContent className=\"space-y-md\">\n          <Alert>\n            <AlertTriangle className=\"h-icon-xs w-icon-xs\" />\n            <AlertDescription>\n              This action will permanently remove all demo data from your organization. This cannot be undone.\n            </AlertDescription>\n          </Alert>\n\n          {!showDemoData ? (\n            <Button\n              variant=\"outline\"\n              onClick={() => setShowDemoData(true)}\n              className=\"text-red-600 border-red-200 hover:bg-red-50\"\n            >\n              <Trash2 className=\"h-icon-xs w-icon-xs mr-2\" />\n              Remove Demo Data\n            </Button>\n          ) : (\n            <div className=\"space-y-md\">\n              <p className=\"text-sm text-muted-foreground\">\n                Are you sure you want to remove all demo data? This will delete sample projects, users, and data.\n              </p>\n              <div className=\"flex gap-sm\">\n                <Button\n                  variant=\"destructive\"\n                  onClick={handleRemoveDemoData}\n                >\n                  <Trash2 className=\"h-icon-xs w-icon-xs mr-2\" />\n                  Yes, Remove Demo Data\n                </Button>\n                <Button\n                  variant=\"outline\"\n                  onClick={() => setShowDemoData(false)}\n                >\n                  Cancel\n                </Button>\n              </div>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Additional Settings */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-xs\">\n            <SettingsIcon className=\"h-icon-sm w-icon-sm\" />\n            Additional Settings\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-md\">\n            <Button variant=\"outline\" className=\"justify-start\">\n              <Building className=\"h-icon-xs w-icon-xs mr-2\" />\n              Export Organization Data\n            </Button>\n            <Button variant=\"outline\" className=\"justify-start\">\n              <SettingsIcon className=\"h-icon-xs w-icon-xs mr-2\" />\n              Advanced Settings\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/settings/components/PermissionsSettings.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/settings/components/SecuritySettings.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'policies'. Either include it or remove the dependency array. You can also do a functional update 'setPolicies(p => ...)' if you only need 'policies' in the 'setPolicies' call.","line":89,"column":6,"nodeType":"ArrayExpression","endLine":89,"endColumn":23,"suggestions":[{"desc":"Update the dependencies array to be: [orgId, policies, supabase]","fix":{"range":[2228,2245],"text":"[orgId, policies, supabase]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useState, useEffect } from 'react';\nimport { Shield, Lock, Eye, AlertTriangle, Clock, Users, Settings as SettingsIcon } from \"lucide-react\";\nimport { createBrowserClient } from '@ghxstship/auth';\nimport {\n  Card,\n  CardContent,\n  CardHeader,\n  CardTitle,\n  Button,\n  Input,\n  Label,\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n  Switch,\n  Separator,\n  Badge,\n  Alert,\n  AlertDescription,\n  useToast\n} from '@ghxstship/ui';\n\ninterface SecuritySettingsProps {\n  userId: string;\n  orgId: string;\n}\n\ninterface SecurityPolicies {\n  passwordMinLength: number;\n  passwordRequireUppercase: boolean;\n  passwordRequireLowercase: boolean;\n  passwordRequireNumbers: boolean;\n  passwordRequireSymbols: boolean;\n  passwordMaxAge: number;\n  sessionTimeout: number;\n  loginAttemptsMax: number;\n  lockoutDuration: number;\n  requireTwoFactor: boolean;\n  ipWhitelist: string[];\n}\n\nexport default function SecuritySettings({ userId, orgId }: SecuritySettingsProps) {\n  const [loading, setLoading] = useState(true);\n  const [saving, setSaving] = useState(false);\n  const [policies, setPolicies] = useState<SecurityPolicies>({\n    passwordMinLength: 8,\n    passwordRequireUppercase: true,\n    passwordRequireLowercase: true,\n    passwordRequireNumbers: true,\n    passwordRequireSymbols: false,\n    passwordMaxAge: 90,\n    sessionTimeout: 480,\n    loginAttemptsMax: 5,\n    lockoutDuration: 30,\n    requireTwoFactor: false,\n    ipWhitelist: []\n  });\n\n  const toast = useToast();\n  const supabase = createBrowserClient();\n\n  useEffect(() => {\n    const loadSecurityPolicies = async () => {\n      try {\n        // Load organization security policies\n        const { data, error } = await supabase\n          .from('organization_settings')\n          .select('security_policies')\n          .eq('organization_id', orgId)\n          .single();\n\n        if (error && error.code !== 'PGRST116') throw error;\n\n        if (data?.security_policies) {\n          setPolicies({ ...policies, ...data.security_policies });\n        }\n      } catch (error) {\n        console.error('Error loading security policies:', error);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    loadSecurityPolicies();\n  }, [orgId, supabase]);\n\n  const handleSavePolicies = async () => {\n    setSaving(true);\n    try {\n      const { error } = await supabase\n        .from('organization_settings')\n        .upsert({\n          organization_id: orgId,\n          security_policies: policies,\n          updated_at: new Date().toISOString(),\n          updated_by: userId\n        });\n\n      if (error) throw error;\n\n      toast({\n        title: 'Success',\n        description: 'Security policies updated successfully'\n      });\n    } catch (error) {\n      console.error('Error saving security policies:', error);\n      toast({\n        title: 'Error',\n        description: 'Failed to update security policies',\n        variant: 'destructive'\n      });\n    } finally {\n      setSaving(false);\n    }\n  };\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center p-xl\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-icon-lg w-icon-lg border-b-2 border-primary mx-auto\"></div>\n          <p className=\"mt-2 text-sm text-muted-foreground\">Loading security settings...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-lg\">\n      {/* Security Overview */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-xs\">\n            <Shield className=\"h-icon-sm w-icon-sm\" />\n            Security Overview\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-md\">\n            <div className=\"flex items-center gap-sm p-sm bg-green-50 dark:bg-green-950 rounded-lg\">\n              <div className=\"p-xs bg-green-100 dark:bg-green-900 rounded-full\">\n                <Lock className=\"h-icon-xs w-icon-xs text-green-600 dark:text-green-400\" />\n              </div>\n              <div>\n                <p className=\"font-medium text-green-900 dark:text-green-100\">Password Policy</p>\n                <p className=\"text-sm text-green-700 dark:text-green-300\">\n                  {policies.passwordMinLength} chars minimum\n                </p>\n              </div>\n            </div>\n\n            <div className=\"flex items-center gap-sm p-sm bg-blue-50 dark:bg-blue-950 rounded-lg\">\n              <div className=\"p-xs bg-blue-100 dark:bg-blue-900 rounded-full\">\n                <Clock className=\"h-icon-xs w-icon-xs text-blue-600 dark:text-blue-400\" />\n              </div>\n              <div>\n                <p className=\"font-medium text-blue-900 dark:text-blue-100\">Session Timeout</p>\n                <p className=\"text-sm text-blue-700 dark:text-blue-300\">\n                  {policies.sessionTimeout} minutes\n                </p>\n              </div>\n            </div>\n\n            <div className=\"flex items-center gap-sm p-sm bg-orange-50 dark:bg-orange-950 rounded-lg\">\n              <div className=\"p-xs bg-orange-100 dark:bg-orange-900 rounded-full\">\n                <AlertTriangle className=\"h-icon-xs w-icon-xs text-orange-600 dark:text-orange-400\" />\n              </div>\n              <div>\n                <p className=\"font-medium text-orange-900 dark:text-orange-100\">Login Attempts</p>\n                <p className=\"text-sm text-orange-700 dark:text-orange-300\">\n                  Max {policies.loginAttemptsMax} attempts\n                </p>\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Password Policy */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-xs\">\n            <Lock className=\"h-icon-sm w-icon-sm\" />\n            Password Policy\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-lg\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-lg\">\n            <div className=\"space-y-md\">\n              <div className=\"space-y-xs\">\n                <Label htmlFor=\"min-length\">Minimum Length</Label>\n                <Select\n                  value={policies.passwordMinLength.toString()}\n                  onChange={(e) => setPolicies(prev => ({ ...prev, passwordMinLength: parseInt(value) }))}\n                >\n                  <SelectTrigger>\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"8\">8 characters</SelectItem>\n                    <SelectItem value=\"10\">10 characters</SelectItem>\n                    <SelectItem value=\"12\">12 characters</SelectItem>\n                    <SelectItem value=\"16\">16 characters</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div className=\"space-y-xs\">\n                <Label htmlFor=\"max-age\">Password Expiry (days)</Label>\n                <Select\n                  value={policies.passwordMaxAge.toString()}\n                  onChange={(e) => setPolicies(prev => ({ ...prev, passwordMaxAge: parseInt(value) }))}\n                >\n                  <SelectTrigger>\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"30\">30 days</SelectItem>\n                    <SelectItem value=\"60\">60 days</SelectItem>\n                    <SelectItem value=\"90\">90 days</SelectItem>\n                    <SelectItem value=\"180\">180 days</SelectItem>\n                    <SelectItem value=\"365\">1 year</SelectItem>\n                    <SelectItem value=\"0\">Never expires</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n\n            <div className=\"space-y-md\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"space-y-0.5\">\n                  <Label>Require Uppercase</Label>\n                  <p className=\"text-sm text-muted-foreground\">A-Z characters required</p>\n                </div>\n                <Switch\n                  checked={policies.passwordRequireUppercase}\n                  onCheckedChange={(checked) => setPolicies(prev => ({ ...prev, passwordRequireUppercase: checked }))}\n                />\n              </div>\n\n              <div className=\"flex items-center justify-between\">\n                <div className=\"space-y-0.5\">\n                  <Label>Require Lowercase</Label>\n                  <p className=\"text-sm text-muted-foreground\">a-z characters required</p>\n                </div>\n                <Switch\n                  checked={policies.passwordRequireLowercase}\n                  onCheckedChange={(checked) => setPolicies(prev => ({ ...prev, passwordRequireLowercase: checked }))}\n                />\n              </div>\n\n              <div className=\"flex items-center justify-between\">\n                <div className=\"space-y-0.5\">\n                  <Label>Require Numbers</Label>\n                  <p className=\"text-sm text-muted-foreground\">0-9 digits required</p>\n                </div>\n                <Switch\n                  checked={policies.passwordRequireNumbers}\n                  onCheckedChange={(checked) => setPolicies(prev => ({ ...prev, passwordRequireNumbers: checked }))}\n                />\n              </div>\n\n              <div className=\"flex items-center justify-between\">\n                <div className=\"space-y-0.5\">\n                  <Label>Require Symbols</Label>\n                  <p className=\"text-sm text-muted-foreground\">Special characters required</p>\n                </div>\n                <Switch\n                  checked={policies.passwordRequireSymbols}\n                  onCheckedChange={(checked) => setPolicies(prev => ({ ...prev, passwordRequireSymbols: checked }))}\n                />\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Session Management */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-xs\">\n            <Clock className=\"h-icon-sm w-icon-sm\" />\n            Session Management\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-lg\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-lg\">\n            <div className=\"space-y-xs\">\n              <Label htmlFor=\"session-timeout\">Session Timeout (minutes)</Label>\n              <Select\n                value={policies.sessionTimeout.toString()}\n                onChange={(e) => setPolicies(prev => ({ ...prev, sessionTimeout: parseInt(value) }))}\n              >\n                <SelectTrigger>\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"60\">1 hour</SelectItem>\n                  <SelectItem value=\"240\">4 hours</SelectItem>\n                  <SelectItem value=\"480\">8 hours</SelectItem>\n                  <SelectItem value=\"720\">12 hours</SelectItem>\n                  <SelectItem value=\"1440\">24 hours</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div className=\"space-y-xs\">\n              <Label htmlFor=\"login-attempts\">Max Login Attempts</Label>\n              <Select\n                value={policies.loginAttemptsMax.toString()}\n                onChange={(e) => setPolicies(prev => ({ ...prev, loginAttemptsMax: parseInt(value) }))}\n              >\n                <SelectTrigger>\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"3\">3 attempts</SelectItem>\n                  <SelectItem value=\"5\">5 attempts</SelectItem>\n                  <SelectItem value=\"10\">10 attempts</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n\n          <div className=\"space-y-xs\">\n            <Label htmlFor=\"lockout-duration\">Account Lockout Duration (minutes)</Label>\n            <Select\n              value={policies.lockoutDuration.toString()}\n              onChange={(e) => setPolicies(prev => ({ ...prev, lockoutDuration: parseInt(value) }))}\n            >\n              <SelectTrigger>\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"15\">15 minutes</SelectItem>\n                <SelectItem value=\"30\">30 minutes</SelectItem>\n                <SelectItem value=\"60\">1 hour</SelectItem>\n                <SelectItem value=\"240\">4 hours</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Two-Factor Authentication */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-xs\">\n            <Shield className=\"h-icon-sm w-icon-sm\" />\n            Two-Factor Authentication\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-md\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"space-y-0.5\">\n              <Label>Require 2FA for All Users</Label>\n              <p className=\"text-sm text-muted-foreground\">\n                Force two-factor authentication for all organization members\n              </p>\n            </div>\n            <Switch\n              checked={policies.requireTwoFactor}\n              onCheckedChange={(checked) => setPolicies(prev => ({ ...prev, requireTwoFactor: checked }))}\n            />\n          </div>\n\n          {policies.requireTwoFactor && (\n            <Alert>\n              <Shield className=\"h-icon-xs w-icon-xs\" />\n              <AlertDescription>\n                Two-factor authentication is required for all users. Existing users will be prompted to set it up on their next login.\n              </AlertDescription>\n            </Alert>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* IP Whitelist */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-xs\">\n            <Eye className=\"h-icon-sm w-icon-sm\" />\n            IP Access Control\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-md\">\n          <div className=\"space-y-xs\">\n            <Label>Allowed IP Addresses</Label>\n            <p className=\"text-sm text-muted-foreground\">\n              Restrict access to specific IP addresses or ranges. Leave empty to allow all IPs.\n            </p>\n            <Input\n              placeholder=\"192.168.1.0/24, 10.0.0.1\"\n              value={policies.ipWhitelist.join(', ')}\n              onChange={(e) => setPolicies(prev => ({\n                ...prev,\n                ipWhitelist: e.target.value.split(',').map(ip => ip.trim()).filter(ip => ip)\n              }))}\n            />\n          </div>\n\n          {policies.ipWhitelist.length > 0 && (\n            <div className=\"flex flex-wrap gap-xs\">\n              {policies.ipWhitelist.map((ip, index) => (\n                <Badge key={index} variant=\"secondary\">\n                  {ip}\n                </Badge>\n              ))}\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Audit Settings */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-xs\">\n            <SettingsIcon className=\"h-icon-sm w-icon-sm\" />\n            Audit & Compliance\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-md\">\n            <p className=\"text-sm text-muted-foreground\">\n              Security events and user activities are automatically logged for compliance purposes.\n            </p>\n            <Button variant=\"outline\" size=\"sm\">\n              View Security Logs\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Save Button */}\n      <div className=\"flex justify-end\">\n        <Button onClick={handleSavePolicies} disabled={saving}>\n          <Shield className=\"h-icon-xs w-icon-xs mr-2\" />\n          {saving ? 'Saving Policies...' : 'Save Security Settings'}\n        </Button>\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/settings/components/TeamsSettings.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/settings/create/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/settings/drawers/CreateSettingsDrawer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/settings/drawers/EditSettingsDrawer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/settings/integrations/IntegrationsSettingsClient.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/settings/integrations/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/settings/lib/field-config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/settings/lib/settings-service.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/settings/notifications/NotificationsSettingsClient.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/settings/notifications/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/settings/organization/RemoveDemoClient.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/settings/organization/domains/DomainsClient.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchDomains'. Either include it or remove the dependency array.","line":26,"column":40,"nodeType":"ArrayExpression","endLine":26,"endColumn":47,"suggestions":[{"desc":"Update the dependencies array to be: [fetchDomains, orgId]","fix":{"range":[1061,1068],"text":"[fetchDomains, orgId]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport { useEffect, useState } from 'react';\nimport { useRouter, useSearchParams } from 'next/navigation';\nimport { Button } from '@ghxstship/ui';\n\ntype OrgDomain = { id: string; domain: string; status: string; created_at: string };\n\nexport default function DomainsClient({ orgId, role, suggest }: { orgId: string; role?: string; suggest?: string }) {\n  const [domains, setDomains] = useState<OrgDomain[]>([]);\n  const [newDomain, setNewDomain] = useState(suggest ?? '');\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const canManage = role === 'owner' || role === 'admin';\n  const router = useRouter();\n  const searchParams = useSearchParams();\n\n  async function fetchDomains() {\n    setError(null);\n    const res = await fetch(`/api/organizations/${orgId}/domains`, { cache: 'no-store' });\n    const data = await res.json();\n    if (!res.ok) return setError(data?.error || 'Failed to load domains');\n    setDomains(data.domains || []);\n  }\n\n  useEffect(() => { fetchDomains(); }, [orgId]);\n\n  async function addDomain() {\n    if (!newDomain) return;\n    setLoading(true); setError(null);\n    const optimistic: OrgDomain = { id: `tmp-${Date.now()}`, domain: newDomain, status: 'pending', created_at: new Date().toISOString() };\n    setDomains((prev: any) => [optimistic, ...prev]);\n    try {\n      const res = await fetch(`/api/organizations/${orgId}/domains`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ domain: newDomain })\n      });\n      const data = await res.json();\n      if (!res.ok) throw new Error(data?.error || 'Failed to add');\n      setNewDomain('');\n      await fetchDomains();\n      // If this add came from a suggest param, clear it from the URL to avoid repeated focus/prefill\n      if (searchParams.get('suggest')) {\n        router.replace('/settings/organization/domains');\n      }\n    } catch (e) {\n      setError(e?.message || 'Unknown error');\n      setDomains((prev: OrgDomain[]) => prev.filter((d: OrgDomain) => d.id !== optimistic.id));\n    } finally {\n      setLoading(false);\n    }\n  }\n\n  async function removeDomain(id: string) {\n    setLoading(true); setError(null);\n    const prev = domains;\n    setDomains((cur: OrgDomain[]) => cur.filter((d: OrgDomain) => d.id !== id));\n    try {\n      const res = await fetch(`/api/organizations/${orgId}/domains`, {\n        method: 'DELETE',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ id })\n      });\n      const data = await res.json();\n      if (!res.ok) throw new Error(data?.error || 'Failed to delete');\n      // success: no-op, optimistic state already removed\n    } catch (e) {\n      setError(e?.message || 'Unknown error');\n      setDomains((prev: any) => prev);\n    } finally {\n      setLoading(false);\n    }\n  }\n\n  return (\n    <div className=\"stack-md\">\n      {canManage ? (\n        <div className=\"flex gap-sm\">\n          <Button onClick={addDomain} disabled={loading || !newDomain}>Add</Button>\n        </div>\n      ) : (\n        <div className=\"text-body-sm color-foreground/60\">Only owners and admins can manage organization domains.</div>\n      )}\n      {error ? <div className=\"text-body-sm color-destructive\">{error}</div> : null}\n      <div className=\"rounded-md border\">\n        <table className=\"w-full text-body-sm\">\n          <thead>\n            <tr className=\"bg-secondary/40\">\n              <th className=\" px-md py-sm text-left\">Domain</th>\n              <th className=\" px-md py-sm text-left\">Status</th>\n              <th className=\" px-md py-sm text-right\">Actions</th>\n            </tr>\n          </thead>\n          <tbody>\n            {domains.map((d: any) => (\n              <tr key={d.id} className=\"border-t\">\n                <td className=\" px-md py-sm\">{d.domain}</td>\n                <td className=\" px-md py-sm\">\n                  <span className={\n                    `inline-flex items-center rounded-full px-sm py-0.5 text-body-sm ` +\n                    (d.status === 'active' ? 'bg-success/10 color-success' :\n                     d.status === 'pending' ? 'bg-warning/10 color-warning' :\n                     'bg-secondary/10 color-muted')\n                  }>\n                    {d.status}\n                  </span>\n                </td>\n                <td className=\" px-md py-sm text-right\">\n                  <Button onClick={() => removeDomain(d.id)} disabled={loading || !canManage}>Remove</Button>\n                </td>\n              </tr>\n            ))}\n            {domains.length === 0 ? (\n              <tr>\n                <td className=\" px-md py-lg text-center color-foreground/60\" colSpan={3}>No domains. Add your company email domain(s) to allow unlimited seats on Team plans.</td>\n              </tr>\n            ) : null}\n          </tbody>\n        </table>\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/settings/organization/domains/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/settings/organization/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/settings/overview/SettingsClient.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/settings/overview/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/settings/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/settings/permissions/PermissionsSettingsClient.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'load'. Either include it or remove the dependency array.","line":118,"column":5,"nodeType":"ArrayExpression","endLine":118,"endColumn":7,"suggestions":[{"desc":"Update the dependencies array to be: [load]","fix":{"range":[3422,3424],"text":"[load]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\nimport { User, FileText, Settings, Award, Calendar, TrendingUp, Activity, Clock, Plus, Search, Play, Trash2 } from \"lucide-react\";\nimport { useEffect, useMemo, useState } from 'react';\nimport {\n Badge,\n Button,\n Card,\n CardContent,\n CardHeader,\n CardTitle,\n Checkbox,\n Input,\n Label,\n Modal,\n Select,\n SelectContent,\n SelectItem,\n SelectTrigger,\n SelectValue,\n Skeleton,\n Textarea,\n Toggle,\n useToastContext\n} from '@ghxstship/ui';\nimport {\n createRole,\n deleteRole,\n fetchRoles,\n RoleRecord,\n updateRole\n} from '@/lib/services/settingsRolesClient';\nimport {\n fetchOrganizationMembers,\n OrganizationMember\n} from '@/lib/services/settingsOrganizationClient';\n\ninterface PermissionState {\n [resource: string]: Set<string>;\n}\n\nconst ROLE_SCOPE_OPTIONS = [\n { value: 'owner', label: 'Owners' },\n { value: 'admin', label: 'Admins' },\n { value: 'manager', label: 'Managers' },\n { value: 'contributor', label: 'Contributors' },\n { value: 'viewer', label: 'Viewers' },\n];\n\nfunction buildPermissionState(permissions: Record<string, string[]>): PermissionState {\n const state: PermissionState = {};\n Object.entries(permissions || {}).forEach(([resource, actions]) => {\n state[resource] = new Set(actions);\n });\n return state;\n}\n\nfunction exportPermissionState(state: PermissionState): Record<string, string[]> {\n return Object.entries(state).reduce<Record<string, string[]>((acc, [resource, actions]) => {\n if (actions.size > 0) {\n acc[resource] = Array.from(actions).sort();\n }\n return acc;\n }, {});\n}\n\nfunction mergeResourceMatrix(roles: RoleRecord[]): Record<string, Set<string>> {\n const matrix: Record<string, Set<string>> = {};\n roles.forEach((role) => {\n Object.entries(role.permissions || {}).forEach(([resource, actions]) => {\n if (!matrix[resource]) {\n matrix[resource] = new Set();\n }\n actions.forEach((action) => matrix[resource].add(action));\n });\n });\n return matrix;\n}\n\nconst DEFAULT_ROLE_NAME = 'Untitled Role';\n\nexport default function PermissionsSettingsClient() {\n const { toast } = useToastContext();\n const [roles, setRoles] = useState<RoleRecord[]>([]);\n const [members, setMembers] = useState<OrganizationMember[]>([]);\n const [loading, setLoading] = useState<boolean>(true);\n const [saving, setSaving] = useState<boolean>(false);\n const [editingRole, setEditingRole] = useState<RoleRecord | null>(null);\n const [deleteRoleId, setDeleteRoleId] = useState<RoleRecord | null>(null);\n const [createModalOpen, setCreateModalOpen] = useState<boolean>(false);\n const [selectedMember, setSelectedMember] = useState<string>('');\n\n const [roleName, setRoleName] = useState<string>('');\n const [roleDescription, setRoleDescription] = useState<string>('');\n const [permissionState, setPermissionState] = useState<PermissionState>({});\n\n const matrix = useMemo(() => mergeResourceMatrix(roles), [roles]);\n const resources = useMemo(() => Object.keys(matrix).sort(), [matrix]);\n\n const load = async () => {\n try {\n setLoading(true);\n const [rolesResponse, membersResponse] = await Promise.all([\n fetchRoles({ includeSystem: true }),\n fetchOrganizationMembers(),\n ]);\n setRoles(rolesResponse.roles);\n setMembers(membersResponse.members);\n } catch (error) {\n const message = error instanceof Error ? error.message : 'Unable to load permissions data';\n toast.error('Failed to load permissions', undefined, { description: message });\n } finally {\n setLoading(false);\n }\n };\n\n useEffect(() => {\n void load();\n }, []);\n\n const resetForm = () => {\n setRoleName('');\n setRoleDescription('');\n setPermissionState({});\n setSelectedMember('');\n setEditingRole(null);\n };\n\n const openCreateModal = () => {\n resetForm();\n setCreateModalOpen(true);\n };\n\n const openEditModal = (role: RoleRecord) => {\n setEditingRole(role);\n setRoleName(role.name || DEFAULT_ROLE_NAME);\n setRoleDescription(role.description ?? '');\n setPermissionState(buildPermissionState(role.permissions || {}));\n setSelectedMember('');\n setCreateModalOpen(true);\n };\n\n const togglePermission = (resource: string, action: string, checked: boolean) => {\n setPermissionState((prev: unknown) => {\n const next = { ...prev };\n if (!next[resource]) {\n next[resource] = new Set();\n }\n if (checked) {\n next[resource].add(action);\n } else {\n next[resource].delete(action);\n }\n return next;\n });\n };\n\n const handleSubmitRole = async () => {\n try {\n setSaving(true);\n const payload = {\n name: roleName || DEFAULT_ROLE_NAME,\n description: roleDescription || undefined,\n permissions: exportPermissionState(permissionState)\n };\n\n if (editingRole) {\n await updateRole({ id: editingRole.id, ...payload });\n toast.success('Role updated');\n } else {\n await createRole(payload);\n toast.success('Role created');\n }\n\n setCreateModalOpen(false);\n resetForm();\n await load();\n } catch (error) {\n const message = error instanceof Error ? error.message : 'Unable to save role';\n toast.error('Save failed', undefined, { description: message });\n } finally {\n setSaving(false);\n }\n };\n\n const handleDeleteRole = async () => {\n if (!deleteRoleId) return;\n try {\n setSaving(true);\n await deleteRole(deleteRoleId.id);\n toast.success('Role deleted');\n setDeleteRoleId(null);\n await load();\n } catch (error) {\n const message = error instanceof Error ? error.message : 'Unable to delete role';\n toast.error('Delete failed', undefined, { description: message });\n } finally {\n setSaving(false);\n }\n };\n\n const selectedMemberName = useMemo(() => {\n if (!selectedMember) return null;\n const member = members.find((m) => m.userId === selectedMember);\n return member?.fullName || member?.email || selectedMember;\n }, [members, selectedMember]);\n\n const renderRoleCard = (role: RoleRecord) => {\n const isSystem = role.isSystem;\n return (\n <Card key={role.id} className=\"border\">\n <CardHeader className=\"flex flex-col gap-sm md:flex-row md:items-start md:justify-between\">\n <div className=\"space-y-xs\">\n <div className=\"flex items-center gap-sm\">\n <CardTitle>{role.name}</CardTitle>\n {isSystem ? (\n <Badge variant=\"secondary\">System</Badge>\n ) : (\n <Badge variant=\"outline\">Custom</Badge>\n )}\n </div>\n {role.description ? (\n <p className=\"text-body-sm text-muted-foreground\">{role.description}</p>\n ) : null}\n <p className=\"text-body-xs text-muted-foreground\">\n Assigned Users: {role.assignedUsers ?? 0}\n </p>\n </div>\n <div className=\"flex gap-sm\">\n <Button\n variant=\"outline\"\n onClick={() => openEditModal(role)}\n disabled={isSystem}\n >\n Edit Role\n </Button>\n <Button\n variant=\"outline\"\n onClick={() => setDeleteRoleId(role)}\n disabled={isSystem || (role.assignedUsers ?? 0) > 0}\n >\n Delete\n </Button>\n </div>\n </CardHeader>\n <CardContent>\n <div className=\"overflow-x-auto\">\n <table className=\"min-w-full border-collapse text-left text-body-sm\">\n <thead>\n <tr>\n <th className=\"border-b border-border px-sm py-xs\">Resource</th>\n <th className=\"border-b border-border px-sm py-xs\">Actions</th>\n </tr>\n </thead>\n <tbody>\n {Object.entries(role.permissions || {}).map(([resource, actions]) => (\n <tr key={resource}>\n <td className=\"border-b border-border px-sm py-xs align-top font-medium\">{resource}</td>\n <td className=\"border-b border-border px-sm py-xs align-top\">\n <div className=\"flex flex-wrap gap-xs\">\n {actions.map((action) => (\n <Badge key={`${resource}-${action}`} variant=\"outline\">\n {action}\n </Badge>\n ))}\n </div>\n </td>\n </tr>\n ))}\n {Object.keys(role.permissions || {}).length === 0 ? (\n <tr>\n <td colSpan={2} className=\"px-sm py-sm text-muted-foreground\">\n No explicit permissions. Role inherits default organization policy.\n </td>\n </tr>\n ) : null}\n </tbody>\n </table>\n </div>\n </CardContent>\n </Card>\n );\n };\n\n if (loading) {\n return (\n <div className=\"space-y-md\">\n <Skeleton className=\"h-icon-2xl w-container-xs\" />\n <div className=\"space-y-sm\">\n <Skeleton className=\"h-component-lg w-full\" />\n <Skeleton className=\"h-component-lg w-full\" />\n <Skeleton className=\"h-component-lg w-full\" />\n </div>\n </div>\n );\n }\n\n return (\n <div className=\"space-y-lg\">\n <Card>\n <CardHeader className=\"flex flex-col gap-sm md:flex-row md:items-center md:justify-between\">\n <div>\n <CardTitle>Role-Based Access Control</CardTitle>\n <p className=\"text-body-sm text-muted-foreground\">\n Manage system and custom roles across GHXSTSHIP. Custom roles let you tailor fine-grained permissions per resource.\n </p>\n </div>\n <Button onClick={openCreateModal}>Create Custom Role</Button>\n </CardHeader>\n </Card>\n\n <div className=\"space-y-md\">\n {roles.map(renderRoleCard)}\n {roles.length === 0 ? (\n <Card>\n <CardContent className=\"py-lg text-center text-body-sm text-muted-foreground\">\n No roles found. Create a custom role to get started.\n </CardContent>\n </Card>\n ) : null}\n </div>\n\n <Modal\n open={createModalOpen}\n onClose={() => {\n setCreateModalOpen(false);\n resetForm();\n }}\n title={editingRole ? 'Edit Custom Role' : 'Create Custom Role'}\n description=\"Select the permissions this role should grant across GHXSTSHIP modules.\"\n >\n <div className=\"space-y-lg\">\n <div className=\"space-y-sm\">\n <Label htmlFor=\"role-name\">Role Name</Label>\n <Input\n \n value={roleName}\n onChange={(event) => setRoleName(event.target.value)}\n placeholder=\"e.g. Production Supervisor\"\n />\n </div>\n <div className=\"space-y-sm\">\n <Label htmlFor=\"role-description\">Description</Label>\n <Textarea\n \n rows={3}\n value={roleDescription}\n onChange={(event) => setRoleDescription(event.target.value)}\n placeholder=\"Describe when to assign this role.\"\n />\n </div>\n\n <div className=\"space-y-md\">\n <div className=\"flex items-center justify-between\">\n <Label>Permissions</Label>\n <p className=\"text-body-xs text-muted-foreground\">\n Toggle actions per resource. Only checked actions will be granted.\n </p>\n </div>\n <div className=\"space-y-md\">\n {resources.length === 0 ? (\n <div className=\"rounded-md border border-dashed border-border px-md py-lg text-center text-body-sm text-muted-foreground\">\n No resource matrix detected yet. Create the role with a description first to define permissions.\n </div>\n ) : null}\n {resources.map((resource) => {\n const actions = Array.from(matrix[resource] ?? []).sort();\n return (\n <div key={resource} className=\"rounded-lg border p-md space-y-sm\">\n <div className=\"flex items-center justify-between\">\n <div className=\"flex items-center gap-sm\">\n <h3 className=\"font-medium capitalize\">{resource.replace(/_/g, ' ')}</h3>\n <Badge variant=\"outline\">{actions.length} actions</Badge>\n </div>\n <Toggle\n checked={(permissionState[resource]?.size || 0) === actions.length}\n onChange={(event) => {\n const checked = event.target.checked;\n setPermissionState((prev: unknown) => {\n const next = { ...prev };\n if (!next[resource]) {\n next[resource] = new Set();\n }\n if (checked) {\n actions.forEach((action) => next[resource].add(action));\n } else {\n next[resource].clear();\n }\n return next;\n });\n }}\n />\n </div>\n <div className=\"grid grid-cols-2 gap-sm md:grid-cols-3\">\n {actions.map((action) => {\n const checked = permissionState[resource]?.has(action) ?? false;\n return (\n <label key={`${resource}-${action}`} className=\"flex items-center gap-xs text-body-sm\">\n <Checkbox\n checked={checked}\n onChange={(event) => togglePermission(resource, action, event.target.checked)}\n />\n <span className=\"capitalize\">{action.replace(/_/g, ' ')}</span>\n </label>\n );\n })}\n </div>\n </div>\n );\n })}\n </div>\n </div>\n\n <div className=\"space-y-sm\">\n <Label htmlFor=\"member-preview\">Preview Assignment</Label>\n <Select value={selectedMember} onValueChange={setSelectedMember}>\n <SelectTrigger >\n <SelectValue placeholder=\"Select member to preview\" />\n </SelectTrigger>\n <SelectContent>\n {members.map((member) => (\n <SelectItem key={member.userId} value={member.userId}>\n {member.fullName || member.email || member.userId}\n </SelectItem>\n ))}\n </SelectContent>\n </Select>\n {selectedMemberName ? (\n <p className=\"text-body-xs text-muted-foreground\">\n Assigning <strong>{selectedMemberName}</strong> will immediately grant the checked actions.\n </p>\n ) : (\n <p className=\"text-body-xs text-muted-foreground\">\n Select a member to preview how this role would apply to them.\n </p>\n )}\n </div>\n\n <div className=\"flex justify-end gap-sm\">\n <Button\n variant=\"outline\"\n onClick={() => {\n setCreateModalOpen(false);\n resetForm();\n }}\n disabled={saving}\n >\n Cancel\n </Button>\n <Button onClick={handleSubmitRole} disabled={saving}>\n {saving ? 'Saving…' : editingRole ? 'Update Role' : 'Create Role'}\n </Button>\n </div>\n </div>\n </Modal>\n\n <Modal\n open={Boolean(deleteRoleId)}\n onClose={() => setDeleteRoleId(null)}\n title=\"Delete custom role?\"\n description=\"Deleting this role removes its permission grants. This cannot be undone.\"\n >\n <div className=\"space-y-md\">\n <p className=\"text-body-sm text-muted-foreground\">\n Role: <strong>{deleteRoleId?.name}</strong>\n </p>\n {deleteRoleId?.assignedUsers ? (\n <p className=\"text-body-xs text-muted-foreground\">\n This role is assigned to {deleteRoleId.assignedUsers} users. Reassign them before deletion.\n </p>\n ) : null}\n <div className=\"flex justify-end gap-sm\">\n <Button variant=\"outline\" onClick={() => setDeleteRoleId(null)} disabled={saving}>\n Cancel\n </Button>\n <Button variant=\"destructive\" onClick={handleDeleteRole} disabled={saving}>\n {saving ? 'Deleting…' : 'Delete Role'}\n </Button>\n </div>\n </div>\n </Modal>\n </div>\n );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/settings/permissions/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/settings/security/SecuritySettingsClient.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/settings/security/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/settings/teams/InviteMemberClient.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'fetchDomains', 'fetchInvites', and 'fetchUsage'. Either include them or remove the dependency array.","line":61,"column":6,"nodeType":"ArrayExpression","endLine":61,"endColumn":13,"suggestions":[{"desc":"Update the dependencies array to be: [fetchDomains, fetchInvites, fetchUsage, orgId]","fix":{"range":[2350,2357],"text":"[fetchDomains, fetchInvites, fetchUsage, orgId]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useEffect, useMemo, useState } from 'react';\nimport {\n  Button,\n  Input,\n  UnifiedInput\n} from \"@ghxstship/ui\";\nimport Link from 'next/link';\n\nconst ROLES = ['viewer', 'contributor', 'manager', 'admin'] as const;\n\ntype Invite = { id: string; email: string; role: string; status: string; created_at: string };\n\ntype Props = { orgId: string; role?: string };\n\nexport default function InviteMemberClient({ orgId, role }: Props) {\n  const canManage = role === 'owner' || role === 'admin';\n  const [email, setEmail] = useState('');\n  const [inviteRole, setInviteRole] = useState<typeof ROLES[number]>('contributor');\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [result, setResult] = useState<string | null>(null);\n  const [invites, setInvites] = useState<Invite[]>([]);\n  const [usage, setUsage] = useState<{ seat_policy: string; seats_limit: number | null; active_count: number } | null>(null);\n  const [domains, setDomains] = useState<Array<{ id: string; domain: string; status: string }>>([]);\n  const [bulkText, setBulkText] = useState('');\n  const [bulkRole, setBulkRole] = useState<typeof ROLES[number]>('contributor');\n\n  const validEmail = useMemo(() => /.+@.+\\..+/.test(email), [email]);\n  const emailDomain = useMemo(() => {\n    const m = email.toLowerCase().match(/@([a-z0-9.-]+\\.[a-z]{2})$/i);\n    return m ? m[1] : '';\n  }, [email]);\n  const domainRecord = useMemo(() => domains.find((d: any) => d.domain === emailDomain), [domains, emailDomain]);\n\n  async function fetchInvites() {\n    setError(null);\n    const res = await fetch(`/api/organizations/${orgId}/invites`, { cache: 'no-store' });\n    const data = await res.json();\n    if (!res.ok) return setError(data?.error || 'Failed to load invites');\n    setInvites(data.invites || []);\n  }\n\n  async function fetchUsage() {\n    const res = await fetch(`/api/organizations/${orgId}/memberships/usage`, { cache: 'no-store' });\n    const data = await res.json();\n    if (res.ok) setUsage(data);\n  }\n\n  async function fetchDomains() {\n    const res = await fetch(`/api/organizations/${orgId}/domains`, { cache: 'no-store' });\n    const data = await res.json();\n    if (res.ok) setDomains(data.domains || []);\n  }\n\n  useEffect(() => {\n    fetchInvites();\n    fetchUsage();\n    fetchDomains();\n  }, [orgId]);\n\n  async function submit(mode: 'invite' | 'addExisting') {\n    setLoading(true); setError(null); setResult(null);\n    try {\n      const res = await fetch(`/api/organizations/${orgId}/memberships`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ email, role: inviteRole, mode })\n      });\n      const data = await res.json();\n      if (!res.ok) throw new Error(data?.error || 'Request failed');\n      setResult(mode === 'invite' ? `Invite sent to ${data?.email || email}` : 'Member added');\n      setEmail('');\n      await Promise.all([fetchInvites(), fetchUsage()]);\n    } catch (e) {\n      setError(e?.message || 'Unknown error');\n    } finally {\n      setLoading(false);\n    }\n  }\n\n  async function resendInvite(id: string) {\n    setLoading(true); setError(null); setResult(null);\n    try {\n      const res = await fetch(`/api/organizations/${orgId}/invites`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ id, action: 'resend' })\n      });\n      const data = await res.json();\n      if (!res.ok) throw new Error(data?.error || 'Failed to resend');\n      setResult('Invite resent');\n    } catch (e) {\n      setError(e?.message || 'Unknown error');\n    } finally {\n      setLoading(false);\n    }\n  }\n\n  async function revokeInvite(id: string) {\n    setLoading(true); setError(null); setResult(null);\n    const prev = invites;\n    setInvites(prev.map((i: any) => (i.id === id ? { ...i, status: 'revoked' } : i)));\n    try {\n      const res = await fetch(`/api/organizations/${orgId}/invites`, {\n        method: 'DELETE',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ id })\n      });\n      const data = await res.json();\n      if (!res.ok) throw new Error(data?.error || 'Failed to revoke');\n    } catch (e) {\n      setError(e?.message || 'Unknown error');\n      setInvites((prev: any) => prev);\n    } finally {\n      setLoading(false);\n    }\n  }\n\n  function parseBulk(text: string): string[] {\n    return Array.from(new Set(\n      text\n        .split(/[\\s,;]+/)\n        .map((s: any) => s.trim())\n        .filter((s: any) => /.+@.+\\..+/.test(s))\n    ));\n  }\n\n  async function submitBulk() {\n    const emails = parseBulk(bulkText);\n    if (emails.length === 0) return;\n    setLoading(true); setError(null); setResult(null);\n    let success = 0; let failed = 0;\n    for (const e of emails) {\n      try {\n        const res = await fetch(`/api/organizations/${orgId}/memberships`, {\n          method: 'POST',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify({ email: e, role: bulkRole, mode: 'invite' })\n        });\n        if (!res.ok) failed++; else success++;\n      } catch {\n        failed++;\n      }\n    }\n    await Promise.all([fetchInvites(), fetchUsage()]);\n    setLoading(false);\n    setResult(`Bulk invites complete: ${success} sent, ${failed} failed`);\n  }\n\n  const renderUsageInfo = () => {\n    if (!usage) {\n      return <div className=\"color-foreground/60\">Loading seat usage…</div>;\n    }\n\n    if (usage.seat_policy === 'domain-unlimited') {\n      return (\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <span className=\"form-label\">Seat policy:</span> Domain-unlimited\n          </div>\n          <div className=\"color-foreground/70\">Active members: {usage.active_count}</div>\n        </div>\n      );\n    }\n\n    return (\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <span className=\"form-label\">Seat policy:</span> Per-user\n        </div>\n        <div className=\"color-foreground/70\">\n          Active members: {usage.active_count}\n          {usage.seats_limit != null && ` / ${usage.seats_limit}`}\n        </div>\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"stack-lg\">\n      <div className=\"rounded-md border bg-secondary/30 p-sm text-body-sm\">\n        {renderUsageInfo()}\n      </div>\n\n      <div className=\"stack-sm\">\n        <div className=\"text-body-sm color-foreground/70\">\n          Invite teammates by email. Team plan supports unlimited seats for emails matching your active organization domains.\n        </div>\n        <div className=\"flex flex-col gap-sm sm:flex-row sm:items-center\">\n          <Input\n            type=\"email\"\n            value={email}\n            onChange={(e: React.ChangeEvent<HTMLInputElement>) => setEmail(e.target.value)}\n            placeholder=\"teammate@company.com\"\n            variant={error ? 'error' : 'default'}\n            error={error || undefined}\n          />\n          <select\n            value={inviteRole}\n            onChange={(e: React.ChangeEvent<HTMLInputElement>) => setInviteRole(e.target.value)}\n            className=\"h-icon-xl rounded-md border bg-background  px-md text-body-sm\"\n          >\n            {ROLES.map((r: any) => (\n              <option key={r} value={r}>{r}</option>\n            ))}\n          </select>\n          {canManage ? (\n            <div className=\"flex gap-sm\">\n              <Button onClick={() => submit('invite')} disabled={loading || !validEmail}>Invite</Button>\n              <Button variant=\"outline\" onClick={() => submit('addExisting')} disabled={loading || !validEmail}>Add Existing</Button>\n            </div>\n          ) : (\n            <div className=\"text-body-sm color-foreground/60\">Only owners and admins can send invites.</div>\n          )}\n        </div>\n        {emailDomain ? (\n          <div className=\"text-body-sm flex items-center gap-sm\">\n            {domainRecord && domainRecord.status === 'active' ? (\n              <span className=\"color-success\">Domain matches active organization domain — seat not counted.</span>\n            ) : domainRecord && domainRecord.status === 'pending' ? (\n              <span className=\"color-warning\">Domain is pending verification — may not count toward domain-unlimited yet.</span>\n            ) : (\n              <>\n                <span className=\"color-foreground/60\">External domain — will count against seat limit if enforced.</span>\n                <Link\n                  href=\"#\"\n                  title=\"Add your organization email domain(s). When seat policy is domain-unlimited, invites matching active domains do not consume seats.\"\n                  className=\"inline-flex items-center rounded-md border  px-md py-xs text-compact hover:bg-secondary/50\"\n                >\n                  Manage domains\n                </Link>\n              </>\n            )}\n          </div>\n        ) : null}\n        {error ? <div className=\"text-body-sm color-destructive\">{error}</div> : null}\n        {result ? <div className=\"text-body-sm color-success\">{result}</div> : null}\n      </div>\n\n      <div className=\"stack-sm\">\n        <div className=\"text-body-sm form-label\">Bulk invites</div>\n        <div className=\"text-body-sm color-foreground/70\">Paste a list of emails (comma, space, or newline separated).</div>\n        <textarea\n          value={bulkText}\n          onChange={(e: React.ChangeEvent<HTMLInputElement>) => setBulkText(e.target.value)}\n          rows={4}\n          className=\"w-full rounded-md border bg-background  px-md py-sm text-body-sm focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring\"\n          placeholder=\"user1@company.com, user2@company.com\\nuser3@other.com\"\n        />\n        <div className=\"flex items-center gap-sm\">\n          <span className=\"text-body-sm color-foreground/60\">Role for all:</span>\n          <select\n            value={bulkRole}\n            onChange={(e: React.ChangeEvent<HTMLInputElement>) => setBulkRole(e.target.value)}\n            className=\"h-9 rounded-md border bg-background  px-md text-body-sm\"\n          >\n            {ROLES.map((r: any) => (\n              <option key={r} value={r}>{r}</option>\n            ))}\n          </select>\n          <Button onClick={submitBulk} disabled={loading || parseBulk(bulkText).length === 0 || !canManage}>Invite All</Button>\n          <div className=\"text-body-sm color-foreground/60\">Detected: {parseBulk(bulkText).length} email(s)</div>\n        </div>\n      </div>\n\n      <div className=\"rounded-md border\">\n        <table className=\"w-full text-body-sm\">\n          <thead>\n            <tr className=\"bg-secondary/40\">\n              <th className=\" px-md py-sm text-left\">Email</th>\n              <th className=\" px-md py-sm text-left\">Role</th>\n              <th className=\" px-md py-sm text-left\">Status</th>\n              <th className=\" px-md py-sm text-right\">Actions</th>\n            </tr>\n          </thead>\n          <tbody>\n            {invites.map((inv: any) => (\n              <tr key={inv.id} className=\"border-t\">\n                <td className=\" px-md py-sm\">{inv.email}</td>\n                <td className=\" px-md py-sm\">{inv.role}</td>\n                <td className=\" px-md py-sm\">\n                  <span className={\n                    `inline-flex items-center rounded-full px-sm py-0.5 text-body-sm ` +\n                    (inv.status === 'pending' ? 'bg-warning/10 color-warning' :\n                     inv.status === 'accepted' ? 'bg-success/10 color-success' :\n                     inv.status === 'revoked' ? 'bg-secondary/10 color-muted' :\n                     'bg-secondary/10 color-muted')\n                  }>\n                    {inv.status}\n                  </span>\n                </td>\n                <td className=\" px-md py-sm text-right cluster-sm\">\n                  <Button onClick={() => resendInvite(inv.id)} disabled={loading || !canManage || inv.status !== 'pending'}>\n                    Resend\n                  </Button>\n                  <Button onClick={() => revokeInvite(inv.id)} disabled={loading || !canManage || inv.status !== 'pending'}>\n                    Revoke\n                  </Button>\n                </td>\n              </tr>\n            ))}\n            {invites.length === 0 ? (\n              <tr>\n                <td className=\" px-md py-lg text-center color-foreground/60\" colSpan={4}>No invites yet.</td>\n              </tr>\n            ) : null}\n          </tbody>\n        </table>\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/settings/teams/TeamsClient.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"The 'handleExport' function makes the dependencies of useEffect Hook (at line 172) change on every render. To fix this, wrap the definition of 'handleExport' in its own useCallback() Hook.","line":205,"column":8,"nodeType":"VariableDeclarator","endLine":226,"endColumn":3,"suggestions":[{"desc":"Wrap the definition of 'handleExport' in its own useCallback() Hook.","fix":{"range":[4531,5088],"text":"useCallback(async (format: 'csv' | 'json') => {\n try {\n const blob = await teamsService.exportRecords({\n format,\n includeMetadata: true\n });\n\n const url = URL.createObjectURL(blob);\n const a = document.createElement('a');\n a.href = url;\n a.download = `team-records.${format}`;\n document.body.appendChild(a);\n a.click();\n document.body.removeChild(a);\n URL.revokeObjectURL(url);\n\n toast.success(`Records exported as ${format.toUpperCase()}`);\n } catch (err) {\n const message = err instanceof Error ? err.message : 'Failed to export records';\n toast.error(message);\n }\n })"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"The 'handleExport' function makes the dependencies of useMemo Hook (at line 202) change on every render. To fix this, wrap the definition of 'handleExport' in its own useCallback() Hook.","line":205,"column":8,"nodeType":"VariableDeclarator","endLine":226,"endColumn":3,"suggestions":[{"desc":"Wrap the definition of 'handleExport' in its own useCallback() Hook.","fix":{"range":[4531,5088],"text":"useCallback(async (format: 'csv' | 'json') => {\n try {\n const blob = await teamsService.exportRecords({\n format,\n includeMetadata: true\n });\n\n const url = URL.createObjectURL(blob);\n const a = document.createElement('a');\n a.href = url;\n a.download = `team-records.${format}`;\n document.body.appendChild(a);\n a.click();\n document.body.removeChild(a);\n URL.revokeObjectURL(url);\n\n toast.success(`Records exported as ${format.toUpperCase()}`);\n } catch (err) {\n const message = err instanceof Error ? err.message : 'Failed to export records';\n toast.error(message);\n }\n })"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { Users, UserPlus, Mail, Shield, RefreshCw, Download, Settings } from \"lucide-react\";\nimport { useState, useEffect, useCallback, useMemo } from 'react';\nimport {\n  Badge,\n  Button,\n  Card,\n  CardContent,\n  DataViewProvider,\n  StateManagerProvider,\n  Tabs,\n  TabsContent,\n  TabsList,\n  TabsTrigger,\n  ViewSwitcher,\n  useToastContext\n} from \"@ghxstship/ui\";\nimport type { \n TeamRecord, \n TeamViewConfig, \n TeamFieldConfig,\n TeamStatistics,\n TeamSearchParams,\n TeamsClientProps,\n ROLE_CONFIGS\n} from './types';\nimport { teamsService } from './lib/teams-service';\n\n// Field configuration for ATLVS DataViews\nconst fieldConfig: TeamFieldConfig[] = [\n {\n key: 'id',\n label: 'ID',\n type: 'text',\n width: 100,\n sortable: true,\n filterable: false\n },\n {\n key: 'name',\n label: 'Name',\n type: 'text',\n width: 200,\n sortable: true,\n filterable: true,\n required: true\n },\n {\n key: 'email',\n label: 'Email',\n type: 'text',\n width: 250,\n sortable: true,\n filterable: true,\n required: true\n },\n {\n key: 'role',\n label: 'Role',\n type: 'select',\n width: 120,\n sortable: true,\n filterable: true,\n options: [\n { value: 'owner', label: 'Owner' },\n { value: 'admin', label: 'Admin' },\n { value: 'manager', label: 'Manager' },\n { value: 'member', label: 'Member' },\n { value: 'viewer', label: 'Viewer' }\n ]\n },\n {\n key: 'status',\n label: 'Status',\n type: 'select',\n width: 100,\n sortable: true,\n filterable: true,\n options: [\n { value: 'active', label: 'Active' },\n { value: 'inactive', label: 'Inactive' },\n { value: 'suspended', label: 'Suspended' },\n { value: 'pending', label: 'Pending' }\n ]\n },\n {\n key: 'description',\n label: 'Description',\n type: 'textarea',\n width: 300,\n sortable: false,\n filterable: true\n },\n {\n key: 'category',\n label: 'Category',\n type: 'select',\n width: 120,\n sortable: true,\n filterable: true,\n options: [\n { value: 'members', label: 'Members' },\n { value: 'invitations', label: 'Invitations' },\n { value: 'roles', label: 'Roles' },\n { value: 'permissions', label: 'Permissions' }\n ]\n },\n {\n key: 'created_at',\n label: 'Created',\n type: 'date',\n width: 150,\n sortable: true,\n filterable: true\n },\n {\n key: 'updated_at',\n label: 'Updated',\n type: 'date',\n width: 150,\n sortable: true,\n filterable: true\n }\n];\n\nexport default function TeamsClient({ userId, orgId }: TeamsClientProps) {\n const { toast } = useToastContext();\n \n // State management\n const [records, setRecords] = useState<TeamRecord[]>([]);\n const [loading, setLoading] = useState(true);\n const [error, setError] = useState<string | null>(null);\n const [selectedRecords, setSelectedRecords] = useState<string[]>([]);\n const [statistics, setStatistics] = useState<TeamStatistics | null>(null);\n \n // View state\n const [currentView, setCurrentView] = useState<'grid' | 'list'>('grid');\n const [searchParams, setSearchParams] = useState<TeamSearchParams>({});\n const [activeTab, setActiveTab] = useState('overview');\n\n // Load team records\n const loadRecords = useCallback(async (params?: TeamSearchParams) => {\n try {\n setLoading(true);\n setError(null);\n const data = await teamsService.getTeamRecords(params);\n setRecords(data);\n } catch (err) {\n const message = err instanceof Error ? err.message : 'Failed to load team records';\n setError(message);\n toast.error(message);\n } finally {\n setLoading(false);\n }\n }, [toast]);\n\n // Load statistics\n const loadStatistics = useCallback(async () => {\n try {\n const stats = await teamsService.getStatistics();\n setStatistics(stats);\n } catch (err) {\n console.error('Failed to load statistics:', err);\n }\n }, []);\n\n // Initial data load\n useEffect(() => {\n loadRecords();\n loadStatistics();\n }, [loadRecords, loadStatistics, handleExport]);\n\n // ATLVS DataViews configuration\n const dataViewConfig: TeamViewConfig = useMemo(() => ({\n id: 'teams',\n name: 'Team Management',\n viewType: currentView,\n defaultView: 'grid',\n fields: fieldConfig,\n data: records,\n onSearch: async (query: string) => {\n const params = { ...searchParams, query };\n setSearchParams(params);\n await loadRecords(params);\n },\n onFilter: async (filters: unknown) => {\n const params = { ...searchParams, ...filters };\n setSearchParams(params);\n await loadRecords(params);\n },\n onSort: async (sorts: unknown) => {\n },\n onRefresh: async () => {\n await loadRecords(searchParams);\n await loadStatistics();\n return records;\n },\n onExport: (data: unknown, format: unknown) => {\n handleExport(format);\n }\n }), [currentView, records, searchParams, loadRecords, loadStatistics, handleExport]);\n\n // Event handlers\n const handleExport = async (format: 'csv' | 'json') => {\n try {\n const blob = await teamsService.exportRecords({\n format,\n includeMetadata: true\n });\n\n const url = URL.createObjectURL(blob);\n const a = document.createElement('a');\n a.href = url;\n a.download = `team-records.${format}`;\n document.body.appendChild(a);\n a.click();\n document.body.removeChild(a);\n URL.revokeObjectURL(url);\n\n toast.success(`Records exported as ${format.toUpperCase()}`);\n } catch (err) {\n const message = err instanceof Error ? err.message : 'Failed to export records';\n toast.error(message);\n }\n };\n\n const handleRefresh = async () => {\n await loadRecords(searchParams);\n await loadStatistics();\n };\n\n // View switcher component\n const ViewSwitcher = () => (\n <div className=\"flex items-center gap-xs\">\n <Button\n variant={currentView === 'grid' ? 'default' : 'outline'}\n size=\"sm\"\n onClick={() => setCurrentView('grid')}\n >\n Grid\n </Button>\n <Button\n variant={currentView === 'list' ? 'default' : 'outline'}\n size=\"sm\"\n onClick={() => setCurrentView('list')}\n >\n List\n </Button>\n </div>\n );\n\n // Simple grid view for teams (since we're focusing on architecture completion)\n const renderTeamGrid = () => {\n if (loading) {\n return (\n <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-md\">\n {[...Array(6)].map((_, i) => (\n <Card key={i} className=\"animate-pulse\">\n <CardContent className=\"p-lg\">\n <div className=\"h-icon-xs bg-muted rounded w-3/4 mb-2\"></div>\n <div className=\"h-3 bg-muted rounded w-1/2\"></div>\n </CardContent>\n </Card>\n ))}\n </div>\n );\n }\n\n const memberRecords = records.filter(r => r.type === 'member');\n const inviteRecords = records.filter(r => r.type === 'invite');\n\n return (\n <div className=\"space-y-lg\">\n {/* Members Section */}\n <div>\n <h3 className=\"text-lg font-semibold mb-4\">Team Members ({memberRecords.length})</h3>\n <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-md\">\n {memberRecords.map((record) => (\n <Card key={record.id} className=\"hover:shadow-md transition-shadow\">\n <CardContent className=\"p-lg\">\n <div className=\"flex items-start justify-between mb-3\">\n <div>\n <h4 className=\"font-medium\">{record.name}</h4>\n <p className=\"text-sm text-muted-foreground\">{record.email}</p>\n </div>\n <Badge variant=\"outline\">{record.role}</Badge>\n </div>\n <div className=\"space-y-xs\">\n <div className=\"flex items-center justify-between text-sm\">\n <span>Status:</span>\n <Badge variant={record.status === 'active' ? 'default' : 'secondary'}>\n {record.status}\n </Badge>\n </div>\n <p className=\"text-xs text-muted-foreground\">{record.description}</p>\n </div>\n </CardContent>\n </Card>\n ))}\n </div>\n </div>\n\n {/* Invitations Section */}\n {inviteRecords.length > 0 && (\n <div>\n <h3 className=\"text-lg font-semibold mb-4\">Pending Invitations ({inviteRecords.length})</h3>\n <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-md\">\n {inviteRecords.map((record) => (\n <Card key={record.id} className=\"hover:shadow-md transition-shadow border-dashed\">\n <CardContent className=\"p-lg\">\n <div className=\"flex items-start justify-between mb-3\">\n <div>\n <h4 className=\"font-medium\">{record.email}</h4>\n <p className=\"text-sm text-muted-foreground\">Invited as {record.role}</p>\n </div>\n <Badge variant=\"outline\">{record.status}</Badge>\n </div>\n <p className=\"text-xs text-muted-foreground\">{record.description}</p>\n </CardContent>\n </Card>\n ))}\n </div>\n </div>\n )}\n </div>\n );\n };\n\n if (error) {\n return (\n <div className=\"flex items-center justify-center h-container-lg\">\n <div className=\"text-center\">\n <p className=\"text-destructive mb-4\">{error}</p>\n <Button onClick={() => loadRecords()}>\n <RefreshCw className=\"h-icon-xs w-icon-xs mr-2\" />\n Retry\n </Button>\n </div>\n </div>\n );\n }\n\n return (\n <DataViewProvider config={dataViewConfig}>\n <StateManagerProvider>\n <div className=\"space-y-lg\">\n {/* Header */}\n <div className=\"flex items-center justify-between\">\n <div>\n <h1 className=\"text-3xl font-bold\">Team Management</h1>\n <p className=\"text-muted-foreground mt-1\">\n Manage team members, invitations, and roles\n </p>\n </div>\n <div className=\"flex items-center gap-sm\">\n <Button variant=\"outline\" onClick={handleRefresh} disabled={loading}>\n <RefreshCw className=\"h-icon-xs w-icon-xs mr-2\" />\n Refresh\n </Button>\n <Button variant=\"outline\" onClick={() => handleExport('csv')}>\n <Download className=\"h-icon-xs w-icon-xs mr-2\" />\n Export\n </Button>\n <Button>\n <UserPlus className=\"h-icon-xs w-icon-xs mr-2\" />\n Invite Member\n </Button>\n </div>\n </div>\n\n {/* Statistics */}\n {statistics && (\n <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-md\">\n <div className=\"bg-card p-md rounded-lg border\">\n <div className=\"flex items-center gap-xs mb-2\">\n <Users className=\"h-icon-sm w-icon-sm text-blue-600\" />\n <div className=\"text-sm font-medium\">Total Members</div>\n </div>\n <div className=\"text-2xl font-bold\">{statistics.totalMembers}</div>\n <div className=\"text-xs text-muted-foreground\">\n {statistics.activeMembers} active\n </div>\n </div>\n <div className=\"bg-card p-md rounded-lg border\">\n <div className=\"flex items-center gap-xs mb-2\">\n <Mail className=\"h-icon-sm w-icon-sm text-green-600\" />\n <div className=\"text-sm font-medium\">Pending Invites</div>\n </div>\n <div className=\"text-2xl font-bold\">{statistics.pendingInvites}</div>\n <div className=\"text-xs text-muted-foreground\">\n awaiting response\n </div>\n </div>\n <div className=\"bg-card p-md rounded-lg border\">\n <div className=\"flex items-center gap-xs mb-2\">\n <UserPlus className=\"h-icon-sm w-icon-sm text-purple-600\" />\n <div className=\"text-sm font-medium\">Recent Joins</div>\n </div>\n <div className=\"text-2xl font-bold\">{statistics.recentJoins}</div>\n <div className=\"text-xs text-muted-foreground\">\n last 30 days\n </div>\n </div>\n <div className=\"bg-card p-md rounded-lg border\">\n <div className=\"flex items-center gap-xs mb-2\">\n <Shield className=\"h-icon-sm w-icon-sm text-orange-600\" />\n <div className=\"text-sm font-medium\">Avg Response</div>\n </div>\n <div className=\"text-2xl font-bold\">{statistics.averageResponseTime}h</div>\n <div className=\"text-xs text-muted-foreground\">\n invite acceptance\n </div>\n </div>\n </div>\n )}\n\n {/* Tab Navigation */}\n <Tabs value={activeTab} onValueChange={setActiveTab}>\n <TabsList className=\"grid w-full grid-cols-4\">\n <TabsTrigger value=\"overview\">\n <Users className=\"h-icon-xs w-icon-xs mr-2\" />\n Overview\n </TabsTrigger>\n <TabsTrigger value=\"members\">\n <Users className=\"h-icon-xs w-icon-xs mr-2\" />\n Members\n </TabsTrigger>\n <TabsTrigger value=\"invitations\">\n <Mail className=\"h-icon-xs w-icon-xs mr-2\" />\n Invitations\n </TabsTrigger>\n <TabsTrigger value=\"settings\">\n <Settings className=\"h-icon-xs w-icon-xs mr-2\" />\n Settings\n </TabsTrigger>\n </TabsList>\n\n <TabsContent value=\"overview\" className=\"space-y-md\">\n {/* View Controls */}\n <div className=\"flex items-center justify-between\">\n <ViewSwitcher />\n <div className=\"flex items-center gap-xs\">\n {selectedRecords.length > 0 && (\n <Button variant=\"destructive\" size=\"sm\">\n Delete ({selectedRecords.length})\n </Button>\n )}\n </div>\n </div>\n\n {/* Main Content */}\n {renderTeamGrid()}\n </TabsContent>\n\n <TabsContent value=\"members\" className=\"space-y-md\">\n <div className=\"bg-card p-xl rounded-lg border text-center\">\n <Users className=\"h-icon-2xl w-icon-2xl mx-auto mb-4 text-muted-foreground\" />\n <h3 className=\"text-lg font-semibold mb-2\">Team Members</h3>\n <p className=\"text-muted-foreground mb-4\">\n Member management is available through the overview interface above.\n </p>\n <Button onClick={() => setActiveTab('overview')}>\n Go to Overview\n </Button>\n </div>\n </TabsContent>\n\n <TabsContent value=\"invitations\" className=\"space-y-md\">\n <div className=\"bg-card p-xl rounded-lg border text-center\">\n <Mail className=\"h-icon-2xl w-icon-2xl mx-auto mb-4 text-muted-foreground\" />\n <h3 className=\"text-lg font-semibold mb-2\">Team Invitations</h3>\n <p className=\"text-muted-foreground mb-4\">\n Invitation management is available through the overview interface above.\n </p>\n <Button onClick={() => setActiveTab('overview')}>\n Go to Overview\n </Button>\n </div>\n </TabsContent>\n\n <TabsContent value=\"settings\" className=\"space-y-md\">\n <div className=\"bg-card p-xl rounded-lg border text-center\">\n <Settings className=\"h-icon-2xl w-icon-2xl mx-auto mb-4 text-muted-foreground\" />\n <h3 className=\"text-lg font-semibold mb-2\">Team Settings</h3>\n <p className=\"text-muted-foreground mb-4\">\n Team settings configuration will be available in a future update.\n </p>\n <Button onClick={() => setActiveTab('overview')}>\n Go to Overview\n </Button>\n </div>\n </TabsContent>\n </Tabs>\n </div>\n </StateManagerProvider>\n </DataViewProvider>\n );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/settings/teams/TeamsSettingsClient.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'load'. Either include it or remove the dependency array.","line":89,"column":5,"nodeType":"ArrayExpression","endLine":89,"endColumn":7,"suggestions":[{"desc":"Update the dependencies array to be: [load]","fix":{"range":[2240,2242],"text":"[load]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\nimport { User, FileText, Settings, Award, Calendar, TrendingUp, Activity, Clock, Plus, Search, Play, Trash2 } from \"lucide-react\";\nimport { useEffect, useMemo, useState } from 'react';\nimport {\n Badge,\n Button,\n Card,\n CardContent,\n CardHeader,\n CardTitle,\n Input,\n Label,\n Modal,\n Select,\n SelectContent,\n SelectItem,\n SelectTrigger,\n SelectValue,\n Skeleton,\n Textarea,\n useToastContext\n} from '@ghxstship/ui';\nimport {\n addExistingMember,\n bulkInviteMembers,\n fetchTeamsSettings,\n InviteInput,\n InviteRecord,\n inviteMember,\n resendInvite,\n revokeInvite,\n SeatUsage,\n TeamsSettingsResponse\n} from '@/lib/services/settingsTeamsClient';\n\nconst ROLE_OPTIONS = [\n { value: 'viewer', label: 'Viewer' },\n { value: 'contributor', label: 'Contributor' },\n { value: 'manager', label: 'Manager' },\n { value: 'admin', label: 'Admin' },\n ] as const;\n\nconst EMAIL_REGEX = /.+@.+\\..+/i;\n\ntype RoleValue = (typeof ROLE_OPTIONS)[number]['value'];\n\nfunction parseEmailList(text: string): string[] {\n return Array.from(\n new Set(\n text\n .split(/[\\s,;]+/)\n .map((s) => s.trim())\n .filter((s) => EMAIL_REGEX.test(s))\n )\n );\n}\n\nfunction extractDomain(email: string): string | null {\n const match = email.toLowerCase().match(/@([a-z0-9.-]+\\.[a-z]{2})$/i);\n return match ? match[1] : null;\n}\n\nexport default function TeamsSettingsClient() {\n const { toast } = useToastContext();\n const [data, setData] = useState<TeamsSettingsResponse | null>(null);\n const [loading, setLoading] = useState<boolean>(true);\n const [saving, setSaving] = useState<boolean>(false);\n const [email, setEmail] = useState<string>('');\n const [role, setRole] = useState<RoleValue>('contributor');\n const [bulkText, setBulkText] = useState<string>('');\n const [bulkRole, setBulkRole] = useState<RoleValue>('contributor');\n const [bulkModalOpen, setBulkModalOpen] = useState<boolean>(false);\n\n const load = async () => {\n try {\n setLoading(true);\n const response = await fetchTeamsSettings();\n setData(response);\n } catch (error) {\n const message = error instanceof Error ? error.message : 'Unable to load teams settings';\n toast.error('Failed to load teams', undefined, { description: message });\n } finally {\n setLoading(false);\n }\n };\n\n useEffect(() => {\n void load();\n }, []);\n\n const emailDomain = useMemo(() => extractDomain(email), [email]);\n const domainRecord = useMemo(() => {\n if (!emailDomain || !data?.domains) return null;\n return data.domains.find((d) => d.domain === emailDomain);\n }, [emailDomain, data?.domains]);\n\n const bulkEmails = useMemo(() => parseEmailList(bulkText), [bulkText]);\n\n const handleInvite = async () => {\n if (!email || !EMAIL_REGEX.test(email)) return;\n try {\n setSaving(true);\n await inviteMember({ email, role });\n toast.success('Invite sent');\n setEmail('');\n await load();\n } catch (error) {\n const message = error instanceof Error ? error.message : 'Unable to send invite';\n toast.error('Invite failed', undefined, { description: message });\n } finally {\n setSaving(false);\n }\n };\n\n const handleAddExisting = async () => {\n if (!email || !EMAIL_REGEX.test(email)) return;\n try {\n setSaving(true);\n await addExistingMember({ email, role });\n toast.success('Member added');\n setEmail('');\n await load();\n } catch (error) {\n const message = error instanceof Error ? error.message : 'Unable to add member';\n toast.error('Add failed', undefined, { description: message });\n } finally {\n setSaving(false);\n }\n };\n\n const handleBulkInvite = async () => {\n if (bulkEmails.length === 0) return;\n try {\n setSaving(true);\n const result = await bulkInviteMembers({ emails: bulkEmails, role: bulkRole });\n toast.success(`Bulk invite complete: ${result.results.successes} sent, ${result.results.failures} failed`);\n setBulkText('');\n setBulkModalOpen(false);\n await load();\n } catch (error) {\n const message = error instanceof Error ? error.message : 'Unable to send bulk invites';\n toast.error('Bulk invite failed', undefined, { description: message });\n } finally {\n setSaving(false);\n }\n };\n\n const handleResend = async (inviteId: string) => {\n try {\n setSaving(true);\n await resendInvite(inviteId);\n toast.success('Invite resent');\n await load();\n } catch (error) {\n const message = error instanceof Error ? error.message : 'Unable to resend invite';\n toast.error('Resend failed', undefined, { description: message });\n } finally {\n setSaving(false);\n }\n };\n\n const handleRevoke = async (inviteId: string) => {\n try {\n setSaving(true);\n await revokeInvite(inviteId);\n toast.success('Invite revoked');\n await load();\n } catch (error) {\n const message = error instanceof Error ? error.message : 'Unable to revoke invite';\n toast.error('Revoke failed', undefined, { description: message });\n } finally {\n setSaving(false);\n }\n };\n\n const renderSeatUsage = (usage: SeatUsage) => {\n if (usage.seatPolicy === 'domain-unlimited') {\n return (\n <div className=\"flex items-center justify-between\">\n <div className=\"space-y-xs\">\n <p className=\"text-body-sm font-medium\">Domain Unlimited</p>\n <p className=\"text-body-xs text-muted-foreground\">\n Members with verified organization domains don&rsquo;t count toward seat limits.\n </p>\n </div>\n <Badge variant=\"outline\">{usage.activeCount} active</Badge>\n </div>\n );\n }\n\n return (\n <div className=\"flex items-center justify-between\">\n <div className=\"space-y-xs\">\n <p className=\"text-body-sm font-medium\">Per-User Seats</p>\n <p className=\"text-body-xs text-muted-foreground\">\n Each member counts toward your organization&rsquo;s seat limit.\n </p>\n </div>\n <div className=\"text-right\">\n <p className=\"text-body-sm font-medium\">\n {usage.activeCount}\n {usage.seatsLimit != null ? ` / ${usage.seatsLimit}` : ''}\n </p>\n {usage.remainingSeats != null ? (\n <p className=\"text-body-xs text-muted-foreground\">\n {usage.remainingSeats} remaining\n </p>\n ) : null}\n </div>\n </div>\n );\n };\n\n const renderInviteRow = (invite: InviteRecord) => {\n const statusVariant = \n invite.status === 'pending' ? 'secondary' :\n invite.status === 'accepted' ? 'default' :\n invite.status === 'revoked' ? 'outline' : 'outline';\n\n return (\n <tr key={invite.id} className=\"border-t\">\n <td className=\"px-md py-sm\">{invite.email}</td>\n <td className=\"px-md py-sm capitalize\">{invite.role}</td>\n <td className=\"px-md py-sm\">\n <Badge variant={statusVariant}>{invite.status}</Badge>\n </td>\n <td className=\"px-md py-sm text-right\">\n <div className=\"flex justify-end gap-xs\">\n {invite.status === 'pending' && data?.canManage ? (\n <>\n <Button\n variant=\"outline\"\n size=\"sm\"\n onClick={() => handleResend(invite.id)}\n disabled={saving}\n >\n Resend\n </Button>\n <Button\n variant=\"outline\"\n size=\"sm\"\n onClick={() => handleRevoke(invite.id)}\n disabled={saving}\n >\n Revoke\n </Button>\n </>\n ) : null}\n </div>\n </td>\n </tr>\n );\n };\n\n if (loading) {\n return (\n <div className=\"space-y-md\">\n <Skeleton className=\"h-icon-2xl w-container-xs\" />\n <div className=\"space-y-sm\">\n <Skeleton className=\"h-component-xl w-full\" />\n <Skeleton className=\"h-40 w-full\" />\n </div>\n </div>\n );\n }\n\n if (!data) {\n return (\n <Card>\n <CardContent className=\"py-lg text-center text-body-sm text-muted-foreground\">\n Unable to load teams data. Please try refreshing the page.\n </CardContent>\n </Card>\n );\n }\n\n return (\n <div className=\"space-y-lg\">\n <Card>\n <CardHeader className=\"flex flex-col gap-sm md:flex-row md:items-center md:justify-between\">\n <div>\n <CardTitle>Team Management</CardTitle>\n <p className=\"text-body-sm text-muted-foreground\">\n Invite teammates, manage roles, and monitor seat usage across your organization.\n </p>\n </div>\n <div className=\"flex gap-sm\">\n <Button variant=\"outline\" onClick={() => setBulkModalOpen(true)} disabled={!data.canManage}>\n Bulk Invite\n </Button>\n <Button variant=\"outline\" onClick={() => void load()}>\n Refresh\n </Button>\n </div>\n </CardHeader>\n <CardContent>\n {renderSeatUsage(data.seatUsage)}\n </CardContent>\n </Card>\n\n {data.canManage ? (\n <Card>\n <CardHeader>\n <CardTitle>Invite New Member</CardTitle>\n </CardHeader>\n <CardContent className=\"space-y-md\">\n <div className=\"grid gap-md md:grid-cols-3\">\n <div className=\"space-y-sm md:col-span-2\">\n <Label htmlFor=\"invite-email\">Email Address</Label>\n <Input\n \n type=\"email\"\n value={email}\n onChange={(event) => setEmail(event.target.value)}\n placeholder=\"teammate@company.com\"\n />\n {emailDomain && domainRecord ? (\n <p className=\"text-body-xs text-muted-foreground\">\n {domainRecord.status === 'active' ? (\n <span className=\"text-green-600\">✓ Domain matches active organization domain</span>\n ) : (\n <span className=\"text-yellow-600\">⚠ Domain is pending verification</span>\n )}\n </p>\n ) : emailDomain ? (\n <p className=\"text-body-xs text-muted-foreground\">\n External domain — will count against seat limit if enforced.\n </p>\n ) : null}\n </div>\n <div className=\"space-y-sm\">\n <Label htmlFor=\"invite-role\">Role</Label>\n <Select value={role} onChange={(e) => setRole(e.target.value as RoleValue)}>\n <SelectTrigger >\n <SelectValue />\n </SelectTrigger>\n <SelectContent>\n {ROLE_OPTIONS.map((option) => (\n <SelectItem key={option.value} value={option.value}>\n {option.label}\n </SelectItem>\n ))}\n </SelectContent>\n </Select>\n </div>\n </div>\n <div className=\"flex gap-sm\">\n <Button\n onClick={handleInvite}\n disabled={saving || !EMAIL_REGEX.test(email)}\n >\n Send Invite\n </Button>\n <Button\n variant=\"outline\"\n onClick={handleAddExisting}\n disabled={saving || !EMAIL_REGEX.test(email)}\n >\n Add Existing User\n </Button>\n </div>\n </CardContent>\n </Card>\n ) : (\n <Card>\n <CardContent className=\"py-lg text-center text-body-sm text-muted-foreground\">\n Only organization owners and admins can invite new members.\n </CardContent>\n </Card>\n )}\n\n <Card>\n <CardHeader>\n <CardTitle>Pending Invitations</CardTitle>\n </CardHeader>\n <CardContent>\n <div className=\"overflow-x-auto\">\n <table className=\"min-w-full text-left text-body-sm\">\n <thead>\n <tr className=\"border-b\">\n <th className=\"px-md py-sm font-medium\">Email</th>\n <th className=\"px-md py-sm font-medium\">Role</th>\n <th className=\"px-md py-sm font-medium\">Status</th>\n <th className=\"px-md py-sm font-medium text-right\">Actions</th>\n </tr>\n </thead>\n <tbody>\n {data.invites.map(renderInviteRow)}\n {data.invites.length === 0 ? (\n <tr>\n <td colSpan={4} className=\"px-md py-lg text-center text-muted-foreground\">\n No pending invitations.\n </td>\n </tr>\n ) : null}\n </tbody>\n </table>\n </div>\n </CardContent>\n </Card>\n\n <Modal\n open={bulkModalOpen}\n onClose={() => setBulkModalOpen(false)}\n title=\"Bulk Invite Members\"\n description=\"Paste a list of email addresses to invite multiple members at once.\"\n >\n <div className=\"space-y-md\">\n <div className=\"space-y-sm\">\n <Label htmlFor=\"bulk-emails\">Email Addresses</Label>\n <Textarea\n \n rows={6}\n value={bulkText}\n onChange={(event) => setBulkText(event.target.value)}\n placeholder=\"user1@company.com, user2@company.com&#10;user3@other.com&#10;user4@example.org\"\n />\n <p className=\"text-body-xs text-muted-foreground\">\n Detected: {bulkEmails.length} valid email{bulkEmails.length !== 1 ? 's' : ''}\n </p>\n </div>\n <div className=\"space-y-sm\">\n <Label htmlFor=\"bulk-role\">Role for All</Label>\n <Select value={bulkRole} onChange={(e) => setBulkRole(e.target.value as RoleValue)}>\n <SelectTrigger >\n <SelectValue />\n </SelectTrigger>\n <SelectContent>\n {ROLE_OPTIONS.map((option) => (\n <SelectItem key={option.value} value={option.value}>\n {option.label}\n </SelectItem>\n ))}\n </SelectContent>\n </Select>\n </div>\n <div className=\"flex justify-end gap-sm\">\n <Button variant=\"outline\" onClick={() => setBulkModalOpen(false)} disabled={saving}>\n Cancel\n </Button>\n <Button onClick={handleBulkInvite} disabled={saving || bulkEmails.length === 0}>\n {saving ? 'Sending…' : `Invite ${bulkEmails.length} Member${bulkEmails.length !== 1 ? 's' : ''}`}\n </Button>\n </div>\n </div>\n </Modal>\n </div>\n );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/settings/teams/lib/teams-service.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/settings/teams/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/settings/teams/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/settings/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/settings/views/SettingsCalendarView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/settings/views/SettingsChartView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/settings/views/SettingsGalleryView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/settings/views/SettingsGridView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/settings/views/SettingsKanbanView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/settings/views/SettingsListView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/(shell)/settings/views/SettingsTimelineView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(app)/layout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(marketing)/accessibility/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(marketing)/careers/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(marketing)/community/events/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(marketing)/community/forums/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(marketing)/community/impact/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(marketing)/community/opportunities/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(marketing)/community/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(marketing)/community/partners/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(marketing)/community/showcase/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(marketing)/company/about/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(marketing)/company/careers/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(marketing)/company/page.tsx","messages":[],"suppressedMessages":[{"ruleId":"@next/next/no-img-element","severity":1,"message":"Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` or a custom image loader to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","line":193,"column":19,"nodeType":"JSXOpeningElement","endLine":193,"endColumn":102,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(marketing)/company/press/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(marketing)/company/team/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(marketing)/contact/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(marketing)/cookies/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(marketing)/home/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(marketing)/layout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(marketing)/partnerships/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(marketing)/pricing/metadata.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(marketing)/pricing/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(marketing)/privacy/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(marketing)/products/atlvs/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(marketing)/products/coming-soon/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(marketing)/products/compare/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(marketing)/products/opendeck/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(marketing)/products/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(marketing)/resources/blog/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(marketing)/resources/case-studies/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(marketing)/resources/documentation/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(marketing)/resources/guides/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(marketing)/resources/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(marketing)/resources/whitepapers/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(marketing)/security/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(marketing)/sitemap.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(marketing)/solutions/brand-activations/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(marketing)/solutions/community-cultural-events/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(marketing)/solutions/concerts-festivals-tours/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(marketing)/solutions/corporate-community-events/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(marketing)/solutions/film-tv/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(marketing)/solutions/health-wellness-events/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(marketing)/solutions/hospitality-travel/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(marketing)/solutions/immersive-experiences/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(marketing)/solutions/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(marketing)/solutions/sporting-events-tournaments/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(marketing)/solutions/themed-theatrical-entertainment/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(marketing)/solutions/trade-shows-conferences/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(marketing)/solutions/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/(marketing)/terms/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/Uproviders.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/UwebUvitals.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/_components/ColorSystemDemo.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/_components/ComponentShowcase.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/_components/DatabasePerformanceMonitor.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/_components/DemoUserSwitcher.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/_components/FeatureGate.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/_components/NotificationsBell.tsx","messages":[],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'load'. Either include it or remove the dependency array.","line":33,"column":32,"nodeType":"ArrayExpression","endLine":33,"endColumn":34,"suggestions":[{"desc":"Update the dependencies array to be: [load]","fix":{"range":[1103,1105],"text":"[load]"}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/_components/OfflineSupportInitializer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/_components/PerformanceMonitor.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/_components/PerformanceMonitoringDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/_components/PricingAnimations.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/_components/ServiceWorkerRegistration.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/_components/StripeCheckout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/_components/atoms/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/_components/auth/AuthGuard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/_components/auth/MFASetup.tsx","messages":[],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadFactors'. Either include it or remove the dependency array.","line":42,"column":6,"nodeType":"ArrayExpression","endLine":42,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [loadFactors]","fix":{"range":[1308,1310],"text":"[loadFactors]"}}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@next/next/no-img-element","severity":1,"message":"Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` or a custom image loader to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","line":146,"column":13,"nodeType":"JSXOpeningElement","endLine":149,"endColumn":15,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/_components/auth/MFAVerify.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/_components/dynamic/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/_components/enterprise/UmonitoringUdashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/_components/enterprise/UsecurityUdashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/_components/enterprise/monitoring-dashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/_components/enterprise/security-dashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/_components/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/_components/lib/accessibility.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/_components/lib/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/_components/lib/layouts.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/_components/lib/navigation.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/_components/lib/sessionContext.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/_components/lib/spacing.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/_components/lib/typography.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/_components/lib/utils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/_components/marketing/AccessibilityEnhancements.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/_components/marketing/Analytics.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/_components/marketing/CTASection.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/_components/marketing/CookieConsent.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/_components/marketing/ExitIntentPopup.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/_components/marketing/ExperimentalHeroSection.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/_components/marketing/FeatureCard.tsx","messages":[],"suppressedMessages":[{"ruleId":"@next/next/no-img-element","severity":1,"message":"Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` or a custom image loader to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","line":139,"column":13,"nodeType":"JSXOpeningElement","endLine":143,"endColumn":15,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/_components/marketing/FeatureGrid.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/_components/marketing/HeroSection.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/_components/marketing/MarketingFooter.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/_components/marketing/MarketingHeader.tsx","messages":[],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has unnecessary dependencies: 'isOpen' and 'scrollDirection'. Either exclude them or remove the dependency array.","line":43,"column":6,"nodeType":"ArrayExpression","endLine":43,"endColumn":44,"suggestions":[{"desc":"Update the dependencies array to be: [lastScrollY]","fix":{"range":[1688,1726],"text":"[lastScrollY]"}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/_components/marketing/MarketingLayoutClient.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/_components/marketing/MarketingPageClient.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/_components/marketing/NewsletterSignup.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/_components/marketing/PerformanceOptimizations.tsx","messages":[],"suppressedMessages":[{"ruleId":"@next/next/no-img-element","severity":1,"message":"Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` or a custom image loader to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","line":177,"column":5,"nodeType":"JSXOpeningElement","endLine":187,"endColumn":7,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/_components/marketing/PricingCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/_components/marketing/ProductHighlights.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/_components/marketing/SEOHead.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/_components/marketing/SocialProof.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/_components/marketing/TrustSignals.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/_components/marketing/footer/FooterSection.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/_components/marketing/footer/SocialLinks.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/_components/marketing/footer/TrustBadges.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/_components/marketing/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/_components/marketing/layout/Container.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/_components/marketing/layout/Section.stories.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/_components/marketing/layout/Section.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/_components/marketing/navigation/MobileMenu.tsx","messages":[],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'navigation'. Either include it or remove the dependency array. If 'setAnimatedItems' needs the current value of 'navigation', you can also switch to useReducer instead of useState and read 'navigation' in the reducer.","line":36,"column":6,"nodeType":"ArrayExpression","endLine":36,"endColumn":25,"suggestions":[{"desc":"Update the dependencies array to be: [navigation, navigation.length]","fix":{"range":[1128,1147],"text":"[navigation, navigation.length]"}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/_components/marketing/navigation/NavigationDropdown.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/_components/marketing/pricing/AddOnCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/_components/marketing/pricing/FAQSection.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/_components/marketing/pricing/PricingToggle.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/_components/marketing/pricing/TrustIndicators.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/_components/marketing/team/DepartmentCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/_components/marketing/team/LeadershipCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/_components/marketing/team/TeamMemberCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/_components/marketing/team/TeamStats.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/_components/nav/BreadcrumbsNav.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/_components/nav/CommandPalette.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/_components/nav/ProductToggle.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/_components/nav/SidebarClient.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/_components/onboarding/OnboardingGate.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/_components/security/SecurityDashboard.tsx","messages":[],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadData'. Either include it or remove the dependency array.","line":33,"column":6,"nodeType":"ArrayExpression","endLine":33,"endColumn":42,"suggestions":[{"desc":"Update the dependencies array to be: [activeTab, filters, loadData, organizationId]","fix":{"range":[1057,1093],"text":"[activeTab, filters, loadData, organizationId]"}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/_components/shared/AppDrawer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/_components/shared/AuthError.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/_components/shared/AuthLayout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/_components/shared/CommandPalette.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/_components/shared/DemoUserSwitcher.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/_components/shared/EnterpriseOverview.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/_components/shared/FormField.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/_components/shared/ProductToggle.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/_components/shared/SidebarClient.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/_components/shared/SkipLink.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/_components/shared/SocialAuth.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/_components/shared/StepNavigation.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/_components/shared/overviewConfigs.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/_components/shared/useEnterpriseOverview.tsx","messages":[],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'setData'. Either include it or remove the dependency array.","line":217,"column":5,"nodeType":"ArrayExpression","endLine":217,"endColumn":30,"suggestions":[{"desc":"Update the dependencies array to be: [supabase, config.tables.main, config.tables.tasks, config.tables.milestones, config.tables.risks, config.tables.files, config.tables.activity, config.metrics, config.statusFields.values, config.statusFields.field, config.customSections, config.module, orgId, setData]","fix":{"range":[5699,5724],"text":"[supabase, config.tables.main, config.tables.tasks, config.tables.milestones, config.tables.risks, config.tables.files, config.tables.activity, config.metrics, config.statusFields.values, config.statusFields.field, config.customSections, config.module, orgId, setData]"}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/_components/shell/AppShell.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/_components/templates/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/_components/utils/export.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/_components/utils/import.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/_components/utils/sorting.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/_hooks/useSupabaseBrowserClient.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/_lib/bulk-operations.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/_lib/experiments/ExperimentProvider.tsx","messages":[],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'setExperiments'. Either include it or remove the dependency array.","line":50,"column":6,"nodeType":"ArrayExpression","endLine":50,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [setExperiments]","fix":{"range":[1529,1531],"text":"[setExperiments]"}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/_lib/optimistic-updates.ts","messages":[],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'setPendingOperations'. Either include it or remove the dependency array.","line":71,"column":5,"nodeType":"ArrayExpression","endLine":71,"endColumn":7,"suggestions":[{"desc":"Update the dependencies array to be: [setPendingOperations]","fix":{"range":[2018,2020],"text":"[setPendingOperations]"}}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'setPendingOperations'. Either include it or remove the dependency array.","line":123,"column":5,"nodeType":"ArrayExpression","endLine":123,"endColumn":11,"suggestions":[{"desc":"Update the dependencies array to be: [data, setPendingOperations]","fix":{"range":[3506,3512],"text":"[data, setPendingOperations]"}}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'setPendingOperations'. Either include it or remove the dependency array.","line":170,"column":5,"nodeType":"ArrayExpression","endLine":170,"endColumn":11,"suggestions":[{"desc":"Update the dependencies array to be: [data, setPendingOperations]","fix":{"range":[4758,4764],"text":"[data, setPendingOperations]"}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/_types/mock-types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/admin/demo-setup/DemoSetupClient.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/admin/demo-setup/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/admin/enterprise/database/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/admin/enterprise/monitoring/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/admin/enterprise/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/admin/enterprise/security/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/admin/enterprise/settings/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/api/_lib/context.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/api/analytics/memory/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/api/analytics/session/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/api/analytics/vitals/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/api/audit/[orgId]/listings/[listingId]/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/api/audit/[orgId]/projects/[projectId]/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/api/audit/[orgId]/tasks/[taskId]/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/api/audit/[orgId]/vendors/[vendorId]/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/api/auth/mfa/totp/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/api/auth/mfa/verify/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/api/auth/mfa/webauthn/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/api/csrf-token/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/api/demo/auth/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/api/demo/remove/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/api/demo/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/api/demo/seed/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/api/demo/setup/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/api/experiments/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/api/experiments/track/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/api/health/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/api/middleware/audit-interceptor.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/api/middleware/audit.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/api/middleware/cors.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/api/organizations/[orgId]/call-sheets/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/api/organizations/[orgId]/demo/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/api/organizations/[orgId]/domains/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/api/organizations/[orgId]/events/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/api/organizations/[orgId]/invites/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/api/organizations/[orgId]/lineups/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/api/organizations/[orgId]/memberships/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/api/organizations/[orgId]/memberships/usage/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/api/organizations/[orgId]/profiles/[profileId]/certifications/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/api/organizations/[orgId]/profiles/[profileId]/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/api/organizations/[orgId]/profiles/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/api/organizations/[orgId]/riders/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/api/organizations/[orgId]/spaces/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/api/stripe/checkout/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/api/stripe/create-checkout-session/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/api/stripe/portal/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/api/stripe/webhook/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/api/v1/_types/database.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/api/v1/activations/[id]/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/api/v1/activations/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/api/v1/analytics/dashboards/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/api/v1/analytics/exports/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/api/v1/analytics/reports/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/api/v1/apikeys/[id]/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/api/v1/apikeys/issue/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/api/v1/apikeys/list/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/api/v1/assets/advancing/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/api/v1/assets/assignments/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/api/v1/assets/barcodes/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/api/v1/assets/compliance/[id]/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/api/v1/assets/compliance/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/api/v1/assets/inspections/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/api/v1/assets/lifecycle/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/api/v1/assets/maintenance/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/api/v1/assets/reports/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/api/v1/assets/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/api/v1/assets/tracking/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/api/v1/bulk/export/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/api/v1/bulk/import/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/api/v1/bulk/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/api/v1/companies/[id]/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/api/v1/companies/contacts/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/api/v1/companies/contracts/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/api/v1/companies/qualifications/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/api/v1/companies/ratings/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/api/v1/companies/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/api/v1/dashboard/[id]/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/api/v1/dashboard/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/api/v1/dashboard/widgets/[id]/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/api/v1/dashboard/widgets/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/api/v1/demo/remove/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/api/v1/demo/seed/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/api/v1/docs/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/api/v1/docs/swagger/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/api/v1/files/[id]/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/api/v1/files/analytics/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/api/v1/files/resources/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/api/v1/files/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/api/v1/files/stats/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/api/v1/finance/accounts/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/api/v1/finance/budgets/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/api/v1/finance/expenses/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/api/v1/finance/forecasts/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/api/v1/finance/invoices/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/api/v1/finance/revenue/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/api/v1/finance/transactions/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/api/v1/graphql/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/api/v1/health/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/api/v1/inspections/[id]/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/api/v1/inspections/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/api/v1/integrations/webhooks/partner/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/api/v1/integrations/webhooks/redrive/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/api/v1/invitations/send/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/api/v1/jobs/assignments/[id]/accept/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/api/v1/jobs/assignments/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/api/v1/jobs/bids/[id]/submit/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/api/v1/jobs/bids/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/api/v1/jobs/compliance/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/api/v1/jobs/contracts/[id]/activate/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/api/v1/jobs/contracts/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/api/v1/jobs/opportunities/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/api/v1/jobs/rfps/[id]/publish/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/api/v1/jobs/rfps/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/api/v1/jobs/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/api/v1/locations/[id]/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/api/v1/locations/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/api/v1/marketplace/catalog-items/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/api/v1/marketplace/listings/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/api/v1/marketplace/projects/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/api/v1/milestones/[id]/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/api/v1/milestones/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/api/v1/people/[id]/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/api/v1/people/assignments/[id]/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/api/v1/people/assignments/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/api/v1/people/competencies/[id]/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/api/v1/people/competencies/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/api/v1/people/contracts/[id]/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/api/v1/people/contracts/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/api/v1/people/endorsements/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/api/v1/people/network/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/api/v1/people/onboarding/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/api/v1/people/roles/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/api/v1/people/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/api/v1/people/shortlists/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/api/v1/people/training/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/api/v1/pipeline/contracting/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/api/v1/pipeline/manning/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/api/v1/pipeline/onboarding/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/api/v1/pipeline/stages/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/api/v1/pipeline/training/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/api/v1/procurement/analytics/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/api/v1/procurement/approvals/policies/[id]/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/api/v1/procurement/approvals/policies/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/api/v1/procurement/approvals/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/api/v1/procurement/catalog/[id]/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/api/v1/procurement/catalog/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/api/v1/procurement/catalog/stats/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/api/v1/procurement/categories/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/api/v1/procurement/contracts/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/api/v1/procurement/feedback/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/api/v1/procurement/integration/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/api/v1/procurement/products/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/api/v1/procurement/purchase-orders/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/api/v1/procurement/requests/[id]/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/api/v1/procurement/requests/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/api/v1/procurement/services/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/api/v1/procurement/vendors/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/api/v1/profile/activity/analytics/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/api/v1/profile/activity/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/api/v1/profile/analytics/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/api/v1/profile/certifications/analytics/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/api/v1/profile/certifications/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/api/v1/profile/contact/analytics/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/api/v1/profile/contact/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/api/v1/profile/emergency/analytics/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/api/v1/profile/emergency/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/api/v1/profile/endorsements/analytics/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/api/v1/profile/endorsements/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/api/v1/profile/health/analytics/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/api/v1/profile/health/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/api/v1/profile/history/analytics/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/api/v1/profile/history/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/api/v1/profile/job-history/analytics/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/api/v1/profile/job-history/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/api/v1/profile/overview/analytics/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/api/v1/profile/overview/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/api/v1/profile/performance/analytics/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/api/v1/profile/performance/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/api/v1/profile/professional/analytics/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/api/v1/profile/professional/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/api/v1/profile/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/api/v1/profile/travel/analytics/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/api/v1/profile/travel/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/api/v1/profile/uniform/analytics/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/api/v1/profile/uniform/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/api/v1/programming/call-sheets/[id]/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/api/v1/programming/call-sheets/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/api/v1/programming/events/[id]/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/api/v1/programming/events/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/api/v1/programming/itineraries/[id]/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/api/v1/programming/itineraries/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/api/v1/programming/lineups/[id]/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/api/v1/programming/lineups/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/api/v1/programming/overview/analytics/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/api/v1/programming/overview/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/api/v1/programming/performances/[id]/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/api/v1/programming/performances/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/api/v1/programming/riders/[id]/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/api/v1/programming/riders/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/api/v1/programming/spaces/[id]/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/api/v1/programming/spaces/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/api/v1/programming/workshops/[id]/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/api/v1/programming/workshops/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/api/v1/programs/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/api/v1/projects/[id]/activations/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/api/v1/projects/[id]/files/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/api/v1/projects/[id]/inspections/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/api/v1/projects/[id]/risks/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/api/v1/projects/[id]/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/api/v1/projects/[id]/tasks/[taskId]/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/api/v1/projects/[id]/tasks/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/api/v1/projects/[id]/time-entries/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/api/v1/projects/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/api/v1/resources/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/api/v1/risks/[id]/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/api/v1/risks/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/api/v1/settings/api-keys/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/api/v1/settings/automations/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/api/v1/settings/billing/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/api/v1/settings/integrations/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/api/v1/settings/notifications/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/api/v1/settings/organization/members/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/api/v1/settings/organization/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/api/v1/settings/roles/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/api/v1/settings/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/api/v1/settings/security/2fa/setup/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/api/v1/settings/security/2fa/verify/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/api/v1/settings/security/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/api/v1/settings/sessions/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/api/v1/settings/teams/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/api/v1/settings/webhooks/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/api/v1/tasks/[id]/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/api/v1/tasks/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/api/v1/user/pins/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/api/v1/users/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/api/v1/vendors/[id]/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/api/v1/vendors/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/api/v1/webhooks/[id]/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/api/v1/webhooks/list/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/api/v1/webhooks/receive/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/api/v1/webhooks/redrive/enqueue/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/api/v1/webhooks/redrive/process/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/api/v1/webhooks/redrive/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/api/v1/webhooks/subscribe/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/auth/_components/AuthForm.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/auth/_components/AuthLayout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/auth/callback/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/auth/forgot-password/ForgotPasswordForm.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/auth/forgot-password/layout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/auth/forgot-password/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/auth/onboarding/OnboardingFlow.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/auth/onboarding/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/auth/onboarding/steps/EmailVerificationStep.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/auth/onboarding/steps/FinalConfirmationStep.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/auth/onboarding/steps/OrganizationSetupStep.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/auth/onboarding/steps/PlanSelectionStep.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/auth/onboarding/steps/ProfileCompletionStep.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/auth/onboarding/steps/TeamInvitationStep.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/auth/onboarding/steps/VerifyEmailStep.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/auth/reset-password/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/auth/signin/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/auth/signup/SignUpForm.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/auth/signup/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/auth/signup/sign-up/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/auth/verify-email/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/demo/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/favicon.ico/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/global-error.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/instrumentation.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/layout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/not-found.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/page-test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/providers.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/app/web-vitals.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/components/ErrorBoundary.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/components/examples/BrandIntegrationExample.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/config/modules/analytics.config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/config/modules/assets.config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/config/modules/companies.config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/config/modules/dashboard.config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/config/modules/files.config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/config/modules/finance.config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/config/modules/jobs.config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/config/modules/marketplace.config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/config/modules/people.config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/config/modules/procurement.config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/config/modules/profile.config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/config/modules/programming.config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/config/modules/projects.config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/config/modules/settings.config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/features/projects/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/hooks/useAuthError.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/hooks/useAuthLoading.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/hooks/useErrorHandler.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/i18n.config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/i18n/request.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/lib/ab-testing.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/lib/advanced-alerting.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/lib/alerting.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/lib/animations.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/lib/api-middleware.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/lib/audit-enhanced.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/lib/auth/roles.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/lib/business-metrics.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/lib/ci-bypass.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/lib/csrf.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/lib/design-system/colors-2026.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/lib/feature-flags.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/lib/hooks/use-csrf.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/lib/hooks/useFormValidation.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/lib/i18n-utils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/lib/i18n.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/lib/incident-response.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/lib/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/lib/monitoring.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/lib/monitoring/memory.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/lib/monitoring/web-vitals.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/lib/navigation/routeRegistry.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/lib/performance.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/lib/privacy-compliance.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/lib/rate-limit.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/lib/rate-limiter.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/lib/ratelimit.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/lib/rbac.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/lib/redis.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/lib/rum-monitoring.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/lib/sentry.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/lib/services.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/lib/services/settingsAccountClient.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/lib/services/settingsAutomationsClient.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/lib/services/settingsBillingClient.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/lib/services/settingsClient.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/lib/services/settingsIntegrationsClient.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/lib/services/settingsNotificationsClient.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/lib/services/settingsOrganizationClient.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/lib/services/settingsRolesClient.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/lib/services/settingsSecurityClient.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/lib/services/settingsTeamsClient.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/lib/stripe-config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/lib/supabase/client.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/lib/supabase/enterprise-client.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/lib/supabase/monitoring.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/lib/supabase/server.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/lib/supabase/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/lib/telemetry.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/lib/tenant-context.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/lib/uptime-monitoring.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/lib/validations.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/lib/validations/forms.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/lib/validations/validation/middleware.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/lib/validations/validation/schemas.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/lib/workflows/manager.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/middleware-i18n.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/middleware.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/middleware/brand-detection.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/middleware/error-handling.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/middleware/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/middleware/logging.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/middleware/rate-limiting.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/middleware/security.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/next-env.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/sentry.client.config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/tailwind.config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/tests/hooks/useMarketplaceOverview.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/tests/hooks/useResourcesOverview.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/tests/security/csp-validation.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/tests/security/middleware-integration.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/tests/security/security-implementation.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/types/auth.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/types/database.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/types/external.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ATLVS/apps/web/types/global.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]}]
