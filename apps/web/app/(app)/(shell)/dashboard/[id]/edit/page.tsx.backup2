/**
 * Dashboard Edit Page
 * Enterprise-grade dashboard editor with real-time collaboration
 * Provides full editing capabilities with version control and conflict resolution
 */

import { Suspense } from 'react';
import { createClient } from '@/lib/supabase/server';
import { notFound, redirect } from 'next/navigation';
import { Metadata } from 'next';
import { Loader2 } from 'lucide-react';
import EditDashboardDrawer from '../../drawers/EditDashboardDrawer';}

// Edit permission check
async function checkDashboardEditPermission(
  dashboard: unknown,
  userId: string,
  userRole: string,
  supabase: unknown
): Promise<boolean> {
  // Owner/admin can edit any dashboard in their organization
  if (['owner', 'admin'].includes(userRole)) {
    return true;
  }

  // Editor can edit dashboards they created or have explicit access to
  if (userRole === 'editor') {
    // Check if user created the dashboard
    if (dashboard.created_by === userId) {
      return true;
    }

    // Check explicit permissions
    const { data: permissions } = await supabase
      .from('dashboard_permissions')
      .select('permissions')
      .eq('dashboard_id', dashboard.id)
      .eq('user_id', userId)
  if (!canEdit) {
    redirect(`/dashboard/${dashboardId}`);
  }

  // Get additional data for editing
  const [
    { data: templates },
    { data: widgetTypes },
    { data: userList },
    { data: recentActivity }
  ] = await Promise.all([
    // Available templates
    supabase
      .from('dashboard_templates')
      .select('*')
      .eq('is_public', true)
      .order('usage_count', { ascending: false })
      .limit(20),

    // Available widget types
    supabase
      .from('widget_types')
      .select('*')
      .eq('is_active', true)
      .order('category', { ascending: true })
      .order('name', { ascending: true }),

    // Organization users
    supabase
      .from('users')
      .select('id, email, full_name')
      .eq('organization_id', orgId)
      .order('full_name', { ascending: true }),

    // Recent activity
    supabase
      .from('dashboard_activity')
      .select('*')
      .eq('organization_id', orgId)
      .order('created_at', { ascending: false })
      .limit(10)
  ]);

  return (
    <Suspense fallback={<EditDashboardLoading />}>
      <EditDashboardDrawer
        open={true}
        onOpenChange={(open) => !open && window.history.back()}
        dashboard={dashboard}
        onSubmit={async (data) => {
          // Handle dashboard update
          const supabase = await createClient();
          await supabase
            .from('dashboards')
            .update(data)
            .eq('id', dashboard.id);
          window.history.back();
        }}
      />
    </Suspense>
  );
}

// Edit permission check
async function checkDashboardEditPermission(
  dashboard: unknown,
  userId: string,
  userRole: string,
  supabase: unknown
): Promise<boolean> {
  // Owner/admin can edit any dashboard in their organization
  if (['owner', 'admin'].includes(userRole)) {
    return true;
  }

  // Editor can edit dashboards they created or have explicit access to
  if (userRole === 'editor') {
    // Check if user created the dashboard
    if (dashboard.created_by === userId) {
      return true;
    }

    // Check explicit permissions
    const { data: permissions } = await supabase
      .from('dashboard_permissions')
      .select('permissions')
      .eq('dashboard_id', dashboard.id)
      .eq('user_id', userId)
      .single();

    if (permissions?.permissions?.includes('edit')) {
      return true;
    }

    // Check team permissions
    if (dashboard.allowed_users?.includes(userId)) {
      return true;
    }
  }

  return false;
}

// Generate static params for static generation (optional)
export async function generateStaticParams() {
  // In a real implementation, you might pre-generate popular dashboards
  return [];
}
