[{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ghxstship/apps/web/app/(app)/(chromeless)/profile/uniform/UniformSizingClient.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchSizing'. Either include it or remove the dependency array.","line":40,"column":6,"nodeType":"ArrayExpression","endLine":40,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [fetchSizing]","fix":{"range":[1092,1094],"text":"[fetchSizing]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\n\nimport { Shirt, Save, Edit2 } from \"lucide-react\";\nimport React, { useState, useEffect } from 'react';\nimport { createClient } from '@/lib/supabase/client';\nimport { Button, UnifiedInput, Select, Card, CardHeader, CardContent } from '@ghxstship/ui';\nimport { useToast } from '@ghxstship/ui';\n\ninterface UniformSizing {\n  id: string;\n  shirt_size?: string;\n  pants_size?: string;\n  jacket_size?: string;\n  shoe_size?: string;\n  hat_size?: string;\n  glove_size?: string;\n  gender_fit?: string;\n  special_requirements?: string;\n  measurements?: {\n    chest?: string;\n    waist?: string;\n    hips?: string;\n    inseam?: string;\n    sleeve?: string;\n    neck?: string;\n  };\n}\n\nexport default function UniformSizingClient() {\n  const [sizing, setSizing] = useState<UniformSizing | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [isEditing, setIsEditing] = useState(false);\n  const [formData, setFormData] = useState<Partial<UniformSizing>>({});\n  const { addToast } = useToast();\n  const supabase = createClient();\n\n  useEffect(() => {\n    fetchSizing();\n  }, []);\n\n  const fetchSizing = async () => {\n    try {\n      const { data: { user } } = await supabase.auth.getUser();\n      if (!user) return;\n\n      const { data, error } = await supabase\n        .from('uniform_sizing')\n        .select('*')\n        .eq('user_id', user.id)\n        .single();\n\n      if (error && error.code !== 'PGRST116') throw error;\n      \n      if (data) {\n        setSizing(data);\n        setFormData(data);\n      } else {\n        setFormData({\n          measurements: {}\n        });\n        setIsEditing(true);\n      }\n    } catch (error) {\n      console.error('Error fetching uniform sizing:', error);\n      addToast({\n        type: 'error',\n        title: 'Error',\n        description: 'Failed to load uniform sizing',\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleSave = async () => {\n    try {\n      const { data: { user } } = await supabase.auth.getUser();\n      if (!user) return;\n\n      const dataToSave = {\n        ...formData,\n        user_id: user.id,\n      };\n\n      if (sizing?.id) {\n        const { error } = await supabase\n          .from('uniform_sizing')\n          .update(dataToSave)\n          .eq('id', sizing.id)\n          .eq('user_id', user.id);\n\n        if (error) throw error;\n      } else {\n        const { error } = await supabase\n          .from('uniform_sizing')\n          .insert(dataToSave);\n\n        if (error) throw error;\n      }\n\n      addToast({\n        type: 'success',\n        title: 'Success',\n        description: 'Uniform sizing saved successfully',\n      });\n      \n      setIsEditing(false);\n      fetchSizing();\n    } catch (error) {\n      console.error('Error saving uniform sizing:', error);\n      addToast({\n        type: 'error',\n        title: 'Error',\n        description: 'Failed to save uniform sizing',\n      });\n    }\n  };\n\n  const updateMeasurement = (key: string, value: string) => {\n    setFormData({\n      ...formData,\n      measurements: {\n        ...(formData.measurements || {}),\n        [key]: value,\n      },\n    });\n  };\n\n  if (loading) {\n    return (\n      <div className=\"stack-md\">\n        {[1, 2, 3].map(i => (\n          <Card key={i} className=\"animate-pulse\">\n            <CardContent className=\"h-32\" />\n          </Card>\n        ))}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"stack-lg\">\n      <div className=\"flex justify-between items-center\">\n        <div>\n          <h2 className=\"text-heading-3\">Uniform Sizing</h2>\n          <p className=\"color-muted\">Manage your uniform and clothing sizes</p>\n        </div>\n        {!isEditing ? (\n          <Button onClick={() => setIsEditing(true)}>\n            <Edit2 className=\"w-4 h-4 mr-sm\" />\n            Edit Sizing\n          </Button>\n        ) : (\n          <div className=\"cluster\">\n            <Button variant=\"outline\" onClick={() => {\n              setIsEditing(false);\n              setFormData(sizing || {});\n            }}>\n              Cancel\n            </Button>\n            <Button onClick={handleSave}>\n              <Save className=\"w-4 h-4 mr-sm\" />\n              Save\n            </Button>\n          </div>\n        )}\n      </div>\n\n      {/* Standard Sizes */}\n      <Card>\n        <CardHeader>\n          <h3 className=\"text-heading-4 flex items-center\">\n            <Shirt className=\"w-5 h-5 mr-sm color-accent\" />\n            Standard Sizes\n          </h3>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-md\">\n            <label className=\"text-body-sm form-label\">Shirt Size</label>\n            <Select\n              value={formData.shirt_size || ''}\n              onValueChange={(value: string) => setFormData({ ...formData, shirt_size: value })}\n              disabled={!isEditing}\n            >\n              <option value=\"\">Select...</option>\n              <option value=\"XS\">XS</option>\n              <option value=\"S\">S</option>\n              <option value=\"M\">M</option>\n              <option value=\"L\">L</option>\n              <option value=\"XL\">XL</option>\n              <option value=\"2XL\">2XL</option>\n              <option value=\"3XL\">3XL</option>\n              <option value=\"4XL\">4XL</option>\n            </Select>\n            <UnifiedInput               label=\"Pants Size\"\n              value={formData.pants_size || ''}\n              onChange={(e: React.ChangeEvent<HTMLInputElement>) => setFormData({ ...formData, pants_size: e.target.value })}\n              placeholder=\"e.g., 32x30\"\n              disabled={!isEditing}\n            />\n            <label className=\"text-body-sm form-label\">Jacket Size</label>\n            <Select\n              value={formData.jacket_size || ''}\n              onValueChange={(value: string) => setFormData({ ...formData, jacket_size: value })}\n              disabled={!isEditing}\n            >\n              <option value=\"\">Select...</option>\n              <option value=\"XS\">XS</option>\n              <option value=\"S\">S</option>\n              <option value=\"M\">M</option>\n              <option value=\"L\">L</option>\n              <option value=\"XL\">XL</option>\n              <option value=\"2XL\">2XL</option>\n              <option value=\"3XL\">3XL</option>\n              <option value=\"4XL\">4XL</option>\n            </Select>\n            <UnifiedInput               label=\"Shoe Size\"\n              value={formData.shoe_size || ''}\n              onChange={(e: React.ChangeEvent<HTMLInputElement>) => setFormData({ ...formData, shoe_size: e.target.value })}\n              placeholder=\"e.g., 10.5\"\n              disabled={!isEditing}\n            />\n            <UnifiedInput               label=\"Hat Size\"\n              value={formData.hat_size || ''}\n              onChange={(e: React.ChangeEvent<HTMLInputElement>) => setFormData({ ...formData, hat_size: e.target.value })}\n              placeholder=\"e.g., 7 1/4\"\n              disabled={!isEditing}\n            />\n            <label className=\"text-body-sm form-label\">Glove Size</label>\n            <Select\n              value={formData.glove_size || ''}\n              onValueChange={(value: string) => setFormData({ ...formData, glove_size: value })}\n              disabled={!isEditing}\n            >\n              <option value=\"\">Select...</option>\n              <option value=\"XS\">XS</option>\n              <option value=\"S\">S</option>\n              <option value=\"M\">M</option>\n              <option value=\"L\">L</option>\n              <option value=\"XL\">XL</option>\n              <option value=\"2XL\">2XL</option>\n            </Select>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Fit Preference */}\n      <Card>\n        <CardHeader>\n          <h3 className=\"text-body text-heading-4\">Fit Preference</h3>\n        </CardHeader>\n        <CardContent>\n          <label className=\"text-body-sm form-label\">Gender Fit</label>\n          <Select\n            value={formData.gender_fit || ''}\n            onValueChange={(value: string) => setFormData({ ...formData, gender_fit: value })}\n            disabled={!isEditing}\n          >\n            <option value=\"\">Select...</option>\n            <option value=\"mens\">Men&apos;s</option>\n            <option value=\"womens\">Women&apos;s</option>\n            <option value=\"unisex\">Unisex</option>\n          </Select>\n        </CardContent>\n      </Card>\n\n      {/* Detailed Measurements */}\n      <Card>\n        <CardHeader>\n          <h3 className=\"text-body text-heading-4\">Detailed Measurements</h3>\n          <p className=\"text-body-sm color-muted\">Optional measurements for custom fitting</p>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-md\">\n            <UnifiedInput               label=\"Chest\"\n              value={formData.measurements?.chest || ''}\n              onChange={(e: React.ChangeEvent<HTMLInputElement>) => updateMeasurement('chest', e.target.value)}\n              placeholder=\"e.g., 42 inches\"\n              disabled={!isEditing}\n            />\n            <UnifiedInput               label=\"Waist\"\n              value={formData.measurements?.waist || ''}\n              onChange={(e: React.ChangeEvent<HTMLInputElement>) => updateMeasurement('waist', e.target.value)}\n              placeholder=\"e.g., 34 inches\"\n              disabled={!isEditing}\n            />\n            <UnifiedInput               label=\"Hips\"\n              value={formData.measurements?.hips || ''}\n              onChange={(e: React.ChangeEvent<HTMLInputElement>) => updateMeasurement('hips', e.target.value)}\n              placeholder=\"e.g., 40 inches\"\n              disabled={!isEditing}\n            />\n            <UnifiedInput               label=\"Inseam\"\n              value={formData.measurements?.inseam || ''}\n              onChange={(e: React.ChangeEvent<HTMLInputElement>) => updateMeasurement('inseam', e.target.value)}\n              placeholder=\"e.g., 30 inches\"\n              disabled={!isEditing}\n            />\n            <UnifiedInput               label=\"Sleeve Length\"\n              value={formData.measurements?.sleeve || ''}\n              onChange={(e: React.ChangeEvent<HTMLInputElement>) => updateMeasurement('sleeve', e.target.value)}\n              placeholder=\"e.g., 33 inches\"\n              disabled={!isEditing}\n            />\n            <UnifiedInput               label=\"Neck\"\n              value={formData.measurements?.neck || ''}\n              onChange={(e: React.ChangeEvent<HTMLInputElement>) => updateMeasurement('neck', e.target.value)}\n              placeholder=\"e.g., 16 inches\"\n              disabled={!isEditing}\n            />\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Special Requirements */}\n      <Card>\n        <CardHeader>\n          <h3 className=\"text-body text-heading-4\">Special Requirements</h3>\n        </CardHeader>\n        <CardContent>\n          <UnifiedInput             value={formData.special_requirements || ''}\n            onChange={(e: React.ChangeEvent<HTMLInputElement>) => setFormData({ ...formData, special_requirements: e.target.value })}\n            placeholder=\"Any special uniform requirements or notes...\"\n            disabled={!isEditing}\n          />\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ghxstship/apps/web/app/(app)/(shell)/analytics/exports/ExportsClient.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadExportData'. Either include it or remove the dependency array.","line":89,"column":6,"nodeType":"ArrayExpression","endLine":89,"endColumn":22,"suggestions":[{"desc":"Update the dependencies array to be: [loadExportData, organizationId]","fix":{"range":[2076,2092],"text":"[loadExportData, organizationId]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\n\nimport { useState, useEffect } from 'react';\nimport { Card, Badge, Button } from '@ghxstship/ui';\nimport { createBrowserClient } from '@ghxstship/auth';\nimport { \n  Plus,\n  Download,\n  Calendar,\n  Clock,\n  FileText,\n  Database,\n  Filter,\n  Search,\n  Play,\n  Pause,\n  Trash2,\n  Edit3,\n  Eye,\n  Share2,\n  Settings,\n  CheckCircle,\n  XCircle,\n  AlertCircle,\n  FileSpreadsheet,\n  FileJson,\n  Files,\n  Archive,\n  RefreshCw\n} from 'lucide-react';\n\ninterface ExportJob {\n  id: string;\n  organizationId: string;\n  name: string;\n  description?: string;\n  dataSource: 'projects' | 'people' | 'finance' | 'events' | 'custom_query';\n  format: 'csv' | 'xlsx' | 'json' | 'pdf';\n  filters: Record<string, any>;\n  schedule?: {\n    enabled: boolean;\n    frequency: 'daily' | 'weekly' | 'monthly' | 'quarterly';\n    time: string;\n    dayOfWeek?: number;\n    dayOfMonth?: number;\n  };\n  status: 'active' | 'paused' | 'failed' | 'completed';\n  lastRun?: string;\n  nextRun?: string;\n  fileUrl?: string;\n  fileSize?: number;\n  recordCount?: number;\n  createdAt: string;\n  updatedAt: string;\n  createdBy: string;\n}\n\ninterface ExportHistory {\n  id: string;\n  exportJobId: string;\n  status: 'running' | 'completed' | 'failed';\n  startedAt: string;\n  completedAt?: string;\n  fileUrl?: string;\n  fileSize?: number;\n  recordCount?: number;\n  errorMessage?: string;\n}\n\ninterface ExportsClientProps {\n  organizationId: string;\n  translations: Record<string, string>;\n}\n\nexport default function ExportsClient({ organizationId, translations }: ExportsClientProps) {\n  const [exportJobs, setExportJobs] = useState<ExportJob[]>([]);\n  const [exportHistory, setExportHistory] = useState<ExportHistory[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [showCreateForm, setShowCreateForm] = useState(false);\n  const [activeTab, setActiveTab] = useState<'jobs' | 'history'>('jobs');\n  const [searchTerm, setSearchTerm] = useState('');\n\n  const supabase = createBrowserClient();\n\n  useEffect(() => {\n    loadExportData();\n  }, [organizationId]);\n\n  const loadExportData = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n\n      // Mock export jobs for demonstration\n      const mockJobs: ExportJob[] = [\n        {\n          id: '1',\n          organizationId,\n          name: 'Monthly Financial Report',\n          description: 'Complete financial transactions and revenue data',\n          dataSource: 'finance',\n          format: 'xlsx',\n          filters: {\n            dateRange: 'last_30_days',\n            transactionType: 'all'\n          },\n          schedule: {\n            enabled: true,\n            frequency: 'monthly',\n            time: '09:00',\n            dayOfMonth: 1\n          },\n          status: 'active',\n          lastRun: new Date(Date.now() - 1000 * 60 * 60 * 24).toISOString(),\n          nextRun: new Date(Date.now() + 1000 * 60 * 60 * 24 * 30).toISOString(),\n          fileUrl: '/exports/financial-report-2024-01.xlsx',\n          fileSize: 2048576,\n          recordCount: 1250,\n          createdAt: new Date().toISOString(),\n          updatedAt: new Date().toISOString(),\n          createdBy: 'user-1'\n        },\n        {\n          id: '2',\n          organizationId,\n          name: 'Team Directory Export',\n          description: 'Complete team member contact information',\n          dataSource: 'people',\n          format: 'csv',\n          filters: {\n            status: 'active',\n            includeContacts: true\n          },\n          schedule: {\n            enabled: true,\n            frequency: 'weekly',\n            time: '08:00',\n            dayOfWeek: 1\n          },\n          status: 'active',\n          lastRun: new Date(Date.now() - 1000 * 60 * 60 * 24 * 7).toISOString(),\n          nextRun: new Date(Date.now() + 1000 * 60 * 60 * 24 * 7).toISOString(),\n          fileUrl: '/exports/team-directory-2024-01-15.csv',\n          fileSize: 512000,\n          recordCount: 85,\n          createdAt: new Date().toISOString(),\n          updatedAt: new Date().toISOString(),\n          createdBy: 'user-2'\n        },\n        {\n          id: '3',\n          organizationId,\n          name: 'Project Status Report',\n          description: 'All active projects with current status and metrics',\n          dataSource: 'projects',\n          format: 'json',\n          filters: {\n            status: ['active', 'in_progress'],\n            includeMetrics: true\n          },\n          status: 'paused',\n          lastRun: new Date(Date.now() - 1000 * 60 * 60 * 24 * 14).toISOString(),\n          fileUrl: '/exports/project-status-2024-01-01.json',\n          fileSize: 1024000,\n          recordCount: 24,\n          createdAt: new Date().toISOString(),\n          updatedAt: new Date().toISOString(),\n          createdBy: 'user-1'\n        }\n      ];\n\n      // Mock export history\n      const mockHistory: ExportHistory[] = [\n        {\n          id: 'h1',\n          exportJobId: '1',\n          status: 'completed',\n          startedAt: new Date(Date.now() - 1000 * 60 * 60 * 2).toISOString(),\n          completedAt: new Date(Date.now() - 1000 * 60 * 60 * 2 + 1000 * 60 * 5).toISOString(),\n          fileUrl: '/exports/financial-report-2024-01-15.xlsx',\n          fileSize: 2048576,\n          recordCount: 1250\n        },\n        {\n          id: 'h2',\n          exportJobId: '2',\n          status: 'completed',\n          startedAt: new Date(Date.now() - 1000 * 60 * 60 * 24).toISOString(),\n          completedAt: new Date(Date.now() - 1000 * 60 * 60 * 24 + 1000 * 60 * 2).toISOString(),\n          fileUrl: '/exports/team-directory-2024-01-14.csv',\n          fileSize: 512000,\n          recordCount: 85\n        },\n        {\n          id: 'h3',\n          exportJobId: '1',\n          status: 'failed',\n          startedAt: new Date(Date.now() - 1000 * 60 * 60 * 24 * 2).toISOString(),\n          completedAt: new Date(Date.now() - 1000 * 60 * 60 * 24 * 2 + 1000 * 60 * 3).toISOString(),\n          errorMessage: 'Database connection timeout'\n        }\n      ];\n\n      setExportJobs(mockJobs);\n      setExportHistory(mockHistory);\n\n    } catch (err) {\n      console.error('Error loading export data:', err);\n      setError('Failed to load export data');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const createExportJob = async (jobData: Partial<ExportJob>) => {\n    try {\n      const newJob: ExportJob = {\n        id: crypto.randomUUID(),\n        organizationId,\n        name: jobData.name || '',\n        description: jobData.description,\n        dataSource: jobData.dataSource || 'projects',\n        format: jobData.format || 'csv',\n        filters: jobData.filters || {},\n        schedule: jobData.schedule,\n        status: 'active',\n        createdAt: new Date().toISOString(),\n        updatedAt: new Date().toISOString(),\n        createdBy: 'current-user'\n      };\n\n      setExportJobs(prev => [...prev, newJob]);\n      setShowCreateForm(false);\n    } catch (err) {\n      console.error('Error creating export job:', err);\n      setError('Failed to create export job');\n    }\n  };\n\n  const runExportJob = async (jobId: string) => {\n    try {\n      // Update job status and add to history\n      setExportJobs(prev => prev.map(job => \n        job.id === jobId \n          ? { ...job, lastRun: new Date().toISOString(), status: 'active' as const }\n          : job\n      ));\n\n      // Add running history entry\n      const historyEntry: ExportHistory = {\n        id: crypto.randomUUID(),\n        exportJobId: jobId,\n        status: 'running',\n        startedAt: new Date().toISOString()\n      };\n\n      setExportHistory(prev => [historyEntry, ...prev]);\n\n      // Simulate completion after 3 seconds\n      setTimeout(() => {\n        setExportHistory(prev => prev.map(entry => \n          entry.id === historyEntry.id \n            ? { \n                ...entry, \n                status: 'completed' as const,\n                completedAt: new Date().toISOString(),\n                fileUrl: `/exports/export-${jobId}-${Date.now()}.csv`,\n                fileSize: Math.floor(Math.random() * 2000000) + 100000,\n                recordCount: Math.floor(Math.random() * 1000) + 50\n              }\n            : entry\n        ));\n      }, 3000);\n\n    } catch (err) {\n      console.error('Error running export job:', err);\n      setError('Failed to run export job');\n    }\n  };\n\n  const toggleJobStatus = async (jobId: string) => {\n    try {\n      setExportJobs(prev => prev.map(job => \n        job.id === jobId \n          ? { ...job, status: job.status === 'active' ? 'paused' : 'active' }\n          : job\n      ));\n    } catch (err) {\n      console.error('Error updating job status:', err);\n      setError('Failed to update job status');\n    }\n  };\n\n  const deleteExportJob = async (jobId: string) => {\n    try {\n      setExportJobs(prev => prev.filter(job => job.id !== jobId));\n      setExportHistory(prev => prev.filter(entry => entry.exportJobId !== jobId));\n    } catch (err) {\n      console.error('Error deleting export job:', err);\n      setError('Failed to delete export job');\n    }\n  };\n\n  const downloadFile = (fileUrl: string, fileName: string) => {\n    // In a real implementation, this would handle the actual file download\n    console.log(`Downloading file: ${fileUrl}`);\n    alert(`Download started: ${fileName}`);\n  };\n\n  const getFormatIcon = (format: ExportJob['format']) => {\n    switch (format) {\n      case 'csv': return Files;\n      case 'xlsx': return FileSpreadsheet;\n      case 'json': return FileJson;\n      case 'pdf': return FileText;\n      default: return FileText;\n    }\n  };\n\n  const getStatusIcon = (status: ExportJob['status'] | ExportHistory['status']) => {\n    switch (status) {\n      case 'active':\n      case 'completed': return CheckCircle;\n      case 'failed': return XCircle;\n      case 'paused': return Pause;\n      case 'running': return RefreshCw;\n      default: return AlertCircle;\n    }\n  };\n\n  const getStatusColor = (status: ExportJob['status'] | ExportHistory['status']) => {\n    switch (status) {\n      case 'active': return 'color-success';\n      case 'completed': return 'color-success';\n      case 'failed': return 'color-destructive';\n      case 'paused': return 'color-warning';\n      case 'running': return 'color-accent';\n      default: return 'color-muted';\n    }\n  };\n\n  const formatFileSize = (bytes: number) => {\n    if (bytes === 0) return '0 Bytes';\n    const k = 1024;\n    const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n  };\n\n  const filteredJobs = exportJobs.filter(job =>\n    job.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    job.description?.toLowerCase().includes(searchTerm.toLowerCase())\n  );\n\n  if (loading) {\n    return (\n      <div className=\"stack-lg\">\n        <div className=\"animate-pulse\">\n          <div className=\"h-8 bg-secondary rounded w-1/4 mb-md\"></div>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-md\">\n            {[1, 2, 3].map((i: any) => (\n              <div key={i} className=\"h-48 bg-secondary rounded\"></div>\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <Card title=\"Error\">\n        <div className=\"text-body-sm color-destructive\">{error}</div>\n        <Button onClick={loadExportData} className=\"mt-md\">\n          Retry\n        </Button>\n      </Card>\n    );\n  }\n\n  return (\n    <div className=\"stack-lg\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-heading-3 text-heading-3 color-foreground\">Data Exports</h1>\n          <p className=\"text-body-sm color-muted\">Schedule and manage data exports</p>\n        </div>\n        <Button onClick={() => setShowCreateForm(true)}>\n          <Plus className=\"h-4 w-4 mr-sm\" />\n          New Export Job\n        </Button>\n      </div>\n\n      {/* Tabs */}\n      <div className=\"border-b border-border\">\n        <nav className=\"-mb-px flex cluster-xl\">\n          <button\n            onClick={() => setActiveTab('jobs')}\n            className={`py-sm px-xs border-b-2 form-label text-body-sm ${\n              activeTab === 'jobs'\n                ? 'border-primary color-accent'\n                : 'border-transparent color-muted hover:color-foreground hover:border-muted'\n            }`}\n          >\n            Export Jobs ({exportJobs.length})\n          </button>\n          <button\n            onClick={() => setActiveTab('history')}\n            className={`py-sm px-xs border-b-2 form-label text-body-sm ${\n              activeTab === 'history'\n                ? 'border-primary color-accent'\n                : 'border-transparent color-muted hover:color-foreground hover:border-muted'\n            }`}\n          >\n            Export History ({exportHistory.length})\n          </button>\n        </nav>\n      </div>\n\n      {activeTab === 'jobs' && (\n        <>\n          {/* Search */}\n          <div className=\"relative\">\n            <Search className=\"h-4 w-4 absolute left-3 top-1/2 transform -translate-y-1/2 color-muted\" />\n            <input\n              type=\"text\"\n              placeholder=\"Search export jobs...\"\n              value={searchTerm}\n              onChange={(e: React.ChangeEvent<HTMLInputElement>) => setSearchTerm(e.target.value)}\n              className=\"w-full pl-2xl pr-md py-sm border rounded-md focus:outline-none focus:ring-2 focus:ring-primary\"\n            />\n          </div>\n\n          {/* Export Jobs Grid */}\n          {filteredJobs.length > 0 ? (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-lg\">\n              {filteredJobs.map((job: any) => {\n                const FormatIcon = getFormatIcon(job.format);\n                const StatusIcon = getStatusIcon(job.status);\n                \n                return (\n                  <Card key={job.id} className=\"p-lg\">\n                    <div className=\"flex items-start justify-between mb-md\">\n                      <div className=\"flex items-center cluster-sm\">\n                        <div className=\"p-sm bg-accent/10 rounded-lg\">\n                          <FormatIcon className=\"h-5 w-5 color-accent\" />\n                        </div>\n                        <div>\n                          <h3 className=\"text-heading-4 color-foreground\">{job.name}</h3>\n                          <div className=\"flex items-center cluster-sm mt-xs\">\n                            <StatusIcon className={`h-4 w-4 ${getStatusColor(job.status)}`} />\n                            <Badge className={`text-body-sm ${\n                              job.status === 'active' ? 'bg-success/10 color-success' :\n                              job.status === 'paused' ? 'bg-warning/10 color-warning' :\n                              'bg-secondary color-muted'\n                            }`}>\n                              {job.status}\n                            </Badge>\n                          </div>\n                        </div>\n                      </div>\n                      <div className=\"flex items-center cluster-xs\">\n                        <Button\n                          variant=\"ghost\"\n                         \n                          onClick={() => runExportJob(job.id)}\n                        >\n                          <Play className=\"h-3 w-3\" />\n                        </Button>\n                        <Button\n                          variant=\"ghost\"\n                         \n                          onClick={() => deleteExportJob(job.id)}\n                        >\n                          <Trash2 className=\"h-3 w-3\" />\n                        </Button>\n                      </div>\n                    </div>\n\n                    {job.description && (\n                      <p className=\"text-body-sm color-muted mb-md\">{job.description}</p>\n                    )}\n\n                    <div className=\"stack-sm\">\n                      <div className=\"flex items-center justify-between text-body-sm\">\n                        <span className=\"color-muted\">Data Source:</span>\n                        <Badge variant=\"outline\">\n                          {job.dataSource}\n                        </Badge>\n                      </div>\n                      \n                      <div className=\"flex items-center justify-between text-body-sm\">\n                        <span className=\"color-muted\">Format:</span>\n                        <span className=\"form-label uppercase\">{job.format}</span>\n                      </div>\n\n                      {job.schedule?.enabled && (\n                        <div className=\"flex items-center justify-between text-body-sm\">\n                          <span className=\"color-muted\">Schedule:</span>\n                          <Badge variant=\"outline\">\n                            {job.schedule.frequency}\n                          </Badge>\n                        </div>\n                      )}\n\n                      {job.lastRun && (\n                        <div className=\"flex items-center justify-between text-body-sm\">\n                          <span className=\"color-muted\">Last run:</span>\n                          <span className=\"text-body-sm color-muted\">\n                            {new Date(job.lastRun).toLocaleDateString()}\n                          </span>\n                        </div>\n                      )}\n\n                      {job.recordCount && (\n                        <div className=\"flex items-center justify-between text-body-sm\">\n                          <span className=\"color-muted\">Records:</span>\n                          <span className=\"form-label\">{job.recordCount.toLocaleString()}</span>\n                        </div>\n                      )}\n                    </div>\n\n                    <div className=\"flex items-center justify-between mt-md pt-md border-t\">\n                      {job.fileUrl ? (\n                        <Button\n                          variant=\"outline\"\n                         \n                          onClick={() => downloadFile(job.fileUrl!, `${job.name}.${job.format}`)}\n                        >\n                          <Download className=\"h-3 w-3 mr-xs\" />\n                          Download\n                        </Button>\n                      ) : (\n                        <div></div>\n                      )}\n                      \n                      <Button\n                        variant=\"outline\"\n                       \n                        onClick={() => toggleJobStatus(job.id)}\n                      >\n                        {job.status === 'active' ? (\n                          <Pause className=\"h-3 w-3 mr-xs\" />\n                        ) : (\n                          <Play className=\"h-3 w-3 mr-xs\" />\n                        )}\n                        {job.status === 'active' ? 'Pause' : 'Activate'}\n                      </Button>\n                    </div>\n                  </Card>\n                );\n              })}\n            </div>\n          ) : (\n            <Card className=\"p-xl text-center\">\n              <Archive className=\"h-12 w-12 color-muted mx-auto mb-md\" />\n              <h3 className=\"text-body form-label color-foreground mb-sm\">\n                No export jobs found\n              </h3>\n              <p className=\"text-body-sm color-muted mb-md\">\n                {searchTerm \n                  ? 'Try adjusting your search terms'\n                  : 'Create your first export job to get started'\n                }\n              </p>\n              <Button onClick={() => setShowCreateForm(true)}>\n                <Plus className=\"h-4 w-4 mr-sm\" />\n                Create Export Job\n              </Button>\n            </Card>\n          )}\n        </>\n      )}\n\n      {activeTab === 'history' && (\n        <div className=\"stack-md\">\n          {exportHistory.length > 0 ? (\n            exportHistory.map((entry: any) => {\n              const job = exportJobs.find(j => j.id === entry.exportJobId);\n              const StatusIcon = getStatusIcon(entry.status);\n              \n              return (\n                <Card key={entry.id} className=\"p-md\">\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center cluster\">\n                      <StatusIcon className={`h-5 w-5 ${getStatusColor(entry.status)}`} />\n                      <div>\n                        <h4 className=\"form-label color-foreground\">\n                          {job?.name || 'Unknown Job'}\n                        </h4>\n                        <div className=\"flex items-center cluster text-body-sm color-muted\">\n                          <span>Started: {new Date(entry.startedAt).toLocaleString()}</span>\n                          {entry.completedAt && (\n                            <span>Completed: {new Date(entry.completedAt).toLocaleString()}</span>\n                          )}\n                          {entry.recordCount && (\n                            <span>{entry.recordCount.toLocaleString()} records</span>\n                          )}\n                          {entry.fileSize && (\n                            <span>{formatFileSize(entry.fileSize)}</span>\n                          )}\n                        </div>\n                        {entry.errorMessage && (\n                          <div className=\"text-body-sm color-destructive mt-xs\">\n                            Error: {entry.errorMessage}\n                          </div>\n                        )}\n                      </div>\n                    </div>\n                    \n                    {entry.fileUrl && entry.status === 'completed' && (\n                      <Button\n                        variant=\"outline\"\n                       \n                        onClick={() => downloadFile(entry.fileUrl!, `export-${entry.id}.${job?.format || 'csv'}`)}\n                      >\n                        <Download className=\"h-3 w-3 mr-xs\" />\n                        Download\n                      </Button>\n                    )}\n                  </div>\n                </Card>\n              );\n            })\n          ) : (\n            <Card className=\"p-xl text-center\">\n              <Clock className=\"h-12 w-12 color-muted mx-auto mb-md\" />\n              <h3 className=\"text-body form-label color-foreground mb-sm\">\n                No export history\n              </h3>\n              <p className=\"text-body-sm color-muted\">\n                Export history will appear here once you run some export jobs\n              </p>\n            </Card>\n          )}\n        </div>\n      )}\n\n      {/* Create Export Job Form */}\n      {showCreateForm && (\n        <div className=\"fixed inset-0 bg-foreground/30 backdrop-blur-sm flex items-center justify-center z-50\">\n          <Card className=\"w-full max-w-2xl p-lg max-h-[90vh] overflow-y-auto\">\n            <h3 className=\"text-body text-heading-4 mb-md\">Create Export Job</h3>\n            <form\n              onSubmit={(e: any) => {\n                e.preventDefault();\n                const formData = new FormData(e.currentTarget);\n                const jobData = {\n                  name: formData.get('name') as string,\n                  description: formData.get('description') as string,\n                  dataSource: formData.get('dataSource') as ExportJob['dataSource'],\n                  format: formData.get('format') as ExportJob['format'],\n                  filters: {}\n                };\n                createExportJob(jobData);\n              }}\n            >\n              <div className=\"stack-md\">\n                <div>\n                  <label className=\"block text-body-sm form-label color-foreground mb-xs\">\n                    Export Name\n                  </label>\n                  <input\n                    name=\"name\"\n                    type=\"text\"\n                    required\n                    className=\"w-full  px-md py-sm border rounded-md focus:outline-none focus:ring-2 focus:ring-primary\"\n                    placeholder=\"e.g., Monthly Financial Export\"\n                  />\n                </div>\n                \n                <div>\n                  <label className=\"block text-body-sm form-label color-foreground mb-xs\">\n                    Description\n                  </label>\n                  <textarea\n                    name=\"description\"\n                    rows={3}\n                    className=\"w-full  px-md py-sm border rounded-md focus:outline-none focus:ring-2 focus:ring-primary\"\n                    placeholder=\"Brief description of this export...\"\n                  />\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-md\">\n                  <div>\n                    <label className=\"block text-body-sm form-label color-foreground mb-xs\">\n                      Data Source\n                    </label>\n                    <select\n                      name=\"dataSource\"\n                      required\n                      className=\"w-full  px-md py-sm border rounded-md focus:outline-none focus:ring-2 focus:ring-primary\"\n                    >\n                      <option value=\"projects\">Projects</option>\n                      <option value=\"people\">People</option>\n                      <option value=\"finance\">Finance</option>\n                      <option value=\"events\">Events</option>\n                      <option value=\"custom_query\">Custom Query</option>\n                    </select>\n                  </div>\n\n                  <div>\n                    <label className=\"block text-body-sm form-label color-foreground mb-xs\">\n                      Export Format\n                    </label>\n                    <select\n                      name=\"format\"\n                      required\n                      className=\"w-full  px-md py-sm border rounded-md focus:outline-none focus:ring-2 focus:ring-primary\"\n                    >\n                      <option value=\"csv\">CSV</option>\n                      <option value=\"xlsx\">Excel (XLSX)</option>\n                      <option value=\"json\">JSON</option>\n                      <option value=\"pdf\">PDF</option>\n                    </select>\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"flex items-center justify-end cluster-sm mt-lg\">\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  onClick={() => setShowCreateForm(false)}\n                >\n                  Cancel\n                </Button>\n                <Button type=\"submit\">\n                  Create Export Job\n                </Button>\n              </div>\n            </form>\n          </Card>\n        </div>\n      )}\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ghxstship/apps/web/app/(app)/(shell)/analytics/exports/drawers/ExportViewDrawer.tsx","messages":[{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":257,"column":51,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[9663,9664],"text":"&quot;"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[9663,9664],"text":"&ldquo;"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[9663,9664],"text":"&#34;"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[9663,9664],"text":"&rdquo;"},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":257,"column":80,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[9692,9693],"text":"&quot;"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[9692,9693],"text":"&ldquo;"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[9692,9693],"text":"&#34;"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[9692,9693],"text":"&rdquo;"},"desc":"Replace with `&rdquo;`."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { FileText, Download, Calendar, Clock, AlertCircle, CheckCircle, XCircle, Loader, User, Database, Filter, Mail, Settings, RotateCcw, Pause, Copy } from \"lucide-react\";\nimport React from 'react';\nimport { Badge } from '@ghxstship/ui/components/Badge';\nimport { Button } from '@ghxstship/ui/components/Button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@ghxstship/ui/components/Card';\nimport { Progress } from '@ghxstship/ui/components/Progress';\nimport type { ExportJob } from '../types';\n\ninterface ExportViewDrawerProps {\n  exportJob: ExportJob;\n  onDownload: () => void;\n  onCancel: () => void;\n  onRetry: () => void;\n  onDuplicate: () => void;\n  onClose: () => void;\n}\n\nexport default function ExportViewDrawer({\n  exportJob,\n  onDownload,\n  onCancel,\n  onRetry,\n  onDuplicate,\n  onClose\n}: ExportViewDrawerProps) {\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case 'completed':\n        return <CheckCircle className=\"h-5 w-5 text-green-500\" />;\n      case 'processing':\n        return <Loader className=\"h-5 w-5 text-blue-500 animate-spin\" />;\n      case 'failed':\n        return <XCircle className=\"h-5 w-5 text-red-500\" />;\n      case 'cancelled':\n        return <XCircle className=\"h-5 w-5 text-gray-500\" />;\n      default:\n        return <AlertCircle className=\"h-5 w-5 text-yellow-500\" />;\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'completed':\n        return 'bg-green-100 text-green-800';\n      case 'processing':\n        return 'bg-blue-100 text-blue-800';\n      case 'failed':\n        return 'bg-red-100 text-red-800';\n      case 'cancelled':\n        return 'bg-gray-100 text-gray-800';\n      default:\n        return 'bg-yellow-100 text-yellow-800';\n    }\n  };\n\n  const getTypeIcon = (type: string) => {\n    switch (type) {\n      case 'csv':\n        return '📊';\n      case 'excel':\n        return '📈';\n      case 'pdf':\n        return '📄';\n      case 'json':\n        return '🔧';\n      default:\n        return '📁';\n    }\n  };\n\n  const formatFileSize = (bytes?: number) => {\n    if (!bytes) return 'Unknown';\n    const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n    const i = Math.floor(Math.log(bytes) / Math.log(1024));\n    return Math.round(bytes / Math.pow(1024, i) * 100) / 100 + ' ' + sizes[i];\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-start justify-between\">\n        <div className=\"flex items-center space-x-3\">\n          <div className=\"text-3xl\">{getTypeIcon(exportJob.type)}</div>\n          <div>\n            <h2 className=\"text-xl font-semibold text-foreground\">{exportJob.name}</h2>\n            <p className=\"text-muted-foreground\">{exportJob.description}</p>\n            <div className=\"flex items-center space-x-2 mt-2\">\n              {getStatusIcon(exportJob.status)}\n              <Badge className={getStatusColor(exportJob.status)}>\n                {exportJob.status}\n              </Badge>\n              <Badge variant=\"outline\" className=\"uppercase\">\n                {exportJob.type}\n              </Badge>\n            </div>\n          </div>\n        </div>\n        <div className=\"flex items-center space-x-2\">\n          {exportJob.status === 'completed' && exportJob.downloadUrl && (\n            <Button onClick={onDownload} className=\"bg-green-600 hover:bg-green-700\">\n              <Download className=\"h-4 w-4 mr-2\" />\n              Download\n            </Button>\n          )}\n          {exportJob.status === 'processing' && (\n            <Button variant=\"outline\" onClick={onCancel}>\n              <Pause className=\"h-4 w-4 mr-2\" />\n              Cancel\n            </Button>\n          )}\n          {exportJob.status === 'failed' && (\n            <Button variant=\"outline\" onClick={onRetry}>\n              <RotateCcw className=\"h-4 w-4 mr-2\" />\n              Retry\n            </Button>\n          )}\n          <Button variant=\"outline\" onClick={onDuplicate}>\n            <Copy className=\"h-4 w-4 mr-2\" />\n            Duplicate\n          </Button>\n        </div>\n      </div>\n\n      {/* Progress Bar for Processing Jobs */}\n      {exportJob.status === 'processing' && exportJob.progress && (\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"text-base\">Export Progress</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-2\">\n              <div className=\"flex justify-between text-sm\">\n                <span>Processing...</span>\n                <span>{exportJob.progress}%</span>\n              </div>\n              <Progress value={exportJob.progress} className=\"h-3\" />\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Export Details */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"text-base\">Export Information</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"grid grid-cols-2 gap-4 text-sm\">\n              <div>\n                <span className=\"text-muted-foreground\">Data Source:</span>\n                <p className=\"font-medium capitalize flex items-center\">\n                  <Database className=\"h-4 w-4 mr-1\" />\n                  {exportJob.dataSource}\n                </p>\n              </div>\n              <div>\n                <span className=\"text-muted-foreground\">File Type:</span>\n                <p className=\"font-medium uppercase\">{exportJob.type}</p>\n              </div>\n              {exportJob.fileSize && (\n                <div>\n                  <span className=\"text-muted-foreground\">File Size:</span>\n                  <p className=\"font-medium\">{formatFileSize(exportJob.fileSize)}</p>\n                </div>\n              )}\n              <div>\n                <span className=\"text-muted-foreground\">Filters:</span>\n                <p className=\"font-medium\">{exportJob.filters.length} applied</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"text-base\">Metadata</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"space-y-3 text-sm\">\n              <div className=\"flex items-center justify-between\">\n                <span className=\"text-muted-foreground flex items-center\">\n                  <User className=\"h-4 w-4 mr-2\" />\n                  Created By:\n                </span>\n                <span className=\"font-medium\">{exportJob.createdBy}</span>\n              </div>\n              <div className=\"flex items-center justify-between\">\n                <span className=\"text-muted-foreground flex items-center\">\n                  <Calendar className=\"h-4 w-4 mr-2\" />\n                  Created:\n                </span>\n                <span className=\"font-medium\">\n                  {new Date(exportJob.createdAt).toLocaleString()}\n                </span>\n              </div>\n              <div className=\"flex items-center justify-between\">\n                <span className=\"text-muted-foreground flex items-center\">\n                  <Clock className=\"h-4 w-4 mr-2\" />\n                  Updated:\n                </span>\n                <span className=\"font-medium\">\n                  {new Date(exportJob.updatedAt).toLocaleString()}\n                </span>\n              </div>\n              {exportJob.completedAt && (\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-muted-foreground flex items-center\">\n                    <CheckCircle className=\"h-4 w-4 mr-2\" />\n                    Completed:\n                  </span>\n                  <span className=\"font-medium\">\n                    {new Date(exportJob.completedAt).toLocaleString()}\n                  </span>\n                </div>\n              )}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Export Configuration */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"text-base\">Export Configuration</CardTitle>\n          <CardDescription>\n            Configuration settings used for this export\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            <div>\n              <h4 className=\"font-medium mb-3 flex items-center\">\n                <Settings className=\"h-4 w-4 mr-2\" />\n                Format Settings\n              </h4>\n              <div className=\"space-y-2 text-sm\">\n                <div className=\"flex justify-between\">\n                  <span className=\"text-muted-foreground\">Include Headers:</span>\n                  <span className=\"font-medium\">\n                    {exportJob.format.includeHeaders ? 'Yes' : 'No'}\n                  </span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-muted-foreground\">Date Format:</span>\n                  <span className=\"font-medium\">{exportJob.format.dateFormat}</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-muted-foreground\">Number Format:</span>\n                  <span className=\"font-medium\">{exportJob.format.numberFormat}</span>\n                </div>\n                {exportJob.format.delimiter && (\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-muted-foreground\">Delimiter:</span>\n                    <span className=\"font-medium\">\"{exportJob.format.delimiter}\"</span>\n                  </div>\n                )}\n                {exportJob.format.compression && (\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-muted-foreground\">Compression:</span>\n                    <span className=\"font-medium\">Enabled</span>\n                  </div>\n                )}\n              </div>\n            </div>\n\n            <div>\n              <h4 className=\"font-medium mb-3 flex items-center\">\n                <Mail className=\"h-4 w-4 mr-2\" />\n                Recipients\n              </h4>\n              {exportJob.recipients.length > 0 ? (\n                <div className=\"space-y-2\">\n                  {exportJob.recipients.map((email, index) => (\n                    <div key={index} className=\"flex items-center space-x-2\">\n                      <Badge variant=\"outline\" className=\"text-xs\">\n                        {email}\n                      </Badge>\n                    </div>\n                  ))}\n                </div>\n              ) : (\n                <p className=\"text-sm text-muted-foreground\">No recipients configured</p>\n              )}\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Filters */}\n      {exportJob.filters.length > 0 && (\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"text-base\">Applied Filters</CardTitle>\n            <CardDescription>\n              Data filters applied to this export\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              {exportJob.filters.map((filter, index) => (\n                <div\n                  key={index}\n                  className=\"border rounded-lg p-3\"\n                >\n                  <div className=\"flex items-center justify-between mb-2\">\n                    <h4 className=\"font-medium flex items-center\">\n                      <Filter className=\"h-4 w-4 mr-2\" />\n                      {filter.field}\n                    </h4>\n                    <Badge variant=\"outline\">{filter.operator}</Badge>\n                  </div>\n                  <p className=\"text-sm text-muted-foreground\">\n                    Value: {Array.isArray(filter.value) ? filter.value.join(', ') : filter.value}\n                  </p>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Error Details */}\n      {exportJob.status === 'failed' && exportJob.errorMessage && (\n        <Card className=\"border-red-200\">\n          <CardHeader>\n            <CardTitle className=\"text-base text-red-700 flex items-center\">\n              <AlertCircle className=\"h-4 w-4 mr-2\" />\n              Error Details\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"bg-red-50 border border-red-200 rounded p-4\">\n              <p className=\"text-sm text-red-700\">{exportJob.errorMessage}</p>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Query Details */}\n      {exportJob.query && (\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"text-base\">Query</CardTitle>\n            <CardDescription>\n              SQL query or data extraction configuration\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <pre className=\"bg-muted p-4 rounded text-sm font-mono overflow-x-auto\">\n              {exportJob.query}\n            </pre>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ghxstship/apps/web/app/(app)/(shell)/analytics/overview/OverviewClient.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadOverviewData'. Either include it or remove the dependency array.","line":51,"column":6,"nodeType":"ArrayExpression","endLine":51,"endColumn":22,"suggestions":[{"desc":"Update the dependencies array to be: [loadOverviewData, organizationId]","fix":{"range":[1341,1357],"text":"[loadOverviewData, organizationId]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\n\nimport { BarChart3, TrendingUp, Users, DollarSign, Calendar, Activity, Target, Clock, ArrowUpRight, ArrowDownRight, Minus } from \"lucide-react\";\nimport { useState, useEffect } from 'react';\nimport { Card, Badge, Button } from '@ghxstship/ui';\nimport { createBrowserClient } from '@ghxstship/auth';\n\ninterface AnalyticsMetric {\n  id: string;\n  title: string;\n  value: string;\n  change: number;\n  changeType: 'increase' | 'decrease' | 'neutral';\n  icon;\n  description: string;\n}\n\ninterface RecentActivity {\n  id: string;\n  type: string;\n  description: string;\n  timestamp: string;\n  user: string;\n}\n\ninterface TopPerformer {\n  id: string;\n  name: string;\n  category: string;\n  value: string;\n  change: number;\n}\n\ninterface OverviewClientProps {\n  organizationId: string;\n  translations: Record<string, string>;\n}\n\nexport default function OverviewClient({ organizationId, translations }: OverviewClientProps) {\n  const [metrics, setMetrics] = useState<AnalyticsMetric[]>([]);\n  const [recentActivity, setRecentActivity] = useState<RecentActivity[]>([]);\n  const [topPerformers, setTopPerformers] = useState<TopPerformer[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  const supabase = createBrowserClient();\n\n  useEffect(() => {\n    loadOverviewData();\n  }, [organizationId]);\n\n  const loadOverviewData = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n\n      // Load analytics metrics from various tables\n      const [\n        projectsData,\n        peopleData,\n        financeData,\n        eventsData\n      ] = await Promise.all([\n        supabase.from('projects').select('*').eq('organization_id', organizationId),\n        supabase.from('people').select('*').eq('organization_id', organizationId),\n        supabase.from('finance_transactions').select('*').eq('organization_id', organizationId),\n        supabase.from('events').select('*').eq('organization_id', organizationId)\n      ]);\n\n      // Calculate metrics\n      const totalProjects = projectsData.data?.length || 0;\n      const activeProjects = projectsData.data?.filter((p: unknown) => p.status === 'active').length || 0;\n      const totalPeople = peopleData.data?.length || 0;\n      const totalRevenue = financeData.data?.filter((t: unknown) => t.type === 'income').reduce((sum: number, t) => sum + (t.amount || 0), 0) || 0;\n      const totalEvents = eventsData.data?.length || 0;\n\n      const calculatedMetrics: AnalyticsMetric[] = [\n        {\n          id: '1',\n          title: 'Active Projects',\n          value: activeProjects.toString(),\n          change: 12.5,\n          changeType: 'increase',\n          icon: Target,\n          description: `${totalProjects} total projects`\n        },\n        {\n          id: '2',\n          title: 'Team Members',\n          value: totalPeople.toString(),\n          change: 8.2,\n          changeType: 'increase',\n          icon: Users,\n          description: 'Active team members'\n        },\n        {\n          id: '3',\n          title: 'Revenue',\n          value: `$${(totalRevenue / 1000).toFixed(1)}k`,\n          change: 15.3,\n          changeType: 'increase',\n          icon: DollarSign,\n          description: 'Total revenue this period'\n        },\n        {\n          id: '4',\n          title: 'Events',\n          value: totalEvents.toString(),\n          change: -2.1,\n          changeType: 'decrease',\n          icon: Calendar,\n          description: 'Scheduled events'\n        }\n      ];\n\n      setMetrics(calculatedMetrics);\n\n      // Load recent activity (mock data for now)\n      const mockActivity: RecentActivity[] = [\n        {\n          id: '1',\n          type: 'project_created',\n          description: 'New project \"Blackwater Reverb\" created',\n          timestamp: new Date(Date.now() - 1000 * 60 * 30).toISOString(),\n          user: 'Captain Jack Sparrow'\n        },\n        {\n          id: '2',\n          type: 'team_member_added',\n          description: 'Elizabeth Swann joined the crew',\n          timestamp: new Date(Date.now() - 1000 * 60 * 60 * 2).toISOString(),\n          user: 'Will Turner'\n        },\n        {\n          id: '3',\n          type: 'invoice_paid',\n          description: 'Invoice #INV-001 marked as paid',\n          timestamp: new Date(Date.now() - 1000 * 60 * 60 * 4).toISOString(),\n          user: 'Hector Barbossa'\n        },\n        {\n          id: '4',\n          type: 'event_scheduled',\n          description: 'Main Deck Performance scheduled',\n          timestamp: new Date(Date.now() - 1000 * 60 * 60 * 8).toISOString(),\n          user: 'Joshamee Gibbs'\n        }\n      ];\n\n      setRecentActivity(mockActivity);\n\n      // Load top performers (mock data)\n      const mockPerformers: TopPerformer[] = [\n        {\n          id: '1',\n          name: 'Blackwater Reverb',\n          category: 'Project',\n          value: '$75,000',\n          change: 25.5\n        },\n        {\n          id: '2',\n          name: 'Captain Jack Sparrow',\n          category: 'Team Member',\n          value: '98% Rating',\n          change: 12.3\n        },\n        {\n          id: '3',\n          name: 'Main Deck Takeover',\n          category: 'Event',\n          value: '500 Attendees',\n          change: 18.7\n        }\n      ];\n\n      setTopPerformers(mockPerformers);\n\n    } catch (err) {\n      console.error('Error loading overview data:', err);\n      setError('Failed to load analytics overview');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const formatTimestamp = (timestamp: string) => {\n    const date = new Date(timestamp);\n    const now = new Date();\n    const diffMs = now.getTime() - date.getTime();\n    const diffMins = Math.floor(diffMs / (1000 * 60));\n    const diffHours = Math.floor(diffMs / (1000 * 60 * 60));\n    const diffDays = Math.floor(diffMs / (1000 * 60 * 60 * 24));\n\n    if (diffMins < 60) return `${diffMins}m ago`;\n    if (diffHours < 24) return `${diffHours}h ago`;\n    return `${diffDays}d ago`;\n  };\n\n  const getChangeIcon = (changeType: string) => {\n    switch (changeType) {\n      case 'increase': return <ArrowUpRight className=\"h-4 w-4 color-success\" />;\n      case 'decrease': return <ArrowDownRight className=\"h-4 w-4 color-destructive\" />;\n      default: return <Minus className=\"h-4 w-4 color-muted\" />;\n    }\n  };\n\n  const getChangeColor = (changeType: string) => {\n    switch (changeType) {\n      case 'increase': return 'color-success';\n      case 'decrease': return 'color-destructive';\n      default: return 'color-muted';\n    }\n  };\n\n  if (loading) {\n    return (\n      <div className=\"stack-lg\">\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-md\">\n          {[1, 2, 3, 4].map((i: unknown) => (\n            <Card key={i} className=\"animate-pulse\">\n              <div className=\"h-20 bg-secondary rounded\"></div>\n            </Card>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <Card title=\"Error\">\n        <div className=\"text-body-sm color-destructive\">{error}</div>\n        <Button onClick={loadOverviewData} className=\"mt-md\">\n          Retry\n        </Button>\n      </Card>\n    );\n  }\n\n  return (\n    <div className=\"stack-lg\">\n      {/* Key Metrics */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-md\">\n        {metrics.map((metric: unknown) => {\n          const IconComponent = metric.icon;\n          return (\n            <Card key={metric.id} className=\"p-lg\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center cluster-sm\">\n                  <IconComponent className=\"h-5 w-5 color-accent\" />\n                  <span className=\"text-body-sm form-label color-muted\">\n                    {metric.title}\n                  </span>\n                </div>\n                {getChangeIcon(metric.changeType)}\n              </div>\n              <div className=\"mt-sm\">\n                <div className=\"text-heading-3 text-heading-3 color-foreground\">\n                  {metric.value}\n                </div>\n                <div className=\"flex items-center cluster-xs mt-xs\">\n                  <span className={`text-body-sm form-label ${getChangeColor(metric.changeType)}`}>\n                    {metric.change > 0 ? '+' : ''}{metric.change}%\n                  </span>\n                  <span className=\"text-body-sm color-muted\">\n                    vs last period\n                  </span>\n                </div>\n                <div className=\"text-body-sm color-muted mt-xs\">\n                  {metric.description}\n                </div>\n              </div>\n            </Card>\n          );\n        })}\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-lg\">\n        {/* Recent Activity */}\n        <Card title=\"Recent Activity\" className=\"p-lg\">\n          <div className=\"stack-md\">\n            {recentActivity.map((activity: unknown) => (\n              <div key={activity.id} className=\"flex items-start cluster-sm\">\n                <div className=\"flex-shrink-0\">\n                  <Activity className=\"h-4 w-4 color-accent mt-xs\" />\n                </div>\n                <div className=\"flex-1 min-w-0\">\n                  <div className=\"text-body-sm color-foreground\">\n                    {activity.description}\n                  </div>\n                  <div className=\"flex items-center cluster-sm mt-xs\">\n                    <span className=\"text-body-sm color-muted\">\n                      by {activity.user}\n                    </span>\n                    <span className=\"text-body-sm color-muted/60\">•</span>\n                    <span className=\"text-body-sm color-muted\">\n                      {formatTimestamp(activity.timestamp)}\n                    </span>\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n          <div className=\"mt-md pt-md border-t\">\n            <Button className=\"w-full\">\n              View All Activity\n            </Button>\n          </div>\n        </Card>\n\n        {/* Top Performers */}\n        <Card title=\"Top Performers\" className=\"p-lg\">\n          <div className=\"stack-md\">\n            {topPerformers.map((performer, index) => (\n              <div key={performer.id} className=\"flex items-center justify-between\">\n                <div className=\"flex items-center cluster-sm\">\n                  <div className=\"flex-shrink-0\">\n                    <Badge variant=\"outline\">#{index + 1}</Badge>\n                  </div>\n                  <div>\n                    <div className=\"text-body-sm form-label color-foreground\">\n                      {performer.name}\n                    </div>\n                    <div className=\"text-body-sm color-muted\">\n                      {performer.category}\n                    </div>\n                  </div>\n                </div>\n                <div className=\"text-right\">\n                  <div className=\"text-body-sm form-label color-foreground\">\n                    {performer.value}\n                  </div>\n                  <div className=\"text-body-sm color-success\">\n                    +{performer.change}%\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n          <div className=\"mt-md pt-md border-t\">\n            <Button className=\"w-full\">\n              View Detailed Analytics\n            </Button>\n          </div>\n        </Card>\n      </div>\n\n      {/* Quick Actions */}\n      <Card title=\"Quick Actions\" className=\"p-lg\">\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-md\">\n          <Button variant=\"outline\" className=\"flex items-center cluster-sm\">\n            <BarChart3 className=\"h-4 w-4\" />\n            <span>Create Dashboard</span>\n          </Button>\n          <Button variant=\"outline\" className=\"flex items-center cluster-sm\">\n            <TrendingUp className=\"h-4 w-4\" />\n            <span>Generate Report</span>\n          </Button>\n          <Button variant=\"outline\" className=\"flex items-center cluster-sm\">\n            <Clock className=\"h-4 w-4\" />\n            <span>Schedule Export</span>\n          </Button>\n        </div>\n      </Card>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ghxstship/apps/web/app/(app)/(shell)/analytics/reports/CreateReportClient.tsx","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: ',' expected.","line":177,"column":40,"nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { User, FileText, Settings, Award, Calendar, TrendingUp, Activity, Clock, Plus, Search, Play, Trash2 } from \"lucide-react\";\nimport React, { useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\n// import { z } from 'zod';\nimport { createClient } from '@/lib/supabase/client';\nimport { Card, Badge, Button, Drawer } from '@ghxstship/ui';\nimport { tryCatch, Result, reportError } from '@ghxstship/ui/utils/error-handling';\n\nconst ReportSchema = z.object({\n  name: z.string().min(1, 'Report name is required'),\n  description: z.string().optional(),\n  type: z.enum(['financial', 'operational', 'performance', 'custom']).default('operational'),\n  dataSource: z.enum(['projects', 'people', 'finance', 'events', 'assets', 'companies']).default('projects'),\n  fields: z.array(z.string()).min(1, 'At least one field is required'),\n  filters: z.record(z.any()).default({}),\n  groupBy: z.array(z.string()).default([]),\n  sortBy: z.object({\n    field: z.string(),\n    direction: z.enum(['asc', 'desc']).default('desc')\n  }).optional(),\n  schedule: z.object({\n    enabled: z.boolean().default(false),\n    frequency: z.enum(['daily', 'weekly', 'monthly', 'quarterly']).default('weekly'),\n    time: z.string().default('09:00'),\n    dayOfWeek: z.number().min(0).max(6).optional(),\n    dayOfMonth: z.number().min(1).max(31).optional(),\n    recipients: z.array(z.string().email()).default([])\n  }).optional(),\n  format: z.enum(['table', 'chart', 'summary']).default('table'),\n  isPublic: z.boolean().default(false)\n});\n\ntype ReportFormData = z.infer<typeof ReportSchema>;\n\ninterface CreateReportClientProps {\n  organizationId: string;\n  onSuccess?: (report: unknown) => void;\n  onCancel?: () => void;\n}\n\nconst REPORT_TYPES = [\n  { value: 'financial', label: 'Financial Report', description: 'Revenue, expenses, budgets' },\n  { value: 'operational', label: 'Operational Report', description: 'Projects, tasks, performance' },\n  { value: 'performance', label: 'Performance Report', description: 'KPIs, metrics, analytics' },\n  { value: 'custom', label: 'Custom Report', description: 'Custom data analysis' }\n];\n\nconst DATA_SOURCES = [\n  { value: 'projects', label: 'Projects', fields: ['name', 'status', 'budget', 'start_date', 'end_date', 'progress'] },\n  { value: 'people', label: 'People', fields: ['name', 'email', 'role', 'department', 'hire_date', 'status'] },\n  { value: 'finance', label: 'Finance', fields: ['amount', 'type', 'category', 'date', 'status', 'account'] },\n  { value: 'events', label: 'Events', fields: ['title', 'type', 'date', 'location', 'attendees', 'status'] },\n  { value: 'assets', label: 'Assets', fields: ['name', 'type', 'category', 'status', 'location', 'value'] },\n  { value: 'companies', label: 'Companies', fields: ['name', 'industry', 'status', 'contact', 'revenue', 'employees'] }\n];\n\nconst FREQUENCIES = [\n  { value: 'daily', label: 'Daily' },\n  { value: 'weekly', label: 'Weekly' },\n  { value: 'monthly', label: 'Monthly' },\n  { value: 'quarterly', label: 'Quarterly' }\n];\n\nconst DAYS_OF_WEEK = [\n  { value: 0, label: 'Sunday' },\n  { value: 1, label: 'Monday' },\n  { value: 2, label: 'Tuesday' },\n  { value: 3, label: 'Wednesday' },\n  { value: 4, label: 'Thursday' },\n  { value: 5, label: 'Friday' },\n  { value: 6, label: 'Saturday' }\n];\n\nexport default function CreateReportClient({ organizationId, onSuccess, onCancel }: CreateReportClientProps) {\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [selectedFields, setSelectedFields] = useState<string[]>([]);\n  const [filterFields, setFilterFields] = useState<Array<{ field: string; operator: string; value: string }>>([]);\n  const supabase = createClient();\n\n  const {\n    register,\n    handleSubmit,\n    formState: { errors },\n    watch,\n    setValue,\n    reset\n  } = useForm<ReportFormData>({\n    resolver: zodResolver(ReportSchema),\n    defaultValues: {\n      name: '',\n      description: '',\n      type: 'operational',\n      dataSource: 'projects',\n      fields: [],\n      filters: {},\n      groupBy: [],\n      format: 'table',\n      isPublic: false,\n      schedule: {\n        enabled: false,\n        frequency: 'weekly',\n        time: '09:00',\n        recipients: []\n      }\n    }\n  });\n\n  const dataSource = watch('dataSource');\n  const scheduleEnabled = watch('schedule.enabled');\n  const frequency = watch('schedule.frequency');\n\n  const availableFields = DATA_SOURCES.find(ds => ds.value === dataSource)?.fields || [];\n\n  const toggleField = (field: string) => {\n    const newFields = selectedFields.includes(field)\n      ? selectedFields.filter(f => f !== field)\n      : [...selectedFields, field];\n    \n    setSelectedFields(newFields);\n    setValue('fields', newFields);\n  };\n\n  const addFilter = () => {\n    setFilterFields([...filterFields, { field: availableFields[0] || '', operator: 'equals', value: '' }]);\n  };\n\n  const removeFilter = (index: number) => {\n    const newFilters = filterFields.filter((_, i) => i !== index);\n    setFilterFields(newFilters);\n    \n    const filtersObject = newFilters.reduce((acc, filter, i) => {\n      acc[`filter_${i}`] = { field: filter.field, operator: filter.operator, value: filter.value };\n      return acc;\n    }, {} as Record<string, unknown>);\n    \n    setValue('filters', filtersObject);\n  };\n\n  const updateFilter = (index: number, key: string, value: string) => {\n    const newFilters = [...filterFields];\n    newFilters[index] = { ...newFilters[index], [key]: value };\n    setFilterFields(newFilters);\n    \n    const filtersObject = newFilters.reduce((acc, filter, i) => {\n      acc[`filter_${i}`] = { field: filter.field, operator: filter.operator, value: filter.value };\n      return acc;\n    }, {} as Record<string, unknown>);\n    \n    setValue('filters', filtersObject);\n  };\n\n  const onSubmit = async (data: ReportFormData) => {\n    setIsSubmitting(true);\n    try {\n      const reportData = {\n        ...data,\n        definition: {\n          type: data.type,\n          dataSource: data.dataSource,\n          fields: data.fields,\n          filters: data.filters,\n          groupBy: data.groupBy,\n          sortBy: data.sortBy,\n          format: data.format\n        }\n      };\n\n      const responseResult = await tryCatch(async () => fetch('/api/v1/analytics/reports', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'x-org-id': organizationId\n        },\n        body: JSON.stringify(reportData));\nif (!responseResult.success) {\n  reportError(responseResult.error);\n  throw new Error(responseResult.error.message);\n}\nconst response = responseResult.data;\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.error || 'Failed to create report');\n      }\n\n      const result = await response.json();\n      onSuccess?.(result.report);\n      reset();\n    } catch (error) {\n      console.error('Error creating report:', error);\n      alert(error instanceof Error ? error.message : 'Failed to create report');\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  return (\n    <Drawer open={true} onClose={onCancel || (() => {})} title=\"Create Report\">\n      <div className=\"flex flex-col h-full\">\n        <div className=\"flex items-center justify-between p-lg border-b\">\n          <div>\n            <h2 className=\"text-body text-heading-4\">Create Report</h2>\n            <p className=\"text-body-sm color-muted\">Build a custom analytics report</p>\n          </div>\n          <Button onClick={onCancel}>\n            <X className=\"h-4 w-4\" />\n          </Button>\n        </div>\n\n        <form onSubmit={handleSubmit(onSubmit)} className=\"flex-1 flex flex-col\">\n          <div className=\"flex-1 p-lg stack-lg overflow-y-auto\">\n            {/* Basic Information */}\n            <div className=\"stack-md\">\n              <h3 className=\"text-body-sm form-label\">Basic Information</h3>\n              \n              <div>\n                <label className=\"block text-body-sm form-label mb-xs\">Report Name</label>\n                <input\n                  {...register('name')}\n                  className=\"w-full  px-md py-sm border border-border rounded-md focus:outline-none focus:ring-2 focus:ring-primary\"\n                  placeholder=\"Enter report name\"\n                />\n                {errors.name && (\n                  <p className=\"text-body-sm color-destructive mt-xs\">{errors.name.message}</p>\n                )}\n              </div>\n\n              <div>\n                <label className=\"block text-body-sm form-label mb-xs\">Description</label>\n                <textarea\n                  {...register('description')}\n                  rows={3}\n                  className=\"w-full  px-md py-sm border border-border rounded-md focus:outline-none focus:ring-2 focus:ring-primary\"\n                  placeholder=\"Describe the purpose of this report\"\n                />\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-md\">\n                <div>\n                  <label className=\"block text-body-sm form-label mb-xs\">Report Type</label>\n                  <select\n                    {...register('type')}\n                    className=\"w-full  px-md py-sm border border-border rounded-md focus:outline-none focus:ring-2 focus:ring-primary\"\n                  >\n                    {REPORT_TYPES.map((type: unknown) => (\n                      <option key={type.value} value={type.value}>\n                        {type.label}\n                      </option>\n                    ))}\n                  </select>\n                </div>\n\n                <div>\n                  <label className=\"block text-body-sm form-label mb-xs\">Data Source</label>\n                  <select\n                    {...register('dataSource')}\n                    className=\"w-full  px-md py-sm border border-border rounded-md focus:outline-none focus:ring-2 focus:ring-primary\"\n                  >\n                    {DATA_SOURCES.map((source: unknown) => (\n                      <option key={source.value} value={source.value}>\n                        {source.label}\n                      </option>\n                    ))}\n                  </select>\n                </div>\n              </div>\n\n              <div className=\"flex items-center cluster-sm\">\n                <input\n                  {...register('isPublic')}\n                  type=\"checkbox\"\n                  className=\"rounded border-border color-accent focus:ring-primary\"\n                />\n                <label className=\"text-body-sm form-label\">Make report public</label>\n              </div>\n            </div>\n\n            {/* Fields Selection */}\n            <div className=\"stack-md\">\n              <h3 className=\"text-body-sm form-label\">Report Fields</h3>\n              <div className=\"grid grid-cols-2 md:grid-cols-3 gap-sm\">\n                {availableFields.map((field: unknown) => (\n                  <label key={field} className=\"flex items-center cluster-sm p-sm border border-border rounded cursor-pointer hover:bg-secondary/30\">\n                    <input\n                      type=\"checkbox\"\n                      checked={selectedFields.includes(field)}\n                      onChange={(e: React.ChangeEvent<HTMLInputElement>) => toggleField(field)}\n                      className=\"rounded border-border color-accent focus:ring-primary\"\n                    />\n                    <span className=\"text-body-sm capitalize\">{field.replace('_', ' ')}</span>\n                  </label>\n                ))}\n              </div>\n              {errors.fields && (\n                <p className=\"text-body-sm color-destructive\">{errors.fields.message}</p>\n              )}\n            </div>\n\n            {/* Filters */}\n            <div className=\"stack-md\">\n              <div className=\"flex items-center justify-between\">\n                <h3 className=\"text-body-sm form-label\">Filters</h3>\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                 \n                  onClick={addFilter}\n                >\n                  <Plus className=\"h-4 w-4 mr-xs\" />\n                  Add Filter\n                </Button>\n              </div>\n\n              {filterFields.map((filter, index) => (\n                <div key={index} className=\"flex items-center cluster-sm p-sm border rounded\">\n                  <select\n                    value={filter.field}\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => updateFilter(index, 'field', e.target.value)}\n                    className=\"flex-1  px-md py-xs border rounded text-body-sm\"\n                  >\n                    {availableFields.map((field: unknown) => (\n                      <option key={field} value={field}>\n                        {field.replace('_', ' ')}\n                      </option>\n                    ))}\n                  </select>\n                  \n                  <select\n                    value={filter.operator}\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => updateFilter(index, 'operator', e.target.value)}\n                    className=\" px-md py-xs border rounded text-body-sm\"\n                  >\n                    <option value=\"equals\">Equals</option>\n                    <option value=\"contains\">Contains</option>\n                    <option value=\"greater_than\">Greater Than</option>\n                    <option value=\"less_than\">Less Than</option>\n                  </select>\n                  \n                  <input\n                    value={filter.value}\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => updateFilter(index, 'value', e.target.value)}\n                    className=\"flex-1  px-md py-xs border rounded text-body-sm\"\n                    placeholder=\"Filter value\"\n                  />\n                  \n                  <Button\n                    type=\"button\"\n                    variant=\"ghost\"\n                   \n                    onClick={() => removeFilter(index)}\n                  >\n                    <X className=\"h-4 w-4\" />\n                  </Button>\n                </div>\n              ))}\n            </div>\n\n            {/* Scheduling */}\n            <div className=\"stack-md\">\n              <div className=\"flex items-center cluster-sm\">\n                <input\n                  {...register('schedule.enabled')}\n                  type=\"checkbox\"\n                  className=\"rounded border-border color-accent focus:ring-primary\"\n                />\n                <label className=\"text-body-sm form-label\">Enable scheduled delivery</label>\n              </div>\n\n              {scheduleEnabled && (\n                <div className=\"pl-lg stack-md border-l-2 border-primary/20\">\n                  <div className=\"grid grid-cols-2 gap-md\">\n                    <div>\n                      <label className=\"block text-body-sm form-label mb-xs\">Frequency</label>\n                      <select\n                        {...register('schedule.frequency')}\n                        className=\"w-full  px-md py-sm border border-border rounded-md focus:outline-none focus:ring-2 focus:ring-primary\"\n                      >\n                        {FREQUENCIES.map((freq: unknown) => (\n                          <option key={freq.value} value={freq.value}>\n                            {freq.label}\n                          </option>\n                        ))}\n                      </select>\n                    </div>\n\n                    <div>\n                      <label className=\"block text-body-sm form-label mb-xs\">Time</label>\n                      <input\n                        {...register('schedule.time')}\n                        type=\"time\"\n                        className=\"w-full  px-md py-sm border border-border rounded-md focus:outline-none focus:ring-2 focus:ring-primary\"\n                      />\n                    </div>\n                  </div>\n\n                  {frequency === 'weekly' && (\n                    <div>\n                      <label className=\"block text-body-sm form-label mb-xs\">Day of Week</label>\n                      <select\n                        {...register('schedule.dayOfWeek', { valueAsNumber: true })}\n                        className=\"w-full  px-md py-sm border border-border rounded-md focus:outline-none focus:ring-2 focus:ring-primary\"\n                      >\n                        {DAYS_OF_WEEK.map((day: unknown) => (\n                          <option key={day.value} value={day.value}>\n                            {day.label}\n                          </option>\n                        ))}\n                      </select>\n                    </div>\n                  )}\n\n                  {frequency === 'monthly' && (\n                    <div>\n                      <label className=\"block text-body-sm form-label mb-xs\">Day of Month</label>\n                      <input\n                        {...register('schedule.dayOfMonth', { valueAsNumber: true })}\n                        type=\"number\"\n                        min=\"1\"\n                        max=\"31\"\n                        className=\"w-full  px-md py-sm border border-border rounded-md focus:outline-none focus:ring-2 focus:ring-primary\"\n                        placeholder=\"1-31\"\n                      />\n                    </div>\n                  )}\n                </div>\n              )}\n            </div>\n          </div>\n\n          <div className=\"p-lg border-t bg-secondary/30 flex justify-end cluster-sm\">\n            <Button type=\"button\" variant=\"outline\" onClick={onCancel}>\n              Cancel\n            </Button>\n            <Button type=\"submit\" disabled={isSubmitting}>\n              {isSubmitting ? 'Creating...' : 'Create Report'}\n            </Button>\n          </div>\n        </form>\n      </div>\n    </Drawer>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ghxstship/apps/web/app/(app)/(shell)/analytics/reports/ReportsClient.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadReports'. Either include it or remove the dependency array.","line":92,"column":6,"nodeType":"ArrayExpression","endLine":92,"endColumn":22,"suggestions":[{"desc":"Update the dependencies array to be: [loadReports, organizationId]","fix":{"range":[2440,2456],"text":"[loadReports, organizationId]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\n\nimport { Plus, Edit3, Trash2, Play, Download, Search, BarChart3, PieChart, LineChart, Table, FileText } from \"lucide-react\";\nimport { useState, useEffect, ChangeEvent, FormEvent } from 'react';\nimport { Card, Badge, Button } from '@ghxstship/ui';\nimport { createBrowserClient } from '@ghxstship/auth';\nimport { tryCatch, reportError } from '@ghxstship/ui/utils/error-handling';\n\ninterface ReportField {\n  id: string;\n  name: string;\n  type: 'string' | 'number' | 'date' | 'boolean';\n  source: string;\n  aggregation?: 'sum' | 'avg' | 'count' | 'min' | 'max';\n}\n\ninterface ReportFilter {\n  id: string;\n  field: string;\n  operator: 'equals' | 'contains' | 'greater_than' | 'less_than' | 'between';\n  value: string | number | boolean | null;\n}\n\ninterface ReportSchedule {\n  enabled: boolean;\n  frequency: 'none' | 'daily' | 'weekly' | 'monthly';\n  time: string;\n  recipients: string[];\n}\n\ninterface ApiReport {\n  id: string;\n  name: string;\n  description?: string;\n  type: Report['type'];\n  visualization?: {\n    chartType?: Report['chartType'];\n  };\n  query?: {\n    fields?: string[];\n    filters?: Record<string, unknown>;\n  };\n  schedule?: {\n    frequency: 'none' | 'daily' | 'weekly' | 'monthly';\n    time?: string;\n    recipients?: string[];\n  };\n  is_public: boolean;\n  last_run_at?: string;\n  created_at: string;\n  updated_at: string;\n  created_by: string;\n}\n\ninterface Report {\n  id: string;\n  organizationId: string;\n  name: string;\n  description?: string;\n  type: 'table' | 'chart' | 'summary';\n  chartType?: 'bar' | 'line' | 'pie' | 'area';\n  fields: ReportField[];\n  filters: ReportFilter[];\n  schedule?: ReportSchedule;\n  isPublic: boolean;\n  status: 'draft' | 'active' | 'paused';\n  lastRun?: string;\n  nextRun?: string;\n  createdAt: string;\n  updatedAt: string;\n  createdBy: string;\n}\n\ninterface ReportsClientProps {\n  organizationId: string;\n  translations: Record<string, string>;\n}\n\nexport default function ReportsClient({ organizationId, translations }: ReportsClientProps) {\n  const [reports, setReports] = useState<Report[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [showCreateForm, setShowCreateForm] = useState(false);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [filterStatus, setFilterStatus] = useState<string>('all');\n\n  const supabase = createBrowserClient();\n\n  useEffect(() => {\n    loadReports();\n  }, [organizationId]);\n\n  const safeString = (value: FormDataEntryValue | null): string => {\n    if (!value) return '';\n    if (typeof value === 'string') return value;\n    return value.name;\n  };\n\n  const loadReports = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n\n      // Load reports from API\n      const responseResult = await tryCatch(async () => fetch(`/api/v1/analytics/reports`, {\n        headers: {\n          'x-org-id': organizationId\n        }\n      }));\nif (!responseResult.success) {\n  reportError(responseResult.error);\n  throw new Error(responseResult.error.message);\n}\nconst response = responseResult.data;\n\n      if (!response.ok) {\n        throw new Error('Failed to load reports');\n      }\n\n      const data = (await response.json()) as { reports?: ApiReport[] };\n      \n      // Transform API data to frontend format\n      const apiReports = (data.reports || []).map((report: ApiReport) => ({\n        id: report.id,\n        organizationId,\n        name: report.name,\n        description: report.description,\n        type: report.type,\n        chartType: report.visualization?.chartType,\n        fields: report.query?.fields?.map((field: string, index: number) => ({\n          id: `field_${index}`,\n          name: field,\n          type: 'string' as const,\n          source: field\n        })) || [],\n        filters: Object.entries(report.query?.filters || {}).map(([key, value], index) => ({\n          id: `filter_${index}`,\n          field: key,\n          operator: 'equals' as const,\n          value: value as ReportFilter['value']\n        })),\n        schedule: report.schedule\n          ? {\n              enabled: report.schedule.frequency !== 'none',\n              frequency: report.schedule.frequency,\n              time: report.schedule.time || '09:00',\n              recipients: report.schedule.recipients || []\n            }\n          : undefined,\n        isPublic: report.is_public,\n        status: 'active' as const,\n        lastRun: report.last_run_at,\n        createdAt: report.created_at,\n        updatedAt: report.updated_at,\n        createdBy: report.created_by\n      }));\n      \n      // Add mock reports for demonstration\n      const mockReports: Report[] = [\n        {\n          id: '1',\n          organizationId,\n          name: 'Monthly Revenue Report',\n          description: 'Comprehensive revenue analysis by project and department',\n          type: 'chart',\n          chartType: 'bar',\n          fields: [\n            { id: 'f1', name: 'Project Name', type: 'string' as const, source: 'projects.name' },\n            { id: 'f2', name: 'Revenue', type: 'number' as const, source: 'finance_transactions.amount', aggregation: 'sum' },\n            { id: 'f3', name: 'Date', type: 'date' as const, source: 'finance_transactions.created_at' }\n          ],\n          filters: [\n            { id: 'filter1', field: 'finance_transactions.type', operator: 'equals', value: 'income' }\n          ],\n          schedule: {\n            enabled: true,\n            frequency: 'monthly',\n            time: '09:00',\n            recipients: ['admin@ghxstship.com']\n          },\n          isPublic: false,\n          status: 'active',\n          lastRun: new Date(Date.now() - 1000 * 60 * 60 * 24).toISOString(),\n          nextRun: new Date(Date.now() + 1000 * 60 * 60 * 24 * 30).toISOString(),\n          createdAt: new Date().toISOString(),\n          updatedAt: new Date().toISOString(),\n          createdBy: 'user-1'\n        },\n        {\n          id: '2',\n          organizationId,\n          name: 'Team Performance Summary',\n          description: 'Weekly summary of team productivity and project completion rates',\n          type: 'table',\n          fields: [\n            { id: 'f4', name: 'Team Member', type: 'string' as const, source: 'people.name' },\n            { id: 'f5', name: 'Tasks Completed', type: 'number' as const, source: 'tasks.status', aggregation: 'count' },\n            { id: 'f6', name: 'Projects Active', type: 'number' as const, source: 'projects.id', aggregation: 'count' }\n          ],\n          filters: [\n            { id: 'filter2', field: 'tasks.status', operator: 'equals', value: 'completed' }\n          ],\n          schedule: {\n            enabled: true,\n            frequency: 'weekly',\n            time: '08:00',\n            recipients: ['manager@ghxstship.com']\n          },\n          isPublic: true,\n          status: 'active',\n          lastRun: new Date(Date.now() - 1000 * 60 * 60 * 24 * 7).toISOString(),\n          nextRun: new Date(Date.now() + 1000 * 60 * 60 * 24 * 7).toISOString(),\n          createdAt: new Date().toISOString(),\n          updatedAt: new Date().toISOString(),\n          createdBy: 'user-2'\n        },\n        {\n          id: '3',\n          organizationId,\n          name: 'Project Budget Analysis',\n          description: 'Budget vs actual spending analysis for all active projects',\n          type: 'chart',\n          chartType: 'line',\n          fields: [\n            { id: 'f7', name: 'Project', type: 'string' as const, source: 'projects.name' },\n            { id: 'f8', name: 'Budget', type: 'number' as const, source: 'projects.budget' },\n            { id: 'f9', name: 'Spent', type: 'number' as const, source: 'finance_transactions.amount', aggregation: 'sum' }\n          ],\n          filters: [\n            { id: 'filter3', field: 'projects.status', operator: 'equals', value: 'active' }\n          ],\n          isPublic: false,\n          status: 'draft',\n          createdAt: new Date().toISOString(),\n          updatedAt: new Date().toISOString(),\n          createdBy: 'user-1'\n        }\n      ];\n\n      setReports([...apiReports, ...mockReports]);\n\n    } catch (err) {\n      console.error('Error loading reports:', err);\n      setError('Failed to load reports');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const createReport = async (reportData: Partial<Report>) => {\n    try {\n      const responseResult = await tryCatch(async () => {\n        const res = await fetch('/api/v1/analytics/reports', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            'x-org-id': organizationId,\n          },\n          body: JSON.stringify({\n            name: reportData.name,\n            description: reportData.description,\n            type: reportData.type || 'table',\n            dataSource: 'projects', // Default data source\n            query: {\n              fields: ['name', 'status', 'created_at'],\n              filters: {},\n              orderBy: [{ field: 'created_at', direction: 'desc' }],\n            },\n            visualization: reportData.chartType\n              ? {\n                  chartType: reportData.chartType,\n                  xAxis: 'name',\n                  yAxis: 'status',\n                }\n              : undefined,\n            schedule: {\n              frequency: 'none',\n            },\n            isPublic: false,\n          }),\n        });\n        return res;\n      });\nif (!responseResult.success) {\n  reportError(responseResult.error);\n  throw new Error(responseResult.error.message);\n}\nconst response = responseResult.data;\n\n      if (!response.ok) {\n        throw new Error('Failed to create report');\n      }\n\n      const data = (await response.json()) as { report: ApiReport };\n      \n      // Add to local state\n      const newReport: Report = {\n        id: data.report.id,\n        organizationId,\n        name: data.report.name,\n        description: data.report.description,\n        type: data.report.type || 'table',\n        chartType: data.report.visualization?.chartType,\n        fields: data.report.query?.fields?.map((field: string, index: number) => ({\n          id: `field_${index}`,\n          name: field,\n          type: data.report.query?.fields?.includes('amount') ? 'number' : 'string' as const,\n          source: field\n        })) || [],\n        filters: [],\n        isPublic: data.report.is_public,\n        status: 'draft',\n        createdAt: data.report.created_at,\n        updatedAt: data.report.updated_at,\n        createdBy: data.report.created_by\n      };\n\n      setReports(prev => [...prev, newReport]);\n      setShowCreateForm(false);\n    } catch (err) {\n      console.error('Error creating report:', err);\n      setError('Failed to create report');\n    }\n  };\n\n  const deleteReport = async (reportId: string) => {\n    try {\n      setReports(prev => prev.filter(r => r.id !== reportId));\n    } catch (err) {\n      console.error('Error deleting report:', err);\n      setError('Failed to delete report');\n    }\n  };\n\n  const runReport = async (reportId: string) => {\n    try {\n      // Update last run time\n      setReports(prev => prev.map(r => \n        r.id === reportId \n          ? { ...r, lastRun: new Date().toISOString() }\n          : r\n      ));\n    } catch (err) {\n      console.error('Error running report:', err);\n      setError('Failed to run report');\n    }\n  };\n\n  const toggleReportStatus = async (reportId: string) => {\n    try {\n      setReports(prev => prev.map(r => \n        r.id === reportId \n          ? { ...r, status: r.status === 'active' ? 'paused' : 'active' }\n          : r\n      ));\n    } catch (err) {\n      console.error('Error updating report status:', err);\n      setError('Failed to update report status');\n    }\n  };\n\n  const getReportIcon = (report: Report) => {\n    if (report.type === 'chart') {\n      switch (report.chartType) {\n        case 'bar': return BarChart3;\n        case 'line': return LineChart;\n        case 'pie': return PieChart;\n        default: return BarChart3;\n      }\n    }\n    return report.type === 'table' ? Table : FileText;\n  };\n\n  // Using design tokens for status colors\n\n  const normalizedSearch = searchTerm.trim().toLowerCase();\n\n  const filteredReports = reports.filter(report => {\n    const nameMatch = report.name.toLowerCase().includes(normalizedSearch);\n    const descriptionMatch = report.description\n      ? report.description.toLowerCase().includes(normalizedSearch)\n      : false;\n\n    const matchesSearch = normalizedSearch.length === 0 || nameMatch || descriptionMatch;\n    const matchesStatus = filterStatus === 'all' || report.status === filterStatus;\n\n    return matchesSearch && matchesStatus;\n  });\n\n  if (loading) {\n    return (\n      <div className=\"stack-lg\">\n        <div className=\"animate-pulse\">\n          <div className=\"h-8 bg-secondary rounded w-1/4 mb-md\"></div>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-md\">\n            {[1, 2, 3].map((i) => (\n              <div key={i} className=\"h-48 bg-secondary rounded\"></div>\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <Card title=\"Error\">\n          <div className=\"text-center py-2xl color-destructive\">{error}</div>\n        <Button onClick={loadReports} className=\"mt-md\">\n          Retry\n        </Button>\n      </Card>\n    );\n  }\n\n  return (\n    <div className=\"stack-lg\">\n    {/* Header */}\n    <div className=\"flex items-center justify-between\">\n      <div>\n        <h1 className=\"text-heading-3 text-heading-3 color-foreground\">{translations.title}</h1>\n        <p className=\"text-body-sm color-muted\">Build and schedule custom reports</p>\n      </div>\n      <Button onClick={() => setShowCreateForm(true)}>\n        <Plus className=\"h-4 w-4 mr-sm\" />\n        New Report\n      </Button>\n    </div>\n\n    {/* Filters */}\n    <div className=\"flex items-center cluster\">\n      <div className=\"flex-1 relative\">\n        <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 color-muted h-4 w-4\" />\n        <input\n          type=\"text\"\n          placeholder=\"Search reports...\"\n          value={searchTerm}\n          onChange={(e: ChangeEvent<HTMLInputElement>) => setSearchTerm(e.target.value)}\n          className=\"w-full pl-2xl pr-md py-sm border border-border rounded-md focus:outline-none focus:ring-2 focus:ring-primary\"\n        />\n      </div>\n      <select\n        value={filterStatus === 'all' ? '' : filterStatus}\n        onChange={(e: ChangeEvent<HTMLSelectElement>) => setFilterStatus(e.target.value || 'all')}\n        className=\"px-md py-sm border border-border rounded-md focus:outline-none focus:ring-2 focus:ring-primary\"\n      >\n        <option value=\"\" className=\"color-muted\">All Statuses</option>\n        <option value=\"active\">Active</option>\n        <option value=\"paused\">Paused</option>\n        <option value=\"draft\">Draft</option>\n      </select>\n    </div>\n\n    {/* Reports Grid */}\n    {filteredReports.length > 0 ? (\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-lg\">\n        {filteredReports.map((report: Report) => {\n          const IconComponent = getReportIcon(report);\n          return (\n            <Card key={report.id} className=\"p-lg\">\n              <div className=\"flex items-start justify-between mb-md\">\n                <div className=\"flex items-center cluster-sm\">\n                  <div className=\"p-sm bg-accent/10 rounded-lg\">\n                    <IconComponent className=\"h-5 w-5 color-accent\" />\n                  </div>\n                  <div>\n                    <h3 className=\"text-heading-4 color-foreground\">{report.name}</h3>\n                    <p className=\"text-body-sm color-muted mt-xs\">{report.description}</p>\n                  </div>\n                </div>\n                <Badge variant=\"outline\" className=\"uppercase\">\n                  {report.status}\n                </Badge>\n              </div>\n              \n              <div className=\"stack-sm mb-md\">\n                <div className=\"flex items-center justify-between text-body-sm\">\n                  <span className=\"color-muted\">Type:</span>\n                  <span className=\"form-label capitalize\">{report.type}</span>\n                </div>\n                \n                <div className=\"flex items-center justify-between text-body-sm\">\n                  <span className=\"color-muted\">Fields:</span>\n                  <span className=\"form-label\">{report.fields.length}</span>\n                </div>\n                \n                <div className=\"flex items-center justify-between text-body-sm\">\n                  <span className=\"color-muted\">Filters:</span>\n                  <span className=\"form-label\">{report.filters.length}</span>\n                </div>\n\n                {report.schedule?.enabled && (\n                  <div className=\"flex items-center justify-between text-body-sm\">\n                    <span className=\"color-muted\">Schedule:</span>\n                      <Badge variant=\"outline\">\n                        {report.schedule.frequency}\n                      </Badge>\n                    </div>\n                  )}\n\n                {report.lastRun && (\n                  <div className=\"flex items-center justify-between text-body-sm\">\n                    <span className=\"color-muted\">Last Run:</span>\n                    <span className=\"text-body-sm color-muted\">\n                      {new Date(report.lastRun).toLocaleDateString()}\n                    </span>\n                  </div>\n                )}\n                \n                <p className=\"text-body-sm color-muted mt-sm\">\n                  Created {new Date(report.createdAt).toLocaleDateString()}\n                </p>\n              </div>\n\n              <div className=\"flex items-center justify-between mt-md pt-md border-t border-border\">\n                <div className=\"flex items-center cluster-sm\">\n                  <Button variant=\"ghost\" size=\"sm\" onClick={() => runReport(report.id)}>\n                    <Play className=\"h-3 w-3 mr-xs\" />\n                    Run\n                  </Button>\n                  <Button variant=\"ghost\" size=\"sm\">\n                    <Edit3 className=\"h-3 w-3 mr-xs\" />\n                    Edit\n                  </Button>\n                  <Button variant=\"ghost\" size=\"sm\">\n                    <Download className=\"h-3 w-3 mr-xs\" />\n                    Export\n                  </Button>\n                </div>\n                \n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={() => deleteReport(report.id)}\n                >\n                  <Trash2 className=\"h-3 w-3\" />\n                </Button>\n              </div>\n            </Card>\n            );\n          })}\n        </div>\n      ) : (\n        <Card className=\"p-xl text-center\">\n            <FileText className=\"h-12 w-12 color-muted mx-auto mb-md\" />\n            <h3 className=\"text-body form-label color-foreground mb-sm\">No reports found</h3>\n          <p className=\"color-muted mb-md\">Create your first report to get started with analytics.</p>\n          <Button onClick={() => setShowCreateForm(true)}>\n            <Plus className=\"h-4 w-4 mr-sm\" />\n            Create Report\n          </Button>\n        </Card>\n      )}\n\n      {/* Create Report Form */}\n      {showCreateForm && (\n        <div className=\"fixed inset-0 bg-foreground/30 backdrop-blur-sm flex items-center justify-center z-50\">\n          <Card className=\"w-full max-w-2xl p-lg max-h-[90vh] overflow-y-auto\">\n            <h3 className=\"text-body text-heading-4 mb-md\">Create New Report</h3>\n            <form\n              onSubmit={(e: FormEvent<HTMLFormElement>) => {\n                e.preventDefault();\n                const formData = new FormData(e.currentTarget);\n                const reportData = {\n                  name: safeString(formData.get('name')),\n                  description: safeString(formData.get('description')),\n                  type: safeString(formData.get('type')) as Report['type'],\n                  chartType: safeString(formData.get('chartType')) as Report['chartType']\n                };\n                createReport({\n                  ...reportData,\n                  chartType: reportData.chartType || undefined,\n                  description: reportData.description || undefined\n                });\n              }}\n            >\n              <div className=\"stack-md\">\n                <div>\n                  <label className=\"block text-body-sm form-label color-foreground mb-xs\">\n                    Report Name\n                  </label>\n                  <input\n                    name=\"name\"\n                    type=\"text\"\n                    required\n                    className=\"w-full  px-md py-sm border border-border rounded-md focus:outline-none focus:ring-2 focus:ring-primary\"\n                    placeholder=\"e.g., Monthly Revenue Report\"\n                  />\n                </div>\n                \n                <div>\n                  <label className=\"block text-body-sm form-label color-foreground mb-xs\">\n                    Description\n                  </label>\n                  <textarea\n                    name=\"description\"\n                    rows={3}\n                    className=\"w-full  px-md py-sm border border-border rounded-md focus:outline-none focus:ring-2 focus:ring-primary\"\n                    placeholder=\"Brief description of this report...\"\n                  />\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-md\">\n                  <div>\n                    <label className=\"block text-body-sm form-label color-foreground mb-xs\">\n                      Report Type\n                    </label>\n                    <select\n                      name=\"type\"\n                      required\n                      className=\"w-full  px-md py-sm border border-border rounded-md focus:outline-none focus:ring-2 focus:ring-primary\"\n                    >\n                      <option value=\"table\">Table</option>\n                      <option value=\"chart\">Chart</option>\n                      <option value=\"summary\">Summary</option>\n                    </select>\n                  </div>\n\n                  <div>\n                    <label className=\"block text-body-sm form-label color-foreground mb-xs\">\n                      Chart Type (if applicable)\n                    </label>\n                    <select\n                      name=\"chartType\"\n                      className=\"w-full  px-md py-sm border border-border rounded-md focus:outline-none focus:ring-2 focus:ring-primary\"\n                    >\n                      <option value=\"\" className=\"color-muted\">All Types</option>\n                      <option value=\"bar\">Bar Chart</option>\n                      <option value=\"line\">Line Chart</option>\n                      <option value=\"pie\">Pie Chart</option>\n                      <option value=\"area\">Area Chart</option>\n                    </select>\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"flex items-center justify-end cluster-sm mt-lg\">\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  onClick={() => setShowCreateForm(false)}\n                >\n                  Cancel\n                </Button>\n                <Button type=\"submit\">\n                  Create Report\n                </Button>\n              </div>\n            </form>\n          </Card>\n        </div>\n      )}\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ghxstship/apps/web/app/(app)/(shell)/assets/AssetsClient.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'generateDemoAssets'. Either include it or remove the dependency array.","line":71,"column":6,"nodeType":"ArrayExpression","endLine":71,"endColumn":50,"suggestions":[{"desc":"Update the dependencies array to be: [assetsService, orgId, filters, searchQuery, generateDemoAssets]","fix":{"range":[2411,2455],"text":"[assetsService, orgId, filters, searchQuery, generateDemoAssets]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { Plus, Package, TrendingUp, AlertTriangle, Settings, BarChart3, Shield, Search, RotateCcw, QrCode, FileCheck, Download, Upload, Eye, Edit, Trash2 } from \"lucide-react\";\nimport React, { useState, useEffect, useCallback, useMemo } from 'react';\nimport { useTranslations } from 'next-intl';\nimport { createBrowserClient } from '@ghxstship/auth';\nimport { Card, Button, Badge } from '@ghxstship/ui';\nimport { AssetsService } from './lib/service';\nimport type { Asset, AssetFilters, AssetFormData } from './types';\n\ninterface AssetsClientProps {\n  orgId: string;\n  userId?: string;\n  userEmail?: string;\n}\n\ntype AssetRecord = Asset & {\n  id: string;\n  [key: string]: any;\n};\n\nexport default function AssetsClient({ orgId, userId, userEmail }: AssetsClientProps) {\n  const t = useTranslations('assets');\n  const supabase = useMemo(() => createBrowserClient(), []);\n  const assetsService = useMemo(() => new AssetsService(), []);\n\n  const [assets, setAssets] = useState<AssetRecord[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [selectedAssets, setSelectedAssets] = useState<string[]>([]);\n  const [viewMode, setViewMode] = useState<'grid' | 'list' | 'table'>('grid');\n  const [searchQuery, setSearchQuery] = useState('');\n  const [filters, setFilters] = useState<AssetFilters>({});\n  const [showCreateDrawer, setShowCreateDrawer] = useState(false);\n  const [editingAsset, setEditingAsset] = useState<AssetRecord | null>(null);\n  \n  const [stats, setStats] = useState({\n    total: 0,\n    available: 0,\n    in_use: 0,\n    under_maintenance: 0,\n    total_value: 0\n  });\n\n  const loadAssets = useCallback(async () => {\n    setLoading(true);\n    setError(null);\n    try {\n      const [assetsData, statsData] = await Promise.all([\n        assetsService.getAssets(orgId, { ...filters, search: searchQuery }),\n        assetsService.getAssetStats(orgId)\n      ]);\n      \n      setAssets(assetsData as AssetRecord[]);\n      setStats(statsData);\n    } catch (err) {\n      console.error('Error loading assets:', err);\n      setError('Failed to load assets');\n      // Use demo data as fallback\n      setAssets(generateDemoAssets());\n      setStats({\n        total: 5,\n        available: 2,\n        in_use: 2,\n        under_maintenance: 1,\n        total_value: 180000\n      });\n    } finally {\n      setLoading(false);\n    }\n  }, [orgId, assetsService, filters, searchQuery]);\n\n  useEffect(() => {\n    loadAssets();\n  }, [loadAssets]);\n\n  const generateDemoAssets = (): AssetRecord[] => [\n    {\n      id: '1',\n      organization_id: orgId,\n      name: 'Main Stage Rigging System',\n      description: 'Professional stage rigging and truss system for main performance area',\n      category: 'site_infrastructure',\n      type: 'fixed',\n      status: 'in_use',\n      sku: 'STAGE-RIG-001',\n      current_value: 45000,\n      location: 'Main Deck',\n      created_at: '2024-01-01T10:00:00Z',\n      updated_at: '2024-01-01T10:00:00Z'\n    },\n    {\n      id: '2',\n      organization_id: orgId,\n      name: 'Professional Sound System',\n      description: 'High-end PA system with mixing console and monitors',\n      category: 'artist_technical',\n      type: 'rentable',\n      status: 'available',\n      sku: 'AUDIO-PA-002',\n      current_value: 25000,\n      location: 'Equipment Storage',\n      created_at: '2024-01-02T14:30:00Z',\n      updated_at: '2024-01-02T14:30:00Z'\n    },\n    {\n      id: '3',\n      organization_id: orgId,\n      name: 'LED Video Wall Panels',\n      description: 'Modular LED display panels for backdrop and visual effects',\n      category: 'artist_technical',\n      type: 'rentable',\n      status: 'under_maintenance',\n      sku: 'LED-WALL-003',\n      current_value: 35000,\n      location: 'Tech Workshop',\n      created_at: '2024-01-03T09:15:00Z',\n      updated_at: '2024-01-03T09:15:00Z'\n    },\n    {\n      id: '4',\n      organization_id: orgId,\n      name: 'Catering Services',\n      description: 'Full-service catering for crew and artist hospitality',\n      category: 'artist_hospitality',\n      type: 'service',\n      status: 'available',\n      sku: 'CATER-SRV-004',\n      location: 'Galley',\n      created_at: '2024-01-04T16:45:00Z',\n      updated_at: '2024-01-04T16:45:00Z'\n    },\n    {\n      id: '5',\n      organization_id: orgId,\n      name: 'Generator - 500kW',\n      description: 'Primary power generation unit for event infrastructure',\n      category: 'site_services',\n      type: 'fixed',\n      status: 'in_use',\n      sku: 'GEN-500-005',\n      current_value: 75000,\n      location: 'Power Station',\n      created_at: '2024-01-05T11:20:00Z',\n      updated_at: '2024-01-05T11:20:00Z'\n    }\n  ];\n\n  const handleCreateAsset = async (data: AssetFormData) => {\n    try {\n      const newAsset = await assetsService.createAsset(data, orgId);\n      await loadAssets();\n      setShowCreateDrawer(false);\n    } catch (error) {\n      console.error('Error creating asset:', error);\n    }\n  };\n\n  const handleUpdateAsset = async (id: string, data: Partial<AssetFormData>) => {\n    try {\n      await assetsService.updateAsset(id, data);\n      await loadAssets();\n      setEditingAsset(null);\n    } catch (error) {\n      console.error('Error updating asset:', error);\n    }\n  };\n\n  const handleDeleteAsset = async (id: string) => {\n    try {\n      await assetsService.deleteAsset(id);\n      await loadAssets();\n    } catch (error) {\n      console.error('Error deleting asset:', error);\n    }\n  };\n\n  const handleBulkDelete = async () => {\n    try {\n      await Promise.all(selectedAssets.map(id => assetsService.deleteAsset(id)));\n      await loadAssets();\n      setSelectedAssets([]);\n    } catch (error) {\n      console.error('Error bulk deleting assets:', error);\n    }\n  };\n\n  const handleExport = async (format: 'csv' | 'json' | 'excel') => {\n    try {\n      const data = selectedAssets.length > 0 \n        ? assets.filter(asset => selectedAssets.includes(asset.id))\n        : assets;\n      \n      const exportData = data.map(asset => ({\n        Name: asset.name,\n        Description: asset.description,\n        Category: asset.category,\n        Type: asset.type,\n        Status: asset.status,\n        SKU: asset.sku,\n        Location: asset.location,\n        'Current Value': asset.current_value,\n        'Created At': new Date(asset.created_at).toLocaleDateString()\n      }));\n\n      if (format === 'csv') {\n        const csv = [\n          Object.keys(exportData[0]).join(','),\n          ...exportData.map(row => Object.values(row).join(','))\n        ].join('\\n');\n        \n        const blob = new Blob([csv], { type: 'text/csv' });\n        const url = URL.createObjectURL(blob);\n        const a = document.createElement('a');\n        a.href = url;\n        a.download = `assets-${new Date().toISOString().split('T')[0]}.csv`;\n        a.click();\n        URL.revokeObjectURL(url);\n      } else if (format === 'json') {\n        const json = JSON.stringify(exportData, null, 2);\n        const blob = new Blob([json], { type: 'application/json' });\n        const url = URL.createObjectURL(blob);\n        const a = document.createElement('a');\n        a.href = url;\n        a.download = `assets-${new Date().toISOString().split('T')[0]}.json`;\n        a.click();\n        URL.revokeObjectURL(url);\n      }\n    } catch (error) {\n      console.error('Error exporting assets:', error);\n    }\n  };\n\n  const getStatusBadge = (status: Asset['status']) => {\n    switch (status) {\n      case 'available':\n        return <Badge variant=\"success\">Available</Badge>;\n      case 'in_use':\n        return <Badge variant=\"warning\">In Use</Badge>;\n      case 'under_maintenance':\n        return <Badge variant=\"secondary\">Maintenance</Badge>;\n      case 'damaged':\n        return <Badge variant=\"destructive\">Damaged</Badge>;\n      case 'missing':\n        return <Badge variant=\"destructive\">Missing</Badge>;\n      case 'retired':\n        return <Badge variant=\"outline\">Retired</Badge>;\n      default:\n        return <Badge variant=\"outline\">{status}</Badge>;\n    }\n  };\n\n  const formatCurrency = (value?: number) => {\n    if (!value) return 'N/A';\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD'\n    }).format(value);\n  };\n\n  const filteredAssets = assets.filter(asset => {\n    const matchesSearch = !searchQuery || \n      asset.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\n      asset.description?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n      asset.sku?.toLowerCase().includes(searchQuery.toLowerCase());\n    \n    const matchesCategory = !filters.category || asset.category === filters.category;\n    const matchesType = !filters.type || asset.type === filters.type;\n    const matchesStatus = !filters.status || asset.status === filters.status;\n    const matchesLocation = !filters.location || asset.location?.toLowerCase().includes(filters.location.toLowerCase());\n    \n    return matchesSearch && matchesCategory && matchesType && matchesStatus && matchesLocation;\n  });\n\n  if (loading) {\n    return (\n      <div className=\"stack-lg\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-heading-3 font-anton uppercase\">Assets Management</h1>\n            <p className=\"text-body-sm color-muted\">Loading asset data...</p>\n          </div>\n        </div>\n        <Card>\n          <div className=\"p-xl text-center color-muted\">Loading assets data...</div>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"stack-lg\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-heading-3 font-anton uppercase\">Assets Management</h1>\n          <p className=\"text-body-sm color-muted\">Comprehensive asset inventory, tracking, and management system</p>\n        </div>\n        <div className=\"flex items-center gap-sm\">\n          {selectedAssets.length > 0 && (\n            <>\n              <Button variant=\"outline\" onClick={handleBulkDelete}>\n                <Trash2 className=\"w-4 h-4 mr-2\" />\n                Delete ({selectedAssets.length})\n              </Button>\n              <Button variant=\"outline\" onClick={() => handleExport('csv')}>\n                <Download className=\"w-4 h-4 mr-2\" />\n                Export Selected\n              </Button>\n            </>\n          )}\n          <Button onClick={() => setShowCreateDrawer(true)}>\n            <Plus className=\"w-4 h-4 mr-2\" />\n            Add Asset\n          </Button>\n        </div>\n      </div>\n\n      {/* Statistics Dashboard */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-5 gap-md\">\n        <Card>\n          <div className=\"p-md\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-body-sm form-label color-muted\">Total Assets</p>\n                <p className=\"text-heading-3\">{stats.total}</p>\n              </div>\n              <Package className=\"w-8 h-8 color-accent\" />\n            </div>\n          </div>\n        </Card>\n        <Card>\n          <div className=\"p-md\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-body-sm form-label color-muted\">Available</p>\n                <p className=\"text-heading-3\">{stats.available}</p>\n              </div>\n              <TrendingUp className=\"w-8 h-8 color-success\" />\n            </div>\n          </div>\n        </Card>\n        <Card>\n          <div className=\"p-md\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-body-sm form-label color-muted\">In Use</p>\n                <p className=\"text-heading-3\">{stats.in_use}</p>\n              </div>\n              <Settings className=\"w-8 h-8 color-warning\" />\n            </div>\n          </div>\n        </Card>\n        <Card>\n          <div className=\"p-md\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-body-sm form-label color-muted\">Maintenance</p>\n                <p className=\"text-heading-3\">{stats.under_maintenance}</p>\n              </div>\n              <AlertTriangle className=\"w-8 h-8 color-warning\" />\n            </div>\n          </div>\n        </Card>\n        <Card>\n          <div className=\"p-md\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-body-sm form-label color-muted\">Total Value</p>\n                <p className=\"text-heading-3\">${stats.total_value.toLocaleString()}</p>\n              </div>\n              <BarChart3 className=\"w-8 h-8 color-secondary\" />\n            </div>\n          </div>\n        </Card>\n      </div>\n\n      {/* Controls */}\n      <Card>\n        <div className=\"p-md\">\n          <div className=\"flex items-center justify-between mb-md\">\n            <h3 className=\"text-heading-4\">Asset Inventory ({filteredAssets.length})</h3>\n            <div className=\"flex items-center gap-sm\">\n              <Button \n                variant={viewMode === 'grid' ? 'default' : 'outline'} \n                size=\"sm\"\n                onClick={() => setViewMode('grid')}\n              >\n                Grid\n              </Button>\n              <Button \n                variant={viewMode === 'list' ? 'default' : 'outline'} \n                size=\"sm\"\n                onClick={() => setViewMode('list')}\n              >\n                List\n              </Button>\n              <Button \n                variant={viewMode === 'table' ? 'default' : 'outline'} \n                size=\"sm\"\n                onClick={() => setViewMode('table')}\n              >\n                Table\n              </Button>\n              <Button variant=\"outline\" size=\"sm\" onClick={() => handleExport('csv')}>\n                <Download className=\"w-4 h-4 mr-2\" />\n                Export\n              </Button>\n            </div>\n          </div>\n\n          {/* Search and Filters */}\n          <div className=\"flex items-center gap-sm mb-md\">\n            <div className=\"flex-1\">\n              <input\n                type=\"text\"\n                placeholder=\"Search assets...\"\n                value={searchQuery}\n                onChange={(e) => setSearchQuery(e.target.value)}\n                className=\"w-full px-sm py-xs border rounded\"\n              />\n            </div>\n            <select\n              value={filters.category || ''}\n              onChange={(e) => setFilters(prev => ({ ...prev, category: e.target.value || undefined }))}\n              className=\"px-sm py-xs border rounded\"\n            >\n              <option value=\"\">All Categories</option>\n              <option value=\"site_infrastructure\">Site Infrastructure</option>\n              <option value=\"artist_technical\">Artist Technical</option>\n              <option value=\"artist_hospitality\">Artist Hospitality</option>\n              <option value=\"site_services\">Site Services</option>\n            </select>\n            <select\n              value={filters.status || ''}\n              onChange={(e) => setFilters(prev => ({ ...prev, status: e.target.value || undefined }))}\n              className=\"px-sm py-xs border rounded\"\n            >\n              <option value=\"\">All Statuses</option>\n              <option value=\"available\">Available</option>\n              <option value=\"in_use\">In Use</option>\n              <option value=\"under_maintenance\">Maintenance</option>\n              <option value=\"damaged\">Damaged</option>\n            </select>\n          </div>\n          \n          {/* Assets Display */}\n          {viewMode === 'grid' && (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-md\">\n              {filteredAssets.map(asset => (\n                <Card key={asset.id} className=\"p-md\">\n                  <div className=\"stack-sm\">\n                    <div className=\"flex items-start justify-between\">\n                      <div className=\"flex items-start gap-sm\">\n                        <input\n                          type=\"checkbox\"\n                          checked={selectedAssets.includes(asset.id)}\n                          onChange={(e) => {\n                            if (e.target.checked) {\n                              setSelectedAssets(prev => [...prev, asset.id]);\n                            } else {\n                              setSelectedAssets(prev => prev.filter(id => id !== asset.id));\n                            }\n                          }}\n                        />\n                        <div className=\"flex-1\">\n                          <h4 className=\"form-label\">{asset.name}</h4>\n                          <p className=\"text-body-sm color-muted\">{asset.description}</p>\n                        </div>\n                      </div>\n                      {getStatusBadge(asset.status)}\n                    </div>\n                    \n                    <div className=\"grid grid-cols-2 gap-sm text-body-sm\">\n                      <div>\n                        <span className=\"color-muted\">SKU:</span> {asset.sku || 'N/A'}\n                      </div>\n                      <div>\n                        <span className=\"color-muted\">Type:</span> {asset.type}\n                      </div>\n                      <div>\n                        <span className=\"color-muted\">Location:</span> {asset.location || 'N/A'}\n                      </div>\n                      <div>\n                        <span className=\"color-muted\">Value:</span> {formatCurrency(asset.current_value)}\n                      </div>\n                    </div>\n                    \n                    <div className=\"flex items-center justify-between pt-sm border-t\">\n                      <span className=\"text-body-sm color-muted\">\n                        Created {new Date(asset.created_at).toLocaleDateString()}\n                      </span>\n                      <div className=\"flex items-center gap-xs\">\n                        <Button variant=\"ghost\" size=\"sm\">\n                          <Eye className=\"w-4 h-4\" />\n                        </Button>\n                        <Button variant=\"ghost\" size=\"sm\" onClick={() => setEditingAsset(asset)}>\n                          <Edit className=\"w-4 h-4\" />\n                        </Button>\n                        <Button variant=\"ghost\" size=\"sm\" onClick={() => handleDeleteAsset(asset.id)}>\n                          <Trash2 className=\"w-4 h-4\" />\n                        </Button>\n                      </div>\n                    </div>\n                  </div>\n                </Card>\n              ))}\n            </div>\n          )}\n\n          {viewMode === 'list' && (\n            <div className=\"stack-xs\">\n              {filteredAssets.map(asset => (\n                <div key={asset.id} className=\"flex items-center justify-between p-sm border rounded hover:bg-muted\">\n                  <div className=\"flex items-center gap-sm\">\n                    <input\n                      type=\"checkbox\"\n                      checked={selectedAssets.includes(asset.id)}\n                      onChange={(e) => {\n                        if (e.target.checked) {\n                          setSelectedAssets(prev => [...prev, asset.id]);\n                        } else {\n                          setSelectedAssets(prev => prev.filter(id => id !== asset.id));\n                        }\n                      }}\n                    />\n                    <Package className=\"w-8 h-8 color-muted\" />\n                    <div>\n                      <h4 className=\"form-label\">{asset.name}</h4>\n                      <p className=\"text-body-sm color-muted\">{asset.category} • {asset.location}</p>\n                    </div>\n                  </div>\n                  <div className=\"flex items-center gap-sm\">\n                    {getStatusBadge(asset.status)}\n                    <span className=\"text-body-sm font-medium\">{formatCurrency(asset.current_value)}</span>\n                    <div className=\"flex items-center gap-xs\">\n                      <Button variant=\"ghost\" size=\"sm\">\n                        <Eye className=\"w-4 h-4\" />\n                      </Button>\n                      <Button variant=\"ghost\" size=\"sm\" onClick={() => setEditingAsset(asset)}>\n                        <Edit className=\"w-4 h-4\" />\n                      </Button>\n                      <Button variant=\"ghost\" size=\"sm\" onClick={() => handleDeleteAsset(asset.id)}>\n                        <Trash2 className=\"w-4 h-4\" />\n                      </Button>\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          )}\n\n          {viewMode === 'table' && (\n            <div className=\"overflow-x-auto\">\n              <table className=\"w-full\">\n                <thead>\n                  <tr className=\"border-b\">\n                    <th className=\"text-left p-sm\">\n                      <input\n                        type=\"checkbox\"\n                        checked={selectedAssets.length === filteredAssets.length && filteredAssets.length > 0}\n                        onChange={(e) => {\n                          if (e.target.checked) {\n                            setSelectedAssets(filteredAssets.map(asset => asset.id));\n                          } else {\n                            setSelectedAssets([]);\n                          }\n                        }}\n                      />\n                    </th>\n                    <th className=\"text-left p-sm\">Name</th>\n                    <th className=\"text-left p-sm\">Category</th>\n                    <th className=\"text-left p-sm\">Type</th>\n                    <th className=\"text-left p-sm\">Status</th>\n                    <th className=\"text-left p-sm\">Location</th>\n                    <th className=\"text-left p-sm\">Value</th>\n                    <th className=\"text-left p-sm\">Actions</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {filteredAssets.map(asset => (\n                    <tr key={asset.id} className=\"border-b hover:bg-muted\">\n                      <td className=\"p-sm\">\n                        <input\n                          type=\"checkbox\"\n                          checked={selectedAssets.includes(asset.id)}\n                          onChange={(e) => {\n                            if (e.target.checked) {\n                              setSelectedAssets(prev => [...prev, asset.id]);\n                            } else {\n                              setSelectedAssets(prev => prev.filter(id => id !== asset.id));\n                            }\n                          }}\n                        />\n                      </td>\n                      <td className=\"p-sm\">\n                        <div>\n                          <div className=\"form-label\">{asset.name}</div>\n                          <div className=\"text-body-sm color-muted\">{asset.sku}</div>\n                        </div>\n                      </td>\n                      <td className=\"p-sm\">{asset.category}</td>\n                      <td className=\"p-sm\">{asset.type}</td>\n                      <td className=\"p-sm\">{getStatusBadge(asset.status)}</td>\n                      <td className=\"p-sm\">{asset.location || 'N/A'}</td>\n                      <td className=\"p-sm\">{formatCurrency(asset.current_value)}</td>\n                      <td className=\"p-sm\">\n                        <div className=\"flex items-center gap-xs\">\n                          <Button variant=\"ghost\" size=\"sm\">\n                            <Eye className=\"w-4 h-4\" />\n                          </Button>\n                          <Button variant=\"ghost\" size=\"sm\" onClick={() => setEditingAsset(asset)}>\n                            <Edit className=\"w-4 h-4\" />\n                          </Button>\n                          <Button variant=\"ghost\" size=\"sm\" onClick={() => handleDeleteAsset(asset.id)}>\n                            <Trash2 className=\"w-4 h-4\" />\n                          </Button>\n                        </div>\n                      </td>\n                    </tr>\n                  ))}\n                </tbody>\n              </table>\n            </div>\n          )}\n          \n          {filteredAssets.length === 0 && !loading && (\n            <div className=\"text-center py-xl color-muted\">\n              <Package className=\"w-12 h-12 mx-auto mb-md opacity-50\" />\n              <h3 className=\"text-heading-4 mb-sm\">No Assets Found</h3>\n              <p className=\"text-body-sm mb-md\">\n                {searchQuery || Object.keys(filters).length > 0 \n                  ? 'No assets match your current filters.' \n                  : 'Start by adding your first asset to the inventory.'\n                }\n              </p>\n              <Button onClick={() => setShowCreateDrawer(true)}>\n                <Plus className=\"w-4 h-4 mr-2\" />\n                Add Asset\n              </Button>\n            </div>\n          )}\n        </div>\n      </Card>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ghxstship/apps/web/app/(app)/(shell)/assets/AssetsClient_ATLVS.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'generateDemoAssets'. Either include it or remove the dependency array.","line":71,"column":6,"nodeType":"ArrayExpression","endLine":71,"endColumn":50,"suggestions":[{"desc":"Update the dependencies array to be: [assetsService, orgId, filters, searchQuery, generateDemoAssets]","fix":{"range":[2411,2455],"text":"[assetsService, orgId, filters, searchQuery, generateDemoAssets]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { Plus, Package, TrendingUp, AlertTriangle, Settings, BarChart3, Shield, Search, RotateCcw, QrCode, FileCheck, Download, Upload, Eye, Edit, Trash2 } from \"lucide-react\";\nimport React, { useState, useEffect, useCallback, useMemo } from 'react';\nimport { useTranslations } from 'next-intl';\nimport { createBrowserClient } from '@ghxstship/auth';\nimport { Card, Button, Badge } from '@ghxstship/ui';\nimport { AssetsService } from './lib/service';\nimport type { Asset, AssetFilters, AssetFormData } from './types';\n\ninterface AssetsClientProps {\n  orgId: string;\n  userId?: string;\n  userEmail?: string;\n}\n\ntype AssetRecord = Asset & {\n  id: string;\n  [key: string]: any;\n};\n\nexport default function AssetsClient({ orgId, userId, userEmail }: AssetsClientProps) {\n  const t = useTranslations('assets');\n  const supabase = useMemo(() => createBrowserClient(), []);\n  const assetsService = useMemo(() => new AssetsService(), []);\n\n  const [assets, setAssets] = useState<AssetRecord[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [selectedAssets, setSelectedAssets] = useState<string[]>([]);\n  const [viewMode, setViewMode] = useState<'grid' | 'list' | 'table'>('grid');\n  const [searchQuery, setSearchQuery] = useState('');\n  const [filters, setFilters] = useState<AssetFilters>({});\n  const [showCreateDrawer, setShowCreateDrawer] = useState(false);\n  const [editingAsset, setEditingAsset] = useState<AssetRecord | null>(null);\n  \n  const [stats, setStats] = useState({\n    total: 0,\n    available: 0,\n    in_use: 0,\n    under_maintenance: 0,\n    total_value: 0\n  });\n\n  const loadAssets = useCallback(async () => {\n    setLoading(true);\n    setError(null);\n    try {\n      const [assetsData, statsData] = await Promise.all([\n        assetsService.getAssets(orgId, { ...filters, search: searchQuery }),\n        assetsService.getAssetStats(orgId)\n      ]);\n      \n      setAssets(assetsData as AssetRecord[]);\n      setStats(statsData);\n    } catch (err) {\n      console.error('Error loading assets:', err);\n      setError('Failed to load assets');\n      // Use demo data as fallback\n      setAssets(generateDemoAssets());\n      setStats({\n        total: 5,\n        available: 2,\n        in_use: 2,\n        under_maintenance: 1,\n        total_value: 180000\n      });\n    } finally {\n      setLoading(false);\n    }\n  }, [orgId, assetsService, filters, searchQuery]);\n\n  useEffect(() => {\n    loadAssets();\n  }, [loadAssets]);\n\n  const generateDemoAssets = (): AssetRecord[] => [\n    {\n      id: '1',\n      organization_id: orgId,\n      name: 'Main Stage Rigging System',\n      description: 'Professional stage rigging and truss system for main performance area',\n      category: 'site_infrastructure',\n      type: 'fixed',\n      status: 'in_use',\n      sku: 'STAGE-RIG-001',\n      current_value: 45000,\n      location: 'Main Deck',\n      created_at: '2024-01-01T10:00:00Z',\n      updated_at: '2024-01-01T10:00:00Z'\n    },\n    {\n      id: '2',\n      organization_id: orgId,\n      name: 'Professional Sound System',\n      description: 'High-end PA system with mixing console and monitors',\n      category: 'artist_technical',\n      type: 'rentable',\n      status: 'available',\n      sku: 'AUDIO-PA-002',\n      current_value: 25000,\n      location: 'Equipment Storage',\n      created_at: '2024-01-02T14:30:00Z',\n      updated_at: '2024-01-02T14:30:00Z'\n    },\n    {\n      id: '3',\n      organization_id: orgId,\n      name: 'LED Video Wall Panels',\n      description: 'Modular LED display panels for backdrop and visual effects',\n      category: 'artist_technical',\n      type: 'rentable',\n      status: 'under_maintenance',\n      sku: 'LED-WALL-003',\n      current_value: 35000,\n      location: 'Tech Workshop',\n      created_at: '2024-01-03T09:15:00Z',\n      updated_at: '2024-01-03T09:15:00Z'\n    },\n    {\n      id: '4',\n      organization_id: orgId,\n      name: 'Catering Services',\n      description: 'Full-service catering for crew and artist hospitality',\n      category: 'artist_hospitality',\n      type: 'service',\n      status: 'available',\n      sku: 'CATER-SRV-004',\n      location: 'Galley',\n      created_at: '2024-01-04T16:45:00Z',\n      updated_at: '2024-01-04T16:45:00Z'\n    },\n    {\n      id: '5',\n      organization_id: orgId,\n      name: 'Generator - 500kW',\n      description: 'Primary power generation unit for event infrastructure',\n      category: 'site_services',\n      type: 'fixed',\n      status: 'in_use',\n      sku: 'GEN-500-005',\n      current_value: 75000,\n      location: 'Power Station',\n      created_at: '2024-01-05T11:20:00Z',\n      updated_at: '2024-01-05T11:20:00Z'\n    }\n  ];\n\n  const handleCreateAsset = async (data: AssetFormData) => {\n    try {\n      const newAsset = await assetsService.createAsset(data, orgId);\n      await loadAssets();\n      setShowCreateDrawer(false);\n    } catch (error) {\n      console.error('Error creating asset:', error);\n    }\n  };\n\n  const handleUpdateAsset = async (id: string, data: Partial<AssetFormData>) => {\n    try {\n      await assetsService.updateAsset(id, data);\n      await loadAssets();\n      setEditingAsset(null);\n    } catch (error) {\n      console.error('Error updating asset:', error);\n    }\n  };\n\n  const handleDeleteAsset = async (id: string) => {\n    try {\n      await assetsService.deleteAsset(id);\n      await loadAssets();\n    } catch (error) {\n      console.error('Error deleting asset:', error);\n    }\n  };\n\n  const handleBulkDelete = async () => {\n    try {\n      await Promise.all(selectedAssets.map(id => assetsService.deleteAsset(id)));\n      await loadAssets();\n      setSelectedAssets([]);\n    } catch (error) {\n      console.error('Error bulk deleting assets:', error);\n    }\n  };\n\n  const handleExport = async (format: 'csv' | 'json' | 'excel') => {\n    try {\n      const data = selectedAssets.length > 0 \n        ? assets.filter(asset => selectedAssets.includes(asset.id))\n        : assets;\n      \n      const exportData = data.map(asset => ({\n        Name: asset.name,\n        Description: asset.description,\n        Category: asset.category,\n        Type: asset.type,\n        Status: asset.status,\n        SKU: asset.sku,\n        Location: asset.location,\n        'Current Value': asset.current_value,\n        'Created At': new Date(asset.created_at).toLocaleDateString()\n      }));\n\n      if (format === 'csv') {\n        const csv = [\n          Object.keys(exportData[0]).join(','),\n          ...exportData.map(row => Object.values(row).join(','))\n        ].join('\\n');\n        \n        const blob = new Blob([csv], { type: 'text/csv' });\n        const url = URL.createObjectURL(blob);\n        const a = document.createElement('a');\n        a.href = url;\n        a.download = `assets-${new Date().toISOString().split('T')[0]}.csv`;\n        a.click();\n        URL.revokeObjectURL(url);\n      } else if (format === 'json') {\n        const json = JSON.stringify(exportData, null, 2);\n        const blob = new Blob([json], { type: 'application/json' });\n        const url = URL.createObjectURL(blob);\n        const a = document.createElement('a');\n        a.href = url;\n        a.download = `assets-${new Date().toISOString().split('T')[0]}.json`;\n        a.click();\n        URL.revokeObjectURL(url);\n      }\n    } catch (error) {\n      console.error('Error exporting assets:', error);\n    }\n  };\n\n  const getStatusBadge = (status: Asset['status']) => {\n    switch (status) {\n      case 'available':\n        return <Badge variant=\"success\">Available</Badge>;\n      case 'in_use':\n        return <Badge variant=\"warning\">In Use</Badge>;\n      case 'under_maintenance':\n        return <Badge variant=\"secondary\">Maintenance</Badge>;\n      case 'damaged':\n        return <Badge variant=\"destructive\">Damaged</Badge>;\n      case 'missing':\n        return <Badge variant=\"destructive\">Missing</Badge>;\n      case 'retired':\n        return <Badge variant=\"outline\">Retired</Badge>;\n      default:\n        return <Badge variant=\"outline\">{status}</Badge>;\n    }\n  };\n\n  const formatCurrency = (value?: number) => {\n    if (!value) return 'N/A';\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD'\n    }).format(value);\n  };\n\n  const filteredAssets = assets.filter(asset => {\n    const matchesSearch = !searchQuery || \n      asset.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\n      asset.description?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n      asset.sku?.toLowerCase().includes(searchQuery.toLowerCase());\n    \n    const matchesCategory = !filters.category || asset.category === filters.category;\n    const matchesType = !filters.type || asset.type === filters.type;\n    const matchesStatus = !filters.status || asset.status === filters.status;\n    const matchesLocation = !filters.location || asset.location?.toLowerCase().includes(filters.location.toLowerCase());\n    \n    return matchesSearch && matchesCategory && matchesType && matchesStatus && matchesLocation;\n  });\n\n  if (loading) {\n    return (\n      <div className=\"stack-lg\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-heading-3 font-anton uppercase\">Assets Management</h1>\n            <p className=\"text-body-sm color-muted\">Loading asset data...</p>\n          </div>\n        </div>\n        <Card>\n          <div className=\"p-xl text-center color-muted\">Loading assets data...</div>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"stack-lg\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-heading-3 font-anton uppercase\">Assets Management</h1>\n          <p className=\"text-body-sm color-muted\">Comprehensive asset inventory, tracking, and management system</p>\n        </div>\n        <div className=\"flex items-center gap-sm\">\n          {selectedAssets.length > 0 && (\n            <>\n              <Button variant=\"outline\" onClick={handleBulkDelete}>\n                <Trash2 className=\"w-4 h-4 mr-2\" />\n                Delete ({selectedAssets.length})\n              </Button>\n              <Button variant=\"outline\" onClick={() => handleExport('csv')}>\n                <Download className=\"w-4 h-4 mr-2\" />\n                Export Selected\n              </Button>\n            </>\n          )}\n          <Button onClick={() => setShowCreateDrawer(true)}>\n            <Plus className=\"w-4 h-4 mr-2\" />\n            Add Asset\n          </Button>\n        </div>\n      </div>\n\n      {/* Statistics Dashboard */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-5 gap-md\">\n        <Card>\n          <div className=\"p-md\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-body-sm form-label color-muted\">Total Assets</p>\n                <p className=\"text-heading-3\">{stats.total}</p>\n              </div>\n              <Package className=\"w-8 h-8 color-accent\" />\n            </div>\n          </div>\n        </Card>\n        <Card>\n          <div className=\"p-md\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-body-sm form-label color-muted\">Available</p>\n                <p className=\"text-heading-3\">{stats.available}</p>\n              </div>\n              <TrendingUp className=\"w-8 h-8 color-success\" />\n            </div>\n          </div>\n        </Card>\n        <Card>\n          <div className=\"p-md\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-body-sm form-label color-muted\">In Use</p>\n                <p className=\"text-heading-3\">{stats.in_use}</p>\n              </div>\n              <Settings className=\"w-8 h-8 color-warning\" />\n            </div>\n          </div>\n        </Card>\n        <Card>\n          <div className=\"p-md\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-body-sm form-label color-muted\">Maintenance</p>\n                <p className=\"text-heading-3\">{stats.under_maintenance}</p>\n              </div>\n              <AlertTriangle className=\"w-8 h-8 color-warning\" />\n            </div>\n          </div>\n        </Card>\n        <Card>\n          <div className=\"p-md\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-body-sm form-label color-muted\">Total Value</p>\n                <p className=\"text-heading-3\">${stats.total_value.toLocaleString()}</p>\n              </div>\n              <BarChart3 className=\"w-8 h-8 color-secondary\" />\n            </div>\n          </div>\n        </Card>\n      </div>\n\n      {/* Controls */}\n      <Card>\n        <div className=\"p-md\">\n          <div className=\"flex items-center justify-between mb-md\">\n            <h3 className=\"text-heading-4\">Asset Inventory ({filteredAssets.length})</h3>\n            <div className=\"flex items-center gap-sm\">\n              <Button \n                variant={viewMode === 'grid' ? 'default' : 'outline'} \n                size=\"sm\"\n                onClick={() => setViewMode('grid')}\n              >\n                Grid\n              </Button>\n              <Button \n                variant={viewMode === 'list' ? 'default' : 'outline'} \n                size=\"sm\"\n                onClick={() => setViewMode('list')}\n              >\n                List\n              </Button>\n              <Button \n                variant={viewMode === 'table' ? 'default' : 'outline'} \n                size=\"sm\"\n                onClick={() => setViewMode('table')}\n              >\n                Table\n              </Button>\n              <Button variant=\"outline\" size=\"sm\" onClick={() => handleExport('csv')}>\n                <Download className=\"w-4 h-4 mr-2\" />\n                Export\n              </Button>\n            </div>\n          </div>\n\n          {/* Search and Filters */}\n          <div className=\"flex items-center gap-sm mb-md\">\n            <div className=\"flex-1\">\n              <input\n                type=\"text\"\n                placeholder=\"Search assets...\"\n                value={searchQuery}\n                onChange={(e) => setSearchQuery(e.target.value)}\n                className=\"w-full px-sm py-xs border rounded\"\n              />\n            </div>\n            <select\n              value={filters.category || ''}\n              onChange={(e) => setFilters(prev => ({ ...prev, category: e.target.value || undefined }))}\n              className=\"px-sm py-xs border rounded\"\n            >\n              <option value=\"\">All Categories</option>\n              <option value=\"site_infrastructure\">Site Infrastructure</option>\n              <option value=\"artist_technical\">Artist Technical</option>\n              <option value=\"artist_hospitality\">Artist Hospitality</option>\n              <option value=\"site_services\">Site Services</option>\n            </select>\n            <select\n              value={filters.status || ''}\n              onChange={(e) => setFilters(prev => ({ ...prev, status: e.target.value || undefined }))}\n              className=\"px-sm py-xs border rounded\"\n            >\n              <option value=\"\">All Statuses</option>\n              <option value=\"available\">Available</option>\n              <option value=\"in_use\">In Use</option>\n              <option value=\"under_maintenance\">Maintenance</option>\n              <option value=\"damaged\">Damaged</option>\n            </select>\n          </div>\n          \n          {/* Assets Display */}\n          {viewMode === 'grid' && (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-md\">\n              {filteredAssets.map(asset => (\n                <Card key={asset.id} className=\"p-md\">\n                  <div className=\"stack-sm\">\n                    <div className=\"flex items-start justify-between\">\n                      <div className=\"flex items-start gap-sm\">\n                        <input\n                          type=\"checkbox\"\n                          checked={selectedAssets.includes(asset.id)}\n                          onChange={(e) => {\n                            if (e.target.checked) {\n                              setSelectedAssets(prev => [...prev, asset.id]);\n                            } else {\n                              setSelectedAssets(prev => prev.filter(id => id !== asset.id));\n                            }\n                          }}\n                        />\n                        <div className=\"flex-1\">\n                          <h4 className=\"form-label\">{asset.name}</h4>\n                          <p className=\"text-body-sm color-muted\">{asset.description}</p>\n                        </div>\n                      </div>\n                      {getStatusBadge(asset.status)}\n                    </div>\n                    \n                    <div className=\"grid grid-cols-2 gap-sm text-body-sm\">\n                      <div>\n                        <span className=\"color-muted\">SKU:</span> {asset.sku || 'N/A'}\n                      </div>\n                      <div>\n                        <span className=\"color-muted\">Type:</span> {asset.type}\n                      </div>\n                      <div>\n                        <span className=\"color-muted\">Location:</span> {asset.location || 'N/A'}\n                      </div>\n                      <div>\n                        <span className=\"color-muted\">Value:</span> {formatCurrency(asset.current_value)}\n                      </div>\n                    </div>\n                    \n                    <div className=\"flex items-center justify-between pt-sm border-t\">\n                      <span className=\"text-body-sm color-muted\">\n                        Created {new Date(asset.created_at).toLocaleDateString()}\n                      </span>\n                      <div className=\"flex items-center gap-xs\">\n                        <Button variant=\"ghost\" size=\"sm\">\n                          <Eye className=\"w-4 h-4\" />\n                        </Button>\n                        <Button variant=\"ghost\" size=\"sm\" onClick={() => setEditingAsset(asset)}>\n                          <Edit className=\"w-4 h-4\" />\n                        </Button>\n                        <Button variant=\"ghost\" size=\"sm\" onClick={() => handleDeleteAsset(asset.id)}>\n                          <Trash2 className=\"w-4 h-4\" />\n                        </Button>\n                      </div>\n                    </div>\n                  </div>\n                </Card>\n              ))}\n            </div>\n          )}\n\n          {viewMode === 'list' && (\n            <div className=\"stack-xs\">\n              {filteredAssets.map(asset => (\n                <div key={asset.id} className=\"flex items-center justify-between p-sm border rounded hover:bg-muted\">\n                  <div className=\"flex items-center gap-sm\">\n                    <input\n                      type=\"checkbox\"\n                      checked={selectedAssets.includes(asset.id)}\n                      onChange={(e) => {\n                        if (e.target.checked) {\n                          setSelectedAssets(prev => [...prev, asset.id]);\n                        } else {\n                          setSelectedAssets(prev => prev.filter(id => id !== asset.id));\n                        }\n                      }}\n                    />\n                    <Package className=\"w-8 h-8 color-muted\" />\n                    <div>\n                      <h4 className=\"form-label\">{asset.name}</h4>\n                      <p className=\"text-body-sm color-muted\">{asset.category} • {asset.location}</p>\n                    </div>\n                  </div>\n                  <div className=\"flex items-center gap-sm\">\n                    {getStatusBadge(asset.status)}\n                    <span className=\"text-body-sm font-medium\">{formatCurrency(asset.current_value)}</span>\n                    <div className=\"flex items-center gap-xs\">\n                      <Button variant=\"ghost\" size=\"sm\">\n                        <Eye className=\"w-4 h-4\" />\n                      </Button>\n                      <Button variant=\"ghost\" size=\"sm\" onClick={() => setEditingAsset(asset)}>\n                        <Edit className=\"w-4 h-4\" />\n                      </Button>\n                      <Button variant=\"ghost\" size=\"sm\" onClick={() => handleDeleteAsset(asset.id)}>\n                        <Trash2 className=\"w-4 h-4\" />\n                      </Button>\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          )}\n\n          {viewMode === 'table' && (\n            <div className=\"overflow-x-auto\">\n              <table className=\"w-full\">\n                <thead>\n                  <tr className=\"border-b\">\n                    <th className=\"text-left p-sm\">\n                      <input\n                        type=\"checkbox\"\n                        checked={selectedAssets.length === filteredAssets.length && filteredAssets.length > 0}\n                        onChange={(e) => {\n                          if (e.target.checked) {\n                            setSelectedAssets(filteredAssets.map(asset => asset.id));\n                          } else {\n                            setSelectedAssets([]);\n                          }\n                        }}\n                      />\n                    </th>\n                    <th className=\"text-left p-sm\">Name</th>\n                    <th className=\"text-left p-sm\">Category</th>\n                    <th className=\"text-left p-sm\">Type</th>\n                    <th className=\"text-left p-sm\">Status</th>\n                    <th className=\"text-left p-sm\">Location</th>\n                    <th className=\"text-left p-sm\">Value</th>\n                    <th className=\"text-left p-sm\">Actions</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {filteredAssets.map(asset => (\n                    <tr key={asset.id} className=\"border-b hover:bg-muted\">\n                      <td className=\"p-sm\">\n                        <input\n                          type=\"checkbox\"\n                          checked={selectedAssets.includes(asset.id)}\n                          onChange={(e) => {\n                            if (e.target.checked) {\n                              setSelectedAssets(prev => [...prev, asset.id]);\n                            } else {\n                              setSelectedAssets(prev => prev.filter(id => id !== asset.id));\n                            }\n                          }}\n                        />\n                      </td>\n                      <td className=\"p-sm\">\n                        <div>\n                          <div className=\"form-label\">{asset.name}</div>\n                          <div className=\"text-body-sm color-muted\">{asset.sku}</div>\n                        </div>\n                      </td>\n                      <td className=\"p-sm\">{asset.category}</td>\n                      <td className=\"p-sm\">{asset.type}</td>\n                      <td className=\"p-sm\">{getStatusBadge(asset.status)}</td>\n                      <td className=\"p-sm\">{asset.location || 'N/A'}</td>\n                      <td className=\"p-sm\">{formatCurrency(asset.current_value)}</td>\n                      <td className=\"p-sm\">\n                        <div className=\"flex items-center gap-xs\">\n                          <Button variant=\"ghost\" size=\"sm\">\n                            <Eye className=\"w-4 h-4\" />\n                          </Button>\n                          <Button variant=\"ghost\" size=\"sm\" onClick={() => setEditingAsset(asset)}>\n                            <Edit className=\"w-4 h-4\" />\n                          </Button>\n                          <Button variant=\"ghost\" size=\"sm\" onClick={() => handleDeleteAsset(asset.id)}>\n                            <Trash2 className=\"w-4 h-4\" />\n                          </Button>\n                        </div>\n                      </td>\n                    </tr>\n                  ))}\n                </tbody>\n              </table>\n            </div>\n          )}\n          \n          {filteredAssets.length === 0 && !loading && (\n            <div className=\"text-center py-xl color-muted\">\n              <Package className=\"w-12 h-12 mx-auto mb-md opacity-50\" />\n              <h3 className=\"text-heading-4 mb-sm\">No Assets Found</h3>\n              <p className=\"text-body-sm mb-md\">\n                {searchQuery || Object.keys(filters).length > 0 \n                  ? 'No assets match your current filters.' \n                  : 'Start by adding your first asset to the inventory.'\n                }\n              </p>\n              <Button onClick={() => setShowCreateDrawer(true)}>\n                <Plus className=\"w-4 h-4 mr-2\" />\n                Add Asset\n              </Button>\n            </div>\n          )}\n        </div>\n      </Card>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ghxstship/apps/web/app/(app)/(shell)/assets/advancing/AdvancingClient.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadItems'. Either include it or remove the dependency array.","line":73,"column":6,"nodeType":"ArrayExpression","endLine":73,"endColumn":13,"suggestions":[{"desc":"Update the dependencies array to be: [loadItems, orgId]","fix":{"range":[3005,3012],"text":"[loadItems, orgId]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'filterItems'. Either include it or remove the dependency array.","line":77,"column":6,"nodeType":"ArrayExpression","endLine":77,"endColumn":74,"suggestions":[{"desc":"Update the dependencies array to be: [filterItems, items, searchQuery, selectedCategory, selectedStatus, selectedType]","fix":{"range":[3060,3128],"text":"[filterItems, items, searchQuery, selectedCategory, selectedStatus, selectedType]"}}]},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Download' is not defined.","line":368,"column":14,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":368,"endColumn":22},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Edit' is not defined.","line":467,"column":26,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":467,"endColumn":30},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Copy' is not defined.","line":474,"column":26,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":474,"endColumn":30}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { User, FileText, Settings, Award, Calendar, TrendingUp, Activity, Clock, Plus, Search, Play, Trash2 } from \"lucide-react\";\nimport { useState, useEffect } from 'react';\nimport { Card, Button, UnifiedInput, Badge, Drawer } from '@ghxstship/ui';\nimport { createBrowserClient } from '@ghxstship/auth';\nimport { useTranslations } from 'next-intl';\n\ninterface AdvancingItem {\n  id: string;\n  organizationId: string;\n  projectId?: string;\n  assetId?: string;\n  name: string;\n  description?: string;\n  category: string;\n  type: 'purchase' | 'rental' | 'service';\n  status: 'requested' | 'approved' | 'ordered' | 'delivered' | 'cancelled';\n  priority: 'low' | 'medium' | 'high' | 'urgent';\n  requestedBy: string;\n  approvedBy?: string;\n  vendor?: string;\n  estimatedCost?: number;\n  actualCost?: number;\n  quantity: number;\n  unit?: string;\n  requestedDate: string;\n  neededBy?: string;\n  deliveryDate?: string;\n  location?: string;\n  notes?: string;\n  attachments?: string[];\n  createdAt?: string;\n  updatedAt?: string;\n}\n\ninterface AdvancingClientProps {\n  orgId: string;\n}\n\nconst ASSET_CATEGORIES = [\n  { id: 'site_infrastructure', name: 'Site Infrastructure', color: 'bg-accent' },\n  { id: 'site_assets', name: 'Site Assets', color: 'bg-success' },\n  { id: 'site_vehicles', name: 'Site Vehicles', color: 'bg-secondary' },\n  { id: 'site_services', name: 'Site Services', color: 'bg-warning' },\n  { id: 'heavy_machinery', name: 'Heavy Machinery & Equipment', color: 'bg-destructive' },\n  { id: 'it_communication', name: 'IT & Communication Services', color: 'bg-info' },\n  { id: 'office_admin', name: 'Office & Admin', color: 'bg-secondary' },\n  { id: 'access_credentials', name: 'Access & Credentials', color: 'bg-accent' },\n  { id: 'parking', name: 'Parking', color: 'bg-accent/80' },\n  { id: 'travel_lodging', name: 'Travel & Lodging', color: 'bg-secondary/80' },\n  { id: 'artist_technical', name: 'Artist Technical', color: 'bg-success/80' },\n  { id: 'artist_hospitality', name: 'Artist Hospitality', color: 'bg-warning/80' },\n  { id: 'artist_travel', name: 'Artist Travel & Lodging', color: 'bg-info/80' }\n] as const;\n\nexport default function AdvancingClient({ orgId }: AdvancingClientProps) {\n  const t = useTranslations('assets.advancing');\n  const supabase = createBrowserClient();\n  const [items, setItems] = useState<AdvancingItem[]>([]);\n  const [filteredItems, setFilteredItems] = useState<AdvancingItem[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [searchQuery, setSearchQuery] = useState('');\n  const [selectedCategory, setSelectedCategory] = useState<string>('all');\n  const [selectedStatus, setSelectedStatus] = useState<string>('all');\n  const [selectedType, setSelectedType] = useState<string>('all');\n  const [showDrawer, setShowDrawer] = useState(false);\n  const [selectedItem, setSelectedItem] = useState<AdvancingItem | null>(null);\n  const [view, setView] = useState<'grid' | 'list' | 'kanban'>('list');\n\n  useEffect(() => {\n    loadItems();\n  }, [orgId]);\n\n  useEffect(() => {\n    filterItems();\n  }, [items, searchQuery, selectedCategory, selectedStatus, selectedType]);\n\n  const loadItems = async () => {\n    setLoading(true);\n    try {\n      const { data, error } = await supabase\n        .from('asset_advancing')\n        .select('*')\n        .eq('organization_id', orgId)\n        .order('created_at', { ascending: false });\n\n      if (error) {\n        console.error('Error loading advancing items:', error);\n        setItems(generateDemoItems());\n      } else {\n        setItems(data || []);\n      }\n    } catch (error) {\n      console.error('Error loading advancing items:', error);\n      setItems(generateDemoItems());\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const generateDemoItems = (): AdvancingItem[] => [\n    {\n      id: '1',\n      organizationId: orgId,\n      projectId: 'proj-001',\n      name: 'Additional Stage Lighting Rig',\n      description: 'Extra LED wash lights and spotlights for main stage performance',\n      category: 'artist_technical',\n      type: 'rental',\n      status: 'approved',\n      priority: 'high',\n      requestedBy: 'Captain Blackbeard',\n      approvedBy: 'First Mate Silver',\n      vendor: 'Lighting Solutions Co.',\n      estimatedCost: 5000,\n      actualCost: 4800,\n      quantity: 12,\n      unit: 'fixtures',\n      requestedDate: '2024-08-01T10:00:00Z',\n      neededBy: '2024-08-15T18:00:00Z',\n      deliveryDate: '2024-08-14T14:00:00Z',\n      location: 'Main Stage Area',\n      notes: 'Need DMX control capability and weather protection',\n      createdAt: '2024-08-01T10:00:00Z'\n    },\n    {\n      id: '2',\n      organizationId: orgId,\n      projectId: 'proj-002',\n      name: 'Crew Catering Service',\n      description: 'Daily meal service for 50 crew members during event week',\n      category: 'artist_hospitality',\n      type: 'service',\n      status: 'ordered',\n      priority: 'medium',\n      requestedBy: 'Quartermaster Hook',\n      approvedBy: 'Captain Blackbeard',\n      vendor: 'Galley Grub Catering',\n      estimatedCost: 8000,\n      quantity: 7,\n      unit: 'days',\n      requestedDate: '2024-07-20T09:00:00Z',\n      neededBy: '2024-08-10T07:00:00Z',\n      location: 'Crew Mess Hall',\n      notes: 'Include vegetarian and gluten-free options. Setup required by 6 AM daily',\n      createdAt: '2024-07-20T09:00:00Z'\n    },\n    {\n      id: '3',\n      organizationId: orgId,\n      name: 'Portable Generator Rental',\n      description: 'Backup power generation for emergency situations',\n      category: 'site_services',\n      type: 'rental',\n      status: 'requested',\n      priority: 'urgent',\n      requestedBy: 'Chief Engineer Sparks',\n      vendor: 'Power Pro Rentals',\n      estimatedCost: 1200,\n      quantity: 2,\n      unit: 'units',\n      requestedDate: '2024-08-05T14:30:00Z',\n      neededBy: '2024-08-12T08:00:00Z',\n      location: 'Power Distribution Center',\n      notes: 'Minimum 50kW capacity each. Fuel included for 48 hours operation',\n      createdAt: '2024-08-05T14:30:00Z'\n    },\n    {\n      id: '4',\n      organizationId: orgId,\n      projectId: 'proj-001',\n      name: 'Security Equipment Package',\n      description: 'Additional security cameras and access control systems',\n      category: 'site_infrastructure',\n      type: 'purchase',\n      status: 'delivered',\n      priority: 'high',\n      requestedBy: 'Security Chief Bones',\n      approvedBy: 'First Mate Silver',\n      vendor: 'SecureTech Systems',\n      estimatedCost: 3500,\n      actualCost: 3200,\n      quantity: 1,\n      unit: 'package',\n      requestedDate: '2024-07-15T11:00:00Z',\n      neededBy: '2024-08-01T12:00:00Z',\n      deliveryDate: '2024-07-30T10:00:00Z',\n      location: 'Security Office',\n      notes: 'Installation completed. System operational and tested',\n      createdAt: '2024-07-15T11:00:00Z'\n    },\n    {\n      id: '5',\n      organizationId: orgId,\n      name: 'Artist Transportation Service',\n      description: 'VIP transport for headlining performers',\n      category: 'artist_travel',\n      type: 'service',\n      status: 'approved',\n      priority: 'high',\n      requestedBy: 'Artist Relations Parrot',\n      approvedBy: 'Captain Blackbeard',\n      vendor: 'Luxury Fleet Services',\n      estimatedCost: 2500,\n      quantity: 3,\n      unit: 'vehicles',\n      requestedDate: '2024-07-25T16:00:00Z',\n      neededBy: '2024-08-16T19:00:00Z',\n      location: 'VIP Entrance',\n      notes: 'Black SUVs preferred. Professional chauffeurs required',\n      createdAt: '2024-07-25T16:00:00Z'\n    },\n    {\n      id: '6',\n      organizationId: orgId,\n      name: 'Temporary Office Setup',\n      description: 'Mobile office units for production management',\n      category: 'office_admin',\n      type: 'rental',\n      status: 'cancelled',\n      priority: 'low',\n      requestedBy: 'Admin Assistant Compass',\n      vendor: 'Mobile Office Solutions',\n      estimatedCost: 1800,\n      quantity: 2,\n      unit: 'units',\n      requestedDate: '2024-07-10T13:00:00Z',\n      neededBy: '2024-08-05T09:00:00Z',\n      location: 'Administration Area',\n      notes: 'Cancelled - decided to use existing facilities instead',\n      createdAt: '2024-07-10T13:00:00Z'\n    }\n  ];\n\n  const filterItems = () => {\n    let filtered = [...items];\n\n    // Search filter\n    if (searchQuery) {\n      filtered = filtered.filter(item =>\n        item.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\n        item.description?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n        item.vendor?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n        item.requestedBy.toLowerCase().includes(searchQuery.toLowerCase())\n      );\n    }\n\n    // Category filter\n    if (selectedCategory !== 'all') {\n      filtered = filtered.filter(item => item.category === selectedCategory);\n    }\n\n    // Status filter\n    if (selectedStatus !== 'all') {\n      filtered = filtered.filter(item => item.status === selectedStatus);\n    }\n\n    // Type filter\n    if (selectedType !== 'all') {\n      filtered = filtered.filter(item => item.type === selectedType);\n    }\n\n    setFilteredItems(filtered);\n  };\n\n  const handleCreateItem = () => {\n    setSelectedItem(null);\n    setShowDrawer(true);\n  };\n\n  const handleEditItem = (item: AdvancingItem) => {\n    setSelectedItem(item);\n    setShowDrawer(true);\n  };\n\n  const handleDuplicateItem = (item: AdvancingItem) => {\n    const duplicated = {\n      ...item,\n      id: crypto.randomUUID(),\n      name: `${item.name} (Copy)`,\n      status: 'requested' as const,\n      createdAt: new Date().toISOString()\n    };\n    setItems(prev => [duplicated, ...prev]);\n  };\n\n  const handleDeleteItem = async (itemId: string) => {\n    if (confirm('Are you sure you want to delete this advancing item?')) {\n      setItems(prev => prev.filter(i => i.id !== itemId));\n    }\n  };\n\n  const getStatusBadge = (status: AdvancingItem['status']) => {\n    switch (status) {\n      case 'requested':\n        return <Badge variant=\"secondary\">Requested</Badge>;\n      case 'approved':\n        return <Badge variant=\"success\">Approved</Badge>;\n      case 'ordered':\n        return <Badge variant=\"warning\">Ordered</Badge>;\n      case 'delivered':\n        return <Badge variant=\"success\">Delivered</Badge>;\n      case 'cancelled':\n        return <Badge variant=\"destructive\">Cancelled</Badge>;\n      default:\n        return <Badge variant=\"outline\">{status}</Badge>;\n    }\n  };\n\n  const getPriorityBadge = (priority: AdvancingItem['priority']) => {\n    switch (priority) {\n      case 'urgent':\n        return <Badge variant=\"destructive\">Urgent</Badge>;\n      case 'high':\n        return <Badge variant=\"warning\">High</Badge>;\n      case 'medium':\n        return <Badge variant=\"secondary\">Medium</Badge>;\n      case 'low':\n        return <Badge variant=\"outline\">Low</Badge>;\n      default:\n        return <Badge variant=\"outline\">{priority}</Badge>;\n    }\n  };\n\n  const getTypeBadge = (type: AdvancingItem['type']) => {\n    switch (type) {\n      case 'purchase':\n        return <Badge variant=\"default\">Purchase</Badge>;\n      case 'rental':\n        return <Badge variant=\"secondary\">Rental</Badge>;\n      case 'service':\n        return <Badge variant=\"outline\">Service</Badge>;\n      default:\n        return <Badge variant=\"outline\">{type}</Badge>;\n    }\n  };\n\n  const getCategoryColor = (category: string) => {\n    const categoryInfo = ASSET_CATEGORIES.find(cat => cat.id === category);\n    return categoryInfo?.color || 'bg-secondary';\n  };\n\n  const formatCurrency = (value: number) => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD'\n    }).format(value);\n  };\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString('en-US', {\n      month: 'short',\n      day: 'numeric',\n      year: 'numeric'\n    });\n  };\n\n  return (\n    <div className=\"stack-lg\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-heading-3 text-heading-3 font-anton uppercase\">Asset Advancing</h1>\n          <p className=\"text-body-sm color-muted\">Request and manage asset procurement</p>\n        </div>\n        <div className=\"flex items-center gap-sm\">\n          <Button variant=\"outline\" className=\"flex items-center gap-sm\">\n            <Download className=\"w-4 h-4\" />\n            Export\n          </Button>\n          <Button onClick={handleCreateItem} className=\"flex items-center gap-sm\">\n            <Plus className=\"w-4 h-4\" />\n            New Request\n          </Button>\n        </div>\n      </div>\n\n      {/* Filters */}\n      <Card>\n        <div className=\"p-md\">\n          <div className=\"flex flex-wrap items-center gap-md\">\n            <div className=\"flex-1 min-w-64\">\n              <div className=\"relative\">\n                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 color-muted w-4 h-4\" />\n                <UnifiedInput                   placeholder=\"Search requests...\"\n                  value={searchQuery}\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => setSearchQuery(e.target.value)}\n                  className=\"pl-2xl\"\n                />\n              </div>\n            </div>\n            <div className=\"flex items-center gap-sm\">\n              <select\n                value={selectedCategory}\n                onChange={(e: React.ChangeEvent<HTMLInputElement>) => setSelectedCategory(e.target.value)}\n                className=\" px-md py-sm border border-border rounded-md focus:outline-none focus:ring-2 focus:ring-primary\"\n              >\n                <option value=\"all\">All Categories</option>\n                {ASSET_CATEGORIES.map(category => (\n                  <option key={category.id} value={category.id}>\n                    {category.name}\n                  </option>\n                ))}\n              </select>\n              <select\n                value={selectedType}\n                onChange={(e: React.ChangeEvent<HTMLInputElement>) => setSelectedType(e.target.value)}\n                className=\" px-md py-sm border border-border rounded-md focus:outline-none focus:ring-2 focus:ring-primary\"\n              >\n                <option value=\"all\">All Types</option>\n                <option value=\"purchase\">Purchase</option>\n                <option value=\"rental\">Rental</option>\n                <option value=\"service\">Service</option>\n              </select>\n              <select\n                value={selectedStatus}\n                onChange={(e: React.ChangeEvent<HTMLInputElement>) => setSelectedStatus(e.target.value)}\n                className=\" px-md py-sm border border-border rounded-md focus:outline-none focus:ring-2 focus:ring-primary\"\n              >\n                <option value=\"all\">All Status</option>\n                <option value=\"requested\">Requested</option>\n                <option value=\"approved\">Approved</option>\n                <option value=\"ordered\">Ordered</option>\n                <option value=\"delivered\">Delivered</option>\n                <option value=\"cancelled\">Cancelled</option>\n              </select>\n            </div>\n          </div>\n        </div>\n      </Card>\n\n      {/* Items List */}\n      {loading ? (\n        <Card>\n          <div className=\"p-xl text-center color-muted\">Loading advancing requests...</div>\n        </Card>\n      ) : filteredItems.length === 0 ? (\n        <Card>\n          <div className=\"p-xl text-center color-muted\">\n            No advancing requests found matching your criteria.\n          </div>\n        </Card>\n      ) : (\n        <div className=\"stack-md\">\n          {filteredItems.map(item => (\n            <Card key={item.id} className=\"hover:shadow-elevated transition-shadow\">\n              <div className=\"p-md\">\n                <div className=\"flex items-start justify-between mb-sm\">\n                  <div className=\"flex items-center gap-sm\">\n                    <div className={`w-3 h-3 rounded-full ${getCategoryColor(item.category)}`} />\n                    <div>\n                      <h3 className=\"text-body text-heading-4\">{item.name}</h3>\n                      <p className=\"text-body-sm color-muted\">\n                        Requested by {item.requestedBy} • {formatDate(item.requestedDate)}\n                      </p>\n                    </div>\n                  </div>\n                  <div className=\"flex items-center gap-sm\">\n                    {getPriorityBadge(item.priority)}\n                    {getStatusBadge(item.status)}\n                    <div className=\"flex items-center gap-xs ml-sm\">\n                      <Button\n                       \n                        variant=\"ghost\"\n                        onClick={() => handleEditItem(item)}\n                      >\n                        <Edit className=\"w-3 h-3\" />\n                      </Button>\n                      <Button\n                       \n                        variant=\"ghost\"\n                        onClick={() => handleDuplicateItem(item)}\n                      >\n                        <Copy className=\"w-3 h-3\" />\n                      </Button>\n                      <Button\n                       \n                        variant=\"ghost\"\n                        onClick={() => handleDeleteItem(item.id)}\n                      >\n                        <Trash2 className=\"w-3 h-3\" />\n                      </Button>\n                    </div>\n                  </div>\n                </div>\n\n                {item.description && (\n                  <p className=\"text-body-sm color-muted mb-sm\">\n                    {item.description}\n                  </p>\n                )}\n\n                <div className=\"grid grid-cols-2 md:grid-cols-4 gap-md mb-md\">\n                  <div>\n                    <span className=\"text-body-sm color-muted block\">Type</span>\n                    {getTypeBadge(item.type)}\n                  </div>\n                  <div>\n                    <span className=\"text-body-sm color-muted block\">Quantity</span>\n                    <span className=\"form-label\">{item.quantity} {item.unit}</span>\n                  </div>\n                  <div>\n                    <span className=\"text-body-sm color-muted block\">Estimated Cost</span>\n                    <span className=\"form-label\">\n                      {item.estimatedCost ? formatCurrency(item.estimatedCost) : 'TBD'}\n                    </span>\n                  </div>\n                  <div>\n                    <span className=\"text-body-sm color-muted block\">Needed By</span>\n                    <span className=\"form-label\">\n                      {item.neededBy ? formatDate(item.neededBy) : 'TBD'}\n                    </span>\n                  </div>\n                </div>\n\n                {item.vendor && (\n                  <div className=\"flex items-center gap-md text-body-sm\">\n                    <span className=\"color-muted\">Vendor:</span>\n                    <span className=\"form-label\">{item.vendor}</span>\n                    {item.location && (\n                      <>\n                        <span className=\"color-muted\">Location:</span>\n                        <span>{item.location}</span>\n                      </>\n                    )}\n                  </div>\n                )}\n\n                {item.notes && (\n                  <div className=\"mt-sm p-sm bg-secondary rounded-md\">\n                    <h3 className=\"text-body text-heading-4\">Notes</h3>\n                    <p className=\"text-body-sm\">{item.notes}</p>\n                  </div>\n                )}\n              </div>\n            </Card>\n          ))}\n        </div>\n      )}\n\n      {/* Request Form Drawer */}\n      <Drawer\n        open={showDrawer}\n        onClose={() => setShowDrawer(false)}\n        title={selectedItem ? 'Edit Advancing Request' : 'New Advancing Request'}\n       \n      >\n        <div className=\"p-lg stack-md\">\n          <div>\n            <label className=\"block text-body-sm form-label mb-xs\">Request Name</label>\n            <UnifiedInput               placeholder=\"Enter request name\"\n              defaultValue={selectedItem?.name}\n            />\n          </div>\n          <div>\n            <label className=\"block text-body-sm form-label mb-xs\">Description</label>\n            <UnifiedInput               placeholder=\"Enter description\"\n              defaultValue={selectedItem?.description}\n            />\n          </div>\n          <div className=\"grid grid-cols-2 gap-md\">\n            <div>\n              <label className=\"block text-body-sm form-label mb-xs\">Category</label>\n              <select\n                defaultValue={selectedItem?.category}\n                className=\"w-full  px-md py-sm border border-border rounded-md focus:outline-none focus:ring-2 focus:ring-primary\"\n              >\n                {ASSET_CATEGORIES.map(category => (\n                  <option key={category.id} value={category.id}>\n                    {category.name}\n                  </option>\n                ))}\n              </select>\n            </div>\n            <div>\n              <label className=\"block text-body-sm form-label mb-xs\">Type</label>\n              <select\n                defaultValue={selectedItem?.type}\n                className=\"w-full  px-md py-sm border border-border rounded-md focus:outline-none focus:ring-2 focus:ring-primary\"\n              >\n                <option value=\"purchase\">Purchase</option>\n                <option value=\"rental\">Rental</option>\n                <option value=\"service\">Service</option>\n              </select>\n            </div>\n          </div>\n          <div className=\"grid grid-cols-3 gap-md\">\n            <div>\n              <label className=\"block text-body-sm form-label mb-xs\">Quantity</label>\n              <UnifiedInput                 type=\"number\"\n                placeholder=\"1\"\n                defaultValue={selectedItem?.quantity}\n              />\n            </div>\n            <div>\n              <label className=\"block text-body-sm form-label mb-xs\">Unit</label>\n              <UnifiedInput                 placeholder=\"units\"\n                defaultValue={selectedItem?.unit}\n              />\n            </div>\n            <div>\n              <label className=\"block text-body-sm form-label mb-xs\">Priority</label>\n              <select\n                defaultValue={selectedItem?.priority}\n                className=\"w-full  px-md py-sm border border-border rounded-md focus:outline-none focus:ring-2 focus:ring-primary\"\n              >\n                <option value=\"low\">Low</option>\n                <option value=\"medium\">Medium</option>\n                <option value=\"high\">High</option>\n                <option value=\"urgent\">Urgent</option>\n              </select>\n            </div>\n          </div>\n          <div className=\"grid grid-cols-2 gap-md\">\n            <div>\n              <label className=\"block text-body-sm form-label mb-xs\">Estimated Cost</label>\n              <UnifiedInput                 type=\"number\"\n                placeholder=\"0.00\"\n                defaultValue={selectedItem?.estimatedCost}\n              />\n            </div>\n            <div>\n              <label className=\"block text-body-sm form-label mb-xs\">Needed By</label>\n              <UnifiedInput                 type=\"date\"\n                defaultValue={selectedItem?.neededBy?.split('T')[0]}\n              />\n            </div>\n          </div>\n          <div>\n            <label className=\"block text-body-sm form-label mb-xs\">Notes</label>\n            <textarea\n              className=\"w-full  px-md py-sm border border-border rounded-md focus:outline-none focus:ring-2 focus:ring-primary\"\n              rows={3}\n              placeholder=\"Additional notes or requirements\"\n              defaultValue={selectedItem?.notes}\n            />\n          </div>\n          <div className=\"flex gap-sm pt-md\">\n            <Button className=\"flex-1\">\n              {selectedItem ? 'Update Request' : 'Submit Request'}\n            </Button>\n            <Button variant=\"outline\" onClick={() => setShowDrawer(false)}>\n              Cancel\n            </Button>\n          </div>\n        </div>\n      </Drawer>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ghxstship/apps/web/app/(app)/(shell)/assets/assignments/AssignmentsClient.tsx","messages":[{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Eye' is not defined.","line":502,"column":16,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":502,"endColumn":19},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'RefreshCw' is not defined.","line":512,"column":16,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":512,"endColumn":25},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Download' is not defined.","line":528,"column":16,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":528,"endColumn":24},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useMemo has a missing dependency: 'dataForViews'. Either include it or remove the dependency array.","line":643,"column":5,"nodeType":"ArrayExpression","endLine":657,"endColumn":6,"suggestions":[{"desc":"Update the dependencies array to be: [t, fieldConfig, dataForViews, loading, error, fetchAssignments, actions, bulkActions, exportConfig, importConfig, handleDelete, openDrawer, orgId]","fix":{"range":[20283,20516],"text":"[t, fieldConfig, dataForViews, loading, error, fetchAssignments, actions, bulkActions, exportConfig, importConfig, handleDelete, openDrawer, orgId]"}}]},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Download' is not defined.","line":723,"column":14,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":723,"endColumn":22},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Download' is not defined.","line":727,"column":14,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":727,"endColumn":22},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Package' is not defined.","line":744,"column":14,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":744,"endColumn":21},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'CheckCircle' is not defined.","line":753,"column":14,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":753,"endColumn":25},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'AlertTriangle' is not defined.","line":762,"column":14,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":762,"endColumn":27},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'ArrowLeftRight' is not defined.","line":771,"column":14,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":771,"endColumn":28}],"suppressedMessages":[],"errorCount":9,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\nimport { User, FileText, Settings, Award, Calendar, TrendingUp, Activity, Clock, Plus, Search, Play, Trash2 } from \"lucide-react\";\nimport React, { useCallback, useEffect, useMemo, useState } from 'react';\nimport { useTranslations } from 'next-intl';\nimport { createBrowserClient } from '@ghxstship/auth';\nimport { Badge, Button, Card } from '@ghxstship/ui';\nimport {\n  DataActions,\n  DataGrid,\n  DataViewProvider,\n  DashboardView,\n  KanbanBoard,\n  ListView,\n  TimelineView,\n  UniversalDrawer,\n  ViewSwitcher\n} from '@ghxstship/ui/components/DataViews';\nimport type {\n  ActionConfig,\n  DashboardWidget,\n  DataRecord,\n  DataViewConfig,\n  ExportConfig,\n  FieldConfig,\n  FilterConfig,\n  ImportConfig,\n  SortConfig\n} from '@ghxstship/ui/components/DataViews/types';\nimport type { FieldConfig as DrawerFieldConfig } from '@ghxstship/ui/components/DataViews/UniversalDrawer';\nimport { assetsService } from '../lib/service';\nimport type { AssetAssignment } from '../types';\n\ninterface AssignmentsClientProps {\n  orgId: string;\n}\n\ntype AssignmentRecord = DataRecord & {\n  id: string;\n  organization_id: string;\n  asset_id: string;\n  asset_name: string;\n  assignee_type: AssetAssignment['assignee_type'];\n  assignee_id: string;\n  assignee_name: string;\n  status: AssetAssignment['status'];\n  assigned_by: string;\n  assigned_date: string;\n  expected_return_date?: string | null;\n  actual_return_date?: string | null;\n  location?: string | null;\n  purpose?: string | null;\n  condition: AssetAssignment['condition'];\n  notes?: string | null;\n  created_at: string;\n  updated_at: string;\n};\n\nconst STATUS_OPTIONS = [\n  { value: 'assigned', label: 'Assigned' },\n  { value: 'in_use', label: 'In Use' },\n  { value: 'returned', label: 'Returned' },\n  { value: 'overdue', label: 'Overdue' },\n  { value: 'damaged', label: 'Damaged' }\n] as const;\n\nconst ASSIGNEE_TYPES = [\n  { value: 'project', label: 'Project' },\n  { value: 'crew_member', label: 'Crew Member' },\n  { value: 'vendor', label: 'Vendor' },\n  { value: 'partner', label: 'Partner' }\n] as const;\n\nconst CONDITION_OPTIONS = [\n  { value: 'excellent', label: 'Excellent' },\n  { value: 'good', label: 'Good' },\n  { value: 'fair', label: 'Fair' },\n  { value: 'poor', label: 'Poor' },\n  { value: 'damaged', label: 'Damaged' }\n] as const;\n\nconst toIsoString = (value: string | null | undefined): string | null => {\n  if (!value) {\n    return null;\n  }\n  if (value.length > 10) {\n    return value;\n  }\n  const date = new Date(value);\n  return Number.isNaN(date.getTime()) ? value : date.toISOString();\n};\n\nexport default function AssignmentsClient({ orgId }: AssignmentsClientProps) {\n  const t = useTranslations('assets.assignments');\n  const realtimeClient = useMemo(() => createBrowserClient(), []);\n\n  const [records, setRecords] = useState<AssignmentRecord[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [formError, setFormError] = useState<string | null>(null);\n  const [drawerOpen, setDrawerOpen] = useState(false);\n  const [drawerMode, setDrawerMode] = useState<'create' | 'edit' | 'view'>('view');\n  const [selectedRecord, setSelectedRecord] = useState<AssignmentRecord | null>(null);\n  const [searchQuery, setSearchQuery] = useState('');\n  const [statusFilter, setStatusFilter] = useState<string>('all');\n  const [assigneeTypeFilter, setAssigneeTypeFilter] = useState<string>('all');\n  const [sorts, setSorts] = useState<SortConfig[] | null>(null);\n  const [busy, setBusy] = useState(false);\n\n  const fieldConfig: FieldConfig[] = useMemo(() => [\n    {\n      key: 'asset_name',\n      label: 'Asset',\n      type: 'text',\n      required: true,\n      searchable: true,\n      sortable: true\n    },\n    {\n      key: 'assignee_name',\n      label: 'Assignee',\n      type: 'text',\n      required: true,\n      searchable: true,\n      sortable: true\n    },\n    {\n      key: 'assignee_type',\n      label: 'Assignee Type',\n      type: 'select',\n      options: ASSIGNEE_TYPES.map(({ value, label }) => ({ value, label })),\n      filterable: true,\n      sortable: true\n    },\n    {\n      key: 'status',\n      label: 'Status',\n      type: 'select',\n      options: STATUS_OPTIONS.map(({ value, label }) => ({ value, label })),\n      filterable: true,\n      sortable: true,\n      render: (value: string) => {\n        const variants = {\n          assigned: 'secondary',\n          in_use: 'success',\n          returned: 'outline',\n          overdue: 'destructive',\n          damaged: 'destructive'\n        } as const;\n        const variant = variants[value as keyof typeof variants] ?? 'outline';\n        return <Badge variant={variant}>{value.replace('_', ' ')}</Badge>;\n      }\n    },\n    {\n      key: 'condition',\n      label: 'Condition',\n      type: 'select',\n      options: CONDITION_OPTIONS.map(({ value, label }) => ({ value, label })),\n      filterable: true,\n      sortable: true\n    },\n    {\n      key: 'assigned_date',\n      label: 'Assigned Date',\n      type: 'date',\n      sortable: true\n    },\n    {\n      key: 'expected_return_date',\n      label: 'Expected Return',\n      type: 'date',\n      sortable: true\n    },\n    {\n      key: 'actual_return_date',\n      label: 'Actual Return',\n      type: 'date',\n      sortable: true\n    },\n    {\n      key: 'location',\n      label: 'Location',\n      type: 'text',\n      searchable: true\n    },\n    {\n      key: 'purpose',\n      label: 'Purpose',\n      type: 'textarea',\n      searchable: true\n    },\n    {\n      key: 'notes',\n      label: 'Notes',\n      type: 'textarea'\n    },\n    {\n      key: 'assigned_by',\n      label: 'Assigned By',\n      type: 'text',\n      searchable: true\n    }\n  ], []);\n\n  const drawerFields: DrawerFieldConfig[] = useMemo(\n    () =>\n      fieldConfig.map((field) => {\n        const drawerType: DrawerFieldConfig['type'] =\n          field.type === 'multiselect' || field.type === 'array' || field.type === 'object'\n            ? 'text'\n            : (field.type as DrawerFieldConfig['type']);\n        return {\n          key: field.key,\n          label: field.label,\n          type: drawerType,\n          options: field.options,\n          required: field.required\n        } as DrawerFieldConfig;\n      }),\n    [fieldConfig]\n  );\n\n  const fetchAssignments = useCallback(async () => {\n    setLoading(true);\n    setError(null);\n    try {\n      const assignments = await assetsService.getAssetAssignments(orgId);\n      const normalized = assignments.map((assignment) => ({\n        id: assignment.id,\n        organization_id: assignment.organization_id,\n        asset_id: assignment.asset_id,\n        asset_name: (assignment as unknown).assets?.name ?? assignment.asset_id,\n        assignee_type: assignment.assignee_type,\n        assignee_id: assignment.assignee_id,\n        assignee_name: assignment.assignee_name,\n        status: assignment.status,\n        assigned_by: assignment.assigned_by,\n        assigned_date: assignment.assigned_date,\n        expected_return_date: assignment.expected_return_date ?? null,\n        actual_return_date: assignment.actual_return_date ?? null,\n        location: assignment.location ?? null,\n        purpose: assignment.purpose ?? null,\n        condition: assignment.condition,\n        notes: assignment.notes ?? null,\n        created_at: assignment.created_at,\n        updated_at: assignment.updated_at\n      }));\n      setRecords(normalized);\n    } catch (err) {\n      console.error('Failed to load assignments', err);\n      setError(t('errors.load'));\n    } finally {\n      setLoading(false);\n    }\n  }, [orgId, t]);\n\n  useEffect(() => {\n    fetchAssignments();\n  }, [fetchAssignments]);\n\n  useEffect(() => {\n    const channel = realtimeClient\n      .channel(`public:asset_assignments:${orgId}`)\n      .on(\n        'postgres_changes',\n        { event: '*', schema: 'public', table: 'asset_assignments', filter: `organization_id=eq.${orgId}` },\n        () => fetchAssignments()\n      )\n      .subscribe();\n\n    return () => {\n      channel.unsubscribe();\n    };\n  }, [realtimeClient, orgId, fetchAssignments]);\n\n  const derivedRecords = useMemo(() => {\n    let result = records.filter((record) => {\n      const matchesSearch = searchQuery\n        ? [\n            record.asset_name,\n            record.assignee_name,\n            record.assigned_by,\n            record.location ?? '',\n            record.purpose ?? '',\n            record.notes ?? ''\n          ]\n            .join(' ')\n            .toLowerCase()\n            .includes(searchQuery.toLowerCase())\n        : true;\n      const matchesStatus = statusFilter === 'all' || record.status === statusFilter;\n      const matchesType = assigneeTypeFilter === 'all' || record.assignee_type === assigneeTypeFilter;\n      return matchesSearch && matchesStatus && matchesType;\n    });\n\n    if (sorts && sorts.length > 0) {\n      const { field, direction } = sorts[0];\n      result = [...result].sort((a, b) => {\n        const aValue = (a as unknown)[field];\n        const bValue = (b as unknown)[field];\n        if (aValue === bValue) return 0;\n        if (aValue == null) return direction === 'asc' ? -1 : 1;\n        if (bValue == null) return direction === 'asc' ? 1 : -1;\n        if (aValue > bValue) return direction === 'asc' ? 1 : -1;\n        return direction === 'asc' ? -1 : 1;\n      });\n    }\n\n    return result;\n  }, [records, searchQuery, statusFilter, assigneeTypeFilter, sorts]);\n\n  const dataForViews = useMemo(\n    () =>\n      derivedRecords.map((record) => ({\n        ...record,\n        // expose normalized fields the views expect\n        title: record.asset_name,\n        subtitle: record.assignee_name,\n        description: record.purpose,\n        assignee: record.assignee_name,\n        dueDate: record.expected_return_date || undefined,\n        status: record.status,\n        priority: record.condition,\n        tags: record.location ? [record.location] : [],\n        createdAt: record.created_at,\n        updatedAt: record.updated_at\n      })),\n    [derivedRecords]\n  );\n\n  const stats = useMemo(() => {\n    const total = derivedRecords.length;\n    const inUse = derivedRecords.filter((record) => record.status === 'in_use').length;\n    const overdue = derivedRecords.filter((record) => record.status === 'overdue').length;\n    const returned = derivedRecords.filter((record) => record.status === 'returned').length;\n    return { total, inUse, overdue, returned };\n  }, [derivedRecords]);\n\n  const openDrawer = useCallback((mode: 'create' | 'view' | 'edit', record?: AssignmentRecord | null) => {\n    setDrawerMode(mode);\n    setSelectedRecord(record ?? null);\n    setDrawerOpen(true);\n    setFormError(null);\n  }, []);\n\n  const closeDrawer = useCallback(() => {\n    setDrawerOpen(false);\n    setSelectedRecord(null);\n  }, []);\n\n  const persistAssignment = useCallback(\n    async (formData: Record<string, unknown>) => {\n      setBusy(true);\n      setFormError(null);\n      try {\n        const payload: Partial<AssetAssignment> = {\n          asset_id: formData.asset_id || selectedRecord?.asset_id,\n          assignee_type: formData.assignee_type,\n          assignee_id: formData.assignee_id || selectedRecord?.assignee_id,\n          assignee_name: formData.assignee_name,\n          status: formData.status,\n          assigned_by: formData.assigned_by,\n          assigned_date: toIsoString(formData.assigned_date) ?? new Date().toISOString(),\n          expected_return_date: toIsoString(formData.expected_return_date) ?? undefined,\n          actual_return_date: toIsoString(formData.actual_return_date) ?? undefined,\n          location: formData.location || null,\n          purpose: formData.purpose || null,\n          condition: formData.condition,\n          notes: formData.notes || null\n        };\n\n        if (!payload.asset_id) {\n          throw new Error(t('errors.assetRequired'));\n        }\n\n        if (drawerMode === 'create') {\n          await assetsService.createAssetAssignment(payload, orgId);\n        } else if (drawerMode === 'edit' && selectedRecord) {\n          await assetsService.updateAssetAssignment(selectedRecord.id, payload);\n        }\n\n        await fetchAssignments();\n        closeDrawer();\n      } catch (err: unknown) {\n        console.error('Failed to save assignment', err);\n        setFormError(err?.message ?? t('errors.save'));\n      } finally {\n        setBusy(false);\n      }\n    },\n    [drawerMode, selectedRecord, orgId, fetchAssignments, closeDrawer, t]\n  );\n\n  const handleDelete = useCallback(\n    async (ids: string[]) => {\n      if (!ids.length) return;\n      setBusy(true);\n      setError(null);\n      try {\n        await Promise.all(ids.map((id) => assetsService.deleteAssetAssignment(id)));\n        await fetchAssignments();\n      } catch (err) {\n        console.error('Failed to delete assignments', err);\n        setError(t('errors.delete'));\n      } finally {\n        setBusy(false);\n      }\n    },\n    [fetchAssignments, t]\n  );\n\n  const handleExport = useCallback(\n    (data: DataRecord[], format: string) => {\n      if (!data.length) return;\n      const headers = fieldConfig.map((field) => field.label);\n      const keys = fieldConfig.map((field) => field.key);\n\n      if (format === 'csv') {\n        const rows = [headers.join(',')];\n        data.forEach((record) => {\n          const row = keys.map((key) => {\n            const value = (record as unknown)[key];\n            if (value == null) return '';\n            if (Array.isArray(value)) return `\"${value.join(';')}\"`;\n            if (typeof value === 'string') return `\"${value.replace(/\"/g, '\"\"')}\"`;\n            return value;\n          });\n          rows.push(row.join(','));\n        });\n        const blob = new Blob([rows.join('\\n')], { type: 'text/csv' });\n        const url = URL.createObjectURL(blob);\n        const link = document.createElement('a');\n        link.href = url;\n        link.download = 'asset-assignments.csv';\n        document.body.appendChild(link);\n        link.click();\n        document.body.removeChild(link);\n        URL.revokeObjectURL(url);\n        return;\n      }\n\n      const payload = JSON.stringify(data, null, 2);\n      const blob = new Blob([payload], { type: 'application/json' });\n      const url = URL.createObjectURL(blob);\n      const link = document.createElement('a');\n      link.href = url;\n      link.download = 'asset-assignments.json';\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n      URL.revokeObjectURL(url);\n    },\n    [fieldConfig]\n  );\n\n  const handleImport = useCallback(\n    async (data: unknown[]) => {\n      if (!data.length) return;\n      setBusy(true);\n      setError(null);\n      try {\n        for (const record of data) {\n          const payload: Partial<AssetAssignment> = {\n            asset_id: record.asset_id,\n            assignee_type: record.assignee_type,\n            assignee_id: record.assignee_id,\n            assignee_name: record.assignee_name,\n            status: record.status,\n            assigned_by: record.assigned_by,\n            assigned_date: record.assigned_date,\n            expected_return_date: record.expected_return_date || null,\n            actual_return_date: record.actual_return_date || null,\n            location: record.location || null,\n            purpose: record.purpose || null,\n            condition: record.condition || 'good',\n            notes: record.notes || null\n          };\n          await assetsService.createAssetAssignment(payload, orgId);\n        }\n        await fetchAssignments();\n      } catch (err) {\n        console.error('Failed to import assignments', err);\n        setError(t('errors.import'));\n      } finally {\n        setBusy(false);\n      }\n    },\n    [fetchAssignments, orgId, t]\n  );\n\n  const actions: ActionConfig[] = useMemo(\n    () => [\n      {\n        key: 'create',\n        label: t('actions.new'),\n        icon: <Plus className=\"w-4 h-4\" />,\n        variant: 'primary',\n        onClick: () => openDrawer('create')\n      },\n      {\n        key: 'view',\n        label: t('actions.view'),\n        icon: <Eye className=\"w-4 h-4\" />,\n        requiresSelection: true,\n        onClick: (ids) => {\n          const record = records.find((item) => item.id === ids[0]);\n          if (record) openDrawer('view', record);\n        }\n      },\n      {\n        key: 'edit',\n        label: t('actions.edit'),\n        icon: <RefreshCw className=\"w-4 h-4\" />,\n        requiresSelection: true,\n        onClick: (ids) => {\n          const record = records.find((item) => item.id === ids[0]);\n          if (record) openDrawer('edit', record);\n        }\n      }\n    ],\n    [openDrawer, records, t]\n  );\n\n  const bulkActions: ActionConfig[] = useMemo(\n    () => [\n      {\n        key: 'export',\n        label: t('bulk.exportSelected'),\n        icon: <Download className=\"w-4 h-4\" />,\n        requiresSelection: true,\n        onClick: (ids) => {\n          const selected = records.filter((record) => ids.includes(record.id));\n          handleExport(selected, 'csv');\n        }\n      },\n      {\n        key: 'delete',\n        label: t('bulk.deleteSelected'),\n        icon: <Trash2 className=\"w-4 h-4\" />,\n        variant: 'destructive',\n        requiresSelection: true,\n        confirmMessage: t('bulk.deleteConfirm'),\n        onClick: (ids) => handleDelete(ids)\n      }\n    ],\n    [records, handleExport, handleDelete, t]\n  );\n\n  const exportConfig: ExportConfig = useMemo(\n    () => ({\n      formats: ['csv', 'json'],\n      includeFilters: true,\n      onExport: (format, data) => handleExport(data, format)\n    }),\n    [handleExport]\n  );\n\n  const importConfig: ImportConfig = useMemo(\n    () => ({\n      formats: ['csv', 'json'],\n      template:\n        'asset_id,assignee_type,assignee_id,assignee_name,status,assigned_by,assigned_date,expected_return_date,actual_return_date,location,purpose,condition,notes',\n      onImport: handleImport\n    }),\n    [handleImport]\n  );\n\n  const dataViewConfig: DataViewConfig = useMemo(\n    () => ({\n      id: 'assets-assignments',\n      name: t('title'),\n      description: t('description'),\n      viewType: 'grid',\n      defaultView: 'grid',\n      fields: fieldConfig,\n      data: dataForViews,\n      loading,\n      error: error ?? undefined,\n      onRefresh: fetchAssignments,\n      onSearch: setSearchQuery,\n      onFilter: (filters: FilterConfig[]) => {\n        const status = filters.find((filter) => filter.field === 'status')?.value as string | undefined;\n        const assigneeType = filters.find((filter) => filter.field === 'assignee_type')?.value as string | undefined;\n        setStatusFilter(status || 'all');\n        setAssigneeTypeFilter(assigneeType || 'all');\n      },\n      onSort: setSorts,\n      actions,\n      bulkActions,\n      exportConfig,\n      importConfig,\n      allowExport: true,\n      allowImport: true,\n      onDelete: handleDelete,\n      onCreate: () => openDrawer('create'),\n      onEdit: (record: DataRecord) => openDrawer('edit', record as AssignmentRecord),\n      onDuplicate: async (record: DataRecord) => {\n        const {\n          id,\n          organization_id,\n          created_at,\n          updated_at,\n          asset_name,\n          title,\n          subtitle,\n          description,\n          assignee,\n          dueDate,\n          // Asset assignment fields\n          expected_return_date,\n          actual_return_date,\n          location,\n          purpose,\n          condition,\n          notes,\n          ...rest\n        } = record as AssignmentRecord & {\n          title?: string;\n          subtitle?: string;\n          description?: string;\n          assignee?: string;\n          dueDate?: string | null;\n        };\n        await assetsService.createAssetAssignment(\n          {\n            ...rest,\n            asset_id: rest.asset_id,\n            assignee_name: rest.assignee_name,\n            assignee_type: rest.assignee_type,\n            assigned_by: rest.assigned_by,\n            assigned_date: rest.assigned_date,\n            expected_return_date: expected_return_date ?? undefined,\n            actual_return_date: actual_return_date ?? undefined,\n            location: location ?? undefined,\n            purpose: purpose ?? undefined,\n            condition: condition ?? undefined,\n            notes: notes ?? undefined\n          },\n          orgId\n        );\n        await fetchAssignments();\n      }\n    }),\n    [\n      derivedRecords,\n      fieldConfig,\n      loading,\n      error,\n      fetchAssignments,\n      handleDelete,\n      openDrawer,\n      actions,\n      bulkActions,\n      exportConfig,\n      importConfig,\n      orgId,\n      t\n    ]\n  );\n\n  const dashboardWidgets = useMemo<DashboardWidget[]>(\n    () => [\n      {\n        id: 'assignments-total',\n        type: 'metric',\n        title: t('dashboard.widgets.total.title'),\n        size: 'small',\n        position: { x: 0, y: 0, w: 1, h: 1 },\n        config: {\n          metric: 'count',\n          format: 'number',\n          icon: 'database',\n          subtitle: t('dashboard.widgets.total.subtitle')\n        }\n      },\n      {\n        id: 'assignments-overdue',\n        type: 'metric',\n        title: t('dashboard.widgets.overdue.title'),\n        size: 'small',\n        position: { x: 1, y: 0, w: 1, h: 1 },\n        config: {\n          metric: 'count',\n          format: 'number',\n          icon: 'activity',\n          subtitle: t('dashboard.widgets.overdue.subtitle')\n        }\n      },\n      {\n        id: 'assignments-by-status',\n        type: 'chart',\n        title: t('dashboard.widgets.status.title'),\n        size: 'medium',\n        position: { x: 0, y: 1, w: 2, h: 2 },\n        config: {\n          chartType: 'pie',\n          groupBy: 'status'\n        }\n      },\n      {\n        id: 'assignments-recent',\n        type: 'list',\n        title: t('dashboard.widgets.recent.title'),\n        size: 'medium',\n        position: { x: 2, y: 0, w: 2, h: 2 },\n        config: {\n          limit: 5,\n          showTimestamp: true\n        }\n      }\n    ],\n    [t]\n  );\n\n  return (\n    <div className=\"stack-lg\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-heading-3 font-anton uppercase\">{t('title')}</h1>\n          <p className=\"text-body-sm color-muted\">{t('description')}</p>\n        </div>\n        <div className=\"flex items-center gap-sm\">\n          <Button variant=\"secondary\" className=\"flex items-center gap-sm\" onClick={() => handleExport(records, 'csv')}>\n            <Download className=\"w-4 h-4\" />\n            {t('actions.exportCsv')}\n          </Button>\n          <Button variant=\"outline\" className=\"flex items-center gap-sm\" onClick={() => handleExport(records, 'json')}>\n            <Download className=\"w-4 h-4\" />\n            {t('actions.exportJson')}\n          </Button>\n          <Button className=\"flex items-center gap-sm\" onClick={() => openDrawer('create')}>\n            <Plus className=\"w-4 h-4\" />\n            {t('actions.new')}\n          </Button>\n        </div>\n      </div>\n\n      <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-md\">\n        <Card>\n          <div className=\"p-md flex items-center justify-between\">\n            <div>\n              <p className=\"text-body-sm color-muted\">{t('cards.total')}</p>\n              <p className=\"text-heading-3\">{stats.total}</p>\n            </div>\n            <Package className=\"w-6 h-6 color-accent\" />\n          </div>\n        </Card>\n        <Card>\n          <div className=\"p-md flex items-center justify-between\">\n            <div>\n              <p className=\"text-body-sm color-muted\">{t('cards.inUse')}</p>\n              <p className=\"text-heading-3\">{stats.inUse}</p>\n            </div>\n            <CheckCircle className=\"w-6 h-6 color-success\" />\n          </div>\n        </Card>\n        <Card>\n          <div className=\"p-md flex items-center justify-between\">\n            <div>\n              <p className=\"text-body-sm color-muted\">{t('cards.overdue')}</p>\n              <p className=\"text-heading-3\">{stats.overdue}</p>\n            </div>\n            <AlertTriangle className=\"w-6 h-6 color-destructive\" />\n          </div>\n        </Card>\n        <Card>\n          <div className=\"p-md flex items-center justify-between\">\n            <div>\n              <p className=\"text-body-sm color-muted\">{t('cards.returned')}</p>\n              <p className=\"text-heading-3\">{stats.returned}</p>\n            </div>\n            <ArrowLeftRight className=\"w-6 h-6 color-secondary\" />\n          </div>\n        </Card>\n      </div>\n\n      <DashboardView data={dataForViews} widgets={dashboardWidgets} />\n\n      <DataViewProvider config={dataViewConfig}>\n        <div className=\"stack-md\">\n          <DataActions showSearch showFilters showSort showExport showImport showBulkActions showViewOptions />\n          <ViewSwitcher />\n          <DataGrid />\n          <KanbanBoard\n            columns={[\n              { id: 'assigned', title: 'Assigned' },\n              { id: 'in_use', title: 'In Use' },\n              { id: 'overdue', title: 'Overdue' },\n              { id: 'damaged', title: 'Damaged' },\n              { id: 'returned', title: 'Returned' }\n            ]}\n            statusField=\"status\"\n            titleField=\"title\"\n            assigneeField=\"assignee\"\n            dueDateField=\"dueDate\"\n            priorityField=\"priority\"\n            tagsField=\"tags\"\n          />\n          <ListView\n            titleField=\"title\"\n            subtitleField=\"subtitle\"\n            statusField=\"status\"\n            priorityField=\"priority\"\n            tagsField=\"tags\"\n          />\n          <TimelineView startDateField=\"assigned_date\" endDateField=\"expected_return_date\" titleField=\"title\" />\n        </div>\n      </DataViewProvider>\n\n      <UniversalDrawer\n        open={drawerOpen}\n        onClose={() => setDrawerOpen(false)}\n        fields={drawerFields}\n        mode={drawerMode}\n        title={\n          drawerMode === 'create'\n            ? t('drawer.createTitle')\n            : drawerMode === 'edit'\n            ? t('drawer.editTitle')\n            : t('drawer.viewTitle')\n        }\n        record={selectedRecord as DataRecord | null}\n        loading={busy}\n        onSave={persistAssignment}\n        error={formError ?? undefined}\n        tabs={[\n          {\n            key: 'details',\n            label: t('drawer.detailsTab'),\n            content: null\n          }\n        ]}\n      />\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ghxstship/apps/web/app/(app)/(shell)/assets/barcode/BarcodeClient.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useMemo has a missing dependency: 'handleDelete'. Either include it or remove the dependency array.","line":509,"column":7,"nodeType":"ArrayExpression","endLine":509,"endColumn":45,"suggestions":[{"desc":"Update the dependencies array to be: [fieldConfig, data, loading, loadData, handleDelete]","fix":{"range":[14322,14360],"text":"[fieldConfig, data, loading, loadData, handleDelete]"}}]},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Printer' is not defined.","line":525,"column":14,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":525,"endColumn":21},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Download' is not defined.","line":529,"column":14,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":529,"endColumn":22},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'QrCode' is not defined.","line":549,"column":18,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":549,"endColumn":24},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Scan' is not defined.","line":561,"column":18,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":561,"endColumn":22},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Smartphone' is not defined.","line":573,"column":18,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":573,"endColumn":28},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Smartphone' is not defined.","line":585,"column":18,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":585,"endColumn":28},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Printer' is not defined.","line":597,"column":18,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":597,"endColumn":25},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Scan' is not defined.","line":609,"column":18,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":609,"endColumn":22}],"suppressedMessages":[],"errorCount":8,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\nimport { User, FileText, Settings, Award, Calendar, TrendingUp, Activity, Clock, Plus, Search, Play, Trash2 } from \"lucide-react\";\nimport React, { useState, useEffect, useCallback, useMemo } from 'react';\nimport { useTranslations } from 'next-intl';\nimport { createBrowserClient } from '@ghxstship/auth';\nimport { \n  DataViewProvider, \n  DataGrid, \n  KanbanBoard, \n  CalendarView, \n  ListView,\n  TimelineView,\n  DashboardView,\n  ViewSwitcher,\n  DataActions,\n  UniversalDrawer\n} from '@ghxstship/ui/components/DataViews';\nimport { Card, Badge, Button } from '@ghxstship/ui';\nimport type { \n  DataViewConfig, \n  FieldConfig, \n  DataRecord,\n  FilterConfig,\n  SortConfig \n} from '@ghxstship/ui/components/DataViews/types';\n\ninterface BarcodeClientProps {\n  orgId: string;\n}\n\ninterface AssetBarcode extends DataRecord {\n  id: string;\n  asset_id: string;\n  asset_name: string;\n  barcode_type: string;\n  barcode_value: string;\n  qr_code_value: string;\n  status: 'active' | 'inactive' | 'damaged' | 'replaced';\n  print_date: string;\n  printed_by: string;\n  scan_count: number;\n  last_scanned_at?: string;\n  last_scanned_by?: string;\n  location_when_scanned?: string;\n  mobile_app_compatible: boolean;\n  encoding_format: string;\n  label_size: string;\n  label_material: string;\n  replacement_reason?: string;\n  notes?: string;\n  created_at: string;\n  updated_at: string;\n}\n\nexport default function BarcodeClient({ orgId }: BarcodeClientProps) {\n  const t = useTranslations();\n  const supabase = createBrowserClient();\n  \n  const [data, setData] = useState<AssetBarcode[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [selectedRecord, setSelectedRecord] = useState<AssetBarcode | null>(null);\n  const [drawerOpen, setDrawerOpen] = useState(false);\n  const [drawerMode, setDrawerMode] = useState<'view' | 'edit' | 'create'>('view');\n\n  // Field configuration for barcode data\n  const fieldConfig: FieldConfig[] = useMemo(() => [\n    {\n      key: 'asset_name',\n      label: 'Asset Name',\n      type: 'text',\n      required: true,\n      sortable: true,\n      searchable: true\n    },\n    {\n      key: 'barcode_type',\n      label: 'Barcode Type',\n      type: 'select',\n      options: [\n        { value: 'code128', label: 'Code 128' },\n        { value: 'code39', label: 'Code 39' },\n        { value: 'ean13', label: 'EAN-13' },\n        { value: 'upc_a', label: 'UPC-A' },\n        { value: 'qr_code', label: 'QR Code' },\n        { value: 'data_matrix', label: 'Data Matrix' },\n        { value: 'pdf417', label: 'PDF417' }\n      ],\n      required: true,\n      filterable: true,\n      sortable: true\n    },\n    {\n      key: 'barcode_value',\n      label: 'Barcode Value',\n      type: 'text',\n      required: true,\n      searchable: true\n    },\n    {\n      key: 'qr_code_value',\n      label: 'QR Code Data',\n      type: 'textarea',\n      searchable: true\n    },\n    {\n      key: 'status',\n      label: 'Status',\n      type: 'select',\n      options: [\n        { value: 'active', label: 'Active' },\n        { value: 'inactive', label: 'Inactive' },\n        { value: 'damaged', label: 'Damaged' },\n        { value: 'replaced', label: 'Replaced' }\n      ],\n      required: true,\n      filterable: true,\n      sortable: true,\n      render: (value: string) => {\n        const variants = {\n          active: 'success',\n          inactive: 'secondary',\n          damaged: 'destructive',\n          replaced: 'warning'\n        };\n        return <Badge variant={variants[value as keyof typeof variants] as unknown}>{value}</Badge>;\n      }\n    },\n    {\n      key: 'print_date',\n      label: 'Print Date',\n      type: 'date',\n      required: true,\n      sortable: true\n    },\n    {\n      key: 'printed_by',\n      label: 'Printed By',\n      type: 'text',\n      searchable: true\n    },\n    {\n      key: 'scan_count',\n      label: 'Scan Count',\n      type: 'number',\n      sortable: true\n    },\n    {\n      key: 'last_scanned_at',\n      label: 'Last Scanned',\n      type: 'datetime',\n      sortable: true\n    },\n    {\n      key: 'last_scanned_by',\n      label: 'Last Scanned By',\n      type: 'text',\n      searchable: true\n    },\n    {\n      key: 'location_when_scanned',\n      label: 'Location When Scanned',\n      type: 'text',\n      searchable: true\n    },\n    {\n      key: 'mobile_app_compatible',\n      label: 'Mobile App Compatible',\n      type: 'boolean',\n      filterable: true,\n      render: (value: boolean) => {\n        return value ? <Badge variant=\"success\">Yes</Badge> : <Badge variant=\"secondary\">No</Badge>;\n      }\n    },\n    {\n      key: 'encoding_format',\n      label: 'Encoding Format',\n      type: 'select',\n      options: [\n        { value: 'utf8', label: 'UTF-8' },\n        { value: 'ascii', label: 'ASCII' },\n        { value: 'iso8859_1', label: 'ISO-8859-1' },\n        { value: 'binary', label: 'Binary' }\n      ],\n      filterable: true\n    },\n    {\n      key: 'label_size',\n      label: 'Label Size',\n      type: 'select',\n      options: [\n        { value: '1x1', label: '1\" x 1\"' },\n        { value: '1x2', label: '1\" x 2\"' },\n        { value: '2x1', label: '2\" x 1\"' },\n        { value: '2x2', label: '2\" x 2\"' },\n        { value: '3x1', label: '3\" x 1\"' },\n        { value: '4x2', label: '4\" x 2\"' },\n        { value: 'custom', label: 'Custom' }\n      ],\n      filterable: true\n    },\n    {\n      key: 'label_material',\n      label: 'Label Material',\n      type: 'select',\n      options: [\n        { value: 'paper', label: 'Paper' },\n        { value: 'vinyl', label: 'Vinyl' },\n        { value: 'polyester', label: 'Polyester' },\n        { value: 'aluminum', label: 'Aluminum' },\n        { value: 'ceramic', label: 'Ceramic' },\n        { value: 'tamper_evident', label: 'Tamper Evident' }\n      ],\n      filterable: true\n    },\n    {\n      key: 'replacement_reason',\n      label: 'Replacement Reason',\n      type: 'textarea'\n    },\n    {\n      key: 'notes',\n      label: 'Notes',\n      type: 'textarea'\n    },\n    {\n      key: 'created_at',\n      label: 'Created',\n      type: 'datetime',\n      sortable: true\n    },\n    {\n      key: 'updated_at',\n      label: 'Updated',\n      type: 'datetime',\n      sortable: true\n    }\n  ], []);\n\n  // Load barcode data\n  const loadData = useCallback(async () => {\n    setLoading(true);\n    try {\n      const { data: barcodeData, error } = await supabase\n        .from('asset_barcodes')\n        .select(`\n          *,\n          assets!inner(name)\n        `)\n        .eq('organization_id', orgId)\n        .order('print_date', { ascending: false });\n\n      if (error) {\n        console.error('Error loading barcode data:', error);\n        // Use demo data as fallback\n        setData(generateDemoData());\n      } else {\n        const formattedData = (barcodeData || []).map(item => ({\n          ...item,\n          asset_name: item.assets?.name || 'Unknown Asset'\n        }));\n        setData(formattedData);\n      }\n    } catch (error) {\n      console.error('Error loading barcode data:', error);\n      setData(generateDemoData());\n    } finally {\n      setLoading(false);\n    }\n  }, [supabase, orgId]);\n\n  // Generate demo data\n  const generateDemoData = (): AssetBarcode[] => [\n    {\n      id: 'demo-1',\n      asset_id: 'asset-1',\n      asset_name: 'Main Stage Rigging System',\n      barcode_type: 'code128',\n      barcode_value: 'STAGE-RIG-001',\n      qr_code_value: JSON.stringify({\n        asset_id: 'asset-1',\n        name: 'Main Stage Rigging System',\n        location: 'Main Deck',\n        last_maintenance: '2024-02-15'\n      }),\n      status: 'active',\n      print_date: '2024-01-15',\n      printed_by: 'Jack Sparrow',\n      scan_count: 47,\n      last_scanned_at: '2024-02-28T14:30:00Z',\n      last_scanned_by: 'Will Turner',\n      location_when_scanned: 'Main Deck',\n      mobile_app_compatible: true,\n      encoding_format: 'utf8',\n      label_size: '2x1',\n      label_material: 'vinyl',\n      notes: 'High-durability label for outdoor use.',\n      created_at: '2024-01-15T10:00:00Z',\n      updated_at: '2024-02-28T14:30:00Z'\n    },\n    {\n      id: 'demo-2',\n      asset_id: 'asset-2',\n      asset_name: 'Professional Sound System',\n      barcode_type: 'qr_code',\n      barcode_value: 'AUDIO-PA-002',\n      qr_code_value: JSON.stringify({\n        asset_id: 'asset-2',\n        name: 'Professional Sound System',\n        specifications: 'PA System with mixing console',\n        manual_url: 'https://example.com/manual.pdf'\n      }),\n      status: 'active',\n      print_date: '2024-01-20',\n      printed_by: 'Elizabeth Swann',\n      scan_count: 23,\n      last_scanned_at: '2024-02-25T16:15:00Z',\n      last_scanned_by: 'Jack Sparrow',\n      location_when_scanned: 'Equipment Storage',\n      mobile_app_compatible: true,\n      encoding_format: 'utf8',\n      label_size: '2x2',\n      label_material: 'polyester',\n      notes: 'QR code includes link to user manual.',\n      created_at: '2024-01-20T14:30:00Z',\n      updated_at: '2024-02-25T16:15:00Z'\n    },\n    {\n      id: 'demo-3',\n      asset_id: 'asset-3',\n      asset_name: 'LED Video Wall Panels',\n      barcode_type: 'data_matrix',\n      barcode_value: 'LED-WALL-003',\n      qr_code_value: JSON.stringify({\n        asset_id: 'asset-3',\n        name: 'LED Video Wall Panels',\n        panel_count: 24,\n        resolution: '1920x1080'\n      }),\n      status: 'damaged',\n      print_date: '2024-01-25',\n      printed_by: 'Hector Barbossa',\n      scan_count: 15,\n      last_scanned_at: '2024-02-20T11:45:00Z',\n      last_scanned_by: 'Will Turner',\n      location_when_scanned: 'Tech Workshop',\n      mobile_app_compatible: true,\n      encoding_format: 'utf8',\n      label_size: '1x1',\n      label_material: 'aluminum',\n      replacement_reason: 'Label damaged during maintenance work.',\n      notes: 'Replacement label needed.',\n      created_at: '2024-01-25T09:15:00Z',\n      updated_at: '2024-02-20T11:45:00Z'\n    },\n    {\n      id: 'demo-4',\n      asset_id: 'asset-4',\n      asset_name: 'Generator - 500kW',\n      barcode_type: 'code39',\n      barcode_value: 'GEN-500-005',\n      qr_code_value: JSON.stringify({\n        asset_id: 'asset-4',\n        name: 'Generator - 500kW',\n        fuel_type: 'Diesel',\n        maintenance_schedule: 'Monthly'\n      }),\n      status: 'active',\n      print_date: '2024-02-01',\n      printed_by: 'Jack Sparrow',\n      scan_count: 31,\n      last_scanned_at: '2024-02-27T08:20:00Z',\n      last_scanned_by: 'Elizabeth Swann',\n      location_when_scanned: 'Power Station',\n      mobile_app_compatible: true,\n      encoding_format: 'ascii',\n      label_size: '3x1',\n      label_material: 'tamper_evident',\n      notes: 'Tamper-evident label for security.',\n      created_at: '2024-02-01T11:20:00Z',\n      updated_at: '2024-02-27T08:20:00Z'\n    }\n  ];\n\n  // Statistics calculation\n  const stats = useMemo(() => {\n    const totalBarcodes = data.length;\n    const activeBarcodes = data.filter(item => item.status === 'active').length;\n    const totalScans = data.reduce((sum, item) => sum + item.scan_count, 0);\n    const mobileCompatible = data.filter(item => item.mobile_app_compatible).length;\n    const needReplacement = data.filter(item => item.status === 'damaged').length;\n    const avgScansPerBarcode = totalBarcodes > 0 ? Math.round(totalScans / totalBarcodes) : 0;\n\n    return { \n      totalBarcodes, \n      activeBarcodes, \n      totalScans, \n      mobileCompatible, \n      needReplacement, \n      avgScansPerBarcode \n    };\n  }, [data]);\n\n  // Event handlers\n  const handleCreate = () => {\n    setSelectedRecord(null);\n    setDrawerMode('create');\n    setDrawerOpen(true);\n  };\n\n  const handleEdit = (record: AssetBarcode) => {\n    setSelectedRecord(record);\n    setDrawerMode('edit');\n    setDrawerOpen(true);\n  };\n\n  const handleView = (record: AssetBarcode) => {\n    setSelectedRecord(record);\n    setDrawerMode('view');\n    setDrawerOpen(true);\n  };\n\n  const handleSave = async (formData: unknown) => {\n    try {\n      if (drawerMode === 'create') {\n        const { error } = await supabase\n          .from('asset_barcodes')\n          .insert([{ ...formData, organization_id: orgId }]);\n        \n        if (error) throw error;\n      } else if (drawerMode === 'edit' && selectedRecord) {\n        const { error } = await supabase\n          .from('asset_barcodes')\n          .update(formData)\n          .eq('id', selectedRecord.id);\n        \n        if (error) throw error;\n      }\n      \n      await loadData();\n      setDrawerOpen(false);\n    } catch (error) {\n      console.error('Error saving barcode record:', error);\n    }\n  };\n\n  const handleDelete = async (record: AssetBarcode) => {\n    try {\n      const { error } = await supabase\n        .from('asset_barcodes')\n        .delete()\n        .eq('id', record.id);\n      \n      if (error) throw error;\n      await loadData();\n    } catch (error) {\n      console.error('Error deleting barcode record:', error);\n    }\n  };\n\n  const handlePrintLabels = () => {\n    console.log('Print labels functionality would be implemented here');\n    // This would integrate with a label printing service or generate PDF labels\n  };\n\n  const handleBulkGenerate = () => {\n    console.log('Bulk generate barcodes functionality would be implemented here');\n    // This would generate barcodes for multiple assets at once\n  };\n\n  // DataView configuration\n  const dataViewConfig: DataViewConfig = useMemo(() => ({\n    id: 'asset-barcodes',\n    name: 'Asset Barcodes',\n    description: 'Manage barcode and QR code tracking for assets',\n    viewType: 'grid',\n    defaultView: 'grid',\n    fields: fieldConfig,\n    data: data,\n    loading: loading,\n    onRefresh: loadData,\n    onSearch: (query: string) => {\n      // Implement search logic\n      console.log('Search:', query);\n    },\n    onFilter: (filters: FilterConfig[]) => {\n      // Implement filter logic\n      console.log('Filter:', filters);\n    },\n    onSort: (sorts: SortConfig[]) => {\n      // Implement sort logic\n      console.log('Sort:', sorts);\n    },\n    onExport: (data: DataRecord[], format: string) => {\n      console.log('Export:', data, format);\n    },\n    onImport: (data: unknown[]) => {\n      console.log('Import:', data);\n    },\n    actions: {\n      canCreate: true,\n      canEdit: true,\n      canDelete: true,\n      canView: true,\n      onCreate: handleCreate,\n      onEdit: handleEdit,\n      onView: handleView,\n      onDelete: handleDelete\n    }\n  }), [fieldConfig, data, loading, loadData]);\n\n  useEffect(() => {\n    loadData();\n  }, [loadData]);\n\n  return (\n    <div className=\"stack-lg\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-heading-3 font-anton uppercase\">Barcode & QR Tracking</h1>\n          <p className=\"text-body-sm color-muted\">Manage barcode and QR code labels for asset tracking</p>\n        </div>\n        <div className=\"flex items-center gap-sm\">\n          <Button variant=\"outline\" onClick={handlePrintLabels} className=\"flex items-center gap-sm\">\n            <Printer className=\"w-4 h-4\" />\n            Print Labels\n          </Button>\n          <Button variant=\"outline\" onClick={handleBulkGenerate} className=\"flex items-center gap-sm\">\n            <Download className=\"w-4 h-4\" />\n            Bulk Generate\n          </Button>\n          <Button onClick={handleCreate} className=\"flex items-center gap-sm\">\n            <Plus className=\"w-4 h-4\" />\n            Create Barcode\n          </Button>\n        </div>\n      </div>\n\n      {/* Statistics Dashboard */}\n      <DashboardView>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-6 gap-md\">\n          <Card>\n            <div className=\"p-md\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-body-sm form-label color-muted\">Total Barcodes</p>\n                  <p className=\"text-heading-3\">{stats.totalBarcodes}</p>\n                </div>\n                <QrCode className=\"w-8 h-8 color-accent\" />\n              </div>\n            </div>\n          </Card>\n          \n          <Card>\n            <div className=\"p-md\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-body-sm form-label color-muted\">Active</p>\n                  <p className=\"text-heading-3\">{stats.activeBarcodes}</p>\n                </div>\n                <Scan className=\"w-8 h-8 color-success\" />\n              </div>\n            </div>\n          </Card>\n          \n          <Card>\n            <div className=\"p-md\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-body-sm form-label color-muted\">Total Scans</p>\n                  <p className=\"text-heading-3\">{stats.totalScans}</p>\n                </div>\n                <Smartphone className=\"w-8 h-8 color-secondary\" />\n              </div>\n            </div>\n          </Card>\n          \n          <Card>\n            <div className=\"p-md\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-body-sm form-label color-muted\">Mobile Compatible</p>\n                  <p className=\"text-heading-3\">{stats.mobileCompatible}</p>\n                </div>\n                <Smartphone className=\"w-8 h-8 color-success\" />\n              </div>\n            </div>\n          </Card>\n          \n          <Card>\n            <div className=\"p-md\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-body-sm form-label color-muted\">Need Replacement</p>\n                  <p className=\"text-heading-3\">{stats.needReplacement}</p>\n                </div>\n                <Printer className=\"w-8 h-8 color-warning\" />\n              </div>\n            </div>\n          </Card>\n          \n          <Card>\n            <div className=\"p-md\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-body-sm form-label color-muted\">Avg Scans</p>\n                  <p className=\"text-heading-3\">{stats.avgScansPerBarcode}</p>\n                </div>\n                <Scan className=\"w-8 h-8 color-secondary\" />\n              </div>\n            </div>\n          </Card>\n        </div>\n      </DashboardView>\n\n      {/* Data Views */}\n      <DataViewProvider config={dataViewConfig}>\n        <div className=\"stack-md\">\n          <DataActions />\n          <ViewSwitcher />\n          <DataGrid />\n          <KanbanBoard \n            columns={[\n              { id: 'active', title: 'Active' },\n              { id: 'inactive', title: 'Inactive' },\n              { id: 'damaged', title: 'Damaged' },\n              { id: 'replaced', title: 'Replaced' }\n            ]}\n            statusField=\"status\"\n            titleField=\"asset_name\"\n          />\n          <CalendarView \n            startDateField=\"print_date\"\n            titleField=\"asset_name\"\n          />\n          <ListView \n            titleField=\"asset_name\"\n            subtitleField=\"barcode_value\"\n          />\n          <TimelineView \n            dateField=\"print_date\"\n            titleField=\"asset_name\"\n          />\n        </div>\n      </DataViewProvider>\n\n      {/* Universal Drawer */}\n      <UniversalDrawer\n        open={drawerOpen}\n        onClose={() => setDrawerOpen(false)}\n        record={selectedRecord}\n        fields={fieldConfig}\n        mode={drawerMode}\n        title={\n          drawerMode === 'create' \n            ? 'Create Barcode'\n            : drawerMode === 'edit'\n            ? 'Edit Barcode'\n            : 'Barcode Details'\n        }\n        onSave={handleSave}\n        tabs={[\n          {\n            key: 'details',\n            label: 'Details',\n            content: null // Will be handled by UniversalDrawer\n          },\n          {\n            key: 'preview',\n            label: 'Preview',\n            content: (\n              <div className=\"p-md\">\n                <p className=\"text-body-sm color-muted\">Barcode and QR code preview will be displayed here.</p>\n              </div>\n            )\n          },\n          {\n            key: 'history',\n            label: 'Scan History',\n            content: (\n              <div className=\"p-md\">\n                <p className=\"text-body-sm color-muted\">Scan history and usage analytics will be displayed here.</p>\n              </div>\n            )\n          }\n        ]}\n      />\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ghxstship/apps/web/app/(app)/(shell)/assets/barcode/CreateBarcodeClient.tsx","messages":[{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":313,"column":42,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[11684,11691],"text":"1&quot; x 1\""},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[11684,11691],"text":"1&ldquo; x 1\""},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[11684,11691],"text":"1&#34; x 1\""},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[11684,11691],"text":"1&rdquo; x 1\""},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":313,"column":47,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[11684,11691],"text":"1\" x 1&quot;"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[11684,11691],"text":"1\" x 1&ldquo;"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[11684,11691],"text":"1\" x 1&#34;"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[11684,11691],"text":"1\" x 1&rdquo;"},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":314,"column":42,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[11741,11748],"text":"1&quot; x 2\""},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[11741,11748],"text":"1&ldquo; x 2\""},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[11741,11748],"text":"1&#34; x 2\""},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[11741,11748],"text":"1&rdquo; x 2\""},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":314,"column":47,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[11741,11748],"text":"1\" x 2&quot;"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[11741,11748],"text":"1\" x 2&ldquo;"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[11741,11748],"text":"1\" x 2&#34;"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[11741,11748],"text":"1\" x 2&rdquo;"},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":315,"column":42,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[11798,11805],"text":"2&quot; x 1\""},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[11798,11805],"text":"2&ldquo; x 1\""},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[11798,11805],"text":"2&#34; x 1\""},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[11798,11805],"text":"2&rdquo; x 1\""},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":315,"column":47,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[11798,11805],"text":"2\" x 1&quot;"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[11798,11805],"text":"2\" x 1&ldquo;"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[11798,11805],"text":"2\" x 1&#34;"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[11798,11805],"text":"2\" x 1&rdquo;"},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":316,"column":42,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[11855,11862],"text":"2&quot; x 2\""},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[11855,11862],"text":"2&ldquo; x 2\""},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[11855,11862],"text":"2&#34; x 2\""},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[11855,11862],"text":"2&rdquo; x 2\""},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":316,"column":47,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[11855,11862],"text":"2\" x 2&quot;"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[11855,11862],"text":"2\" x 2&ldquo;"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[11855,11862],"text":"2\" x 2&#34;"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[11855,11862],"text":"2\" x 2&rdquo;"},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":317,"column":42,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[11912,11919],"text":"3&quot; x 1\""},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[11912,11919],"text":"3&ldquo; x 1\""},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[11912,11919],"text":"3&#34; x 1\""},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[11912,11919],"text":"3&rdquo; x 1\""},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":317,"column":47,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[11912,11919],"text":"3\" x 1&quot;"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[11912,11919],"text":"3\" x 1&ldquo;"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[11912,11919],"text":"3\" x 1&#34;"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[11912,11919],"text":"3\" x 1&rdquo;"},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":318,"column":42,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[11969,11976],"text":"4&quot; x 2\""},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[11969,11976],"text":"4&ldquo; x 2\""},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[11969,11976],"text":"4&#34; x 2\""},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[11969,11976],"text":"4&rdquo; x 2\""},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":318,"column":47,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[11969,11976],"text":"4\" x 2&quot;"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[11969,11976],"text":"4\" x 2&ldquo;"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[11969,11976],"text":"4\" x 2&#34;"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[11969,11976],"text":"4\" x 2&rdquo;"},"desc":"Replace with `&rdquo;`."}]}],"suppressedMessages":[],"errorCount":12,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { X, Save, QrCode, Printer } from \"lucide-react\";\nimport React, { useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\n// import { z } from 'zod';\nimport { createBrowserClient } from '@ghxstship/auth';\nimport { Button, Card, Badge } from '@ghxstship/ui';\nimport { UnifiedInput } from '@ghxstship/ui';\n\nconst BarcodeFormSchema = z.object({\n  asset_id: z.string().min(1, 'Asset is required'),\n  barcode_type: z.enum(['code128', 'code39', 'ean13', 'upc_a', 'qr_code', 'data_matrix', 'pdf417']),\n  barcode_value: z.string().min(1, 'Barcode value is required'),\n  qr_code_value: z.string().optional(),\n  status: z.enum(['active', 'inactive', 'damaged', 'replaced']),\n  print_date: z.string().min(1, 'Print date is required'),\n  printed_by: z.string().optional(),\n  mobile_app_compatible: z.boolean().optional(),\n  encoding_format: z.enum(['utf8', 'ascii', 'iso8859_1', 'binary']).optional(),\n  label_size: z.enum(['1x1', '1x2', '2x1', '2x2', '3x1', '4x2', 'custom']).optional(),\n  label_material: z.enum(['paper', 'vinyl', 'polyester', 'aluminum', 'ceramic', 'tamper_evident']).optional(),\n  replacement_reason: z.string().optional(),\n  notes: z.string().optional()\n});\n\ntype BarcodeFormData = z.infer<typeof BarcodeFormSchema>;\n\ninterface CreateBarcodeClientProps {\n  isOpen: boolean;\n  onClose: () => void;\n  onSuccess: () => void;\n  orgId: string;\n  editData?: any;\n}\n\nexport default function CreateBarcodeClient({\n  isOpen,\n  onClose,\n  onSuccess,\n  orgId,\n  editData\n}: CreateBarcodeClientProps) {\n  const [loading, setLoading] = useState(false);\n  const [activeTab, setActiveTab] = useState<'details' | 'label' | 'qr'>('details');\n  const supabase = createBrowserClient();\n\n  const {\n    register,\n    handleSubmit,\n    formState: { errors },\n    reset,\n    setValue,\n    watch\n  } = useForm<BarcodeFormData>({\n    resolver: zodResolver(BarcodeFormSchema),\n    defaultValues: editData || {\n      barcode_type: 'code128',\n      status: 'active',\n      mobile_app_compatible: true,\n      encoding_format: 'utf8',\n      label_size: '2x1',\n      label_material: 'vinyl'\n    }\n  });\n\n  const selectedBarcodeType = watch('barcode_type');\n\n  const onSubmit = async (data: BarcodeFormData) => {\n    setLoading(true);\n    try {\n      const response = await fetch('/api/v1/assets/barcodes', {\n        method: editData ? 'PATCH' : 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'x-organization-id': orgId\n        },\n        body: JSON.stringify(data)\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to save barcode record');\n      }\n\n      reset();\n      onSuccess();\n      onClose();\n    } catch (error) {\n      console.error('Error saving barcode record:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const generateBarcodeValue = () => {\n    const prefix = selectedBarcodeType.toUpperCase().substring(0, 3);\n    const timestamp = Date.now().toString().slice(-6);\n    const random = Math.random().toString(36).substring(2, 5).toUpperCase();\n    setValue('barcode_value', `${prefix}-${timestamp}-${random}`);\n  };\n\n  if (!isOpen) return null;\n\n  return (\n    <div className=\"fixed inset-0 bg-black/50 flex items-center justify-center z-50\">\n      <div className=\"bg-background rounded-lg shadow-xl w-full max-w-2xl max-h-[90vh] overflow-hidden\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between p-lg border-b border-border\">\n          <div>\n            <h2 className=\"text-heading-3 font-anton uppercase\">\n              {editData ? 'Edit Barcode' : 'Create Barcode'}\n            </h2>\n            <p className=\"text-body-sm color-muted\">\n              {editData ? 'Update barcode information' : 'Generate new barcode for asset tracking'}\n            </p>\n          </div>\n          <Button variant=\"ghost\" size=\"sm\" onClick={onClose}>\n            <X className=\"w-4 h-4\" />\n          </Button>\n        </div>\n\n        {/* Tabs */}\n        <div className=\"flex border-b border-border\">\n          <button\n            onClick={() => setActiveTab('details')}\n            className={`px-lg py-md text-body-sm font-medium transition-colors ${\n              activeTab === 'details'\n                ? 'border-b-2 border-primary color-primary'\n                : 'color-muted hover:color-foreground'\n            }`}\n          >\n            Barcode Details\n          </button>\n          <button\n            onClick={() => setActiveTab('label')}\n            className={`px-lg py-md text-body-sm font-medium transition-colors ${\n              activeTab === 'label'\n                ? 'border-b-2 border-primary color-primary'\n                : 'color-muted hover:color-foreground'\n            }`}\n          >\n            Label Settings\n          </button>\n          <button\n            onClick={() => setActiveTab('qr')}\n            className={`px-lg py-md text-body-sm font-medium transition-colors ${\n              activeTab === 'qr'\n                ? 'border-b-2 border-primary color-primary'\n                : 'color-muted hover:color-foreground'\n            }`}\n          >\n            QR Code Data\n          </button>\n        </div>\n\n        <form onSubmit={handleSubmit(onSubmit)}>\n          <div className=\"p-lg space-y-lg max-h-[60vh] overflow-y-auto\">\n            {activeTab === 'details' && (\n              <div className=\"space-y-lg\">\n                {/* Asset Selection */}\n                <div>\n                  <label className=\"block text-body-sm font-medium mb-sm\">\n                    Asset <span className=\"color-destructive\">*</span>\n                  </label>\n                  <UnifiedInput\n                    {...register('asset_id')}\n                    placeholder=\"Select asset...\"\n                    error={errors.asset_id?.message}\n                  />\n                </div>\n\n                {/* Barcode Type */}\n                <div>\n                  <label className=\"block text-body-sm font-medium mb-sm\">\n                    Barcode Type <span className=\"color-destructive\">*</span>\n                  </label>\n                  <select\n                    {...register('barcode_type')}\n                    className=\"w-full px-md py-sm border border-border rounded-md bg-background\"\n                  >\n                    <option value=\"code128\">Code 128</option>\n                    <option value=\"code39\">Code 39</option>\n                    <option value=\"ean13\">EAN-13</option>\n                    <option value=\"upc_a\">UPC-A</option>\n                    <option value=\"qr_code\">QR Code</option>\n                    <option value=\"data_matrix\">Data Matrix</option>\n                    <option value=\"pdf417\">PDF417</option>\n                  </select>\n                  {errors.barcode_type && (\n                    <p className=\"text-body-xs color-destructive mt-xs\">\n                      {errors.barcode_type.message}\n                    </p>\n                  )}\n                </div>\n\n                {/* Barcode Value */}\n                <div>\n                  <label className=\"block text-body-sm font-medium mb-sm\">\n                    Barcode Value <span className=\"color-destructive\">*</span>\n                  </label>\n                  <div className=\"flex gap-sm\">\n                    <UnifiedInput\n                      {...register('barcode_value')}\n                      placeholder=\"Enter or generate barcode value...\"\n                      error={errors.barcode_value?.message}\n                      className=\"flex-1\"\n                    />\n                    <Button\n                      type=\"button\"\n                      variant=\"outline\"\n                      onClick={generateBarcodeValue}\n                      className=\"px-md\"\n                    >\n                      Generate\n                    </Button>\n                  </div>\n                </div>\n\n                {/* Status */}\n                <div>\n                  <label className=\"block text-body-sm font-medium mb-sm\">\n                    Status <span className=\"color-destructive\">*</span>\n                  </label>\n                  <select\n                    {...register('status')}\n                    className=\"w-full px-md py-sm border border-border rounded-md bg-background\"\n                  >\n                    <option value=\"active\">Active</option>\n                    <option value=\"inactive\">Inactive</option>\n                    <option value=\"damaged\">Damaged</option>\n                    <option value=\"replaced\">Replaced</option>\n                  </select>\n                  {errors.status && (\n                    <p className=\"text-body-xs color-destructive mt-xs\">\n                      {errors.status.message}\n                    </p>\n                  )}\n                </div>\n\n                {/* Print Date */}\n                <div>\n                  <label className=\"block text-body-sm font-medium mb-sm\">\n                    Print Date <span className=\"color-destructive\">*</span>\n                  </label>\n                  <UnifiedInput\n                    {...register('print_date')}\n                    type=\"date\"\n                    error={errors.print_date?.message}\n                  />\n                </div>\n\n                {/* Printed By */}\n                <div>\n                  <label className=\"block text-body-sm font-medium mb-sm\">\n                    Printed By\n                  </label>\n                  <UnifiedInput\n                    {...register('printed_by')}\n                    placeholder=\"Enter name of person who printed...\"\n                    error={errors.printed_by?.message}\n                  />\n                </div>\n\n                {/* Mobile App Compatible */}\n                <div>\n                  <label className=\"flex items-center space-x-sm\">\n                    <input\n                      {...register('mobile_app_compatible')}\n                      type=\"checkbox\"\n                      className=\"rounded border-border\"\n                    />\n                    <span className=\"text-body-sm font-medium\">\n                      Mobile App Compatible\n                    </span>\n                  </label>\n                </div>\n              </div>\n            )}\n\n            {activeTab === 'label' && (\n              <div className=\"space-y-lg\">\n                {/* Encoding Format */}\n                <div>\n                  <label className=\"block text-body-sm font-medium mb-sm\">\n                    Encoding Format\n                  </label>\n                  <select\n                    {...register('encoding_format')}\n                    className=\"w-full px-md py-sm border border-border rounded-md bg-background\"\n                  >\n                    <option value=\"utf8\">UTF-8</option>\n                    <option value=\"ascii\">ASCII</option>\n                    <option value=\"iso8859_1\">ISO-8859-1</option>\n                    <option value=\"binary\">Binary</option>\n                  </select>\n                  {errors.encoding_format && (\n                    <p className=\"text-body-xs color-destructive mt-xs\">\n                      {errors.encoding_format.message}\n                    </p>\n                  )}\n                </div>\n\n                {/* Label Size */}\n                <div>\n                  <label className=\"block text-body-sm font-medium mb-sm\">\n                    Label Size\n                  </label>\n                  <select\n                    {...register('label_size')}\n                    className=\"w-full px-md py-sm border border-border rounded-md bg-background\"\n                  >\n                    <option value=\"1x1\">1\" x 1\"</option>\n                    <option value=\"1x2\">1\" x 2\"</option>\n                    <option value=\"2x1\">2\" x 1\"</option>\n                    <option value=\"2x2\">2\" x 2\"</option>\n                    <option value=\"3x1\">3\" x 1\"</option>\n                    <option value=\"4x2\">4\" x 2\"</option>\n                    <option value=\"custom\">Custom</option>\n                  </select>\n                  {errors.label_size && (\n                    <p className=\"text-body-xs color-destructive mt-xs\">\n                      {errors.label_size.message}\n                    </p>\n                  )}\n                </div>\n\n                {/* Label Material */}\n                <div>\n                  <label className=\"block text-body-sm font-medium mb-sm\">\n                    Label Material\n                  </label>\n                  <select\n                    {...register('label_material')}\n                    className=\"w-full px-md py-sm border border-border rounded-md bg-background\"\n                  >\n                    <option value=\"paper\">Paper</option>\n                    <option value=\"vinyl\">Vinyl</option>\n                    <option value=\"polyester\">Polyester</option>\n                    <option value=\"aluminum\">Aluminum</option>\n                    <option value=\"ceramic\">Ceramic</option>\n                    <option value=\"tamper_evident\">Tamper Evident</option>\n                  </select>\n                  {errors.label_material && (\n                    <p className=\"text-body-xs color-destructive mt-xs\">\n                      {errors.label_material.message}\n                    </p>\n                  )}\n                </div>\n\n                {/* Replacement Reason */}\n                <div>\n                  <label className=\"block text-body-sm font-medium mb-sm\">\n                    Replacement Reason\n                  </label>\n                  <textarea\n                    {...register('replacement_reason')}\n                    rows={3}\n                    className=\"w-full px-md py-sm border border-border rounded-md bg-background resize-none\"\n                    placeholder=\"Enter reason for replacement (if applicable)...\"\n                  />\n                  {errors.replacement_reason && (\n                    <p className=\"text-body-xs color-destructive mt-xs\">\n                      {errors.replacement_reason.message}\n                    </p>\n                  )}\n                </div>\n\n                {/* Label Preview */}\n                <Card>\n                  <div className=\"p-md\">\n                    <h4 className=\"text-body font-medium mb-sm flex items-center\">\n                      <Printer className=\"w-4 h-4 mr-sm\" />\n                      Label Preview\n                    </h4>\n                    <div className=\"bg-muted/20 border-2 border-dashed border-border rounded-md p-lg text-center\">\n                      <QrCode className=\"w-12 h-12 mx-auto mb-sm color-muted\" />\n                      <p className=\"text-body-sm color-muted\">\n                        Label preview will be generated based on selected settings\n                      </p>\n                    </div>\n                  </div>\n                </Card>\n              </div>\n            )}\n\n            {activeTab === 'qr' && (\n              <div className=\"space-y-lg\">\n                {/* QR Code Value */}\n                <div>\n                  <label className=\"block text-body-sm font-medium mb-sm\">\n                    QR Code Data\n                  </label>\n                  <textarea\n                    {...register('qr_code_value')}\n                    rows={6}\n                    className=\"w-full px-md py-sm border border-border rounded-md bg-background resize-none\"\n                    placeholder=\"Enter QR code data (JSON, URL, or text)...\"\n                  />\n                  {errors.qr_code_value && (\n                    <p className=\"text-body-xs color-destructive mt-xs\">\n                      {errors.qr_code_value.message}\n                    </p>\n                  )}\n                </div>\n\n                {/* QR Code Templates */}\n                <Card>\n                  <div className=\"p-md\">\n                    <h4 className=\"text-body font-medium mb-sm\">\n                      QR Code Templates\n                    </h4>\n                    <div className=\"space-y-sm\">\n                      <Button\n                        type=\"button\"\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => setValue('qr_code_value', JSON.stringify({\n                          asset_id: watch('asset_id'),\n                          asset_name: 'Asset Name',\n                          location: 'Location',\n                          last_maintenance: new Date().toISOString().split('T')[0]\n                        }, null, 2))}\n                      >\n                        Asset Information Template\n                      </Button>\n                      <Button\n                        type=\"button\"\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => setValue('qr_code_value', `https://app.ghxstship.com/assets/${watch('asset_id')}`)}\n                      >\n                        Asset URL Template\n                      </Button>\n                      <Button\n                        type=\"button\"\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => setValue('qr_code_value', JSON.stringify({\n                          type: 'maintenance_request',\n                          asset_id: watch('asset_id'),\n                          contact: 'maintenance@company.com'\n                        }, null, 2))}\n                      >\n                        Maintenance Request Template\n                      </Button>\n                    </div>\n                  </div>\n                </Card>\n\n                {/* Notes */}\n                <div>\n                  <label className=\"block text-body-sm font-medium mb-sm\">\n                    Notes\n                  </label>\n                  <textarea\n                    {...register('notes')}\n                    rows={3}\n                    className=\"w-full px-md py-sm border border-border rounded-md bg-background resize-none\"\n                    placeholder=\"Enter additional notes...\"\n                  />\n                  {errors.notes && (\n                    <p className=\"text-body-xs color-destructive mt-xs\">\n                      {errors.notes.message}\n                    </p>\n                  )}\n                </div>\n              </div>\n            )}\n          </div>\n\n          {/* Footer */}\n          <div className=\"flex items-center justify-end gap-md p-lg border-t border-border\">\n            <Button variant=\"outline\" onClick={onClose} disabled={loading}>\n              Cancel\n            </Button>\n            <Button type=\"submit\" disabled={loading}>\n              {loading ? (\n                <>\n                  <div className=\"w-4 h-4 border-2 border-white/20 border-t-white rounded-full animate-spin mr-sm\" />\n                  Saving...\n                </>\n              ) : (\n                <>\n                  <Save className=\"w-4 h-4 mr-sm\" />\n                  {editData ? 'Update Barcode' : 'Create Barcode'}\n                </>\n              )}\n            </Button>\n          </div>\n        </form>\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ghxstship/apps/web/app/(app)/(shell)/assets/compliance/ComplianceClient.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useMemo has a missing dependency: 'handleDelete'. Either include it or remove the dependency array.","line":362,"column":7,"nodeType":"ArrayExpression","endLine":362,"endColumn":45,"suggestions":[{"desc":"Update the dependencies array to be: [fieldConfig, data, loading, loadData, handleDelete]","fix":{"range":[10482,10520],"text":"[fieldConfig, data, loading, loadData, handleDelete]"}}]},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'DashboardView' is not defined.","line":383,"column":8,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":383,"endColumn":21},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'DataViewProvider' is not defined.","line":448,"column":8,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":448,"endColumn":24},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'DataActions' is not defined.","line":450,"column":12,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":450,"endColumn":23},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'ViewSwitcher' is not defined.","line":451,"column":12,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":451,"endColumn":24},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'DataGrid' is not defined.","line":452,"column":12,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":452,"endColumn":20},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'KanbanBoard' is not defined.","line":453,"column":12,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":453,"endColumn":23},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'CalendarView' is not defined.","line":464,"column":12,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":464,"endColumn":24},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'ListView' is not defined.","line":468,"column":12,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":468,"endColumn":20},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'TimelineView' is not defined.","line":472,"column":12,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":472,"endColumn":24},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'UniversalDrawer' is not defined.","line":480,"column":8,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":480,"endColumn":23}],"suppressedMessages":[],"errorCount":10,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { Shield, AlertTriangle, CheckCircle, Clock, FileText, Plus } from \"lucide-react\";\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { useTranslations } from 'next-intl';\nimport { createBrowserClient } from '@ghxstship/auth';\nimport { Card, Badge, Button } from '@ghxstship/ui';\n\ninterface ComplianceClientProps {\n  orgId: string;\n}\n\ninterface AssetCompliance {\n  id: string;\n  asset_id: string;\n  asset_name: string;\n  compliance_type: string;\n  status: 'pending' | 'in_progress' | 'compliant' | 'non_compliant' | 'expired';\n  requirement: string;\n  description: string;\n  due_date: string;\n  completed_date?: string;\n  assigned_to?: string;\n  inspector?: string;\n  certificate_url?: string;\n  notes?: string;\n  created_at: string;\n  updated_at: string;\n}\n\nexport default function ComplianceClient({ orgId }: ComplianceClientProps) {\n  const t = useTranslations();\n  const supabase = createBrowserClient();\n  \n  const [data, setData] = useState<AssetCompliance[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [selectedRecord, setSelectedRecord] = useState<AssetCompliance | null>(null);\n  const [drawerOpen, setDrawerOpen] = useState(false);\n  const [drawerMode, setDrawerMode] = useState<'view' | 'edit' | 'create'>('view');\n\n  // Field configuration for compliance data\n  const fieldConfig: FieldConfig[] = useMemo(() => [\n    {\n      key: 'asset_name',\n      label: 'Asset Name',\n      type: 'text',\n      required: true,\n      sortable: true,\n      searchable: true\n    },\n    {\n      key: 'compliance_type',\n      label: 'Compliance Type',\n      type: 'select',\n      options: [\n        { value: 'safety', label: 'Safety Inspection' },\n        { value: 'regulatory', label: 'Regulatory Compliance' },\n        { value: 'certification', label: 'Certification' },\n        { value: 'audit', label: 'Audit' },\n        { value: 'insurance', label: 'Insurance' },\n        { value: 'environmental', label: 'Environmental' },\n        { value: 'quality', label: 'Quality Assurance' }\n      ],\n      required: true,\n      filterable: true,\n      sortable: true\n    },\n    {\n      key: 'requirement',\n      label: 'Requirement',\n      type: 'text',\n      required: true,\n      searchable: true\n    },\n    {\n      key: 'status',\n      label: 'Status',\n      type: 'select',\n      options: [\n        { value: 'pending', label: 'Pending' },\n        { value: 'in_progress', label: 'In Progress' },\n        { value: 'compliant', label: 'Compliant' },\n        { value: 'non_compliant', label: 'Non-Compliant' },\n        { value: 'expired', label: 'Expired' }\n      ],\n      required: true,\n      filterable: true,\n      sortable: true,\n      render: (value: string) => {\n        const variants = {\n          pending: 'secondary',\n          in_progress: 'warning',\n          compliant: 'success',\n          non_compliant: 'destructive',\n          expired: 'destructive'\n        };\n        return <Badge variant={variants[value as keyof typeof variants] as unknown}>{value.replace('_', ' ')}</Badge>;\n      }\n    },\n    {\n      key: 'due_date',\n      label: 'Due Date',\n      type: 'date',\n      required: true,\n      sortable: true\n    },\n    {\n      key: 'completed_date',\n      label: 'Completed Date',\n      type: 'date',\n      sortable: true\n    },\n    {\n      key: 'assigned_to',\n      label: 'Assigned To',\n      type: 'text',\n      searchable: true\n    },\n    {\n      key: 'inspector',\n      label: 'Inspector',\n      type: 'text',\n      searchable: true\n    },\n    {\n      key: 'description',\n      label: 'Description',\n      type: 'textarea',\n      searchable: true\n    },\n    {\n      key: 'certificate_url',\n      label: 'Certificate',\n      type: 'url'\n    },\n    {\n      key: 'notes',\n      label: 'Notes',\n      type: 'textarea'\n    },\n    {\n      key: 'created_at',\n      label: 'Created',\n      type: 'datetime',\n      sortable: true\n    },\n    {\n      key: 'updated_at',\n      label: 'Updated',\n      type: 'datetime',\n      sortable: true\n    }\n  ], []);\n\n  // Load compliance data\n  const loadData = useCallback(async () => {\n    setLoading(true);\n    try {\n      const { data: complianceData, error } = await supabase\n        .from('asset_compliance')\n        .select(`\n          *,\n          assets!inner(name)\n        `)\n        .eq('organization_id', orgId)\n        .order('due_date', { ascending: true });\n\n      if (error) {\n        console.error('Error loading compliance data:', error);\n        // Use demo data as fallback\n        setData(generateDemoData());\n      } else {\n        const formattedData = (complianceData || []).map(item => ({\n          ...item,\n          asset_name: item.assets?.name || 'Unknown Asset'\n        }));\n        setData(formattedData);\n      }\n    } catch (error) {\n      console.error('Error loading compliance data:', error);\n      setData(generateDemoData());\n    } finally {\n      setLoading(false);\n    }\n  }, [supabase, orgId]);\n\n  // Generate demo data\n  const generateDemoData = (): AssetCompliance[] => [\n    {\n      id: 'demo-1',\n      asset_id: 'asset-1',\n      asset_name: 'Main Stage Rigging System',\n      compliance_type: 'safety',\n      status: 'compliant',\n      requirement: 'Annual Safety Inspection',\n      description: 'Comprehensive safety inspection of rigging system including load testing',\n      due_date: '2024-03-15',\n      completed_date: '2024-02-28',\n      assigned_to: 'Jack Sparrow',\n      inspector: 'Certified Safety Inspector',\n      certificate_url: 'https://example.com/cert1.pdf',\n      notes: 'All safety checks passed. Next inspection due March 2025.',\n      created_at: '2024-01-01T10:00:00Z',\n      updated_at: '2024-02-28T14:30:00Z'\n    },\n    {\n      id: 'demo-2',\n      asset_id: 'asset-2',\n      asset_name: 'Professional Sound System',\n      compliance_type: 'regulatory',\n      status: 'pending',\n      requirement: 'FCC Equipment Authorization',\n      description: 'Federal Communications Commission equipment authorization renewal',\n      due_date: '2024-04-30',\n      assigned_to: 'Will Turner',\n      notes: 'Documentation being prepared for submission.',\n      created_at: '2024-01-15T09:00:00Z',\n      updated_at: '2024-01-15T09:00:00Z'\n    },\n    {\n      id: 'demo-3',\n      asset_id: 'asset-3',\n      asset_name: 'LED Video Wall Panels',\n      compliance_type: 'certification',\n      status: 'expired',\n      requirement: 'CE Marking Certification',\n      description: 'European Conformity marking certification for LED panels',\n      due_date: '2024-01-31',\n      assigned_to: 'Elizabeth Swann',\n      notes: 'Certification expired. Renewal process initiated.',\n      created_at: '2023-12-01T08:00:00Z',\n      updated_at: '2024-02-01T10:00:00Z'\n    },\n    {\n      id: 'demo-4',\n      asset_id: 'asset-4',\n      asset_name: 'Generator - 500kW',\n      compliance_type: 'environmental',\n      status: 'in_progress',\n      requirement: 'Emissions Testing',\n      description: 'Annual emissions testing and environmental compliance check',\n      due_date: '2024-05-15',\n      assigned_to: 'Hector Barbossa',\n      inspector: 'Environmental Compliance Officer',\n      notes: 'Testing scheduled for next week.',\n      created_at: '2024-02-01T11:00:00Z',\n      updated_at: '2024-02-15T16:00:00Z'\n    }\n  ];\n\n  // Statistics calculation\n  const stats = useMemo(() => {\n    const total = data.length;\n    const compliant = data.filter(item => item.status === 'compliant').length;\n    const pending = data.filter(item => item.status === 'pending').length;\n    const expired = data.filter(item => item.status === 'expired').length;\n    const dueThisMonth = data.filter(item => {\n      const dueDate = new Date(item.due_date);\n      const now = new Date();\n      return dueDate.getMonth() === now.getMonth() && dueDate.getFullYear() === now.getFullYear();\n    }).length;\n\n    return { total, compliant, pending, expired, dueThisMonth };\n  }, [data]);\n\n  // Event handlers\n  const handleCreate = () => {\n    setSelectedRecord(null);\n    setDrawerMode('create');\n    setDrawerOpen(true);\n  };\n\n  const handleEdit = (record: AssetCompliance) => {\n    setSelectedRecord(record);\n    setDrawerMode('edit');\n    setDrawerOpen(true);\n  };\n\n  const handleView = (record: AssetCompliance) => {\n    setSelectedRecord(record);\n    setDrawerMode('view');\n    setDrawerOpen(true);\n  };\n\n  const handleSave = async (formData: unknown) => {\n    try {\n      if (drawerMode === 'create') {\n        const { error } = await supabase\n          .from('asset_compliance')\n          .insert([{ ...formData, organization_id: orgId }]);\n        \n        if (error) throw error;\n      } else if (drawerMode === 'edit' && selectedRecord) {\n        const { error } = await supabase\n          .from('asset_compliance')\n          .update(formData)\n          .eq('id', selectedRecord.id);\n        \n        if (error) throw error;\n      }\n      \n      await loadData();\n      setDrawerOpen(false);\n    } catch (error) {\n      console.error('Error saving compliance record:', error);\n    }\n  };\n\n  const handleDelete = async (record: AssetCompliance) => {\n    try {\n      const { error } = await supabase\n        .from('asset_compliance')\n        .delete()\n        .eq('id', record.id);\n      \n      if (error) throw error;\n      await loadData();\n    } catch (error) {\n      console.error('Error deleting compliance record:', error);\n    }\n  };\n\n  // DataView configuration\n  const dataViewConfig: DataViewConfig = useMemo(() => ({\n    id: 'asset-compliance',\n    name: 'Asset Compliance',\n    description: 'Manage asset compliance, audits, and regulatory requirements',\n    viewType: 'grid',\n    defaultView: 'grid',\n    fields: fieldConfig,\n    data: data,\n    loading: loading,\n    onRefresh: loadData,\n    onSearch: (query: string) => {\n      // Implement search logic\n      console.log('Search:', query);\n    },\n    onFilter: (filters: FilterConfig[]) => {\n      // Implement filter logic\n      console.log('Filter:', filters);\n    },\n    onSort: (sorts: SortConfig[]) => {\n      // Implement sort logic\n      console.log('Sort:', sorts);\n    },\n    onExport: (data: DataRecord[], format: string) => {\n      console.log('Export:', data, format);\n    },\n    onImport: (data: unknown[]) => {\n      console.log('Import:', data);\n    },\n    actions: {\n      canCreate: true,\n      canEdit: true,\n      canDelete: true,\n      canView: true,\n      onCreate: handleCreate,\n      onEdit: handleEdit,\n      onView: handleView,\n      onDelete: handleDelete\n    }\n  }), [fieldConfig, data, loading, loadData]);\n\n  useEffect(() => {\n    loadData();\n  }, [loadData]);\n\n  return (\n    <div className=\"stack-lg\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-heading-3 font-anton uppercase\">Asset Compliance</h1>\n          <p className=\"text-body-sm color-muted\">Manage compliance requirements, audits, and certifications</p>\n        </div>\n        <Button onClick={handleCreate} className=\"flex items-center gap-sm\">\n          <Plus className=\"w-4 h-4\" />\n          Add Compliance Record\n        </Button>\n      </div>\n\n      {/* Statistics Dashboard */}\n      <DashboardView>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-5 gap-md\">\n          <Card>\n            <div className=\"p-md\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-body-sm form-label color-muted\">Total Records</p>\n                  <p className=\"text-heading-3\">{stats.total}</p>\n                </div>\n                <Shield className=\"w-8 h-8 color-accent\" />\n              </div>\n            </div>\n          </Card>\n          \n          <Card>\n            <div className=\"p-md\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-body-sm form-label color-muted\">Compliant</p>\n                  <p className=\"text-heading-3\">{stats.compliant}</p>\n                </div>\n                <CheckCircle className=\"w-8 h-8 color-success\" />\n              </div>\n            </div>\n          </Card>\n          \n          <Card>\n            <div className=\"p-md\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-body-sm form-label color-muted\">Pending</p>\n                  <p className=\"text-heading-3\">{stats.pending}</p>\n                </div>\n                <Clock className=\"w-8 h-8 color-warning\" />\n              </div>\n            </div>\n          </Card>\n          \n          <Card>\n            <div className=\"p-md\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-body-sm form-label color-muted\">Expired</p>\n                  <p className=\"text-heading-3\">{stats.expired}</p>\n                </div>\n                <AlertTriangle className=\"w-8 h-8 color-destructive\" />\n              </div>\n            </div>\n          </Card>\n          \n          <Card>\n            <div className=\"p-md\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-body-sm form-label color-muted\">Due This Month</p>\n                  <p className=\"text-heading-3\">{stats.dueThisMonth}</p>\n                </div>\n                <FileText className=\"w-8 h-8 color-secondary\" />\n              </div>\n            </div>\n          </Card>\n        </div>\n      </DashboardView>\n\n      {/* Data Views */}\n      <DataViewProvider config={dataViewConfig}>\n        <div className=\"stack-md\">\n          <DataActions />\n          <ViewSwitcher />\n          <DataGrid />\n          <KanbanBoard \n            columns={[\n              { id: 'pending', title: 'Pending' },\n              { id: 'in_progress', title: 'In Progress' },\n              { id: 'compliant', title: 'Compliant' },\n              { id: 'non_compliant', title: 'Non-Compliant' },\n              { id: 'expired', title: 'Expired' }\n            ]}\n            statusField=\"status\"\n            titleField=\"requirement\"\n          />\n          <CalendarView \n            startDateField=\"due_date\"\n            titleField=\"requirement\"\n          />\n          <ListView \n            titleField=\"requirement\"\n            subtitleField=\"asset_name\"\n          />\n          <TimelineView \n            dateField=\"due_date\"\n            titleField=\"requirement\"\n          />\n        </div>\n      </DataViewProvider>\n\n      {/* Universal Drawer */}\n      <UniversalDrawer\n        open={drawerOpen}\n        onClose={() => setDrawerOpen(false)}\n        record={selectedRecord}\n        fields={fieldConfig}\n        mode={drawerMode}\n        title={\n          drawerMode === 'create' \n            ? 'Create Compliance Record'\n            : drawerMode === 'edit'\n            ? 'Edit Compliance Record'\n            : 'Compliance Record Details'\n        }\n        onSave={handleSave}\n        tabs={[\n          {\n            key: 'details',\n            label: 'Details',\n            content: null // Will be handled by UniversalDrawer\n          },\n          {\n            key: 'history',\n            label: 'History',\n            content: (\n              <div className=\"p-md\">\n                <p className=\"text-body-sm color-muted\">Compliance history and audit trail will be displayed here.</p>\n              </div>\n            )\n          }\n        ]}\n      />\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ghxstship/apps/web/app/(app)/(shell)/assets/compliance/ComplianceClient_ATLVS.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'generateDemoData'. Either include it or remove the dependency array.","line":176,"column":6,"nodeType":"ArrayExpression","endLine":176,"endColumn":23,"suggestions":[{"desc":"Update the dependencies array to be: [supabase, orgId, generateDemoData]","fix":{"range":[4795,4812],"text":"[supabase, orgId, generateDemoData]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useMemo has a missing dependency: 'handleDelete'. Either include it or remove the dependency array.","line":358,"column":7,"nodeType":"ArrayExpression","endLine":358,"endColumn":45,"suggestions":[{"desc":"Update the dependencies array to be: [fieldConfig, data, loading, loadData, handleDelete]","fix":{"range":[10214,10252],"text":"[fieldConfig, data, loading, loadData, handleDelete]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { Shield, AlertTriangle, CheckCircle, Clock, Plus, TrendingUp } from \"lucide-react\";\nimport React, { useState, useEffect, useCallback, useMemo } from 'react';\nimport { useTranslations } from 'next-intl';\nimport { createBrowserClient } from '@ghxstship/auth';\nimport { \n  DataViewProvider, \n  DataGrid, \n  KanbanBoard, \n  CalendarView, \n  ListView,\n  TimelineView,\n  DashboardView,\n  ViewSwitcher,\n  DataActions,\n  UniversalDrawer\n} from '@ghxstship/ui/components/DataViews';\nimport { Card, Badge, Button } from '@ghxstship/ui';\nimport CreateComplianceClient from './CreateComplianceClient';\nimport type { \n  DataViewConfig, \n  FieldConfig, \n  DataRecord,\n  FilterConfig,\n  SortConfig \n} from '@ghxstship/ui/components/DataViews/types';\nimport type { AssetCompliance } from '../types';\n\ninterface ComplianceClientProps {\n  orgId: string;\n}\n\nexport default function ComplianceClient({ orgId }: ComplianceClientProps) {\n  const t = useTranslations('assets.compliance');\n  const supabase = createBrowserClient();\n  \n  const [data, setData] = useState<AssetCompliance[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [selectedRecord, setSelectedRecord] = useState<AssetCompliance | null>(null);\n  const [drawerOpen, setDrawerOpen] = useState(false);\n  const [drawerMode, setDrawerMode] = useState<'view' | 'edit' | 'create'>('view');\n  const [createDrawerOpen, setCreateDrawerOpen] = useState(false);\n\n  // Field configuration for compliance\n  const fieldConfig: FieldConfig[] = useMemo(() => [\n    {\n      key: 'asset_name',\n      label: 'Asset Name',\n      type: 'text',\n      required: true,\n      sortable: true,\n      searchable: true\n    },\n    {\n      key: 'compliance_type',\n      label: 'Compliance Type',\n      type: 'select',\n      options: [\n        { value: 'safety', label: 'Safety Inspection' },\n        { value: 'regulatory', label: 'Regulatory Compliance' },\n        { value: 'certification', label: 'Certification' },\n        { value: 'audit', label: 'Audit' },\n        { value: 'insurance', label: 'Insurance' },\n        { value: 'environmental', label: 'Environmental' },\n        { value: 'quality', label: 'Quality Assurance' }\n      ],\n      required: true,\n      filterable: true,\n      sortable: true\n    },\n    {\n      key: 'status',\n      label: 'Status',\n      type: 'select',\n      options: [\n        { value: 'pending', label: 'Pending' },\n        { value: 'in_progress', label: 'In Progress' },\n        { value: 'compliant', label: 'Compliant' },\n        { value: 'non_compliant', label: 'Non-Compliant' },\n        { value: 'expired', label: 'Expired' }\n      ],\n      required: true,\n      filterable: true,\n      sortable: true,\n      render: (value: string) => {\n        const variants = {\n          pending: 'secondary',\n          in_progress: 'warning',\n          compliant: 'success',\n          non_compliant: 'destructive',\n          expired: 'destructive'\n        };\n        return <Badge variant={variants[value as keyof typeof variants] as unknown}>{value.replace('_', ' ')}</Badge>;\n      }\n    },\n    {\n      key: 'requirement',\n      label: 'Requirement',\n      type: 'text',\n      required: true,\n      searchable: true\n    },\n    {\n      key: 'due_date',\n      label: 'Due Date',\n      type: 'date',\n      sortable: true\n    },\n    {\n      key: 'completed_date',\n      label: 'Completed Date',\n      type: 'date',\n      sortable: true\n    },\n    {\n      key: 'assigned_to',\n      label: 'Assigned To',\n      type: 'text',\n      searchable: true\n    },\n    {\n      key: 'inspector',\n      label: 'Inspector',\n      type: 'text',\n      searchable: true\n    },\n    {\n      key: 'description',\n      label: 'Description',\n      type: 'textarea',\n      searchable: true\n    },\n    {\n      key: 'notes',\n      label: 'Notes',\n      type: 'textarea'\n    },\n    {\n      key: 'created_at',\n      label: 'Created',\n      type: 'date',\n      sortable: true\n    }\n  ], []);\n\n  // Load compliance data\n  const loadData = useCallback(async () => {\n    setLoading(true);\n    try {\n      const { data: complianceData, error } = await supabase\n        .from('asset_compliance')\n        .select(`\n          *,\n          assets!inner(name)\n        `)\n        .eq('organization_id', orgId)\n        .order('due_date', { ascending: true });\n\n      if (error) {\n        console.error('Error loading compliance:', error);\n        setData(generateDemoData());\n      } else {\n        const transformedData = complianceData?.map(item => ({\n          ...item,\n          asset_name: item.assets?.name || 'Unknown Asset'\n        })) || [];\n        setData(transformedData);\n      }\n    } catch (error) {\n      console.error('Error loading compliance:', error);\n      setData(generateDemoData());\n    } finally {\n      setLoading(false);\n    }\n  }, [supabase, orgId]);\n\n  // Generate demo data\n  const generateDemoData = (): AssetCompliance[] => [\n    {\n      id: '1',\n      organization_id: orgId,\n      asset_id: '1',\n      asset_name: 'Main Stage Rigging System',\n      compliance_type: 'safety',\n      status: 'compliant',\n      requirement: 'Annual Safety Inspection',\n      description: 'Comprehensive safety inspection of rigging system',\n      due_date: '2024-01-15',\n      completed_date: '2023-12-20',\n      assigned_to: 'Safety Team',\n      inspector: 'John Smith, Certified Inspector',\n      certificate_url: 'https://example.com/cert1.pdf',\n      notes: 'All safety checks passed. Next inspection due January 2025.',\n      created_at: '2023-01-15T10:00:00Z',\n      updated_at: '2023-12-20T15:30:00Z'\n    },\n    {\n      id: '2',\n      organization_id: orgId,\n      asset_id: '2',\n      asset_name: 'Professional Sound System',\n      compliance_type: 'regulatory',\n      status: 'pending',\n      requirement: 'FCC Equipment Authorization',\n      description: 'Regulatory compliance for wireless audio equipment',\n      due_date: '2024-03-01',\n      assigned_to: 'Technical Team',\n      inspector: 'FCC Certified Agent',\n      notes: 'Documentation submitted, awaiting approval.',\n      created_at: '2023-02-01T10:00:00Z',\n      updated_at: '2023-02-01T10:00:00Z'\n    },\n    {\n      id: '3',\n      organization_id: orgId,\n      asset_id: '3',\n      asset_name: 'LED Video Wall Panels',\n      compliance_type: 'environmental',\n      status: 'expired',\n      requirement: 'Energy Efficiency Certification',\n      description: 'Environmental compliance for LED display systems',\n      due_date: '2023-12-01',\n      completed_date: '2022-11-15',\n      assigned_to: 'Environmental Team',\n      inspector: 'Green Tech Auditor',\n      notes: 'Certification expired. Renewal required immediately.',\n      created_at: '2022-11-01T10:00:00Z',\n      updated_at: '2023-12-01T10:00:00Z'\n    }\n  ];\n\n  // Statistics calculation\n  const stats = useMemo(() => {\n    const total = data.length;\n    const compliant = data.filter(item => item.status === 'compliant').length;\n    const pending = data.filter(item => item.status === 'pending').length;\n    const expired = data.filter(item => item.status === 'expired').length;\n    const nonCompliant = data.filter(item => item.status === 'non_compliant').length;\n    const dueThisMonth = data.filter(item => {\n      const dueDate = new Date(item.due_date);\n      const now = new Date();\n      return dueDate.getMonth() === now.getMonth() && dueDate.getFullYear() === now.getFullYear();\n    }).length;\n\n    return { total, compliant, pending, expired, nonCompliant, dueThisMonth };\n  }, [data]);\n\n  // Event handlers\n  const handleCreate = () => {\n    setCreateDrawerOpen(true);\n  };\n\n  const handleEdit = (record: AssetCompliance) => {\n    setSelectedRecord(record);\n    setDrawerMode('edit');\n    setDrawerOpen(true);\n  };\n\n  const handleView = (record: AssetCompliance) => {\n    setSelectedRecord(record);\n    setDrawerMode('view');\n    setDrawerOpen(true);\n  };\n\n  const handleSave = async (formData: unknown) => {\n    try {\n      if (drawerMode === 'create') {\n        const { error } = await supabase\n          .from('asset_compliance')\n          .insert([{ ...formData, organization_id: orgId }]);\n        \n        if (error) throw error;\n      } else if (drawerMode === 'edit' && selectedRecord) {\n        const { error } = await supabase\n          .from('asset_compliance')\n          .update(formData)\n          .eq('id', selectedRecord.id);\n        \n        if (error) throw error;\n      }\n      \n      await loadData();\n      setDrawerOpen(false);\n    } catch (error) {\n      console.error('Error saving compliance:', error);\n    }\n  };\n\n  const handleDelete = async (record: AssetCompliance) => {\n    try {\n      const { error } = await supabase\n        .from('asset_compliance')\n        .delete()\n        .eq('id', record.id);\n      \n      if (error) throw error;\n      await loadData();\n    } catch (error) {\n      console.error('Error deleting compliance:', error);\n    }\n  };\n\n  // DataView configuration\n  const dataViewConfig: DataViewConfig = useMemo(() => ({\n    id: 'assets-compliance',\n    name: 'Asset Compliance',\n    description: 'Manage regulatory compliance and certifications',\n    viewType: 'list',\n    defaultView: 'list',\n    fields: fieldConfig,\n    data: data,\n    loading: loading,\n    onRefresh: loadData,\n    onSearch: (query: string) => {\n      console.log('Search:', query);\n    },\n    onFilter: (filters: FilterConfig[]) => {\n      console.log('Filter:', filters);\n    },\n    onSort: (sorts: SortConfig[]) => {\n      console.log('Sort:', sorts);\n    },\n    actions: [\n      {\n        key: 'create',\n        id: 'create',\n        label: 'Create Compliance Record',\n        icon: 'Plus',\n        variant: 'primary' as const,\n        onClick: handleCreate\n      },\n      {\n        key: 'edit',\n        id: 'edit',\n        label: 'Edit',\n        icon: 'Edit',\n        variant: 'secondary' as const,\n        onClick: handleEdit\n      },\n      {\n        key: 'view',\n        id: 'view',\n        label: 'View',\n        icon: 'Eye',\n        variant: 'outline' as const,\n        onClick: handleView\n      },\n      {\n        key: 'delete',\n        id: 'delete',\n        label: 'Delete',\n        icon: 'Trash',\n        variant: 'destructive' as const,\n        onClick: handleDelete\n      }\n    ]\n  }), [fieldConfig, data, loading, loadData]);\n\n  useEffect(() => {\n    loadData();\n  }, [loadData]);\n\n  return (\n    <div className=\"stack-lg\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-heading-3 font-anton uppercase\">Asset Compliance</h1>\n          <p className=\"text-body-sm color-muted\">Manage regulatory compliance and certifications</p>\n        </div>\n        <Button onClick={handleCreate} className=\"flex items-center gap-sm\">\n          <Plus className=\"w-4 h-4\" />\n          Add Compliance Record\n        </Button>\n      </div>\n\n      {/* Statistics Dashboard */}\n      <DashboardView>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-6 gap-md\">\n          <Card>\n            <div className=\"p-md\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-body-sm form-label color-muted\">Total Records</p>\n                  <p className=\"text-heading-3\">{stats.total}</p>\n                </div>\n                <Shield className=\"w-8 h-8 color-accent\" />\n              </div>\n            </div>\n          </Card>\n          \n          <Card>\n            <div className=\"p-md\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-body-sm form-label color-muted\">Compliant</p>\n                  <p className=\"text-heading-3\">{stats.compliant}</p>\n                </div>\n                <CheckCircle className=\"w-8 h-8 color-success\" />\n              </div>\n            </div>\n          </Card>\n          \n          <Card>\n            <div className=\"p-md\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-body-sm form-label color-muted\">Pending</p>\n                  <p className=\"text-heading-3\">{stats.pending}</p>\n                </div>\n                <Clock className=\"w-8 h-8 color-warning\" />\n              </div>\n            </div>\n          </Card>\n          \n          <Card>\n            <div className=\"p-md\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-body-sm form-label color-muted\">Expired</p>\n                  <p className=\"text-heading-3\">{stats.expired}</p>\n                </div>\n                <AlertTriangle className=\"w-8 h-8 color-destructive\" />\n              </div>\n            </div>\n          </Card>\n          \n          <Card>\n            <div className=\"p-md\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-body-sm form-label color-muted\">Non-Compliant</p>\n                  <p className=\"text-heading-3\">{stats.nonCompliant}</p>\n                </div>\n                <AlertTriangle className=\"w-8 h-8 color-destructive\" />\n              </div>\n            </div>\n          </Card>\n          \n          <Card>\n            <div className=\"p-md\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-body-sm form-label color-muted\">Due This Month</p>\n                  <p className=\"text-heading-3\">{stats.dueThisMonth}</p>\n                </div>\n                <TrendingUp className=\"w-8 h-8 color-info\" />\n              </div>\n            </div>\n          </Card>\n        </div>\n      </DashboardView>\n\n      {/* Data Views */}\n      <DataViewProvider config={dataViewConfig}>\n        <div className=\"stack-md\">\n          <DataActions />\n          <ViewSwitcher />\n          <DataGrid />\n          <KanbanBoard \n            columns={[\n              { id: 'pending', title: 'Pending' },\n              { id: 'in_progress', title: 'In Progress' },\n              { id: 'compliant', title: 'Compliant' },\n              { id: 'non_compliant', title: 'Non-Compliant' },\n              { id: 'expired', title: 'Expired' }\n            ]}\n            statusField=\"status\"\n            titleField=\"requirement\"\n          />\n          <CalendarView \n            startDateField=\"due_date\"\n            titleField=\"requirement\"\n          />\n          <ListView \n            titleField=\"requirement\"\n            subtitleField=\"compliance_type\"\n          />\n          <TimelineView \n            startDateField=\"due_date\"\n            titleField=\"requirement\"\n          />\n        </div>\n      </DataViewProvider>\n\n      {/* Universal Drawer */}\n      <UniversalDrawer\n        open={drawerOpen}\n        onClose={() => setDrawerOpen(false)}\n        record={selectedRecord}\n        fields={fieldConfig}\n        mode={drawerMode}\n        title={\n          drawerMode === 'create' \n            ? 'Create Compliance Record'\n            : drawerMode === 'edit'\n            ? 'Edit Compliance Record'\n            : 'Compliance Details'\n        }\n        onSave={handleSave}\n        tabs={[\n          {\n            key: 'details',\n            label: 'Details',\n            content: null\n          },\n          {\n            key: 'certificates',\n            label: 'Certificates',\n            content: (\n              <div className=\"p-md\">\n                <p className=\"text-body-sm color-muted\">Certificate management will be displayed here.</p>\n              </div>\n            )\n          },\n          {\n            key: 'history',\n            label: 'History',\n            content: (\n              <div className=\"p-md\">\n                <p className=\"text-body-sm color-muted\">Compliance history will be displayed here.</p>\n              </div>\n            )\n          }\n        ]}\n      />\n\n      {/* Create Compliance Drawer */}\n      <CreateComplianceClient\n        isOpen={createDrawerOpen}\n        onClose={() => setCreateDrawerOpen(false)}\n        onSuccess={() => {\n          loadData();\n          setCreateDrawerOpen(false);\n        }}\n        orgId={orgId}\n      />\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ghxstship/apps/web/app/(app)/(shell)/assets/inspections/InspectionsClient.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useMemo has a missing dependency: 'handleDelete'. Either include it or remove the dependency array.","line":463,"column":7,"nodeType":"ArrayExpression","endLine":463,"endColumn":45,"suggestions":[{"desc":"Update the dependencies array to be: [fieldConfig, data, loading, loadData, handleDelete]","fix":{"range":[14344,14382],"text":"[fieldConfig, data, loading, loadData, handleDelete]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { Search, CheckSquare, AlertCircle, Calendar, FileCheck, Plus } from \"lucide-react\";\nimport React, { useState, useEffect, useCallback, useMemo } from 'react';\nimport { useTranslations } from 'next-intl';\nimport { createBrowserClient } from '@ghxstship/auth';\nimport { \n  DataViewProvider, \n  DataGrid, \n  KanbanBoard, \n  CalendarView, \n  ListView,\n  TimelineView,\n  DashboardView,\n  ViewSwitcher,\n  DataActions,\n  UniversalDrawer\n} from '@ghxstship/ui/components/DataViews';\nimport { Card, Badge, Button } from '@ghxstship/ui';\nimport type { \n  DataViewConfig, \n  FieldConfig, \n  DataRecord,\n  FilterConfig,\n  SortConfig \n} from '@ghxstship/ui/components/DataViews/types';\n\ninterface InspectionsClientProps {\n  orgId: string;\n}\n\ninterface AssetInspection extends DataRecord {\n  id: string;\n  asset_id: string;\n  asset_name: string;\n  inspection_type: string;\n  status: 'scheduled' | 'in_progress' | 'completed' | 'failed' | 'cancelled';\n  title: string;\n  description: string;\n  scheduled_date: string;\n  completed_date?: string;\n  inspector: string;\n  checklist_template: string;\n  checklist_items: unknown[];\n  findings: string;\n  recommendations: string;\n  pass_fail: 'pass' | 'fail' | 'conditional' | null;\n  next_inspection_date?: string;\n  attachments: string[];\n  notes?: string;\n  created_at: string;\n  updated_at: string;\n}\n\nexport default function InspectionsClient({ orgId }: InspectionsClientProps) {\n  const t = useTranslations();\n  const supabase = createBrowserClient();\n  \n  const [data, setData] = useState<AssetInspection[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [selectedRecord, setSelectedRecord] = useState<AssetInspection | null>(null);\n  const [drawerOpen, setDrawerOpen] = useState(false);\n  const [drawerMode, setDrawerMode] = useState<'view' | 'edit' | 'create'>('view');\n\n  // Field configuration for inspections data\n  const fieldConfig: FieldConfig[] = useMemo(() => [\n    {\n      key: 'asset_name',\n      label: 'Asset Name',\n      type: 'text',\n      required: true,\n      sortable: true,\n      searchable: true\n    },\n    {\n      key: 'title',\n      label: 'Inspection Title',\n      type: 'text',\n      required: true,\n      searchable: true\n    },\n    {\n      key: 'inspection_type',\n      label: 'Inspection Type',\n      type: 'select',\n      options: [\n        { value: 'safety', label: 'Safety Inspection' },\n        { value: 'quality', label: 'Quality Control' },\n        { value: 'maintenance', label: 'Maintenance Check' },\n        { value: 'compliance', label: 'Compliance Audit' },\n        { value: 'performance', label: 'Performance Review' },\n        { value: 'condition', label: 'Condition Assessment' },\n        { value: 'calibration', label: 'Calibration Check' }\n      ],\n      required: true,\n      filterable: true,\n      sortable: true\n    },\n    {\n      key: 'status',\n      label: 'Status',\n      type: 'select',\n      options: [\n        { value: 'scheduled', label: 'Scheduled' },\n        { value: 'in_progress', label: 'In Progress' },\n        { value: 'completed', label: 'Completed' },\n        { value: 'failed', label: 'Failed' },\n        { value: 'cancelled', label: 'Cancelled' }\n      ],\n      required: true,\n      filterable: true,\n      sortable: true,\n      render: (value: string) => {\n        const variants = {\n          scheduled: 'secondary',\n          in_progress: 'warning',\n          completed: 'success',\n          failed: 'destructive',\n          cancelled: 'outline'\n        };\n        return <Badge variant={variants[value as keyof typeof variants] as unknown}>{value.replace('_', ' ')}</Badge>;\n      }\n    },\n    {\n      key: 'pass_fail',\n      label: 'Result',\n      type: 'select',\n      options: [\n        { value: 'pass', label: 'Pass' },\n        { value: 'fail', label: 'Fail' },\n        { value: 'conditional', label: 'Conditional' }\n      ],\n      filterable: true,\n      render: (value: string) => {\n        if (!value) return null;\n        const variants = {\n          pass: 'success',\n          fail: 'destructive',\n          conditional: 'warning'\n        };\n        return <Badge variant={variants[value as keyof typeof variants] as unknown}>{value}</Badge>;\n      }\n    },\n    {\n      key: 'scheduled_date',\n      label: 'Scheduled Date',\n      type: 'date',\n      required: true,\n      sortable: true\n    },\n    {\n      key: 'completed_date',\n      label: 'Completed Date',\n      type: 'date',\n      sortable: true\n    },\n    {\n      key: 'inspector',\n      label: 'Inspector',\n      type: 'text',\n      required: true,\n      searchable: true\n    },\n    {\n      key: 'checklist_template',\n      label: 'Checklist Template',\n      type: 'select',\n      options: [\n        { value: 'safety_basic', label: 'Basic Safety Checklist' },\n        { value: 'safety_advanced', label: 'Advanced Safety Checklist' },\n        { value: 'quality_standard', label: 'Standard Quality Check' },\n        { value: 'maintenance_routine', label: 'Routine Maintenance' },\n        { value: 'compliance_regulatory', label: 'Regulatory Compliance' },\n        { value: 'performance_benchmark', label: 'Performance Benchmark' },\n        { value: 'custom', label: 'Custom Checklist' }\n      ]\n    },\n    {\n      key: 'findings',\n      label: 'Findings',\n      type: 'textarea',\n      searchable: true\n    },\n    {\n      key: 'recommendations',\n      label: 'Recommendations',\n      type: 'textarea',\n      searchable: true\n    },\n    {\n      key: 'next_inspection_date',\n      label: 'Next Inspection',\n      type: 'date',\n      sortable: true\n    },\n    {\n      key: 'description',\n      label: 'Description',\n      type: 'textarea',\n      searchable: true\n    },\n    {\n      key: 'notes',\n      label: 'Notes',\n      type: 'textarea'\n    },\n    {\n      key: 'created_at',\n      label: 'Created',\n      type: 'datetime',\n      sortable: true\n    },\n    {\n      key: 'updated_at',\n      label: 'Updated',\n      type: 'datetime',\n      sortable: true\n    }\n  ], []);\n\n  // Load inspections data\n  const loadData = useCallback(async () => {\n    setLoading(true);\n    try {\n      const { data: inspectionsData, error } = await supabase\n        .from('asset_inspections')\n        .select(`\n          *,\n          assets!inner(name)\n        `)\n        .eq('organization_id', orgId)\n        .order('scheduled_date', { ascending: false });\n\n      if (error) {\n        console.error('Error loading inspections data:', error);\n        // Use demo data as fallback\n        setData(generateDemoData());\n      } else {\n        const formattedData = (inspectionsData || []).map(item => ({\n          ...item,\n          asset_name: item.assets?.name || 'Unknown Asset'\n        }));\n        setData(formattedData);\n      }\n    } catch (error) {\n      console.error('Error loading inspections data:', error);\n      setData(generateDemoData());\n    } finally {\n      setLoading(false);\n    }\n  }, [supabase, orgId]);\n\n  // Generate demo data\n  const generateDemoData = (): AssetInspection[] => [\n    {\n      id: 'demo-1',\n      asset_id: 'asset-1',\n      asset_name: 'Main Stage Rigging System',\n      inspection_type: 'safety',\n      status: 'completed',\n      title: 'Quarterly Safety Inspection',\n      description: 'Comprehensive safety inspection including load testing and structural integrity check',\n      scheduled_date: '2024-02-15',\n      completed_date: '2024-02-15',\n      inspector: 'Jack Sparrow',\n      checklist_template: 'safety_advanced',\n      checklist_items: [\n        { item: 'Visual inspection of all rigging points', status: 'pass', notes: 'All points secure' },\n        { item: 'Load testing at 125% working load', status: 'pass', notes: 'No deformation observed' },\n        { item: 'Hardware inspection', status: 'pass', notes: 'All hardware in good condition' }\n      ],\n      findings: 'All safety systems functioning properly. No issues identified.',\n      recommendations: 'Continue quarterly inspections. Replace safety cables in 6 months.',\n      pass_fail: 'pass',\n      next_inspection_date: '2024-05-15',\n      attachments: ['inspection_report_001.pdf', 'load_test_results.pdf'],\n      notes: 'Excellent condition. No immediate concerns.',\n      created_at: '2024-02-01T09:00:00Z',\n      updated_at: '2024-02-15T16:30:00Z'\n    },\n    {\n      id: 'demo-2',\n      asset_id: 'asset-2',\n      asset_name: 'Professional Sound System',\n      inspection_type: 'quality',\n      status: 'in_progress',\n      title: 'Audio Quality Assessment',\n      description: 'Comprehensive audio quality and performance testing',\n      scheduled_date: '2024-03-01',\n      inspector: 'Will Turner',\n      checklist_template: 'quality_standard',\n      checklist_items: [\n        { item: 'Frequency response test', status: 'in_progress', notes: 'Testing in progress' },\n        { item: 'Signal-to-noise ratio measurement', status: 'pending', notes: '' },\n        { item: 'Speaker driver inspection', status: 'pending', notes: '' }\n      ],\n      findings: 'Testing in progress. Initial results look promising.',\n      recommendations: 'TBD based on test results.',\n      pass_fail: null,\n      next_inspection_date: '2024-09-01',\n      attachments: [],\n      notes: 'Inspection scheduled during maintenance window.',\n      created_at: '2024-02-20T10:00:00Z',\n      updated_at: '2024-03-01T14:00:00Z'\n    },\n    {\n      id: 'demo-3',\n      asset_id: 'asset-3',\n      asset_name: 'LED Video Wall Panels',\n      inspection_type: 'maintenance',\n      status: 'scheduled',\n      title: 'Monthly Maintenance Check',\n      description: 'Routine maintenance inspection and cleaning',\n      scheduled_date: '2024-03-15',\n      inspector: 'Elizabeth Swann',\n      checklist_template: 'maintenance_routine',\n      checklist_items: [],\n      findings: '',\n      recommendations: '',\n      pass_fail: null,\n      next_inspection_date: '2024-04-15',\n      attachments: [],\n      notes: 'Scheduled during off-peak hours.',\n      created_at: '2024-02-15T11:00:00Z',\n      updated_at: '2024-02-15T11:00:00Z'\n    },\n    {\n      id: 'demo-4',\n      asset_id: 'asset-4',\n      asset_name: 'Generator - 500kW',\n      inspection_type: 'compliance',\n      status: 'failed',\n      title: 'Environmental Compliance Audit',\n      description: 'Annual environmental compliance and emissions testing',\n      scheduled_date: '2024-01-30',\n      completed_date: '2024-01-30',\n      inspector: 'Hector Barbossa',\n      checklist_template: 'compliance_regulatory',\n      checklist_items: [\n        { item: 'Emissions level test', status: 'fail', notes: 'Emissions slightly above threshold' },\n        { item: 'Noise level measurement', status: 'pass', notes: 'Within acceptable limits' },\n        { item: 'Fuel system inspection', status: 'pass', notes: 'No leaks detected' }\n      ],\n      findings: 'Emissions levels slightly exceed regulatory limits. Requires tuning.',\n      recommendations: 'Schedule engine tuning and retest within 30 days.',\n      pass_fail: 'fail',\n      next_inspection_date: '2025-01-30',\n      attachments: ['emissions_test_report.pdf'],\n      notes: 'Follow-up inspection required after maintenance.',\n      created_at: '2024-01-15T08:00:00Z',\n      updated_at: '2024-01-30T17:00:00Z'\n    }\n  ];\n\n  // Statistics calculation\n  const stats = useMemo(() => {\n    const total = data.length;\n    const completed = data.filter(item => item.status === 'completed').length;\n    const scheduled = data.filter(item => item.status === 'scheduled').length;\n    const inProgress = data.filter(item => item.status === 'in_progress').length;\n    const passed = data.filter(item => item.pass_fail === 'pass').length;\n    const failed = data.filter(item => item.pass_fail === 'fail').length;\n\n    return { total, completed, scheduled, inProgress, passed, failed };\n  }, [data]);\n\n  // Event handlers\n  const handleCreate = () => {\n    setSelectedRecord(null);\n    setDrawerMode('create');\n    setDrawerOpen(true);\n  };\n\n  const handleEdit = (record: AssetInspection) => {\n    setSelectedRecord(record);\n    setDrawerMode('edit');\n    setDrawerOpen(true);\n  };\n\n  const handleView = (record: AssetInspection) => {\n    setSelectedRecord(record);\n    setDrawerMode('view');\n    setDrawerOpen(true);\n  };\n\n  const handleSave = async (formData: unknown) => {\n    try {\n      if (drawerMode === 'create') {\n        const { error } = await supabase\n          .from('asset_inspections')\n          .insert([{ ...formData, organization_id: orgId }]);\n        \n        if (error) throw error;\n      } else if (drawerMode === 'edit' && selectedRecord) {\n        const { error } = await supabase\n          .from('asset_inspections')\n          .update(formData)\n          .eq('id', selectedRecord.id);\n        \n        if (error) throw error;\n      }\n      \n      await loadData();\n      setDrawerOpen(false);\n    } catch (error) {\n      console.error('Error saving inspection record:', error);\n    }\n  };\n\n  const handleDelete = async (record: AssetInspection) => {\n    try {\n      const { error } = await supabase\n        .from('asset_inspections')\n        .delete()\n        .eq('id', record.id);\n      \n      if (error) throw error;\n      await loadData();\n    } catch (error) {\n      console.error('Error deleting inspection record:', error);\n    }\n  };\n\n  // DataView configuration\n  const dataViewConfig: DataViewConfig = useMemo(() => ({\n    id: 'asset-inspections',\n    name: 'Asset Inspections',\n    description: 'Manage asset inspections, checklists, and quality control',\n    viewType: 'grid',\n    defaultView: 'grid',\n    fields: fieldConfig,\n    data: data,\n    loading: loading,\n    onRefresh: loadData,\n    onSearch: (query: string) => {\n      // Implement search logic\n      console.log('Search:', query);\n    },\n    onFilter: (filters: FilterConfig[]) => {\n      // Implement filter logic\n      console.log('Filter:', filters);\n    },\n    onSort: (sorts: SortConfig[]) => {\n      // Implement sort logic\n      console.log('Sort:', sorts);\n    },\n    onExport: (data: DataRecord[], format: string) => {\n      console.log('Export:', data, format);\n    },\n    onImport: (data: unknown[]) => {\n      console.log('Import:', data);\n    },\n    actions: {\n      canCreate: true,\n      canEdit: true,\n      canDelete: true,\n      canView: true,\n      onCreate: handleCreate,\n      onEdit: handleEdit,\n      onView: handleView,\n      onDelete: handleDelete\n    }\n  }), [fieldConfig, data, loading, loadData]);\n\n  useEffect(() => {\n    loadData();\n  }, [loadData]);\n\n  return (\n    <div className=\"stack-lg\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-heading-3 font-anton uppercase\">Asset Inspections</h1>\n          <p className=\"text-body-sm color-muted\">Manage inspections, checklists, and quality control processes</p>\n        </div>\n        <Button onClick={handleCreate} className=\"flex items-center gap-sm\">\n          <Plus className=\"w-4 h-4\" />\n          Schedule Inspection\n        </Button>\n      </div>\n\n      {/* Statistics Dashboard */}\n      <DashboardView>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-6 gap-md\">\n          <Card>\n            <div className=\"p-md\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-body-sm form-label color-muted\">Total Inspections</p>\n                  <p className=\"text-heading-3\">{stats.total}</p>\n                </div>\n                <Search className=\"w-8 h-8 color-accent\" />\n              </div>\n            </div>\n          </Card>\n          \n          <Card>\n            <div className=\"p-md\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-body-sm form-label color-muted\">Completed</p>\n                  <p className=\"text-heading-3\">{stats.completed}</p>\n                </div>\n                <CheckSquare className=\"w-8 h-8 color-success\" />\n              </div>\n            </div>\n          </Card>\n          \n          <Card>\n            <div className=\"p-md\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-body-sm form-label color-muted\">Scheduled</p>\n                  <p className=\"text-heading-3\">{stats.scheduled}</p>\n                </div>\n                <Calendar className=\"w-8 h-8 color-secondary\" />\n              </div>\n            </div>\n          </Card>\n          \n          <Card>\n            <div className=\"p-md\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-body-sm form-label color-muted\">In Progress</p>\n                  <p className=\"text-heading-3\">{stats.inProgress}</p>\n                </div>\n                <FileCheck className=\"w-8 h-8 color-warning\" />\n              </div>\n            </div>\n          </Card>\n          \n          <Card>\n            <div className=\"p-md\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-body-sm form-label color-muted\">Passed</p>\n                  <p className=\"text-heading-3\">{stats.passed}</p>\n                </div>\n                <CheckSquare className=\"w-8 h-8 color-success\" />\n              </div>\n            </div>\n          </Card>\n          \n          <Card>\n            <div className=\"p-md\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-body-sm form-label color-muted\">Failed</p>\n                  <p className=\"text-heading-3\">{stats.failed}</p>\n                </div>\n                <AlertCircle className=\"w-8 h-8 color-destructive\" />\n              </div>\n            </div>\n          </Card>\n        </div>\n      </DashboardView>\n\n      {/* Data Views */}\n      <DataViewProvider config={dataViewConfig}>\n        <div className=\"stack-md\">\n          <DataActions />\n          <ViewSwitcher />\n          <DataGrid />\n          <KanbanBoard \n            columns={[\n              { id: 'scheduled', title: 'Scheduled' },\n              { id: 'in_progress', title: 'In Progress' },\n              { id: 'completed', title: 'Completed' },\n              { id: 'failed', title: 'Failed' },\n              { id: 'cancelled', title: 'Cancelled' }\n            ]}\n            statusField=\"status\"\n            titleField=\"title\"\n          />\n          <CalendarView \n            startDateField=\"scheduled_date\"\n            titleField=\"title\"\n          />\n          <ListView \n            titleField=\"title\"\n            subtitleField=\"asset_name\"\n          />\n          <TimelineView \n            dateField=\"scheduled_date\"\n            titleField=\"title\"\n          />\n        </div>\n      </DataViewProvider>\n\n      {/* Universal Drawer */}\n      <UniversalDrawer\n        open={drawerOpen}\n        onClose={() => setDrawerOpen(false)}\n        record={selectedRecord}\n        fields={fieldConfig}\n        mode={drawerMode}\n        title={\n          drawerMode === 'create' \n            ? 'Schedule Inspection'\n            : drawerMode === 'edit'\n            ? 'Edit Inspection'\n            : 'Inspection Details'\n        }\n        onSave={handleSave}\n        tabs={[\n          {\n            key: 'details',\n            label: 'Details',\n            content: null // Will be handled by UniversalDrawer\n          },\n          {\n            key: 'checklist',\n            label: 'Checklist',\n            content: (\n              <div className=\"p-md\">\n                <p className=\"text-body-sm color-muted\">Inspection checklist and findings will be displayed here.</p>\n              </div>\n            )\n          },\n          {\n            key: 'attachments',\n            label: 'Attachments',\n            content: (\n              <div className=\"p-md\">\n                <p className=\"text-body-sm color-muted\">Inspection photos and documents will be displayed here.</p>\n              </div>\n            )\n          }\n        ]}\n      />\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ghxstship/apps/web/app/(app)/(shell)/assets/inventory/InventoryClient.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadAssets'. Either include it or remove the dependency array.","line":67,"column":6,"nodeType":"ArrayExpression","endLine":67,"endColumn":13,"suggestions":[{"desc":"Update the dependencies array to be: [loadAssets, orgId]","fix":{"range":[2772,2779],"text":"[loadAssets, orgId]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'filterAssets'. Either include it or remove the dependency array.","line":71,"column":6,"nodeType":"ArrayExpression","endLine":71,"endColumn":61,"suggestions":[{"desc":"Update the dependencies array to be: [assets, filterAssets, searchQuery, selectedCategory, selectedStatus]","fix":{"range":[2828,2883],"text":"[assets, filterAssets, searchQuery, selectedCategory, selectedStatus]"}}]},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Upload' is not defined.","line":318,"column":14,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":318,"endColumn":20},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Download' is not defined.","line":322,"column":14,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":322,"endColumn":22},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Edit' is not defined.","line":404,"column":24,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":404,"endColumn":28},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Copy' is not defined.","line":411,"column":24,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":411,"endColumn":28}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { User, FileText, Settings, Award, Calendar, TrendingUp, Activity, Clock, Plus, Search, Play, Trash2 } from \"lucide-react\";\nimport { useState, useEffect } from 'react';\nimport { Card, Button, UnifiedInput, Badge, Drawer } from '@ghxstship/ui';\nimport { createBrowserClient } from '@ghxstship/auth';\nimport { useTranslations } from 'next-intl';\n\ninterface Asset {\n  id: string;\n  organizationId: string;\n  name: string;\n  description?: string;\n  category: string;\n  type: 'fixed' | 'rentable' | 'service';\n  status: 'available' | 'in_use' | 'under_maintenance' | 'damaged' | 'missing' | 'retired';\n  sku?: string;\n  barcode?: string;\n  manufacturer?: string;\n  model?: string;\n  serialNumber?: string;\n  purchaseDate?: string;\n  purchaseCost?: number;\n  currentValue?: number;\n  location?: string;\n  tags?: string[];\n  notes?: string;\n  createdAt?: string;\n  updatedAt?: string;\n}\n\ninterface InventoryClientProps {\n  orgId: string;\n}\n\nconst ASSET_CATEGORIES = [\n  { id: 'site_infrastructure', name: 'Site Infrastructure', color: 'bg-accent' },\n  { id: 'site_assets', name: 'Site Assets', color: 'bg-success' },\n  { id: 'site_vehicles', name: 'Site Vehicles', color: 'bg-secondary' },\n  { id: 'site_services', name: 'Site Services', color: 'bg-warning' },\n  { id: 'heavy_machinery', name: 'Heavy Machinery & Equipment', color: 'bg-destructive' },\n  { id: 'it_communication', name: 'IT & Communication Services', color: 'bg-info' },\n  { id: 'office_admin', name: 'Office & Admin', color: 'bg-secondary' },\n  { id: 'access_credentials', name: 'Access & Credentials', color: 'bg-warning' },\n  { id: 'parking', name: 'Parking', color: 'bg-accent' },\n  { id: 'travel_lodging', name: 'Travel & Lodging', color: 'bg-secondary' },\n  { id: 'artist_technical', name: 'Artist Technical', color: 'bg-success' },\n  { id: 'artist_hospitality', name: 'Artist Hospitality', color: 'bg-warning' },\n  { id: 'artist_travel', name: 'Artist Travel & Lodging', color: 'bg-info' }\n] as const;\n\nexport default function InventoryClient({ orgId }: InventoryClientProps) {\n  const t = useTranslations('assets.inventory');\n  const supabase = createBrowserClient();\n  const [assets, setAssets] = useState<Asset[]>([]);\n  const [filteredAssets, setFilteredAssets] = useState<Asset[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [searchQuery, setSearchQuery] = useState('');\n  const [selectedCategory, setSelectedCategory] = useState<string>('all');\n  const [selectedStatus, setSelectedStatus] = useState<string>('all');\n  const [showDrawer, setShowDrawer] = useState(false);\n  const [selectedAsset, setSelectedAsset] = useState<Asset | null>(null);\n  const [view, setView] = useState<'grid' | 'list' | 'kanban'>('grid');\n\n  useEffect(() => {\n    loadAssets();\n  }, [orgId]);\n\n  useEffect(() => {\n    filterAssets();\n  }, [assets, searchQuery, selectedCategory, selectedStatus]);\n\n  const loadAssets = async () => {\n    setLoading(true);\n    try {\n      const { data, error } = await supabase\n        .from('assets')\n        .select('*')\n        .eq('organization_id', orgId)\n        .order('created_at', { ascending: false });\n\n      if (error) {\n        console.error('Error loading assets:', error);\n        setAssets(generateDemoAssets());\n      } else {\n        setAssets(data || []);\n      }\n    } catch (error) {\n      console.error('Error loading assets:', error);\n      setAssets(generateDemoAssets());\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const generateDemoAssets = (): Asset[] => [\n    {\n      id: '1',\n      organizationId: orgId,\n      name: 'Main Stage Rigging System',\n      description: 'Professional stage rigging and truss system for main performance area',\n      category: 'site_infrastructure',\n      type: 'fixed',\n      status: 'in_use',\n      sku: 'STAGE-RIG-001',\n      barcode: '123456789012',\n      manufacturer: 'TrussWorks Pro',\n      model: 'TR-5000',\n      serialNumber: 'TW-2024-001',\n      purchaseDate: '2024-01-01',\n      purchaseCost: 50000,\n      currentValue: 45000,\n      location: 'Main Deck - Stage Area',\n      tags: ['rigging', 'stage', 'structural'],\n      notes: 'Inspected monthly. Last inspection: 2024-08-15',\n      createdAt: '2024-01-01T10:00:00Z'\n    },\n    {\n      id: '2',\n      organizationId: orgId,\n      name: 'Professional Sound System',\n      description: 'High-end PA system with mixing console and monitors',\n      category: 'artist_technical',\n      type: 'rentable',\n      status: 'available',\n      sku: 'AUDIO-PA-002',\n      barcode: '123456789013',\n      manufacturer: 'SoundCraft',\n      model: 'SC-8000',\n      serialNumber: 'SC-2024-002',\n      purchaseDate: '2024-01-15',\n      purchaseCost: 30000,\n      currentValue: 25000,\n      location: 'Equipment Storage - Bay 2',\n      tags: ['audio', 'sound', 'mixing'],\n      notes: 'Regular maintenance required every 6 months',\n      createdAt: '2024-01-15T14:30:00Z'\n    },\n    {\n      id: '3',\n      organizationId: orgId,\n      name: 'LED Video Wall Panels',\n      description: 'Modular LED display panels for backdrop and visual effects',\n      category: 'artist_technical',\n      type: 'rentable',\n      status: 'under_maintenance',\n      sku: 'LED-WALL-003',\n      barcode: '123456789014',\n      manufacturer: 'PixelPro',\n      model: 'PP-4K-500',\n      serialNumber: 'PP-2024-003',\n      purchaseDate: '2024-02-01',\n      purchaseCost: 40000,\n      currentValue: 35000,\n      location: 'Tech Workshop',\n      tags: ['led', 'video', 'display'],\n      notes: 'Currently being serviced - pixel replacement',\n      createdAt: '2024-02-01T09:15:00Z'\n    },\n    {\n      id: '4',\n      organizationId: orgId,\n      name: 'Mobile Generator Unit',\n      description: 'Portable 100kW generator for backup power',\n      category: 'site_services',\n      type: 'fixed',\n      status: 'available',\n      sku: 'GEN-100-004',\n      barcode: '123456789015',\n      manufacturer: 'PowerGen',\n      model: 'PG-100K',\n      serialNumber: 'PG-2024-004',\n      purchaseDate: '2024-02-15',\n      purchaseCost: 25000,\n      currentValue: 22000,\n      location: 'Power Station - Backup',\n      tags: ['generator', 'power', 'backup'],\n      notes: 'Fuel capacity: 500L. Runtime: 8 hours at full load',\n      createdAt: '2024-02-15T16:45:00Z'\n    },\n    {\n      id: '5',\n      organizationId: orgId,\n      name: 'Crew Transport Van',\n      description: '15-passenger van for crew transportation',\n      category: 'site_vehicles',\n      type: 'fixed',\n      status: 'in_use',\n      sku: 'VAN-CREW-005',\n      barcode: '123456789016',\n      manufacturer: 'Ford',\n      model: 'Transit 350',\n      serialNumber: 'FT-2024-005',\n      purchaseDate: '2024-03-01',\n      purchaseCost: 45000,\n      currentValue: 40000,\n      location: 'Vehicle Bay 1',\n      tags: ['transport', 'crew', 'vehicle'],\n      notes: 'Regular maintenance every 5,000 miles. Last service: 2024-08-01',\n      createdAt: '2024-03-01T11:20:00Z'\n    },\n    {\n      id: '6',\n      organizationId: orgId,\n      name: 'Catering Equipment Set',\n      description: 'Complete mobile kitchen setup for event catering',\n      category: 'artist_hospitality',\n      type: 'rentable',\n      status: 'available',\n      sku: 'CATER-KIT-006',\n      barcode: '123456789017',\n      manufacturer: 'ChefMaster',\n      model: 'CM-Mobile-Pro',\n      serialNumber: 'CM-2024-006',\n      purchaseDate: '2024-03-15',\n      purchaseCost: 15000,\n      currentValue: 13000,\n      location: 'Galley Storage',\n      tags: ['catering', 'kitchen', 'hospitality'],\n      notes: 'Includes: grills, warmers, refrigeration, serving equipment',\n      createdAt: '2024-03-15T13:10:00Z'\n    }\n  ];\n\n  const filterAssets = () => {\n    let filtered = [...assets];\n\n    // Search filter\n    if (searchQuery) {\n      filtered = filtered.filter(asset =>\n        asset.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\n        asset.description?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n        asset.sku?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n        asset.tags?.some(tag => tag.toLowerCase().includes(searchQuery.toLowerCase()))\n      );\n    }\n\n    // Category filter\n    if (selectedCategory !== 'all') {\n      filtered = filtered.filter(asset => asset.category === selectedCategory);\n    }\n\n    // Status filter\n    if (selectedStatus !== 'all') {\n      filtered = filtered.filter(asset => asset.status === selectedStatus);\n    }\n\n    setFilteredAssets(filtered);\n  };\n\n  const handleCreateAsset = () => {\n    setSelectedAsset(null);\n    setShowDrawer(true);\n  };\n\n  const handleEditAsset = (asset: Asset) => {\n    setSelectedAsset(asset);\n    setShowDrawer(true);\n  };\n\n  const handleDuplicateAsset = (asset: Asset) => {\n    const duplicated = {\n      ...asset,\n      id: crypto.randomUUID(),\n      name: `${asset.name} (Copy)`,\n      sku: asset.sku ? `${asset.sku}-COPY` : undefined,\n      createdAt: new Date().toISOString()\n    };\n    setAssets(prev => [duplicated, ...prev]);\n  };\n\n  const handleDeleteAsset = async (assetId: string) => {\n    if (confirm('Are you sure you want to delete this asset?')) {\n      setAssets(prev => prev.filter(a => a.id !== assetId));\n    }\n  };\n\n  const getStatusBadge = (status: Asset['status']) => {\n    switch (status) {\n      case 'available':\n        return <Badge variant=\"success\">Available</Badge>;\n      case 'in_use':\n        return <Badge variant=\"warning\">In Use</Badge>;\n      case 'under_maintenance':\n        return <Badge variant=\"secondary\">Maintenance</Badge>;\n      case 'damaged':\n        return <Badge variant=\"destructive\">Damaged</Badge>;\n      case 'missing':\n        return <Badge variant=\"destructive\">Missing</Badge>;\n      case 'retired':\n        return <Badge variant=\"outline\">Retired</Badge>;\n      default:\n        return <Badge variant=\"outline\">{status}</Badge>;\n    }\n  };\n\n  const getCategoryColor = (category: string) => {\n    const categoryInfo = ASSET_CATEGORIES.find(cat => cat.id === category);\n    return categoryInfo?.color || 'bg-secondary';\n  };\n\n  const formatCurrency = (value: number) => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD'\n    }).format(value);\n  };\n\n  return (\n    <div className=\"stack-lg\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-heading-3 text-heading-3 font-anton uppercase\">Asset Inventory</h1>\n          <p className=\"text-body-sm color-muted\">Master catalog of all available assets</p>\n        </div>\n        <div className=\"flex items-center gap-sm\">\n          <Button variant=\"outline\" className=\"flex items-center gap-sm\">\n            <Upload className=\"w-4 h-4\" />\n            Import\n          </Button>\n          <Button variant=\"outline\" className=\"flex items-center gap-sm\">\n            <Download className=\"w-4 h-4\" />\n            Export\n          </Button>\n          <Button onClick={handleCreateAsset} className=\"flex items-center gap-sm\">\n            <Plus className=\"w-4 h-4\" />\n            Add Asset\n          </Button>\n        </div>\n      </div>\n\n      {/* Filters */}\n      <Card>\n        <div className=\"p-md\">\n          <div className=\"flex flex-wrap items-center gap-md\">\n            <div className=\"flex-1 min-w-64\">\n              <div className=\"relative\">\n                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 color-muted w-4 h-4\" />\n                <UnifiedInput                   placeholder=\"Search assets...\"\n                  value={searchQuery}\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => setSearchQuery(e.target.value)}\n                  className=\"pl-2xl\"\n                />\n              </div>\n            </div>\n            <div className=\"flex items-center gap-sm\">\n              <select\n                value={selectedCategory}\n                onChange={(e: React.ChangeEvent<HTMLInputElement>) => setSelectedCategory(e.target.value)}\n                className=\" px-md py-sm border border-border rounded-md focus:outline-none focus:ring-2 focus:ring-primary\"\n              >\n                <option value=\"all\">All Categories</option>\n                {ASSET_CATEGORIES.map(category => (\n                  <option key={category.id} value={category.id}>\n                    {category.name}\n                  </option>\n                ))}\n              </select>\n              <select\n                value={selectedStatus}\n                onChange={(e: React.ChangeEvent<HTMLInputElement>) => setSelectedStatus(e.target.value)}\n                className=\" px-md py-sm border border-border rounded-md focus:outline-none focus:ring-2 focus:ring-primary\"\n              >\n                <option value=\"all\">All Status</option>\n                <option value=\"available\">Available</option>\n                <option value=\"in_use\">In Use</option>\n                <option value=\"under_maintenance\">Under Maintenance</option>\n                <option value=\"damaged\">Damaged</option>\n                <option value=\"missing\">Missing</option>\n                <option value=\"retired\">Retired</option>\n              </select>\n            </div>\n          </div>\n        </div>\n      </Card>\n\n      {/* Assets Grid */}\n      {loading ? (\n        <Card>\n          <div className=\"p-xl text-center color-muted\">Loading assets...</div>\n        </Card>\n      ) : filteredAssets.length === 0 ? (\n        <Card>\n          <div className=\"p-xl text-center color-muted\">\n            No assets found matching your criteria.\n          </div>\n        </Card>\n      ) : (\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-md\">\n          {filteredAssets.map(asset => (\n            <Card key={asset.id} className=\"hover:shadow-elevated transition-shadow\">\n              <div className=\"p-md\">\n                <div className=\"flex items-start justify-between mb-sm\">\n                  <div className=\"flex items-center gap-sm\">\n                    <div className={`w-3 h-3 rounded-full ${getCategoryColor(asset.category)}`} />\n                    <h3 className=\"text-heading-4 truncate\">{asset.name}</h3>\n                  </div>\n                  <div className=\"flex items-center gap-xs\">\n                    <Button\n                     \n                      variant=\"ghost\"\n                      onClick={() => handleEditAsset(asset)}\n                    >\n                      <Edit className=\"w-3 h-3\" />\n                    </Button>\n                    <Button\n                     \n                      variant=\"ghost\"\n                      onClick={() => handleDuplicateAsset(asset)}\n                    >\n                      <Copy className=\"w-3 h-3\" />\n                    </Button>\n                    <Button\n                     \n                      variant=\"ghost\"\n                      onClick={() => handleDeleteAsset(asset.id)}\n                    >\n                      <Trash2 className=\"w-3 h-3\" />\n                    </Button>\n                  </div>\n                </div>\n\n                {asset.description && (\n                  <p className=\"text-body-sm color-muted mb-sm line-clamp-2\">\n                    {asset.description}\n                  </p>\n                )}\n\n                <div className=\"stack-sm mb-md\">\n                  <div className=\"flex items-center justify-between text-body-sm\">\n                    <span className=\"color-muted\">SKU:</span>\n                    <span className=\"font-mono\">{asset.sku || 'N/A'}</span>\n                  </div>\n                  <div className=\"flex items-center justify-between text-body-sm\">\n                    <span className=\"color-muted\">Location:</span>\n                    <span>{asset.location || 'Unassigned'}</span>\n                  </div>\n                  {asset.currentValue && (\n                    <div className=\"flex items-center justify-between text-body-sm\">\n                      <span className=\"color-muted\">Value:</span>\n                      <span className=\"form-label\">{formatCurrency(asset.currentValue)}</span>\n                    </div>\n                  )}\n                </div>\n\n                <div className=\"flex items-center justify-between\">\n                  <Badge variant=\"outline\">\n                    {ASSET_CATEGORIES.find(cat => cat.id === asset.category)?.name}\n                  </Badge>\n                  {getStatusBadge(asset.status)}\n                </div>\n\n                {asset.tags && asset.tags.length > 0 && (\n                  <div className=\"mt-sm flex flex-wrap gap-xs\">\n                    {asset.tags.slice(0, 3).map(tag => (\n                      <Badge key={tag} variant=\"secondary\">\n                        {tag}\n                      </Badge>\n                    ))}\n                    {asset.tags.length > 3 && (\n                      <Badge variant=\"secondary\">\n                        +{asset.tags.length - 3}\n                      </Badge>\n                    )}\n                  </div>\n                )}\n              </div>\n            </Card>\n          ))}\n        </div>\n      )}\n\n      {/* Asset Form Drawer */}\n      <Drawer\n        open={showDrawer}\n        onClose={() => setShowDrawer(false)}\n        title={selectedAsset ? 'Edit Asset' : 'Create New Asset'}\n       \n      >\n        <div className=\"p-lg stack-md\">\n          <div>\n            <label className=\"block text-body-sm form-label mb-xs\">Asset Name</label>\n            <UnifiedInput               placeholder=\"Enter asset name\"\n              defaultValue={selectedAsset?.name}\n            />\n          </div>\n          <div>\n            <label className=\"block text-body-sm form-label mb-xs\">Description</label>\n            <UnifiedInput               placeholder=\"Enter description\"\n              defaultValue={selectedAsset?.description}\n            />\n          </div>\n          <div className=\"grid grid-cols-2 gap-md\">\n            <div>\n              <label className=\"block text-body-sm form-label mb-xs\">Category</label>\n              <select\n                defaultValue={selectedAsset?.category}\n                className=\"w-full  px-md py-sm border border-border rounded-md focus:outline-none focus:ring-2 focus:ring-primary bg-background\"\n              >\n                {ASSET_CATEGORIES.map(category => (\n                  <option key={category.id} value={category.id}>\n                    {category.name}\n                  </option>\n                ))}\n              </select>\n            </div>\n            <div>\n              <label className=\"block text-body-sm form-label mb-xs\">Type</label>\n              <select\n                defaultValue={selectedAsset?.type}\n                className=\"w-full  px-md py-sm border border-border rounded-md focus:outline-none focus:ring-2 focus:ring-primary bg-background\"\n              >\n                <option value=\"fixed\">Fixed</option>\n                <option value=\"rentable\">Rentable</option>\n                <option value=\"service\">Service</option>\n              </select>\n            </div>\n          </div>\n          <div className=\"grid grid-cols-2 gap-md\">\n            <div>\n              <label className=\"block text-body-sm form-label mb-xs\">SKU</label>\n              <UnifiedInput                 placeholder=\"Enter SKU\"\n                defaultValue={selectedAsset?.sku}\n              />\n            </div>\n            <div>\n              <label className=\"block text-body-sm form-label mb-xs\">Location</label>\n              <UnifiedInput                 placeholder=\"Enter location\"\n                defaultValue={selectedAsset?.location}\n              />\n            </div>\n          </div>\n          <div className=\"flex gap-sm pt-md\">\n            <Button className=\"flex-1\">\n              {selectedAsset ? 'Update Asset' : 'Create Asset'}\n            </Button>\n            <Button variant=\"outline\" onClick={() => setShowDrawer(false)}>\n              Cancel\n            </Button>\n          </div>\n        </div>\n      </Drawer>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ghxstship/apps/web/app/(app)/(shell)/assets/inventory/InventoryClient_ATLVS.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'assetsService'. Either include it or remove the dependency array.","line":238,"column":6,"nodeType":"ArrayExpression","endLine":238,"endColumn":35,"suggestions":[{"desc":"Update the dependencies array to be: [assetsService, orgId, filters, searchQuery]","fix":{"range":[6848,6877],"text":"[assetsService, orgId, filters, searchQuery]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'assetsService'. Either include it or remove the dependency array.","line":300,"column":5,"nodeType":"ArrayExpression","endLine":300,"endColumn":66,"suggestions":[{"desc":"Update the dependencies array to be: [drawerMode, selectedRecord, fetchAssets, closeDrawer, assetsService, orgId]","fix":{"range":[8783,8844],"text":"[drawerMode, selectedRecord, fetchAssets, closeDrawer, assetsService, orgId]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'assetsService'. Either include it or remove the dependency array.","line":370,"column":5,"nodeType":"ArrayExpression","endLine":370,"endColumn":25,"suggestions":[{"desc":"Update the dependencies array to be: [assetsService, fetchAssets, orgId]","fix":{"range":[11012,11032],"text":"[assetsService, fetchAssets, orgId]"}}]},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Eye' is not defined.","line":399,"column":16,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":399,"endColumn":19},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Download' is not defined.","line":434,"column":16,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":434,"endColumn":24},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":549,"column":75,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[16427,16481],"text":"Manage your organization&apos;s physical and digital assets"},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[16427,16481],"text":"Manage your organization&lsquo;s physical and digital assets"},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[16427,16481],"text":"Manage your organization&#39;s physical and digital assets"},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[16427,16481],"text":"Manage your organization&rsquo;s physical and digital assets"},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Download' is not defined.","line":553,"column":14,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":553,"endColumn":22},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Download' is not defined.","line":557,"column":14,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":557,"endColumn":22},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Package' is not defined.","line":577,"column":18,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":577,"endColumn":25},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'CheckCircle' is not defined.","line":589,"column":18,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":589,"endColumn":29},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'AlertTriangle' is not defined.","line":613,"column":18,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":613,"endColumn":31}],"suppressedMessages":[],"errorCount":8,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\nimport { User, FileText, Settings, Award, Calendar, TrendingUp, Activity, Clock, Plus, Search, Play, Trash2 } from \"lucide-react\";\nimport React, { useCallback, useEffect, useMemo, useState } from 'react';\nimport { useTranslations } from 'next-intl';\nimport { createBrowserClient } from '@ghxstship/auth';\nimport {\n  DataActions,\n  DataGrid,\n  DataViewProvider,\n  DashboardView,\n  KanbanBoard,\n  ListView,\n  CalendarView,\n  TimelineView,\n  UniversalDrawer,\n  ViewSwitcher\n} from '@ghxstship/ui/components/DataViews';\nimport { Card, Badge, Button } from '@ghxstship/ui';\nimport type {\n  ActionConfig,\n  DataRecord,\n  DataViewConfig,\n  ExportConfig,\n  FieldConfig,\n  FilterConfig,\n  ImportConfig,\n  SortConfig\n} from '@ghxstship/ui/components/DataViews/types';\nimport type { FieldConfig as DrawerFieldConfig } from '@ghxstship/ui/components/DataViews/UniversalDrawer';\nimport { AssetsService } from '../lib/service';\nimport type { Asset, AssetFormData, AssetFilters } from '../types';\n\ninterface InventoryClientProps {\n  orgId: string;\n}\n\ntype InventoryRecord = Asset & DataRecord;\n\nconst DEFAULT_FILTERS: AssetFilters = {};\n\nfunction formatCurrency(value?: number | null) {\n  if (value == null) return '$0.00';\n  return new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(value);\n}\n\nfunction downloadFile(filename: string, contents: string, mime: string) {\n  const blob = new Blob([contents], { type: mime });\n  const url = URL.createObjectURL(blob);\n  const link = document.createElement('a');\n  link.href = url;\n  link.download = filename;\n  document.body.appendChild(link);\n  link.click();\n  document.body.removeChild(link);\n  URL.revokeObjectURL(url);\n}\n\nexport default function InventoryClient({ orgId }: InventoryClientProps) {\n  const t = useTranslations('assets.inventory');\n  const realtimeClient = useMemo(() => createBrowserClient(), []);\n  const assetsService = useMemo(() => new AssetsService(), []);\n\n  const [records, setRecords] = useState<InventoryRecord[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [drawerOpen, setDrawerOpen] = useState(false);\n  const [drawerMode, setDrawerMode] = useState<'create' | 'edit' | 'view'>('view');\n  const [selectedRecord, setSelectedRecord] = useState<InventoryRecord | null>(null);\n  const [filters, setFilters] = useState<AssetFilters>(DEFAULT_FILTERS);\n  const [searchQuery, setSearchQuery] = useState('');\n  const [sorts, setSorts] = useState<SortConfig[] | null>(null);\n  const [busyAction, setBusyAction] = useState(false);\n\n  const fieldConfig: FieldConfig[] = useMemo(() => [\n    {\n      key: 'name',\n      label: 'Asset Name',\n      type: 'text',\n      required: true,\n      sortable: true,\n      searchable: true\n    },\n    {\n      key: 'category',\n      label: 'Category',\n      type: 'select',\n      options: [\n        { value: 'site_infrastructure', label: 'Site Infrastructure' },\n        { value: 'site_assets', label: 'Site Assets' },\n        { value: 'site_vehicles', label: 'Site Vehicles' },\n        { value: 'site_services', label: 'Site Services' },\n        { value: 'heavy_machinery', label: 'Heavy Machinery & Equipment' },\n        { value: 'it_communication', label: 'IT & Communication Services' },\n        { value: 'office_admin', label: 'Office & Admin' },\n        { value: 'access_credentials', label: 'Access & Credentials' },\n        { value: 'parking', label: 'Parking' },\n        { value: 'travel_lodging', label: 'Travel & Lodging' },\n        { value: 'artist_technical', label: 'Artist Technical' },\n        { value: 'artist_hospitality', label: 'Artist Hospitality' },\n        { value: 'artist_travel', label: 'Artist Travel & Lodging' }\n      ],\n      required: true,\n      filterable: true,\n      sortable: true\n    },\n    {\n      key: 'type',\n      label: 'Type',\n      type: 'select',\n      options: [\n        { value: 'fixed', label: 'Fixed Asset' },\n        { value: 'rentable', label: 'Rentable' },\n        { value: 'service', label: 'Service' }\n      ],\n      required: true,\n      filterable: true,\n      sortable: true\n    },\n    {\n      key: 'status',\n      label: 'Status',\n      type: 'select',\n      options: [\n        { value: 'available', label: 'Available' },\n        { value: 'in_use', label: 'In Use' },\n        { value: 'under_maintenance', label: 'Under Maintenance' },\n        { value: 'damaged', label: 'Damaged' },\n        { value: 'missing', label: 'Missing' },\n        { value: 'retired', label: 'Retired' }\n      ],\n      required: true,\n      filterable: true,\n      sortable: true,\n      render: (value: string) => {\n        const variants = {\n          available: 'success',\n          in_use: 'warning',\n          under_maintenance: 'secondary',\n          damaged: 'destructive',\n          missing: 'destructive',\n          retired: 'outline'\n        };\n        return <Badge variant={variants[value as keyof typeof variants] as unknown}>{value.replace('_', ' ')}</Badge>;\n      }\n    },\n    {\n      key: 'sku',\n      label: 'SKU',\n      type: 'text',\n      searchable: true\n    },\n    {\n      key: 'barcode',\n      label: 'Barcode',\n      type: 'text',\n      searchable: true\n    },\n    {\n      key: 'manufacturer',\n      label: 'Manufacturer',\n      type: 'text',\n      searchable: true\n    },\n    {\n      key: 'model',\n      label: 'Model',\n      type: 'text',\n      searchable: true\n    },\n    {\n      key: 'serial_number',\n      label: 'Serial Number',\n      type: 'text',\n      searchable: true\n    },\n    {\n      key: 'purchase_date',\n      label: 'Purchase Date',\n      type: 'date',\n      sortable: true\n    },\n    {\n      key: 'purchase_cost',\n      label: 'Purchase Cost',\n      type: 'currency',\n      sortable: true\n    },\n    {\n      key: 'current_value',\n      label: 'Current Value',\n      type: 'currency',\n      sortable: true,\n      format: formatCurrency\n    },\n    {\n      key: 'location',\n      label: 'Location',\n      type: 'text',\n      searchable: true\n    },\n    {\n      key: 'description',\n      label: 'Description',\n      type: 'textarea',\n      searchable: true\n    },\n    {\n      key: 'notes',\n      label: 'Notes',\n      type: 'textarea'\n    },\n    {\n      key: 'created_at',\n      label: 'Created',\n      type: 'date',\n      sortable: true\n    },\n    {\n      key: 'updated_at',\n      label: 'Updated',\n      type: 'date',\n      sortable: true\n    }\n  ], []);\n\n  const fetchAssets = useCallback(async () => {\n    setLoading(true);\n    setError(null);\n    try {\n      const list = await assetsService.getAssets(orgId, { ...filters, search: searchQuery });\n      setRecords(list as InventoryRecord[]);\n    } catch (err) {\n      console.error('Failed to load assets', err);\n      setError('Unable to load assets. Please try again.');\n    } finally {\n      setLoading(false);\n    }\n  }, [orgId, filters, searchQuery]);\n\n  useEffect(() => {\n    fetchAssets();\n  }, [fetchAssets]);\n\n  useEffect(() => {\n    const channel = realtimeClient\n      .channel(`public:assets:${orgId}`)\n      .on(\n        'postgres_changes',\n        { event: '*', schema: 'public', table: 'assets', filter: `organization_id=eq.${orgId}` },\n        fetchAssets\n      )\n      .subscribe();\n\n    return () => {\n      channel.unsubscribe();\n    };\n  }, [realtimeClient, orgId, fetchAssets]);\n\n  // Statistics calculation\n  const stats = useMemo(() => {\n    const total = records.length;\n    const available = records.filter((item) => item.status === 'available').length;\n    const inUse = records.filter((item) => item.status === 'in_use').length;\n    const maintenance = records.filter((item) => item.status === 'under_maintenance').length;\n    const totalValue = records.reduce((sum, item) => sum + (item.current_value || 0), 0);\n\n    return { total, available, inUse, maintenance, totalValue };\n  }, [records]);\n\n  const openDrawer = useCallback((mode: 'create' | 'view' | 'edit', record?: InventoryRecord) => {\n    setDrawerMode(mode);\n    setSelectedRecord(record ?? null);\n    setDrawerOpen(true);\n  }, []);\n\n  const closeDrawer = useCallback(() => {\n    setDrawerOpen(false);\n    setSelectedRecord(null);\n  }, []);\n\n  const handlePersist = useCallback(\n    async (formData: AssetFormData) => {\n      setBusyAction(true);\n      setError(null);\n      try {\n        if (drawerMode === 'create') {\n          await assetsService.createAsset(formData, orgId);\n        } else if (drawerMode === 'edit' && selectedRecord) {\n          await assetsService.updateAsset(selectedRecord.id, formData);\n        }\n        await fetchAssets();\n        closeDrawer();\n      } catch (err) {\n        console.error('Failed to persist asset', err);\n        setError('Unable to save asset changes.');\n      } finally {\n        setBusyAction(false);\n      }\n    },\n    [drawerMode, selectedRecord, orgId, fetchAssets, closeDrawer]\n  );\n\n  const handleDelete = useCallback(\n    async (ids: string[]) => {\n      if (!ids.length) return;\n      setBusyAction(true);\n      setError(null);\n      try {\n        await Promise.all(ids.map((id) => assetsService.deleteAsset(id)));\n        await fetchAssets();\n      } catch (err) {\n        console.error('Failed to delete assets', err);\n        setError('Unable to delete one or more assets.');\n      } finally {\n        setBusyAction(false);\n      }\n    },\n    [assetsService, fetchAssets]\n  );\n\n  const handleExport = useCallback(\n    (data: DataRecord[], format: string) => {\n      if (!data.length) {\n        return;\n      }\n\n      const fields = fieldConfig.map((field) => field.key);\n      const headers = fieldConfig.map((field) => field.label);\n\n      if (format === 'csv') {\n        const rows = [headers.join(',')];\n        data.forEach((record) => {\n          const row = fields.map((key) => {\n            const value = (record as InventoryRecord)[key as keyof InventoryRecord];\n            if (value == null) return '';\n            if (Array.isArray(value)) return `\"${value.join(';')}\"`;\n            if (typeof value === 'string') return `\"${value.replace(/\"/g, '\"\"')}\"`;\n            return value;\n          });\n          rows.push(row.join(','));\n        });\n        downloadFile('assets-export.csv', rows.join('\\n'), 'text/csv');\n        return;\n      }\n\n      const payload = JSON.stringify(data, null, 2);\n      downloadFile('assets-export.json', payload, 'application/json');\n    },\n    [fieldConfig]\n  );\n\n  const handleImport = useCallback(\n    async (records: DataRecord[]) => {\n      if (!records.length) return;\n      setBusyAction(true);\n      setError(null);\n      try {\n        for (const record of records) {\n          const { id, organization_id, created_at, updated_at, ...payload } = record as InventoryRecord;\n          await assetsService.createAsset(payload as AssetFormData, orgId);\n        }\n        await fetchAssets();\n      } catch (err) {\n        console.error('Failed to import assets', err);\n        setError('Unable to import one or more assets.');\n      } finally {\n        setBusyAction(false);\n      }\n    },\n    [fetchAssets, orgId]\n  );\n\n  const filteredRecords = useMemo(() => {\n    if (!sorts || sorts.length === 0) return records;\n    const [{ field, direction }] = sorts;\n    return [...records].sort((a, b) => {\n      const aValue = (a as unknown)[field];\n      const bValue = (b as unknown)[field];\n      if (aValue === bValue) return 0;\n      if (aValue == null) return direction === 'asc' ? -1 : 1;\n      if (bValue == null) return direction === 'asc' ? 1 : -1;\n      if (aValue > bValue) return direction === 'asc' ? 1 : -1;\n      return direction === 'asc' ? -1 : 1;\n    });\n  }, [records, sorts]);\n\n  const actions: ActionConfig[] = useMemo(\n    () => [\n      {\n        key: 'create',\n        label: 'Create Asset',\n        icon: <Plus className=\"w-4 h-4\" />,\n        variant: 'primary',\n        onClick: () => openDrawer('create')\n      },\n      {\n        key: 'view',\n        label: 'View Asset',\n        icon: <Eye className=\"w-4 h-4\" />,\n        requiresSelection: true,\n        onClick: (ids) => {\n          const record = records.find((item) => item.id === ids[0]);\n          if (record) openDrawer('view', record);\n        }\n      },\n      {\n        key: 'edit',\n        label: 'Edit Asset',\n        icon: <TrendingUp className=\"w-4 h-4\" />,\n        requiresSelection: true,\n        onClick: (ids) => {\n          const record = records.find((item) => item.id === ids[0]);\n          if (record) openDrawer('edit', record);\n        }\n      },\n      {\n        key: 'delete',\n        label: 'Delete',\n        icon: <Trash2 className=\"w-4 h-4\" />,\n        variant: 'destructive',\n        requiresSelection: true,\n        confirmMessage: 'Delete selected assets? This action cannot be undone.',\n        onClick: (ids) => handleDelete(ids)\n      }\n    ],\n    [openDrawer, handleDelete, records]\n  );\n\n  const bulkActions: ActionConfig[] = useMemo(\n    () => [\n      {\n        key: 'export',\n        label: 'Export Selected',\n        icon: <Download className=\"w-4 h-4\" />,\n        requiresSelection: true,\n        onClick: (ids) => {\n          const selected = records.filter((record) => ids.includes(record.id));\n          handleExport(selected, 'csv');\n        }\n      },\n      {\n        key: 'delete_bulk',\n        label: 'Delete Selected',\n        icon: <Trash2 className=\"w-4 h-4\" />,\n        variant: 'destructive',\n        requiresSelection: true,\n        confirmMessage: 'Delete all selected assets? This cannot be undone.',\n        onClick: (ids) => handleDelete(ids)\n      }\n    ],\n    [records, handleExport, handleDelete]\n  );\n\n  const exportConfig: ExportConfig = useMemo(\n    () => ({\n      formats: ['csv', 'json'],\n      includeFilters: true,\n      onExport: (format, data) => handleExport(data, format)\n    }),\n    [handleExport]\n  );\n\n  const importConfig: ImportConfig = useMemo(\n    () => ({\n      formats: ['csv', 'json'],\n      onImport: handleImport,\n      template: 'name,category,type,status,sku,barcode,manufacturer,model,serial_number,purchase_date,purchase_cost,current_value,location,description,notes'\n    }),\n    [handleImport]\n  );\n\n  // DataView configuration\n  const dataViewConfig: DataViewConfig = useMemo(() => ({\n    id: 'assets-inventory',\n    name: 'Asset Inventory',\n    description: 'Manage your organization\\'s asset inventory',\n    viewType: 'grid',\n    defaultView: 'grid',\n    fields: fieldConfig,\n    data: filteredRecords,\n    loading,\n    error: error ?? undefined,\n    onRefresh: fetchAssets,\n    onSearch: setSearchQuery,\n    onFilter: (nextFilters: FilterConfig[]) => {\n      const status = nextFilters.find((f) => f.field === 'status')?.value as string | undefined;\n      const category = nextFilters.find((f) => f.field === 'category')?.value as string | undefined;\n      setFilters((prev) => ({\n        ...prev,\n        status: status || undefined,\n        category: category || undefined\n      }));\n    },\n    onSort: setSorts,\n    actions,\n    bulkActions,\n    exportConfig,\n    importConfig,\n    allowExport: true,\n    allowImport: true,\n    onDelete: handleDelete,\n    onCreate: () => openDrawer('create'),\n    onEdit: (record: DataRecord) => openDrawer('edit', record as InventoryRecord),\n    onDuplicate: async (record: DataRecord) => {\n      const { id, organization_id, created_at, updated_at, ...payload } = record as InventoryRecord;\n      await assetsService.createAsset(payload as AssetFormData, orgId);\n      await fetchAssets();\n    }\n  }), [\n    filteredRecords,\n    fieldConfig,\n    loading,\n    error,\n    fetchAssets,\n    actions,\n    bulkActions,\n    exportConfig,\n    importConfig,\n    handleDelete,\n    openDrawer,\n    orgId,\n    assetsService\n  ]);\n\n  const drawerFields: DrawerFieldConfig[] = useMemo(\n    () =>\n      fieldConfig.map((field) => {\n        const { key, label, type, options, required } = field;\n        const drawerType: DrawerFieldConfig['type'] =\n          type === 'multiselect' || type === 'array' || type === 'object' ? 'text' : (type as DrawerFieldConfig['type']);\n\n        return {\n          key,\n          label,\n          type: drawerType,\n          options,\n          required,\n        } as DrawerFieldConfig;\n      }),\n    [fieldConfig]\n  );\n\n  return (\n    <div className=\"stack-lg\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-heading-3 font-anton uppercase\">Asset Inventory</h1>\n          <p className=\"text-body-sm color-muted\">Manage your organization's physical and digital assets</p>\n        </div>\n        <div className=\"flex items-center gap-sm\">\n          <Button variant=\"secondary\" className=\"flex items-center gap-sm\" onClick={() => handleExport(records, 'csv')}>\n            <Download className=\"w-4 h-4\" />\n            Export CSV\n          </Button>\n          <Button variant=\"outline\" className=\"flex items-center gap-sm\" onClick={() => handleExport(records, 'json')}>\n            <Download className=\"w-4 h-4\" />\n            Export JSON\n          </Button>\n          <Button variant=\"secondary\" className=\"flex items-center gap-sm\" onClick={() => openDrawer('create')}>\n            <Plus className=\"w-4 h-4\" />\n            {t('actions.add')}\n          </Button>\n        </div>\n      </div>\n\n      {/* Statistics Dashboard */}\n      <DashboardView>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-5 gap-md\">\n          <Card>\n            <div className=\"p-md\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-body-sm form-label color-muted\">Total Assets</p>\n                  <p className=\"text-heading-3\">{stats.total}</p>\n                </div>\n                <Package className=\"w-8 h-8 color-accent\" />\n              </div>\n            </div>\n          </Card>\n          \n          <Card>\n            <div className=\"p-md\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-body-sm form-label color-muted\">Available</p>\n                  <p className=\"text-heading-3\">{stats.available}</p>\n                </div>\n                <CheckCircle className=\"w-8 h-8 color-success\" />\n              </div>\n            </div>\n          </Card>\n          \n          <Card>\n            <div className=\"p-md\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-body-sm form-label color-muted\">In Use</p>\n                  <p className=\"text-heading-3\">{stats.inUse}</p>\n                </div>\n                <TrendingUp className=\"w-8 h-8 color-warning\" />\n              </div>\n            </div>\n          </Card>\n          \n          <Card>\n            <div className=\"p-md\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-body-sm form-label color-muted\">Maintenance</p>\n                  <p className=\"text-heading-3\">{stats.maintenance}</p>\n                </div>\n                <AlertTriangle className=\"w-8 h-8 color-destructive\" />\n              </div>\n            </div>\n          </Card>\n          \n          <Card>\n            <div className=\"p-md\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-body-sm form-label color-muted\">Total Value</p>\n                  <p className=\"text-heading-3\">${(stats.totalValue / 1000).toFixed(0)}K</p>\n                </div>\n                <TrendingUp className=\"w-8 h-8 color-success\" />\n              </div>\n            </div>\n          </Card>\n        </div>\n      </DashboardView>\n\n      {/* Data Views */}\n      <DataViewProvider config={dataViewConfig}>\n        <div className=\"stack-md\">\n          <DataActions showSearch showFilters showSort showExport showImport showBulkActions showViewOptions />\n          <ViewSwitcher />\n          <DataGrid />\n          <KanbanBoard \n            columns={[\n              { id: 'available', title: 'Available' },\n              { id: 'in_use', title: 'In Use' },\n              { id: 'under_maintenance', title: 'Under Maintenance' },\n              { id: 'damaged', title: 'Damaged' },\n              { id: 'retired', title: 'Retired' }\n            ]}\n            statusField=\"status\"\n            titleField=\"name\"\n          />\n          <CalendarView \n            startDateField=\"purchase_date\"\n            titleField=\"name\"\n          />\n          <ListView \n            titleField=\"name\"\n            subtitleField=\"category\"\n          />\n          <TimelineView \n            startDateField=\"purchase_date\"\n            titleField=\"name\"\n          />\n        </div>\n      </DataViewProvider>\n\n      {/* Universal Drawer */}\n      <UniversalDrawer\n        open={drawerOpen}\n        onClose={() => setDrawerOpen(false)}\n        fields={drawerFields}\n        mode={drawerMode}\n        title={\n          drawerMode === 'create' \n            ? 'Create Asset'\n            : drawerMode === 'edit'\n            ? 'Edit Asset'\n            : 'Asset Details'\n        }\n        record={selectedRecord as DataRecord | null}\n        onSave={async (data) => {\n          await handlePersist(data as AssetFormData);\n        }}\n        tabs={[\n          {\n            key: 'details',\n            label: 'Details',\n            content: null // Will be handled by UniversalDrawer\n          },\n          {\n            key: 'maintenance',\n            label: 'Maintenance',\n            content: (\n              <div className=\"p-md\">\n                <p className=\"text-body-sm color-muted\">Maintenance history and schedules will be displayed here.</p>\n              </div>\n            )\n          },\n          {\n            key: 'assignments',\n            label: 'Assignments',\n            content: (\n              <div className=\"p-md\">\n                <p className=\"text-body-sm color-muted\">Asset assignment history will be displayed here.</p>\n              </div>\n            )\n          }\n        ]}\n      />\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ghxstship/apps/web/app/(app)/(shell)/assets/lifecycle/LifecycleClient.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useMemo has a missing dependency: 'handleDelete'. Either include it or remove the dependency array.","line":530,"column":7,"nodeType":"ArrayExpression","endLine":530,"endColumn":45,"suggestions":[{"desc":"Update the dependencies array to be: [fieldConfig, data, loading, loadData, handleDelete]","fix":{"range":[14646,14684],"text":"[fieldConfig, data, loading, loadData, handleDelete]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { TrendingDown, RotateCcw, Archive, DollarSign, Calendar, Plus } from \"lucide-react\";\nimport React, { useState, useEffect, useCallback, useMemo } from 'react';\nimport { useTranslations } from 'next-intl';\nimport { createBrowserClient } from '@ghxstship/auth';\nimport { \n  DataViewProvider, \n  DataGrid, \n  KanbanBoard, \n  CalendarView, \n  ListView,\n  TimelineView,\n  DashboardView,\n  ViewSwitcher,\n  DataActions,\n  UniversalDrawer\n} from '@ghxstship/ui/components/DataViews';\nimport { Card, Badge, Button } from '@ghxstship/ui';\nimport type { \n  DataViewConfig, \n  FieldConfig, \n  DataRecord,\n  FilterConfig,\n  SortConfig \n} from '@ghxstship/ui/components/DataViews/types';\n\ninterface LifecycleClientProps {\n  orgId: string;\n}\n\ninterface AssetLifecycle extends DataRecord {\n  id: string;\n  asset_id: string;\n  asset_name: string;\n  lifecycle_stage: string;\n  acquisition_date: string;\n  acquisition_cost: number;\n  current_value: number;\n  depreciation_method: string;\n  depreciation_rate: number;\n  useful_life_years: number;\n  salvage_value: number;\n  accumulated_depreciation: number;\n  remaining_life_years: number;\n  utilization_rate: number;\n  maintenance_cost_total: number;\n  roi_percentage: number;\n  disposal_date?: string;\n  disposal_value?: number;\n  disposal_method?: string;\n  replacement_recommended: boolean;\n  replacement_date?: string;\n  replacement_cost?: number;\n  notes?: string;\n  created_at: string;\n  updated_at: string;\n}\n\nexport default function LifecycleClient({ orgId }: LifecycleClientProps) {\n  const t = useTranslations();\n  const supabase = createBrowserClient();\n  \n  const [data, setData] = useState<AssetLifecycle[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [selectedRecord, setSelectedRecord] = useState<AssetLifecycle | null>(null);\n  const [drawerOpen, setDrawerOpen] = useState(false);\n  const [drawerMode, setDrawerMode] = useState<'view' | 'edit' | 'create'>('view');\n\n  // Field configuration for lifecycle data\n  const fieldConfig: FieldConfig[] = useMemo(() => [\n    {\n      key: 'asset_name',\n      label: 'Asset Name',\n      type: 'text',\n      required: true,\n      sortable: true,\n      searchable: true\n    },\n    {\n      key: 'lifecycle_stage',\n      label: 'Lifecycle Stage',\n      type: 'select',\n      options: [\n        { value: 'acquisition', label: 'Acquisition' },\n        { value: 'deployment', label: 'Deployment' },\n        { value: 'operation', label: 'Operation' },\n        { value: 'maintenance', label: 'Maintenance' },\n        { value: 'optimization', label: 'Optimization' },\n        { value: 'decline', label: 'Decline' },\n        { value: 'disposal', label: 'Disposal' },\n        { value: 'retired', label: 'Retired' }\n      ],\n      required: true,\n      filterable: true,\n      sortable: true,\n      render: (value: string) => {\n        const variants = {\n          acquisition: 'secondary',\n          deployment: 'warning',\n          operation: 'success',\n          maintenance: 'warning',\n          optimization: 'success',\n          decline: 'destructive',\n          disposal: 'outline',\n          retired: 'outline'\n        };\n        return <Badge variant={variants[value as keyof typeof variants] as unknown}>{value}</Badge>;\n      }\n    },\n    {\n      key: 'acquisition_date',\n      label: 'Acquisition Date',\n      type: 'date',\n      required: true,\n      sortable: true\n    },\n    {\n      key: 'acquisition_cost',\n      label: 'Acquisition Cost',\n      type: 'currency',\n      required: true,\n      sortable: true\n    },\n    {\n      key: 'current_value',\n      label: 'Current Value',\n      type: 'currency',\n      sortable: true\n    },\n    {\n      key: 'depreciation_method',\n      label: 'Depreciation Method',\n      type: 'select',\n      options: [\n        { value: 'straight_line', label: 'Straight Line' },\n        { value: 'declining_balance', label: 'Declining Balance' },\n        { value: 'sum_of_years', label: 'Sum of Years Digits' },\n        { value: 'units_of_production', label: 'Units of Production' },\n        { value: 'custom', label: 'Custom' }\n      ],\n      filterable: true\n    },\n    {\n      key: 'depreciation_rate',\n      label: 'Depreciation Rate (%)',\n      type: 'number',\n      sortable: true\n    },\n    {\n      key: 'useful_life_years',\n      label: 'Useful Life (Years)',\n      type: 'number',\n      required: true,\n      sortable: true\n    },\n    {\n      key: 'remaining_life_years',\n      label: 'Remaining Life (Years)',\n      type: 'number',\n      sortable: true\n    },\n    {\n      key: 'salvage_value',\n      label: 'Salvage Value',\n      type: 'currency',\n      sortable: true\n    },\n    {\n      key: 'accumulated_depreciation',\n      label: 'Accumulated Depreciation',\n      type: 'currency',\n      sortable: true\n    },\n    {\n      key: 'utilization_rate',\n      label: 'Utilization Rate (%)',\n      type: 'number',\n      sortable: true\n    },\n    {\n      key: 'maintenance_cost_total',\n      label: 'Total Maintenance Cost',\n      type: 'currency',\n      sortable: true\n    },\n    {\n      key: 'roi_percentage',\n      label: 'ROI (%)',\n      type: 'number',\n      sortable: true\n    },\n    {\n      key: 'replacement_recommended',\n      label: 'Replacement Recommended',\n      type: 'boolean',\n      filterable: true,\n      render: (value: boolean) => {\n        return value ? <Badge variant=\"warning\">Yes</Badge> : <Badge variant=\"success\">No</Badge>;\n      }\n    },\n    {\n      key: 'replacement_date',\n      label: 'Recommended Replacement Date',\n      type: 'date',\n      sortable: true\n    },\n    {\n      key: 'replacement_cost',\n      label: 'Estimated Replacement Cost',\n      type: 'currency',\n      sortable: true\n    },\n    {\n      key: 'disposal_date',\n      label: 'Disposal Date',\n      type: 'date',\n      sortable: true\n    },\n    {\n      key: 'disposal_value',\n      label: 'Disposal Value',\n      type: 'currency',\n      sortable: true\n    },\n    {\n      key: 'disposal_method',\n      label: 'Disposal Method',\n      type: 'select',\n      options: [\n        { value: 'sale', label: 'Sale' },\n        { value: 'trade_in', label: 'Trade-in' },\n        { value: 'donation', label: 'Donation' },\n        { value: 'recycling', label: 'Recycling' },\n        { value: 'scrap', label: 'Scrap' },\n        { value: 'destruction', label: 'Destruction' }\n      ],\n      filterable: true\n    },\n    {\n      key: 'notes',\n      label: 'Notes',\n      type: 'textarea'\n    },\n    {\n      key: 'created_at',\n      label: 'Created',\n      type: 'date',\n      sortable: true\n    },\n    {\n      key: 'updated_at',\n      label: 'Updated',\n      type: 'date',\n      sortable: true\n    }\n  ], []);\n\n  // Load lifecycle data\n  const loadData = useCallback(async () => {\n    setLoading(true);\n    try {\n      const { data: lifecycleData, error } = await supabase\n        .from('asset_lifecycle')\n        .select(`\n          *,\n          assets!inner(name)\n        `)\n        .eq('organization_id', orgId)\n        .order('acquisition_date', { ascending: false });\n\n      if (error) {\n        console.error('Error loading lifecycle data:', error);\n        // Use demo data as fallback\n        setData(generateDemoData());\n      } else {\n        const formattedData = (lifecycleData || []).map(item => ({\n          ...item,\n          asset_name: item.assets?.name || 'Unknown Asset'\n        }));\n        setData(formattedData);\n      }\n    } catch (error) {\n      console.error('Error loading lifecycle data:', error);\n      setData(generateDemoData());\n    } finally {\n      setLoading(false);\n    }\n  }, [supabase, orgId]);\n\n  // Generate demo data\n  const generateDemoData = (): AssetLifecycle[] => [\n    {\n      id: 'demo-1',\n      asset_id: 'asset-1',\n      asset_name: 'Main Stage Rigging System',\n      lifecycle_stage: 'operation',\n      acquisition_date: '2020-01-15',\n      acquisition_cost: 45000,\n      current_value: 32000,\n      depreciation_method: 'straight_line',\n      depreciation_rate: 10,\n      useful_life_years: 10,\n      remaining_life_years: 6,\n      salvage_value: 5000,\n      accumulated_depreciation: 13000,\n      utilization_rate: 85,\n      maintenance_cost_total: 3500,\n      roi_percentage: 125,\n      replacement_recommended: false,\n      replacement_date: '2030-01-15',\n      replacement_cost: 55000,\n      notes: 'Excellent condition. Regular maintenance performed.',\n      created_at: '2024-01-01T10:00:00Z',\n      updated_at: '2024-02-28T14:30:00Z'\n    },\n    {\n      id: 'demo-2',\n      asset_id: 'asset-2',\n      asset_name: 'Professional Sound System',\n      lifecycle_stage: 'optimization',\n      acquisition_date: '2019-06-01',\n      acquisition_cost: 25000,\n      current_value: 15000,\n      depreciation_method: 'declining_balance',\n      depreciation_rate: 15,\n      useful_life_years: 8,\n      remaining_life_years: 3,\n      salvage_value: 2000,\n      accumulated_depreciation: 10000,\n      utilization_rate: 92,\n      maintenance_cost_total: 2800,\n      roi_percentage: 180,\n      replacement_recommended: false,\n      replacement_date: '2027-06-01',\n      replacement_cost: 30000,\n      notes: 'High utilization. Consider upgrade in 2 years.',\n      created_at: '2024-01-02T14:30:00Z',\n      updated_at: '2024-02-15T16:00:00Z'\n    },\n    {\n      id: 'demo-3',\n      asset_id: 'asset-3',\n      asset_name: 'LED Video Wall Panels',\n      lifecycle_stage: 'decline',\n      acquisition_date: '2018-03-20',\n      acquisition_cost: 35000,\n      current_value: 12000,\n      depreciation_method: 'straight_line',\n      depreciation_rate: 12.5,\n      useful_life_years: 8,\n      remaining_life_years: 2,\n      salvage_value: 3000,\n      accumulated_depreciation: 23000,\n      utilization_rate: 65,\n      maintenance_cost_total: 8500,\n      roi_percentage: 95,\n      replacement_recommended: true,\n      replacement_date: '2025-03-20',\n      replacement_cost: 42000,\n      notes: 'Showing signs of age. Replacement recommended within 12 months.',\n      created_at: '2024-01-03T09:15:00Z',\n      updated_at: '2024-02-20T11:30:00Z'\n    },\n    {\n      id: 'demo-4',\n      asset_id: 'asset-4',\n      asset_name: 'Generator - 500kW',\n      lifecycle_stage: 'maintenance',\n      acquisition_date: '2021-08-10',\n      acquisition_cost: 75000,\n      current_value: 58000,\n      depreciation_method: 'straight_line',\n      depreciation_rate: 8,\n      useful_life_years: 15,\n      remaining_life_years: 12,\n      salvage_value: 10000,\n      accumulated_depreciation: 17000,\n      utilization_rate: 78,\n      maintenance_cost_total: 4200,\n      roi_percentage: 110,\n      replacement_recommended: false,\n      replacement_date: '2036-08-10',\n      replacement_cost: 85000,\n      notes: 'Regular maintenance schedule. Good performance.',\n      created_at: '2024-01-05T11:20:00Z',\n      updated_at: '2024-02-25T13:45:00Z'\n    }\n  ];\n\n  // Statistics calculation\n  const stats = useMemo(() => {\n    const totalAssets = data.length;\n    const totalAcquisitionCost = data.reduce((sum, item) => sum + item.acquisition_cost, 0);\n    const totalCurrentValue = data.reduce((sum, item) => sum + item.current_value, 0);\n    const totalDepreciation = data.reduce((sum, item) => sum + item.accumulated_depreciation, 0);\n    const avgUtilization = data.length > 0 ? data.reduce((sum, item) => sum + item.utilization_rate, 0) / data.length : 0;\n    const replacementRecommended = data.filter(item => item.replacement_recommended).length;\n\n    return { \n      totalAssets, \n      totalAcquisitionCost, \n      totalCurrentValue, \n      totalDepreciation, \n      avgUtilization, \n      replacementRecommended \n    };\n  }, [data]);\n\n  // Event handlers\n  const handleCreate = () => {\n    setSelectedRecord(null);\n    setDrawerMode('create');\n    setDrawerOpen(true);\n  };\n\n  const handleEdit = (record: AssetLifecycle) => {\n    setSelectedRecord(record);\n    setDrawerMode('edit');\n    setDrawerOpen(true);\n  };\n\n  const handleView = (record: AssetLifecycle) => {\n    setSelectedRecord(record);\n    setDrawerMode('view');\n    setDrawerOpen(true);\n  };\n\n  const handleSave = async (formData: unknown) => {\n    try {\n      if (drawerMode === 'create') {\n        const { error } = await supabase\n          .from('asset_lifecycle')\n          .insert([{ ...formData, organization_id: orgId }]);\n        \n        if (error) throw error;\n      } else if (drawerMode === 'edit' && selectedRecord) {\n        const { error } = await supabase\n          .from('asset_lifecycle')\n          .update(formData)\n          .eq('id', selectedRecord.id);\n        \n        if (error) throw error;\n      }\n      \n      await loadData();\n      setDrawerOpen(false);\n    } catch (error) {\n      console.error('Error saving lifecycle record:', error);\n    }\n  };\n\n  const handleDelete = async (record: AssetLifecycle) => {\n    try {\n      const { error } = await supabase\n        .from('asset_lifecycle')\n        .delete()\n        .eq('id', record.id);\n      \n      if (error) throw error;\n      await loadData();\n    } catch (error) {\n      console.error('Error deleting lifecycle record:', error);\n    }\n  };\n\n  // DataView configuration\n  const dataViewConfig: DataViewConfig = useMemo(() => ({\n    id: 'asset-lifecycle',\n    name: 'Asset Lifecycle',\n    description: 'Manage asset lifecycle, depreciation, and optimization',\n    viewType: 'grid',\n    defaultView: 'grid',\n    fields: fieldConfig,\n    data: data,\n    loading: loading,\n    onRefresh: loadData,\n    onSearch: (query: string) => {\n      // Implement search logic\n      console.log('Search:', query);\n    },\n    onFilter: (filters: FilterConfig[]) => {\n      // Implement filter logic\n      console.log('Filter:', filters);\n    },\n    onSort: (sorts: SortConfig[]) => {\n      // Implement sort logic\n      console.log('Sort:', sorts);\n    },\n    onExport: (data: DataRecord[], format: string) => {\n      console.log('Export:', data, format);\n    },\n    onImport: (data: unknown[]) => {\n      console.log('Import:', data);\n    },\n    actions: [\n      {\n        key: 'create',\n        id: 'create',\n        label: 'Create',\n        icon: 'Plus',\n        variant: 'primary' as const,\n        onClick: handleCreate\n      },\n      {\n        key: 'edit',\n        id: 'edit',\n        label: 'Edit',\n        icon: 'Edit',\n        variant: 'secondary' as const,\n        onClick: handleEdit\n      },\n      {\n        key: 'view',\n        id: 'view',\n        label: 'View',\n        icon: 'Eye',\n        variant: 'outline' as const,\n        onClick: handleView\n      },\n      {\n        key: 'delete',\n        id: 'delete',\n        label: 'Delete',\n        icon: 'Trash',\n        variant: 'destructive' as const,\n        onClick: handleDelete\n      }\n    ]\n  }), [fieldConfig, data, loading, loadData]);\n\n  useEffect(() => {\n    loadData();\n  }, [loadData]);\n\n  return (\n    <div className=\"stack-lg\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-heading-3 font-anton uppercase\">Asset Lifecycle</h1>\n          <p className=\"text-body-sm color-muted\">Track asset lifecycle, depreciation, and optimization opportunities</p>\n        </div>\n        <Button onClick={handleCreate} className=\"flex items-center gap-sm\">\n          <Plus className=\"w-4 h-4\" />\n          Add Lifecycle Record\n        </Button>\n      </div>\n\n      {/* Statistics Dashboard */}\n      <DashboardView>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-6 gap-md\">\n          <Card>\n            <div className=\"p-md\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-body-sm form-label color-muted\">Total Assets</p>\n                  <p className=\"text-heading-3\">{stats.totalAssets}</p>\n                </div>\n                <Archive className=\"w-8 h-8 color-accent\" />\n              </div>\n            </div>\n          </Card>\n          \n          <Card>\n            <div className=\"p-md\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-body-sm form-label color-muted\">Acquisition Cost</p>\n                  <p className=\"text-heading-3\">${(stats.totalAcquisitionCost / 1000).toFixed(0)}K</p>\n                </div>\n                <DollarSign className=\"w-8 h-8 color-success\" />\n              </div>\n            </div>\n          </Card>\n          \n          <Card>\n            <div className=\"p-md\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-body-sm form-label color-muted\">Current Value</p>\n                  <p className=\"text-heading-3\">${(stats.totalCurrentValue / 1000).toFixed(0)}K</p>\n                </div>\n                <TrendingDown className=\"w-8 h-8 color-secondary\" />\n              </div>\n            </div>\n          </Card>\n          \n          <Card>\n            <div className=\"p-md\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-body-sm form-label color-muted\">Depreciation</p>\n                  <p className=\"text-heading-3\">${(stats.totalDepreciation / 1000).toFixed(0)}K</p>\n                </div>\n                <TrendingDown className=\"w-8 h-8 color-destructive\" />\n              </div>\n            </div>\n          </Card>\n          \n          <Card>\n            <div className=\"p-md\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-body-sm form-label color-muted\">Avg Utilization</p>\n                  <p className=\"text-heading-3\">{stats.avgUtilization.toFixed(0)}%</p>\n                </div>\n                <Calendar className=\"w-8 h-8 color-warning\" />\n              </div>\n            </div>\n          </Card>\n          \n          <Card>\n            <div className=\"p-md\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-body-sm form-label color-muted\">Need Replacement</p>\n                  <p className=\"text-heading-3\">{stats.replacementRecommended}</p>\n                </div>\n                <RotateCcw className=\"w-8 h-8 color-warning\" />\n              </div>\n            </div>\n          </Card>\n        </div>\n      </DashboardView>\n\n      {/* Data Views */}\n      <DataViewProvider config={dataViewConfig}>\n        <div className=\"stack-md\">\n          <DataActions />\n          <ViewSwitcher />\n          <DataGrid />\n          <KanbanBoard \n            columns={[\n              { id: 'acquisition', title: 'Acquisition' },\n              { id: 'deployment', title: 'Deployment' },\n              { id: 'operation', title: 'Operation' },\n              { id: 'maintenance', title: 'Maintenance' },\n              { id: 'optimization', title: 'Optimization' },\n              { id: 'decline', title: 'Decline' },\n              { id: 'disposal', title: 'Disposal' }\n            ]}\n            statusField=\"lifecycle_stage\"\n            titleField=\"asset_name\"\n          />\n          <CalendarView \n            startDateField=\"acquisition_date\"\n            titleField=\"asset_name\"\n          />\n          <ListView \n            titleField=\"asset_name\"\n            subtitleField=\"lifecycle_stage\"\n          />\n          <TimelineView \n            dateField=\"acquisition_date\"\n            titleField=\"asset_name\"\n          />\n        </div>\n      </DataViewProvider>\n\n      {/* Universal Drawer */}\n      <UniversalDrawer\n        open={drawerOpen}\n        onClose={() => setDrawerOpen(false)}\n        record={selectedRecord}\n        fields={fieldConfig}\n        mode={drawerMode}\n        title={\n          drawerMode === 'create' \n            ? 'Create Lifecycle Record'\n            : drawerMode === 'edit'\n            ? 'Edit Lifecycle Record'\n            : 'Lifecycle Details'\n        }\n        onSave={handleSave}\n        tabs={[\n          {\n            key: 'details',\n            label: 'Details',\n            content: null // Will be handled by UniversalDrawer\n          },\n          {\n            key: 'depreciation',\n            label: 'Depreciation',\n            content: (\n              <div className=\"p-md\">\n                <p className=\"text-body-sm color-muted\">Depreciation calculations and projections will be displayed here.</p>\n              </div>\n            )\n          },\n          {\n            key: 'optimization',\n            label: 'Optimization',\n            content: (\n              <div className=\"p-md\">\n                <p className=\"text-body-sm color-muted\">Optimization recommendations and ROI analysis will be displayed here.</p>\n              </div>\n            )\n          }\n        ]}\n      />\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ghxstship/apps/web/app/(app)/(shell)/assets/maintenance/MaintenanceClient.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadRecords'. Either include it or remove the dependency array.","line":55,"column":6,"nodeType":"ArrayExpression","endLine":55,"endColumn":13,"suggestions":[{"desc":"Update the dependencies array to be: [loadRecords, orgId]","fix":{"range":[2005,2012],"text":"[loadRecords, orgId]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'filterRecords'. Either include it or remove the dependency array.","line":59,"column":6,"nodeType":"ArrayExpression","endLine":59,"endColumn":76,"suggestions":[{"desc":"Update the dependencies array to be: [records, searchQuery, selectedType, selectedStatus, selectedPriority, filterRecords]","fix":{"range":[2062,2132],"text":"[records, searchQuery, selectedType, selectedStatus, selectedPriority, filterRecords]"}}]},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Download' is not defined.","line":346,"column":14,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":346,"endColumn":22},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Wrench' is not defined.","line":428,"column":22,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":428,"endColumn":28},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Edit' is not defined.","line":455,"column":26,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":455,"endColumn":30}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { User, FileText, Settings, Award, Calendar, TrendingUp, Activity, Clock, Plus, Search, Play, Trash2 } from \"lucide-react\";\nimport { useState, useEffect } from 'react';\nimport { Card, Button, UnifiedInput, Badge, Drawer } from '@ghxstship/ui';\nimport { createBrowserClient } from '@ghxstship/auth';\nimport { useTranslations } from 'next-intl';\n\ninterface MaintenanceRecord {\n  id: string;\n  organizationId: string;\n  assetId: string;\n  assetName: string;\n  type: 'preventive' | 'corrective' | 'emergency' | 'inspection';\n  status: 'scheduled' | 'in_progress' | 'completed' | 'cancelled' | 'overdue';\n  priority: 'low' | 'medium' | 'high' | 'critical';\n  title: string;\n  description?: string;\n  scheduledDate: string;\n  completedDate?: string;\n  estimatedDuration?: number;\n  actualDuration?: number;\n  assignedTo?: string;\n  performedBy?: string;\n  vendor?: string;\n  cost?: number;\n  partsUsed?: string[];\n  nextMaintenanceDate?: string;\n  notes?: string;\n  attachments?: string[];\n  createdAt?: string;\n  updatedAt?: string;\n}\n\ninterface MaintenanceClientProps {\n  orgId: string;\n}\n\nexport default function MaintenanceClient({ orgId }: MaintenanceClientProps) {\n  const t = useTranslations('assets.maintenance');\n  const supabase = createBrowserClient();\n  const [records, setRecords] = useState<MaintenanceRecord[]>([]);\n  const [filteredRecords, setFilteredRecords] = useState<MaintenanceRecord[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [searchQuery, setSearchQuery] = useState('');\n  const [selectedType, setSelectedType] = useState<string>('all');\n  const [selectedStatus, setSelectedStatus] = useState<string>('all');\n  const [selectedPriority, setSelectedPriority] = useState<string>('all');\n  const [showDrawer, setShowDrawer] = useState(false);\n  const [selectedRecord, setSelectedRecord] = useState<MaintenanceRecord | null>(null);\n  const [view, setView] = useState<'grid' | 'list' | 'kanban'>('list');\n\n  useEffect(() => {\n    loadRecords();\n  }, [orgId]);\n\n  useEffect(() => {\n    filterRecords();\n  }, [records, searchQuery, selectedType, selectedStatus, selectedPriority]);\n\n  const loadRecords = async () => {\n    setLoading(true);\n    try {\n      const { data, error } = await supabase\n        .from('asset_maintenance')\n        .select(`\n          *,\n          assets!inner(name)\n        `)\n        .eq('organization_id', orgId)\n        .order('scheduled_date', { ascending: true });\n\n      if (error) {\n        console.error('Error loading maintenance records:', error);\n        setRecords(generateDemoRecords());\n      } else {\n        const mappedData = (data || []).map(item => ({\n          ...item,\n          assetName: item.assets?.name || 'Unknown Asset'\n        }));\n        setRecords(mappedData);\n      }\n    } catch (error) {\n      console.error('Error loading maintenance records:', error);\n      setRecords(generateDemoRecords());\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const generateDemoRecords = (): MaintenanceRecord[] => [\n    {\n      id: '1',\n      organizationId: orgId,\n      assetId: 'asset-001',\n      assetName: 'Professional Sound System',\n      type: 'preventive',\n      status: 'scheduled',\n      priority: 'medium',\n      title: 'Quarterly Audio System Inspection',\n      description: 'Comprehensive check of all audio components, connections, and calibration',\n      scheduledDate: '2024-08-15T10:00:00Z',\n      estimatedDuration: 180,\n      assignedTo: 'Tech Specialist Sparks',\n      cost: 500,\n      partsUsed: [],\n      nextMaintenanceDate: '2024-11-15T10:00:00Z',\n      notes: 'Include microphone sensitivity testing and speaker alignment check',\n      createdAt: '2024-08-01T09:00:00Z'\n    },\n    {\n      id: '2',\n      organizationId: orgId,\n      assetId: 'asset-002',\n      assetName: 'LED Video Wall Panels',\n      type: 'corrective',\n      status: 'in_progress',\n      priority: 'high',\n      title: 'Pixel Replacement and Calibration',\n      description: 'Replace faulty LED pixels and recalibrate color accuracy',\n      scheduledDate: '2024-08-08T09:00:00Z',\n      estimatedDuration: 240,\n      assignedTo: 'Display Technician',\n      performedBy: 'Display Technician',\n      vendor: 'PixelPro Service',\n      cost: 1200,\n      partsUsed: ['LED Pixel Module x12', 'Control Board'],\n      notes: 'Customer reported color inconsistencies in lower right quadrant',\n      createdAt: '2024-08-07T14:30:00Z'\n    },\n    {\n      id: '3',\n      organizationId: orgId,\n      assetId: 'asset-003',\n      assetName: 'Crew Transport Van',\n      type: 'preventive',\n      status: 'completed',\n      priority: 'medium',\n      title: '5,000 Mile Service',\n      description: 'Oil change, tire rotation, brake inspection, and fluid checks',\n      scheduledDate: '2024-08-01T08:00:00Z',\n      completedDate: '2024-08-01T10:30:00Z',\n      estimatedDuration: 120,\n      actualDuration: 150,\n      assignedTo: 'Fleet Maintenance',\n      performedBy: 'Mechanic Wrench',\n      cost: 350,\n      partsUsed: ['Engine Oil', 'Oil Filter', 'Air Filter'],\n      nextMaintenanceDate: '2024-10-01T08:00:00Z',\n      notes: 'All systems checked and operational. Tire pressure adjusted',\n      createdAt: '2024-07-25T16:00:00Z'\n    },\n    {\n      id: '4',\n      organizationId: orgId,\n      assetId: 'asset-004',\n      assetName: 'Mobile Generator Unit',\n      type: 'inspection',\n      status: 'overdue',\n      priority: 'critical',\n      title: 'Monthly Safety Inspection',\n      description: 'Safety systems check, fuel quality test, and load testing',\n      scheduledDate: '2024-08-05T14:00:00Z',\n      estimatedDuration: 90,\n      assignedTo: 'Chief Engineer Sparks',\n      cost: 200,\n      notes: 'OVERDUE: Critical safety inspection required before next use',\n      createdAt: '2024-07-30T11:00:00Z'\n    },\n    {\n      id: '5',\n      organizationId: orgId,\n      assetId: 'asset-005',\n      assetName: 'Security Camera System',\n      type: 'emergency',\n      status: 'completed',\n      priority: 'critical',\n      title: 'Camera Network Connectivity Repair',\n      description: 'Emergency repair of network connectivity issues affecting multiple cameras',\n      scheduledDate: '2024-08-06T20:00:00Z',\n      completedDate: '2024-08-06T23:45:00Z',\n      estimatedDuration: 120,\n      actualDuration: 225,\n      assignedTo: 'IT Support Team',\n      performedBy: 'Network Specialist Cable',\n      vendor: 'SecureTech Emergency Service',\n      cost: 800,\n      partsUsed: ['Network Switch', 'Cat6 Cables x8'],\n      notes: 'Emergency repair completed. Network switch failure was root cause',\n      createdAt: '2024-08-06T19:30:00Z'\n    },\n    {\n      id: '6',\n      organizationId: orgId,\n      assetId: 'asset-006',\n      assetName: 'Catering Equipment Set',\n      type: 'corrective',\n      status: 'cancelled',\n      priority: 'low',\n      title: 'Refrigeration Unit Thermostat Replacement',\n      description: 'Replace faulty thermostat in main refrigeration unit',\n      scheduledDate: '2024-08-10T11:00:00Z',\n      estimatedDuration: 60,\n      assignedTo: 'Appliance Technician',\n      cost: 150,\n      notes: 'CANCELLED: Unit replaced entirely instead of repair',\n      createdAt: '2024-08-03T13:20:00Z'\n    }\n  ];\n\n  const filterRecords = () => {\n    let filtered = [...records];\n\n    // Search filter\n    if (searchQuery) {\n      filtered = filtered.filter(record =>\n        record.title.toLowerCase().includes(searchQuery.toLowerCase()) ||\n        record.assetName.toLowerCase().includes(searchQuery.toLowerCase()) ||\n        record.assignedTo?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n        record.description?.toLowerCase().includes(searchQuery.toLowerCase())\n      );\n    }\n\n    // Type filter\n    if (selectedType !== 'all') {\n      filtered = filtered.filter(record => record.type === selectedType);\n    }\n\n    // Status filter\n    if (selectedStatus !== 'all') {\n      filtered = filtered.filter(record => record.status === selectedStatus);\n    }\n\n    // Priority filter\n    if (selectedPriority !== 'all') {\n      filtered = filtered.filter(record => record.priority === selectedPriority);\n    }\n\n    setFilteredRecords(filtered);\n  };\n\n  const handleCreateRecord = () => {\n    setSelectedRecord(null);\n    setShowDrawer(true);\n  };\n\n  const handleEditRecord = (record: MaintenanceRecord) => {\n    setSelectedRecord(record);\n    setShowDrawer(true);\n  };\n\n  const handleCompleteRecord = async (recordId: string) => {\n    if (confirm('Mark this maintenance record as completed?')) {\n      setRecords(prev => prev.map(r => \n        r.id === recordId \n          ? { ...r, status: 'completed' as const, completedDate: new Date().toISOString() }\n          : r\n      ));\n    }\n  };\n\n  const handleDeleteRecord = async (recordId: string) => {\n    if (confirm('Are you sure you want to delete this maintenance record?')) {\n      setRecords(prev => prev.filter(r => r.id !== recordId));\n    }\n  };\n\n  const getStatusBadge = (status: MaintenanceRecord['status']) => {\n    switch (status) {\n      case 'scheduled':\n        return <Badge variant=\"secondary\">Scheduled</Badge>;\n      case 'in_progress':\n        return <Badge variant=\"warning\">In Progress</Badge>;\n      case 'completed':\n        return <Badge variant=\"success\">Completed</Badge>;\n      case 'cancelled':\n        return <Badge variant=\"outline\">Cancelled</Badge>;\n      case 'overdue':\n        return <Badge variant=\"destructive\">Overdue</Badge>;\n      default:\n        return <Badge variant=\"outline\">{status}</Badge>;\n    }\n  };\n\n  const getPriorityBadge = (priority: MaintenanceRecord['priority']) => {\n    switch (priority) {\n      case 'critical':\n        return <Badge variant=\"destructive\">Critical</Badge>;\n      case 'high':\n        return <Badge variant=\"warning\">High</Badge>;\n      case 'medium':\n        return <Badge variant=\"secondary\">Medium</Badge>;\n      case 'low':\n        return <Badge variant=\"outline\">Low</Badge>;\n      default:\n        return <Badge variant=\"outline\">{priority}</Badge>;\n    }\n  };\n\n  const getTypeBadge = (type: MaintenanceRecord['type']) => {\n    switch (type) {\n      case 'preventive':\n        return <Badge variant=\"success\">Preventive</Badge>;\n      case 'corrective':\n        return <Badge variant=\"warning\">Corrective</Badge>;\n      case 'emergency':\n        return <Badge variant=\"destructive\">Emergency</Badge>;\n      case 'inspection':\n        return <Badge variant=\"secondary\">Inspection</Badge>;\n      default:\n        return <Badge variant=\"outline\">{type}</Badge>;\n    }\n  };\n\n  const formatDateTime = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString('en-US', {\n      month: 'short',\n      day: 'numeric',\n      year: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit'\n    });\n  };\n\n  const formatCurrency = (value: number) => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD'\n    }).format(value);\n  };\n\n  const isOverdue = (record: MaintenanceRecord) => {\n    if (record.status === 'completed' || record.status === 'cancelled') return false;\n    return new Date(record.scheduledDate) < new Date();\n  };\n\n  return (\n    <div className=\"stack-lg\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-heading-3 text-heading-3 font-anton uppercase\">Asset Maintenance</h1>\n          <p className=\"text-body-sm color-muted\">Schedule and track asset maintenance activities</p>\n        </div>\n        <div className=\"flex items-center gap-sm\">\n          <Button variant=\"outline\" className=\"flex items-center gap-sm\">\n            <Download className=\"w-4 h-4\" />\n            Export\n          </Button>\n          <Button onClick={handleCreateRecord} className=\"flex items-center gap-sm\">\n            <Plus className=\"w-4 h-4\" />\n            Schedule Maintenance\n          </Button>\n        </div>\n      </div>\n\n      {/* Filters */}\n      <Card>\n        <div className=\"p-md\">\n          <div className=\"flex flex-wrap items-center gap-md\">\n            <div className=\"flex-1 min-w-64\">\n              <div className=\"relative\">\n                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 color-muted w-4 h-4\" />\n                <UnifiedInput                   placeholder=\"Search maintenance records...\"\n                  value={searchQuery}\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => setSearchQuery(e.target.value)}\n                  className=\"pl-2xl\"\n                />\n              </div>\n            </div>\n            <div className=\"flex items-center gap-sm\">\n              <select\n                value={selectedType}\n                onChange={(e: React.ChangeEvent<HTMLInputElement>) => setSelectedType(e.target.value)}\n                className=\" px-md py-sm border border-border rounded-md focus:outline-none focus:ring-2 focus:ring-primary\"\n              >\n                <option value=\"all\">All Types</option>\n                <option value=\"preventive\">Preventive</option>\n                <option value=\"corrective\">Corrective</option>\n                <option value=\"emergency\">Emergency</option>\n                <option value=\"inspection\">Inspection</option>\n              </select>\n              <select\n                value={selectedPriority}\n                onChange={(e: React.ChangeEvent<HTMLInputElement>) => setSelectedPriority(e.target.value)}\n                className=\" px-md py-sm border border-border rounded-md focus:outline-none focus:ring-2 focus:ring-primary\"\n              >\n                <option value=\"all\">All Priorities</option>\n                <option value=\"critical\">Critical</option>\n                <option value=\"high\">High</option>\n                <option value=\"medium\">Medium</option>\n                <option value=\"low\">Low</option>\n              </select>\n              <select\n                value={selectedStatus}\n                onChange={(e: React.ChangeEvent<HTMLInputElement>) => setSelectedStatus(e.target.value)}\n                className=\" px-md py-sm border border-border rounded-md focus:outline-none focus:ring-2 focus:ring-primary\"\n              >\n                <option value=\"all\">All Status</option>\n                <option value=\"scheduled\">Scheduled</option>\n                <option value=\"in_progress\">In Progress</option>\n                <option value=\"completed\">Completed</option>\n                <option value=\"overdue\">Overdue</option>\n                <option value=\"cancelled\">Cancelled</option>\n              </select>\n            </div>\n          </div>\n        </div>\n      </Card>\n\n      {/* Records List */}\n      {loading ? (\n        <Card>\n          <div className=\"p-xl text-center color-muted\">Loading maintenance records...</div>\n        </Card>\n      ) : filteredRecords.length === 0 ? (\n        <Card>\n          <div className=\"p-xl text-center color-muted\">\n            No maintenance records found matching your criteria.\n          </div>\n        </Card>\n      ) : (\n        <div className=\"stack-md\">\n          {filteredRecords.map(record => (\n            <Card key={record.id} className={`hover:shadow-elevated transition-shadow ${isOverdue(record) ? 'border-destructive/20 bg-destructive/10' : ''}`}>\n              <div className=\"p-md\">\n                <div className=\"flex items-start justify-between mb-sm\">\n                  <div className=\"flex items-center gap-sm\">\n                    <Wrench className=\"w-5 h-5 color-muted\" />\n                    <div>\n                      <h3 className=\"text-body text-heading-4\">{record.title}</h3>\n                      <p className=\"text-body-sm color-muted\">\n                        {record.assetName} • Scheduled: {formatDateTime(record.scheduledDate)}\n                      </p>\n                    </div>\n                  </div>\n                  <div className=\"flex items-center gap-sm\">\n                    {getPriorityBadge(record.priority)}\n                    {getTypeBadge(record.type)}\n                    {getStatusBadge(record.status)}\n                    <div className=\"flex items-center gap-xs ml-sm\">\n                      {record.status === 'scheduled' && (\n                        <Button\n                         \n                          variant=\"outline\"\n                          onClick={() => handleCompleteRecord(record.id)}\n                        >\n                          Complete\n                        </Button>\n                      )}\n                      <Button\n                       \n                        variant=\"ghost\"\n                        onClick={() => handleEditRecord(record)}\n                      >\n                        <Edit className=\"w-3 h-3\" />\n                      </Button>\n                      <Button\n                       \n                        variant=\"ghost\"\n                        onClick={() => handleDeleteRecord(record.id)}\n                      >\n                        <Trash2 className=\"w-3 h-3\" />\n                      </Button>\n                    </div>\n                  </div>\n                </div>\n\n                {record.description && (\n                  <p className=\"text-body-sm color-muted mb-sm\">\n                    {record.description}\n                  </p>\n                )}\n\n                <div className=\"grid grid-cols-2 md:grid-cols-4 gap-md mb-md\">\n                  <div>\n                    <span className=\"text-body-sm color-muted block\">Assigned To</span>\n                    <span className=\"form-label\">{record.assignedTo || 'Unassigned'}</span>\n                  </div>\n                  <div>\n                    <span className=\"text-body-sm color-muted block\">Duration</span>\n                    <span className=\"form-label\">\n                      {record.actualDuration || record.estimatedDuration} min\n                    </span>\n                  </div>\n                  <div>\n                    <span className=\"text-body-sm color-muted block\">Cost</span>\n                    <span className=\"form-label\">\n                      {record.cost ? formatCurrency(record.cost) : 'TBD'}\n                    </span>\n                  </div>\n                  <div>\n                    <span className=\"text-body-sm color-muted block\">Next Maintenance</span>\n                    <span className=\"form-label\">\n                      {record.nextMaintenanceDate ? formatDateTime(record.nextMaintenanceDate) : 'TBD'}\n                    </span>\n                  </div>\n                </div>\n\n                {record.completedDate && (\n                  <div className=\"flex items-center gap-md text-body-sm mb-sm\">\n                    <span className=\"color-muted\">Completed:</span>\n                    <span className=\"form-label\">{formatDateTime(record.completedDate)}</span>\n                    {record.performedBy && (\n                      <>\n                        <span className=\"color-muted\">By:</span>\n                        <span>{record.performedBy}</span>\n                      </>\n                    )}\n                  </div>\n                )}\n\n                {record.partsUsed && record.partsUsed.length > 0 && (\n                  <div className=\"mb-sm\">\n                    <span className=\"text-body-sm color-muted block mb-xs\">Parts Used</span>\n                    <div className=\"flex flex-wrap gap-xs\">\n                      {record.partsUsed.map((part, index) => (\n                        <Badge key={index} variant=\"outline\">\n                          {part}\n                        </Badge>\n                      ))}\n                    </div>\n                  </div>\n                )}\n\n                {record.vendor && (\n                  <div className=\"flex items-center gap-md text-body-sm mb-sm\">\n                    <span className=\"color-muted\">Vendor:</span>\n                    <span className=\"form-label\">{record.vendor}</span>\n                  </div>\n                )}\n\n                {record.notes && (\n                  <div className=\"mt-sm p-sm bg-secondary rounded-md\">\n                    <span className=\"text-body-sm color-muted block mb-xs\">Notes</span>\n                    <p className=\"text-body-sm\">{record.notes}</p>\n                  </div>\n                )}\n              </div>\n            </Card>\n          ))}\n        </div>\n      )}\n\n      {/* Maintenance Form Drawer */}\n      <Drawer\n        open={showDrawer}\n        onClose={() => setShowDrawer(false)}\n        title={selectedRecord ? 'Edit Maintenance Record' : 'Schedule Maintenance'}\n       \n      >\n        <div className=\"p-lg stack-md\">\n          <div>\n            <label className=\"block text-body-sm form-label mb-xs\">Title</label>\n            <UnifiedInput               placeholder=\"Enter maintenance title\"\n              defaultValue={selectedRecord?.title}\n            />\n          </div>\n          <div>\n            <label className=\"block text-body-sm form-label mb-xs\">Asset</label>\n            <UnifiedInput               placeholder=\"Select asset\"\n              defaultValue={selectedRecord?.assetName}\n            />\n          </div>\n          <div className=\"grid grid-cols-3 gap-md\">\n            <div>\n              <label className=\"block text-body-sm form-label mb-xs\">Type</label>\n              <select\n                defaultValue={selectedRecord?.type}\n                className=\"w-full  px-md py-sm border border-border rounded-md focus:outline-none focus:ring-2 focus:ring-primary\"\n              >\n                <option value=\"preventive\">Preventive</option>\n                <option value=\"corrective\">Corrective</option>\n                <option value=\"emergency\">Emergency</option>\n                <option value=\"inspection\">Inspection</option>\n              </select>\n            </div>\n            <div>\n              <label className=\"block text-body-sm form-label mb-xs\">Priority</label>\n              <select\n                defaultValue={selectedRecord?.priority}\n                className=\"w-full  px-md py-sm border border-border rounded-md focus:outline-none focus:ring-2 focus:ring-primary\"\n              >\n                <option value=\"low\">Low</option>\n                <option value=\"medium\">Medium</option>\n                <option value=\"high\">High</option>\n                <option value=\"critical\">Critical</option>\n              </select>\n            </div>\n            <div>\n              <label className=\"block text-body-sm form-label mb-xs\">Duration (min)</label>\n              <UnifiedInput                 type=\"number\"\n                placeholder=\"60\"\n                defaultValue={selectedRecord?.estimatedDuration}\n              />\n            </div>\n          </div>\n          <div className=\"grid grid-cols-2 gap-md\">\n            <div>\n              <label className=\"block text-body-sm form-label mb-xs\">Scheduled Date</label>\n              <UnifiedInput                 type=\"datetime-local\"\n                defaultValue={selectedRecord?.scheduledDate?.slice(0, 16)}\n              />\n            </div>\n            <div>\n              <label className=\"block text-body-sm form-label mb-xs\">Assigned To</label>\n              <UnifiedInput                 placeholder=\"Select technician\"\n                defaultValue={selectedRecord?.assignedTo}\n              />\n            </div>\n          </div>\n          <div>\n            <label className=\"block text-body-sm form-label mb-xs\">Description</label>\n            <textarea\n              className=\"w-full  px-md py-sm border border-border rounded-md focus:outline-none focus:ring-2 focus:ring-primary\"\n              rows={3}\n              placeholder=\"Maintenance description\"\n              defaultValue={selectedRecord?.description}\n            />\n          </div>\n          <div>\n            <label className=\"block text-body-sm form-label mb-xs\">Notes</label>\n            <textarea\n              className=\"w-full  px-md py-sm border border-border rounded-md focus:outline-none focus:ring-2 focus:ring-primary\"\n              rows={2}\n              placeholder=\"Additional notes\"\n              defaultValue={selectedRecord?.notes}\n            />\n          </div>\n          <div className=\"flex gap-sm pt-md\">\n            <Button className=\"flex-1\">\n              {selectedRecord ? 'Update Record' : 'Schedule Maintenance'}\n            </Button>\n            <Button variant=\"outline\" onClick={() => setShowDrawer(false)}>\n              Cancel\n            </Button>\n          </div>\n        </div>\n      </Drawer>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ghxstship/apps/web/app/(app)/(shell)/assets/maintenance/MaintenanceClient_ATLVS.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'generateDemoData'. Either include it or remove the dependency array.","line":214,"column":6,"nodeType":"ArrayExpression","endLine":214,"endColumn":23,"suggestions":[{"desc":"Update the dependencies array to be: [supabase, orgId, generateDemoData]","fix":{"range":[5614,5631],"text":"[supabase, orgId, generateDemoData]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useMemo has a missing dependency: 'handleDelete'. Either include it or remove the dependency array.","line":407,"column":7,"nodeType":"ArrayExpression","endLine":407,"endColumn":45,"suggestions":[{"desc":"Update the dependencies array to be: [fieldConfig, data, loading, loadData, handleDelete]","fix":{"range":[11600,11638],"text":"[fieldConfig, data, loading, loadData, handleDelete]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { Wrench, AlertCircle, CheckCircle, Clock, Plus, TrendingUp, DollarSign } from \"lucide-react\";\nimport React, { useState, useEffect, useCallback, useMemo } from 'react';\nimport { useTranslations } from 'next-intl';\nimport { createBrowserClient } from '@ghxstship/auth';\nimport { \n  DataViewProvider, \n  DataGrid, \n  KanbanBoard, \n  CalendarView, \n  ListView,\n  TimelineView,\n  DashboardView,\n  ViewSwitcher,\n  DataActions,\n  UniversalDrawer\n} from '@ghxstship/ui/components/DataViews';\nimport { Card, Badge, Button } from '@ghxstship/ui';\nimport CreateMaintenanceClient from './CreateMaintenanceClient';\nimport type { \n  DataViewConfig, \n  FieldConfig, \n  DataRecord,\n  FilterConfig,\n  SortConfig \n} from '@ghxstship/ui/components/DataViews/types';\nimport type { AssetMaintenance } from '../types';\n\ninterface MaintenanceClientProps {\n  orgId: string;\n}\n\nexport default function MaintenanceClient({ orgId }: MaintenanceClientProps) {\n  const t = useTranslations('assets.maintenance');\n  const supabase = createBrowserClient();\n  \n  const [data, setData] = useState<AssetMaintenance[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [selectedRecord, setSelectedRecord] = useState<AssetMaintenance | null>(null);\n  const [drawerOpen, setDrawerOpen] = useState(false);\n  const [drawerMode, setDrawerMode] = useState<'view' | 'edit' | 'create'>('view');\n  const [createDrawerOpen, setCreateDrawerOpen] = useState(false);\n\n  // Field configuration for maintenance\n  const fieldConfig: FieldConfig[] = useMemo(() => [\n    {\n      key: 'asset_name',\n      label: 'Asset Name',\n      type: 'text',\n      required: true,\n      sortable: true,\n      searchable: true\n    },\n    {\n      key: 'maintenance_type',\n      label: 'Maintenance Type',\n      type: 'select',\n      options: [\n        { value: 'preventive', label: 'Preventive' },\n        { value: 'corrective', label: 'Corrective' },\n        { value: 'emergency', label: 'Emergency' },\n        { value: 'upgrade', label: 'Upgrade' }\n      ],\n      required: true,\n      filterable: true,\n      sortable: true\n    },\n    {\n      key: 'status',\n      label: 'Status',\n      type: 'select',\n      options: [\n        { value: 'scheduled', label: 'Scheduled' },\n        { value: 'in_progress', label: 'In Progress' },\n        { value: 'completed', label: 'Completed' },\n        { value: 'cancelled', label: 'Cancelled' },\n        { value: 'overdue', label: 'Overdue' }\n      ],\n      required: true,\n      filterable: true,\n      sortable: true,\n      render: (value: string) => {\n        const variants = {\n          scheduled: 'secondary',\n          in_progress: 'warning',\n          completed: 'success',\n          cancelled: 'outline',\n          overdue: 'destructive'\n        };\n        return <Badge variant={variants[value as keyof typeof variants] as unknown}>{value.replace('_', ' ')}</Badge>;\n      }\n    },\n    {\n      key: 'priority',\n      label: 'Priority',\n      type: 'select',\n      options: [\n        { value: 'low', label: 'Low' },\n        { value: 'medium', label: 'Medium' },\n        { value: 'high', label: 'High' },\n        { value: 'critical', label: 'Critical' }\n      ],\n      required: true,\n      filterable: true,\n      sortable: true,\n      render: (value: string) => {\n        const variants = {\n          low: 'outline',\n          medium: 'secondary',\n          high: 'warning',\n          critical: 'destructive'\n        };\n        return <Badge variant={variants[value as keyof typeof variants] as unknown}>{value}</Badge>;\n      }\n    },\n    {\n      key: 'title',\n      label: 'Title',\n      type: 'text',\n      required: true,\n      searchable: true\n    },\n    {\n      key: 'scheduled_date',\n      label: 'Scheduled Date',\n      type: 'date',\n      sortable: true\n    },\n    {\n      key: 'completed_date',\n      label: 'Completed Date',\n      type: 'date',\n      sortable: true\n    },\n    {\n      key: 'technician',\n      label: 'Technician',\n      type: 'text',\n      searchable: true\n    },\n    {\n      key: 'vendor',\n      label: 'Vendor',\n      type: 'text',\n      searchable: true\n    },\n    {\n      key: 'cost',\n      label: 'Cost',\n      type: 'currency',\n      sortable: true\n    },\n    {\n      key: 'downtime_hours',\n      label: 'Downtime (Hours)',\n      type: 'number',\n      sortable: true\n    },\n    {\n      key: 'description',\n      label: 'Description',\n      type: 'textarea',\n      searchable: true\n    },\n    {\n      key: 'work_performed',\n      label: 'Work Performed',\n      type: 'textarea',\n      searchable: true\n    },\n    {\n      key: 'notes',\n      label: 'Notes',\n      type: 'textarea'\n    },\n    {\n      key: 'created_at',\n      label: 'Created',\n      type: 'date',\n      sortable: true\n    }\n  ], []);\n\n  // Load maintenance data\n  const loadData = useCallback(async () => {\n    setLoading(true);\n    try {\n      const { data: maintenanceData, error } = await supabase\n        .from('asset_maintenance')\n        .select(`\n          *,\n          assets!inner(name)\n        `)\n        .eq('organization_id', orgId)\n        .order('scheduled_date', { ascending: false });\n\n      if (error) {\n        console.error('Error loading maintenance:', error);\n        setData(generateDemoData());\n      } else {\n        const transformedData = maintenanceData?.map(item => ({\n          ...item,\n          asset_name: item.assets?.name || 'Unknown Asset'\n        })) || [];\n        setData(transformedData);\n      }\n    } catch (error) {\n      console.error('Error loading maintenance:', error);\n      setData(generateDemoData());\n    } finally {\n      setLoading(false);\n    }\n  }, [supabase, orgId]);\n\n  // Generate demo data\n  const generateDemoData = (): AssetMaintenance[] => [\n    {\n      id: '1',\n      organization_id: orgId,\n      asset_id: '1',\n      asset_name: 'Main Stage Rigging System',\n      maintenance_type: 'preventive',\n      status: 'completed',\n      priority: 'high',\n      title: 'Quarterly Safety Inspection',\n      description: 'Comprehensive inspection of rigging system components',\n      scheduled_date: '2023-12-15T09:00:00Z',\n      completed_date: '2023-12-15T14:30:00Z',\n      technician: 'Mike Johnson',\n      vendor: 'Stage Tech Pro',\n      cost: 2500,\n      parts_used: ['Safety cables', 'Inspection tags'],\n      work_performed: 'Inspected all rigging points, replaced worn cables, updated safety documentation',\n      next_maintenance_date: '2024-03-15',\n      warranty_impact: false,\n      downtime_hours: 5.5,\n      notes: 'All systems passed inspection. Next maintenance scheduled for March 2024.',\n      created_at: '2023-11-01T10:00:00Z',\n      updated_at: '2023-12-15T14:30:00Z'\n    },\n    {\n      id: '2',\n      organization_id: orgId,\n      asset_id: '2',\n      asset_name: 'Professional Sound System',\n      maintenance_type: 'corrective',\n      status: 'in_progress',\n      priority: 'medium',\n      title: 'Audio Mixer Repair',\n      description: 'Repair faulty channel on main mixing console',\n      scheduled_date: '2024-01-10T10:00:00Z',\n      technician: 'Sarah Wilson',\n      vendor: 'Audio Pro Services',\n      cost: 800,\n      parts_used: ['Channel fader', 'Circuit board'],\n      work_performed: 'Diagnosed faulty channel, ordered replacement parts',\n      warranty_impact: true,\n      downtime_hours: 2,\n      notes: 'Waiting for parts delivery. Expected completion by end of week.',\n      created_at: '2024-01-08T10:00:00Z',\n      updated_at: '2024-01-10T12:00:00Z'\n    },\n    {\n      id: '3',\n      organization_id: orgId,\n      asset_id: '3',\n      asset_name: 'LED Video Wall Panels',\n      maintenance_type: 'emergency',\n      status: 'overdue',\n      priority: 'critical',\n      title: 'Panel Replacement - Display Failure',\n      description: 'Multiple LED panels showing dead pixels and color distortion',\n      scheduled_date: '2024-01-05T08:00:00Z',\n      technician: 'Tech Team',\n      vendor: 'Visual Systems Inc',\n      cost: 3200,\n      downtime_hours: 8,\n      notes: 'URGENT: Display failure affecting upcoming event. Immediate attention required.',\n      created_at: '2024-01-04T16:00:00Z',\n      updated_at: '2024-01-05T08:00:00Z'\n    }\n  ];\n\n  // Statistics calculation\n  const stats = useMemo(() => {\n    const total = data.length;\n    const scheduled = data.filter(item => item.status === 'scheduled').length;\n    const inProgress = data.filter(item => item.status === 'in_progress').length;\n    const completed = data.filter(item => item.status === 'completed').length;\n    const overdue = data.filter(item => item.status === 'overdue').length;\n    const totalCost = data.reduce((sum, item) => sum + (item.cost || 0), 0);\n    const avgDowntime = data.length > 0 ? data.reduce((sum, item) => sum + (item.downtime_hours || 0), 0) / data.length : 0;\n\n    return { total, scheduled, inProgress, completed, overdue, totalCost, avgDowntime };\n  }, [data]);\n\n  // Event handlers\n  const handleCreate = () => {\n    setCreateDrawerOpen(true);\n  };\n\n  const handleEdit = (record: AssetMaintenance) => {\n    setSelectedRecord(record);\n    setDrawerMode('edit');\n    setDrawerOpen(true);\n  };\n\n  const handleView = (record: AssetMaintenance) => {\n    setSelectedRecord(record);\n    setDrawerMode('view');\n    setDrawerOpen(true);\n  };\n\n  const handleSave = async (formData: unknown) => {\n    try {\n      if (drawerMode === 'create') {\n        const { error } = await supabase\n          .from('asset_maintenance')\n          .insert([{ ...formData, organization_id: orgId }]);\n        \n        if (error) throw error;\n      } else if (drawerMode === 'edit' && selectedRecord) {\n        const { error } = await supabase\n          .from('asset_maintenance')\n          .update(formData)\n          .eq('id', selectedRecord.id);\n        \n        if (error) throw error;\n      }\n      \n      await loadData();\n      setDrawerOpen(false);\n    } catch (error) {\n      console.error('Error saving maintenance:', error);\n    }\n  };\n\n  const handleDelete = async (record: AssetMaintenance) => {\n    try {\n      const { error } = await supabase\n        .from('asset_maintenance')\n        .delete()\n        .eq('id', record.id);\n      \n      if (error) throw error;\n      await loadData();\n    } catch (error) {\n      console.error('Error deleting maintenance:', error);\n    }\n  };\n\n  // DataView configuration\n  const dataViewConfig: DataViewConfig = useMemo(() => ({\n    id: 'assets-maintenance',\n    name: 'Asset Maintenance',\n    description: 'Manage asset maintenance schedules and records',\n    viewType: 'list',\n    defaultView: 'list',\n    fields: fieldConfig,\n    data: data,\n    loading: loading,\n    onRefresh: loadData,\n    onSearch: (query: string) => {\n      console.log('Search:', query);\n    },\n    onFilter: (filters: FilterConfig[]) => {\n      console.log('Filter:', filters);\n    },\n    onSort: (sorts: SortConfig[]) => {\n      console.log('Sort:', sorts);\n    },\n    actions: [\n      {\n        key: 'create',\n        id: 'create',\n        label: 'Schedule Maintenance',\n        icon: 'Plus',\n        variant: 'primary' as const,\n        onClick: handleCreate\n      },\n      {\n        key: 'edit',\n        id: 'edit',\n        label: 'Edit',\n        icon: 'Edit',\n        variant: 'secondary' as const,\n        onClick: handleEdit\n      },\n      {\n        key: 'view',\n        id: 'view',\n        label: 'View',\n        icon: 'Eye',\n        variant: 'outline' as const,\n        onClick: handleView\n      },\n      {\n        key: 'delete',\n        id: 'delete',\n        label: 'Delete',\n        icon: 'Trash',\n        variant: 'destructive' as const,\n        onClick: handleDelete\n      }\n    ]\n  }), [fieldConfig, data, loading, loadData]);\n\n  useEffect(() => {\n    loadData();\n  }, [loadData]);\n\n  return (\n    <div className=\"stack-lg\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-heading-3 font-anton uppercase\">Asset Maintenance</h1>\n          <p className=\"text-body-sm color-muted\">Schedule and track asset maintenance activities</p>\n        </div>\n        <Button onClick={handleCreate} className=\"flex items-center gap-sm\">\n          <Plus className=\"w-4 h-4\" />\n          Schedule Maintenance\n        </Button>\n      </div>\n\n      {/* Statistics Dashboard */}\n      <DashboardView>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-7 gap-md\">\n          <Card>\n            <div className=\"p-md\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-body-sm form-label color-muted\">Total Records</p>\n                  <p className=\"text-heading-3\">{stats.total}</p>\n                </div>\n                <Wrench className=\"w-8 h-8 color-accent\" />\n              </div>\n            </div>\n          </Card>\n          \n          <Card>\n            <div className=\"p-md\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-body-sm form-label color-muted\">Scheduled</p>\n                  <p className=\"text-heading-3\">{stats.scheduled}</p>\n                </div>\n                <Clock className=\"w-8 h-8 color-secondary\" />\n              </div>\n            </div>\n          </Card>\n          \n          <Card>\n            <div className=\"p-md\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-body-sm form-label color-muted\">In Progress</p>\n                  <p className=\"text-heading-3\">{stats.inProgress}</p>\n                </div>\n                <TrendingUp className=\"w-8 h-8 color-warning\" />\n              </div>\n            </div>\n          </Card>\n          \n          <Card>\n            <div className=\"p-md\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-body-sm form-label color-muted\">Completed</p>\n                  <p className=\"text-heading-3\">{stats.completed}</p>\n                </div>\n                <CheckCircle className=\"w-8 h-8 color-success\" />\n              </div>\n            </div>\n          </Card>\n          \n          <Card>\n            <div className=\"p-md\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-body-sm form-label color-muted\">Overdue</p>\n                  <p className=\"text-heading-3\">{stats.overdue}</p>\n                </div>\n                <AlertCircle className=\"w-8 h-8 color-destructive\" />\n              </div>\n            </div>\n          </Card>\n          \n          <Card>\n            <div className=\"p-md\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-body-sm form-label color-muted\">Total Cost</p>\n                  <p className=\"text-heading-3\">${(stats.totalCost / 1000).toFixed(0)}K</p>\n                </div>\n                <DollarSign className=\"w-8 h-8 color-info\" />\n              </div>\n            </div>\n          </Card>\n          \n          <Card>\n            <div className=\"p-md\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-body-sm form-label color-muted\">Avg Downtime</p>\n                  <p className=\"text-heading-3\">{stats.avgDowntime.toFixed(1)}h</p>\n                </div>\n                <Clock className=\"w-8 h-8 color-muted\" />\n              </div>\n            </div>\n          </Card>\n        </div>\n      </DashboardView>\n\n      {/* Data Views */}\n      <DataViewProvider config={dataViewConfig}>\n        <div className=\"stack-md\">\n          <DataActions />\n          <ViewSwitcher />\n          <DataGrid />\n          <KanbanBoard \n            columns={[\n              { id: 'scheduled', title: 'Scheduled' },\n              { id: 'in_progress', title: 'In Progress' },\n              { id: 'completed', title: 'Completed' },\n              { id: 'cancelled', title: 'Cancelled' },\n              { id: 'overdue', title: 'Overdue' }\n            ]}\n            statusField=\"status\"\n            titleField=\"title\"\n          />\n          <CalendarView \n            startDateField=\"scheduled_date\"\n            endDateField=\"completed_date\"\n            titleField=\"title\"\n          />\n          <ListView \n            titleField=\"title\"\n            subtitleField=\"maintenance_type\"\n          />\n          <TimelineView \n            startDateField=\"scheduled_date\"\n            endDateField=\"completed_date\"\n            titleField=\"title\"\n          />\n        </div>\n      </DataViewProvider>\n\n      {/* Universal Drawer */}\n      <UniversalDrawer\n        open={drawerOpen}\n        onClose={() => setDrawerOpen(false)}\n        record={selectedRecord}\n        fields={fieldConfig}\n        mode={drawerMode}\n        title={\n          drawerMode === 'create' \n            ? 'Schedule Maintenance'\n            : drawerMode === 'edit'\n            ? 'Edit Maintenance'\n            : 'Maintenance Details'\n        }\n        onSave={handleSave}\n        tabs={[\n          {\n            key: 'details',\n            label: 'Details',\n            content: null\n          },\n          {\n            key: 'work',\n            label: 'Work Performed',\n            content: (\n              <div className=\"p-md\">\n                <p className=\"text-body-sm color-muted\">Work details and parts used will be displayed here.</p>\n              </div>\n            )\n          },\n          {\n            key: 'costs',\n            label: 'Costs',\n            content: (\n              <div className=\"p-md\">\n                <p className=\"text-body-sm color-muted\">Cost breakdown and billing information will be displayed here.</p>\n              </div>\n            )\n          },\n          {\n            key: 'history',\n            label: 'History',\n            content: (\n              <div className=\"p-md\">\n                <p className=\"text-body-sm color-muted\">Maintenance history will be displayed here.</p>\n              </div>\n            )\n          }\n        ]}\n      />\n\n      {/* Create Maintenance Drawer */}\n      <CreateMaintenanceClient\n        isOpen={createDrawerOpen}\n        onClose={() => setCreateDrawerOpen(false)}\n        onSuccess={() => {\n          loadData();\n          setCreateDrawerOpen(false);\n        }}\n        orgId={orgId}\n      />\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ghxstship/apps/web/app/(app)/(shell)/assets/overview/AssetsClient.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadData'. Either include it or remove the dependency array.","line":79,"column":6,"nodeType":"ArrayExpression","endLine":79,"endColumn":13,"suggestions":[{"desc":"Update the dependencies array to be: [loadData, orgId]","fix":{"range":[2738,2745],"text":"[loadData, orgId]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { Plus, Package, TrendingUp, AlertTriangle, Settings, BarChart3, Shield, Search, RotateCcw, QrCode, FileCheck } from \"lucide-react\";\nimport React, { useState, useEffect, useCallback, useMemo } from 'react';\nimport { useTranslations } from 'next-intl';\nimport { createBrowserClient } from '@ghxstship/auth';\nimport { \n  DataViewProvider, \n  DataGrid, \n  KanbanBoard, \n  CalendarView, \n  ListView,\n  TimelineView,\n  DashboardView,\n  ViewSwitcher,\n  DataActions,\n  UniversalDrawer\n} from '@ghxstship/ui/components/DataViews';\nimport { Card, Button, Badge } from '@ghxstship/ui';\nimport type { \n  DataViewConfig, \n  FieldConfig, \n  DataRecord,\n  FilterConfig,\n  SortConfig \n} from '@ghxstship/ui/components/DataViews/types';\n\ninterface Asset {\n  id: string;\n  organizationId: string;\n  name: string;\n  description?: string;\n  category: string;\n  type: 'fixed' | 'rentable' | 'service';\n  status: 'available' | 'in_use' | 'under_maintenance' | 'damaged' | 'missing' | 'retired';\n  sku?: string;\n  currentValue?: number;\n  location?: string;\n  assignedTo?: string;\n  createdAt?: string;\n  updatedAt?: string;\n}\n\ninterface AssetsClientProps {\n  orgId: string;\n}\n\nconst ASSET_CATEGORIES = [\n  { id: 'site_infrastructure', name: 'Site Infrastructure', icon: '🏗️' },\n  { id: 'site_assets', name: 'Site Assets', icon: '📦' },\n  { id: 'site_vehicles', name: 'Site Vehicles', icon: '🚛' },\n  { id: 'site_services', name: 'Site Services', icon: '⚡' },\n  { id: 'heavy_machinery', name: 'Heavy Machinery & Equipment', icon: '🏭' },\n  { id: 'it_communication', name: 'IT & Communication Services', icon: '📡' },\n  { id: 'office_admin', name: 'Office & Admin', icon: '🏢' },\n  { id: 'access_credentials', name: 'Access & Credentials', icon: '🔑' },\n  { id: 'parking', name: 'Parking', icon: '🅿️' },\n  { id: 'travel_lodging', name: 'Travel & Lodging', icon: '🏨' },\n  { id: 'artist_technical', name: 'Artist Technical', icon: '🎵' },\n  { id: 'artist_hospitality', name: 'Artist Hospitality', icon: '🍽️' },\n  { id: 'artist_travel', name: 'Artist Travel & Lodging', icon: '✈️' }\n] as const;\n\nexport default function AssetsClient({ orgId }: AssetsClientProps) {\n  const t = useTranslations('assets');\n  const supabase = createBrowserClient();\n  const [assets, setAssets] = useState<Asset[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [activeTab, setActiveTab] = useState<'overview' | 'inventory' | 'advancing' | 'assignments' | 'tracking' | 'maintenance' | 'compliance' | 'inspections' | 'lifecycle' | 'barcode' | 'reports'>('overview');\n  const [stats, setStats] = useState({\n    totalAssets: 0,\n    activeAssignments: 0,\n    maintenanceRequired: 0,\n    totalValue: 0\n  });\n\n  useEffect(() => {\n    loadData();\n  }, [orgId]);\n\n  const loadData = async () => {\n    setLoading(true);\n    try {\n      // Load assets from Supabase\n      const { data: assetsData, error } = await supabase\n        .from('assets')\n        .select('*')\n        .eq('organization_id', orgId)\n        .order('created_at', { ascending: false });\n\n      if (error) {\n        console.error('Error loading assets:', error);\n        // Use demo data for development\n        setAssets(generateDemoAssets());\n      } else {\n        setAssets(assetsData || []);\n      }\n\n      // Calculate stats\n      const totalAssets = assetsData?.length || 0;\n      const activeAssignments = assetsData?.filter(a => a.status === 'in_use').length || 0;\n      const maintenanceRequired = assetsData?.filter(a => a.status === 'under_maintenance' || a.status === 'damaged').length || 0;\n      const totalValue = assetsData?.reduce((sum, a) => sum + (a.current_value || 0), 0) || 0;\n\n      setStats({\n        totalAssets,\n        activeAssignments,\n        maintenanceRequired,\n        totalValue\n      });\n\n    } catch (error) {\n      console.error('Error loading assets data:', error);\n      setAssets(generateDemoAssets());\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const generateDemoAssets = (): Asset[] => [\n    {\n      id: '1',\n      organizationId: orgId,\n      name: 'Main Stage Rigging System',\n      description: 'Professional stage rigging and truss system for main performance area',\n      category: 'site_infrastructure',\n      type: 'fixed',\n      status: 'in_use',\n      sku: 'STAGE-RIG-001',\n      currentValue: 45000,\n      location: 'Main Deck',\n      assignedTo: 'Jack Sparrow',\n      createdAt: '2024-01-01T10:00:00Z'\n    },\n    {\n      id: '2',\n      organizationId: orgId,\n      name: 'Professional Sound System',\n      description: 'High-end PA system with mixing console and monitors',\n      category: 'artist_technical',\n      type: 'rentable',\n      status: 'available',\n      sku: 'AUDIO-PA-002',\n      currentValue: 25000,\n      location: 'Equipment Storage',\n      createdAt: '2024-01-02T14:30:00Z'\n    },\n    {\n      id: '3',\n      organizationId: orgId,\n      name: 'LED Video Wall Panels',\n      description: 'Modular LED display panels for backdrop and visual effects',\n      category: 'artist_technical',\n      type: 'rentable',\n      status: 'under_maintenance',\n      sku: 'LED-WALL-003',\n      currentValue: 35000,\n      location: 'Tech Workshop',\n      assignedTo: 'Will Turner',\n      createdAt: '2024-01-03T09:15:00Z'\n    },\n    {\n      id: '4',\n      organizationId: orgId,\n      name: 'Catering Services',\n      description: 'Full-service catering for crew and artist hospitality',\n      category: 'artist_hospitality',\n      type: 'service',\n      status: 'available',\n      sku: 'CATER-SRV-004',\n      location: 'Galley',\n      createdAt: '2024-01-04T16:45:00Z'\n    },\n    {\n      id: '5',\n      organizationId: orgId,\n      name: 'Generator - 500kW',\n      description: 'Primary power generation unit for event infrastructure',\n      category: 'site_services',\n      type: 'fixed',\n      status: 'in_use',\n      sku: 'GEN-500-005',\n      currentValue: 75000,\n      location: 'Power Station',\n      assignedTo: 'Elizabeth Swann',\n      createdAt: '2024-01-05T11:20:00Z'\n    }\n  ];\n\n  const getStatusBadge = (status: Asset['status']) => {\n    switch (status) {\n      case 'available':\n        return <Badge variant=\"success\">Available</Badge>;\n      case 'in_use':\n        return <Badge variant=\"warning\">In Use</Badge>;\n      case 'under_maintenance':\n        return <Badge variant=\"secondary\">Maintenance</Badge>;\n      case 'damaged':\n        return <Badge variant=\"destructive\">Damaged</Badge>;\n      case 'missing':\n        return <Badge variant=\"destructive\">Missing</Badge>;\n      case 'retired':\n        return <Badge variant=\"outline\">Retired</Badge>;\n      default:\n        return <Badge variant=\"outline\">{status}</Badge>;\n    }\n  };\n\n  const formatCurrency = (value: number) => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD'\n    }).format(value);\n  };\n\n  return (\n    <div className=\"stack-lg\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-heading-3 text-heading-3 font-anton uppercase\">Assets Management</h1>\n          <p className=\"text-body-sm color-muted\">Comprehensive asset inventory, tracking, and management system</p>\n        </div>\n        <Button className=\"flex items-center gap-sm\">\n          <Plus className=\"w-4 h-4\" />\n          Add Asset\n        </Button>\n      </div>\n\n      {/* Navigation Tabs */}\n      <div className=\"flex cluster-xs bg-secondary p-xs rounded-lg\">\n        {[\n          { id: 'overview', label: 'Overview', icon: BarChart3 },\n          { id: 'inventory', label: 'Inventory', icon: Package },\n          { id: 'advancing', label: 'Advancing', icon: TrendingUp },\n          { id: 'assignments', label: 'Assignments', icon: Settings },\n          { id: 'tracking', label: 'Tracking', icon: AlertTriangle },\n          { id: 'maintenance', label: 'Maintenance', icon: Settings },\n          { id: 'compliance', label: 'Compliance', icon: Shield },\n          { id: 'inspections', label: 'Inspections', icon: Search },\n          { id: 'lifecycle', label: 'Lifecycle', icon: RotateCcw },\n          { id: 'barcode', label: 'Barcode', icon: QrCode },\n          { id: 'reports', label: 'Reports', icon: BarChart3 }\n        ].map((tab: unknown) => {\n          const Icon = tab.icon;\n          return (\n            <button\n              key={tab.id}\n              onClick={() => setActiveTab(tab.id as unknown)}\n              className={`flex items-center gap-sm px-sm py-sm rounded-md text-body-sm form-label transition-colors ${\n                activeTab === tab.id\n                  ? 'bg-background color-foreground shadow-surface'\n                  : 'color-muted hover:color-foreground'\n              }`}\n            >\n              <Icon className=\"w-4 h-4\" />\n              {tab.label}\n            </button>\n          );\n        })}\n      </div>\n\n      {loading ? (\n        <Card>\n          <div className=\"p-xl text-center color-muted\">Loading assets data...</div>\n        </Card>\n      ) : (\n        <>\n          {/* Overview Tab */}\n          {activeTab === 'overview' && (\n            <div className=\"stack-lg\">\n              {/* Stats Cards */}\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-md\">\n                <Card>\n                  <div className=\"p-md\">\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <p className=\"text-body-sm form-label color-muted\">Total Assets</p>\n                        <p className=\"text-heading-3 text-heading-3\">{stats.totalAssets}</p>\n                      </div>\n                      <Package className=\"w-8 h-8 color-accent\" />\n                    </div>\n                  </div>\n                </Card>\n                <Card>\n                  <div className=\"p-md\">\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <p className=\"text-body-sm form-label color-muted\">Active Assignments</p>\n                        <p className=\"text-heading-3 text-heading-3\">{stats.activeAssignments}</p>\n                      </div>\n                      <TrendingUp className=\"w-8 h-8 color-success\" />\n                    </div>\n                  </div>\n                </Card>\n                <Card>\n                  <div className=\"p-md\">\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <p className=\"text-body-sm form-label color-muted\">Maintenance Required</p>\n                        <p className=\"text-heading-3 text-heading-3\">{stats.maintenanceRequired}</p>\n                      </div>\n                      <AlertTriangle className=\"w-8 h-8 color-warning\" />\n                    </div>\n                  </div>\n                </Card>\n                <Card>\n                  <div className=\"p-md\">\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <p className=\"text-body-sm form-label color-muted\">Total Value</p>\n                        <p className=\"text-heading-3 text-heading-3\">{formatCurrency(stats.totalValue)}</p>\n                      </div>\n                      <BarChart3 className=\"w-8 h-8 color-secondary\" />\n                    </div>\n                  </div>\n                </Card>\n              </div>\n\n              {/* Recent Assets */}\n              <Card>\n                <div className=\"p-md\">\n                  <h3 className=\"text-body text-heading-4 mb-md\">Recent Assets</h3>\n                  <div className=\"stack-sm\">\n                    {assets.slice(0, 5).map(asset => (\n                      <div key={asset.id} className=\"flex items-center justify-between p-sm border rounded-lg\">\n                        <div className=\"flex-1\">\n                          <h4 className=\"form-label\">{asset.name}</h4>\n                          <p className=\"text-body-sm color-muted\">\n                            {ASSET_CATEGORIES.find(cat => cat.id === asset.category)?.name} • {asset.location}\n                          </p>\n                        </div>\n                        <div className=\"flex items-center gap-sm\">\n                          {asset.currentValue && (\n                            <span className=\"text-body-sm form-label\">{formatCurrency(asset.currentValue)}</span>\n                          )}\n                          {getStatusBadge(asset.status)}\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              </Card>\n            </div>\n          )}\n\n          {/* Other tabs show implementation status */}\n          {activeTab !== 'overview' && (\n            <Card>\n              <div className=\"p-xl text-center color-muted\">\n                <h3 className=\"text-body text-heading-4 mb-sm\">{activeTab.charAt(0).toUpperCase() + activeTab.slice(1)} Module</h3>\n                {activeTab === 'compliance' && (\n                  <div className=\"stack-sm\">\n                    <p>✅ Compliance Management - Regulatory compliance and audit tracking</p>\n                    <p className=\"text-body-sm\">Database schema, API endpoints, and frontend client implemented</p>\n                  </div>\n                )}\n                {activeTab === 'inspections' && (\n                  <div className=\"stack-sm\">\n                    <p>✅ Asset Inspections - Quality control workflows with checklists</p>\n                    <p className=\"text-body-sm\">Database schema, API endpoints, and frontend client implemented</p>\n                  </div>\n                )}\n                {activeTab === 'lifecycle' && (\n                  <div className=\"stack-sm\">\n                    <p>✅ Lifecycle Management - Asset depreciation and optimization tracking</p>\n                    <p className=\"text-body-sm\">Database schema, API endpoints, and frontend client implemented</p>\n                  </div>\n                )}\n                {activeTab === 'barcode' && (\n                  <div className=\"stack-sm\">\n                    <p>✅ Barcode & QR Tracking - Label management and mobile scanning</p>\n                    <p className=\"text-body-sm\">Database schema, API endpoints, and frontend client implemented</p>\n                  </div>\n                )}\n                {!['compliance', 'inspections', 'lifecycle', 'barcode'].includes(activeTab) && (\n                  <p>This submodule has existing functionality. Navigate to the specific module for full features.</p>\n                )}\n              </div>\n            </Card>\n          )}\n        </>\n      )}\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ghxstship/apps/web/app/(app)/(shell)/assets/overview/OverviewClient.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadAssetStats'. Either include it or remove the dependency array.","line":44,"column":6,"nodeType":"ArrayExpression","endLine":44,"endColumn":13,"suggestions":[{"desc":"Update the dependencies array to be: [loadAssetStats, orgId]","fix":{"range":[1181,1188],"text":"[loadAssetStats, orgId]"}}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":166,"column":74,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[5204,5249],"text":"Monitor and manage your organization&apos;s assets"},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[5204,5249],"text":"Monitor and manage your organization&lsquo;s assets"},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[5204,5249],"text":"Monitor and manage your organization&#39;s assets"},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[5204,5249],"text":"Monitor and manage your organization&rsquo;s assets"},"desc":"Replace with `&rsquo;`."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\n\nimport { Package, TrendingUp, UserCheck, Wrench, MapPin, FileText, Plus, Activity, DollarSign, AlertTriangle } from \"lucide-react\";\nimport React, { useState, useEffect } from 'react';\nimport { User } from '@supabase/supabase-js';\nimport { createBrowserClient } from '@ghxstship/auth';\nimport { Card, Button, Badge } from '@ghxstship/ui';\nimport { animationPresets } from \"../../../../_components/ui\"\n\ninterface OverviewClientProps {\n  user: User;\n  orgId: string;\n}\n\ninterface AssetStats {\n  totalAssets: number;\n  availableAssets: number;\n  inUseAssets: number;\n  maintenanceAssets: number;\n  totalValue: number;\n  activeAssignments: number;\n  pendingMaintenance: number;\n  recentActivity: unknown[];\n}\n\nexport default function OverviewClient({ user, orgId }: OverviewClientProps) {\n  const [loading, setLoading] = useState(true);\n  const [stats, setStats] = useState<AssetStats>({\n    totalAssets: 0,\n    availableAssets: 0,\n    inUseAssets: 0,\n    maintenanceAssets: 0,\n    totalValue: 0,\n    activeAssignments: 0,\n    pendingMaintenance: 0,\n    recentActivity: []\n  });\n\n  const supabase = createBrowserClient();\n\n  useEffect(() => {\n    loadAssetStats();\n  }, [orgId]);\n\n  const loadAssetStats = async () => {\n    try {\n      setLoading(true);\n\n      // Get asset counts by status\n      const { data: assets } = await supabase\n        .from('assets')\n        .select('status, current_value')\n        .eq('organization_id', orgId);\n\n      // Get assignment counts\n      const { data: assignments } = await supabase\n        .from('asset_assignments')\n        .select('status')\n        .eq('organization_id', orgId)\n        .eq('status', 'active');\n\n      // Get maintenance counts\n      const { data: maintenance } = await supabase\n        .from('asset_maintenance')\n        .select('status')\n        .eq('organization_id', orgId)\n        .in('status', ['scheduled', 'in_progress']);\n\n      // Get recent activity\n      const { data: activity } = await supabase\n        .from('activity_logs')\n        .select('*')\n        .eq('organization_id', orgId)\n        .in('entity_type', ['asset', 'asset_assignment', 'asset_maintenance', 'asset_tracking'])\n        .order('occurred_at', { ascending: false })\n        .limit(10);\n\n      const totalAssets = assets?.length || 0;\n      const availableAssets = assets?.filter(a => a.status === 'available').length || 0;\n      const inUseAssets = assets?.filter(a => a.status === 'in_use').length || 0;\n      const maintenanceAssets = assets?.filter(a => a.status === 'under_maintenance').length || 0;\n      const totalValue = assets?.reduce((sum, asset) => sum + (asset.current_value || 0), 0) || 0;\n\n      setStats({\n        totalAssets,\n        availableAssets,\n        inUseAssets,\n        maintenanceAssets,\n        totalValue,\n        activeAssignments: assignments?.length || 0,\n        pendingMaintenance: maintenance?.length || 0,\n        recentActivity: activity || []\n      });\n    } catch (error) {\n      console.error('Error loading asset stats:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const formatCurrency = (amount: number) => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD'\n    }).format(amount);\n  };\n\n  const getActivityIcon = (entityType: string) => {\n    switch (entityType) {\n      case 'asset': return <Package className=\"h-4 w-4\" />;\n      case 'asset_assignment': return <UserCheck className=\"h-4 w-4\" />;\n      case 'asset_maintenance': return <Wrench className=\"h-4 w-4\" />;\n      case 'asset_tracking': return <MapPin className=\"h-4 w-4\" />;\n      default: return <Activity className=\"h-4 w-4\" />;\n    }\n  };\n\n  const getStatusVariant = (status: string): 'success' | 'warning' | 'destructive' | 'info' | 'secondary' => {\n    switch (status) {\n      case 'available':\n        return 'success';\n      case 'in_use':\n        return 'info';\n      case 'maintenance':\n        return 'warning';\n      case 'damaged':\n        return 'destructive';\n      default:\n        return 'secondary';\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'available': return 'hsl(var(--success))';\n      case 'in_use': return 'hsl(var(--primary))';\n      case 'under_maintenance': return 'hsl(var(--warning))';\n      case 'damaged': return 'hsl(var(--destructive))';\n      case 'missing': return 'hsl(var(--muted-foreground))';\n      default: return 'hsl(var(--muted-foreground))';\n    }\n  };\n\n  if (loading) {\n    return (\n      <div className=\"p-lg stack-lg\">\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-lg\">\n          {[...Array(4)].map((_, i) => (\n            <Card key={i} className=\"p-lg animate-pulse\">\n              <div className=\"h-4 bg-secondary rounded w-3/4 mb-sm\"></div>\n              <div className=\"h-8 bg-secondary rounded w-1/2\"></div>\n            </Card>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"p-lg stack-lg\">\n      {/* Header */}\n      <div className=\"flex justify-between items-center\">\n        <div>\n          <h1 className=\"text-heading-3 text-heading-3 color-foreground\">Assets Overview</h1>\n          <p className=\"color-muted\">Monitor and manage your organization's assets</p>\n        </div>\n        <div className=\"flex gap-sm\">\n          <Button>\n            <Plus className=\"h-4 w-4 mr-sm\" />\n            Add Asset\n          </Button>\n        </div>\n      </div>\n\n      {/* Key Metrics */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-lg\">\n        <Card className=\"p-lg\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-body-sm form-label color-muted\">Total Assets</p>\n              <p className=\"text-heading-3 text-heading-3 color-foreground\">{stats.totalAssets}</p>\n            </div>\n            <div className=\"p-sm bg-accent/10 rounded-lg\">\n              <Package className=\"h-6 w-6 color-accent\" />\n            </div>\n          </div>\n        </Card>\n\n        <Card className=\"p-lg\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-body-sm form-label color-muted\">Total Value</p>\n              <p className=\"text-heading-3 text-heading-3 color-foreground\">{formatCurrency(stats.totalValue)}</p>\n            </div>\n            <div className=\"p-sm bg-success/10 rounded-lg\">\n              <DollarSign className=\"h-6 w-6 color-success\" />\n            </div>\n          </div>\n        </Card>\n\n        <Card className=\"p-lg\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-body-sm form-label color-muted\">Active Assignments</p>\n              <p className=\"text-heading-3 text-heading-3 color-foreground\">{stats.activeAssignments}</p>\n            </div>\n            <div className=\"p-sm bg-accent/10 rounded-lg\">\n              <UserCheck className=\"h-6 w-6 color-accent\" />\n            </div>\n          </div>\n        </Card>\n\n        <Card className=\"p-lg\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-body-sm form-label color-muted\">Pending Maintenance</p>\n              <p className=\"text-heading-3 text-heading-3 color-foreground\">{stats.pendingMaintenance}</p>\n            </div>\n            <div className=\"p-sm bg-warning/10 rounded-lg\">\n              <Wrench className=\"h-6 w-6 color-warning\" />\n            </div>\n          </div>\n        </Card>\n      </div>\n\n      {/* Asset Status Breakdown */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-lg\">\n        <Card className=\"p-lg\">\n          <h3 className=\"text-body text-heading-4 mb-md\">Asset Status Breakdown</h3>\n          <div className=\"stack-md\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center gap-sm\">\n                <div className=\"w-3 h-3 rounded-full\" style={{ backgroundColor: getStatusColor('available') }}></div>\n                <span className=\"text-body-sm form-label\">Available</span>\n              </div>\n              <div className=\"flex items-center gap-sm\">\n                <span className=\"text-body-sm color-muted\">{stats.availableAssets}</span>\n                <Badge variant={getStatusVariant('available')}>\n                  {stats.totalAssets > 0 ? Math.round((stats.availableAssets / stats.totalAssets) * 100) : 0}%\n                </Badge>\n              </div>\n            </div>\n\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center gap-sm\">\n                <div className=\"w-3 h-3 rounded-full\" style={{ backgroundColor: getStatusColor('in_use') }}></div>\n                <span className=\"text-body-sm form-label\">In Use</span>\n              </div>\n              <div className=\"flex items-center gap-sm\">\n                <span className=\"text-body-sm color-muted\">{stats.inUseAssets}</span>\n                <Badge variant={getStatusVariant('in_use')}>\n                  {stats.totalAssets > 0 ? Math.round((stats.inUseAssets / stats.totalAssets) * 100) : 0}%\n                </Badge>\n              </div>\n            </div>\n\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center gap-sm\">\n                <div className=\"w-3 h-3 rounded-full\" style={{ backgroundColor: getStatusColor('under_maintenance') }}></div>\n                <span className=\"text-body-sm form-label\">Under Maintenance</span>\n              </div>\n              <div className=\"flex items-center gap-sm\">\n                <span className=\"text-body-sm color-muted\">{stats.maintenanceAssets}</span>\n                <Badge variant={getStatusVariant('under_maintenance')}>\n                  {stats.totalAssets > 0 ? Math.round((stats.maintenanceAssets / stats.totalAssets) * 100) : 0}%\n                </Badge>\n              </div>\n            </div>\n          </div>\n        </Card>\n\n        <Card className=\"p-lg\">\n          <h3 className=\"text-body text-heading-4 mb-md\">Quick Actions</h3>\n          <div className=\"grid grid-cols-2 gap-sm\">\n            <Button variant=\"outline\" className=\"h-auto p-md flex flex-col items-center gap-sm\">\n              <Package className=\"h-6 w-6\" />\n              <span className=\"text-body-sm\">Add Asset</span>\n            </Button>\n            <Button variant=\"outline\" className=\"h-auto p-md flex flex-col items-center gap-sm\">\n              <TrendingUp className=\"h-6 w-6\" />\n              <span className=\"text-body-sm\">Create Advance</span>\n            </Button>\n            <Button variant=\"outline\" className=\"h-auto p-md flex flex-col items-center gap-sm\">\n              <UserCheck className=\"h-6 w-6\" />\n              <span className=\"text-body-sm\">New Assignment</span>\n            </Button>\n            <Button variant=\"outline\" className=\"h-auto p-md flex flex-col items-center gap-sm\">\n              <Wrench className=\"h-6 w-6\" />\n              <span className=\"text-body-sm\">Schedule Maintenance</span>\n            </Button>\n          </div>\n        </Card>\n      </div>\n\n      {/* Recent Activity */}\n      <Card className=\"p-lg\">\n        <div className=\"flex items-center justify-between mb-md\">\n          <h3 className=\"text-body text-heading-4\">Recent Activity</h3>\n          <Button>\n            <Activity className=\"h-4 w-4 mr-sm\" />\n            View All\n          </Button>\n        </div>\n        \n        <div className=\"stack-sm\">\n          {stats.recentActivity.length > 0 ? (\n            stats.recentActivity.map((activity, index) => (\n              <div key={index} className=\"flex items-center gap-sm p-sm bg-secondary/50 rounded-lg\">\n                <div className=\"p-sm bg-background rounded-lg\">\n                  {getActivityIcon(activity.entity_type)}\n                </div>\n                <div className=\"flex-1\">\n                  <p className=\"text-body-sm form-label\">\n                    {activity.action === 'create' ? 'Created' : \n                     activity.action === 'update' ? 'Updated' : \n                     activity.action === 'delete' ? 'Deleted' : activity.action} {' '}\n                    {activity.entity_type.replace('_', ' ')}\n                  </p>\n                  <p className=\"text-body-sm color-muted\">\n                    {new Date(activity.occurred_at).toLocaleString()}\n                  </p>\n                </div>\n                {activity.metadata?.status && (\n                  <Badge variant={getStatusVariant(activity.metadata.status)}>\n                    {activity.metadata.status}\n                  </Badge>\n                )}\n              </div>\n            ))\n          ) : (\n            <div className=\"text-center py-xl color-muted\">\n              <Activity className=\"h-12 w-12 mx-auto mb-sm opacity-50\" />\n              <p>No recent activity</p>\n            </div>\n          )}\n        </div>\n      </Card>\n\n      {/* Alerts & Notifications */}\n      {stats.pendingMaintenance > 0 && (\n        <Card className=\"p-lg border-warning/20 bg-warning/5\">\n          <div className=\"flex items-center gap-sm\">\n            <AlertTriangle className=\"h-6 w-6 color-warning\" />\n            <div>\n              <h4 className=\"text-heading-4 color-warning\">Maintenance Required</h4>\n              <p className=\"text-body-sm color-warning/80\">\n                {stats.pendingMaintenance} asset{stats.pendingMaintenance !== 1 ? 's' : ''} require{stats.pendingMaintenance === 1 ? 's' : ''} maintenance attention\n              </p>\n            </div>\n            <Button className=\"ml-auto\">\n              View Details\n            </Button>\n          </div>\n        </Card>\n      )}\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ghxstship/apps/web/app/(app)/(shell)/assets/reports/ReportsClient.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadReports'. Either include it or remove the dependency array.","line":67,"column":6,"nodeType":"ArrayExpression","endLine":67,"endColumn":13,"suggestions":[{"desc":"Update the dependencies array to be: [loadReports, orgId]","fix":{"range":[2740,2747],"text":"[loadReports, orgId]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'filterReports'. Either include it or remove the dependency array.","line":71,"column":6,"nodeType":"ArrayExpression","endLine":71,"endColumn":58,"suggestions":[{"desc":"Update the dependencies array to be: [reports, searchQuery, selectedType, selectedStatus, filterReports]","fix":{"range":[2797,2849],"text":"[reports, searchQuery, selectedType, selectedStatus, filterReports]"}}]},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Download' is not defined.","line":302,"column":14,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":302,"endColumn":22},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'BarChart3' is not defined.","line":399,"column":26,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":399,"endColumn":35},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Download' is not defined.","line":420,"column":32,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":420,"endColumn":40},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Package' is not defined.","line":489,"column":18,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":489,"endColumn":25},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'DollarSign' is not defined.","line":517,"column":18,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":517,"endColumn":28},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'PieChart' is not defined.","line":573,"column":18,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":573,"endColumn":26}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { User, FileText, Settings, Award, Calendar, TrendingUp, Activity, Clock, Plus, Search, Play, Trash2 } from \"lucide-react\";\nimport { useState, useEffect } from 'react';\nimport { Card, Button, UnifiedInput, Badge, Drawer } from '@ghxstship/ui';\n// ChartBar component removed - using simple div for now\nimport { createBrowserClient } from '@ghxstship/auth';\nimport { useTranslations } from 'next-intl';\n\ninterface AssetReport {\n  id: string;\n  organizationId: string;\n  title: string;\n  type: 'usage' | 'cost' | 'maintenance' | 'depreciation' | 'inventory' | 'performance';\n  status: 'generating' | 'ready' | 'scheduled' | 'failed';\n  dateRange: {\n    start: string;\n    end: string;\n  };\n  filters?: {\n    categories?: string[];\n    locations?: string[];\n    assignees?: string[];\n  };\n  generatedBy: string;\n  generatedAt?: string;\n  scheduledFor?: string;\n  fileUrl?: string;\n  summary?: {\n    totalAssets?: number;\n    totalValue?: number;\n    utilizationRate?: number;\n    maintenanceCost?: number;\n    topCategory?: string;\n  };\n  createdAt?: string;\n}\n\ninterface ReportsClientProps {\n  orgId: string;\n}\n\nconst REPORT_TYPES = [\n  { id: 'usage', name: 'Asset Usage Report', description: 'Track asset utilization and assignment patterns', icon: BarChart3 },\n  { id: 'cost', name: 'Cost Analysis Report', description: 'Analyze asset costs, ROI, and financial performance', icon: DollarSign },\n  { id: 'maintenance', name: 'Maintenance Report', description: 'Review maintenance schedules, costs, and performance', icon: Package },\n  { id: 'depreciation', name: 'Depreciation Report', description: 'Calculate asset depreciation and current values', icon: TrendingUp },\n  { id: 'inventory', name: 'Inventory Report', description: 'Complete asset inventory and status overview', icon: Package },\n  { id: 'performance', name: 'Performance Report', description: 'Asset performance metrics and KPIs', icon: PieChart }\n];\n\nexport default function ReportsClient({ orgId }: ReportsClientProps) {\n  const t = useTranslations('assets.reports');\n  const supabase = createBrowserClient();\n  const [reports, setReports] = useState<AssetReport[]>([]);\n  const [filteredReports, setFilteredReports] = useState<AssetReport[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [searchQuery, setSearchQuery] = useState('');\n  const [selectedType, setSelectedType] = useState<string>('all');\n  const [selectedStatus, setSelectedStatus] = useState<string>('all');\n  const [showDrawer, setShowDrawer] = useState(false);\n  const [selectedReport, setSelectedReport] = useState<AssetReport | null>(null);\n  const [activeTab, setActiveTab] = useState<'reports' | 'analytics'>('reports');\n\n  useEffect(() => {\n    loadReports();\n  }, [orgId]);\n\n  useEffect(() => {\n    filterReports();\n  }, [reports, searchQuery, selectedType, selectedStatus]);\n\n  const loadReports = async () => {\n    setLoading(true);\n    try {\n      const { data, error } = await supabase\n        .from('asset_reports')\n        .select('*')\n        .eq('organization_id', orgId)\n        .order('created_at', { ascending: false });\n\n      if (error) {\n        console.error('Error loading reports:', error);\n        setReports(generateDemoReports());\n      } else {\n        setReports(data || []);\n      }\n    } catch (error) {\n      console.error('Error loading reports:', error);\n      setReports(generateDemoReports());\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const generateDemoReports = (): AssetReport[] => [\n    {\n      id: '1',\n      organizationId: orgId,\n      title: 'Monthly Asset Usage Report - August 2024',\n      type: 'usage',\n      status: 'ready',\n      dateRange: {\n        start: '2024-08-01T00:00:00Z',\n        end: '2024-08-31T23:59:59Z'\n      },\n      generatedBy: 'Captain Blackbeard',\n      generatedAt: '2024-08-07T10:00:00Z',\n      fileUrl: '/reports/usage-august-2024.pdf',\n      summary: {\n        totalAssets: 156,\n        utilizationRate: 78.5,\n        topCategory: 'Artist Technical'\n      },\n      createdAt: '2024-08-07T10:00:00Z'\n    },\n    {\n      id: '2',\n      organizationId: orgId,\n      title: 'Q2 2024 Cost Analysis Report',\n      type: 'cost',\n      status: 'ready',\n      dateRange: {\n        start: '2024-04-01T00:00:00Z',\n        end: '2024-06-30T23:59:59Z'\n      },\n      generatedBy: 'Quartermaster Hook',\n      generatedAt: '2024-07-15T14:30:00Z',\n      fileUrl: '/reports/cost-analysis-q2-2024.pdf',\n      summary: {\n        totalAssets: 142,\n        totalValue: 2450000,\n        maintenanceCost: 45000\n      },\n      createdAt: '2024-07-15T14:30:00Z'\n    },\n    {\n      id: '3',\n      organizationId: orgId,\n      title: 'Maintenance Performance Report - July 2024',\n      type: 'maintenance',\n      status: 'ready',\n      dateRange: {\n        start: '2024-07-01T00:00:00Z',\n        end: '2024-07-31T23:59:59Z'\n      },\n      generatedBy: 'Chief Engineer Sparks',\n      generatedAt: '2024-08-01T09:15:00Z',\n      fileUrl: '/reports/maintenance-july-2024.pdf',\n      summary: {\n        totalAssets: 156,\n        maintenanceCost: 12500,\n        utilizationRate: 95.2\n      },\n      createdAt: '2024-08-01T09:15:00Z'\n    },\n    {\n      id: '4',\n      organizationId: orgId,\n      title: 'Annual Depreciation Report 2024',\n      type: 'depreciation',\n      status: 'generating',\n      dateRange: {\n        start: '2024-01-01T00:00:00Z',\n        end: '2024-12-31T23:59:59Z'\n      },\n      generatedBy: 'Financial Officer Doubloon',\n      createdAt: '2024-08-07T16:00:00Z'\n    },\n    {\n      id: '5',\n      organizationId: orgId,\n      title: 'Weekly Inventory Report',\n      type: 'inventory',\n      status: 'scheduled',\n      dateRange: {\n        start: '2024-08-05T00:00:00Z',\n        end: '2024-08-11T23:59:59Z'\n      },\n      generatedBy: 'Inventory Manager Compass',\n      scheduledFor: '2024-08-12T08:00:00Z',\n      createdAt: '2024-08-05T11:30:00Z'\n    },\n    {\n      id: '6',\n      organizationId: orgId,\n      title: 'Asset Performance Dashboard - Failed',\n      type: 'performance',\n      status: 'failed',\n      dateRange: {\n        start: '2024-08-01T00:00:00Z',\n        end: '2024-08-07T23:59:59Z'\n      },\n      generatedBy: 'Data Analyst Sextant',\n      createdAt: '2024-08-06T13:45:00Z'\n    }\n  ];\n\n  const filterReports = () => {\n    let filtered = [...reports];\n\n    // Search filter\n    if (searchQuery) {\n      filtered = filtered.filter(report =>\n        report.title.toLowerCase().includes(searchQuery.toLowerCase()) ||\n        report.generatedBy.toLowerCase().includes(searchQuery.toLowerCase())\n      );\n    }\n\n    // Type filter\n    if (selectedType !== 'all') {\n      filtered = filtered.filter(report => report.type === selectedType);\n    }\n\n    // Status filter\n    if (selectedStatus !== 'all') {\n      filtered = filtered.filter(report => report.status === selectedStatus);\n    }\n\n    setFilteredReports(filtered);\n  };\n\n  const handleCreateReport = () => {\n    setSelectedReport(null);\n    setShowDrawer(true);\n  };\n\n  const handleDownloadReport = (report: AssetReport) => {\n    if (report.fileUrl) {\n      // Simulate download\n      alert(`Downloading: ${report.title}`);\n    }\n  };\n\n  const handleRegenerateReport = async (reportId: string) => {\n    if (confirm('Regenerate this report with current data?')) {\n      setReports(prev => prev.map(r => \n        r.id === reportId \n          ? { ...r, status: 'generating' as const, generatedAt: undefined }\n          : r\n      ));\n      \n      // Simulate report generation\n      setTimeout(() => {\n        setReports(prev => prev.map(r => \n          r.id === reportId \n            ? { ...r, status: 'ready' as const, generatedAt: new Date().toISOString() }\n            : r\n        ));\n      }, 3000);\n    }\n  };\n\n  const getStatusBadge = (status: AssetReport['status']) => {\n    switch (status) {\n      case 'ready':\n        return <Badge variant=\"success\">Ready</Badge>;\n      case 'generating':\n        return <Badge variant=\"warning\">Generating</Badge>;\n      case 'scheduled':\n        return <Badge variant=\"secondary\">Scheduled</Badge>;\n      case 'failed':\n        return <Badge variant=\"destructive\">Failed</Badge>;\n      default:\n        return <Badge variant=\"outline\">{status}</Badge>;\n    }\n  };\n\n  const getTypeBadge = (type: AssetReport['type']) => {\n    const reportType = REPORT_TYPES.find(t => t.id === type);\n    return <Badge variant=\"outline\">{reportType?.name || type}</Badge>;\n  };\n\n  const formatDateTime = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString('en-US', {\n      month: 'short',\n      day: 'numeric',\n      year: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit'\n    });\n  };\n\n  const formatCurrency = (value: number) => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD',\n      minimumFractionDigits: 0,\n      maximumFractionDigits: 0\n    }).format(value);\n  };\n\n  return (\n    <div className=\"stack-lg\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-heading-3 text-heading-3 font-anton uppercase\">Asset Reports & Analytics</h1>\n          <p className=\"text-body-sm color-muted\">Generate insights and reports on asset performance</p>\n        </div>\n        <div className=\"flex items-center gap-sm\">\n          <Button variant=\"outline\" className=\"flex items-center gap-sm\">\n            <Download className=\"w-4 h-4\" />\n            Export All\n          </Button>\n          <Button onClick={handleCreateReport} className=\"flex items-center gap-sm\">\n            <Plus className=\"w-4 h-4\" />\n            Generate Report\n          </Button>\n        </div>\n      </div>\n\n      {/* Tabs */}\n      <div className=\"flex cluster-xs bg-secondary p-xs rounded-lg w-fit\">\n        <button\n          onClick={() => setActiveTab('reports')}\n          className={`px-md py-sm rounded-md text-body-sm form-label transition-colors ${\n            activeTab === 'reports'\n              ? 'bg-background color-foreground shadow-surface'\n              : 'color-muted hover:color-foreground'\n          }`}\n        >\n          Reports\n        </button>\n        <button\n          onClick={() => setActiveTab('analytics')}\n          className={`px-md py-sm rounded-md text-body-sm form-label transition-colors ${\n            activeTab === 'analytics'\n              ? 'bg-background color-foreground shadow-surface'\n              : 'color-muted hover:color-foreground'\n          }`}\n        >\n          Analytics Dashboard\n        </button>\n      </div>\n\n      {activeTab === 'reports' ? (\n        <>\n          {/* Filters */}\n          <Card>\n            <div className=\"p-md\">\n              <div className=\"flex flex-wrap items-center gap-md\">\n                <div className=\"flex-1 min-w-64\">\n                  <div className=\"relative\">\n                    <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 color-muted w-4 h-4\" />\n                    <UnifiedInput                       placeholder=\"Search reports...\"\n                      value={searchQuery}\n                      onChange={(e: React.ChangeEvent<HTMLInputElement>) => setSearchQuery(e.target.value)}\n                      className=\"pl-2xl\"\n                    />\n                  </div>\n                </div>\n                <div className=\"flex items-center gap-sm\">\n                  <select\n                    value={selectedType}\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => setSelectedType(e.target.value)}\n                    className=\" px-md py-sm border border-border rounded-md focus:outline-none focus:ring-2 focus:ring-primary\"\n                  >\n                    <option value=\"all\">All Types</option>\n                    {REPORT_TYPES.map(type => (\n                      <option key={type.id} value={type.id}>\n                        {type.name}\n                      </option>\n                    ))}\n                  </select>\n                  <select\n                    value={selectedStatus}\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => setSelectedStatus(e.target.value)}\n                    className=\" px-md py-sm border border-border rounded-md focus:outline-none focus:ring-2 focus:ring-primary\"\n                  >\n                    <option value=\"all\">All Status</option>\n                    <option value=\"ready\">Ready</option>\n                    <option value=\"generating\">Generating</option>\n                    <option value=\"scheduled\">Scheduled</option>\n                    <option value=\"failed\">Failed</option>\n                  </select>\n                </div>\n              </div>\n            </div>\n          </Card>\n\n          {/* Reports List */}\n          {loading ? (\n            <Card>\n              <div className=\"p-xl text-center color-muted\">Loading reports...</div>\n            </Card>\n          ) : filteredReports.length === 0 ? (\n            <Card>\n              <div className=\"p-xl text-center color-muted\">\n                No reports found matching your criteria.\n              </div>\n            </Card>\n          ) : (\n            <div className=\"stack-md\">\n              {filteredReports.map(report => (\n                <Card key={report.id} className=\"hover:shadow-elevated transition-shadow\">\n                  <div className=\"p-md\">\n                    <div className=\"flex items-start justify-between mb-sm\">\n                      <div className=\"flex items-center gap-sm\">\n                        <BarChart3 className=\"w-5 h-5 color-muted\" />\n                        <div>\n                          <h3 className=\"text-body text-heading-4\">{report.title}</h3>\n                          <p className=\"text-body-sm color-muted\">\n                            Generated by {report.generatedBy} • \n                            {report.generatedAt ? formatDateTime(report.generatedAt) : \n                             report.scheduledFor ? `Scheduled for ${formatDateTime(report.scheduledFor)}` : \n                             'In progress'}\n                          </p>\n                        </div>\n                      </div>\n                      <div className=\"flex items-center gap-sm\">\n                        {getStatusBadge(report.status)}\n                        {getTypeBadge(report.type)}\n                        <div className=\"flex items-center gap-xs ml-sm\">\n                          {report.status === 'ready' && (\n                            <Button\n                             \n                              variant=\"outline\"\n                              onClick={() => handleDownloadReport(report)}\n                            >\n                              <Download className=\"w-3 h-3 mr-xs\" />\n                              Download\n                            </Button>\n                          )}\n                          {(report.status === 'ready' || report.status === 'failed') && (\n                            <Button\n                             \n                              variant=\"outline\"\n                              onClick={() => handleRegenerateReport(report.id)}\n                            >\n                              Regenerate\n                            </Button>\n                          )}\n                        </div>\n                      </div>\n                    </div>\n\n                    <div className=\"grid grid-cols-2 md:grid-cols-4 gap-md mb-md\">\n                      <div>\n                        <span className=\"text-body-sm color-muted block\">Date Range</span>\n                        <span className=\"text-body-sm form-label\">\n                          {new Date(report.dateRange.start).toLocaleDateString()} - {new Date(report.dateRange.end).toLocaleDateString()}\n                        </span>\n                      </div>\n                      {report.summary?.totalAssets && (\n                        <div>\n                          <span className=\"text-body-sm color-muted block\">Total Assets</span>\n                          <span className=\"form-label\">{report.summary.totalAssets}</span>\n                        </div>\n                      )}\n                      {report.summary?.totalValue && (\n                        <div>\n                          <span className=\"text-body-sm color-muted block\">Total Value</span>\n                          <span className=\"form-label\">{formatCurrency(report.summary.totalValue)}</span>\n                        </div>\n                      )}\n                      {report.summary?.utilizationRate && (\n                        <div>\n                          <span className=\"text-body-sm color-muted block\">Utilization</span>\n                          <span className=\"form-label\">{report.summary.utilizationRate}%</span>\n                        </div>\n                      )}\n                    </div>\n\n                    {report.summary?.maintenanceCost && (\n                      <div className=\"flex items-center gap-md text-body-sm mb-sm\">\n                        <span className=\"color-muted\">Maintenance Cost:</span>\n                        <span className=\"form-label\">{formatCurrency(report.summary.maintenanceCost)}</span>\n                        {report.summary.topCategory && (\n                          <>\n                            <span className=\"color-muted\">Top Category:</span>\n                            <span>{report.summary.topCategory}</span>\n                          </>\n                        )}\n                      </div>\n                    )}\n                  </div>\n                </Card>\n              ))}\n            </div>\n          )}\n        </>\n      ) : (\n        /* Analytics Dashboard */\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-lg\">\n          {/* Asset Overview */}\n          <Card>\n            <div className=\"p-lg\">\n              <div className=\"flex items-center gap-sm mb-md\">\n                <Package className=\"w-5 h-5 color-accent\" />\n                <h3 className=\"text-body text-heading-4\">Asset Overview</h3>\n              </div>\n              <div className=\"stack-sm\">\n                <div className=\"flex justify-between\">\n                  <span className=\"text-body-sm color-muted\">Total Assets</span>\n                  <span className=\"form-label\">156</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-body-sm color-muted\">Available</span>\n                  <span className=\"form-label color-success\">89</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-body-sm color-muted\">In Use</span>\n                  <span className=\"form-label color-accent\">52</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-body-sm color-muted\">Maintenance</span>\n                  <span className=\"form-label color-warning\">15</span>\n                </div>\n              </div>\n            </div>\n          </Card>\n\n          {/* Financial Summary */}\n          <Card>\n            <div className=\"p-lg\">\n              <div className=\"flex items-center gap-sm mb-md\">\n                <DollarSign className=\"w-5 h-5 color-success\" />\n                <h3 className=\"text-body text-heading-4\">Financial Summary</h3>\n              </div>\n              <div className=\"stack-sm\">\n                <div className=\"flex justify-between\">\n                  <span className=\"text-body-sm color-muted\">Total Value</span>\n                  <span className=\"form-label\">{formatCurrency(2450000)}</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-body-sm color-muted\">This Month</span>\n                  <span className=\"form-label color-success\">{formatCurrency(45000)}</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-body-sm color-muted\">Maintenance</span>\n                  <span className=\"form-label color-destructive\">{formatCurrency(12500)}</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-body-sm color-muted\">Depreciation</span>\n                  <span className=\"form-label color-warning\">{formatCurrency(8200)}</span>\n                </div>\n              </div>\n            </div>\n          </Card>\n\n          {/* Utilization Metrics */}\n          <Card>\n            <div className=\"p-lg\">\n              <div className=\"flex items-center gap-sm mb-md\">\n                <TrendingUp className=\"w-5 h-5 color-secondary\" />\n                <h3 className=\"text-body text-heading-4\">Utilization</h3>\n              </div>\n              <div className=\"stack-sm\">\n                <div className=\"flex justify-between\">\n                  <span className=\"text-body-sm color-muted\">Overall Rate</span>\n                  <span className=\"form-label\">78.5%</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-body-sm color-muted\">Artist Technical</span>\n                  <span className=\"form-label color-success\">92%</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-body-sm color-muted\">Site Vehicles</span>\n                  <span className=\"form-label color-accent\">85%</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-body-sm color-muted\">Heavy Machinery</span>\n                  <span className=\"form-label color-warning\">65%</span>\n                </div>\n              </div>\n            </div>\n          </Card>\n\n          {/* Top Categories */}\n          <Card className=\"md:col-span-2\">\n            <div className=\"p-lg\">\n              <div className=\"flex items-center gap-sm mb-md\">\n                <PieChart className=\"w-5 h-5 color-accent\" />\n                <h3 className=\"text-body text-heading-4\">Asset Distribution by Category</h3>\n              </div>\n              <div className=\"stack-sm\">\n                <div className=\"flex justify-between text-sm\">\n                  <span>Active (65%)</span>\n                  <span>45</span>\n                </div>\n                <div className=\"w-full bg-muted rounded-full h-2\">\n                  <div className=\"bg-success h-2 rounded-full\" style={{width: '65%'}}></div>\n                </div>\n              </div>\n            </div>\n          </Card>\n\n          {/* Recent Activity */}\n          <Card>\n            <div className=\"p-lg\">\n              <div className=\"flex items-center gap-sm mb-md\">\n                <Calendar className=\"w-5 h-5 color-accent\" />\n                <h3 className=\"text-body text-heading-4\">Recent Activity</h3>\n              </div>\n              <div className=\"stack-sm\">\n                <div className=\"text-body-sm\">\n                  <div className=\"form-label\">Sound System</div>\n                  <div className=\"color-muted\">Assigned to Main Stage</div>\n                  <div className=\"text-body-sm color-muted\">2 hours ago</div>\n                </div>\n                <div className=\"text-body-sm\">\n                  <div className=\"form-label\">Generator Maintenance</div>\n                  <div className=\"color-muted\">Completed inspection</div>\n                  <div className=\"text-body-sm color-muted\">5 hours ago</div>\n                </div>\n                <div className=\"text-body-sm\">\n                  <div className=\"form-label\">New LED Panels</div>\n                  <div className=\"color-muted\">Added to inventory</div>\n                  <div className=\"text-body-sm color-muted\">1 day ago</div>\n                </div>\n              </div>\n            </div>\n          </Card>\n        </div>\n      )}\n\n      {/* Report Generation Drawer */}\n      <Drawer\n        open={showDrawer}\n        onClose={() => setShowDrawer(false)}\n        title=\"Generate New Report\"\n       \n      >\n        <div className=\"p-lg stack-md\">\n          <div>\n            <label className=\"block text-body-sm form-label mb-xs\">Report Type</label>\n            <select className=\"w-full  px-md py-sm border border-border rounded-md focus:outline-none focus:ring-2 focus:ring-primary\">\n              {REPORT_TYPES.map(type => (\n                <option key={type.id} value={type.id}>\n                  {type.name}\n                </option>\n              ))}\n            </select>\n          </div>\n          <div>\n            <label className=\"block text-body-sm form-label mb-xs\">Report Title</label>\n            <UnifiedInput placeholder=\"Enter report title\" />\n          </div>\n          <div className=\"grid grid-cols-2 gap-md\">\n            <div>\n              <label className=\"block text-body-sm form-label mb-xs\">Start Date</label>\n              <UnifiedInput type=\"date\" />\n            </div>\n            <div>\n              <label className=\"block text-body-sm form-label mb-xs\">End Date</label>\n              <UnifiedInput type=\"date\" />\n            </div>\n          </div>\n          <div>\n            <label className=\"block text-body-sm form-label mb-xs\">Categories (Optional)</label>\n            <UnifiedInput placeholder=\"Select categories to include\" />\n          </div>\n          <div>\n            <label className=\"block text-body-sm form-label mb-xs\">Additional Filters</label>\n            <textarea\n              className=\"w-full  px-md py-sm border border-border rounded-md focus:outline-none focus:ring-2 focus:ring-primary\"\n              rows={3}\n              placeholder=\"Specify any additional filters or requirements\"\n            />\n          </div>\n          <div className=\"flex gap-sm pt-md\">\n            <Button className=\"flex-1\">Generate Report</Button>\n            <Button variant=\"outline\" onClick={() => setShowDrawer(false)}>\n              Cancel\n            </Button>\n          </div>\n        </div>\n      </Drawer>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ghxstship/apps/web/app/(app)/(shell)/assets/tracking/TrackingClient.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadTrackingData'. Either include it or remove the dependency array.","line":52,"column":6,"nodeType":"ArrayExpression","endLine":52,"endColumn":13,"suggestions":[{"desc":"Update the dependencies array to be: [loadTrackingData, orgId]","fix":{"range":[1811,1818],"text":"[loadTrackingData, orgId]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'filterData'. Either include it or remove the dependency array.","line":56,"column":6,"nodeType":"ArrayExpression","endLine":56,"endColumn":65,"suggestions":[{"desc":"Update the dependencies array to be: [trackingData, searchQuery, selectedStatus, selectedMethod, filterData]","fix":{"range":[1865,1924],"text":"[trackingData, searchQuery, selectedStatus, selectedMethod, filterData]"}}]},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Scan' is not defined.","line":303,"column":14,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":303,"endColumn":18},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Download' is not defined.","line":307,"column":14,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":307,"endColumn":22},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'MapPin' is not defined.","line":375,"column":22,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":375,"endColumn":28},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Edit' is not defined.","line":467,"column":22,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":467,"endColumn":26}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { User, FileText, Settings, Award, Calendar, TrendingUp, Activity, Clock, Plus, Search, Play, Trash2 } from \"lucide-react\";\nimport { useState, useEffect } from 'react';\nimport { Card, Button, UnifiedInput, Badge, Drawer } from '@ghxstship/ui';\nimport { createBrowserClient } from '@ghxstship/auth';\nimport { useTranslations } from 'next-intl';\n\ninterface AssetTracking {\n  id: string;\n  organizationId: string;\n  assetId: string;\n  assetName: string;\n  currentLocation: string;\n  previousLocation?: string;\n  status: 'active' | 'idle' | 'in_transit' | 'maintenance' | 'offline';\n  lastSeen: string;\n  trackedBy: string;\n  trackingMethod: 'manual' | 'barcode' | 'qr_code' | 'rfid' | 'gps';\n  coordinates?: {\n    latitude: number;\n    longitude: number;\n  };\n  temperature?: number;\n  humidity?: number;\n  batteryLevel?: number;\n  signalStrength?: number;\n  notes?: string;\n  createdAt?: string;\n  updatedAt?: string;\n}\n\ninterface TrackingClientProps {\n  orgId: string;\n}\n\nexport default function TrackingClient({ orgId }: TrackingClientProps) {\n  const t = useTranslations('assets.tracking');\n  const supabase = createBrowserClient();\n  const [trackingData, setTrackingData] = useState<AssetTracking[]>([]);\n  const [filteredData, setFilteredData] = useState<AssetTracking[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [searchQuery, setSearchQuery] = useState('');\n  const [selectedStatus, setSelectedStatus] = useState<string>('all');\n  const [selectedMethod, setSelectedMethod] = useState<string>('all');\n  const [showDrawer, setShowDrawer] = useState(false);\n  const [selectedTracking, setSelectedTracking] = useState<AssetTracking | null>(null);\n  const [view, setView] = useState<'grid' | 'list' | 'kanban'>('grid');\n\n  useEffect(() => {\n    loadTrackingData();\n  }, [orgId]);\n\n  useEffect(() => {\n    filterData();\n  }, [trackingData, searchQuery, selectedStatus, selectedMethod]);\n\n  const loadTrackingData = async () => {\n    setLoading(true);\n    try {\n      const { data, error } = await supabase\n        .from('asset_tracking')\n        .select(`\n          *,\n          assets!inner(name)\n        `)\n        .eq('organization_id', orgId)\n        .order('last_seen', { ascending: false });\n\n      if (error) {\n        console.error('Error loading tracking data:', error);\n        setTrackingData(generateDemoTrackingData());\n      } else {\n        const mappedData = (data || []).map(item => ({\n          ...item,\n          assetName: item.assets?.name || 'Unknown Asset'\n        }));\n        setTrackingData(mappedData);\n      }\n    } catch (error) {\n      console.error('Error loading tracking data:', error);\n      setTrackingData(generateDemoTrackingData());\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const generateDemoTrackingData = (): AssetTracking[] => [\n    {\n      id: '1',\n      organizationId: orgId,\n      assetId: 'asset-001',\n      assetName: 'Professional Sound System',\n      currentLocation: 'Main Stage Area',\n      previousLocation: 'Equipment Storage - Bay 2',\n      status: 'active',\n      lastSeen: '2024-08-07T15:30:00Z',\n      trackedBy: 'Tech Specialist Sparks',\n      trackingMethod: 'rfid',\n      coordinates: {\n        latitude: 40.7128,\n        longitude: -74.0060\n      },\n      temperature: 22.5,\n      humidity: 45,\n      batteryLevel: 85,\n      signalStrength: 92,\n      notes: 'System operational and performing well',\n      createdAt: '2024-08-01T09:00:00Z'\n    },\n    {\n      id: '2',\n      organizationId: orgId,\n      assetId: 'asset-002',\n      assetName: 'LED Video Wall Panels',\n      currentLocation: 'Tech Workshop',\n      previousLocation: 'Storage Warehouse',\n      status: 'maintenance',\n      lastSeen: '2024-08-07T14:15:00Z',\n      trackedBy: 'Maintenance Crew',\n      trackingMethod: 'qr_code',\n      temperature: 24.1,\n      humidity: 38,\n      notes: 'Undergoing pixel replacement and calibration',\n      createdAt: '2024-08-02T10:30:00Z'\n    },\n    {\n      id: '3',\n      organizationId: orgId,\n      assetId: 'asset-003',\n      assetName: 'Crew Transport Van',\n      currentLocation: 'En Route to Venue',\n      previousLocation: 'Vehicle Bay 1',\n      status: 'in_transit',\n      lastSeen: '2024-08-07T16:45:00Z',\n      trackedBy: 'Driver Compass',\n      trackingMethod: 'gps',\n      coordinates: {\n        latitude: 40.7589,\n        longitude: -73.9851\n      },\n      batteryLevel: 78,\n      signalStrength: 88,\n      notes: 'Transporting crew to evening setup',\n      createdAt: '2024-08-03T08:00:00Z'\n    },\n    {\n      id: '4',\n      organizationId: orgId,\n      assetId: 'asset-004',\n      assetName: 'Mobile Generator Unit',\n      currentLocation: 'Power Station - Backup',\n      status: 'idle',\n      lastSeen: '2024-08-07T12:00:00Z',\n      trackedBy: 'Chief Engineer Sparks',\n      trackingMethod: 'manual',\n      temperature: 28.3,\n      humidity: 52,\n      batteryLevel: 100,\n      notes: 'Standby mode - ready for emergency activation',\n      createdAt: '2024-08-04T11:20:00Z'\n    },\n    {\n      id: '5',\n      organizationId: orgId,\n      assetId: 'asset-005',\n      assetName: 'Security Camera System',\n      currentLocation: 'Security Office',\n      status: 'offline',\n      lastSeen: '2024-08-06T22:30:00Z',\n      trackedBy: 'Security Chief Bones',\n      trackingMethod: 'rfid',\n      temperature: 26.7,\n      humidity: 41,\n      batteryLevel: 15,\n      signalStrength: 0,\n      notes: 'OFFLINE: Low battery detected. Maintenance required',\n      createdAt: '2024-08-05T14:45:00Z'\n    },\n    {\n      id: '6',\n      organizationId: orgId,\n      assetId: 'asset-006',\n      assetName: 'Catering Equipment Set',\n      currentLocation: 'Galley Storage',\n      previousLocation: 'VIP Catering Area',\n      status: 'active',\n      lastSeen: '2024-08-07T13:20:00Z',\n      trackedBy: 'Galley Master Grub',\n      trackingMethod: 'barcode',\n      temperature: 4.2,\n      humidity: 85,\n      notes: 'Refrigeration units maintaining proper temperature',\n      createdAt: '2024-08-06T09:15:00Z'\n    }\n  ];\n\n  const filterData = () => {\n    let filtered = [...trackingData];\n\n    // Search filter\n    if (searchQuery) {\n      filtered = filtered.filter(item =>\n        item.assetName.toLowerCase().includes(searchQuery.toLowerCase()) ||\n        item.currentLocation.toLowerCase().includes(searchQuery.toLowerCase()) ||\n        item.trackedBy.toLowerCase().includes(searchQuery.toLowerCase())\n      );\n    }\n\n    // Status filter\n    if (selectedStatus !== 'all') {\n      filtered = filtered.filter(item => item.status === selectedStatus);\n    }\n\n    // Method filter\n    if (selectedMethod !== 'all') {\n      filtered = filtered.filter(item => item.trackingMethod === selectedMethod);\n    }\n\n    setFilteredData(filtered);\n  };\n\n  const handleUpdateLocation = (tracking: AssetTracking) => {\n    setSelectedTracking(tracking);\n    setShowDrawer(true);\n  };\n\n  const handleScanBarcode = () => {\n    // Placeholder for barcode scanning functionality\n    alert('Barcode scanning feature would be implemented here');\n  };\n\n  const getStatusBadge = (status: AssetTracking['status']) => {\n    switch (status) {\n      case 'active':\n        return <Badge variant=\"success\">Active</Badge>;\n      case 'idle':\n        return <Badge variant=\"secondary\">Idle</Badge>;\n      case 'in_transit':\n        return <Badge variant=\"warning\">In Transit</Badge>;\n      case 'maintenance':\n        return <Badge variant=\"warning\">Maintenance</Badge>;\n      case 'offline':\n        return <Badge variant=\"destructive\">Offline</Badge>;\n      default:\n        return <Badge variant=\"outline\">{status}</Badge>;\n    }\n  };\n\n  const getMethodBadge = (method: AssetTracking['trackingMethod']) => {\n    switch (method) {\n      case 'manual':\n        return <Badge variant=\"outline\">Manual</Badge>;\n      case 'barcode':\n        return <Badge variant=\"secondary\">Barcode</Badge>;\n      case 'qr_code':\n        return <Badge variant=\"secondary\">QR Code</Badge>;\n      case 'rfid':\n        return <Badge variant=\"default\">RFID</Badge>;\n      case 'gps':\n        return <Badge variant=\"success\">GPS</Badge>;\n      default:\n        return <Badge variant=\"outline\">{method}</Badge>;\n    }\n  };\n\n  const formatDateTime = (dateString: string) => {\n    return new Date(dateString).toLocaleString('en-US', {\n      month: 'short',\n      day: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit'\n    });\n  };\n\n  const getSignalIcon = (strength?: number) => {\n    if (!strength) return null;\n    if (strength >= 80) return '📶';\n    if (strength >= 60) return '📶';\n    if (strength >= 40) return '📶';\n    if (strength >= 20) return '📶';\n    return '📶';\n  };\n\n  const getBatteryIcon = (level?: number) => {\n    if (!level) return null;\n    if (level >= 80) return '🔋';\n    if (level >= 60) return '🔋';\n    if (level >= 40) return '🔋';\n    if (level >= 20) return '🔋';\n    return '🪫';\n  };\n\n  return (\n    <div className=\"stack-lg\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-heading-3 text-heading-3 font-anton uppercase\">Asset Tracking</h1>\n          <p className=\"text-body-sm color-muted\">Real-time asset location and status monitoring</p>\n        </div>\n        <div className=\"flex items-center gap-sm\">\n          <Button variant=\"outline\" onClick={handleScanBarcode} className=\"flex items-center gap-sm\">\n            <Scan className=\"w-4 h-4\" />\n            Scan\n          </Button>\n          <Button variant=\"outline\" className=\"flex items-center gap-sm\">\n            <Download className=\"w-4 h-4\" />\n            Export\n          </Button>\n        </div>\n      </div>\n\n      {/* Filters */}\n      <Card>\n        <div className=\"p-md\">\n          <div className=\"flex flex-wrap items-center gap-md\">\n            <div className=\"flex-1 min-w-64\">\n              <div className=\"relative\">\n                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 color-muted w-4 h-4\" />\n                <UnifiedInput                   placeholder=\"Search assets...\"\n                  value={searchQuery}\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => setSearchQuery(e.target.value)}\n                  className=\"pl-2xl\"\n                />\n              </div>\n            </div>\n            <div className=\"flex items-center gap-sm\">\n              <select\n                value={selectedStatus}\n                onChange={(e: React.ChangeEvent<HTMLInputElement>) => setSelectedStatus(e.target.value)}\n                className=\" px-md py-sm border border-border rounded-md focus:outline-none focus:ring-2 focus:ring-primary\"\n              >\n                <option value=\"all\">All Status</option>\n                <option value=\"active\">Active</option>\n                <option value=\"idle\">Idle</option>\n                <option value=\"in_transit\">In Transit</option>\n                <option value=\"maintenance\">Maintenance</option>\n                <option value=\"offline\">Offline</option>\n              </select>\n              <select\n                value={selectedMethod}\n                onChange={(e: React.ChangeEvent<HTMLInputElement>) => setSelectedMethod(e.target.value)}\n                className=\" px-md py-sm border border-border rounded-md focus:outline-none focus:ring-2 focus:ring-primary\"\n              >\n                <option value=\"all\">All Methods</option>\n                <option value=\"manual\">Manual</option>\n                <option value=\"barcode\">Barcode</option>\n                <option value=\"qr_code\">QR Code</option>\n                <option value=\"rfid\">RFID</option>\n                <option value=\"gps\">GPS</option>\n              </select>\n            </div>\n          </div>\n        </div>\n      </Card>\n\n      {/* Tracking Grid */}\n      {loading ? (\n        <Card>\n          <div className=\"p-xl text-center color-muted\">Loading tracking data...</div>\n        </Card>\n      ) : filteredData.length === 0 ? (\n        <Card>\n          <div className=\"p-xl text-center color-muted\">\n            No tracking data found matching your criteria.\n          </div>\n        </Card>\n      ) : (\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-md\">\n          {filteredData.map(tracking => (\n            <Card key={tracking.id} className=\"hover:shadow-elevated transition-shadow\">\n              <div className=\"p-md\">\n                <div className=\"flex items-start justify-between mb-sm\">\n                  <div className=\"flex items-center gap-sm\">\n                    <MapPin className=\"w-4 h-4 color-muted\" />\n                    <h3 className=\"text-heading-4 truncate\">{tracking.assetName}</h3>\n                  </div>\n                  <div className=\"flex items-center gap-xs\">\n                    {getStatusBadge(tracking.status)}\n                  </div>\n                </div>\n\n                <div className=\"stack-sm mb-md\">\n                  <div>\n                    <span className=\"text-body-sm color-muted block\">Current Location</span>\n                    <span className=\"form-label\">{tracking.currentLocation}</span>\n                  </div>\n                  \n                  {tracking.previousLocation && (\n                    <div>\n                      <span className=\"text-body-sm color-muted block\">Previous Location</span>\n                      <span className=\"text-body-sm\">{tracking.previousLocation}</span>\n                    </div>\n                  )}\n\n                  <div>\n                    <span className=\"text-body-sm color-muted block\">Last Seen</span>\n                    <span className=\"text-body-sm\">{formatDateTime(tracking.lastSeen)}</span>\n                  </div>\n\n                  <div>\n                    <span className=\"text-body-sm color-muted block\">Tracked By</span>\n                    <span className=\"text-body-sm\">{tracking.trackedBy}</span>\n                  </div>\n                </div>\n\n                <div className=\"flex items-center justify-between mb-md\">\n                  <div className=\"flex items-center gap-sm\">\n                    {getMethodBadge(tracking.trackingMethod)}\n                  </div>\n                  <div className=\"flex items-center gap-sm text-body-sm\">\n                    {tracking.batteryLevel && (\n                      <span className=\"flex items-center gap-xs\">\n                        {getBatteryIcon(tracking.batteryLevel)}\n                        {tracking.batteryLevel}%\n                      </span>\n                    )}\n                    {tracking.signalStrength && (\n                      <span className=\"flex items-center gap-xs\">\n                        {getSignalIcon(tracking.signalStrength)}\n                        {tracking.signalStrength}%\n                      </span>\n                    )}\n                  </div>\n                </div>\n\n                {(tracking.temperature || tracking.humidity) && (\n                  <div className=\"grid grid-cols-2 gap-md mb-md text-body-sm\">\n                    {tracking.temperature && (\n                      <div>\n                        <span className=\"text-body-sm color-muted block\">Temperature</span>\n                        <span>{tracking.temperature}°C</span>\n                      </div>\n                    )}\n                    {tracking.humidity && (\n                      <div>\n                        <span className=\"text-body-sm color-muted block\">Humidity</span>\n                        <span>{tracking.humidity}%</span>\n                      </div>\n                    )}\n                  </div>\n                )}\n\n                {tracking.coordinates && (\n                  <div className=\"mb-md text-body-sm\">\n                    <span className=\"text-body-sm color-muted block\">Coordinates</span>\n                    <span className=\"font-mono text-body-sm\">\n                      {tracking.coordinates.latitude.toFixed(4)}, {tracking.coordinates.longitude.toFixed(4)}\n                    </span>\n                  </div>\n                )}\n\n                {tracking.notes && (\n                  <div className=\"mt-sm p-sm bg-secondary rounded-md\">\n                    <span className=\"text-body-sm color-muted block mb-xs\">Notes</span>\n                    <p className=\"text-body-sm\">{tracking.notes}</p>\n                  </div>\n                )}\n\n                <div className=\"flex gap-sm mt-md\">\n                  <Button\n                   \n                    variant=\"outline\"\n                    onClick={() => handleUpdateLocation(tracking)}\n                    className=\"flex-1\"\n                  >\n                    <Edit className=\"w-3 h-3 mr-xs\" />\n                    Update\n                  </Button>\n                </div>\n              </div>\n            </Card>\n          ))}\n        </div>\n      )}\n\n      {/* Update Location Drawer */}\n      <Drawer\n        open={showDrawer}\n        onClose={() => setShowDrawer(false)}\n        title=\"Update Asset Location\"\n        width=\"md\"\n      >\n        <div className=\"p-lg stack-md\">\n          <div>\n            <label className=\"block text-body-sm form-label mb-xs\">Asset</label>\n            <UnifiedInput               value={selectedTracking?.assetName || ''}\n              disabled\n               className=\"bg-secondary\"\n            />\n          </div>\n          <div>\n            <label className=\"block text-body-sm form-label mb-xs\">Current Location</label>\n            <UnifiedInput               placeholder=\"Enter new location\"\n              defaultValue={selectedTracking?.currentLocation}\n            />\n          </div>\n          <div>\n            <label className=\"block text-body-sm form-label mb-xs\">Status</label>\n            <select\n              defaultValue={selectedTracking?.status}\n              className=\"w-full  px-md py-sm border border-border rounded-md focus:outline-none focus:ring-2 focus:ring-primary\"\n            >\n              <option value=\"active\">Active</option>\n              <option value=\"idle\">Idle</option>\n              <option value=\"in_transit\">In Transit</option>\n              <option value=\"maintenance\">Maintenance</option>\n              <option value=\"offline\">Offline</option>\n            </select>\n          </div>\n          <div>\n            <label className=\"block text-body-sm form-label mb-xs\">Notes</label>\n            <textarea\n              className=\"w-full  px-md py-sm border border-border rounded-md focus:outline-none focus:ring-2 focus:ring-primary\"\n              rows={3}\n              placeholder=\"Update notes\"\n              defaultValue={selectedTracking?.notes}\n            />\n          </div>\n          <div className=\"flex gap-sm pt-md\">\n            <Button className=\"flex-1\">\n              Update Location\n            </Button>\n            <Button variant=\"outline\" onClick={() => setShowDrawer(false)}>\n              Cancel\n            </Button>\n          </div>\n        </div>\n      </Drawer>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ghxstship/apps/web/app/(app)/(shell)/assets/views/AssetGridView.tsx","messages":[{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Package' is not defined.","line":36,"column":13,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":36,"endColumn":20},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Package' is not defined.","line":58,"column":10,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":58,"endColumn":17},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Eye' is not defined.","line":87,"column":22,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":87,"endColumn":25},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Edit' is not defined.","line":96,"column":22,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":96,"endColumn":26},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'MapPin' is not defined.","line":126,"column":22,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":126,"endColumn":28},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'DollarSign' is not defined.","line":152,"column":22,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":152,"endColumn":32}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\nimport { User, FileText, Settings, Award, Calendar, TrendingUp, Activity, Clock, Plus, Search, Play, Trash2 } from \"lucide-react\";\nimport React from 'react';\nimport { Card, Badge } from '@ghxstship/ui';\nimport type { Asset } from '../types';\n\ninterface AssetGridViewProps {\n  assets: Asset[];\n  onEdit?: (asset: Asset) => void;\n  onView?: (asset: Asset) => void;\n  onDelete?: (asset: Asset) => void;\n  loading?: boolean;\n}\n\nexport default function AssetGridView({ \n  assets, \n  onEdit, \n  onView, \n  onDelete, \n  loading = false \n}: AssetGridViewProps) {\n  const getStatusColor = (status: string) => {\n    const colors = {\n      available: 'success',\n      in_use: 'warning',\n      under_maintenance: 'secondary',\n      damaged: 'destructive',\n      missing: 'destructive',\n      retired: 'outline'\n    };\n    return colors[status as keyof typeof colors] || 'secondary';\n  };\n\n  const getCategoryIcon = (category: string) => {\n    // Return appropriate icon based on category\n    return <Package className=\"w-5 h-5\" />;\n  };\n\n  if (loading) {\n    return (\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-md\">\n        {Array.from({ length: 8 }).map((_, i) => (\n          <Card key={i} className=\"animate-pulse\">\n            <div className=\"p-md\">\n              <div className=\"h-4 bg-muted rounded mb-sm\"></div>\n              <div className=\"h-3 bg-muted rounded mb-sm w-3/4\"></div>\n              <div className=\"h-3 bg-muted rounded w-1/2\"></div>\n            </div>\n          </Card>\n        ))}\n      </div>\n    );\n  }\n\n  if (assets.length === 0) {\n    return (\n      <div className=\"text-center py-xl\">\n        <Package className=\"w-12 h-12 mx-auto color-muted mb-md\" />\n        <h3 className=\"text-heading-4 mb-sm\">No Assets Found</h3>\n        <p className=\"text-body-sm color-muted\">\n          No assets match your current filters. Try adjusting your search criteria.\n        </p>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-md\">\n      {assets.map((asset) => (\n        <Card key={asset.id} className=\"group hover:shadow-md transition-shadow\">\n          <div className=\"p-md\">\n            {/* Header */}\n            <div className=\"flex items-start justify-between mb-sm\">\n              <div className=\"flex items-center gap-sm\">\n                {getCategoryIcon(asset.category)}\n                <Badge variant={getStatusColor(asset.status) as unknown} size=\"sm\">\n                  {asset.status.replace('_', ' ')}\n                </Badge>\n              </div>\n              <div className=\"flex items-center gap-xs opacity-0 group-hover:opacity-100 transition-opacity\">\n                {onView && (\n                  <button\n                    onClick={() => onView(asset)}\n                    className=\"p-xs rounded hover:bg-muted transition-colors\"\n                    title=\"View details\"\n                  >\n                    <Eye className=\"w-4 h-4\" />\n                  </button>\n                )}\n                {onEdit && (\n                  <button\n                    onClick={() => onEdit(asset)}\n                    className=\"p-xs rounded hover:bg-muted transition-colors\"\n                    title=\"Edit asset\"\n                  >\n                    <Edit className=\"w-4 h-4\" />\n                  </button>\n                )}\n                {onDelete && (\n                  <button\n                    onClick={() => onDelete(asset)}\n                    className=\"p-xs rounded hover:bg-destructive/10 color-destructive transition-colors\"\n                    title=\"Delete asset\"\n                  >\n                    <Trash2 className=\"w-4 h-4\" />\n                  </button>\n                )}\n              </div>\n            </div>\n\n            {/* Content */}\n            <div className=\"space-y-sm\">\n              <div>\n                <h3 className=\"text-body font-medium line-clamp-2\">{asset.name}</h3>\n                {asset.description && (\n                  <p className=\"text-body-sm color-muted line-clamp-2 mt-xs\">\n                    {asset.description}\n                  </p>\n                )}\n              </div>\n\n              {/* Metadata */}\n              <div className=\"space-y-xs\">\n                {asset.location && (\n                  <div className=\"flex items-center gap-xs text-body-xs color-muted\">\n                    <MapPin className=\"w-3 h-3\" />\n                    <span>{asset.location}</span>\n                  </div>\n                )}\n                \n                {asset.sku && (\n                  <div className=\"text-body-xs color-muted\">\n                    SKU: {asset.sku}\n                  </div>\n                )}\n\n                {asset.manufacturer && asset.model && (\n                  <div className=\"text-body-xs color-muted\">\n                    {asset.manufacturer} {asset.model}\n                  </div>\n                )}\n\n                {asset.purchase_date && (\n                  <div className=\"flex items-center gap-xs text-body-xs color-muted\">\n                    <Calendar className=\"w-3 h-3\" />\n                    <span>{new Date(asset.purchase_date).toLocaleDateString()}</span>\n                  </div>\n                )}\n\n                {asset.current_value && (\n                  <div className=\"flex items-center gap-xs text-body-xs color-muted\">\n                    <DollarSign className=\"w-3 h-3\" />\n                    <span>${asset.current_value.toLocaleString()}</span>\n                  </div>\n                )}\n              </div>\n\n              {/* Tags */}\n              {asset.tags && asset.tags.length > 0 && (\n                <div className=\"flex flex-wrap gap-xs\">\n                  {asset.tags.slice(0, 3).map((tag, index) => (\n                    <span\n                      key={index}\n                      className=\"px-xs py-xs text-body-xs bg-muted/50 rounded text-muted-foreground\"\n                    >\n                      {tag}\n                    </span>\n                  ))}\n                  {asset.tags.length > 3 && (\n                    <span className=\"px-xs py-xs text-body-xs bg-muted/50 rounded text-muted-foreground\">\n                      +{asset.tags.length - 3}\n                    </span>\n                  )}\n                </div>\n              )}\n            </div>\n          </div>\n        </Card>\n      ))}\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ghxstship/apps/web/app/(app)/(shell)/assets/views/AssetKanbanView.tsx","messages":[{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Package' is not defined.","line":57,"column":13,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":57,"endColumn":20},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Package' is not defined.","line":109,"column":22,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":109,"endColumn":29},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Eye' is not defined.","line":136,"column":34,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":136,"endColumn":37},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Edit' is not defined.","line":145,"column":34,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":145,"endColumn":38},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'MapPin' is not defined.","line":189,"column":34,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":189,"endColumn":40},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'DollarSign' is not defined.","line":196,"column":34,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":196,"endColumn":44}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\nimport { User, FileText, Settings, Award, Calendar, TrendingUp, Activity, Clock, Plus, Search, Play, Trash2 } from \"lucide-react\";\nimport React from 'react';\nimport { Card, Badge } from '@ghxstship/ui';\nimport type { Asset } from '../types';\n\ninterface AssetKanbanViewProps {\n  assets: Asset[];\n  onEdit?: (asset: Asset) => void;\n  onView?: (asset: Asset) => void;\n  onDelete?: (asset: Asset) => void;\n  onStatusChange?: (asset: Asset, newStatus: string) => void;\n  loading?: boolean;\n}\n\nconst STATUS_COLUMNS = [\n  { id: 'available', title: 'Available', color: 'border-success' },\n  { id: 'in_use', title: 'In Use', color: 'border-warning' },\n  { id: 'under_maintenance', title: 'Under Maintenance', color: 'border-secondary' },\n  { id: 'damaged', title: 'Damaged', color: 'border-destructive' },\n  { id: 'missing', title: 'Missing', color: 'border-destructive' },\n  { id: 'retired', title: 'Retired', color: 'border-muted' }\n];\n\nexport default function AssetKanbanView({ \n  assets, \n  onEdit, \n  onView, \n  onDelete, \n  onStatusChange,\n  loading = false \n}: AssetKanbanViewProps) {\n  const getAssetsByStatus = (status: string) => {\n    return assets.filter(asset => asset.status === status);\n  };\n\n  const handleDragStart = (e: React.DragEvent, asset: Asset) => {\n    e.dataTransfer.setData('application/json', JSON.stringify(asset));\n  };\n\n  const handleDragOver = (e: React.DragEvent) => {\n    e.preventDefault();\n  };\n\n  const handleDrop = (e: React.DragEvent, newStatus: string) => {\n    e.preventDefault();\n    const assetData = e.dataTransfer.getData('application/json');\n    if (assetData && onStatusChange) {\n      const asset = JSON.parse(assetData);\n      if (asset.status !== newStatus) {\n        onStatusChange(asset, newStatus);\n      }\n    }\n  };\n\n  const getCategoryIcon = (category: string) => {\n    return <Package className=\"w-4 h-4\" />;\n  };\n\n  if (loading) {\n    return (\n      <div className=\"flex gap-md overflow-x-auto pb-md\">\n        {STATUS_COLUMNS.map((column) => (\n          <div key={column.id} className=\"flex-shrink-0 w-80\">\n            <div className={`border-t-4 ${column.color} bg-background rounded-lg`}>\n              <div className=\"p-md border-b border-border\">\n                <h3 className=\"text-body font-medium\">{column.title}</h3>\n                <p className=\"text-body-sm color-muted\">Loading...</p>\n              </div>\n              <div className=\"p-md space-y-sm\">\n                {Array.from({ length: 3 }).map((_, i) => (\n                  <div key={i} className=\"p-md border border-border rounded-md animate-pulse\">\n                    <div className=\"h-4 bg-muted rounded mb-sm\"></div>\n                    <div className=\"h-3 bg-muted rounded w-3/4\"></div>\n                  </div>\n                ))}\n              </div>\n            </div>\n          </div>\n        ))}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"flex gap-md overflow-x-auto pb-md\">\n      {STATUS_COLUMNS.map((column) => {\n        const columnAssets = getAssetsByStatus(column.id);\n        \n        return (\n          <div key={column.id} className=\"flex-shrink-0 w-80\">\n            <div \n              className={`border-t-4 ${column.color} bg-background rounded-lg min-h-96`}\n              onDragOver={handleDragOver}\n              onDrop={(e) => handleDrop(e, column.id)}\n            >\n              {/* Column Header */}\n              <div className=\"p-md border-b border-border\">\n                <h3 className=\"text-body font-medium\">{column.title}</h3>\n                <p className=\"text-body-sm color-muted\">\n                  {columnAssets.length} asset{columnAssets.length !== 1 ? 's' : ''}\n                </p>\n              </div>\n\n              {/* Column Content */}\n              <div className=\"p-md space-y-sm\">\n                {columnAssets.length === 0 ? (\n                  <div className=\"text-center py-lg\">\n                    <Package className=\"w-8 h-8 mx-auto color-muted mb-sm\" />\n                    <p className=\"text-body-sm color-muted\">No assets</p>\n                  </div>\n                ) : (\n                  columnAssets.map((asset) => (\n                    <Card\n                      key={asset.id}\n                      className=\"group cursor-move hover:shadow-md transition-shadow\"\n                      draggable\n                      onDragStart={(e) => handleDragStart(e, asset)}\n                    >\n                      <div className=\"p-md\">\n                        {/* Header */}\n                        <div className=\"flex items-start justify-between mb-sm\">\n                          <div className=\"flex items-center gap-sm\">\n                            {getCategoryIcon(asset.category)}\n                            <span className=\"text-body-xs color-muted capitalize\">\n                              {asset.category.replace('_', ' ')}\n                            </span>\n                          </div>\n                          <div className=\"flex items-center gap-xs opacity-0 group-hover:opacity-100 transition-opacity\">\n                            {onView && (\n                              <button\n                                onClick={() => onView(asset)}\n                                className=\"p-xs rounded hover:bg-muted transition-colors\"\n                                title=\"View details\"\n                              >\n                                <Eye className=\"w-3 h-3\" />\n                              </button>\n                            )}\n                            {onEdit && (\n                              <button\n                                onClick={() => onEdit(asset)}\n                                className=\"p-xs rounded hover:bg-muted transition-colors\"\n                                title=\"Edit asset\"\n                              >\n                                <Edit className=\"w-3 h-3\" />\n                              </button>\n                            )}\n                            {onDelete && (\n                              <button\n                                onClick={() => onDelete(asset)}\n                                className=\"p-xs rounded hover:bg-destructive/10 color-destructive transition-colors\"\n                                title=\"Delete asset\"\n                              >\n                                <Trash2 className=\"w-3 h-3\" />\n                              </button>\n                            )}\n                          </div>\n                        </div>\n\n                        {/* Content */}\n                        <div className=\"space-y-sm\">\n                          <div>\n                            <h4 className=\"text-body-sm font-medium line-clamp-2\">\n                              {asset.name}\n                            </h4>\n                            {asset.description && (\n                              <p className=\"text-body-xs color-muted line-clamp-2 mt-xs\">\n                                {asset.description}\n                              </p>\n                            )}\n                          </div>\n\n                          {/* Metadata */}\n                          <div className=\"space-y-xs\">\n                            {asset.sku && (\n                              <div className=\"text-body-xs color-muted\">\n                                SKU: {asset.sku}\n                              </div>\n                            )}\n\n                            {asset.manufacturer && asset.model && (\n                              <div className=\"text-body-xs color-muted\">\n                                {asset.manufacturer} {asset.model}\n                              </div>\n                            )}\n\n                            {asset.location && (\n                              <div className=\"flex items-center gap-xs text-body-xs color-muted\">\n                                <MapPin className=\"w-3 h-3\" />\n                                <span className=\"truncate\">{asset.location}</span>\n                              </div>\n                            )}\n\n                            {asset.current_value && (\n                              <div className=\"flex items-center gap-xs text-body-xs color-muted\">\n                                <DollarSign className=\"w-3 h-3\" />\n                                <span>${asset.current_value.toLocaleString()}</span>\n                              </div>\n                            )}\n                          </div>\n\n                          {/* Tags */}\n                          {asset.tags && asset.tags.length > 0 && (\n                            <div className=\"flex flex-wrap gap-xs\">\n                              {asset.tags.slice(0, 2).map((tag, index) => (\n                                <span\n                                  key={index}\n                                  className=\"px-xs py-xs text-body-xs bg-muted/50 rounded text-muted-foreground\"\n                                >\n                                  {tag}\n                                </span>\n                              ))}\n                              {asset.tags.length > 2 && (\n                                <span className=\"px-xs py-xs text-body-xs bg-muted/50 rounded text-muted-foreground\">\n                                  +{asset.tags.length - 2}\n                                </span>\n                              )}\n                            </div>\n                          )}\n                        </div>\n                      </div>\n                    </Card>\n                  ))\n                )}\n              </div>\n            </div>\n          </div>\n        );\n      })}\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ghxstship/apps/web/app/(app)/(shell)/assets/views/AssetListView.tsx","messages":[{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Package' is not defined.","line":36,"column":13,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":36,"endColumn":20},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Package' is not defined.","line":60,"column":10,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":60,"endColumn":17},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'MapPin' is not defined.","line":139,"column":18,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":139,"endColumn":24},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'DollarSign' is not defined.","line":151,"column":18,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":151,"endColumn":28},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Eye' is not defined.","line":180,"column":20,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":180,"endColumn":23},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Edit' is not defined.","line":189,"column":20,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":189,"endColumn":24}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\nimport { User, FileText, Settings, Award, Calendar, TrendingUp, Activity, Clock, Plus, Search, Play, Trash2 } from \"lucide-react\";\nimport React from 'react';\nimport { Badge, Button } from '@ghxstship/ui';\nimport type { Asset } from '../types';\n\ninterface AssetListViewProps {\n  assets: Asset[];\n  onEdit?: (asset: Asset) => void;\n  onView?: (asset: Asset) => void;\n  onDelete?: (asset: Asset) => void;\n  loading?: boolean;\n}\n\nexport default function AssetListView({ \n  assets, \n  onEdit, \n  onView, \n  onDelete, \n  loading = false \n}: AssetListViewProps) {\n  const getStatusColor = (status: string) => {\n    const colors = {\n      available: 'success',\n      in_use: 'warning',\n      under_maintenance: 'secondary',\n      damaged: 'destructive',\n      missing: 'destructive',\n      retired: 'outline'\n    };\n    return colors[status as keyof typeof colors] || 'secondary';\n  };\n\n  const getCategoryIcon = (category: string) => {\n    // Return appropriate icon based on category\n    return <Package className=\"w-4 h-4\" />;\n  };\n\n  if (loading) {\n    return (\n      <div className=\"space-y-sm\">\n        {Array.from({ length: 10 }).map((_, i) => (\n          <div key={i} className=\"flex items-center gap-md p-md border border-border rounded-md animate-pulse\">\n            <div className=\"w-4 h-4 bg-muted rounded\"></div>\n            <div className=\"flex-1\">\n              <div className=\"h-4 bg-muted rounded mb-xs\"></div>\n              <div className=\"h-3 bg-muted rounded w-3/4\"></div>\n            </div>\n            <div className=\"w-16 h-6 bg-muted rounded\"></div>\n            <div className=\"w-8 h-8 bg-muted rounded\"></div>\n          </div>\n        ))}\n      </div>\n    );\n  }\n\n  if (assets.length === 0) {\n    return (\n      <div className=\"text-center py-xl\">\n        <Package className=\"w-12 h-12 mx-auto color-muted mb-md\" />\n        <h3 className=\"text-heading-4 mb-sm\">No Assets Found</h3>\n        <p className=\"text-body-sm color-muted\">\n          No assets match your current filters. Try adjusting your search criteria.\n        </p>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-sm\">\n      {/* Header */}\n      <div className=\"hidden md:flex items-center gap-md p-md bg-muted/20 rounded-md text-body-sm font-medium color-muted\">\n        <div className=\"w-4\"></div>\n        <div className=\"flex-1\">Asset</div>\n        <div className=\"w-24\">Category</div>\n        <div className=\"w-20\">Status</div>\n        <div className=\"w-24\">Location</div>\n        <div className=\"w-24\">Value</div>\n        <div className=\"w-16\">Actions</div>\n      </div>\n\n      {/* Assets List */}\n      {assets.map((asset) => (\n        <div \n          key={asset.id} \n          className=\"flex items-center gap-md p-md border border-border rounded-md hover:bg-muted/20 transition-colors group\"\n        >\n          {/* Icon */}\n          <div className=\"flex-shrink-0\">\n            {getCategoryIcon(asset.category)}\n          </div>\n\n          {/* Asset Info */}\n          <div className=\"flex-1 min-w-0\">\n            <div className=\"flex items-center gap-sm mb-xs\">\n              <h3 className=\"text-body font-medium truncate\">{asset.name}</h3>\n              {asset.sku && (\n                <span className=\"text-body-xs color-muted bg-muted/50 px-xs py-xs rounded\">\n                  {asset.sku}\n                </span>\n              )}\n            </div>\n            {asset.description && (\n              <p className=\"text-body-sm color-muted line-clamp-1\">\n                {asset.description}\n              </p>\n            )}\n            <div className=\"flex items-center gap-md mt-xs text-body-xs color-muted\">\n              {asset.manufacturer && asset.model && (\n                <span>{asset.manufacturer} {asset.model}</span>\n              )}\n              {asset.purchase_date && (\n                <div className=\"flex items-center gap-xs\">\n                  <Calendar className=\"w-3 h-3\" />\n                  <span>{new Date(asset.purchase_date).toLocaleDateString()}</span>\n                </div>\n              )}\n            </div>\n          </div>\n\n          {/* Category - Hidden on mobile */}\n          <div className=\"hidden md:block w-24\">\n            <span className=\"text-body-sm color-muted capitalize\">\n              {asset.category.replace('_', ' ')}\n            </span>\n          </div>\n\n          {/* Status */}\n          <div className=\"hidden md:block w-20\">\n            <Badge variant={getStatusColor(asset.status) as unknown} size=\"sm\">\n              {asset.status.replace('_', ' ')}\n            </Badge>\n          </div>\n\n          {/* Location - Hidden on mobile */}\n          <div className=\"hidden md:block w-24\">\n            {asset.location ? (\n              <div className=\"flex items-center gap-xs text-body-sm color-muted\">\n                <MapPin className=\"w-3 h-3\" />\n                <span className=\"truncate\">{asset.location}</span>\n              </div>\n            ) : (\n              <span className=\"text-body-sm color-muted\">-</span>\n            )}\n          </div>\n\n          {/* Value - Hidden on mobile */}\n          <div className=\"hidden md:block w-24\">\n            {asset.current_value ? (\n              <div className=\"flex items-center gap-xs text-body-sm color-muted\">\n                <DollarSign className=\"w-3 h-3\" />\n                <span>${asset.current_value.toLocaleString()}</span>\n              </div>\n            ) : (\n              <span className=\"text-body-sm color-muted\">-</span>\n            )}\n          </div>\n\n          {/* Mobile Status and Value */}\n          <div className=\"md:hidden flex flex-col items-end gap-xs\">\n            <Badge variant={getStatusColor(asset.status) as unknown} size=\"sm\">\n              {asset.status.replace('_', ' ')}\n            </Badge>\n            {asset.current_value && (\n              <span className=\"text-body-xs color-muted\">\n                ${asset.current_value.toLocaleString()}\n              </span>\n            )}\n          </div>\n\n          {/* Actions */}\n          <div className=\"flex-shrink-0 w-16\">\n            <div className=\"flex items-center gap-xs opacity-0 group-hover:opacity-100 transition-opacity\">\n              {onView && (\n                <button\n                  onClick={() => onView(asset)}\n                  className=\"p-xs rounded hover:bg-muted transition-colors\"\n                  title=\"View details\"\n                >\n                  <Eye className=\"w-4 h-4\" />\n                </button>\n              )}\n              {onEdit && (\n                <button\n                  onClick={() => onEdit(asset)}\n                  className=\"p-xs rounded hover:bg-muted transition-colors\"\n                  title=\"Edit asset\"\n                >\n                  <Edit className=\"w-4 h-4\" />\n                </button>\n              )}\n              {onDelete && (\n                <button\n                  onClick={() => onDelete(asset)}\n                  className=\"p-xs rounded hover:bg-destructive/10 color-destructive transition-colors\"\n                  title=\"Delete asset\"\n                >\n                  <Trash2 className=\"w-4 h-4\" />\n                </button>\n              )}\n            </div>\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ghxstship/apps/web/app/(app)/(shell)/companies/CompaniesClient.tsx","messages":[{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Building' is not defined.","line":278,"column":14,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":278,"endColumn":22},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Star' is not defined.","line":310,"column":14,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":310,"endColumn":18}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\nimport { User, FileText, Settings, Award, Calendar, TrendingUp, Activity, Clock, Plus, Search, Play, Trash2 } from \"lucide-react\";\nimport { useCallback, useEffect, useMemo, useState } from 'react';\nimport type { User } from '@supabase/supabase-js';\nimport {\n  Badge,\n  Button,\n  Card,\n  Skeleton,\n  useToastContext,\n} from '@ghxstship/ui';\nimport {\n  CalendarView,\n  DataActions,\n  DataGrid,\n  DataViewProvider,\n  GalleryView,\n  KanbanBoard,\n  ListView,\n  StateManagerProvider,\n  TimelineView,\n  ViewSwitcher,\n} from '@ghxstship/ui/components/DataViews';\nimport type {\n  ActionConfig,\n  DataRecord,\n  DataViewConfig,\n  ExportConfig,\n  FilterConfig,\n  ImportConfig,\n  SortConfig,\n} from '@ghxstship/ui/components/DataViews/types';\n\nimport { COMPANY_FIELD_CONFIGS } from './lib/field-config';\nimport { CompaniesService } from './lib/companies-service';\nimport type {\n  Company,\n  CompanyFilters,\n  CompanyStats,\n} from './types';\n\ninterface CompaniesClientProps {\n  user: User;\n  orgId: string;\n  translations: {\n    title: string;\n    subtitle: string;\n  };\n}\n\nexport default function CompaniesClient({\n  user,\n  orgId,\n  translations,\n}: CompaniesClientProps) {\n  const { showToast } = useToastContext();\n  const [companies, setCompanies] = useState<Company[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [stats, setStats] = useState<CompanyStats | null>(null);\n  const [filters, setFilters] = useState<CompanyFilters>({});\n  const [currentView, setCurrentView] = useState<'grid' | 'list' | 'kanban' | 'calendar' | 'timeline' | 'gallery'>('grid');\n\n  const companiesService = useMemo(() => new CompaniesService(), []);\n\n  // Load companies data\n  const loadCompanies = useCallback(async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      \n      const [companiesData, statsData] = await Promise.all([\n        companiesService.getCompanies(orgId, filters),\n        companiesService.getCompanyStats(orgId)\n      ]);\n      \n      setCompanies(companiesData.data);\n      setStats(statsData);\n    } catch (err) {\n      console.error('Error loading companies:', err);\n      setError(err instanceof Error ? err.message : 'Failed to load companies');\n      showToast({\n        title: 'Error',\n        description: 'Failed to load companies data',\n        variant: 'destructive',\n      });\n    } finally {\n      setLoading(false);\n    }\n  }, [orgId, filters, companiesService, showToast]);\n\n  useEffect(() => {\n    loadCompanies();\n  }, [loadCompanies]);\n\n  // Convert companies to DataRecord format\n  const dataRecords: DataRecord[] = useMemo(() => {\n    return companies.map((company) => ({\n      id: company.id,\n      name: company.name,\n      description: company.description || '',\n      industry: company.industry || 'Not specified',\n      status: company.status,\n      size: company.size || 'Not specified',\n      website: company.website || '',\n      email: company.email || '',\n      phone: company.phone || '',\n      address: company.address || '',\n      city: company.city || '',\n      state: company.state || '',\n      country: company.country || '',\n      postal_code: company.postal_code || '',\n      founded_year: company.founded_year || 0,\n      logo_url: company.logo_url || '',\n      notes: company.notes || '',\n      created_at: company.created_at,\n      updated_at: company.updated_at,\n      _raw: company,\n    }));\n  }, [companies]);\n\n  // Data view configuration\n  const dataViewConfig: DataViewConfig = useMemo(() => ({\n    fields: COMPANY_FIELD_CONFIGS,\n    defaultView: 'grid',\n    enabledViews: ['grid', 'list', 'kanban'],\n    itemsPerPage: 50,\n    enableSearch: true,\n    enableFilters: true,\n    enableSort: true,\n    enableExport: true,\n    enableImport: true,\n    enableBulkActions: true,\n  }), []);\n\n  // Filter configuration\n  const filterConfig: FilterConfig = useMemo(() => ({\n    fields: [\n      {\n        key: 'status',\n        label: 'Status',\n        type: 'select',\n        options: [\n          { label: 'Active', value: 'active' },\n          { label: 'Pending', value: 'pending' },\n          { label: 'Inactive', value: 'inactive' },\n          { label: 'Blacklisted', value: 'blacklisted' },\n        ],\n        multiple: true,\n      },\n      {\n        key: 'industry',\n        label: 'Industry',\n        type: 'text',\n      },\n      {\n        key: 'size',\n        label: 'Company Size',\n        type: 'select',\n        options: [\n          { label: 'Startup', value: 'startup' },\n          { label: 'Small', value: 'small' },\n          { label: 'Medium', value: 'medium' },\n          { label: 'Large', value: 'large' },\n          { label: 'Enterprise', value: 'enterprise' },\n        ],\n        multiple: true,\n      },\n      {\n        key: 'country',\n        label: 'Country',\n        type: 'text',\n      },\n    ],\n  }), []);\n\n  // Sort configuration\n  const sortConfig: SortConfig = useMemo(() => ({\n    defaultSort: { field: 'name', direction: 'asc' },\n    fields: [\n      { key: 'name', label: 'Company Name' },\n      { key: 'industry', label: 'Industry' },\n      { key: 'status', label: 'Status' },\n      { key: 'size', label: 'Size' },\n      { key: 'founded_year', label: 'Founded Year' },\n      { key: 'created_at', label: 'Created Date' },\n      { key: 'updated_at', label: 'Updated Date' },\n    ],\n  }), []);\n\n  // Action configuration\n  const actionConfig: ActionConfig = useMemo(() => ({\n    primary: {\n      label: 'Add Company',\n      icon: Plus,\n      action: () => {\n        // Handle add company\n        showToast({\n          title: 'Info',\n          description: 'Add company functionality will be implemented',\n        });\n      },\n    },\n    bulk: [\n      {\n        label: 'Export Selected',\n        icon: Download,\n        action: (selectedIds: string[]) => {\n          showToast({\n            title: 'Info',\n            description: `Exporting ${selectedIds.length} companies`,\n          });\n        },\n      },\n    ],\n    row: [\n      {\n        label: 'View Details',\n        icon: Building,\n        action: (record: DataRecord) => {\n          showToast({\n            title: 'Info',\n            description: `Viewing details for ${record.name}`,\n          });\n        },\n      },\n    ],\n  }), [showToast]);\n\n  // Export configuration\n  const exportConfig: ExportConfig = useMemo(() => ({\n    formats: ['csv', 'json', 'xlsx'],\n    filename: 'companies',\n    fields: COMPANY_FIELD_CONFIGS.map(field => ({\n      key: field.key,\n      label: field.label,\n    })),\n  }), []);\n\n  // Import configuration\n  const importConfig: ImportConfig = useMemo(() => ({\n    formats: ['csv', 'json', 'xlsx'],\n    fields: COMPANY_FIELD_CONFIGS.map(field => ({\n      key: field.key,\n      label: field.label,\n      required: field.required || false,\n    })),\n    onImport: async (data: unknown[]) => {\n      showToast({\n        title: 'Info',\n        description: `Importing ${data.length} companies`,\n      });\n    },\n  }), [showToast]);\n\n  // Handle filter changes\n  const handleFiltersChange = useCallback((newFilters: Record<string, unknown>) => {\n    setFilters(prev => ({ ...prev, ...newFilters }));\n  }, []);\n\n  // Handle view change\n  const handleViewChange = useCallback((view: string) => {\n    setCurrentView(view as unknown);\n  }, []);\n\n  // Render statistics cards\n  const renderStats = () => {\n    if (!stats) return null;\n\n    return (\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-md mb-lg\">\n        <Card className=\"p-md\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm font-medium text-muted-foreground\">Total Companies</p>\n              <p className=\"text-2xl font-bold\">{stats.totalCompanies}</p>\n            </div>\n            <Building className=\"h-8 w-8 text-primary\" />\n          </div>\n        </Card>\n        \n        <Card className=\"p-md\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm font-medium text-muted-foreground\">Active Companies</p>\n              <p className=\"text-2xl font-bold text-green-600\">{stats.activeCompanies}</p>\n            </div>\n            <Badge variant=\"success\" className=\"h-8 w-8 rounded-full p-0 flex items-center justify-center\">\n              <span className=\"text-xs font-bold\">{Math.round((stats.activeCompanies / stats.totalCompanies) * 100)}%</span>\n            </Badge>\n          </div>\n        </Card>\n        \n        <Card className=\"p-md\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm font-medium text-muted-foreground\">Active Contracts</p>\n              <p className=\"text-2xl font-bold text-blue-600\">{stats.activeContracts}</p>\n            </div>\n            <FileText className=\"h-8 w-8 text-blue-600\" />\n          </div>\n        </Card>\n        \n        <Card className=\"p-md\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm font-medium text-muted-foreground\">Average Rating</p>\n              <p className=\"text-2xl font-bold text-yellow-600\">{stats.averageRating.toFixed(1)}</p>\n            </div>\n            <Star className=\"h-8 w-8 text-yellow-600\" />\n          </div>\n        </Card>\n      </div>\n    );\n  };\n\n  if (loading) {\n    return (\n      <div className=\"space-y-md\">\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-md\">\n          {Array.from({ length: 4 }).map((_, i) => (\n            <Card key={i} className=\"p-md\">\n              <Skeleton className=\"h-16 w-full\" />\n            </Card>\n          ))}\n        </div>\n        <Card className=\"p-md\">\n          <Skeleton className=\"h-96 w-full\" />\n        </Card>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <Card className=\"p-lg text-center\">\n        <p className=\"text-destructive mb-md\">{error}</p>\n        <Button onClick={loadCompanies}>Retry</Button>\n      </Card>\n    );\n  }\n\n  return (\n    <div className=\"space-y-md\">\n      {renderStats()}\n      \n      <StateManagerProvider>\n        <DataViewProvider\n          data={dataRecords}\n          config={dataViewConfig}\n          onFiltersChange={handleFiltersChange}\n          onViewChange={handleViewChange}\n        >\n          <Card className=\"p-md\">\n            <div className=\"flex items-center justify-between mb-md\">\n              <div>\n                <h2 className=\"text-xl font-semibold\">{translations.title}</h2>\n                <p className=\"text-muted-foreground\">{translations.subtitle}</p>\n              </div>\n              <div className=\"flex items-center gap-sm\">\n                <ViewSwitcher />\n                <DataActions\n                  actionConfig={actionConfig}\n                  exportConfig={exportConfig}\n                  importConfig={importConfig}\n                />\n              </div>\n            </div>\n            \n            {currentView === 'grid' && (\n              <DataGrid\n                filterConfig={filterConfig}\n                sortConfig={sortConfig}\n              />\n            )}\n            \n            {currentView === 'list' && (\n              <ListView\n                filterConfig={filterConfig}\n                sortConfig={sortConfig}\n              />\n            )}\n            \n            {currentView === 'kanban' && (\n              <KanbanBoard\n                groupBy=\"status\"\n                filterConfig={filterConfig}\n              />\n            )}\n            \n            {currentView === 'calendar' && (\n              <CalendarView\n                dateField=\"created_at\"\n                filterConfig={filterConfig}\n              />\n            )}\n            \n            {currentView === 'timeline' && (\n              <TimelineView\n                dateField=\"created_at\"\n                filterConfig={filterConfig}\n              />\n            )}\n            \n            {currentView === 'gallery' && (\n              <GalleryView\n                imageField=\"logo_url\"\n                filterConfig={filterConfig}\n              />\n            )}\n          </Card>\n        </DataViewProvider>\n      </StateManagerProvider>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ghxstship/apps/web/app/(app)/(shell)/companies/contracts/ContractsClient.tsx","messages":[{"ruleId":"react/jsx-no-undef","severity":2,"message":"'IconWithText' is not defined.","line":409,"column":16,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":409,"endColumn":28},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'AlertTriangle' is not defined.","line":493,"column":28,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":493,"endColumn":41},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Icon' is not defined.","line":501,"column":24,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":501,"endColumn":28},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Download' is not defined.","line":528,"column":26,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":528,"endColumn":34},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'AppDrawer' is not defined.","line":596,"column":10,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":596,"endColumn":19}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\nimport { User, FileText, Settings, Award, Calendar, TrendingUp, Activity, Clock, Plus, Search, Play, Trash2 } from \"lucide-react\";\nimport { useCallback, useEffect, useMemo, useState } from 'react';\nimport type { User } from '@supabase/supabase-js';\nimport {\n  Badge,\n  Button,\n  Card,\n  Skeleton,\n  useToastContext,\n} from '@ghxstship/ui';\nimport {\n  DataActions,\n  DataViewProvider,\n  StateManagerProvider,\n  ViewSwitcher,\n} from '@ghxstship/ui/components/DataViews';\nimport type {\n  ActionConfig,\n  ExportConfig,\n  FilterConfig,\n  ImportConfig,\n} from '@ghxstship/ui/components/DataViews/types';\n\nimport { ContractsService } from './lib/contracts-service';\nimport type { CompanyContract, ContractFilters, ContractStats } from './types';\nimport ContractsGridView from './views/ContractsGridView';\nimport ContractsListView from './views/ContractsListView';\nimport CreateContractDrawer from './drawers/CreateContractDrawer';\n\ninterface ContractsClientProps {\n  user: User;\n  orgId: string;\n  translations: {\n    title: string;\n    subtitle: string;\n  };\n}\n\ninterface CompanyContract {\n  id: string;\n  companyId: string;\n  companyName?: string;\n  organizationId: string;\n  projectId?: string;\n  name: string;\n  description?: string;\n  type: 'msa' | 'sow' | 'nda' | 'service' | 'supply' | 'other';\n  status: 'draft' | 'pending' | 'active' | 'expired' | 'terminated' | 'renewed';\n  value?: number;\n  currency: string;\n  startDate: string;\n  endDate?: string;\n  renewalDate?: string;\n  terms?: string;\n  documentUrl?: string;\n  signedDate?: string;\n  signedBy?: string;\n  autoRenewal: boolean;\n  renewalNoticeDays?: number;\n  createdAt?: string;\n  updatedAt?: string;\n  createdBy?: string;\n}\n\ninterface CompanySummary {\n  id: string;\n  name: string;\n}\n\ninterface SupabaseContractRow {\n  id: string;\n  company_id: string;\n  organization_id: string;\n  project_id?: string | null;\n  name: string;\n  description?: string | null;\n  type: CompanyContract['type'];\n  status: CompanyContract['status'];\n  value?: number | null;\n  currency?: string | null;\n  start_date: string;\n  end_date?: string | null;\n  renewal_date?: string | null;\n  terms?: string | null;\n  document_url?: string | null;\n  signed_date?: string | null;\n  signed_by?: string | null;\n  auto_renewal: boolean | null;\n  renewal_notice_days?: number | null;\n  created_at?: string | null;\n  updated_at?: string | null;\n  created_by?: string | null;\n  companies?: {\n    name?: string | null;\n  } | null;\n};\n\nexport default function ContractsClient({ user, orgId, translations }: ContractsClientProps) {\n  const [loading, setLoading] = useState(true);\n  const [contracts, setContracts] = useState<CompanyContract[]>([]);\n  const [selectedContract, setSelectedContract] = useState<CompanyContract | null>(null);\n  const [drawerOpen, setDrawerOpen] = useState(false);\n  const [drawerMode, setDrawerMode] = useState<'create' | 'edit' | 'view'>('view');\n  const [currentView, setCurrentView] = useState<'grid' | 'list'>('grid');\n  const [typeFilter, setTypeFilter] = useState<string>('all');\n  const [statusFilter, setStatusFilter] = useState<string>('all');\n  const [companies, setCompanies] = useState<CompanySummary[]>([]);\n\n  const supabase = useMemo(() => createBrowserClient(), []);\n\n  const loadContracts = useCallback(async () => {\n    try {\n      setLoading(true);\n      let query = supabase\n        .from('company_contracts')\n        .select(\n          `id, company_id, organization_id, project_id, name, description, type, status, value, currency,\n           start_date, end_date, renewal_date, terms, document_url, signed_date, signed_by, auto_renewal,\n           renewal_notice_days, created_at, updated_at, created_by, companies(name)`\n        )\n        .eq('organization_id', orgId);\n\n      if (typeFilter !== 'all') {\n        query = query.eq('type', typeFilter);\n      }\n\n      if (statusFilter !== 'all') {\n        query = query.eq('status', statusFilter);\n      }\n\n      const { data, error } = await query.order('created_at', { ascending: false });\n\n      if (error) throw error;\n\n      const rows = (data ?? []) as SupabaseContractRow[];\n\n      const normalizedContracts: CompanyContract[] = rows.map(contract => ({\n        id: contract.id,\n        companyId: contract.company_id,\n        companyName: contract.companies?.name ?? undefined,\n        organizationId: contract.organization_id,\n        projectId: contract.project_id ?? undefined,\n        name: contract.name,\n        description: contract.description ?? undefined,\n        type: contract.type,\n        status: contract.status,\n        value: contract.value ?? undefined,\n        currency: contract.currency ?? 'USD',\n        startDate: contract.start_date,\n        endDate: contract.end_date ?? undefined,\n        renewalDate: contract.renewal_date ?? undefined,\n        terms: contract.terms ?? undefined,\n        documentUrl: contract.document_url ?? undefined,\n        signedDate: contract.signed_date ?? undefined,\n        signedBy: contract.signed_by ?? undefined,\n        autoRenewal: Boolean(contract.auto_renewal),\n        renewalNoticeDays: contract.renewal_notice_days ?? undefined,\n        createdAt: contract.created_at ?? undefined,\n        updatedAt: contract.updated_at ?? undefined,\n        createdBy: contract.created_by ?? undefined\n      }));\n\n      setContracts(normalizedContracts);\n    } catch (error) {\n      console.error('Error loading contracts:', error);\n    } finally {\n      setLoading(false);\n    }\n  }, [orgId, statusFilter, supabase, typeFilter]);\n\n  const loadCompanies = useCallback(async () => {\n    try {\n      const { data, error } = await supabase\n        .from('companies')\n        .select('id, name')\n        .eq('organization_id', orgId)\n        .eq('status', 'active')\n        .order('name');\n\n      if (error) throw error;\n      const rows = (data ?? []) as { id: string; name: string }[];\n      const normalizedCompanies: CompanySummary[] = rows.map(company => ({\n        id: company.id,\n        name: company.name\n      }));\n\n      setCompanies(normalizedCompanies);\n    } catch (error) {\n      console.error('Error loading companies:', error);\n    }\n  }, [orgId, supabase]);\n\n  useEffect(() => {\n    void loadContracts();\n  }, [loadContracts]);\n\n  useEffect(() => {\n    void loadCompanies();\n  }, [loadCompanies]);\n\n  const handleCreateContract = () => {\n    setSelectedContract(null);\n    setDrawerMode('create');\n    setDrawerOpen(true);\n  };\n\n  const handleEditContract = (contract: CompanyContract) => {\n    setSelectedContract(contract);\n    setDrawerMode('edit');\n    setDrawerOpen(true);\n  };\n\n  const handleViewContract = (contract: CompanyContract) => {\n    setSelectedContract(contract);\n    setDrawerMode('view');\n    setDrawerOpen(true);\n  };\n\n  const handleDeleteContract = async (contractId: string) => {\n    if (!confirm('Are you sure you want to delete this contract?')) return;\n\n    try {\n      const { error } = await supabase\n        .from('company_contracts')\n        .delete()\n        .eq('id', contractId)\n        .eq('organization_id', orgId);\n\n      if (error) throw error;\n      await loadContracts();\n    } catch (error) {\n      console.error('Error deleting contract:', error);\n    }\n  };\n\n  const handleRenewContract = async (contractId: string) => {\n    try {\n      const contract = contracts.find(c => c.id === contractId);\n      if (!contract) return;\n\n      const newEndDate = new Date(contract.endDate || contract.startDate);\n      newEndDate.setFullYear(newEndDate.getFullYear() + 1);\n\n      const { error } = await supabase\n        .from('company_contracts')\n        .update({\n          status: 'active',\n          end_date: newEndDate.toISOString().split('T')[0],\n          renewal_date: new Date().toISOString().split('T')[0]\n        })\n        .eq('id', contractId)\n        .eq('organization_id', orgId);\n\n      if (error) throw error;\n      await loadContracts();\n    } catch (error) {\n      console.error('Error renewing contract:', error);\n    }\n  };\n\n  const handleSaveContract = async (contractData: Partial<CompanyContract>) => {\n    try {\n      if (drawerMode === 'create') {\n        const { error } = await supabase\n          .from('company_contracts')\n          .insert({\n            ...contractData,\n            organization_id: orgId,\n            created_by: user.id,\n            status: 'draft',\n            currency: contractData.currency || 'USD',\n            auto_renewal: contractData.autoRenewal || false\n          });\n\n        if (error) throw error;\n      } else if (drawerMode === 'edit' && selectedContract) {\n        const { error } = await supabase\n          .from('company_contracts')\n          .update(contractData)\n          .eq('id', selectedContract.id)\n          .eq('organization_id', orgId);\n\n        if (error) throw error;\n      }\n\n      setDrawerOpen(false);\n      await loadContracts();\n    } catch (error) {\n      console.error('Error saving contract:', error);\n    }\n  };\n\n  const formatCurrency = (amount: number, currency = 'USD') => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: currency,\n    }).format(amount);\n  };\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString();\n  };\n\n  const getStatusBadge = (status: string) => {\n    const config = {\n      draft: { variant: 'secondary' as const, label: 'Draft' },\n      pending: { variant: 'outline' as const, label: 'Pending' },\n      active: { variant: 'default' as const, label: 'Active' },\n      expired: { variant: 'destructive' as const, label: 'Expired' },\n      terminated: { variant: 'destructive' as const, label: 'Terminated' },\n      renewed: { variant: 'default' as const, label: 'Renewed' }\n    };\n    \n    const statusConfig = config[status as keyof typeof config] || config.draft;\n    return <Badge variant={statusConfig.variant}>{statusConfig.label}</Badge>;\n  };\n\n  const getTypeIcon = (type: string) => {\n    switch (type) {\n      case 'msa':\n        return <FileText className=\"h-5 w-5 color-accent\" />;\n      case 'sow':\n        return <FileText className=\"h-5 w-5 color-success\" />;\n      case 'nda':\n        return <FileText className=\"h-5 w-5 color-secondary\" />;\n      case 'service':\n        return <FileText className=\"h-5 w-5 color-warning\" />;\n      case 'supply':\n        return <FileText className=\"h-5 w-5 text-info\" />;\n      default:\n        return <FileText className=\"h-5 w-5 color-muted\" />;\n    }\n  };\n\n  const isExpiringSoon = (endDate?: string) => {\n    if (!endDate) return false;\n    const end = new Date(endDate);\n    const thirtyDaysFromNow = new Date();\n    thirtyDaysFromNow.setDate(thirtyDaysFromNow.getDate() + 30);\n    return end <= thirtyDaysFromNow && end >= new Date();\n  };\n\n\n  const typeCounts = {\n    all: contracts.length,\n    msa: contracts.filter(c => c.type === 'msa').length,\n    sow: contracts.filter(c => c.type === 'sow').length,\n    nda: contracts.filter(c => c.type === 'nda').length,\n    service: contracts.filter(c => c.type === 'service').length,\n    supply: contracts.filter(c => c.type === 'supply').length,\n    other: contracts.filter(c => c.type === 'other').length\n  };\n\n  const statusCounts = {\n    all: contracts.length,\n    draft: contracts.filter(c => c.status === 'draft').length,\n    pending: contracts.filter(c => c.status === 'pending').length,\n    active: contracts.filter(c => c.status === 'active').length,\n    expired: contracts.filter(c => c.status === 'expired').length,\n    terminated: contracts.filter(c => c.status === 'terminated').length\n  };\n\n  if (loading) {\n    return (\n      <div className=\"stack-lg\">\n        <div className=\"flex items-center justify-between\">\n          <Skeleton className=\"h-8 w-48\" />\n          <Skeleton className=\"h-10 w-32\" />\n        </div>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-md\">\n          {Array.from({ length: 6 }).map((_, i) => (\n            <Card key={i} className=\"p-lg\">\n              <Skeleton className=\"h-4 w-32 mb-sm\" />\n              <Skeleton className=\"h-6 w-24 mb-md\" />\n              <Skeleton className=\"h-4 w-20\" />\n            </Card>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <StateManagerProvider>\n      <div className=\"stack-lg\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between mb-lg\">\n          <div>\n            <h2 className=\"text-heading-2\">Company Contracts</h2>\n            <p className=\"text-sm text-muted-foreground mt-xs\">Manage contracts and agreements with companies</p>\n          </div>\n          <div className=\"flex items-center cluster-sm\">\n            <div className=\"flex border rounded-md\">\n              <Button\n                variant={currentView === 'grid' ? 'default' : 'ghost'}\n                onClick={() => setCurrentView('grid')}\n              >\n                Grid\n              </Button>\n              <Button\n                variant={currentView === 'list' ? 'default' : 'ghost'}\n                onClick={() => setCurrentView('list')}\n              >\n                List\n              </Button>\n            </div>\n            <Button onClick={handleCreateContract}>\n              <IconWithText icon={Plus} text=\"New Contract\" size=\"sm\" />\n            </Button>\n          </div>\n        </div>\n\n        {/* Filter Tabs */}\n        <div className=\"flex flex-wrap items-center gap-md\">\n          {/* Type Filter */}\n          <div className=\"flex cluster-xs bg-secondary p-xs rounded-lg\">\n            {Object.entries(typeCounts).map(([type, count]) => (\n              <Button\n                key={type}\n                variant={typeFilter === type ? 'default' : 'ghost'}\n                onClick={() => setTypeFilter(type)}\n                className=\"capitalize\"\n              >\n                {type === 'msa' ? 'MSA' : type === 'sow' ? 'SOW' : type === 'nda' ? 'NDA' : type} ({count})\n              </Button>\n            ))}\n          </div>\n\n          {/* Status Filter */}\n          <div className=\"flex cluster-xs bg-secondary p-xs rounded-lg\">\n            {Object.entries(statusCounts).map(([status, count]) => (\n              <Button\n                key={status}\n                variant={statusFilter === status ? 'default' : 'ghost'}\n                onClick={() => setStatusFilter(status)}\n                className=\"capitalize\"\n              >\n                {status} ({count})\n              </Button>\n            ))}\n          </div>\n        </div>\n\n        {/* Contract Grid/List View */}\n        {currentView === 'grid' ? (\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-md\">\n            {contracts.map(contract => (\n              <Card key={contract.id} className=\"p-lg hover:shadow-elevated transition-shadow cursor-pointer\" onClick={() => handleViewContract(contract)}>\n                <div className=\"flex items-start justify-between mb-md\">\n                  <div className=\"flex items-center cluster-sm\">\n                    {getTypeIcon(contract.type)}\n                    <div>\n                      <h3 className=\"text-heading-4 color-foreground\">{contract.name}</h3>\n                      <p className=\"text-body-sm color-foreground/70\">{contract.companyName}</p>\n                    </div>\n                  </div>\n                  {getStatusBadge(contract.status)}\n                </div>\n                \n                {contract.description && (\n                  <p className=\"text-body-sm color-foreground/70 mb-md line-clamp-2\">\n                    {contract.description}\n                  </p>\n                )}\n                \n                <div className=\"stack-sm mb-md\">\n                  <div className=\"flex justify-between text-body-sm\">\n                    <span className=\"color-foreground/70\">Type</span>\n                    <span className=\"form-label capitalize\">\n                      {contract.type === 'msa' ? 'MSA' : contract.type === 'sow' ? 'SOW' : contract.type === 'nda' ? 'NDA' : contract.type}\n                    </span>\n                  </div>\n                  \n                  {contract.value && (\n                    <div className=\"flex justify-between text-body-sm\">\n                      <span className=\"color-foreground/70\">Value</span>\n                      <span className=\"form-label color-success\">{formatCurrency(contract.value, contract.currency)}</span>\n                    </div>\n                  )}\n                  \n                  <div className=\"flex justify-between text-body-sm\">\n                    <span className=\"color-foreground/70\">Start Date</span>\n                    <span className=\"form-label\">{formatDate(contract.startDate)}</span>\n                  </div>\n                  \n                  {contract.endDate && (\n                    <div className=\"flex justify-between text-body-sm\">\n                      <span className=\"color-foreground/70\">End Date</span>\n                      <span className={`form-label ${isExpiringSoon(contract.endDate) ? 'color-warning' : 'color-foreground'}`}>\n                        {formatDate(contract.endDate)}\n                        {isExpiringSoon(contract.endDate) && (\n                          <AlertTriangle className=\"inline h-3 w-3 ml-xs\" />\n                        )}\n                      </span>\n                    </div>\n                  )}\n                  \n                  {contract.autoRenewal && (\n                    <div className=\"flex items-center gap-sm\">\n                      <Icon icon={FileText} size=\"sm\" color=\"muted\" />\n                      <span className=\"text-sm text-muted-foreground\">Total Contracts</span>\n                    </div>\n                  )}\n                </div>\n                \n                <div className=\"flex items-center justify-between pt-md border-t border-border\">\n                  <div className=\"flex cluster-sm\">\n                    {contract.status === 'expired' && (\n                      <Button\n                        variant=\"default\"\n                        onClick={(e: React.MouseEvent) => {\n                          e.stopPropagation();\n                          handleRenewContract(contract.id);\n                        }}\n                      >\n                        Renew\n                      </Button>\n                    )}\n                    {contract.documentUrl && (\n                      <Button\n                        variant=\"ghost\"\n                        onClick={(e: React.MouseEvent) => {\n                          e.stopPropagation();\n                          window.open(contract.documentUrl, '_blank');\n                        }}\n                      >\n                        <Download className=\"h-3 w-3\" />\n                      </Button>\n                    )}\n                  </div>\n                  \n                  <div className=\"flex cluster-sm\">\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={() => setSelectedContract(contract)}\n                    >\n                      View Details\n                    </Button>\n                    <Button\n                      variant=\"default\"\n                      size=\"sm\"\n                      onClick={() => {\n                        setSelectedContract(contract);\n                        setDrawerMode('edit');\n                        setDrawerOpen(true);\n                      }}\n                    >\n                      Edit\n                    </Button>\n                  </div>\n                </div>\n              </Card>\n            ))}\n          </div>\n        ) : (\n          <Card className=\"p-lg\">\n            <div className=\"stack-md\">\n              {contracts.map(contract => (\n                <div key={contract.id} className=\"border rounded-lg p-md\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <h3 className=\"text-body text-heading-4\">{contract.name}</h3>\n                      <p className=\"text-body-sm color-muted\">{contract.type}</p>\n                    </div>\n                    <div className=\"flex items-center gap-sm\">\n                      <Badge variant={contract.status === 'active' ? 'success' : 'outline'}>\n                        {contract.status}\n                      </Badge>\n                      <Button onClick={() => handleEditContract(contract)}>\n                        Edit\n                      </Button>\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </Card>\n        )}\n\n        {/* Empty State */}\n        {contracts.length === 0 && (\n          <Card className=\"p-2xl text-center\">\n            <FileText className=\"h-12 w-12 mx-auto mb-md color-foreground/30\" />\n            <h3 className=\"text-body text-heading-4 color-foreground mb-sm\">No contracts found</h3>\n            <p className=\"color-foreground/70 mb-md\">Create your first company contract to get started</p>\n            <Button onClick={handleCreateContract}>\n              <Plus className=\"h-4 w-4 mr-sm\" />\n              New Contract\n            </Button>\n          </Card>\n        )}\n\n        {/* Drawer for CRUD operations */}\n        <AppDrawer\n          open={drawerOpen}\n          onClose={() => setDrawerOpen(false)}\n          record={selectedContract as unknown}\n          fields={[]}\n          mode={drawerMode === 'create' ? 'create' : drawerMode === 'edit' ? 'edit' : 'view'}\n          title={drawerMode === 'create' ? 'New Contract' : drawerMode === 'edit' ? 'Edit Contract' : 'Contract Details'}\n          tabs={[\n            {\n              key: 'content',\n              label: 'Details',\n              content: (\n                <div className=\"p-lg\">\n                  <p className=\"color-muted\">Contract details will be displayed here.</p>\n                </div>\n              )\n            }\n          ]}\n        />\n      </div>\n    </StateManagerProvider>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ghxstship/apps/web/app/(app)/(shell)/companies/directory/DirectoryClient.tsx","messages":[{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Download' is not defined.","line":313,"column":16,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":313,"endColumn":24},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useMemo has a missing dependency: 'companyRecords'. Either include it or remove the dependency array.","line":329,"column":5,"nodeType":"ArrayExpression","endLine":329,"endColumn":53,"suggestions":[{"desc":"Update the dependencies array to be: [handleBulkDelete, handleBulkStatus, companyRecords, exportData]","fix":{"range":[10968,11016],"text":"[handleBulkDelete, handleBulkStatus, companyRecords, exportData]"}}]},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Building' is not defined.","line":341,"column":12,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":341,"endColumn":20},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'ArrowUpRight' is not defined.","line":423,"column":18,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":423,"endColumn":30},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Upload' is not defined.","line":494,"column":14,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":494,"endColumn":20},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Building' is not defined.","line":498,"column":14,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":498,"endColumn":22}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport { useCallback, useEffect, useMemo, useState } from 'react';\nimport type { User } from '@supabase/supabase-js';\nimport {\n  Badge,\n  Button,\n  Card,\n  Skeleton,\n  useToastContext,\n} from '@ghxstship/ui';\nimport {\n  CalendarView,\n  DataActions,\n  DataGrid,\n  DataViewProvider,\n  GalleryView,\n  KanbanBoard,\n  ListView,\n  StateManagerProvider,\n  TimelineView,\n  ViewSwitcher,\n} from '@ghxstship/ui/components/DataViews';\nimport type {\n  ActionConfig,\n  DataRecord,\n  DataViewConfig,\n  ExportConfig,\n  FilterConfig,\n  ImportConfig,\n  SortConfig,\n} from '@ghxstship/ui/components/DataViews/types';\n\nimport { COMPANY_FIELD_CONFIGS } from '../lib/field-config';\nimport { DirectoryService } from './lib/directory-service';\nimport type {\n  Company,\n  DirectoryFilters,\n  DirectoryStats,\n} from './types';\nimport CreateCompanyDrawer from './drawers/CreateCompanyDrawer';\nimport EditCompanyDrawer from './drawers/EditCompanyDrawer';\n\ninterface DirectoryClientProps {\n  user: User;\n  orgId: string;\n  translations: {\n    title: string;\n    subtitle: string;\n  };\n}\n\nconst EXPORT_FORMATS: ExportConfig['formats'] = ['csv', 'excel', 'json'];\nconst IMPORT_FORMATS: ImportConfig['formats'] = ['csv', 'json'];\n\nexport default function DirectoryClient({ user, orgId, translations }: DirectoryClientProps) {\n  const { toast } = useToastContext();\n  const directoryService = useMemo(() => new DirectoryService(), []);\n\n  const [loading, setLoading] = useState(true);\n  const [companies, setCompanies] = useState<Company[]>([]);\n  const [stats, setStats] = useState<DirectoryStats | null>(null);\n  const [filters, setFilters] = useState<DirectoryFilters>({});\n  const [searchQuery, setSearchQuery] = useState<string>(\"\");\n  const [sorts, setSorts] = useState<SortConfig[]>([]);\n  const [page, setPage] = useState(1);\n  const [pageSize, setPageSize] = useState(25);\n  const [total, setTotal] = useState(0);\n  const [selectedCompany, setSelectedCompany] = useState<Company | null>(null);\n  const [createDrawerOpen, setCreateDrawerOpen] = useState(false);\n  const [editDrawerOpen, setEditDrawerOpen] = useState(false);\n\n  const appliedFilters = useMemo(() => ({\n    ...filters,\n    ...(searchQuery ? { search: searchQuery } : {}),\n  }), [filters, searchQuery]);\n\n  const loadDirectory = useCallback(async () => {\n    setLoading(true);\n    try {\n      const result = await directoryService.getCompanies(orgId, appliedFilters, page, pageSize);\n      let nextData = result.data ?? [];\n\n      if (sorts.length) {\n        const { field, direction } = sorts[0];\n        nextData = [...nextData].sort((a: any, b: unknown) => {\n          const aValue = a?.[field];\n          const bValue = b?.[field];\n\n          if (aValue === bValue) return 0;\n          if (aValue == null) return direction === \"asc\" ? -1 : 1;\n          if (bValue == null) return direction === \"asc\" ? 1 : -1;\n\n          if (typeof aValue === \"number\" && typeof bValue === \"number\") {\n            return direction === \"asc\" ? aValue - bValue : bValue - aValue;\n          }\n\n          return direction === \"asc\"\n            ? String(aValue).localeCompare(String(bValue))\n            : String(bValue).localeCompare(String(aValue));\n        });\n      }\n\n      setCompanies(nextData as Company[]);\n      setTotal(result.count ?? nextData.length);\n      const directoryStats = await directoryService.getDirectoryStats(orgId);\n      setStats(directoryStats);\n    } catch (error) {\n      console.error(\"Error loading directory\", error);\n      toast.error('Failed to load directory', error instanceof Error ? error.message : 'Unknown error');\n    } finally {\n      setLoading(false);\n    }\n  }, [directoryService, orgId, appliedFilters, page, pageSize, sorts, toast]);\n\n  useEffect(() => {\n    void loadDirectory();\n  }, [loadDirectory]);\n\n  const handleSearch = useCallback((query: string) => {\n    setSearchQuery(query.trim());\n    setPage(1);\n  }, []);\n\n  const handleFilter = useCallback((filterConfigs: FilterConfig[]) => {\n    const next: DirectoryFilters = {};\n\n    filterConfigs.forEach((config) => {\n      if (!config.field) return;\n      const value = config.value;\n      if (value == null || value === \"\" || (Array.isArray(value) && value.length === 0)) return;\n\n      switch (config.field) {\n        case \"industry\":\n          next.industry = Array.isArray(value) ? value.filter(Boolean) : [value];\n          break;\n        case \"status\":\n          next.status = Array.isArray(value) ? value.filter(Boolean) as DirectoryFilters[\"status\"] : [value];\n          break;\n        case \"size\":\n          next.size = Array.isArray(value) ? value.filter(Boolean) as DirectoryFilters[\"size\"] : [value];\n          break;\n        case \"country\":\n          next.country = Array.isArray(value) ? value.filter(Boolean) : [value];\n          break;\n        case \"city\":\n          next.city = Array.isArray(value) ? value.filter(Boolean) : [value];\n          break;\n        case \"founded_year\":\n          if (typeof value === \"object\" && value !== null) {\n            const { min, max } = value as { min?: number; max?: number };\n            if (min) next.founded_year_min = min;\n            if (max) next.founded_year_max = max;\n          }\n          break;\n        default:\n          break;\n      }\n    });\n\n    setFilters(next);\n    setPage(1);\n  }, []);\n\n  const handleSort = useCallback((nextSorts: SortConfig[]) => {\n    setSorts(nextSorts);\n  }, []);\n\n  const companyRecords = useMemo<DataRecord[]>(\n    () =>\n      companies.map((company) => ({\n        id: company.id,\n        name: company.name,\n        industry: company.industry ?? \"\",\n        status: company.status,\n        size: company.size ?? \"\",\n        website: company.website ?? \"\",\n        email: company.email ?? \"\",\n        phone: company.phone ?? \"\",\n        city: company.city ?? \"\",\n        country: company.country ?? \"\",\n        founded_year: company.founded_year ?? null,\n        created_at: company.created_at,\n        updated_at: company.updated_at,\n      })),\n    [companies]\n  );\n\n  const downloadBlob = (blob: Blob, filename: string) => {\n    const url = URL.createObjectURL(blob);\n    const link = document.createElement(\"a\");\n    link.href = url;\n    link.download = filename;\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n    URL.revokeObjectURL(url);\n  };\n\n  const exportData = useCallback(\n    async (format: string, records?: DataRecord[]) => {\n      const dataset = records && records.length\n        ? records\n        : await directoryService.exportData(orgId, \"companies\", { format: \"json\", filters: appliedFilters });\n\n      if (!dataset || dataset.length === 0) {\n        toast.warning('No records to export', 'Adjust filters and try again.');\n        return;\n      }\n\n      if (format === \"json\") {\n        const blob = new Blob([JSON.stringify(dataset, null, 2)], { type: \"application/json\" });\n        downloadBlob(blob, `companies-${new Date().toISOString()}.json`);\n      } else {\n        const headers = Object.keys(dataset[0]);\n        const rows = [headers.join(\",\")];\n        dataset.forEach((row: unknown) => {\n          const values = headers.map((header) => {\n            const value = row[header] ?? \"\";\n            const serialized = String(value).replace(/\"/g, '\"\"');\n            return serialized.includes(\",\") ? `\"${serialized}\"` : serialized;\n          });\n          rows.push(values.join(\",\"));\n        });\n        const blob = new Blob([rows.join(\"\\n\")], { type: \"text/csv\" });\n        downloadBlob(blob, `companies-${new Date().toISOString()}.csv`);\n      }\n\n      toast.success('Export complete', `Records exported as ${format.toUpperCase()}.`);\n    },\n    [directoryService, orgId, appliedFilters, toast]\n  );\n\n  const importData = useCallback(\n    async (records: DataRecord[]) => {\n      if (!records.length) {\n        toast.warning('No records detected', 'Upload a file containing company data.');\n        return;\n      }\n\n      const payload = records.map((record) => ({\n        organization_id: orgId,\n        name: record.name ?? record.company_name,\n        description: record.description ?? null,\n        industry: record.industry ?? null,\n        website: record.website ?? null,\n        email: record.email ?? null,\n        phone: record.phone ?? null,\n        address: record.address ?? null,\n        city: record.city ?? null,\n        state: record.state ?? null,\n        country: record.country ?? null,\n        postal_code: record.postal_code ?? null,\n        size: record.size ?? null,\n        founded_year: record.founded_year ?? null,\n        status: (record.status as Company[\"status\"]) ?? \"pending\",\n        notes: record.notes ?? null,\n        created_by: user.id,\n      }));\n\n      const result = await directoryService.importCompanies(orgId, payload);\n\n      if (!result.success) {\n        toast.error('Import failed', result.errors?.join('\\n') ?? 'Unknown error');\n        return;\n      }\n\n      toast.success('Import complete', `${result.inserted} records imported successfully.`);\n      void loadDirectory();\n    },\n    [directoryService, orgId, user.id, toast, loadDirectory]\n  );\n\n  const handleBulkStatus = useCallback(\n    async (ids: string[], status: Company[\"status\"]) => {\n      if (!ids.length) return;\n      await directoryService.bulkUpdateStatus(orgId, ids, status);\n      toast.success(`Companies marked as ${status}`, `${ids.length} record(s) updated.`);\n      void loadDirectory();\n    },\n    [directoryService, orgId, loadDirectory, toast]\n  );\n\n  const handleBulkDelete = useCallback(\n    async (ids: string[]) => {\n      if (!ids.length) return;\n      await directoryService.bulkDelete(orgId, ids);\n      toast.success('Companies deleted', `${ids.length} record(s) removed.`);\n      void loadDirectory();\n    },\n    [directoryService, orgId, loadDirectory, toast]\n  );\n\n  const bulkActions = useMemo<ActionConfig[]>(\n    () => [\n      {\n        key: \"activate\",\n        label: \"Mark as Active\",\n        icon: <Badge variant=\"success\">Active</Badge>,\n        onClick: (ids) => handleBulkStatus(ids, \"active\"),\n        requiresSelection: true,\n      },\n      {\n        key: \"deactivate\",\n        label: \"Mark as Inactive\",\n        icon: <Badge variant=\"secondary\">Inactive</Badge>,\n        onClick: (ids) => handleBulkStatus(ids, \"inactive\"),\n        requiresSelection: true,\n      },\n      {\n        key: \"export\",\n        label: \"Export Selected\",\n        icon: <Download className=\"h-4 w-4\" />,\n        onClick: async (selectedIds) => {\n          const subset = companyRecords.filter((record) => selectedIds.includes(record.id));\n          await exportData('csv', subset);\n        },\n        requiresSelection: true,\n      },\n      {\n        key: \"delete\",\n        label: \"Delete Selected\",\n        icon: <Badge variant=\"destructive\">Delete</Badge>,\n        onClick: handleBulkDelete,\n        requiresSelection: true,\n        confirmMessage: \"Delete selected companies? This cannot be undone.\",\n      },\n    ],\n    [handleBulkStatus, exportData, handleBulkDelete]\n  );\n\n  const statsCards = stats ? (\n    <div className=\"grid grid-cols-1 md:grid-cols-2 xl:grid-cols-5 gap-md\">\n      <Card className=\"p-lg\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <p className=\"text-body-sm color-foreground/70\">Total Companies</p>\n            <p className=\"text-heading-3 color-foreground\">{stats.totalCompanies}</p>\n            <p className=\"text-body-sm color-success/80\">{stats.activeCompanies} active</p>\n          </div>\n          <Building className=\"h-8 w-8 color-accent\" />\n        </div>\n      </Card>\n      <Card className=\"p-lg\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <p className=\"text-body-sm color-foreground/70\">Pending Review</p>\n            <p className=\"text-heading-3 color-warning\">{stats.pendingCompanies}</p>\n            <p className=\"text-body-sm color-foreground/50\">Require follow-up</p>\n          </div>\n          <Badge variant=\"warning\">Pending</Badge>\n        </div>\n      </Card>\n      <Card className=\"p-lg\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <p className=\"text-body-sm color-foreground/70\">Inactive Records</p>\n            <p className=\"text-heading-3 color-muted\">{stats.inactiveCompanies}</p>\n            <p className=\"text-body-sm color-foreground/50\">Keep data fresh</p>\n          </div>\n          <Badge variant=\"secondary\">Inactive</Badge>\n        </div>\n      </Card>\n      <Card className=\"p-lg\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <p className=\"text-body-sm color-foreground/70\">Blacklisted</p>\n            <p className=\"text-heading-3 color-destructive\">{stats.blacklistedCompanies}</p>\n            <p className=\"text-body-sm color-foreground/50\">Review compliance</p>\n          </div>\n          <Badge variant=\"destructive\">Flagged</Badge>\n        </div>\n      </Card>\n      <Card className=\"p-lg\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <p className=\"text-body-sm color-foreground/70\">Industries Tracked</p>\n            <p className=\"text-heading-3 color-foreground\">\n              {Object.keys(stats.byIndustry).length}\n            </p>\n            <p className=\"text-body-sm color-foreground/50\">Diverse portfolio</p>\n          </div>\n          <Badge variant=\"outline\">Insights</Badge>\n        </div>\n      </Card>\n    </div>\n  ) : null;\n\n  const dataViewConfig = useMemo<DataViewConfig>(\n    () => ({\n      id: \"companies-directory\",\n      name: translations.title,\n      viewType: \"grid\",\n      defaultView: \"grid\",\n      data: companyRecords,\n      fields: COMPANY_FIELD_CONFIGS,\n      loading,\n      bulkActions,\n      exportConfig: {\n        formats: EXPORT_FORMATS,\n        onExport: (format, records, _config) => exportData(format, records),\n      },\n      importConfig: {\n        formats: IMPORT_FORMATS,\n        onImport: importData,\n      },\n      onSearch: handleSearch,\n      onFilter: handleFilter,\n      onSort: handleSort,\n      pagination: {\n        page,\n        pageSize,\n        total,\n      },\n      onPaginate: (nextPage, nextPageSize) => {\n        setPage(nextPage);\n        setPageSize(nextPageSize);\n      },\n      actions: [\n        {\n          key: \"view\",\n          label: \"View Details\",\n          icon: <ArrowUpRight className=\"h-4 w-4\" />,\n          onClick: (record: DataRecord) => {\n            const company = companies.find((item) => item.id === record.id);\n            if (company) {\n              setSelectedCompany(company);\n              setEditDrawerOpen(true);\n            }\n          },\n        },\n      ],\n    }),\n    [\n      translations.title,\n      companyRecords,\n      loading,\n      bulkActions,\n      exportData,\n      importData,\n      handleSearch,\n      handleFilter,\n      handleSort,\n      page,\n      pageSize,\n      total,\n      companies,\n    ]\n  );\n\n  if (loading && !companies.length) {\n    return (\n      <div className=\"stack-lg\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"space-y-xs\">\n            <Skeleton className=\"h-8 w-56\" />\n            <Skeleton className=\"h-4 w-80\" />\n          </div>\n          <Skeleton className=\"h-10 w-28\" />\n        </div>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 xl:grid-cols-5 gap-md\">\n          {Array.from({ length: 5 }).map((_, index) => (\n            <Card key={index} className=\"p-lg space-y-sm\">\n              <Skeleton className=\"h-4 w-32\" />\n              <Skeleton className=\"h-6 w-24\" />\n              <Skeleton className=\"h-3 w-20\" />\n            </Card>\n          ))}\n        </div>\n        <Card className=\"p-2xl\">\n          <div className=\"stack-sm\">\n            <Skeleton className=\"h-5 w-48\" />\n            <Skeleton className=\"h-4 w-full\" />\n            <Skeleton className=\"h-4 w-full\" />\n            <Skeleton className=\"h-4 w-3/4\" />\n          </div>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"stack-lg\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-heading-2 font-anton uppercase color-foreground\">{translations.title}</h1>\n          <p className=\"text-body-sm color-foreground/70\">{translations.subtitle}</p>\n        </div>\n        <div className=\"flex items-center gap-sm\">\n          <Button\n            variant=\"outline\"\n            onClick={() => toast.info('Import companies', 'Use the import control in the toolbar.')}\n          >\n            <Upload className=\"h-4 w-4 mr-xs\" />\n            Prepare Import\n          </Button>\n          <Button onClick={() => setCreateDrawerOpen(true)}>\n            <Building className=\"h-4 w-4 mr-xs\" />\n            Add Company\n          </Button>\n        </div>\n      </div>\n\n      {statsCards}\n\n      <DataViewProvider config={dataViewConfig}>\n        <StateManagerProvider>\n          <div className=\"stack-md\">\n            <DataActions />\n            <ViewSwitcher />\n            <DataGrid />\n            <KanbanBoard\n              statusField=\"status\"\n              titleField=\"name\"\n              columns={[\n                { id: \"active\", title: \"Active\" },\n                { id: \"pending\", title: \"Pending\" },\n                { id: \"inactive\", title: \"Inactive\" },\n                { id: \"blacklisted\", title: \"Blacklisted\" },\n              ]}\n            />\n            <CalendarView startDateField=\"created_at\" titleField=\"name\" />\n            <ListView titleField=\"name\" />\n            <TimelineView startDateField=\"created_at\" titleField=\"name\" />\n            <GalleryView titleField=\"name\" />\n          </div>\n        </StateManagerProvider>\n      </DataViewProvider>\n\n      <CreateCompanyDrawer\n        open={createDrawerOpen}\n        onClose={() => setCreateDrawerOpen(false)}\n        orgId={orgId}\n        onSuccess={() => {\n          setCreateDrawerOpen(false);\n          void loadDirectory();\n        }}\n      />\n\n      <EditCompanyDrawer\n        open={editDrawerOpen}\n        onClose={() => {\n          setEditDrawerOpen(false);\n          setSelectedCompany(null);\n        }}\n        company={selectedCompany}\n        orgId={orgId}\n        onSuccess={() => {\n          setEditDrawerOpen(false);\n          setSelectedCompany(null);\n          void loadDirectory();\n        }}\n      />\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ghxstship/apps/web/app/(app)/(shell)/companies/directory/views/DirectoryGridView.tsx","messages":[{"ruleId":"@next/next/no-img-element","severity":1,"message":"Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` or a custom image loader to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","line":100,"column":15,"nodeType":"JSXOpeningElement","endLine":104,"endColumn":17}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { Building, Globe, Mail, Phone, MapPin, Users, Edit, Eye, Trash2 } from \"lucide-react\";\nimport { Card, Button, Badge } from '@ghxstship/ui';\nimport type { Company } from '../types';\n\ninterface DirectoryGridViewProps {\n  companies: Company[];\n  onEdit: (company: Company) => void;\n  onView: (company: Company) => void;\n  onDelete: (company: Company) => void;\n  loading?: boolean;\n}\n\nexport default function DirectoryGridView({\n  companies,\n  onEdit,\n  onView,\n  onDelete,\n  loading = false\n}: DirectoryGridViewProps) {\n  if (loading) {\n    return (\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6\">\n        {[...Array(8)].map((_, i) => (\n          <Card key={i} className=\"p-6 animate-pulse\">\n            <div className=\"h-4 bg-muted rounded w-3/4 mb-2\"></div>\n            <div className=\"h-3 bg-muted rounded w-1/2 mb-4\"></div>\n            <div className=\"space-y-2\">\n              <div className=\"h-3 bg-muted rounded w-full\"></div>\n              <div className=\"h-3 bg-muted rounded w-2/3\"></div>\n            </div>\n          </Card>\n        ))}\n      </div>\n    );\n  }\n\n  if (companies.length === 0) {\n    return (\n      <div className=\"text-center py-12\">\n        <Building className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n        <h3 className=\"text-lg font-semibold mb-2\">No companies found</h3>\n        <p className=\"text-muted-foreground\">\n          Try adjusting your search criteria or add a new company.\n        </p>\n      </div>\n    );\n  }\n\n  const getStatusVariant = (status: Company['status']) => {\n    switch (status) {\n      case 'active':\n        return 'success';\n      case 'pending':\n        return 'warning';\n      case 'inactive':\n        return 'secondary';\n      case 'blacklisted':\n        return 'destructive';\n      default:\n        return 'secondary';\n    }\n  };\n\n  const getSizeLabel = (size?: Company['size']) => {\n    switch (size) {\n      case 'startup':\n        return '1-10 employees';\n      case 'small':\n        return '11-50 employees';\n      case 'medium':\n        return '51-200 employees';\n      case 'large':\n        return '201-1000 employees';\n      case 'enterprise':\n        return '1000+ employees';\n      default:\n        return 'Unknown size';\n    }\n  };\n\n  return (\n    <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6\">\n      {companies.map((company) => (\n        <Card key={company.id} className=\"p-6 hover:shadow-md transition-shadow\">\n          <div className=\"flex items-start justify-between mb-4\">\n            <div className=\"flex-1\">\n              <h3 className=\"font-semibold text-lg mb-1 truncate\" title={company.name}>\n                {company.name}\n              </h3>\n              {company.industry && (\n                <p className=\"text-sm text-muted-foreground mb-2\">{company.industry}</p>\n              )}\n              <Badge variant={getStatusVariant(company.status)}>\n                {company.status}\n              </Badge>\n            </div>\n            {company.logo_url && (\n              <img\n                src={company.logo_url}\n                alt={`${company.name} logo`}\n                className=\"w-12 h-12 rounded-lg object-cover\"\n              />\n            )}\n          </div>\n\n          {company.description && (\n            <p className=\"text-sm text-muted-foreground mb-4 line-clamp-2\">\n              {company.description}\n            </p>\n          )}\n\n          <div className=\"space-y-2 mb-4\">\n            {company.website && (\n              <div className=\"flex items-center text-sm text-muted-foreground\">\n                <Globe className=\"h-4 w-4 mr-2 flex-shrink-0\" />\n                <a\n                  href={company.website}\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                  className=\"hover:text-primary truncate\"\n                >\n                  {company.website.replace(/^https?:\\/\\//, '')}\n                </a>\n              </div>\n            )}\n            \n            {company.email && (\n              <div className=\"flex items-center text-sm text-muted-foreground\">\n                <Mail className=\"h-4 w-4 mr-2 flex-shrink-0\" />\n                <a\n                  href={`mailto:${company.email}`}\n                  className=\"hover:text-primary truncate\"\n                >\n                  {company.email}\n                </a>\n              </div>\n            )}\n            \n            {company.phone && (\n              <div className=\"flex items-center text-sm text-muted-foreground\">\n                <Phone className=\"h-4 w-4 mr-2 flex-shrink-0\" />\n                <a\n                  href={`tel:${company.phone}`}\n                  className=\"hover:text-primary\"\n                >\n                  {company.phone}\n                </a>\n              </div>\n            )}\n            \n            {(company.city || company.country) && (\n              <div className=\"flex items-center text-sm text-muted-foreground\">\n                <MapPin className=\"h-4 w-4 mr-2 flex-shrink-0\" />\n                <span className=\"truncate\">\n                  {[company.city, company.country].filter(Boolean).join(', ')}\n                </span>\n              </div>\n            )}\n            \n            {company.size && (\n              <div className=\"flex items-center text-sm text-muted-foreground\">\n                <Users className=\"h-4 w-4 mr-2 flex-shrink-0\" />\n                <span>{getSizeLabel(company.size)}</span>\n              </div>\n            )}\n          </div>\n\n          <div className=\"flex items-center justify-between pt-4 border-t\">\n            <div className=\"text-xs text-muted-foreground\">\n              {company.founded_year && `Founded ${company.founded_year}`}\n            </div>\n            <div className=\"flex items-center space-x-1\">\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={() => onView(company)}\n              >\n                <Eye className=\"h-4 w-4\" />\n              </Button>\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={() => onEdit(company)}\n              >\n                <Edit className=\"h-4 w-4\" />\n              </Button>\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={() => onDelete(company)}\n              >\n                <Trash2 className=\"h-4 w-4\" />\n              </Button>\n            </div>\n          </div>\n        </Card>\n      ))}\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ghxstship/apps/web/app/(app)/(shell)/companies/directory/views/DirectoryListView.tsx","messages":[{"ruleId":"@next/next/no-img-element","severity":1,"message":"Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` or a custom image loader to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","line":110,"column":19,"nodeType":"JSXOpeningElement","endLine":114,"endColumn":21}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { Building, Globe, Mail, Phone, MapPin, Users, Edit, Eye, Trash2, Calendar } from \"lucide-react\";\nimport { Card, Button, Badge } from '@ghxstship/ui';\nimport type { Company } from '../types';\n\ninterface DirectoryListViewProps {\n  companies: Company[];\n  onEdit: (company: Company) => void;\n  onView: (company: Company) => void;\n  onDelete: (company: Company) => void;\n  loading?: boolean;\n}\n\nexport default function DirectoryListView({\n  companies,\n  onEdit,\n  onView,\n  onDelete,\n  loading = false\n}: DirectoryListViewProps) {\n  if (loading) {\n    return (\n      <div className=\"space-y-4\">\n        {[...Array(6)].map((_, i) => (\n          <Card key={i} className=\"p-6 animate-pulse\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center space-x-4 flex-1\">\n                <div className=\"w-12 h-12 bg-muted rounded-lg\"></div>\n                <div className=\"flex-1\">\n                  <div className=\"h-4 bg-muted rounded w-1/4 mb-2\"></div>\n                  <div className=\"h-3 bg-muted rounded w-1/6 mb-1\"></div>\n                  <div className=\"h-3 bg-muted rounded w-1/3\"></div>\n                </div>\n              </div>\n              <div className=\"flex space-x-2\">\n                <div className=\"w-8 h-8 bg-muted rounded\"></div>\n                <div className=\"w-8 h-8 bg-muted rounded\"></div>\n                <div className=\"w-8 h-8 bg-muted rounded\"></div>\n              </div>\n            </div>\n          </Card>\n        ))}\n      </div>\n    );\n  }\n\n  if (companies.length === 0) {\n    return (\n      <Card className=\"p-12 text-center\">\n        <Building className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n        <h3 className=\"text-lg font-semibold mb-2\">No companies found</h3>\n        <p className=\"text-muted-foreground\">\n          Try adjusting your search criteria or add a new company.\n        </p>\n      </Card>\n    );\n  }\n\n  const getStatusVariant = (status: Company['status']) => {\n    switch (status) {\n      case 'active':\n        return 'success';\n      case 'pending':\n        return 'warning';\n      case 'inactive':\n        return 'secondary';\n      case 'blacklisted':\n        return 'destructive';\n      default:\n        return 'secondary';\n    }\n  };\n\n  const getSizeLabel = (size?: Company['size']) => {\n    switch (size) {\n      case 'startup':\n        return '1-10';\n      case 'small':\n        return '11-50';\n      case 'medium':\n        return '51-200';\n      case 'large':\n        return '201-1K';\n      case 'enterprise':\n        return '1K+';\n      default:\n        return 'Unknown';\n    }\n  };\n\n  const formatDate = (dateString?: string) => {\n    if (!dateString) return '';\n    return new Date(dateString).toLocaleDateString('en-US', {\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric',\n    });\n  };\n\n  return (\n    <div className=\"space-y-4\">\n      {companies.map((company) => (\n        <Card key={company.id} className=\"p-6 hover:shadow-md transition-shadow\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-4 flex-1 min-w-0\">\n              {/* Logo/Icon */}\n              <div className=\"flex-shrink-0\">\n                {company.logo_url ? (\n                  <img\n                    src={company.logo_url}\n                    alt={`${company.name} logo`}\n                    className=\"w-12 h-12 rounded-lg object-cover\"\n                  />\n                ) : (\n                  <div className=\"w-12 h-12 rounded-lg bg-muted flex items-center justify-center\">\n                    <Building className=\"h-6 w-6 text-muted-foreground\" />\n                  </div>\n                )}\n              </div>\n\n              {/* Company Info */}\n              <div className=\"flex-1 min-w-0\">\n                <div className=\"flex items-center space-x-3 mb-1\">\n                  <h3 className=\"font-semibold text-lg truncate\" title={company.name}>\n                    {company.name}\n                  </h3>\n                  <Badge variant={getStatusVariant(company.status)}>\n                    {company.status}\n                  </Badge>\n                  {company.industry && (\n                    <span className=\"text-sm text-muted-foreground\">\n                      {company.industry}\n                    </span>\n                  )}\n                </div>\n\n                <div className=\"flex items-center space-x-6 text-sm text-muted-foreground\">\n                  {company.website && (\n                    <div className=\"flex items-center space-x-1\">\n                      <Globe className=\"h-4 w-4\" />\n                      <a\n                        href={company.website}\n                        target=\"_blank\"\n                        rel=\"noopener noreferrer\"\n                        className=\"hover:text-primary truncate max-w-32\"\n                      >\n                        {company.website.replace(/^https?:\\/\\//, '')}\n                      </a>\n                    </div>\n                  )}\n                  \n                  {company.email && (\n                    <div className=\"flex items-center space-x-1\">\n                      <Mail className=\"h-4 w-4\" />\n                      <a\n                        href={`mailto:${company.email}`}\n                        className=\"hover:text-primary truncate max-w-40\"\n                      >\n                        {company.email}\n                      </a>\n                    </div>\n                  )}\n                  \n                  {company.phone && (\n                    <div className=\"flex items-center space-x-1\">\n                      <Phone className=\"h-4 w-4\" />\n                      <a\n                        href={`tel:${company.phone}`}\n                        className=\"hover:text-primary\"\n                      >\n                        {company.phone}\n                      </a>\n                    </div>\n                  )}\n                  \n                  {(company.city || company.country) && (\n                    <div className=\"flex items-center space-x-1\">\n                      <MapPin className=\"h-4 w-4\" />\n                      <span className=\"truncate max-w-32\">\n                        {[company.city, company.country].filter(Boolean).join(', ')}\n                      </span>\n                    </div>\n                  )}\n                  \n                  {company.size && (\n                    <div className=\"flex items-center space-x-1\">\n                      <Users className=\"h-4 w-4\" />\n                      <span>{getSizeLabel(company.size)} employees</span>\n                    </div>\n                  )}\n\n                  {company.founded_year && (\n                    <div className=\"flex items-center space-x-1\">\n                      <Calendar className=\"h-4 w-4\" />\n                      <span>Founded {company.founded_year}</span>\n                    </div>\n                  )}\n                </div>\n\n                {company.description && (\n                  <p className=\"text-sm text-muted-foreground mt-2 line-clamp-1\">\n                    {company.description}\n                  </p>\n                )}\n              </div>\n            </div>\n\n            {/* Actions */}\n            <div className=\"flex items-center space-x-2 flex-shrink-0 ml-4\">\n              <div className=\"text-xs text-muted-foreground text-right\">\n                {company.created_at && (\n                  <div>Added {formatDate(company.created_at)}</div>\n                )}\n                {company.updated_at && company.updated_at !== company.created_at && (\n                  <div>Updated {formatDate(company.updated_at)}</div>\n                )}\n              </div>\n              <div className=\"flex items-center space-x-1\">\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={() => onView(company)}\n                  title=\"View company details\"\n                >\n                  <Eye className=\"h-4 w-4\" />\n                </Button>\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={() => onEdit(company)}\n                  title=\"Edit company\"\n                >\n                  <Edit className=\"h-4 w-4\" />\n                </Button>\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={() => onDelete(company)}\n                  title=\"Delete company\"\n                >\n                  <Trash2 className=\"h-4 w-4\" />\n                </Button>\n              </div>\n            </div>\n          </div>\n        </Card>\n      ))}\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ghxstship/apps/web/app/(app)/(shell)/companies/ratings/CreateRatingClient.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useMemo has a missing dependency: 'formData.isPublic'. Either include it or remove the dependency array.","line":385,"column":7,"nodeType":"ArrayExpression","endLine":385,"endColumn":287,"suggestions":[{"desc":"Update the dependencies array to be: [handleSubmit, formData.companyId, formData.projectId, formData.category, formData.score, formData.title, formData.review, formData.isPublic, companyOptions, projectOptions, categoryOptions, scoreButtons, handleTextChange, handleTextareaChange, handleCheckboxChange, onClose, submitting, updateForm]","fix":{"range":[12374,12654],"text":"[handleSubmit, formData.companyId, formData.projectId, formData.category, formData.score, formData.title, formData.review, formData.isPublic, companyOptions, projectOptions, categoryOptions, scoreButtons, handleTextChange, handleTextareaChange, handleCheckboxChange, onClose, submitting, updateForm]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { Building, Briefcase, MessageSquare, Save, Star, X } from \"lucide-react\";\nimport { useCallback, useEffect, useMemo, useState, type ChangeEvent, type FormEvent } from 'react';\nimport { User } from '@supabase/supabase-js';\nimport { createBrowserClient } from '@ghxstship/auth';\nimport {\n  Button,\n  Card,\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n  Textarea,\n  UnifiedInput,\n} from '@ghxstship/ui';\nimport AppDrawer, { type DrawerTab } from '@/app/_components/shared/AppDrawer';\n\ninterface CreateRatingClientProps {\n  user: User;\n  orgId: string;\n  isOpen: boolean;\n  onClose: () => void;\n  onSuccess?: (rating: CreatedRating) => void;\n}\n\ntype RatingCategory =\n  | 'quality'\n  | 'professionalism'\n  | 'communication'\n  | 'timeliness'\n  | 'value'\n  | 'safety'\n  | 'other';\n\ntype RatingScore = 1 | 2 | 3 | 4 | 5;\n\ninterface RatingFormData {\n  companyId: string;\n  projectId: string;\n  category: RatingCategory;\n  score: RatingScore;\n  title: string;\n  review: string;\n  isPublic: boolean;\n}\n\ninterface CompanyOption {\n  id: string;\n  name: string;\n}\n\ninterface ProjectOption {\n  id: string;\n  name: string;\n}\n\ninterface CreatedRating {\n  id: string;\n  company_id: string;\n  project_id: string | null;\n  rating: number;\n  category: string;\n  title: string;\n  review: string;\n  is_public: boolean;\n  created_at: string;\n}\n\nconst RATING_CATEGORIES: ReadonlyArray<{ value: RatingCategory; label: string }> = [\n  { value: 'quality', label: 'Quality of Work' },\n  { value: 'professionalism', label: 'Professionalism' },\n  { value: 'communication', label: 'Communication' },\n  { value: 'timeliness', label: 'Timeliness' },\n  { value: 'value', label: 'Value for Money' },\n  { value: 'safety', label: 'Safety Compliance' },\n  { value: 'other', label: 'Other' },\n];\n\nconst SCORE_OPTIONS: RatingScore[] = [1, 2, 3, 4, 5];\n\nconst INITIAL_FORM_DATA: RatingFormData = {\n  companyId: '',\n  projectId: '',\n  category: 'quality',\n  score: 5,\n  title: '',\n  review: '',\n  isPublic: false,\n};\n\nexport default function CreateRatingClient({ user, orgId, isOpen, onClose, onSuccess }: CreateRatingClientProps) {\n  const supabase = createBrowserClient();\n  const [companies, setCompanies] = useState<CompanyOption[]>([]);\n  const [projects, setProjects] = useState<ProjectOption[]>([]);\n  const [formData, setFormData] = useState<RatingFormData>(INITIAL_FORM_DATA);\n  const [submitting, setSubmitting] = useState(false);\n\n  const loadCompanies = useCallback(async () => {\n    const { data, error } = await supabase\n      .from('companies')\n      .select('id, name')\n      .eq('organization_id', orgId)\n      .order('name');\n\n    if (error) {\n      console.error('Error loading companies', error);\n      return;\n    }\n\n    setCompanies((data ?? []).map(company => ({ id: company.id, name: company.name })));\n  }, [orgId, supabase]);\n\n  const loadProjects = useCallback(async () => {\n    const { data, error } = await supabase\n      .from('projects')\n      .select('id, name')\n      .eq('organization_id', orgId)\n      .order('name');\n\n    if (error) {\n      console.error('Error loading projects', error);\n      return;\n    }\n\n    setProjects((data ?? []).map(project => ({ id: project.id, name: project.name })));\n  }, [orgId, supabase]);\n\n  useEffect(() => {\n    if (!isOpen) {\n      setFormData(INITIAL_FORM_DATA);\n      return;\n    }\n\n    void Promise.all([loadCompanies(), loadProjects()]);\n  }, [isOpen, loadCompanies, loadProjects]);\n\n  const updateForm = useCallback(<Key extends keyof RatingFormData>(field: Key, value: RatingFormData[Key]) => {\n    setFormData(prev => ({ ...prev, [field]: value }));\n  }, []);\n\n  const handleTextChange = useCallback((event: ChangeEvent<HTMLInputElement>) => {\n    const { name, value } = event.target;\n    updateForm(name as keyof RatingFormData, value as RatingFormData[keyof RatingFormData]);\n  }, [updateForm]);\n\n  const handleTextareaChange = useCallback((event: ChangeEvent<HTMLTextAreaElement>) => {\n    const { name, value } = event.target;\n    updateForm(name as keyof RatingFormData, value as RatingFormData[keyof RatingFormData]);\n  }, [updateForm]);\n\n  const handleCheckboxChange = useCallback((event: ChangeEvent<HTMLInputElement>) => {\n    updateForm('isPublic', event.target.checked);\n  }, [updateForm]);\n\n  const handleScoreChange = useCallback((score: RatingScore) => {\n    updateForm('score', score);\n  }, [updateForm]);\n\n  const handleSubmit = useCallback(async (event: FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    if (!formData.companyId || !formData.title.trim() || submitting) {\n      return;\n    }\n\n    setSubmitting(true);\n\n    try {\n      const ratingId = crypto.randomUUID();\n      const { data: insertedRating, error } = await supabase\n        .from('company_ratings')\n        .insert({\n          id: ratingId,\n          organization_id: orgId,\n          company_id: formData.companyId,\n          project_id: formData.projectId || null,\n          rating: formData.score,\n          category: formData.category,\n          title: formData.title.trim(),\n          review: formData.review.trim(),\n          is_public: formData.isPublic,\n          created_by: user.id,\n          created_at: new Date().toISOString(),\n          updated_at: new Date().toISOString(),\n        })\n        .select()\n        .single<CreatedRating>();\n\n      if (error) throw error;\n\n      onSuccess?.(insertedRating);\n      setFormData(INITIAL_FORM_DATA);\n      onClose();\n    } catch (error) {\n      console.error('Error submitting rating', error);\n    } finally {\n      setSubmitting(false);\n    }\n  }, [formData, onClose, onSuccess, orgId, submitting, supabase, user.id]);\n\n  const companyOptions = useMemo(() => companies.map(company => (\n    <SelectItem key={company.id} value={company.id}>\n      {company.name}\n    </SelectItem>\n  )), [companies]);\n\n  const projectOptions = useMemo(() => (\n    projects.map(project => (\n      <SelectItem key={project.id} value={project.id}>\n        {project.name}\n      </SelectItem>\n    ))\n  ), [projects]);\n\n  const categoryOptions = useMemo(() => RATING_CATEGORIES.map(category => (\n    <SelectItem key={category.value} value={category.value}>\n      {category.label}\n    </SelectItem>\n  )), []);\n\n  const scoreButtons = useMemo(() => SCORE_OPTIONS.map(score => (\n    <button\n      key={score}\n      type=\"button\"\n      onClick={() => handleScoreChange(score)}\n      className={`p-xs rounded-full transition-colors ${score <= formData.score ? 'bg-warning/90 text-white' : 'bg-muted text-muted-foreground'}`}\n      aria-pressed={score === formData.score}\n      aria-label={`${score} star${score === 1 ? '' : 's'}`}\n    >\n      <Star className=\"h-4 w-4\" />\n    </button>\n  )), [formData.score, handleScoreChange]);\n\n  const drawerTabs: DrawerTab[] = useMemo(() => ([\n    {\n      key: 'rating-details',\n      label: 'Rating Details',\n      content: (\n        <form onSubmit={handleSubmit} className=\"stack-lg\">\n          <Card className=\"p-md\">\n            <div className=\"flex items-center gap-sm mb-md\">\n              <Building className=\"h-5 w-5 color-accent\" />\n              <h3 className=\"text-body text-heading-4\">Company & Project</h3>\n            </div>\n\n            <div className=\"stack-md\">\n              <div>\n                <label htmlFor=\"companyId\" className=\"block text-body-sm form-label mb-xs\">\n                  Company *\n                </label>\n                <Select\n                  value={formData.companyId}\n                  onValueChange={value => updateForm('companyId', value)}\n                >\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Select a company\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"\">Select a company</SelectItem>\n                    {companyOptions}\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div>\n                <label htmlFor=\"projectId\" className=\"block text-body-sm form-label mb-xs\">\n                  Project (optional)\n                </label>\n                <Select\n                  value={formData.projectId}\n                  onValueChange={value => updateForm('projectId', value)}\n                >\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"No project association\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"\">No project association</SelectItem>\n                    {projectOptions}\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n          </Card>\n\n          <Card className=\"p-md\">\n            <div className=\"flex items-center gap-sm mb-md\">\n              <Briefcase className=\"h-5 w-5 color-accent\" />\n              <h3 className=\"text-body text-heading-4\">Rating Details</h3>\n            </div>\n\n            <div className=\"stack-md\">\n              <div>\n                <label htmlFor=\"category\" className=\"block text-body-sm form-label mb-xs\">\n                  Rating Category *\n                </label>\n                <Select\n                  value={formData.category}\n                  onValueChange={value => updateForm('category', value as RatingCategory)}\n                >\n                  <SelectTrigger>\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {categoryOptions}\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div>\n                <label className=\"block text-body-sm form-label mb-sm\">\n                  Rating *\n                </label>\n                <div className=\"flex items-center gap-xs\" role=\"radiogroup\" aria-label=\"Rating score\">\n                  {scoreButtons}\n                  <span className=\"text-body-sm color-muted ml-sm\">{formData.score}/5</span>\n                </div>\n              </div>\n\n              <div>\n                <label htmlFor=\"title\" className=\"block text-body-sm form-label mb-xs\">\n                  Review Title *\n                </label>\n                <UnifiedInput\n                  id=\"title\"\n                  name=\"title\"\n                  value={formData.title}\n                  onChange={handleTextChange}\n                  placeholder=\"Brief title for your review\"\n                  required\n                />\n              </div>\n            </div>\n          </Card>\n\n          <Card className=\"p-md\">\n            <div className=\"flex items-center gap-sm mb-md\">\n              <MessageSquare className=\"h-5 w-5 color-accent\" />\n              <h3 className=\"text-body text-heading-4\">Review Content</h3>\n            </div>\n\n            <div className=\"stack-md\">\n              <div>\n                <label htmlFor=\"review\" className=\"block text-body-sm form-label mb-xs\">\n                  Detailed Review\n                </label>\n                <Textarea\n                  id=\"review\"\n                  name=\"review\"\n                  value={formData.review}\n                  onChange={handleTextareaChange}\n                  placeholder=\"Share your experience working with this company...\"\n                  rows={5}\n                />\n              </div>\n\n              <div className=\"flex items-center gap-sm\">\n                <input\n                  type=\"checkbox\"\n                  id=\"isPublic\"\n                  checked={formData.isPublic}\n                  onChange={handleCheckboxChange}\n                  className=\"rounded border-border\"\n                />\n                <label htmlFor=\"isPublic\" className=\"text-body-sm form-label\">\n                  Make this review public (visible to other organizations)\n                </label>\n              </div>\n            </div>\n          </Card>\n\n          <div className=\"flex justify-end gap-sm pt-md border-t\">\n            <Button type=\"button\" variant=\"outline\" onClick={onClose} disabled={submitting}>\n              <X className=\"h-4 w-4 mr-sm\" />\n              Cancel\n            </Button>\n            <Button type=\"submit\" disabled={submitting || !formData.companyId || !formData.title.trim()}>\n              <Save className=\"h-4 w-4 mr-sm\" />\n              {submitting ? 'Submitting…' : 'Submit Rating'}\n            </Button>\n          </div>\n        </form>\n      ),\n    },\n  ]), [categoryOptions, companyOptions, formData.companyId, formData.projectId, formData.category, formData.score, formData.title, formData.review, handleCheckboxChange, handleSubmit, handleTextareaChange, handleTextChange, onClose, projectOptions, scoreButtons, submitting, updateForm]);\n\n  return (\n    <AppDrawer\n      open={isOpen}\n      onClose={onClose}\n      title=\"Submit Company Rating\"\n      record={null}\n      mode=\"create\"\n      fields={[]}\n      tabs={drawerTabs}\n      loading={submitting}\n    />\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ghxstship/apps/web/app/(app)/(shell)/companies/ratings/RatingsClient.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchRatings'. Either include it or remove the dependency array.","line":38,"column":6,"nodeType":"ArrayExpression","endLine":38,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [fetchRatings]","fix":{"range":[1066,1068],"text":"[fetchRatings]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\n\nimport { Star, Plus, Edit, Trash2, Building, Grid, List } from \"lucide-react\";\nimport { useState, useEffect } from 'react';\nimport { User } from '@supabase/supabase-js';\nimport { createBrowserClient } from '@ghxstship/auth';\nimport { Card, Button, Badge, Skeleton } from '@ghxstship/ui';\nimport AppDrawer from '@/app/_components/shared/AppDrawer';\n\ninterface RatingsClientProps {\n  user: User;\n  orgId: string;\n  translations: {\n    title: string;\n    subtitle: string;\n  };\n}\n\ninterface Rating {\n  id: string;\n  company_name: string;\n  rating: number;\n  review: string;\n  reviewer_name: string;\n  created_at: string;\n}\n\nexport default function RatingsClient({ user, orgId, translations }: RatingsClientProps) {\n  const [ratings, setRatings] = useState<Rating[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [currentView, setCurrentView] = useState<'grid' | 'list'>('grid');\n  const [isCreateDrawerOpen, setIsCreateDrawerOpen] = useState(false);\n  const supabase = createBrowserClient();\n\n  useEffect(() => {\n    fetchRatings();\n  }, []);\n\n  const fetchRatings = async () => {\n    try {\n      setLoading(true);\n      const { data, error } = await supabase\n        .from('ratings')\n        .select('*')\n        .eq('org_id', orgId)\n        .order('created_at', { ascending: false });\n\n      if (error) throw error;\n      setRatings(data || []);\n    } catch (error) {\n      console.error('Error fetching ratings:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleCreateRating = () => {\n    setIsCreateDrawerOpen(true);\n  };\n\n  const renderStars = (rating: number) => {\n    return Array.from({ length: 5 }, (_, i) => (\n      <Star\n        key={i}\n        className={`h-4 w-4 ${\n          i < rating ? 'fill-warning color-warning' : 'color-muted'\n        }`}\n      />\n    ));\n  };\n\n  if (loading) {\n    return (\n      <div className=\"stack-lg\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <Skeleton className=\"h-8 w-48\" />\n            <Skeleton className=\"h-4 w-64 mt-sm\" />\n          </div>\n          <Skeleton className=\"h-10 w-32\" />\n        </div>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-lg\">\n          {Array.from({ length: 6 }).map((_, i) => (\n            <Card key={i} className=\"p-lg\">\n              <Skeleton className=\"h-6 w-32 mb-md\" />\n              <Skeleton className=\"h-4 w-24 mb-sm\" />\n              <Skeleton className=\"h-16 w-full mb-md\" />\n              <Skeleton className=\"h-4 w-20\" />\n            </Card>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"stack-lg\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-heading-3 text-heading-3 color-foreground\">{translations.title}</h1>\n          <p className=\"text-body-sm color-foreground/70 mt-xs\">{translations.subtitle}</p>\n        </div>\n        <div className=\"flex items-center cluster-sm\">\n          <div className=\"flex items-center cluster-xs bg-secondary rounded-lg p-xs\">\n            <Button\n              variant={currentView === 'grid' ? 'default' : 'ghost'}\n              onClick={() => setCurrentView('grid')}\n            >\n              <Grid className=\"h-4 w-4\" />\n            </Button>\n            <Button\n              variant={currentView === 'list' ? 'default' : 'ghost'}\n              onClick={() => setCurrentView('list')}\n            >\n              <List className=\"h-4 w-4\" />\n            </Button>\n          </div>\n          <Button onClick={handleCreateRating}>\n            <Plus className=\"h-4 w-4 mr-sm\" />\n            Add Rating\n          </Button>\n        </div>\n      </div>\n\n      {/* Ratings Grid/List */}\n      {currentView === 'grid' ? (\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-lg\">\n          {ratings.map((rating: unknown) => (\n            <Card key={rating.id} className=\"p-lg hover:shadow-floating transition-shadow\">\n              <div className=\"flex items-start justify-between mb-md\">\n                <div>\n                  <h3 className=\"text-heading-4 text-body\">{rating.company_name}</h3>\n                  <div className=\"flex items-center cluster-xs mt-xs\">\n                    {renderStars(rating.rating)}\n                    <span className=\"text-body-sm color-muted ml-sm\">\n                      {rating.rating}/5\n                    </span>\n                  </div>\n                </div>\n                <div className=\"flex cluster-xs\">\n                  <Button variant=\"ghost\">\n                    <Edit className=\"h-4 w-4\" />\n                  </Button>\n                  <Button variant=\"ghost\">\n                    <Trash2 className=\"h-4 w-4\" />\n                  </Button>\n                </div>\n              </div>\n              <p className=\"text-body-sm color-muted mb-md line-clamp-3\">\n                {rating.review}\n              </p>\n              <div className=\"flex items-center justify-between text-body-sm color-muted\">\n                <span>By {rating.reviewer_name}</span>\n                <span>{new Date(rating.created_at).toLocaleDateString()}</span>\n              </div>\n            </Card>\n          ))}\n        </div>\n      ) : (\n        <div className=\"stack-md\">\n          {ratings.map((rating: unknown) => (\n            <Card key={rating.id} className=\"p-lg\">\n              <div className=\"flex items-start justify-between\">\n                <div className=\"flex-1\">\n                  <div className=\"flex items-center cluster mb-sm\">\n                    <h3 className=\"text-heading-4 text-body\">{rating.company_name}</h3>\n                    <div className=\"flex items-center cluster-xs\">\n                      {renderStars(rating.rating)}\n                      <span className=\"text-body-sm color-muted ml-sm\">\n                        {rating.rating}/5\n                      </span>\n                    </div>\n                  </div>\n                  <p className=\"text-body-sm color-muted mb-sm\">\n                    {rating.review}\n                  </p>\n                  <div className=\"flex items-center cluster text-body-sm color-muted\">\n                    <span>By {rating.reviewer_name}</span>\n                    <span>{new Date(rating.created_at).toLocaleDateString()}</span>\n                  </div>\n                </div>\n                <div className=\"flex cluster-xs\">\n                  <Button variant=\"ghost\">\n                    <Edit className=\"h-4 w-4\" />\n                  </Button>\n                  <Button variant=\"ghost\">\n                    <Trash2 className=\"h-4 w-4\" />\n                  </Button>\n                </div>\n              </div>\n            </Card>\n          ))}\n        </div>\n      )}\n\n      {/* Empty State */}\n      {ratings.length === 0 && (\n        <div className=\"text-center py-2xl\">\n          <Building className=\"h-12 w-12 color-muted mx-auto mb-md\" />\n          <h3 className=\"text-body text-heading-4 mb-sm\">No ratings yet</h3>\n          <p className=\"color-muted mb-md\">\n            Start by adding your first company rating.\n          </p>\n          <Button onClick={handleCreateRating}>\n            <Plus className=\"h-4 w-4 mr-sm\" />\n            Add Rating\n          </Button>\n        </div>\n      )}\n\n      {/* Create Rating Drawer */}\n      <AppDrawer\n        open={isCreateDrawerOpen}\n        onClose={() => setIsCreateDrawerOpen(false)}\n        record={null}\n        fields={[]}\n        mode=\"create\"\n        title=\"Add New Rating\"\n        tabs={[\n          {\n            key: 'content',\n            label: 'Details',\n            content: (\n              <div className=\"p-lg\">\n                <p className=\"color-muted\">Rating creation form will be implemented here.</p>\n              </div>\n            )\n          }\n        ]}\n      />\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ghxstship/apps/web/app/(app)/(shell)/dashboard/DashboardClient.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'addToast', 'loadData', and 'supabase'. Either include them or remove the dependency array.","line":150,"column":6,"nodeType":"ArrayExpression","endLine":150,"endColumn":13,"suggestions":[{"desc":"Update the dependencies array to be: [addToast, loadData, orgId, supabase]","fix":{"range":[4894,4901],"text":"[addToast, loadData, orgId, supabase]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\nimport { Plus, RefreshCw, LayoutDashboard, Calendar, Table, Kanban, List, BarChart3 } from \"lucide-react\";\nimport { useEffect, useMemo, useState } from 'react';\nimport {\n  DataActions,\n  DataGrid,\n  DataViewProvider,\n  StateManagerProvider,\n  DashboardView,\n  KanbanBoard,\n  ListView,\n  TimelineView,\n  CalendarView,\n  UniversalDrawer,\n  ViewSwitcher,\n  useStateManager\n} from '@ghxstship/ui';\nimport { createBrowserClient } from '@ghxstship/auth';\nimport { Button, Card, Skeleton, Tabs, TabsContent, TabsList, TabsTrigger, Badge } from '@ghxstship/ui';\nimport { useToast } from '@ghxstship/ui';\nimport { DashboardService } from './lib/dashboard-service';\nimport type {\n  DashboardListItem,\n  DashboardWidget,\n  OverviewMetric,\n  DashboardQuickInsight\n} from './types';\nimport CreateDashboardDrawer from './drawers/CreateDashboardDrawer';\nimport EditDashboardDrawer from './drawers/EditDashboardDrawer';\nimport { dashboardFields } from './lib/field-configs';\nimport { dashboardFilters } from './lib/filter-configs';\nimport { dashboardViews } from './views/view-configs';\n\ninterface DashboardClientProps {\n  orgId: string;\n  userId: string;\n}\n\nexport default function DashboardClient({ orgId, userId }: DashboardClientProps) {\n  const [dashboards, setDashboards] = useState<DashboardListItem[]>([]);\n  const [selected, setSelected] = useState<DashboardListItem | null>(null);\n  const [createDrawerOpen, setCreateDrawerOpen] = useState(false);\n  const [editDrawerOpen, setEditDrawerOpen] = useState(false);\n  const [metrics, setMetrics] = useState<OverviewMetric[]>([]);\n  const [insights, setInsights] = useState<DashboardQuickInsight[]>([]);\n  const [widgets, setWidgets] = useState<DashboardWidget[]>([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [isRefreshing, setIsRefreshing] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const { addToast } = useToast();\n\n  const supabase = useMemo(() => createBrowserClient(), []);\n  const service = useMemo(() => new DashboardService(), []);\n\n  // Remove the incorrect useStateManager call - we'll use StateManagerProvider instead\n\n  const loadData = async () => {\n    try {\n      setError(null);\n      setIsLoading(true);\n\n      const [dashboardData, metricsData, insightsData] = await Promise.all([\n        service.getDashboards(orgId),\n        service.getDashboardOverviewMetrics(orgId),\n        service.getQuickInsights(orgId)\n      ]);\n\n      setDashboards(dashboardData);\n      setMetrics(metricsData);\n      setInsights(insightsData);\n      setSelected(dashboardData[0] ?? null);\n\n      if (dashboardData[0]) {\n        const { data: widgetData } = await supabase\n          .from('dashboard_widgets')\n          .select('*')\n          .eq('dashboard_id', dashboardData[0].id)\n          .eq('organization_id', orgId)\n          .order('position', { ascending: true });\n\n        setWidgets(widgetData ?? []);\n      } else {\n        setWidgets([]);\n      }\n    } catch (err) {\n      console.error('Failed to load dashboard data', err);\n      setError('Unable to load dashboards. Please try again later.');\n    } finally {\n      setIsLoading(false);\n      setIsRefreshing(false);\n    }\n  };\n\n  useEffect(() => {\n    loadData();\n\n    // Set up real-time subscriptions\n    const channel = supabase\n      .channel('dashboard-changes')\n      .on(\n        'postgres_changes',\n        {\n          event: '*',\n          schema: 'public',\n          table: 'dashboards',\n          filter: `organization_id=eq.${orgId}`\n        },\n        (payload) => {\n          console.log('Dashboard change:', payload);\n          if (payload.eventType === 'INSERT') {\n            setDashboards(prev => [payload.new as DashboardListItem, ...prev]);\n            addToast({\n              type: 'success',\n              title: 'New dashboard created',\n              description: `${payload.new.name} has been added`\n            });\n          } else if (payload.eventType === 'UPDATE') {\n            setDashboards(prev => \n              prev.map(d => d.id === payload.new.id ? payload.new as DashboardListItem : d)\n            );\n          } else if (payload.eventType === 'DELETE') {\n            setDashboards(prev => prev.filter(d => d.id !== payload.old.id));\n            addToast({\n              type: 'info',\n              title: 'Dashboard removed',\n              description: `${payload.old.name} has been deleted`\n            });\n          }\n        }\n      )\n      .on(\n        'postgres_changes',\n        {\n          event: '*',\n          schema: 'public',\n          table: 'dashboard_widgets',\n          filter: `organization_id=eq.${orgId}`\n        },\n        (payload) => {\n          console.log('Widget change:', payload);\n          // Update widget counts in real-time\n          loadData();\n        }\n      )\n      .subscribe();\n\n    return () => {\n      supabase.removeChannel(channel);\n    };\n  }, [orgId]);\n\n  const handleRefresh = async () => {\n    setIsRefreshing(true);\n    await loadData();\n    addToast({\n      type: 'success',\n      title: 'Dashboard refreshed',\n      description: 'Latest dashboard data has been loaded.'\n    });\n  };\n\n  const handleCreateDashboard = async (payload: Parameters<typeof service.createDashboard>[1]) => {\n    try {\n      const dashboard = await service.createDashboard(orgId, payload);\n      setDashboards((prev) => [dashboard, ...prev]);\n      setCreateDrawerOpen(false);\n      addToast({\n        type: 'success',\n        title: 'Dashboard created',\n        description: `${dashboard.name} is now available.`\n      });\n    } catch (err) {\n      console.error('Failed to create dashboard', err);\n      addToast({\n        type: 'error',\n        title: 'Create failed',\n        description: 'We could not create this dashboard.'\n      });\n    }\n  };\n\n  const handleUpdateDashboard = async (id: string, payload: Parameters<typeof service.updateDashboard>[2]) => {\n    try {\n      const updated = await service.updateDashboard(orgId, id, payload);\n      setDashboards((prev) => prev.map((dash) => (dash.id === id ? updated : dash)));\n      setSelected((prev) => (prev?.id === id ? updated : prev));\n      setEditDrawerOpen(false);\n      addToast({\n        type: 'success',\n        title: 'Dashboard updated',\n        description: `${updated.name} has been updated.`\n      });\n    } catch (err) {\n      console.error('Failed to update dashboard', err);\n      addToast({\n        type: 'error',\n        title: 'Update failed',\n        description: 'Could not update this dashboard.'\n      });\n    }\n  };\n\n  const handleDeleteDashboard = async (id: string) => {\n    try {\n      await service.deleteDashboard(orgId, id);\n      setDashboards((prev) => prev.filter((dash) => dash.id !== id));\n      if (selected?.id === id) {\n        setSelected(null);\n      }\n      addToast({\n        type: 'success',\n        title: 'Dashboard deleted',\n        description: 'The dashboard has been removed.'\n      });\n    } catch (err) {\n      console.error('Failed to delete dashboard', err);\n      addToast({\n        type: 'error',\n        title: 'Delete failed',\n        description: 'Unable to delete this dashboard.'\n      });\n    }\n  };\n\n  const handleExport = async (format: 'csv' | 'json' | 'excel') => {\n    try {\n      const data = dashboards.map(dashboard => ({\n        name: dashboard.name,\n        description: dashboard.description,\n        type: dashboard.type,\n        layout: dashboard.layout,\n        access_level: dashboard.access_level,\n        is_default: dashboard.is_default,\n        is_template: dashboard.is_template,\n        created_at: dashboard.created_at,\n        updated_at: dashboard.updated_at,\n        widget_count: dashboard.widget_count,\n        share_count: dashboard.share_count\n      }));\n\n      if (format === 'json') {\n        const blob = new Blob([JSON.stringify(data, null, 2)], { type: 'application/json' });\n        const url = URL.createObjectURL(blob);\n        const a = document.createElement('a');\n        a.href = url;\n        a.download = `dashboards-${new Date().toISOString().split('T')[0]}.json`;\n        a.click();\n      } else if (format === 'csv') {\n        const headers = Object.keys(data[0] || {}).join(',');\n        const rows = data.map(row => Object.values(row).join(','));\n        const csv = [headers, ...rows].join('\\n');\n        const blob = new Blob([csv], { type: 'text/csv' });\n        const url = URL.createObjectURL(blob);\n        const a = document.createElement('a');\n        a.href = url;\n        a.download = `dashboards-${new Date().toISOString().split('T')[0]}.csv`;\n        a.click();\n      }\n      \n      addToast({\n        type: 'success',\n        title: 'Export successful',\n        description: `Dashboards exported as ${format.toUpperCase()}`\n      });\n    } catch (error) {\n      console.error('Export error:', error);\n      addToast({\n        type: 'error',\n        title: 'Export failed',\n        description: 'Could not export dashboards'\n      });\n    }\n  };\n\n  const handleBulkAction = async (action: string, selectedIds: string[]) => {\n    try {\n      switch (action) {\n        case 'delete':\n          for (const id of selectedIds) {\n            await service.deleteDashboard(orgId, id);\n          }\n          setDashboards(prev => prev.filter(d => !selectedIds.includes(d.id)));\n          addToast({\n            type: 'success',\n            title: 'Bulk delete successful',\n            description: `${selectedIds.length} dashboards deleted`\n          });\n          break;\n        case 'archive':\n          for (const id of selectedIds) {\n            await service.updateDashboard(orgId, id, { is_public: false });\n          }\n          addToast({\n            type: 'success',\n            title: 'Bulk archive successful',\n            description: `${selectedIds.length} dashboards made private`\n          });\n          break;\n        case 'share':\n          // Implement bulk sharing logic\n          addToast({\n            type: 'info',\n            title: 'Bulk share initiated',\n            description: `Sharing ${selectedIds.length} dashboards`\n          });\n          break;\n      }\n    } catch (error) {\n      console.error('Bulk action error:', error);\n      addToast({\n        type: 'error',\n        title: 'Bulk action failed',\n        description: 'Could not complete bulk operation'\n      });\n    }\n  };\n\n  const handleSelectDashboard = async (dashboard: DashboardListItem) => {\n    setSelected(dashboard);\n    const { data, error: widgetError } = await supabase\n      .from('dashboard_widgets')\n      .select('*')\n      .eq('dashboard_id', dashboard.id)\n      .eq('organization_id', orgId)\n      .order('position', { ascending: true });\n\n    if (widgetError) {\n      console.error('Failed to load widgets', widgetError);\n      addToast({\n        type: 'error',\n        title: 'Widget load failed',\n        description: 'Widgets could not be loaded for this dashboard.'\n      });\n      return;\n    }\n\n    setWidgets(data ?? []);\n  };\n\n  const headerMetrics = useMemo(() => metrics.slice(0, 4), [metrics]);\n  const quickInsightTiles = useMemo(() => insights.slice(0, 4), [insights]);\n\n  const viewConfig = useMemo(() => dashboardViews({ dashboards, metrics, insights }), [dashboards, metrics, insights]);\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-lg\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-heading-3 font-anton uppercase\">Dashboard</h1>\n            <p className=\"text-body-sm text-muted-foreground\">Loading dashboard overview…</p>\n          </div>\n        </div>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-md\">\n          {Array.from({ length: 4 }).map((_, index) => (\n            <Card key={index} className=\"p-lg\">\n              <Skeleton className=\"h-4 w-1/2 mb-sm\" />\n              <Skeleton className=\"h-8 w-3/4\" />\n            </Card>\n          ))}\n        </div>\n        <Card className=\"p-xl\">\n          <Skeleton className=\"h-6 w-1/3 mb-lg\" />\n          <Skeleton className=\"h-10 w-full\" />\n        </Card>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"space-y-lg\">\n        <Card className=\"p-xl text-center\">\n          <h2 className=\"text-heading-4 mb-sm\">Dashboard unavailable</h2>\n          <p className=\"text-body-sm text-muted-foreground mb-md\">{error}</p>\n          <Button onClick={loadData}>\n            <RefreshCw className=\"mr-sm h-4 w-4\" />Retry\n          </Button>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-xl\">\n      <header className=\"flex flex-col gap-lg lg:flex-row lg:items-start lg:justify-between\">\n        <div className=\"space-y-sm\">\n          <div className=\"flex items-center gap-sm text-muted-foreground\">\n            <LayoutDashboard className=\"h-5 w-5\" />\n            <span className=\"uppercase tracking-widest text-xs\">Enterprise Command Center</span>\n          </div>\n          <h1 className=\"text-heading-2 font-anton uppercase\">Dashboard Overview</h1>\n          <p className=\"text-body-sm text-muted-foreground max-w-2xl\">\n            Monitor dashboard adoption, sharing coverage, and widget composition across your organization.\n          </p>\n        </div>\n        <div className=\"flex flex-wrap items-center gap-sm\">\n          <Button variant=\"outline\" size=\"sm\" onClick={handleRefresh} disabled={isRefreshing}>\n            <RefreshCw className={`h-4 w-4 mr-sm ${isRefreshing ? 'animate-spin' : ''}`} />\n            Refresh\n          </Button>\n          <Button variant=\"secondary\" size=\"sm\" onClick={() => setCreateDrawerOpen(true)}>\n            <Plus className=\"h-4 w-4 mr-sm\" />\n            New Dashboard\n          </Button>\n        </div>\n      </header>\n\n      <section className=\"grid grid-cols-1 md:grid-cols-2 xl:grid-cols-4 gap-md\">\n        {headerMetrics.map((metric) => (\n          <Card key={metric.id} className=\"p-lg space-y-sm\">\n            <div className=\"flex items-center justify-between\">\n              <span className=\"text-body-xs uppercase tracking-wide text-muted-foreground\">{metric.label}</span>\n              <Badge variant=\"outline\">{metric.format}</Badge>\n            </div>\n            <div className=\"text-heading-2 font-semibold\">\n              {metric.format === 'currency'\n                ? new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(Number(metric.value) || 0)\n                : metric.value}\n            </div>\n            {metric.change !== undefined && (\n              <p className=\"text-body-xs text-muted-foreground\">\n                Change: {metric.change_type === 'increase' ? '+' : ''}\n                {metric.change}%\n              </p>\n            )}\n          </Card>\n        ))}\n      </section>\n\n      {quickInsightTiles.length > 0 && (\n        <section className=\"grid grid-cols-1 md:grid-cols-2 xl:grid-cols-4 gap-md\">\n          {quickInsightTiles.map((insight) => (\n            <Card key={insight.id} className=\"p-lg space-y-sm\">\n              <div className=\"flex items-center justify-between\">\n                <h3 className=\"text-body-sm font-semibold\">{insight.title}</h3>\n                {insight.trend && (\n                  <Badge variant={insight.trend === 'up' ? 'success' : insight.trend === 'down' ? 'destructive' : 'secondary'}>\n                    {insight.trend.toUpperCase()}\n                  </Badge>\n                )}\n              </div>\n              <p className=\"text-heading-3 font-semibold\">\n                {typeof insight.value === 'number' && insight.format === 'currency'\n                  ? new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(insight.value)\n                  : insight.value}\n              </p>\n              <p className=\"text-body-xs text-muted-foreground\">{insight.description}</p>\n            </Card>\n          ))}\n        </section>\n      )}\n\n      <section className=\"space-y-md\">\n        <div className=\"flex flex-col gap-md lg:flex-row lg:items-center lg:justify-between\">\n          <Tabs value={selected?.id ?? ''} onValueChange={(value) => {\n            const dashboard = dashboards.find((d) => d.id === value);\n            if (dashboard) handleSelectDashboard(dashboard);\n          }} className=\"flex-1\">\n            <TabsList className=\"w-full overflow-x-auto\">\n              {dashboards.map((dashboard) => (\n                <TabsTrigger key={dashboard.id} value={dashboard.id} className=\"text-left\">\n                  <div className=\"flex flex-col items-start\">\n                    <span className=\"font-medium\">{dashboard.name}</span>\n                    <span className=\"text-body-xs text-muted-foreground\">\n                      {dashboard.widget_count ?? 0} widgets · {dashboard.share_count ?? 0} shares\n                    </span>\n                  </div>\n                </TabsTrigger>\n              ))}\n            </TabsList>\n            {dashboards.map((dashboard) => (\n              <TabsContent key={dashboard.id} value={dashboard.id} className=\"mt-md\">\n                <Card className=\"p-lg space-y-sm\">\n                  <div className=\"flex justify-between items-start\">\n                    <div>\n                      <h3 className=\"text-heading-4 font-semibold\">{dashboard.name}</h3>\n                      <p className=\"text-body-sm text-muted-foreground\">{dashboard.description}</p>\n                    </div>\n                    <div className=\"flex gap-sm\">\n                      <Button variant=\"ghost\" size=\"sm\" onClick={() => {\n                        setSelected(dashboard);\n                        setEditDrawerOpen(true);\n                      }}>\n                        Edit\n                      </Button>\n                      <Button variant=\"ghost\" size=\"sm\" onClick={() => handleDeleteDashboard(dashboard.id)}>\n                        Delete\n                      </Button>\n                    </div>\n                  </div>\n                  <div className=\"flex gap-sm text-body-xs text-muted-foreground\">\n                    <span>Type: {dashboard.type}</span>\n                    <span>Default: {dashboard.is_default ? 'Yes' : 'No'}</span>\n                    <span>Visibility: {dashboard.is_public ? 'Public' : 'Internal'}</span>\n                  </div>\n                </Card>\n              </TabsContent>\n            ))}\n          </Tabs>\n        </div>\n\n        {selected && (\n          <Card className=\"p-xl space-y-lg\">\n            <header className=\"flex flex-wrap items-center gap-sm justify-between\">\n              <div className=\"flex items-center gap-sm text-muted-foreground\">\n                <BarChart3 className=\"h-4 w-4\" />\n                <span className=\"text-body-sm\">{selected.name} Widgets</span>\n              </div>\n              <div className=\"flex gap-sm\">\n                <Button size=\"sm\" variant=\"secondary\" onClick={() => setEditDrawerOpen(true)}>\n                  Configure Widgets\n                </Button>\n              </div>\n            </header>\n\n            {widgets.length === 0 ? (\n              <div className=\"border border-dashed rounded-lg p-2xl text-center text-muted-foreground\">\n                No widgets available. Configure widgets to visualize dashboard data.\n              </div>\n            ) : (\n              <div className=\"grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-lg\">\n                {widgets.map((widget) => (\n                  <Card key={widget.id} className=\"p-lg space-y-sm\">\n                    <div className=\"flex items-center justify-between\">\n                      <h4 className=\"text-body font-semibold\">{widget.title}</h4>\n                      <Badge variant=\"outline\">{widget.type}</Badge>\n                    </div>\n                    <p className=\"text-body-sm text-muted-foreground\">\n                      {widget.description ?? 'This widget pulls live analytics from configured sources.'}\n                    </p>\n                  </Card>\n                ))}\n              </div>\n            )}\n          </Card>\n        )}\n      </section>\n\n      <section className=\"space-y-lg\">\n        <StateManagerProvider\n          initialState={{\n            view: 'success',\n            interaction: 'default',\n            loading: false,\n            empty: dashboards.length === 0,\n            data: dashboards,\n            selectedCount: 0,\n            totalCount: dashboards.length\n          }}\n        >\n          <div className=\"flex flex-col gap-md lg:flex-row lg:items-center lg:justify-between\">\n            <div className=\"flex items-center gap-sm\">\n              <ViewSwitcher />\n              <DataActions />\n            </div>\n          </div>\n\n          <div className=\"bg-muted/40 rounded-xl p-md space-y-md\">\n            <DataGrid />\n            <KanbanBoard \n              columns={[\n                { id: 'draft', title: 'Draft', color: '#6B7280' },\n                { id: 'active', title: 'Active', color: '#10B981' },\n                { id: 'archived', title: 'Archived', color: '#F59E0B' }\n              ]}\n              statusField=\"status\"\n              titleField=\"name\"\n            />\n            <CalendarView \n              titleField=\"name\"\n              startDateField=\"created_at\"\n            />\n            <ListView \n              titleField=\"name\"\n            />\n          </div>\n        </StateManagerProvider>\n      </section>\n\n      <CreateDashboardDrawer\n        open={createDrawerOpen}\n        onOpenChange={setCreateDrawerOpen}\n        orgId={orgId}\n        onSubmit={handleCreateDashboard}\n      />\n\n      {selected && (\n        <EditDashboardDrawer\n          open={editDrawerOpen}\n          onOpenChange={setEditDrawerOpen}\n          dashboard={selected}\n          onSubmit={(payload) => handleUpdateDashboard(selected.id, payload)}\n        />\n      )}\n    </div>\n  );\n}\n\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ghxstship/apps/web/app/(app)/(shell)/dashboard/components/OverviewTemplate.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadOverviewData'. Either include it or remove the dependency array.","line":51,"column":6,"nodeType":"ArrayExpression","endLine":51,"endColumn":21,"suggestions":[{"desc":"Update the dependencies array to be: [orgId, module, loadOverviewData]","fix":{"range":[1618,1633],"text":"[orgId, module, loadOverviewData]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { Plus, Filter, Download, Settings, RefreshCw, Grid3X3, List, BarChart3, Calendar, Eye, EyeOff, Maximize2 } from \"lucide-react\";\nimport React, { useState, useEffect } from 'react';\nimport { Card, Button, Badge } from '@ghxstship/ui';\nimport EnhancedMetricWidget from '../widgets/EnhancedMetricWidget';\nimport EnhancedChartWidget from '../widgets/EnhancedChartWidget';\nimport EnhancedActivityWidget from '../widgets/EnhancedActivityWidget';\nimport { DashboardService } from '../lib/dashboard-service';\nimport type { \n  ModuleOverviewConfig, \n  OverviewMetric, \n  ActivityItem, \n  DashboardWidget,\n  DataSource\n} from '../types';\n\ninterface OverviewTemplateProps {\n  orgId: string;\n  userId: string;\n  userEmail: string;\n  module: DataSource;\n  config: ModuleOverviewConfig;\n  customWidgets?: DashboardWidget[];\n  onNavigate?: (path: string) => void;\n}\n\ntype ViewMode = 'grid' | 'list' | 'compact';\n\nexport default function OverviewTemplate({\n  orgId,\n  userId,\n  userEmail,\n  module,\n  config,\n  customWidgets = [],\n  onNavigate\n}: OverviewTemplateProps) {\n  const [metrics, setMetrics] = useState<OverviewMetric[]>([]);\n  const [activities, setActivities] = useState<ActivityItem[]>([]);\n  const [widgets, setWidgets] = useState<DashboardWidget[]>(customWidgets);\n  const [isLoading, setIsLoading] = useState(true);\n  const [viewMode, setViewMode] = useState<ViewMode>('grid');\n  const [showFilters, setShowFilters] = useState(false);\n  const [isRefreshing, setIsRefreshing] = useState(false);\n\n  const dashboardService = new DashboardService();\n\n  useEffect(() => {\n    loadOverviewData();\n  }, [orgId, module]);\n\n  const loadOverviewData = async () => {\n    setIsLoading(true);\n    try {\n      const [metricsData, activitiesData] = await Promise.all([\n        dashboardService.getOverviewMetrics(orgId, module),\n        dashboardService.getRecentActivity(orgId, 10)\n      ]);\n\n      setMetrics(metricsData);\n      setActivities(activitiesData.filter(a => a.type === module || module === 'analytics'));\n    } catch (error) {\n      console.error('Failed to load overview data:', error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleRefresh = async () => {\n    setIsRefreshing(true);\n    await loadOverviewData();\n    setIsRefreshing(false);\n  };\n\n  const handleQuickAction = (action: string, href?: string) => {\n    if (href && onNavigate) {\n      onNavigate(href);\n    }\n  };\n\n  const renderMetricsGrid = () => (\n    <div className={`grid gap-md ${\n      viewMode === 'grid' ? 'grid-cols-1 md:grid-cols-2 lg:grid-cols-4' :\n      viewMode === 'list' ? 'grid-cols-1' :\n      'grid-cols-2 md:grid-cols-4 lg:grid-cols-6'\n    }`}>\n      {metrics.map((metric) => (\n        <EnhancedMetricWidget\n          key={metric.id}\n          widget={{\n            id: metric.id,\n            dashboard_id: '',\n            type: 'metric',\n            title: metric.label,\n            config: {\n              value: metric.value,\n              format: metric.format,\n              change: metric.change,\n              change_type: metric.change_type,\n              target: metric.target,\n              status: metric.status\n            },\n            position: { x: 0, y: 0, w: 1, h: 1 },\n            refresh_interval: '5_minutes',\n            is_visible: true,\n            organization_id: orgId,\n            created_by: userId,\n            created_at: new Date().toISOString(),\n            updated_at: new Date().toISOString()\n          }}\n          metric={metric}\n          isLoading={isLoading}\n        />\n      ))}\n    </div>\n  );\n\n  const renderQuickActions = () => (\n    <Card className=\"p-lg\">\n      <div className=\"space-y-md\">\n        <h3 className=\"font-semibold text-foreground flex items-center space-x-sm\">\n          <Plus className=\"w-4 h-4\" />\n          <span>Quick Actions</span>\n        </h3>\n        <div className=\"grid grid-cols-2 md:grid-cols-4 gap-sm\">\n          {config.quick_actions.map((action, index) => (\n            <Button\n              key={index}\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={() => handleQuickAction(action.action, action.href)}\n              className=\"justify-start space-x-xs\"\n            >\n              <span className=\"text-lg\">{action.icon}</span>\n              <span className=\"text-xs\">{action.label}</span>\n            </Button>\n          ))}\n        </div>\n      </div>\n    </Card>\n  );\n\n  const renderCustomWidgets = () => {\n    if (widgets.length === 0) return null;\n\n    return (\n      <div className=\"space-y-md\">\n        <h3 className=\"font-semibold text-foreground\">Custom Widgets</h3>\n        <div className={`grid gap-md ${\n          viewMode === 'grid' ? 'grid-cols-1 lg:grid-cols-2' :\n          'grid-cols-1'\n        }`}>\n          {widgets.map((widget) => {\n            switch (widget.type) {\n              case 'metric':\n              case 'kpi_card':\n                return (\n                  <EnhancedMetricWidget\n                    key={widget.id}\n                    widget={widget}\n                    isLoading={isLoading}\n                  />\n                );\n              case 'bar_chart':\n              case 'line_chart':\n              case 'pie_chart':\n                return (\n                  <EnhancedChartWidget\n                    key={widget.id}\n                    widget={widget}\n                    isLoading={isLoading}\n                  />\n                );\n              case 'activity_feed':\n                return (\n                  <EnhancedActivityWidget\n                    key={widget.id}\n                    widget={widget}\n                    activities={activities}\n                    isLoading={isLoading}\n                  />\n                );\n              default:\n                return null;\n            }\n          })}\n        </div>\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"space-y-lg\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center space-x-md\">\n          <div className={`p-sm rounded-lg bg-${config.color}-100`}>\n            <span className=\"text-2xl\">{config.icon}</span>\n          </div>\n          <div>\n            <h1 className=\"text-heading-2 font-anton uppercase text-foreground\">\n              {config.display_name}\n            </h1>\n            <p className=\"text-muted-foreground\">{config.description}</p>\n          </div>\n        </div>\n        \n        <div className=\"flex items-center space-x-sm\">\n          {/* View Mode Toggle */}\n          <div className=\"flex items-center space-x-xs bg-muted rounded-lg p-xs\">\n            <Button\n              variant={viewMode === 'grid' ? 'default' : 'ghost'}\n              size=\"sm\"\n              onClick={() => setViewMode('grid')}\n              className=\"p-xs\"\n            >\n              <Grid3X3 className=\"w-4 h-4\" />\n            </Button>\n            <Button\n              variant={viewMode === 'list' ? 'default' : 'ghost'}\n              size=\"sm\"\n              onClick={() => setViewMode('list')}\n              className=\"p-xs\"\n            >\n              <List className=\"w-4 h-4\" />\n            </Button>\n            <Button\n              variant={viewMode === 'compact' ? 'default' : 'ghost'}\n              size=\"sm\"\n              onClick={() => setViewMode('compact')}\n              className=\"p-xs\"\n            >\n              <BarChart3 className=\"w-4 h-4\" />\n            </Button>\n          </div>\n\n          {/* Actions */}\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={() => setShowFilters(!showFilters)}\n            className=\"p-xs\"\n          >\n            <Filter className=\"w-4 h-4\" />\n          </Button>\n          \n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={handleRefresh}\n            disabled={isRefreshing}\n            className=\"p-xs\"\n          >\n            <RefreshCw className={`w-4 h-4 ${isRefreshing ? 'animate-spin' : ''}`} />\n          </Button>\n\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            className=\"p-xs\"\n          >\n            <Download className=\"w-4 h-4\" />\n          </Button>\n\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            className=\"p-xs\"\n          >\n            <Settings className=\"w-4 h-4\" />\n          </Button>\n        </div>\n      </div>\n\n      {/* Filters (if shown) */}\n      {showFilters && (\n        <Card className=\"p-md\">\n          <div className=\"flex items-center space-x-md\">\n            <span className=\"text-sm font-medium\">Filters:</span>\n            <div className=\"flex items-center space-x-sm\">\n              <Badge variant=\"secondary\">Last 30 days</Badge>\n              <Badge variant=\"secondary\">All statuses</Badge>\n              <Button variant=\"ghost\" size=\"sm\" className=\"text-xs\">\n                Clear all\n              </Button>\n            </div>\n          </div>\n        </Card>\n      )}\n\n      {/* Key Metrics */}\n      <div className=\"space-y-md\">\n        <div className=\"flex items-center justify-between\">\n          <h2 className=\"text-lg font-semibold text-foreground\">Key Metrics</h2>\n          <Badge variant=\"outline\" className=\"text-xs\">\n            {metrics.length} metrics\n          </Badge>\n        </div>\n        {renderMetricsGrid()}\n      </div>\n\n      {/* Quick Actions */}\n      {config.quick_actions.length > 0 && renderQuickActions()}\n\n      {/* Custom Widgets */}\n      {renderCustomWidgets()}\n\n      {/* Recent Activity */}\n      <div className=\"space-y-md\">\n        <div className=\"flex items-center justify-between\">\n          <h2 className=\"text-lg font-semibold text-foreground\">Recent Activity</h2>\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={() => onNavigate && onNavigate(`/${module}/activity`)}\n            className=\"text-xs\"\n          >\n            View All Activity\n          </Button>\n        </div>\n        <EnhancedActivityWidget\n          widget={{\n            id: 'activity-feed',\n            dashboard_id: '',\n            type: 'activity_feed',\n            title: 'Recent Activity',\n            config: { limit: 10 },\n            position: { x: 0, y: 0, w: 1, h: 1 },\n            refresh_interval: '1_minute',\n            is_visible: true,\n            organization_id: orgId,\n            created_by: userId,\n            created_at: new Date().toISOString(),\n            updated_at: new Date().toISOString()\n          }}\n          activities={activities}\n          isLoading={isLoading}\n          onViewAll={() => onNavigate && onNavigate(`/${module}/activity`)}\n        />\n      </div>\n\n      {/* Performance Stats */}\n      <Card className=\"p-md\">\n        <div className=\"flex items-center justify-between text-xs text-muted-foreground\">\n          <span>\n            Last updated: {new Date().toLocaleTimeString()}\n          </span>\n          <span>\n            {metrics.length} metrics • {activities.length} activities • {widgets.length} widgets\n          </span>\n        </div>\n      </Card>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ghxstship/apps/web/app/(app)/(shell)/dashboard/drawers/CreateDashboardDrawer.tsx","messages":[{"ruleId":"react/jsx-no-undef","severity":2,"message":"'AppDrawer' is not defined.","line":95,"column":6,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":95,"endColumn":15},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Form' is not defined.","line":101,"column":8,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":101,"endColumn":12},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'FormField' is not defined.","line":103,"column":12,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":103,"endColumn":21},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'FormItem' is not defined.","line":107,"column":16,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":107,"endColumn":24},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'FormLabel' is not defined.","line":108,"column":18,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":108,"endColumn":27},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'FormControl' is not defined.","line":109,"column":18,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":109,"endColumn":29},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'FormMessage' is not defined.","line":115,"column":18,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":115,"endColumn":29},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'FormField' is not defined.","line":120,"column":12,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":120,"endColumn":21},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'FormItem' is not defined.","line":124,"column":16,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":124,"endColumn":24},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'FormLabel' is not defined.","line":125,"column":18,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":125,"endColumn":27},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'FormControl' is not defined.","line":126,"column":18,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":126,"endColumn":29},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'FormMessage' is not defined.","line":133,"column":18,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":133,"endColumn":29},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'FormField' is not defined.","line":139,"column":14,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":139,"endColumn":23},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'FormItem' is not defined.","line":143,"column":18,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":143,"endColumn":26},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'FormLabel' is not defined.","line":144,"column":20,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":144,"endColumn":29},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'FormControl' is not defined.","line":146,"column":22,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":146,"endColumn":33},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'FormMessage' is not defined.","line":161,"column":20,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":161,"endColumn":31},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'FormField' is not defined.","line":166,"column":14,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":166,"endColumn":23},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'FormItem' is not defined.","line":170,"column":18,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":170,"endColumn":26},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'FormLabel' is not defined.","line":171,"column":20,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":171,"endColumn":29},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'FormControl' is not defined.","line":173,"column":22,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":173,"endColumn":33},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'FormMessage' is not defined.","line":185,"column":20,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":185,"endColumn":31},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'FormField' is not defined.","line":191,"column":12,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":191,"endColumn":21},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'FormItem' is not defined.","line":195,"column":16,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":195,"endColumn":24},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'FormLabel' is not defined.","line":196,"column":18,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":196,"endColumn":27},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'FormControl' is not defined.","line":197,"column":18,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":197,"endColumn":29},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'FormMessage' is not defined.","line":203,"column":18,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":203,"endColumn":29},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'FormField' is not defined.","line":208,"column":12,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":208,"endColumn":21},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'FormItem' is not defined.","line":212,"column":16,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":212,"endColumn":24},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'FormLabel' is not defined.","line":213,"column":18,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":213,"endColumn":27},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'FormControl' is not defined.","line":214,"column":18,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":214,"endColumn":29},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'FormMessage' is not defined.","line":220,"column":18,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":220,"endColumn":29},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'FormField' is not defined.","line":226,"column":14,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":226,"endColumn":23},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'FormItem' is not defined.","line":230,"column":18,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":230,"endColumn":26},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'FormLabel' is not defined.","line":232,"column":22,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":232,"endColumn":31},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'FormControl' is not defined.","line":239,"column":20,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":239,"endColumn":31},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Switch' is not defined.","line":240,"column":22,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":240,"endColumn":28},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'FormField' is not defined.","line":249,"column":14,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":249,"endColumn":23},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'FormItem' is not defined.","line":253,"column":18,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":253,"endColumn":26},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'FormLabel' is not defined.","line":255,"column":22,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":255,"endColumn":31},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'FormControl' is not defined.","line":262,"column":20,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":262,"endColumn":31},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Switch' is not defined.","line":263,"column":22,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":263,"endColumn":28}],"suppressedMessages":[],"errorCount":42,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { Plus, Loader2 } from \"lucide-react\";\nimport { useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\n// import { z } from 'zod';\nimport {\n  UniversalDrawer,\n  Button,\n  Input,\n  Textarea,\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue\n} from '@ghxstship/ui';\nimport type { DashboardLayout, AccessLevel } from '../types';\n\nconst createDashboardSchema = z.object({\n  name: z.string().min(1, 'Dashboard name is required').max(100, 'Name too long'),\n  description: z.string().optional(),\n  slug: z.string().optional(),\n  layout: z.enum(['grid', 'masonry', 'flex', 'tabs', 'accordion', 'sidebar', 'fullscreen'] as const),\n  access_level: z.enum(['private', 'team', 'organization', 'public'] as const),\n  is_default: z.boolean().default(false),\n  is_template: z.boolean().default(false),\n  tags: z.string().optional()\n});\n\ntype CreateDashboardForm = z.infer<typeof createDashboardSchema>;\n\ninterface CreateDashboardDrawerProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  orgId: string;\n  onSubmit: (data: CreateDashboardForm) => Promise<void>;\n}\n\nexport default function CreateDashboardDrawer({\n  open,\n  onOpenChange,\n  orgId,\n  onSubmit\n}: CreateDashboardDrawerProps) {\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const { toast } = useToast();\n\n  const form = useForm<CreateDashboardForm>({\n    resolver: zodResolver(createDashboardSchema),\n    defaultValues: {\n      name: '',\n      description: '',\n      slug: '',\n      layout: 'grid',\n      access_level: 'team',\n      is_default: false,\n      is_template: false,\n      tags: ''\n    }\n  });\n\n  const handleSubmit = async (data: CreateDashboardForm) => {\n    try {\n      setIsSubmitting(true);\n      \n      // Process tags\n      const processedData = {\n        ...data,\n        tags: data.tags ? data.tags.split(',').map(tag => tag.trim()).filter(Boolean) : undefined\n      };\n      \n      await onSubmit(processedData);\n      form.reset();\n      onOpenChange(false);\n      \n      toast({\n        title: 'Dashboard created',\n        description: `${data.name} has been created successfully.`\n      });\n    } catch (error) {\n      console.error('Failed to create dashboard:', error);\n      toast({\n        title: 'Creation failed',\n        description: 'Unable to create dashboard. Please try again.',\n        variant: 'destructive'\n      });\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  return (\n    <AppDrawer\n      open={open}\n      onOpenChange={onOpenChange}\n      title=\"Create Dashboard\"\n      description=\"Create a new dashboard to organize and visualize your data.\"\n    >\n      <Form {...form}>\n        <form onSubmit={form.handleSubmit(handleSubmit)} className=\"space-y-lg\">\n          <FormField\n            control={form.control}\n            name=\"name\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Dashboard Name *</FormLabel>\n                <FormControl>\n                  <Input\n                    placeholder=\"e.g., Executive Overview, Team Performance\"\n                    {...field}\n                  />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n\n          <FormField\n            control={form.control}\n            name=\"description\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Description</FormLabel>\n                <FormControl>\n                  <Textarea\n                    placeholder=\"Describe what this dashboard will show...\"\n                    rows={3}\n                    {...field}\n                  />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-md\">\n            <FormField\n              control={form.control}\n              name=\"layout\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Layout Type</FormLabel>\n                  <Select onValueChange={field.onChange} defaultValue={field.value}>\n                    <FormControl>\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"Select layout\" />\n                      </SelectTrigger>\n                    </FormControl>\n                    <SelectContent>\n                      <SelectItem value=\"grid\">Grid Layout</SelectItem>\n                      <SelectItem value=\"masonry\">Masonry Layout</SelectItem>\n                      <SelectItem value=\"flex\">Flexible Layout</SelectItem>\n                      <SelectItem value=\"tabs\">Tabbed Layout</SelectItem>\n                      <SelectItem value=\"accordion\">Accordion Layout</SelectItem>\n                      <SelectItem value=\"sidebar\">Sidebar Layout</SelectItem>\n                      <SelectItem value=\"fullscreen\">Fullscreen Layout</SelectItem>\n                    </SelectContent>\n                  </Select>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"access_level\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Access Level</FormLabel>\n                  <Select onValueChange={field.onChange} defaultValue={field.value}>\n                    <FormControl>\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"Select access level\" />\n                      </SelectTrigger>\n                    </FormControl>\n                    <SelectContent>\n                      <SelectItem value=\"private\">Private (Only me)</SelectItem>\n                      <SelectItem value=\"team\">Team (My team)</SelectItem>\n                      <SelectItem value=\"organization\">Organization (Everyone)</SelectItem>\n                      <SelectItem value=\"public\">Public (External access)</SelectItem>\n                    </SelectContent>\n                  </Select>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n          </div>\n\n          <FormField\n            control={form.control}\n            name=\"slug\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>URL Slug (Optional)</FormLabel>\n                <FormControl>\n                  <Input\n                    placeholder=\"e.g., executive-overview\"\n                    {...field}\n                  />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n\n          <FormField\n            control={form.control}\n            name=\"tags\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Tags (Optional)</FormLabel>\n                <FormControl>\n                  <Input\n                    placeholder=\"e.g., executive, finance, quarterly\"\n                    {...field}\n                  />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n\n          <div className=\"space-y-md\">\n            <FormField\n              control={form.control}\n              name=\"is_default\"\n              render={({ field }) => (\n                <FormItem className=\"flex flex-row items-center justify-between rounded-lg border p-md\">\n                  <div className=\"space-y-xs\">\n                    <FormLabel className=\"text-body font-medium\">\n                      Set as Default Dashboard\n                    </FormLabel>\n                    <p className=\"text-body-sm text-muted-foreground\">\n                      This dashboard will be shown by default when users visit the dashboard section.\n                    </p>\n                  </div>\n                  <FormControl>\n                    <Switch\n                      checked={field.value}\n                      onCheckedChange={field.onChange}\n                    />\n                  </FormControl>\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"is_template\"\n              render={({ field }) => (\n                <FormItem className=\"flex flex-row items-center justify-between rounded-lg border p-md\">\n                  <div className=\"space-y-xs\">\n                    <FormLabel className=\"text-body font-medium\">\n                      Save as Template\n                    </FormLabel>\n                    <p className=\"text-body-sm text-muted-foreground\">\n                      Allow others to create dashboards based on this configuration.\n                    </p>\n                  </div>\n                  <FormControl>\n                    <Switch\n                      checked={field.value}\n                      onCheckedChange={field.onChange}\n                    />\n                  </FormControl>\n                </FormItem>\n              )}\n            />\n          </div>\n\n          <div className=\"flex justify-end gap-sm pt-lg\">\n            <Button\n              type=\"button\"\n              variant=\"outline\"\n              onClick={() => onOpenChange(false)}\n              disabled={isSubmitting}\n            >\n              Cancel\n            </Button>\n            <Button type=\"submit\" disabled={isSubmitting}>\n              {isSubmitting ? (\n                <>\n                  <Loader2 className=\"mr-sm h-4 w-4 animate-spin\" />\n                  Creating...\n                </>\n              ) : (\n                <>\n                  <Plus className=\"mr-sm h-4 w-4\" />\n                  Create Dashboard\n                </>\n              )}\n            </Button>\n          </div>\n        </form>\n      </Form>\n    </AppDrawer>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ghxstship/apps/web/app/(app)/(shell)/dashboard/views/DashboardGridView.tsx","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: Invalid character.","line":115,"column":23,"nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useMemo } from 'react';\nimport { Card, Badge, Button } from '@ghxstship/ui';\nimport type { DashboardListItem } from '../types';\n\ninterface DashboardGridViewProps {\n  dashboards: DashboardListItem[];\n  onView?: (dashboard: DashboardListItem) => void;\n  onEdit?: (dashboard: DashboardListItem) => void;\n  onDelete?: (dashboard: DashboardListItem) => void;\n  onShare?: (dashboard: DashboardListItem) => void;\n  onDuplicate?: (dashboard: DashboardListItem) => void;\n  selectedIds?: string[];\n  onSelectionChange?: (ids: string[]) => void;\n}\n\nexport default function DashboardGridView({\n  dashboards,\n  onView,\n  onEdit,\n  onDelete,\n  onShare,\n  onDuplicate,\n  selectedIds = [],\n  onSelectionChange\n}: DashboardGridViewProps) {\n  const handleCardClick = (dashboard: DashboardListItem, event: React.MouseEvent) => {\n    // Prevent selection when clicking action buttons\n    if ((event.target as HTMLElement).closest('button')) {\n      return;\n    }\n    \n    if (onView) {\n      onView(dashboard);\n    }\n  };\n\n  const handleSelectionToggle = (dashboardId: string) => {\n    if (!onSelectionChange) return;\n    \n    const newSelection = selectedIds.includes(dashboardId)\n      ? selectedIds.filter(id => id !== dashboardId)\n      : [...selectedIds, dashboardId];\n    \n    onSelectionChange(newSelection);\n  };\n\n  const getTypeColor = (type: string) => {\n    switch (type) {\n      case 'system':\n        return 'bg-blue-100 text-blue-800';\n      case 'custom':\n        return 'bg-green-100 text-green-800';\n      case 'template':\n        return 'bg-purple-100 text-purple-800';\n      default:\n        return 'bg-gray-100 text-gray-600';\n    }\n  };\n\n  const getAccessLevelColor = (level: string) => {\n    switch (level) {\n      case 'private':\n        return 'bg-red-100 text-red-800';\n      case 'team':\n        return 'bg-blue-100 text-blue-800';\n      case 'organization':\n        return 'bg-green-100 text-green-800';\n      case 'public':\n        return 'bg-purple-100 text-purple-800';\n      default:\n        return 'bg-gray-100 text-gray-600';\n    }\n  };\n\n  if (dashboards.length === 0) {\n    return (\n      <div className=\"text-center py-2xl\">\n        <BarChart3 className=\"mx-auto h-12 w-12 text-muted-foreground mb-md\" />\n        <h3 className=\"text-heading-4 font-semibold mb-sm\">No dashboards found</h3>\n        <p className=\"text-body-sm text-muted-foreground\">\n          Create your first dashboard to start visualizing your data.\n        </p>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-lg\">\n      {dashboards.map((dashboard) => (\n        <Card\n          key={dashboard.id}\n          className={`p-lg cursor-pointer transition-all hover:shadow-md ${\n            selectedIds.includes(dashboard.id) ? 'ring-2 ring-primary' : ''\n          }`}\n          onClick={(e) => handleCardClick(dashboard, e)}\n        >\n          <div className=\"space-y-md\">\n            {/* Header */}\n            <div className=\"flex items-start justify-between\">\n              <div className=\"flex-1 min-w-0\">\n                <h3 className=\"text-body font-semibold truncate\">\n                  {dashboard.name}\n                </h3>\n                {dashboard.description && (\n                  <p className=\"text-body-sm text-muted-foreground mt-xs line-clamp-2\">\n                    {dashboard.description}\n                  </p>\n                )}\n              </div>\n              \n              <div className=\"flex items-center gap-xs ml-sm\">\n                <input\n                  type=\\\"checkbox\\\"\n                  checked={selectedIds.includes(dashboard.id)}\n                  onChange={() => handleSelectionToggle(dashboard.id)}\n                  className=\\\"rounded border-gray-300\\\"\n                  onClick={(e) => e.stopPropagation()}\n                />\n                \n                <Button\n                  variant=\\\"ghost\\\"\n                  size=\\\"sm\\\"\n                  onClick={(e) => {\n                    e.stopPropagation();\n                    // Show context menu or actions\n                  }}\n                >\n                  <MoreHorizontal className=\\\"h-4 w-4\\\" />\n                </Button>\n              </div>\n            </div>\n\n            {/* Badges */}\n            <div className=\\\"flex flex-wrap gap-xs\\\">\n              <Badge className={getTypeColor(dashboard.type)}>\n                {dashboard.type}\n              </Badge>\n              \n              <Badge className={getAccessLevelColor(dashboard.access_level)}>\n                {dashboard.access_level}\n              </Badge>\n              \n              {dashboard.is_default && (\n                <Badge className=\\\"bg-yellow-100 text-yellow-800\\\">\n                  Default\n                </Badge>\n              )}\n              \n              {dashboard.is_public && (\n                <Badge className=\\\"bg-indigo-100 text-indigo-800\\\">\n                  Public\n                </Badge>\n              )}\n            </div>\n\n            {/* Stats */}\n            <div className=\\\"grid grid-cols-2 gap-md text-center\\\">\n              <div>\n                <div className=\\\"text-heading-4 font-semibold\\\">\n                  {dashboard.widget_count || 0}\n                </div>\n                <div className=\\\"text-body-xs text-muted-foreground\\\">\n                  Widgets\n                </div>\n              </div>\n              \n              <div>\n                <div className=\\\"text-heading-4 font-semibold\\\">\n                  {dashboard.share_count || 0}\n                </div>\n                <div className=\\\"text-body-xs text-muted-foreground\\\">\n                  Shares\n                </div>\n              </div>\n            </div>\n\n            {/* Tags */}\n            {dashboard.tags && dashboard.tags.length > 0 && (\n              <div className=\\\"flex flex-wrap gap-xs\\\">\n                {dashboard.tags.slice(0, 3).map((tag, index) => (\n                  <span\n                    key={index}\n                    className=\\\"inline-flex items-center px-xs py-xs rounded-full text-xs font-medium bg-gray-100 text-gray-700\\\"\n                  >\n                    {tag}\n                  </span>\n                ))}\n                {dashboard.tags.length > 3 && (\n                  <span className=\\\"text-body-xs text-muted-foreground\\\">\n                    +{dashboard.tags.length - 3} more\n                  </span>\n                )}\n              </div>\n            )}\n\n            {/* Actions */}\n            <div className=\\\"flex items-center justify-between pt-sm border-t\\\">\n              <div className=\\\"text-body-xs text-muted-foreground\\\">\n                {dashboard.created_at && new Date(dashboard.created_at).toLocaleDateString('en-US', {\n                  month: 'short',\n                  day: 'numeric',\n                  year: 'numeric'\n                })}\n              </div>\n              \n              <div className=\\\"flex items-center gap-xs\\\">\n                {onView && (\n                  <Button\n                    variant=\\\"ghost\\\"\n                    size=\\\"sm\\\"\n                    onClick={(e) => {\n                      e.stopPropagation();\n                      onView(dashboard);\n                    }}\n                  >\n                    <Eye className=\\\"h-4 w-4\\\" />\n                  </Button>\n                )}\n                \n                {onEdit && (\n                  <Button\n                    variant=\\\"ghost\\\"\n                    size=\\\"sm\\\"\n                    onClick={(e) => {\n                      e.stopPropagation();\n                      onEdit(dashboard);\n                    }}\n                  >\n                    <Edit className=\\\"h-4 w-4\\\" />\n                  </Button>\n                )}\n                \n                {onShare && (\n                  <Button\n                    variant=\\\"ghost\\\"\n                    size=\\\"sm\\\"\n                    onClick={(e) => {\n                      e.stopPropagation();\n                      onShare(dashboard);\n                    }}\n                  >\n                    <Share className=\\\"h-4 w-4\\\" />\n                  </Button>\n                )}\n                \n                {onDuplicate && (\n                  <Button\n                    variant=\\\"ghost\\\"\n                    size=\\\"sm\\\"\n                    onClick={(e) => {\n                      e.stopPropagation();\n                      onDuplicate(dashboard);\n                    }}\n                  >\n                    <Copy className=\\\"h-4 w-4\\\" />\n                  </Button>\n                )}\n              </div>\n            </div>\n          </div>\n        </Card>\n      ))}\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ghxstship/apps/web/app/(app)/(shell)/dashboard/widgets/ChartWidget.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'processChartData'. Either include it or remove the dependency array.","line":148,"column":6,"nodeType":"ArrayExpression","endLine":148,"endColumn":44,"suggestions":[{"desc":"Update the dependencies array to be: [id, config, organizationId, supabase, processChartData]","fix":{"range":[3744,3782],"text":"[id, config, organizationId, supabase, processChartData]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\n\nimport { MoreHorizontal, RefreshCw } from \"lucide-react\";\nimport React, { useState, useEffect } from 'react';\nimport { Card } from '@ghxstship/ui';\nimport { createClient } from '@/lib/supabase/client';\nimport {\n  Chart as ChartJS,\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  BarElement,\n  ArcElement,\n  Title,\n  Tooltip,\n  Legend,\n  ChartOptions,\n} from 'chart.js';\nimport { Line, Bar, Pie, Doughnut } from 'react-chartjs-2';\n\nChartJS.register(\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  BarElement,\n  ArcElement,\n  Title,\n  Tooltip,\n  Legend\n);\n\ninterface ChartWidgetProps {\n  id: string;\n  title: string;\n  config: {\n    chartType: 'line' | 'bar' | 'pie' | 'doughnut';\n    dataSource: string;\n    xAxis: string;\n    yAxis: string | string[];\n    groupBy?: string;\n    aggregation: 'count' | 'sum' | 'avg' | 'min' | 'max';\n    colors?: string[];\n    showLegend?: boolean;\n    showGrid?: boolean;\n    timeframe?: string;\n  };\n  organizationId: string;\n  onEdit?: () => void;\n  onDelete?: () => void;\n}\n\nexport default function ChartWidget({ \n  id, \n  title, \n  config, \n  organizationId, \n  onEdit, \n  onDelete \n}: ChartWidgetProps) {\n  const [chartData, setChartData] = useState<unknown>(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [lastUpdated, setLastUpdated] = useState<Date>(new Date());\n\n  const supabase = createClient();\n\n  const defaultColors = [\n    'hsl(var(--primary))', 'hsl(var(--destructive))', 'hsl(var(--success))', 'hsl(var(--warning))', 'hsl(var(--info))',\n    'hsl(var(--secondary))', 'hsl(var(--accent))', 'hsl(var(--muted))', 'hsl(var(--border))', 'hsl(var(--ring))'\n  ];\n\n  useEffect(() => {\n    async function fetchChartData() {\n      try {\n        setLoading(true);\n        \n        // Fetch data based on data source\n        let query;\n        switch (config.dataSource) {\n          case 'projects':\n            query = supabase\n              .from('projects')\n              .select('*')\n              .eq('organization_id', organizationId);\n            break;\n          case 'people':\n            query = supabase\n              .from('people')\n              .select('*')\n              .eq('organization_id', organizationId);\n            break;\n          case 'finance':\n            query = supabase\n              .from('budgets')\n              .select('*')\n              .eq('organization_id', organizationId);\n            break;\n          case 'jobs':\n            query = supabase\n              .from('jobs')\n              .select('*')\n              .eq('organization_id', organizationId);\n            break;\n          default:\n            throw new Error(`Unsupported data source: ${config.dataSource}`);\n        }\n\n        const { data: rawData, error } = await query;\n        \n        if (error) throw error;\n\n        // Process data for chart\n        const processedData = processChartData(rawData || []);\n        setChartData(processedData);\n        setLastUpdated(new Date());\n      } catch (err) {\n        console.error('Error fetching chart data:', err);\n        setError(err instanceof Error ? err.message : 'Failed to load data');\n      } finally {\n        setLoading(false);\n      }\n    }\n\n    fetchChartData();\n\n    // Set up real-time subscription\n    const subscription = supabase\n      .channel(`chart-widget-${id}`)\n      .on('postgres_changes', \n        { \n          event: '*', \n          schema: 'public', \n          table: config.dataSource,\n          filter: `organization_id=eq.${organizationId}`\n        }, \n        () => {\n          fetchChartData();\n        }\n      )\n      .subscribe();\n\n    return () => {\n      subscription.unsubscribe();\n    };\n  }, [id, config, organizationId, supabase]);\n\n  const processChartData = (rawData: unknown[]) => {\n    if (!rawData.length) return null;\n\n    const colors = config.colors || defaultColors;\n\n    if (config.groupBy) {\n      // Group data by specified field\n      const grouped = rawData.reduce((acc, item) => {\n        const key = item[config.groupBy!] || 'Unknown';\n        if (!acc[key]) acc[key] = [];\n        acc[key].push(item);\n        return acc;\n      }, {});\n\n      const labels = Object.keys(grouped);\n      const values = labels.map(label => {\n        const items = grouped[label];\n        switch (config.aggregation) {\n          case 'count':\n            return items.length;\n          case 'sum':\n            return items.reduce((sum: number, item) => sum + (item[config.yAxis as string] || 0), 0);\n          case 'avg':\n            const total = items.reduce((sum: number, item) => sum + (item[config.yAxis as string] || 0), 0);\n            return total / items.length;\n          default:\n            return items.length;\n        }\n      });\n\n      return {\n        labels,\n        datasets: [{\n          label: title,\n          data: values,\n          backgroundColor: colors.slice(0, labels.length),\n          borderColor: colors.slice(0, labels.length),\n          borderWidth: 2,\n          fill: false,\n        }]\n      };\n    } else {\n      // Time series or simple data\n      const labels = rawData.map(item => item[config.xAxis] || 'Unknown');\n      const values = rawData.map(item => item[config.yAxis as string] || 0);\n\n      return {\n        labels,\n        datasets: [{\n          label: title,\n          data: values,\n          backgroundColor: colors[0] + '80',\n          borderColor: colors[0],\n          borderWidth: 2,\n          fill: config.chartType === 'line' ? false : true,\n        }]\n      };\n    }\n  };\n\n  const getChartOptions = (): ChartOptions<unknown> => {\n    const baseOptions: ChartOptions<unknown> = {\n      responsive: true,\n      maintainAspectRatio: false,\n      plugins: {\n        legend: {\n          display: config.showLegend !== false,\n          position: 'top' as const,\n        },\n        title: {\n          display: false,\n        },\n      },\n    };\n\n    if (config.chartType === 'line' || config.chartType === 'bar') {\n      return {\n        ...baseOptions,\n        scales: {\n          x: {\n            display: true,\n            grid: {\n              display: config.showGrid !== false,\n            },\n          },\n          y: {\n            display: true,\n            grid: {\n              display: config.showGrid !== false,\n            },\n          },\n        },\n      };\n    }\n\n    return baseOptions;\n  };\n\n  const renderChart = () => {\n    if (!chartData) return null;\n\n    const options = getChartOptions();\n\n    switch (config.chartType) {\n      case 'line':\n        return <Line data={chartData} options={options} />;\n      case 'bar':\n        return <Bar data={chartData} options={options} />;\n      case 'pie':\n        return <Pie data={chartData} options={options} />;\n      case 'doughnut':\n        return <Doughnut data={chartData} options={options} />;\n      default:\n        return <Bar data={chartData} options={options} />;\n    }\n  };\n\n  if (loading) {\n    return (\n      <Card className=\"p-lg h-full\">\n        <div className=\"animate-pulse\">\n          <div className=\"h-4 bg-secondary/50 rounded w-3/4 mb-md\"></div>\n          <div className=\"h-64 bg-secondary/50 rounded\"></div>\n        </div>\n      </Card>\n    );\n  }\n\n  if (error) {\n    return (\n      <Card className=\"p-lg h-full\">\n        <div className=\"text-center\">\n          <p className=\"text-body-sm color-destructive mb-sm\">Error loading chart</p>\n          <p className=\"text-body-sm color-muted\">{error}</p>\n        </div>\n      </Card>\n    );\n  }\n\n  return (\n    <Card className=\"p-lg h-full relative group\">\n      {/* Widget Header */}\n      <div className=\"flex items-center justify-between mb-md\">\n        <h3 className=\"text-body text-heading-4\">{title}</h3>\n        <div className=\"flex items-center cluster-sm\">\n          <button\n            onClick={() => window.location.reload()}\n            className=\"p-xs color-muted hover:color-foreground rounded opacity-0 group-hover:opacity-100 transition-opacity\"\n            aria-label=\"Refresh chart\"\n          >\n            <RefreshCw className=\"h-4 w-4\" />\n          </button>\n          {(onEdit || onDelete) && (\n            <button\n              onClick={onEdit}\n              className=\"p-xs color-muted hover:color-foreground rounded opacity-0 group-hover:opacity-100 transition-opacity\"\n              aria-label=\"Edit widget\"\n            >\n              <MoreHorizontal className=\"h-4 w-4\" />\n            </button>\n          )}\n        </div>\n      </div>\n\n      {/* Chart */}\n      <div className=\"h-64 mb-md\">\n        {chartData ? renderChart() : (\n          <div className=\"flex items-center justify-center h-full color-muted\">\n            No data available\n          </div>\n        )}\n      </div>\n\n      {/* Footer */}\n      <div className=\"flex items-center justify-between text-body-sm color-muted\">\n        <span>\n          Data source: {config.dataSource}\n        </span>\n        <span>\n          Updated: {lastUpdated.toLocaleTimeString()}\n        </span>\n      </div>\n    </Card>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ghxstship/apps/web/app/(app)/(shell)/dashboard/widgets/EnhancedActivityWidget.tsx","messages":[{"ruleId":"@next/next/no-img-element","severity":1,"message":"Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` or a custom image loader to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","line":158,"column":27,"nodeType":"JSXOpeningElement","endLine":162,"endColumn":29}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { Activity, Clock, User, FileText, CheckCircle, AlertCircle, Plus, ArrowRight, MoreHorizontal } from \"lucide-react\";\nimport React from 'react';\nimport { Card, Avatar, Badge, Button } from '@ghxstship/ui';\nimport type { BaseWidgetProps, ActivityItem } from '../types';\n\ninterface EnhancedActivityWidgetProps extends BaseWidgetProps {\n  activities?: ActivityItem[];\n  onViewAll?: () => void;\n}\n\nexport default function EnhancedActivityWidget({ \n  widget, \n  data, \n  isLoading,\n  activities,\n  onViewAll\n}: EnhancedActivityWidgetProps) {\n  if (isLoading) {\n    return (\n      <Card className=\"p-lg\">\n        <div className=\"space-y-md\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"h-6 bg-muted rounded w-1/3 animate-pulse\"></div>\n            <div className=\"h-8 w-16 bg-muted rounded animate-pulse\"></div>\n          </div>\n          <div className=\"space-y-md\">\n            {[...Array(5)].map((_, i) => (\n              <div key={i} className=\"flex items-start space-x-sm\">\n                <div className=\"w-8 h-8 bg-muted rounded-full animate-pulse\"></div>\n                <div className=\"flex-1 space-y-xs\">\n                  <div className=\"h-4 bg-muted rounded w-3/4 animate-pulse\"></div>\n                  <div className=\"h-3 bg-muted rounded w-1/2 animate-pulse\"></div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      </Card>\n    );\n  }\n\n  const activityData = activities || data?.data || [];\n\n  const getActivityIcon = (type: string) => {\n    switch (type) {\n      case 'project':\n        return <FileText className=\"w-4 h-4 text-blue-500\" />;\n      case 'task':\n        return <CheckCircle className=\"w-4 h-4 text-green-500\" />;\n      case 'user':\n        return <User className=\"w-4 h-4 text-purple-500\" />;\n      case 'system':\n        return <AlertCircle className=\"w-4 h-4 text-orange-500\" />;\n      default:\n        return <Activity className=\"w-4 h-4 text-gray-500\" />;\n    }\n  };\n\n  const getActivityColor = (type: string) => {\n    switch (type) {\n      case 'project':\n        return 'bg-blue-50 border-blue-200';\n      case 'task':\n        return 'bg-green-50 border-green-200';\n      case 'user':\n        return 'bg-purple-50 border-purple-200';\n      case 'system':\n        return 'bg-orange-50 border-orange-200';\n      default:\n        return 'bg-gray-50 border-gray-200';\n    }\n  };\n\n  const formatRelativeTime = (timestamp: string) => {\n    const now = new Date();\n    const time = new Date(timestamp);\n    const diffInMinutes = Math.floor((now.getTime() - time.getTime()) / (1000 * 60));\n\n    if (diffInMinutes < 1) return 'Just now';\n    if (diffInMinutes < 60) return `${diffInMinutes}m ago`;\n    \n    const diffInHours = Math.floor(diffInMinutes / 60);\n    if (diffInHours < 24) return `${diffInHours}h ago`;\n    \n    const diffInDays = Math.floor(diffInHours / 24);\n    if (diffInDays < 7) return `${diffInDays}d ago`;\n    \n    return time.toLocaleDateString();\n  };\n\n  return (\n    <Card className=\"p-lg\">\n      <div className=\"space-y-md\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-sm\">\n            <Activity className=\"w-5 h-5 text-blue-500\" />\n            <h3 className=\"font-semibold text-foreground\">{widget.title}</h3>\n          </div>\n          {onViewAll && (\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={onViewAll}\n              className=\"text-xs\"\n            >\n              View All\n              <ArrowRight className=\"w-3 h-3 ml-xs\" />\n            </Button>\n          )}\n        </div>\n\n        {/* Activity List */}\n        <div className=\"space-y-sm\">\n          {activityData.length === 0 ? (\n            <div className=\"text-center py-lg text-muted-foreground\">\n              <Activity className=\"w-8 h-8 mx-auto mb-sm opacity-50\" />\n              <p className=\"text-sm\">No recent activity</p>\n            </div>\n          ) : (\n            activityData.slice(0, widget.config.limit || 10).map((activity) => (\n              <div\n                key={activity.id}\n                className={`p-sm rounded-lg border transition-colors hover:bg-muted/50 ${getActivityColor(activity.type)}`}\n              >\n                <div className=\"flex items-start space-x-sm\">\n                  {/* Activity Icon */}\n                  <div className=\"flex-shrink-0 mt-xs\">\n                    {getActivityIcon(activity.type)}\n                  </div>\n\n                  {/* Content */}\n                  <div className=\"flex-1 min-w-0\">\n                    <div className=\"flex items-start justify-between\">\n                      <div className=\"flex-1\">\n                        <p className=\"text-sm font-medium text-foreground truncate\">\n                          {activity.title}\n                        </p>\n                        {activity.description && (\n                          <p className=\"text-xs text-muted-foreground mt-xs\">\n                            {activity.description}\n                          </p>\n                        )}\n                      </div>\n                      <div className=\"flex-shrink-0 ml-sm\">\n                        <span className=\"text-xs text-muted-foreground\">\n                          {formatRelativeTime(activity.timestamp)}\n                        </span>\n                      </div>\n                    </div>\n\n                    {/* User Info */}\n                    {activity.user_name && (\n                      <div className=\"flex items-center space-x-xs mt-xs\">\n                        <Avatar className=\"w-4 h-4\">\n                          <img \n                            src={activity.user_avatar || '/default-avatar.png'} \n                            alt={activity.user_name}\n                            className=\"w-full h-full object-cover\"\n                          />\n                        </Avatar>\n                        <span className=\"text-xs text-muted-foreground\">\n                          {activity.user_name}\n                        </span>\n                      </div>\n                    )}\n\n                    {/* Metadata */}\n                    {activity.metadata && Object.keys(activity.metadata).length > 0 && (\n                      <div className=\"flex flex-wrap gap-xs mt-xs\">\n                        {Object.entries(activity.metadata).slice(0, 3).map(([key, value]) => (\n                          <Badge key={key} variant=\"secondary\" className=\"text-xs\">\n                            {key}: {String(value)}\n                          </Badge>\n                        ))}\n                      </div>\n                    )}\n\n                    {/* Action Link */}\n                    {activity.action_url && (\n                      <div className=\"mt-xs\">\n                        <a\n                          href={activity.action_url}\n                          className=\"text-xs text-blue-600 hover:text-blue-800 font-medium\"\n                        >\n                          View Details →\n                        </a>\n                      </div>\n                    )}\n                  </div>\n                </div>\n              </div>\n            ))\n          )}\n        </div>\n\n        {/* Footer */}\n        {data?.metadata && (\n          <div className=\"flex items-center justify-between text-xs text-muted-foreground pt-sm border-t\">\n            <span>\n              {data.metadata.total_count} total activities\n            </span>\n            <span>\n              Updated {new Date(data.metadata.last_updated).toLocaleTimeString()}\n            </span>\n          </div>\n        )}\n      </div>\n    </Card>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ghxstship/apps/web/app/(app)/(shell)/dashboard/widgets/EnhancedChartWidget.tsx","messages":[{"ruleId":"react/jsx-no-undef","severity":2,"message":"'BarChart3' is not defined.","line":49,"column":14,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":49,"endColumn":23},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'LineChart' is not defined.","line":89,"column":16,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":89,"endColumn":25},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'PieChart' is not defined.","line":101,"column":16,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":101,"endColumn":24},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'BarChart3' is not defined.","line":127,"column":16,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":127,"endColumn":25},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'LineChart' is not defined.","line":140,"column":17,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":140,"endColumn":26},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'PieChart' is not defined.","line":143,"column":17,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":143,"endColumn":25},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'BarChart3' is not defined.","line":145,"column":17,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":145,"endColumn":26},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Download' is not defined.","line":171,"column":18,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":171,"endColumn":26},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Maximize2' is not defined.","line":181,"column":18,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":181,"endColumn":27}],"suppressedMessages":[],"errorCount":9,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport React from 'react';\nimport { Card, Button } from '@ghxstship/ui';\nimport type { BaseWidgetProps } from '../types';\n\ninterface EnhancedChartWidgetProps extends BaseWidgetProps {\n  onExpand?: () => void;\n  onExport?: () => void;\n}\n\nconst COLORS = [\n  '#3B82F6', '#10B981', '#F59E0B', '#EF4444', '#8B5CF6',\n  '#06B6D4', '#84CC16', '#F97316', '#EC4899', '#6B7280'\n];\n\nexport default function EnhancedChartWidget({ \n  widget, \n  data, \n  isLoading,\n  onExpand,\n  onExport\n}: EnhancedChartWidgetProps) {\n  if (isLoading) {\n    return (\n      <Card className=\"p-lg\">\n        <div className=\"space-y-md\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"h-6 bg-muted rounded w-1/3 animate-pulse\"></div>\n            <div className=\"flex space-x-sm\">\n              <div className=\"h-8 w-8 bg-muted rounded animate-pulse\"></div>\n              <div className=\"h-8 w-8 bg-muted rounded animate-pulse\"></div>\n            </div>\n          </div>\n          <div className=\"h-64 bg-muted rounded animate-pulse\"></div>\n        </div>\n      </Card>\n    );\n  }\n\n  const chartData = data?.data || [];\n  const chartType = widget.config.chartType || 'bar';\n\n  const renderChart = () => {\n    if (!chartData.length) {\n      return (\n        <div className=\"flex items-center justify-center h-64 text-muted-foreground\">\n          <div className=\"text-center space-y-sm\">\n            <BarChart3 className=\"w-12 h-12 mx-auto opacity-50\" />\n            <p>No data available</p>\n          </div>\n        </div>\n      );\n    }\n\n    const maxValue = Math.max(...chartData.map((item: unknown) => item.value || 0));\n\n    switch (chartType) {\n      case 'bar':\n      case 'column':\n        return (\n          <div className=\"h-64 flex items-end justify-around space-x-2 p-4\">\n            {chartData.slice(0, 10).map((item: any, index: number) => {\n              const height = maxValue > 0 ? (item.value / maxValue) * 200 : 0;\n              return (\n                <div key={index} className=\"flex flex-col items-center space-y-2\">\n                  <div className=\"text-xs text-muted-foreground\">{item.value}</div>\n                  <div\n                    className=\"w-8 rounded-t transition-all duration-300\"\n                    style={{\n                      height: `${height}px`,\n                      backgroundColor: COLORS[index % COLORS.length],\n                      minHeight: '4px'\n                    }}\n                  />\n                  <div className=\"text-xs text-muted-foreground max-w-12 truncate\">\n                    {item.name || item.label}\n                  </div>\n                </div>\n              );\n            })}\n          </div>\n        );\n\n      case 'line':\n        return (\n          <div className=\"h-64 flex items-center justify-center\">\n            <div className=\"text-center space-y-sm\">\n              <LineChart className=\"w-12 h-12 mx-auto text-blue-500\" />\n              <p className=\"text-sm text-muted-foreground\">Line Chart</p>\n              <p className=\"text-xs text-muted-foreground\">{chartData.length} data points</p>\n            </div>\n          </div>\n        );\n\n      case 'pie':\n      case 'donut':\n        return (\n          <div className=\"h-64 flex items-center justify-center\">\n            <div className=\"text-center space-y-sm\">\n              <PieChart className=\"w-12 h-12 mx-auto text-purple-500\" />\n              <p className=\"text-sm text-muted-foreground\">\n                {chartType === 'donut' ? 'Donut' : 'Pie'} Chart\n              </p>\n              <div className=\"space-y-1\">\n                {chartData.slice(0, 5).map((item: any, index: number) => (\n                  <div key={index} className=\"flex items-center justify-between text-xs\">\n                    <div className=\"flex items-center space-x-2\">\n                      <div\n                        className=\"w-3 h-3 rounded\"\n                        style={{ backgroundColor: COLORS[index % COLORS.length] }}\n                      />\n                      <span>{item.name || item.label}</span>\n                    </div>\n                    <span className=\"font-medium\">{item.value}</span>\n                  </div>\n                ))}\n              </div>\n            </div>\n          </div>\n        );\n\n      default:\n        return (\n          <div className=\"flex items-center justify-center h-64 text-muted-foreground\">\n            <div className=\"text-center space-y-sm\">\n              <BarChart3 className=\"w-12 h-12 mx-auto opacity-50\" />\n              <p>Chart type: {chartType}</p>\n              <p className=\"text-xs\">{chartData.length} data points</p>\n            </div>\n          </div>\n        );\n    }\n  };\n\n  const getChartIcon = () => {\n    switch (chartType) {\n      case 'line':\n      case 'area':\n        return <LineChart className=\"w-4 h-4\" />;\n      case 'pie':\n      case 'donut':\n        return <PieChart className=\"w-4 h-4\" />;\n      default:\n        return <BarChart3 className=\"w-4 h-4\" />;\n    }\n  };\n\n  return (\n    <Card className=\"p-lg\">\n      <div className=\"space-y-md\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-sm\">\n            {getChartIcon()}\n            <div>\n              <h3 className=\"font-semibold text-foreground\">{widget.title}</h3>\n              {widget.description && (\n                <p className=\"text-sm text-muted-foreground\">{widget.description}</p>\n              )}\n            </div>\n          </div>\n          <div className=\"flex items-center space-x-sm\">\n            {onExport && (\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={onExport}\n                className=\"p-xs\"\n              >\n                <Download className=\"w-4 h-4\" />\n              </Button>\n            )}\n            {onExpand && (\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={onExpand}\n                className=\"p-xs\"\n              >\n                <Maximize2 className=\"w-4 h-4\" />\n              </Button>\n            )}\n          </div>\n        </div>\n\n        {/* Chart */}\n        <div className=\"w-full\">\n          {renderChart()}\n        </div>\n\n        {/* Footer Stats */}\n        {data?.metadata && (\n          <div className=\"flex items-center justify-between text-xs text-muted-foreground pt-sm border-t\">\n            <span>\n              {data.metadata.total_count} data points\n            </span>\n            <span>\n              Updated {new Date(data.metadata.last_updated).toLocaleTimeString()}\n            </span>\n          </div>\n        )}\n      </div>\n    </Card>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ghxstship/apps/web/app/(app)/(shell)/files/call-sheets/drawers/ViewCallSheetDrawer.tsx","messages":[{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Download' is not defined.","line":80,"column":18,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":80,"endColumn":26},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Share2' is not defined.","line":85,"column":18,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":85,"endColumn":24},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Share2' is not defined.","line":91,"column":20,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":91,"endColumn":26},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Edit' is not defined.","line":98,"column":20,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":98,"endColumn":24},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'MapPin' is not defined.","line":160,"column":24,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":160,"endColumn":30},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Users' is not defined.","line":169,"column":22,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":169,"endColumn":27},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Eye' is not defined.","line":180,"column":24,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":180,"endColumn":27},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Users' is not defined.","line":212,"column":22,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":212,"endColumn":27},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Users' is not defined.","line":222,"column":22,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":222,"endColumn":27},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Phone' is not defined.","line":232,"column":22,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":232,"endColumn":27},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Users' is not defined.","line":293,"column":20,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":293,"endColumn":25},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Users' is not defined.","line":361,"column":20,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":361,"endColumn":25},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Phone' is not defined.","line":388,"column":32,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":388,"endColumn":37},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Mail' is not defined.","line":394,"column":34,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":394,"endColumn":38},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Phone' is not defined.","line":404,"column":32,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":404,"endColumn":37},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Mail' is not defined.","line":411,"column":34,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":411,"endColumn":38},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Phone' is not defined.","line":422,"column":20,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":422,"endColumn":25}],"suppressedMessages":[],"errorCount":17,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\nimport { User, FileText, Settings, Award, Calendar, TrendingUp, Activity, Clock, Plus, Search, Play, Trash2 } from \"lucide-react\";\nimport { useState } from 'react';\nimport {\n  Button,\n  Badge,\n  Card,\n  Drawer,\n  DrawerContent,\n  DrawerHeader,\n  DrawerTitle,\n  DrawerFooter,\n  Separator,\n} from '@ghxstship/ui';\nimport { format } from 'date-fns';\nimport type { CallSheet } from '../lib/callSheetsService';\n\ninterface ViewCallSheetDrawerProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  callSheet: CallSheet;\n  onEdit?: () => void;\n  onDelete?: () => void;\n  onDistribute?: () => void;\n}\n\nconst STATUS_VARIANTS: Record<CallSheet['status'], 'secondary' | 'info' | 'warning' | 'success' | 'destructive'> = {\n  draft: 'secondary',\n  published: 'info',\n  distributed: 'warning',\n  completed: 'success',\n  cancelled: 'destructive',\n};\n\nexport default function ViewCallSheetDrawer({\n  open,\n  onOpenChange,\n  callSheet,\n  onEdit,\n  onDelete,\n  onDistribute,\n}: ViewCallSheetDrawerProps) {\n  const [activeTab, setActiveTab] = useState<'overview' | 'crew' | 'talent' | 'contacts'>('overview');\n\n  const tabs = [\n    { id: 'overview', label: 'Overview' },\n    { id: 'crew', label: `Crew (${callSheet.crew_calls?.length || 0})` },\n    { id: 'talent', label: `Talent (${callSheet.talent_calls?.length || 0})` },\n    { id: 'contacts', label: `Emergency (${callSheet.emergency_contacts?.length || 0})` },\n  ];\n\n  const handlePrint = () => {\n    window.print();\n  };\n\n  const handleExport = () => {\n    // This would typically generate a PDF or other format\n    console.log('Export call sheet:', callSheet.id);\n  };\n\n  return (\n    <Drawer open={open} onOpenChange={onOpenChange}>\n      <DrawerContent className=\"max-w-4xl mx-auto\">\n        <DrawerHeader>\n          <div className=\"flex items-start justify-between\">\n            <div>\n              <DrawerTitle className=\"text-xl\">{callSheet.title}</DrawerTitle>\n              <div className=\"flex items-center space-x-2 mt-2\">\n                <Badge variant={STATUS_VARIANTS[callSheet.status]}>\n                  {callSheet.status.replace('_', ' ')}\n                </Badge>\n                <span className=\"text-sm text-muted-foreground\">\n                  Created {format(new Date(callSheet.created_at!), 'MMM dd, yyyy')}\n                </span>\n              </div>\n            </div>\n            \n            <div className=\"flex items-center space-x-2\">\n              <Button variant=\"outline\" size=\"sm\" onClick={handlePrint}>\n                <Download className=\"h-4 w-4 mr-2\" />\n                Print\n              </Button>\n              \n              <Button variant=\"outline\" size=\"sm\" onClick={handleExport}>\n                <Share2 className=\"h-4 w-4 mr-2\" />\n                Export\n              </Button>\n              \n              {callSheet.status === 'published' && onDistribute && (\n                <Button variant=\"outline\" size=\"sm\" onClick={onDistribute}>\n                  <Share2 className=\"h-4 w-4 mr-2\" />\n                  Distribute\n                </Button>\n              )}\n              \n              {onEdit && (\n                <Button variant=\"outline\" size=\"sm\" onClick={onEdit}>\n                  <Edit className=\"h-4 w-4 mr-2\" />\n                  Edit\n                </Button>\n              )}\n              \n              {onDelete && (\n                <Button variant=\"outline\" size=\"sm\" onClick={onDelete} className=\"text-destructive\">\n                  <Trash2 className=\"h-4 w-4 mr-2\" />\n                  Delete\n                </Button>\n              )}\n            </div>\n          </div>\n        </DrawerHeader>\n\n        <div className=\"flex-1 px-6\">\n          {/* Tab Navigation */}\n          <div className=\"flex space-x-1 mb-6 border-b\">\n            {tabs.map((tab) => (\n              <button\n                key={tab.id}\n                type=\"button\"\n                onClick={() => setActiveTab(tab.id as unknown)}\n                className={`px-4 py-2 text-sm font-medium border-b-2 transition-colors ${\n                  activeTab === tab.id\n                    ? 'border-primary text-primary'\n                    : 'border-transparent text-muted-foreground hover:text-foreground'\n                }`}\n              >\n                {tab.label}\n              </button>\n            ))}\n          </div>\n\n          {/* Tab Content */}\n          {activeTab === 'overview' && (\n            <div className=\"space-y-6\">\n              {/* Basic Information */}\n              <Card className=\"p-6\">\n                <h3 className=\"text-lg font-semibold mb-4\">Call Sheet Information</h3>\n                \n                <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 mb-6\">\n                  <div className=\"flex items-center space-x-3\">\n                    <Calendar className=\"h-5 w-5 text-muted-foreground\" />\n                    <div>\n                      <p className=\"text-sm text-muted-foreground\">Call Date</p>\n                      <p className=\"font-medium\">{format(new Date(callSheet.call_date), 'EEEE, MMMM dd, yyyy')}</p>\n                    </div>\n                  </div>\n                  \n                  {callSheet.call_time && (\n                    <div className=\"flex items-center space-x-3\">\n                      <Clock className=\"h-5 w-5 text-muted-foreground\" />\n                      <div>\n                        <p className=\"text-sm text-muted-foreground\">Call Time</p>\n                        <p className=\"font-medium\">{callSheet.call_time}</p>\n                      </div>\n                    </div>\n                  )}\n                  \n                  {callSheet.location && (\n                    <div className=\"flex items-center space-x-3\">\n                      <MapPin className=\"h-5 w-5 text-muted-foreground\" />\n                      <div>\n                        <p className=\"text-sm text-muted-foreground\">Location</p>\n                        <p className=\"font-medium\">{callSheet.location}</p>\n                      </div>\n                    </div>\n                  )}\n                  \n                  <div className=\"flex items-center space-x-3\">\n                    <Users className=\"h-5 w-5 text-muted-foreground\" />\n                    <div>\n                      <p className=\"text-sm text-muted-foreground\">Total People</p>\n                      <p className=\"font-medium\">\n                        {(callSheet.crew_calls?.length || 0) + (callSheet.talent_calls?.length || 0)} people\n                      </p>\n                    </div>\n                  </div>\n                  \n                  {callSheet.weather && (\n                    <div className=\"flex items-center space-x-3\">\n                      <Eye className=\"h-5 w-5 text-muted-foreground\" />\n                      <div>\n                        <p className=\"text-sm text-muted-foreground\">Weather</p>\n                        <p className=\"font-medium\">{callSheet.weather}</p>\n                      </div>\n                    </div>\n                  )}\n                </div>\n                \n                {callSheet.description && (\n                  <div className=\"mb-4\">\n                    <h4 className=\"font-medium mb-2\">Description</h4>\n                    <p className=\"text-muted-foreground\">{callSheet.description}</p>\n                  </div>\n                )}\n                \n                {callSheet.special_instructions && (\n                  <div className=\"p-4 bg-muted rounded-lg\">\n                    <h4 className=\"font-medium mb-2 text-warning\">Special Instructions</h4>\n                    <p className=\"text-sm\">{callSheet.special_instructions}</p>\n                  </div>\n                )}\n              </Card>\n\n              {/* Summary Cards */}\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                <Card className=\"p-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"text-sm text-muted-foreground\">Crew Members</p>\n                      <p className=\"text-2xl font-bold\">{callSheet.crew_calls?.length || 0}</p>\n                    </div>\n                    <Users className=\"h-8 w-8 text-primary\" />\n                  </div>\n                </Card>\n                \n                <Card className=\"p-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"text-sm text-muted-foreground\">Talent</p>\n                      <p className=\"text-2xl font-bold\">{callSheet.talent_calls?.length || 0}</p>\n                    </div>\n                    <Users className=\"h-8 w-8 text-success\" />\n                  </div>\n                </Card>\n                \n                <Card className=\"p-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"text-sm text-muted-foreground\">Emergency Contacts</p>\n                      <p className=\"text-2xl font-bold\">{callSheet.emergency_contacts?.length || 0}</p>\n                    </div>\n                    <Phone className=\"h-8 w-8 text-warning\" />\n                  </div>\n                </Card>\n              </div>\n            </div>\n          )}\n\n          {activeTab === 'crew' && (\n            <div className=\"space-y-4\">\n              <h3 className=\"text-lg font-semibold\">Crew Calls</h3>\n              \n              {callSheet.crew_calls && callSheet.crew_calls.length > 0 ? (\n                <div className=\"space-y-3\">\n                  {callSheet.crew_calls.map((crew, index) => (\n                    <Card key={crew.id} className=\"p-4\">\n                      <div className=\"flex items-start justify-between mb-3\">\n                        <div className=\"flex items-center space-x-2\">\n                          <Badge variant=\"outline\">#{index + 1}</Badge>\n                          <h4 className=\"font-medium\">{crew.role}</h4>\n                          {crew.department && (\n                            <Badge variant=\"secondary\" className=\"text-xs\">\n                              {crew.department}\n                            </Badge>\n                          )}\n                        </div>\n                        \n                        {crew.call_time && (\n                          <div className=\"flex items-center text-sm text-muted-foreground\">\n                            <Clock className=\"h-4 w-4 mr-1\" />\n                            {crew.call_time}\n                          </div>\n                        )}\n                      </div>\n                      \n                      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 text-sm\">\n                        {crew.person_name && (\n                          <div>\n                            <p className=\"text-muted-foreground\">Person</p>\n                            <p className=\"font-medium\">{crew.person_name}</p>\n                          </div>\n                        )}\n                        \n                        {crew.location && (\n                          <div>\n                            <p className=\"text-muted-foreground\">Location</p>\n                            <p className=\"font-medium\">{crew.location}</p>\n                          </div>\n                        )}\n                        \n                        {crew.notes && (\n                          <div>\n                            <p className=\"text-muted-foreground\">Notes</p>\n                            <p className=\"font-medium\">{crew.notes}</p>\n                          </div>\n                        )}\n                      </div>\n                    </Card>\n                  ))}\n                </div>\n              ) : (\n                <div className=\"text-center py-8 text-muted-foreground\">\n                  <Users className=\"h-12 w-12 mx-auto mb-4\" />\n                  <p>No crew calls scheduled</p>\n                </div>\n              )}\n            </div>\n          )}\n\n          {activeTab === 'talent' && (\n            <div className=\"space-y-4\">\n              <h3 className=\"text-lg font-semibold\">Talent Calls</h3>\n              \n              {callSheet.talent_calls && callSheet.talent_calls.length > 0 ? (\n                <div className=\"space-y-3\">\n                  {callSheet.talent_calls.map((talent, index) => (\n                    <Card key={talent.id} className=\"p-4\">\n                      <div className=\"flex items-start justify-between mb-3\">\n                        <div className=\"flex items-center space-x-2\">\n                          <Badge variant=\"outline\">#{index + 1}</Badge>\n                          <h4 className=\"font-medium\">{talent.talent_name}</h4>\n                          {talent.role && (\n                            <Badge variant=\"secondary\" className=\"text-xs\">\n                              {talent.role}\n                            </Badge>\n                          )}\n                        </div>\n                        \n                        {talent.call_time && (\n                          <div className=\"flex items-center text-sm text-muted-foreground\">\n                            <Clock className=\"h-4 w-4 mr-1\" />\n                            {talent.call_time}\n                          </div>\n                        )}\n                      </div>\n                      \n                      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4 text-sm\">\n                        {talent.makeup_time && (\n                          <div>\n                            <p className=\"text-muted-foreground\">Makeup</p>\n                            <p className=\"font-medium\">{talent.makeup_time}</p>\n                          </div>\n                        )}\n                        \n                        {talent.wardrobe_time && (\n                          <div>\n                            <p className=\"text-muted-foreground\">Wardrobe</p>\n                            <p className=\"font-medium\">{talent.wardrobe_time}</p>\n                          </div>\n                        )}\n                        \n                        {talent.location && (\n                          <div>\n                            <p className=\"text-muted-foreground\">Location</p>\n                            <p className=\"font-medium\">{talent.location}</p>\n                          </div>\n                        )}\n                        \n                        {talent.notes && (\n                          <div>\n                            <p className=\"text-muted-foreground\">Notes</p>\n                            <p className=\"font-medium\">{talent.notes}</p>\n                          </div>\n                        )}\n                      </div>\n                    </Card>\n                  ))}\n                </div>\n              ) : (\n                <div className=\"text-center py-8 text-muted-foreground\">\n                  <Users className=\"h-12 w-12 mx-auto mb-4\" />\n                  <p>No talent calls scheduled</p>\n                </div>\n              )}\n            </div>\n          )}\n\n          {activeTab === 'contacts' && (\n            <div className=\"space-y-4\">\n              <h3 className=\"text-lg font-semibold\">Emergency Contacts</h3>\n              \n              {callSheet.emergency_contacts && callSheet.emergency_contacts.length > 0 ? (\n                <div className=\"space-y-3\">\n                  {callSheet.emergency_contacts.map((contact, index) => (\n                    <Card key={contact.id} className=\"p-4\">\n                      <div className=\"flex items-start justify-between\">\n                        <div className=\"flex-1\">\n                          <div className=\"flex items-center space-x-2 mb-2\">\n                            <Badge variant=\"outline\">#{index + 1}</Badge>\n                            <h4 className=\"font-medium\">{contact.name}</h4>\n                            <Badge variant=\"secondary\" className=\"text-xs\">\n                              {contact.role}\n                            </Badge>\n                          </div>\n                          \n                          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 text-sm\">\n                            <div className=\"flex items-center space-x-2\">\n                              <Phone className=\"h-4 w-4 text-muted-foreground\" />\n                              <span className=\"font-medium\">{contact.phone}</span>\n                            </div>\n                            \n                            {contact.email && (\n                              <div className=\"flex items-center space-x-2\">\n                                <Mail className=\"h-4 w-4 text-muted-foreground\" />\n                                <span className=\"font-medium\">{contact.email}</span>\n                              </div>\n                            )}\n                          </div>\n                        </div>\n                        \n                        <div className=\"flex items-center space-x-2 ml-4\">\n                          <Button variant=\"outline\" size=\"sm\" asChild>\n                            <a href={`tel:${contact.phone}`}>\n                              <Phone className=\"h-4 w-4\" />\n                            </a>\n                          </Button>\n                          \n                          {contact.email && (\n                            <Button variant=\"outline\" size=\"sm\" asChild>\n                              <a href={`mailto:${contact.email}`}>\n                                <Mail className=\"h-4 w-4\" />\n                              </a>\n                            </Button>\n                          )}\n                        </div>\n                      </div>\n                    </Card>\n                  ))}\n                </div>\n              ) : (\n                <div className=\"text-center py-8 text-muted-foreground\">\n                  <Phone className=\"h-12 w-12 mx-auto mb-4\" />\n                  <p>No emergency contacts added</p>\n                </div>\n              )}\n            </div>\n          )}\n        </div>\n\n        <DrawerFooter>\n          <div className=\"flex justify-end\">\n            <Button variant=\"outline\" onClick={() => onOpenChange(false)}>\n              Close\n            </Button>\n          </div>\n        </DrawerFooter>\n      </DrawerContent>\n    </Drawer>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ghxstship/apps/web/app/(app)/(shell)/files/call-sheets/views/CallSheetsBoardView.tsx","messages":[{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Calendar' is not defined.","line":62,"column":32,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":62,"endColumn":40},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Clock' is not defined.","line":66,"column":32,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":66,"endColumn":37},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'MapPin' is not defined.","line":71,"column":34,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":71,"endColumn":40},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Eye' is not defined.","line":85,"column":30,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":85,"endColumn":33},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Pencil' is not defined.","line":88,"column":30,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":88,"endColumn":36},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Trash2' is not defined.","line":91,"column":30,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":91,"endColumn":36}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport { Badge, Button, Card } from \"@ghxstship/ui\";\nimport type { CallSheet } from \"../types\";\nimport { STATUS_BADGE, CALL_TYPE_LABEL } from \"../ProgrammingCallSheetsClient\";\n\ntype CallSheetsBoardViewProps = {\n  callSheets: CallSheet[];\n  selected: Set<string>;\n  onSelect: (id: string) => void;\n  onView: (callSheet: CallSheet) => void;\n  onEdit: (callSheet: CallSheet) => void;\n  onDelete: (callSheet: CallSheet) => void;\n};\n\nconst STATUS_COLUMNS: CallSheet[\"status\"][] = [\n  \"draft\",\n  \"published\",\n  \"distributed\",\n  \"updated\",\n  \"cancelled\",\n];\n\nexport default function CallSheetsBoardView({\n  callSheets,\n  selected,\n  onSelect,\n  onView,\n  onEdit,\n  onDelete,\n}: CallSheetsBoardViewProps) {\n  return (\n    <div className=\"flex gap-md overflow-x-auto pb-md\">\n      {STATUS_COLUMNS.map((status) => {\n        const columnCallSheets = callSheets.filter((callSheet) => callSheet.status === status);\n        const statusConfig = STATUS_BADGE[status];\n\n        return (\n          <section key={status} className=\"flex w-80 flex-shrink-0 flex-col gap-sm\">\n            <header className=\"flex items-center justify-between\">\n              <h3 className=\"text-sm font-semibold text-muted-foreground\">{statusConfig.label}</h3>\n              <Badge variant={statusConfig.variant} className=\"text-xs\">\n                {columnCallSheets.length}\n              </Badge>\n            </header>\n\n            <div className=\"space-y-sm\">\n              {columnCallSheets.length === 0 ? (\n                <Card className=\"p-md text-center text-xs text-muted-foreground\">No call sheets</Card>\n              ) : (\n                columnCallSheets.map((callSheet) => {\n                  const isSelected = selected.has(callSheet.id);\n\n                  return (\n                    <Card key={callSheet.id} className={`space-y-sm p-sm ${isSelected ? \"ring-2 ring-primary\" : \"\"}`}>\n                      <div className=\"flex items-start justify-between gap-sm\">\n                        <div className=\"space-y-xs\">\n                          <div className=\"text-sm font-medium leading-tight\">{callSheet.name}</div>\n                          <div className=\"text-xs text-muted-foreground\">{CALL_TYPE_LABEL[callSheet.call_type]}</div>\n                          <div className=\"flex flex-col gap-1 text-xs text-muted-foreground\">\n                            <span className=\"flex items-center gap-1\">\n                              <Calendar className=\"h-3 w-3\" />\n                              {callSheet.event_date}\n                            </span>\n                            <span className=\"flex items-center gap-1\">\n                              <Clock className=\"h-3 w-3\" />\n                              {callSheet.call_time}\n                            </span>\n                            {callSheet.location ? (\n                              <span className=\"flex items-center gap-1\">\n                                <MapPin className=\"h-3 w-3\" />\n                                {callSheet.location}\n                              </span>\n                            ) : null}\n                          </div>\n                          {callSheet.project ? (\n                            <div className=\"text-xs text-muted-foreground\">Project: {callSheet.project.name}</div>\n                          ) : null}\n                          {callSheet.event ? (\n                            <div className=\"text-xs text-muted-foreground\">Event: {callSheet.event.title}</div>\n                          ) : null}\n                        </div>\n                        <div className=\"flex items-center gap-1\">\n                          <Button size=\"icon\" variant=\"ghost\" onClick={() => onView(callSheet)}>\n                            <Eye className=\"h-4 w-4\" />\n                          </Button>\n                          <Button size=\"icon\" variant=\"ghost\" onClick={() => onEdit(callSheet)}>\n                            <Pencil className=\"h-4 w-4\" />\n                          </Button>\n                          <Button size=\"icon\" variant=\"ghost\" onClick={() => onDelete(callSheet)}>\n                            <Trash2 className=\"h-4 w-4 text-destructive\" />\n                          </Button>\n                        </div>\n                      </div>\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        className=\"w-full\"\n                        onClick={() => onSelect(callSheet.id)}\n                      >\n                        {isSelected ? \"Selected\" : \"Select\"}\n                      </Button>\n                    </Card>\n                  );\n                })\n              )}\n            </div>\n          </section>\n        );\n      })}\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ghxstship/apps/web/app/(app)/(shell)/files/call-sheets/views/CallSheetsGridView.tsx","messages":[{"ruleId":"react/jsx-no-undef","severity":2,"message":"'MapPin' is not defined.","line":90,"column":20,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":90,"endColumn":26},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Users' is not defined.","line":99,"column":18,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":99,"endColumn":23},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Eye' is not defined.","line":145,"column":20,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":145,"endColumn":23},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Pencil' is not defined.","line":154,"column":20,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":154,"endColumn":26},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Share2' is not defined.","line":166,"column":22,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":166,"endColumn":28}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\nimport { User, FileText, Settings, Award, Calendar, TrendingUp, Activity, Clock, Plus, Search, Play, Trash2 } from \"lucide-react\";\nimport { Badge, Button, Card } from '@ghxstship/ui';\nimport { format } from 'date-fns';\nimport type { CallSheet } from '../lib/callSheetsService';\n\ninterface CallSheetsGridViewProps {\n  callSheets: CallSheet[];\n  selected: Set<string>;\n  onSelect: (id: string) => void;\n  onView: (callSheet: CallSheet) => void;\n  onEdit: (callSheet: CallSheet) => void;\n  onDelete: (callSheet: CallSheet) => void;\n  onDistribute?: (callSheet: CallSheet) => void;\n}\n\nconst STATUS_VARIANTS: Record<CallSheet['status'], 'secondary' | 'info' | 'warning' | 'success' | 'destructive'> = {\n  draft: 'secondary',\n  published: 'info',\n  distributed: 'warning',\n  completed: 'success',\n  cancelled: 'destructive',\n};\n\nexport default function CallSheetsGridView({\n  callSheets,\n  selected,\n  onSelect,\n  onView,\n  onEdit,\n  onDelete,\n  onDistribute,\n}: CallSheetsGridViewProps) {\n  if (callSheets.length === 0) {\n    return (\n      <div className=\"flex flex-col items-center justify-center py-12 text-center\">\n        <Calendar className=\"h-12 w-12 text-muted-foreground mb-4\" />\n        <h3 className=\"text-lg font-semibold mb-2\">No call sheets found</h3>\n        <p className=\"text-muted-foreground\">Create your first call sheet to get started.</p>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4\">\n      {callSheets.map((callSheet) => (\n        <Card key={callSheet.id} className=\"p-4 hover:shadow-lg transition-all duration-200 group\">\n          <div className=\"space-y-3\">\n            {/* Header */}\n            <div className=\"flex items-start justify-between\">\n              <input\n                type=\"checkbox\"\n                checked={selected.has(callSheet.id)}\n                onChange={() => onSelect(callSheet.id)}\n                className=\"mt-1\"\n              />\n              <Badge variant={STATUS_VARIANTS[callSheet.status]} className=\"text-xs\">\n                {callSheet.status.replace('_', ' ')}\n              </Badge>\n            </div>\n            \n            {/* Title */}\n            <div>\n              <h3 className=\"font-semibold text-base line-clamp-2 mb-1\">\n                {callSheet.title}\n              </h3>\n              {callSheet.description && (\n                <p className=\"text-muted-foreground text-xs line-clamp-2\">\n                  {callSheet.description}\n                </p>\n              )}\n            </div>\n            \n            {/* Date and Time */}\n            <div className=\"space-y-2\">\n              <div className=\"flex items-center text-sm text-muted-foreground\">\n                <Calendar className=\"h-3 w-3 mr-2\" />\n                <span>{format(new Date(callSheet.call_date), 'MMM dd, yyyy')}</span>\n              </div>\n              \n              {callSheet.call_time && (\n                <div className=\"flex items-center text-sm text-muted-foreground\">\n                  <Clock className=\"h-3 w-3 mr-2\" />\n                  <span>{callSheet.call_time}</span>\n                </div>\n              )}\n              \n              {callSheet.location && (\n                <div className=\"flex items-center text-sm text-muted-foreground\">\n                  <MapPin className=\"h-3 w-3 mr-2\" />\n                  <span className=\"truncate\">{callSheet.location}</span>\n                </div>\n              )}\n            </div>\n            \n            {/* People Count */}\n            <div className=\"flex items-center justify-between text-sm\">\n              <div className=\"flex items-center text-muted-foreground\">\n                <Users className=\"h-3 w-3 mr-2\" />\n                <span>\n                  {(callSheet.crew_calls?.length || 0) + (callSheet.talent_calls?.length || 0)} people\n                </span>\n              </div>\n              \n              {callSheet.weather && (\n                <span className=\"text-xs bg-muted px-2 py-1 rounded\">\n                  {callSheet.weather}\n                </span>\n              )}\n            </div>\n            \n            {/* Crew and Talent Breakdown */}\n            {(callSheet.crew_calls?.length > 0 || callSheet.talent_calls?.length > 0) && (\n              <div className=\"flex flex-wrap gap-1\">\n                {callSheet.crew_calls?.length > 0 && (\n                  <Badge variant=\"outline\" className=\"text-xs px-2 py-0\">\n                    {callSheet.crew_calls.length} crew\n                  </Badge>\n                )}\n                {callSheet.talent_calls?.length > 0 && (\n                  <Badge variant=\"outline\" className=\"text-xs px-2 py-0\">\n                    {callSheet.talent_calls.length} talent\n                  </Badge>\n                )}\n              </div>\n            )}\n            \n            {/* Special Instructions */}\n            {callSheet.special_instructions && (\n              <div className=\"p-2 bg-muted rounded text-xs\">\n                <div className=\"font-medium mb-1\">Special Instructions:</div>\n                <div className=\"line-clamp-2\">{callSheet.special_instructions}</div>\n              </div>\n            )}\n            \n            {/* Actions */}\n            <div className=\"flex items-center justify-between pt-2 border-t opacity-0 group-hover:opacity-100 transition-opacity\">\n              <div className=\"flex items-center space-x-1\">\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={() => onView(callSheet)}\n                  title=\"View call sheet\"\n                >\n                  <Eye className=\"h-3 w-3\" />\n                </Button>\n                \n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={() => onEdit(callSheet)}\n                  title=\"Edit call sheet\"\n                >\n                  <Pencil className=\"h-3 w-3\" />\n                </Button>\n              </div>\n              \n              <div className=\"flex items-center space-x-1\">\n                {callSheet.status === 'published' && onDistribute && (\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={() => onDistribute(callSheet)}\n                    title=\"Distribute call sheet\"\n                  >\n                    <Share2 className=\"h-3 w-3\" />\n                  </Button>\n                )}\n                \n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={() => onDelete(callSheet)}\n                  title=\"Delete call sheet\"\n                  className=\"text-destructive hover:text-destructive\"\n                >\n                  <Trash2 className=\"h-3 w-3\" />\n                </Button>\n              </div>\n            </div>\n          </div>\n        </Card>\n      ))}\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ghxstship/apps/web/app/(app)/(shell)/files/call-sheets/views/CallSheetsListView.tsx","messages":[{"ruleId":"react/jsx-no-undef","severity":2,"message":"'MapPin' is not defined.","line":86,"column":24,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":86,"endColumn":30},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Users' is not defined.","line":92,"column":22,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":92,"endColumn":27},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Eye' is not defined.","line":129,"column":18,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":129,"endColumn":21},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Pencil' is not defined.","line":138,"column":18,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":138,"endColumn":24},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Share2' is not defined.","line":148,"column":20,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":148,"endColumn":26}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\nimport { User, FileText, Settings, Award, Calendar, TrendingUp, Activity, Clock, Plus, Search, Play, Trash2 } from \"lucide-react\";\nimport { Badge, Button, Card } from '@ghxstship/ui';\nimport { format } from 'date-fns';\nimport type { CallSheet } from '../lib/callSheetsService';\n\ninterface CallSheetsListViewProps {\n  callSheets: CallSheet[];\n  selected: Set<string>;\n  onSelect: (id: string) => void;\n  onView: (callSheet: CallSheet) => void;\n  onEdit: (callSheet: CallSheet) => void;\n  onDelete: (callSheet: CallSheet) => void;\n  onDistribute?: (callSheet: CallSheet) => void;\n}\n\nconst STATUS_VARIANTS: Record<CallSheet['status'], 'secondary' | 'info' | 'warning' | 'success' | 'destructive'> = {\n  draft: 'secondary',\n  published: 'info',\n  distributed: 'warning',\n  completed: 'success',\n  cancelled: 'destructive',\n};\n\nexport default function CallSheetsListView({\n  callSheets,\n  selected,\n  onSelect,\n  onView,\n  onEdit,\n  onDelete,\n  onDistribute,\n}: CallSheetsListViewProps) {\n  if (callSheets.length === 0) {\n    return (\n      <div className=\"flex flex-col items-center justify-center py-12 text-center\">\n        <Calendar className=\"h-12 w-12 text-muted-foreground mb-4\" />\n        <h3 className=\"text-lg font-semibold mb-2\">No call sheets found</h3>\n        <p className=\"text-muted-foreground\">Create your first call sheet to get started.</p>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-3\">\n      {callSheets.map((callSheet) => (\n        <Card key={callSheet.id} className=\"p-4 hover:shadow-md transition-shadow\">\n          <div className=\"flex items-start justify-between\">\n            <div className=\"flex items-start space-x-3 flex-1\">\n              <input\n                type=\"checkbox\"\n                checked={selected.has(callSheet.id)}\n                onChange={() => onSelect(callSheet.id)}\n                className=\"mt-1\"\n              />\n              \n              <div className=\"flex-1 min-w-0\">\n                <div className=\"flex items-center space-x-2 mb-2\">\n                  <h3 className=\"font-semibold text-lg truncate\">{callSheet.title}</h3>\n                  <Badge variant={STATUS_VARIANTS[callSheet.status]}>\n                    {callSheet.status.replace('_', ' ')}\n                  </Badge>\n                </div>\n                \n                {callSheet.description && (\n                  <p className=\"text-muted-foreground text-sm mb-3 line-clamp-2\">\n                    {callSheet.description}\n                  </p>\n                )}\n                \n                <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-3 text-sm\">\n                  <div className=\"flex items-center text-muted-foreground\">\n                    <Calendar className=\"h-4 w-4 mr-2\" />\n                    <span>{format(new Date(callSheet.call_date), 'MMM dd, yyyy')}</span>\n                  </div>\n                  \n                  {callSheet.call_time && (\n                    <div className=\"flex items-center text-muted-foreground\">\n                      <Clock className=\"h-4 w-4 mr-2\" />\n                      <span>{callSheet.call_time}</span>\n                    </div>\n                  )}\n                  \n                  {callSheet.location && (\n                    <div className=\"flex items-center text-muted-foreground\">\n                      <MapPin className=\"h-4 w-4 mr-2\" />\n                      <span className=\"truncate\">{callSheet.location}</span>\n                    </div>\n                  )}\n                  \n                  <div className=\"flex items-center text-muted-foreground\">\n                    <Users className=\"h-4 w-4 mr-2\" />\n                    <span>\n                      {(callSheet.crew_calls?.length || 0) + (callSheet.talent_calls?.length || 0)} people\n                    </span>\n                  </div>\n                </div>\n                \n                {(callSheet.crew_calls?.length > 0 || callSheet.talent_calls?.length > 0) && (\n                  <div className=\"mt-3 flex flex-wrap gap-2\">\n                    {callSheet.crew_calls?.length > 0 && (\n                      <Badge variant=\"outline\" className=\"text-xs\">\n                        {callSheet.crew_calls.length} crew\n                      </Badge>\n                    )}\n                    {callSheet.talent_calls?.length > 0 && (\n                      <Badge variant=\"outline\" className=\"text-xs\">\n                        {callSheet.talent_calls.length} talent\n                      </Badge>\n                    )}\n                  </div>\n                )}\n                \n                {callSheet.special_instructions && (\n                  <div className=\"mt-2 p-2 bg-muted rounded text-xs\">\n                    <strong>Special Instructions:</strong> {callSheet.special_instructions}\n                  </div>\n                )}\n              </div>\n            </div>\n            \n            <div className=\"flex items-center space-x-1 ml-4\">\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={() => onView(callSheet)}\n                title=\"View call sheet\"\n              >\n                <Eye className=\"h-4 w-4\" />\n              </Button>\n              \n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={() => onEdit(callSheet)}\n                title=\"Edit call sheet\"\n              >\n                <Pencil className=\"h-4 w-4\" />\n              </Button>\n              \n              {callSheet.status === 'published' && onDistribute && (\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={() => onDistribute(callSheet)}\n                  title=\"Distribute call sheet\"\n                >\n                  <Share2 className=\"h-4 w-4\" />\n                </Button>\n              )}\n              \n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={() => onDelete(callSheet)}\n                title=\"Delete call sheet\"\n                className=\"text-destructive hover:text-destructive\"\n              >\n                <Trash2 className=\"h-4 w-4\" />\n              </Button>\n            </div>\n          </div>\n        </Card>\n      ))}\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ghxstship/apps/web/app/(app)/(shell)/files/call-sheets/views/CallSheetsTimelineView.tsx","messages":[{"ruleId":"react/jsx-no-undef","severity":2,"message":"'MapPin' is not defined.","line":133,"column":36,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":133,"endColumn":42},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Users' is not defined.","line":139,"column":34,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":139,"endColumn":39},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Eye' is not defined.","line":208,"column":30,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":208,"endColumn":33},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Pencil' is not defined.","line":217,"column":30,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":217,"endColumn":36},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Share2' is not defined.","line":227,"column":32,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":227,"endColumn":38}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\nimport { User, FileText, Settings, Award, Calendar, TrendingUp, Activity, Clock, Plus, Search, Play, Trash2 } from \"lucide-react\";\nimport { Badge, Button, Card } from '@ghxstship/ui';\nimport { format, isSameDay, parseISO } from 'date-fns';\nimport type { CallSheet } from '../lib/callSheetsService';\n\ninterface CallSheetsTimelineViewProps {\n  callSheets: CallSheet[];\n  selected: Set<string>;\n  onSelect: (id: string) => void;\n  onView: (callSheet: CallSheet) => void;\n  onEdit: (callSheet: CallSheet) => void;\n  onDelete: (callSheet: CallSheet) => void;\n  onDistribute?: (callSheet: CallSheet) => void;\n}\n\nconst STATUS_VARIANTS: Record<CallSheet['status'], 'secondary' | 'info' | 'warning' | 'success' | 'destructive'> = {\n  draft: 'secondary',\n  published: 'info',\n  distributed: 'warning',\n  completed: 'success',\n  cancelled: 'destructive',\n};\n\nexport default function CallSheetsTimelineView({\n  callSheets,\n  selected,\n  onSelect,\n  onView,\n  onEdit,\n  onDelete,\n  onDistribute,\n}: CallSheetsTimelineViewProps) {\n  if (callSheets.length === 0) {\n    return (\n      <div className=\"flex flex-col items-center justify-center py-12 text-center\">\n        <Calendar className=\"h-12 w-12 text-muted-foreground mb-4\" />\n        <h3 className=\"text-lg font-semibold mb-2\">No call sheets found</h3>\n        <p className=\"text-muted-foreground\">Create your first call sheet to get started.</p>\n      </div>\n    );\n  }\n\n  // Group call sheets by date\n  const groupedCallSheets = callSheets.reduce((groups, callSheet) => {\n    const date = format(new Date(callSheet.call_date), 'yyyy-MM-dd');\n    if (!groups[date]) {\n      groups[date] = [];\n    }\n    groups[date].push(callSheet);\n    return groups;\n  }, {} as Record<string, CallSheet[]>);\n\n  // Sort dates\n  const sortedDates = Object.keys(groupedCallSheets).sort();\n\n  return (\n    <div className=\"space-y-8\">\n      {sortedDates.map((date) => {\n        const callSheetsForDate = groupedCallSheets[date];\n        const dateObj = parseISO(date);\n        const isToday = isSameDay(dateObj, new Date());\n        \n        return (\n          <div key={date} className=\"relative\">\n            {/* Date Header */}\n            <div className=\"sticky top-0 z-10 bg-background/80 backdrop-blur-sm border-b pb-2 mb-4\">\n              <div className=\"flex items-center space-x-3\">\n                <div className={`w-3 h-3 rounded-full ${isToday ? 'bg-primary' : 'bg-muted-foreground'}`} />\n                <h2 className={`text-lg font-semibold ${isToday ? 'text-primary' : 'text-foreground'}`}>\n                  {format(dateObj, 'EEEE, MMMM dd, yyyy')}\n                  {isToday && <span className=\"ml-2 text-sm text-primary\">(Today)</span>}\n                </h2>\n                <Badge variant=\"outline\" className=\"text-xs\">\n                  {callSheetsForDate.length} call sheet{callSheetsForDate.length !== 1 ? 's' : ''}\n                </Badge>\n              </div>\n            </div>\n            \n            {/* Timeline Items */}\n            <div className=\"space-y-4 ml-6 border-l-2 border-muted pl-6\">\n              {callSheetsForDate\n                .sort((a, b) => {\n                  // Sort by call time if available, otherwise by creation time\n                  const timeA = a.call_time || '00:00';\n                  const timeB = b.call_time || '00:00';\n                  return timeA.localeCompare(timeB);\n                })\n                .map((callSheet, index) => (\n                  <div key={callSheet.id} className=\"relative\">\n                    {/* Timeline Dot */}\n                    <div className={`absolute -left-8 w-4 h-4 rounded-full border-2 border-background ${\n                      STATUS_VARIANTS[callSheet.status] === 'success' ? 'bg-success' :\n                      STATUS_VARIANTS[callSheet.status] === 'warning' ? 'bg-warning' :\n                      STATUS_VARIANTS[callSheet.status] === 'destructive' ? 'bg-destructive' :\n                      STATUS_VARIANTS[callSheet.status] === 'info' ? 'bg-info' : 'bg-muted-foreground'\n                    }`} />\n                    \n                    <Card className=\"p-4 hover:shadow-md transition-shadow\">\n                      <div className=\"flex items-start justify-between\">\n                        <div className=\"flex items-start space-x-3 flex-1\">\n                          <input\n                            type=\"checkbox\"\n                            checked={selected.has(callSheet.id)}\n                            onChange={() => onSelect(callSheet.id)}\n                            className=\"mt-1\"\n                          />\n                          \n                          <div className=\"flex-1 min-w-0\">\n                            <div className=\"flex items-center space-x-2 mb-2\">\n                              <h3 className=\"font-semibold text-base\">{callSheet.title}</h3>\n                              <Badge variant={STATUS_VARIANTS[callSheet.status]} className=\"text-xs\">\n                                {callSheet.status.replace('_', ' ')}\n                              </Badge>\n                            </div>\n                            \n                            {callSheet.description && (\n                              <p className=\"text-muted-foreground text-sm mb-3 line-clamp-2\">\n                                {callSheet.description}\n                              </p>\n                            )}\n                            \n                            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-3 text-sm mb-3\">\n                              {callSheet.call_time && (\n                                <div className=\"flex items-center text-muted-foreground\">\n                                  <Clock className=\"h-4 w-4 mr-2\" />\n                                  <span className=\"font-medium\">{callSheet.call_time}</span>\n                                </div>\n                              )}\n                              \n                              {callSheet.location && (\n                                <div className=\"flex items-center text-muted-foreground\">\n                                  <MapPin className=\"h-4 w-4 mr-2\" />\n                                  <span className=\"truncate\">{callSheet.location}</span>\n                                </div>\n                              )}\n                              \n                              <div className=\"flex items-center text-muted-foreground\">\n                                <Users className=\"h-4 w-4 mr-2\" />\n                                <span>\n                                  {(callSheet.crew_calls?.length || 0) + (callSheet.talent_calls?.length || 0)} people\n                                </span>\n                              </div>\n                            </div>\n                            \n                            {/* Crew and Talent Details */}\n                            {(callSheet.crew_calls?.length > 0 || callSheet.talent_calls?.length > 0) && (\n                              <div className=\"space-y-2 mb-3\">\n                                {callSheet.crew_calls?.length > 0 && (\n                                  <div className=\"text-xs\">\n                                    <span className=\"font-medium text-muted-foreground\">Crew ({callSheet.crew_calls.length}):</span>\n                                    <div className=\"flex flex-wrap gap-1 mt-1\">\n                                      {callSheet.crew_calls.slice(0, 3).map((crew, idx) => (\n                                        <Badge key={idx} variant=\"outline\" className=\"text-xs\">\n                                          {crew.role} - {crew.call_time}\n                                        </Badge>\n                                      ))}\n                                      {callSheet.crew_calls.length > 3 && (\n                                        <Badge variant=\"outline\" className=\"text-xs\">\n                                          +{callSheet.crew_calls.length - 3} more\n                                        </Badge>\n                                      )}\n                                    </div>\n                                  </div>\n                                )}\n                                \n                                {callSheet.talent_calls?.length > 0 && (\n                                  <div className=\"text-xs\">\n                                    <span className=\"font-medium text-muted-foreground\">Talent ({callSheet.talent_calls.length}):</span>\n                                    <div className=\"flex flex-wrap gap-1 mt-1\">\n                                      {callSheet.talent_calls.slice(0, 3).map((talent, idx) => (\n                                        <Badge key={idx} variant=\"outline\" className=\"text-xs\">\n                                          {talent.talent_name} - {talent.call_time}\n                                        </Badge>\n                                      ))}\n                                      {callSheet.talent_calls.length > 3 && (\n                                        <Badge variant=\"outline\" className=\"text-xs\">\n                                          +{callSheet.talent_calls.length - 3} more\n                                        </Badge>\n                                      )}\n                                    </div>\n                                  </div>\n                                )}\n                              </div>\n                            )}\n                            \n                            {callSheet.special_instructions && (\n                              <div className=\"p-2 bg-muted rounded text-xs mb-3\">\n                                <strong>Special Instructions:</strong> {callSheet.special_instructions}\n                              </div>\n                            )}\n                            \n                            {callSheet.weather && (\n                              <div className=\"text-xs text-muted-foreground\">\n                                <strong>Weather:</strong> {callSheet.weather}\n                              </div>\n                            )}\n                          </div>\n                        </div>\n                        \n                        <div className=\"flex items-center space-x-1 ml-4\">\n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            onClick={() => onView(callSheet)}\n                            title=\"View call sheet\"\n                          >\n                            <Eye className=\"h-4 w-4\" />\n                          </Button>\n                          \n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            onClick={() => onEdit(callSheet)}\n                            title=\"Edit call sheet\"\n                          >\n                            <Pencil className=\"h-4 w-4\" />\n                          </Button>\n                          \n                          {callSheet.status === 'published' && onDistribute && (\n                            <Button\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              onClick={() => onDistribute(callSheet)}\n                              title=\"Distribute call sheet\"\n                            >\n                              <Share2 className=\"h-4 w-4\" />\n                            </Button>\n                          )}\n                          \n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            onClick={() => onDelete(callSheet)}\n                            title=\"Delete call sheet\"\n                            className=\"text-destructive hover:text-destructive\"\n                          >\n                            <Trash2 className=\"h-4 w-4\" />\n                          </Button>\n                        </div>\n                      </div>\n                    </Card>\n                  </div>\n                ))}\n            </div>\n          </div>\n        );\n      })}\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ghxstship/apps/web/app/(app)/(shell)/files/drawers/CreateResourceClient.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"The 'resourcesService' object construction makes the dependencies of useCallback Hook (at line 156) change on every render. Move it inside the useCallback callback. Alternatively, wrap the initialization of 'resourcesService' in its own useMemo() Hook.","line":41,"column":9,"nodeType":"VariableDeclarator","endLine":41,"endColumn":50}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { Upload, X } from \"lucide-react\";\nimport { useCallback, useEffect, useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\n// import { z } from 'zod';\nimport { Button, Input, Textarea, Select, Checkbox, Badge } from '@ghxstship/ui';\nimport { ResourcesService } from '../lib/resources-service';\nimport { RESOURCE_TYPE_OPTIONS, RESOURCE_STATUS_OPTIONS, RESOURCE_VISIBILITY_OPTIONS, RESOURCE_LANGUAGE_OPTIONS, RESOURCE_CATEGORY_OPTIONS } from '../lib/field-config';\nimport type { Resource, CreateResourceData, UpdateResourceData } from '../types';\n\nconst resourceSchema = z.object({\n  title: z.string().min(1, 'Title is required'),\n  description: z.string().optional(),\n  content: z.string().min(1, 'Content is required'),\n  type: z.enum(['policy', 'guide', 'training', 'template', 'procedure', 'featured']),\n  category: z.string().min(1, 'Category is required'),\n  status: z.enum(['draft', 'under_review', 'published', 'archived']).default('draft'),\n  visibility: z.enum(['public', 'private', 'team', 'role_based']).default('public'),\n  version: z.string().default('1.0'),\n  language: z.string().default('en'),\n  tags: z.string().optional(),\n  is_featured: z.boolean().default(false),\n  is_pinned: z.boolean().default(false)\n});\n\ntype ResourceFormData = z.infer<typeof resourceSchema>;\n\ninterface CreateResourceClientProps {\n  resource?: Resource | null;\n  onSuccess: () => void;\n  onCancel: () => void;\n}\n\nexport default function CreateResourceClient({ resource, onSuccess, onCancel }: CreateResourceClientProps) {\n  const [file, setFile] = useState<File | null>(null);\n  const [uploading, setUploading] = useState(false);\n  const [uploadError, setUploadError] = useState<string | null>(null);\n\n  const resourcesService = new ResourcesService();\n\n  const {\n    register,\n    handleSubmit,\n    formState: { errors, isSubmitting },\n    reset,\n    setValue,\n    watch\n  } = useForm<ResourceFormData>({\n    resolver: zodResolver(resourceSchema),\n    defaultValues: {\n      title: '',\n      description: '',\n      content: '',\n      type: 'policy',\n      category: '',\n      status: 'draft',\n      visibility: 'public',\n      version: '1.0',\n      language: 'en',\n      tags: '',\n      is_featured: false,\n      is_pinned: false\n    }\n  });\n\n  // Populate form when editing\n  useEffect(() => {\n    if (resource) {\n      reset({\n        title: resource.title,\n        description: resource.description || '',\n        content: resource.content,\n        type: resource.type,\n        category: resource.category,\n        status: resource.status,\n        visibility: resource.visibility,\n        version: resource.version,\n        language: resource.language,\n        tags: resource.tags.join(', '),\n        is_featured: resource.is_featured,\n        is_pinned: resource.is_pinned\n      });\n    }\n  }, [resource, reset]);\n\n  const handleFileChange = useCallback((event: React.ChangeEvent<HTMLInputElement>) => {\n    const selectedFile = event.target.files?.[0];\n    if (selectedFile) {\n      setFile(selectedFile);\n      setUploadError(null);\n    }\n  }, []);\n\n  const onSubmit = useCallback(async (data: ResourceFormData) => {\n    try {\n      setUploading(true);\n      setUploadError(null);\n\n      let fileUrl: string | undefined;\n      let fileSize: number | undefined;\n      let fileType: string | undefined;\n\n      // Upload file if provided\n      if (file) {\n        try {\n          const uploadResult = await resourcesService.uploadFile(file, resource?.id);\n          fileUrl = uploadResult.url;\n          fileSize = uploadResult.size;\n          fileType = uploadResult.type;\n        } catch (err) {\n          setUploadError(err instanceof Error ? err.message : 'Failed to upload file');\n          return;\n        }\n      }\n\n      // Prepare resource data\n      const resourceData = {\n        title: data.title,\n        description: data.description || undefined,\n        content: data.content,\n        type: data.type,\n        category: data.category,\n        status: data.status,\n        visibility: data.visibility,\n        version: data.version,\n        language: data.language,\n        tags: data.tags ? data.tags.split(',').map(tag => tag.trim()).filter(Boolean) : [],\n        is_featured: data.is_featured,\n        is_pinned: data.is_pinned,\n        file_url: fileUrl || resource?.file_url,\n        file_size: fileSize || resource?.file_size,\n        file_type: fileType || resource?.file_type\n      };\n\n      // Create or update resource\n      if (resource) {\n        const updateData: UpdateResourceData = {\n          id: resource.id,\n          ...resourceData\n        };\n        await resourcesService.updateResource(updateData);\n      } else {\n        const createData: CreateResourceData = resourceData;\n        await resourcesService.createResource(createData);\n      }\n\n      onSuccess();\n    } catch (err) {\n      console.error('Error saving resource:', err);\n      setUploadError(err instanceof Error ? err.message : 'Failed to save resource');\n    } finally {\n      setUploading(false);\n    }\n  }, [file, resource, resourcesService, onSuccess]);\n\n  const tagsValue = watch('tags');\n  const parsedTags = tagsValue ? tagsValue.split(',').map(tag => tag.trim()).filter(Boolean) : [];\n\n  return (\n    <div className=\"stack-lg\">\n      <form onSubmit={handleSubmit(onSubmit)} className=\"stack-lg\">\n        {/* Title */}\n        <div>\n          <label className=\"block text-body-sm form-label mb-sm\">Title *</label>\n          <Input\n            {...register('title')}\n            placeholder=\"Enter resource title\"\n            error={errors.title?.message}\n          />\n        </div>\n\n        {/* Description */}\n        <div>\n          <label className=\"block text-body-sm form-label mb-sm\">Description</label>\n          <Textarea\n            {...register('description')}\n            placeholder=\"Enter resource description\"\n            rows={3}\n          />\n        </div>\n\n        {/* Content */}\n        <div>\n          <label className=\"block text-body-sm form-label mb-sm\">Content *</label>\n          <Textarea\n            {...register('content')}\n            placeholder=\"Enter resource content\"\n            rows={6}\n            error={errors.content?.message}\n          />\n        </div>\n\n        {/* Type and Category */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-md\">\n          <div>\n            <label className=\"block text-body-sm form-label mb-sm\">Type *</label>\n            <Select {...register('type')}>\n              {RESOURCE_TYPE_OPTIONS.map(option => (\n                <option key={option.value} value={option.value}>\n                  {option.label}\n                </option>\n              ))}\n            </Select>\n          </div>\n\n          <div>\n            <label className=\"block text-body-sm form-label mb-sm\">Category *</label>\n            <Select {...register('category')} error={errors.category?.message}>\n              <option value=\"\">Select category</option>\n              {RESOURCE_CATEGORY_OPTIONS.map(option => (\n                <option key={option.value} value={option.value}>\n                  {option.label}\n                </option>\n              ))}\n            </Select>\n          </div>\n        </div>\n\n        {/* Status and Visibility */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-md\">\n          <div>\n            <label className=\"block text-body-sm form-label mb-sm\">Status</label>\n            <Select {...register('status')}>\n              {RESOURCE_STATUS_OPTIONS.map(option => (\n                <option key={option.value} value={option.value}>\n                  {option.label}\n                </option>\n              ))}\n            </Select>\n          </div>\n\n          <div>\n            <label className=\"block text-body-sm form-label mb-sm\">Visibility</label>\n            <Select {...register('visibility')}>\n              {RESOURCE_VISIBILITY_OPTIONS.map(option => (\n                <option key={option.value} value={option.value}>\n                  {option.label}\n                </option>\n              ))}\n            </Select>\n          </div>\n        </div>\n\n        {/* Version and Language */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-md\">\n          <div>\n            <label className=\"block text-body-sm form-label mb-sm\">Version</label>\n            <Input\n              {...register('version')}\n              placeholder=\"1.0\"\n            />\n          </div>\n\n          <div>\n            <label className=\"block text-body-sm form-label mb-sm\">Language</label>\n            <Select {...register('language')}>\n              {RESOURCE_LANGUAGE_OPTIONS.map(option => (\n                <option key={option.value} value={option.value}>\n                  {option.label}\n                </option>\n              ))}\n            </Select>\n          </div>\n        </div>\n\n        {/* Tags */}\n        <div>\n          <label className=\"block text-body-sm form-label mb-sm\">Tags</label>\n          <Input\n            {...register('tags')}\n            placeholder=\"Enter tags separated by commas\"\n          />\n          {parsedTags.length > 0 && (\n            <div className=\"flex flex-wrap gap-xs mt-sm\">\n              {parsedTags.map((tag, index) => (\n                <Badge key={index} variant=\"secondary\">\n                  {tag}\n                </Badge>\n              ))}\n            </div>\n          )}\n          <p className=\"text-body-sm color-muted mt-xs\">Separate multiple tags with commas</p>\n        </div>\n\n        {/* File Upload */}\n        <div>\n          <label className=\"block text-body-sm form-label mb-sm\">\n            File {!resource && '*'}\n          </label>\n          <div className=\"border-2 border-dashed border-border rounded-md p-md\">\n            <input\n              type=\"file\"\n              onChange={handleFileChange}\n              className=\"w-full\"\n              accept=\".pdf,.doc,.docx,.xls,.xlsx,.ppt,.pptx,.txt,.md\"\n            />\n            {file && (\n              <p className=\"text-body-sm color-muted mt-sm\">\n                Selected: {file.name} ({(file.size / 1024 / 1024).toFixed(2)} MB)\n              </p>\n            )}\n            {resource?.file_url && !file && (\n              <p className=\"text-body-sm color-muted mt-sm\">\n                Current file: {resource.file_url.split('/').pop()}\n              </p>\n            )}\n          </div>\n          {uploadError && <p className=\"color-destructive text-body-sm mt-xs\">{uploadError}</p>}\n        </div>\n\n        {/* Featured and Pinned */}\n        <div className=\"flex items-center gap-lg\">\n          <div className=\"flex items-center gap-sm\">\n            <Checkbox\n              id=\"is_featured\"\n              {...register('is_featured')}\n            />\n            <label htmlFor=\"is_featured\" className=\"text-body-sm form-label\">\n              Mark as featured resource\n            </label>\n          </div>\n\n          <div className=\"flex items-center gap-sm\">\n            <Checkbox\n              id=\"is_pinned\"\n              {...register('is_pinned')}\n            />\n            <label htmlFor=\"is_pinned\" className=\"text-body-sm form-label\">\n              Pin to top\n            </label>\n          </div>\n        </div>\n\n        {/* Actions */}\n        <div className=\"flex justify-end gap-sm pt-md border-t\">\n          <Button type=\"button\" variant=\"outline\" onClick={onCancel}>\n            Cancel\n          </Button>\n          <Button type=\"submit\" disabled={isSubmitting || uploading}>\n            {uploading ? (\n              <>\n                <div className=\"w-4 h-4 border-2 border-background/30 border-t-background rounded-full animate-spin mr-sm\"></div>\n                {resource ? 'Updating...' : 'Creating...'}\n              </>\n            ) : (\n              <>\n                <Upload className=\"w-4 h-4 mr-sm\" />\n                {resource ? 'Update Resource' : 'Create Resource'}\n              </>\n            )}\n          </Button>\n        </div>\n      </form>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ghxstship/apps/web/app/(app)/(shell)/files/drawers/ViewFileDrawer.tsx","messages":[{"ruleId":"@next/next/no-img-element","severity":1,"message":"Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` or a custom image loader to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","line":86,"column":15,"nodeType":"JSXOpeningElement","endLine":90,"endColumn":17}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport { Eye, Edit, Download, FileText, Calendar, User, Tag, Lock, Globe, Users, HardDrive, Clock, Activity, MessageSquare, Link, Share2 } from \"lucide-react\";\nimport {\n  Button,\n  Badge,\n  Tabs,\n  TabsList,\n  TabsTrigger,\n  TabsContent,\n} from \"@ghxstship/ui\";\nimport AppDrawer from \"@/app/_components/shared/AppDrawer\";\nimport { format, parseISO, formatDistanceToNow } from \"date-fns\";\nimport type { ProjectFile } from \"./FilesClient\";\n\ninterface ViewFileDrawerProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  file: ProjectFile;\n  onEdit?: () => void;\n  onDownload?: () => void;\n  formatFileSize: (bytes: number) => string;\n}\n\nexport default function ViewFileDrawer({\n  open,\n  onOpenChange,\n  file,\n  onEdit,\n  onDownload,\n  formatFileSize,\n}: ViewFileDrawerProps) {\n  const getAccessIcon = (level: string) => {\n    switch (level) {\n      case \"public\":\n        return Globe;\n      case \"team\":\n        return Users;\n      case \"restricted\":\n        return Lock;\n      default:\n        return Lock;\n    }\n  };\n\n  const getAccessBadgeVariant = (level: string) => {\n    switch (level) {\n      case \"public\":\n        return \"success\";\n      case \"team\":\n        return \"info\";\n      case \"restricted\":\n        return \"destructive\";\n      default:\n        return \"secondary\";\n    }\n  };\n\n  const getCategoryBadgeVariant = (category: string) => {\n    switch (category) {\n      case \"document\":\n        return \"info\";\n      case \"image\":\n        return \"success\";\n      case \"video\":\n        return \"warning\";\n      case \"audio\":\n        return \"secondary\";\n      default:\n        return \"default\";\n    }\n  };\n\n  const AccessIcon = getAccessIcon(file.access_level);\n\n  // Custom tabs for file details\n  const tabs = [\n    {\n      key: \"overview\",\n      label: \"Overview\",\n      content: (\n        <div className=\"space-y-md\">\n          {/* File Preview (for images) */}\n          {file.category === \"image\" && (\n            <div className=\"bg-muted rounded-lg p-md\">\n              <img\n                src={file.file_url}\n                alt={file.name}\n                className=\"max-w-full max-h-[400px] mx-auto object-contain rounded\"\n              />\n            </div>\n          )}\n\n          {/* File Information */}\n          <div className=\"grid grid-cols-2 gap-md\">\n            <div className=\"space-y-xs\">\n              <div className=\"flex items-center gap-xs text-sm text-muted-foreground\">\n                <FileText className=\"h-4 w-4\" />\n                <span>File Type</span>\n              </div>\n              <p className=\"font-medium\">{file.file_type}</p>\n            </div>\n\n            <div className=\"space-y-xs\">\n              <div className=\"flex items-center gap-xs text-sm text-muted-foreground\">\n                <HardDrive className=\"h-4 w-4\" />\n                <span>File Size</span>\n              </div>\n              <p className=\"font-medium\">{formatFileSize(file.file_size)}</p>\n            </div>\n\n            <div className=\"space-y-xs\">\n              <div className=\"flex items-center gap-xs text-sm text-muted-foreground\">\n                <AccessIcon className=\"h-4 w-4\" />\n                <span>Access Level</span>\n              </div>\n              <Badge variant={getAccessBadgeVariant(file.access_level)}>\n                {file.access_level}\n              </Badge>\n            </div>\n\n            <div className=\"space-y-xs\">\n              <div className=\"flex items-center gap-xs text-sm text-muted-foreground\">\n                <Tag className=\"h-4 w-4\" />\n                <span>Category</span>\n              </div>\n              <Badge variant={getCategoryBadgeVariant(file.category)}>\n                {file.category}\n              </Badge>\n            </div>\n          </div>\n\n          {/* Description */}\n          {file.description && (\n            <div className=\"space-y-xs\">\n              <div className=\"flex items-center gap-xs text-sm text-muted-foreground\">\n                <FileText className=\"h-4 w-4\" />\n                <span>Description</span>\n              </div>\n              <p className=\"text-sm\">{file.description}</p>\n            </div>\n          )}\n\n          {/* Tags */}\n          {file.tags && file.tags.length > 0 && (\n            <div className=\"space-y-xs\">\n              <div className=\"flex items-center gap-xs text-sm text-muted-foreground\">\n                <Tag className=\"h-4 w-4\" />\n                <span>Tags</span>\n              </div>\n              <div className=\"flex flex-wrap gap-xs\">\n                {file.tags.map((tag, index) => (\n                  <Badge key={index} variant=\"outline\">\n                    {tag}\n                  </Badge>\n                ))}\n              </div>\n            </div>\n          )}\n\n          {/* Project */}\n          {file.project && (\n            <div className=\"space-y-xs\">\n              <div className=\"flex items-center gap-xs text-sm text-muted-foreground\">\n                <Link className=\"h-4 w-4\" />\n                <span>Project</span>\n              </div>\n              <p className=\"font-medium\">{file.project.name}</p>\n            </div>\n          )}\n        </div>\n      ),\n    },\n    {\n      key: \"details\",\n      label: \"Details\",\n      content: (\n        <div className=\"space-y-md\">\n          {/* Version Information */}\n          <div className=\"space-y-sm\">\n            <h4 className=\"font-semibold\">Version Information</h4>\n            <div className=\"grid grid-cols-2 gap-md\">\n              <div className=\"space-y-xs\">\n                <span className=\"text-sm text-muted-foreground\">Version</span>\n                <p className=\"font-medium\">v{file.version}</p>\n              </div>\n              <div className=\"space-y-xs\">\n                <span className=\"text-sm text-muted-foreground\">Latest</span>\n                <Badge variant={file.is_latest ? \"success\" : \"secondary\"}>\n                  {file.is_latest ? \"Yes\" : \"No\"}\n                </Badge>\n              </div>\n            </div>\n          </div>\n\n          {/* Upload Information */}\n          <div className=\"space-y-sm\">\n            <h4 className=\"font-semibold\">Upload Information</h4>\n            <div className=\"space-y-sm\">\n              <div className=\"flex items-center justify-between p-sm bg-muted rounded-lg\">\n                <div className=\"flex items-center gap-sm\">\n                  <User className=\"h-4 w-4 text-muted-foreground\" />\n                  <span className=\"text-sm\">Uploaded By</span>\n                </div>\n                <span className=\"font-medium\">\n                  {file.uploaded_by_user?.full_name || file.uploaded_by_user?.email || \"Unknown\"}\n                </span>\n              </div>\n\n              <div className=\"flex items-center justify-between p-sm bg-muted rounded-lg\">\n                <div className=\"flex items-center gap-sm\">\n                  <Calendar className=\"h-4 w-4 text-muted-foreground\" />\n                  <span className=\"text-sm\">Upload Date</span>\n                </div>\n                <span className=\"font-medium\">\n                  {format(parseISO(file.created_at), \"MMM d, yyyy 'at' h:mm a\")}\n                </span>\n              </div>\n\n              <div className=\"flex items-center justify-between p-sm bg-muted rounded-lg\">\n                <div className=\"flex items-center gap-sm\">\n                  <Clock className=\"h-4 w-4 text-muted-foreground\" />\n                  <span className=\"text-sm\">Last Modified</span>\n                </div>\n                <span className=\"font-medium\">\n                  {formatDistanceToNow(parseISO(file.updated_at), { addSuffix: true })}\n                </span>\n              </div>\n            </div>\n          </div>\n\n          {/* Usage Statistics */}\n          <div className=\"space-y-sm\">\n            <h4 className=\"font-semibold\">Usage Statistics</h4>\n            <div className=\"p-sm bg-muted rounded-lg\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center gap-sm\">\n                  <Download className=\"h-4 w-4 text-muted-foreground\" />\n                  <span className=\"text-sm\">Total Downloads</span>\n                </div>\n                <span className=\"font-medium\">{file.download_count}</span>\n              </div>\n            </div>\n          </div>\n        </div>\n      ),\n    },\n    {\n      key: \"activity\",\n      label: \"Activity\",\n      content: (\n        <div className=\"text-center py-lg text-muted-foreground\">\n          <MessageSquare className=\"mx-auto h-12 w-12 mb-sm opacity-50\" />\n          <p>Activity tracking coming soon</p>\n        </div>\n      ),\n    },\n  ];\n\n  return (\n    <AppDrawer\n      open={open}\n      onClose={() => onOpenChange(false)}\n      title={file.name}\n      mode=\"view\"\n      tabs={tabs}\n      actions={[\n        {\n          key: \"download\",\n          label: \"Download\",\n          icon: <Download className=\"h-4 w-4\" />,\n          onClick: onDownload,\n        },\n        {\n          key: \"share\",\n          label: \"Share\",\n          icon: <Share2 className=\"h-4 w-4\" />,\n          onClick: async () => {\n            await navigator.clipboard.writeText(file.file_url);\n            // Toast would show \"Link copied to clipboard\"\n          },\n        },\n        {\n          key: \"edit\",\n          label: \"Edit\",\n          icon: <Edit className=\"h-4 w-4\" />,\n          onClick: onEdit,\n        },\n      ]}\n    />\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ghxstship/apps/web/app/(app)/(shell)/files/featured/FeaturedClient.tsx","messages":[{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Star' is not defined.","line":221,"column":16,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":221,"endColumn":20},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Eye' is not defined.","line":230,"column":16,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":230,"endColumn":19},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Download' is not defined.","line":239,"column":16,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":239,"endColumn":24},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Star' is not defined.","line":295,"column":20,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":295,"endColumn":24},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Star' is not defined.","line":308,"column":20,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":308,"endColumn":24}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\nimport { User, FileText, Settings, Award, Calendar, TrendingUp, Activity, Clock, Plus, Search, Play, Trash2 } from \"lucide-react\";\nimport { useCallback, useEffect, useMemo, useState } from 'react';\nimport { DataViewProvider, StateManagerProvider, UniversalDrawer, ViewSwitcher, DataActions } from '@ghxstship/ui';\nimport { Card, Badge, Button } from '@ghxstship/ui';\nimport { ResourcesService } from '../lib/resources-service';\nimport { getFieldConfigsForType } from '../lib/field-config';\nimport CreateResourceClient from '../drawers/CreateResourceClient';\nimport type { Resource, ResourceFilters, ResourceStats } from '../types';\n\nexport default function FeaturedClient() {\n  const [resources, setResources] = useState<Resource[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [selectedResources, setSelectedResources] = useState<string[]>([]);\n  const [showCreateDrawer, setShowCreateDrawer] = useState(false);\n  const [editingResource, setEditingResource] = useState<Resource | null>(null);\n  const [currentView, setCurrentView] = useState<'grid' | 'kanban' | 'calendar' | 'list'>('grid');\n\n  const resourcesService = useMemo(() => new ResourcesService(), []);\n\n  // Fetch featured resources\n  const fetchFeaturedResources = useCallback(async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      \n      const { resources: fetchedResources } = await resourcesService.getResources({\n        filters: { is_featured: true },\n        sort_by: 'view_count',\n        sort_order: 'desc'\n      });\n\n      setResources(fetchedResources);\n    } catch (err) {\n      console.error('Error fetching featured resources:', err);\n      setError(err instanceof Error ? err.message : 'Failed to load featured resources');\n    } finally {\n      setLoading(false);\n    }\n  }, [resourcesService]);\n\n  useEffect(() => {\n    fetchFeaturedResources();\n  }, [fetchFeaturedResources]);\n\n  // Handle resource creation\n  const handleCreate = useCallback(() => {\n    setEditingResource(null);\n    setShowCreateDrawer(true);\n  }, []);\n\n  // Handle resource editing\n  const handleEdit = useCallback((resource: Resource) => {\n    setEditingResource(resource);\n    setShowCreateDrawer(true);\n  }, []);\n\n  // Handle resource deletion\n  const handleDelete = useCallback(async (resourceIds: string[]) => {\n    try {\n      if (resourceIds.length === 1) {\n        await resourcesService.deleteResource(resourceIds[0]);\n      } else {\n        await resourcesService.deleteResources(resourceIds);\n      }\n      await fetchFeaturedResources();\n      setSelectedResources([]);\n    } catch (err) {\n      console.error('Error deleting resources:', err);\n    }\n  }, [resourcesService, fetchFeaturedResources]);\n\n  // Handle resource download\n  const handleDownload = useCallback(async (resource: Resource) => {\n    if (!resource.file_url) return;\n    \n    try {\n      await resourcesService.incrementDownloadCount(resource.id);\n      window.open(resource.file_url, '_blank');\n      await fetchFeaturedResources();\n    } catch (err) {\n      console.error('Error downloading resource:', err);\n    }\n  }, [resourcesService, fetchFeaturedResources]);\n\n  // Handle resource view\n  const handleView = useCallback(async (resource: Resource) => {\n    try {\n      await resourcesService.incrementViewCount(resource.id);\n      await fetchFeaturedResources();\n    } catch (err) {\n      console.error('Error updating view count:', err);\n    }\n  }, [resourcesService, fetchFeaturedResources]);\n\n  // Handle toggle featured status\n  const handleToggleFeatured = useCallback(async (resource: Resource) => {\n    try {\n      await resourcesService.updateResource({\n        id: resource.id,\n        is_featured: !resource.is_featured\n      });\n      await fetchFeaturedResources();\n    } catch (err) {\n      console.error('Error toggling featured status:', err);\n    }\n  }, [resourcesService, fetchFeaturedResources]);\n\n  // Handle drawer close\n  const handleDrawerClose = useCallback(() => {\n    setShowCreateDrawer(false);\n    setEditingResource(null);\n  }, []);\n\n  // Handle successful resource save\n  const handleResourceSave = useCallback(async () => {\n    await fetchFeaturedResources();\n    handleDrawerClose();\n  }, [fetchFeaturedResources, handleDrawerClose]);\n\n  // Data view configuration\n  const dataViewConfig = useMemo(() => ({\n    fields: getFieldConfigsForType('featured'),\n    data: resources,\n    loading,\n    error,\n    selectedItems: selectedResources,\n    onSelectionChange: setSelectedResources,\n    onItemClick: handleView,\n    onItemEdit: handleEdit,\n    onItemDelete: (ids: string[]) => handleDelete(ids),\n    currentView,\n    onViewChange: setCurrentView,\n    actions: [\n      {\n        id: 'toggle-featured',\n        label: 'Remove from Featured',\n        icon: Star,\n        onClick: handleToggleFeatured\n      },\n      {\n        id: 'download',\n        label: 'Download',\n        icon: Download,\n        onClick: (resource: Resource) => handleDownload(resource),\n        show: (resource: Resource) => !!resource.file_url\n      },\n      {\n        id: 'edit',\n        label: 'Edit',\n        icon: Edit,\n        onClick: handleEdit\n      }\n    ],\n    bulkActions: [\n      {\n        id: 'remove-featured',\n        label: 'Remove from Featured',\n        onClick: async (resourceIds: string[]) => {\n          for (const id of resourceIds) {\n            const resource = resources.find(r => r.id === id);\n            if (resource) {\n              await resourcesService.updateResource({\n                id: resource.id,\n                is_featured: false\n              });\n            }\n          }\n          await fetchFeaturedResources();\n          setSelectedResources([]);\n        }\n      },\n      {\n        id: 'delete',\n        label: 'Delete Selected',\n        onClick: handleDelete,\n        variant: 'destructive' as const\n      }\n    ]\n  }), [\n    resources, loading, error, selectedResources, currentView,\n    handleView, handleEdit, handleDelete, handleDownload, handleToggleFeatured, resourcesService, fetchFeaturedResources\n  ]);\n\n  // Calculate stats\n  const stats = useMemo(() => {\n    const totalViews = resources.reduce((sum, r) => sum + r.view_count, 0);\n    const totalDownloads = resources.reduce((sum, r) => sum + r.download_count, 0);\n    const avgViews = resources.length > 0 ? Math.round(totalViews / resources.length) : 0;\n    const mostPopular = resources.reduce((max, r) => r.view_count > max.view_count ? r : max, resources[0]);\n\n    return {\n      totalFeatured: resources.length,\n      totalViews,\n      totalDownloads,\n      avgViews,\n      mostPopular\n    };\n  }, [resources]);\n\n  return (\n    <StateManagerProvider>\n      <div className=\"stack-lg\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-heading-3\">Featured Resources</h1>\n            <p className=\"color-muted\">Showcase your most important organizational resources</p>\n          </div>\n          <Button onClick={handleCreate}>\n            <Plus className=\"w-4 h-4 mr-sm\" />\n            Add Featured Resource\n          </Button>\n        </div>\n\n        {/* Stats Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-md\">\n          <Card>\n            <div className=\"flex items-center gap-sm\">\n              <Star className=\"w-5 h-5 color-warning\" />\n              <div>\n                <div className=\"text-heading-3 color-accent\">{stats.totalFeatured}</div>\n                <div className=\"text-body-sm color-muted\">Featured Resources</div>\n              </div>\n            </div>\n          </Card>\n          <Card>\n            <div className=\"flex items-center gap-sm\">\n              <Eye className=\"w-5 h-5 color-secondary\" />\n              <div>\n                <div className=\"text-heading-3 color-secondary\">{stats.totalViews}</div>\n                <div className=\"text-body-sm color-muted\">Total Views</div>\n              </div>\n            </div>\n          </Card>\n          <Card>\n            <div className=\"flex items-center gap-sm\">\n              <Download className=\"w-5 h-5 color-accent\" />\n              <div>\n                <div className=\"text-heading-3 color-accent\">{stats.totalDownloads}</div>\n                <div className=\"text-body-sm color-muted\">Total Downloads</div>\n              </div>\n            </div>\n          </Card>\n          <Card>\n            <div className=\"flex items-center gap-sm\">\n              <TrendingUp className=\"w-5 h-5 color-success\" />\n              <div>\n                <div className=\"text-heading-3 color-success\">{stats.avgViews}</div>\n                <div className=\"text-body-sm color-muted\">Avg Views</div>\n              </div>\n            </div>\n          </Card>\n        </div>\n\n        {/* Most Popular Resource */}\n        {stats.mostPopular && (\n          <Card>\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <h3 className=\"text-heading-4 mb-xs\">Most Popular Featured Resource</h3>\n                <p className=\"text-body color-foreground\">{stats.mostPopular.title}</p>\n                <div className=\"flex items-center gap-md mt-sm\">\n                  <Badge variant=\"outline\">{stats.mostPopular.type}</Badge>\n                  <span className=\"text-body-sm color-muted\">{stats.mostPopular.view_count} views</span>\n                  <span className=\"text-body-sm color-muted\">{stats.mostPopular.download_count} downloads</span>\n                </div>\n              </div>\n              <Button onClick={() => handleView(stats.mostPopular)}>\n                View Resource\n              </Button>\n            </div>\n          </Card>\n        )}\n\n        {/* ATLVS DataViews */}\n        <DataViewProvider config={dataViewConfig}>\n          <div className=\"flex items-center justify-between mb-md\">\n            <ViewSwitcher />\n            <DataActions />\n          </div>\n          \n          <div className=\"min-h-96\">\n            {loading && (\n              <div className=\"text-center py-xl\">\n                <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto mb-md\"></div>\n                <p className=\"color-muted\">Loading featured resources...</p>\n              </div>\n            )}\n            \n            {error && (\n              <Card>\n                <div className=\"text-center py-xl\">\n                  <Star className=\"w-12 h-12 color-destructive mx-auto mb-md\" />\n                  <h3 className=\"text-body form-label color-foreground mb-sm\">Error loading featured resources</h3>\n                  <p className=\"color-muted mb-md\">{error}</p>\n                  <Button onClick={fetchFeaturedResources}>\n                    Try Again\n                  </Button>\n                </div>\n              </Card>\n            )}\n            \n            {!loading && !error && resources.length === 0 && (\n              <Card>\n                <div className=\"text-center py-xl\">\n                  <Star className=\"w-12 h-12 color-muted mx-auto mb-md\" />\n                  <h3 className=\"text-body form-label color-foreground mb-sm\">No featured resources</h3>\n                  <p className=\"color-muted mb-md\">\n                    Start showcasing your most important resources by marking them as featured.\n                  </p>\n                  <Button onClick={handleCreate}>\n                    <Plus className=\"w-4 h-4 mr-sm\" />\n                    Add Featured Resource\n                  </Button>\n                </div>\n              </Card>\n            )}\n          </div>\n        </DataViewProvider>\n\n        {/* Create/Edit Drawer */}\n        <UniversalDrawer\n          isOpen={showCreateDrawer}\n          onClose={handleDrawerClose}\n          title={editingResource ? 'Edit Featured Resource' : 'Create Featured Resource'}\n          size=\"lg\"\n        >\n          <CreateResourceClient\n            resource={editingResource}\n            onSuccess={handleResourceSave}\n            onCancel={handleDrawerClose}\n          />\n        </UniversalDrawer>\n      </div>\n    </StateManagerProvider>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ghxstship/apps/web/app/(app)/(shell)/files/media/MediaClient.tsx","messages":[{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Upload' is not defined.","line":107,"column":12,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":107,"endColumn":18},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'FileCode' is not defined.","line":116,"column":14,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":116,"endColumn":22},{"ruleId":"jsx-a11y/alt-text","severity":1,"message":"Image elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","line":125,"column":13,"nodeType":"JSXOpeningElement","endLine":125,"endColumn":56},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Image' is not defined.","line":125,"column":14,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":125,"endColumn":19},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Video' is not defined.","line":134,"column":14,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":134,"endColumn":19},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Music' is not defined.","line":143,"column":14,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":143,"endColumn":19},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'FileCode' is not defined.","line":163,"column":14,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":163,"endColumn":22},{"ruleId":"jsx-a11y/alt-text","severity":1,"message":"Image elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","line":176,"column":13,"nodeType":"JSXOpeningElement","endLine":176,"endColumn":70},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Image' is not defined.","line":176,"column":14,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":176,"endColumn":19},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Upload' is not defined.","line":182,"column":16,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":182,"endColumn":22},{"ruleId":"@next/next/no-img-element","severity":1,"message":"Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` or a custom image loader to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","line":205,"column":21,"nodeType":"JSXOpeningElement","endLine":209,"endColumn":23},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Eye' is not defined.","line":221,"column":24,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":221,"endColumn":27},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Download' is not defined.","line":236,"column":24,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":236,"endColumn":32}],"suppressedMessages":[],"errorCount":10,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useCallback, useEffect, useMemo, useState } from 'react';\nimport { Card, Badge, Button } from '@ghxstship/ui';\nimport { FilesService } from '../lib/files-service';\nimport type { DigitalAsset, AssetFilters } from '../types';\n\nconst mediaTypeIcons = {\n  image: Image,\n  video: Video,\n  audio: Music,\n  other: FileCode,\n};\n\nexport default function MediaClient() {\n  const [assets, setAssets] = useState<DigitalAsset[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [selectedAssets, setSelectedAssets] = useState<string[]>([]);\n  const [showUploadDrawer, setShowUploadDrawer] = useState(false);\n\n  const filesService = useMemo(() => new FilesService(), []);\n\n  const fetchMediaAssets = useCallback(async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      \n      // Filter for media types only\n      const mediaFilters: AssetFilters = {\n        category: 'image' // We'll need to expand this to support multiple media types\n      };\n      \n      const result = await filesService.getAssets(undefined, {\n        filters: mediaFilters,\n        sortField: 'created_at',\n        sortDirection: 'desc'\n      });\n\n      if (result.error) {\n        setError(result.error);\n      } else {\n        setAssets(result.data?.data || []);\n      }\n    } catch (err) {\n      console.error('Error fetching media assets:', err);\n      setError(err instanceof Error ? err.message : 'Failed to load media assets');\n    } finally {\n      setLoading(false);\n    }\n  }, [filesService]);\n\n  useEffect(() => {\n    fetchMediaAssets();\n  }, [fetchMediaAssets]);\n\n  const handleUpload = useCallback(() => {\n    setShowUploadDrawer(true);\n  }, []);\n\n  const handleView = useCallback(async (asset: DigitalAsset) => {\n    try {\n      await filesService.incrementViewCount(asset.id);\n      await fetchMediaAssets();\n    } catch (err) {\n      console.error('Error updating view count:', err);\n    }\n  }, [filesService, fetchMediaAssets]);\n\n  const handleDownload = useCallback(async (asset: DigitalAsset) => {\n    if (!asset.file_url) return;\n    \n    try {\n      await filesService.incrementDownloadCount(asset.id);\n      window.open(asset.file_url, '_blank');\n      await fetchMediaAssets();\n    } catch (err) {\n      console.error('Error downloading asset:', err);\n    }\n  }, [filesService, fetchMediaAssets]);\n\n  // Calculate stats\n  const stats = useMemo(() => {\n    const totalSize = assets.reduce((sum, asset) => sum + (asset.file_size || 0), 0);\n    const imageCount = assets.filter(asset => asset.category === 'image').length;\n    const videoCount = assets.filter(asset => asset.category === 'video').length;\n    const audioCount = assets.filter(asset => asset.category === 'audio').length;\n    \n    return {\n      total: assets.length,\n      totalSize: Math.round(totalSize / (1024 * 1024)), // Convert to MB\n      imageCount,\n      videoCount,\n      audioCount\n    };\n  }, [assets]);\n\n  return (\n    <div className=\"stack-lg\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-heading-3\">Media Assets</h1>\n          <p className=\"color-muted\">Manage multimedia content and digital assets</p>\n        </div>\n        <Button onClick={handleUpload}>\n          <Upload className=\"w-4 h-4 mr-sm\" />\n          Upload Media\n        </Button>\n      </div>\n\n      {/* Stats Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-md\">\n        <Card>\n          <div className=\"flex items-center gap-sm\">\n            <FileCode className=\"w-5 h-5 color-accent\" />\n            <div>\n              <div className=\"text-heading-3\">{stats.total}</div>\n              <div className=\"text-body-sm color-muted\">Total Assets</div>\n            </div>\n          </div>\n        </Card>\n        <Card>\n          <div className=\"flex items-center gap-sm\">\n            <Image className=\"w-5 h-5 color-success\" />\n            <div>\n              <div className=\"text-heading-3 color-success\">{stats.imageCount}</div>\n              <div className=\"text-body-sm color-muted\">Images</div>\n            </div>\n          </div>\n        </Card>\n        <Card>\n          <div className=\"flex items-center gap-sm\">\n            <Video className=\"w-5 h-5 color-warning\" />\n            <div>\n              <div className=\"text-heading-3 color-warning\">{stats.videoCount}</div>\n              <div className=\"text-body-sm color-muted\">Videos</div>\n            </div>\n          </div>\n        </Card>\n        <Card>\n          <div className=\"flex items-center gap-sm\">\n            <Music className=\"w-5 h-5 color-secondary\" />\n            <div>\n              <div className=\"text-heading-3 color-secondary\">{stats.audioCount}</div>\n              <div className=\"text-body-sm color-muted\">Audio</div>\n            </div>\n          </div>\n        </Card>\n      </div>\n\n      {/* Media Grid */}\n      {loading && (\n        <div className=\"text-center py-xl\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto mb-md\"></div>\n          <p className=\"color-muted\">Loading media assets...</p>\n        </div>\n      )}\n      \n      {error && (\n        <Card>\n          <div className=\"text-center py-xl\">\n            <FileCode className=\"w-12 h-12 color-destructive mx-auto mb-md\" />\n            <h3 className=\"text-body form-label color-foreground mb-sm\">Error loading media</h3>\n            <p className=\"color-muted mb-md\">{error}</p>\n            <Button onClick={fetchMediaAssets}>\n              Try Again\n            </Button>\n          </div>\n        </Card>\n      )}\n      \n      {!loading && !error && assets.length === 0 && (\n        <Card>\n          <div className=\"text-center py-xl\">\n            <Image className=\"w-12 h-12 color-muted mx-auto mb-md\" />\n            <h3 className=\"text-body form-label color-foreground mb-sm\">No media assets</h3>\n            <p className=\"color-muted mb-md\">\n              Start building your media library by uploading images, videos, and audio files.\n            </p>\n            <Button onClick={handleUpload}>\n              <Upload className=\"w-4 h-4 mr-sm\" />\n              Upload First Asset\n            </Button>\n          </div>\n        </Card>\n      )}\n\n      {!loading && !error && assets.length > 0 && (\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-md\">\n          {assets.map(asset => {\n            const IconComponent = mediaTypeIcons[asset.category as keyof typeof mediaTypeIcons] || FileCode;\n            const isSelected = selectedAssets.includes(asset.id);\n            \n            return (\n              <Card \n                key={asset.id}\n                className={`cursor-pointer hover:shadow-elevated transition-shadow ${\n                  isSelected ? 'ring-2 ring-primary' : ''\n                }`}\n                onClick={() => handleView(asset)}\n              >\n                <div className=\"aspect-square bg-muted/50 rounded-md mb-sm flex items-center justify-center\">\n                  {asset.file_url && (asset.category === 'image') ? (\n                    <img \n                      src={asset.file_url} \n                      alt={asset.title}\n                      className=\"w-full h-full object-cover rounded-md\"\n                    />\n                  ) : (\n                    <IconComponent className=\"w-12 h-12 color-muted\" />\n                  )}\n                </div>\n                \n                <div className=\"space-y-sm\">\n                  <h3 className=\"text-body form-label line-clamp-2\">{asset.title}</h3>\n                  \n                  <div className=\"flex items-center justify-between\">\n                    <Badge variant=\"outline\">{asset.category}</Badge>\n                    <div className=\"flex items-center gap-xs text-body-sm color-muted\">\n                      <Eye className=\"w-3 h-3\" />\n                      <span>{asset.view_count}</span>\n                    </div>\n                  </div>\n                  \n                  <div className=\"flex items-center gap-sm\">\n                    <Button\n                      size=\"sm\"\n                      variant=\"outline\"\n                      onClick={(e) => {\n                        e.stopPropagation();\n                        handleDownload(asset);\n                      }}\n                      className=\"flex-1\"\n                    >\n                      <Download className=\"w-3 h-3 mr-xs\" />\n                      Download\n                    </Button>\n                  </div>\n                </div>\n              </Card>\n            );\n          })}\n        </div>\n      )}\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ghxstship/apps/web/app/(app)/(shell)/files/media/views/MediaGridView.tsx","messages":[{"ruleId":"@next/next/no-img-element","severity":1,"message":"Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` or a custom image loader to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","line":78,"column":19,"nodeType":"JSXOpeningElement","endLine":82,"endColumn":21},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Eye' is not defined.","line":121,"column":20,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":121,"endColumn":23},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Download' is not defined.","line":125,"column":20,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":125,"endColumn":28},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Edit' is not defined.","line":140,"column":20,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":140,"endColumn":24},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Download' is not defined.","line":152,"column":20,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":152,"endColumn":28}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\nimport { User, FileText, Settings, Award, Calendar, TrendingUp, Activity, Clock, Plus, Search, Play, Trash2 } from \"lucide-react\";\nimport { Card, Badge, Button } from '@ghxstship/ui';\nimport type { MediaAsset } from '../types';\n\nconst mediaTypeIcons = {\n  image: Image,\n  video: Video,\n  audio: Music,\n  other: FileCode,\n};\n\ninterface MediaGridViewProps {\n  assets: MediaAsset[];\n  onAssetClick: (asset: MediaAsset) => void;\n  onAssetEdit: (asset: MediaAsset) => void;\n  onAssetDownload: (asset: MediaAsset) => void;\n  selectedAssets: string[];\n  onSelectionChange: (assetIds: string[]) => void;\n}\n\nexport default function MediaGridView({\n  assets,\n  onAssetClick,\n  onAssetEdit,\n  onAssetDownload,\n  selectedAssets,\n  onSelectionChange\n}: MediaGridViewProps) {\n  const handleAssetSelect = (assetId: string, selected: boolean) => {\n    if (selected) {\n      onSelectionChange([...selectedAssets, assetId]);\n    } else {\n      onSelectionChange(selectedAssets.filter(id => id !== assetId));\n    }\n  };\n\n  const formatFileSize = (bytes: number) => {\n    const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n    if (bytes === 0) return '0 Bytes';\n    const i = Math.floor(Math.log(bytes) / Math.log(1024));\n    return Math.round(bytes / Math.pow(1024, i) * 100) / 100 + ' ' + sizes[i];\n  };\n\n  const formatDuration = (seconds: number) => {\n    const mins = Math.floor(seconds / 60);\n    const secs = seconds % 60;\n    return `${mins}:${secs.toString().padStart(2, '0')}`;\n  };\n\n  return (\n    <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-md\">\n      {assets.map(asset => {\n        const IconComponent = mediaTypeIcons[asset.category] || FileCode;\n        const isSelected = selectedAssets.includes(asset.id);\n        \n        return (\n          <Card \n            key={asset.id}\n            className={`cursor-pointer hover:shadow-elevated transition-shadow ${\n              isSelected ? 'ring-2 ring-primary' : ''\n            }`}\n            onClick={() => onAssetClick(asset)}\n          >\n            <div className=\"relative\">\n              <input\n                type=\"checkbox\"\n                checked={isSelected}\n                onChange={(e) => {\n                  e.stopPropagation();\n                  handleAssetSelect(asset.id, e.target.checked);\n                }}\n                className=\"absolute top-sm left-sm z-10 rounded border-border\"\n              />\n              \n              <div className=\"aspect-square bg-muted/50 rounded-md mb-sm flex items-center justify-center relative overflow-hidden\">\n                {asset.thumbnail_url || (asset.category === 'image' && asset.file_url) ? (\n                  <img \n                    src={asset.thumbnail_url || asset.file_url} \n                    alt={asset.title}\n                    className=\"w-full h-full object-cover\"\n                  />\n                ) : (\n                  <IconComponent className=\"w-12 h-12 color-muted\" />\n                )}\n                \n                {asset.category === 'video' && (\n                  <div className=\"absolute inset-0 flex items-center justify-center bg-black/20\">\n                    <Play className=\"w-8 h-8 text-white\" />\n                  </div>\n                )}\n                \n                {asset.duration && (\n                  <div className=\"absolute bottom-xs right-xs bg-black/70 text-white text-xs px-xs py-xxs rounded\">\n                    {formatDuration(asset.duration)}\n                  </div>\n                )}\n              </div>\n            </div>\n            \n            <div className=\"space-y-sm\">\n              <h3 className=\"text-body form-label line-clamp-2\">{asset.title}</h3>\n              \n              {asset.description && (\n                <p className=\"text-body-sm color-muted line-clamp-2\">{asset.description}</p>\n              )}\n              \n              <div className=\"flex items-center justify-between\">\n                <Badge variant=\"outline\">{asset.category}</Badge>\n                <span className=\"text-xs color-muted\">{formatFileSize(asset.file_size)}</span>\n              </div>\n              \n              {asset.dimensions && (\n                <div className=\"text-xs color-muted\">\n                  {asset.dimensions.width} × {asset.dimensions.height}\n                </div>\n              )}\n              \n              <div className=\"flex items-center justify-between text-body-sm color-muted\">\n                <div className=\"flex items-center gap-xs\">\n                  <Eye className=\"w-3 h-3\" />\n                  <span>{asset.view_count}</span>\n                </div>\n                <div className=\"flex items-center gap-xs\">\n                  <Download className=\"w-3 h-3\" />\n                  <span>{asset.download_count}</span>\n                </div>\n              </div>\n              \n              <div className=\"flex items-center gap-sm pt-sm border-t\">\n                <Button\n                  size=\"sm\"\n                  variant=\"outline\"\n                  onClick={(e) => {\n                    e.stopPropagation();\n                    onAssetEdit(asset);\n                  }}\n                  className=\"flex-1\"\n                >\n                  <Edit className=\"w-3 h-3 mr-xs\" />\n                  Edit\n                </Button>\n                <Button\n                  size=\"sm\"\n                  variant=\"outline\"\n                  onClick={(e) => {\n                    e.stopPropagation();\n                    onAssetDownload(asset);\n                  }}\n                  className=\"flex-1\"\n                >\n                  <Download className=\"w-3 h-3 mr-xs\" />\n                  Download\n                </Button>\n              </div>\n            </div>\n          </Card>\n        );\n      })}\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ghxstship/apps/web/app/(app)/(shell)/files/overview/ResourcesOverviewClient.tsx","messages":[{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":40,"column":78,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[1824,1870],"text":"Manage and track your organization&apos;s resources"},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[1824,1870],"text":"Manage and track your organization&lsquo;s resources"},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[1824,1870],"text":"Manage and track your organization&#39;s resources"},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[1824,1870],"text":"Manage and track your organization&rsquo;s resources"},"desc":"Replace with `&rsquo;`."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\n\nimport { FileText, Download, Upload, Users, TrendingUp, Clock, Star, FolderOpen, Plus, Search, Filter, BarChart } from \"lucide-react\";\nimport React from 'react';\nimport { Card } from '@ghxstship/ui';\nimport { Button } from '@ghxstship/ui';\nimport { Badge } from '@ghxstship/ui';\n\nexport default function ResourcesOverviewClient() {\n  const stats = [\n    { label: 'Total Resources', value: '1,234', icon: FileText, trend: '+12%' },\n    { label: 'Downloads', value: '45.6K', icon: Download, trend: '+23%' },\n    { label: 'Active Users', value: '892', icon: Users, trend: '+8%' },\n    { label: 'Avg. Rating', value: '4.8', icon: Star, trend: '+0.2' },\n  ];\n\n  const recentResources = [\n    { id: 1, title: 'Q4 Sales Report', type: 'Document', downloads: 234, rating: 4.9, updated: '2 hours ago' },\n    { id: 2, title: 'Product Training Video', type: 'Video', downloads: 567, rating: 4.7, updated: '5 hours ago' },\n    { id: 3, title: 'API Documentation', type: 'Guide', downloads: 892, rating: 4.8, updated: '1 day ago' },\n    { id: 4, title: 'Brand Guidelines', type: 'Template', downloads: 345, rating: 4.6, updated: '2 days ago' },\n  ];\n\n  const categories = [\n    { name: 'Documents', count: 456, color: 'bg-accent' },\n    { name: 'Videos', count: 234, color: 'bg-secondary' },\n    { name: 'Templates', count: 189, color: 'bg-success' },\n    { name: 'Guides', count: 145, color: 'bg-warning' },\n    { name: 'Training', count: 98, color: 'bg-destructive' },\n    { name: 'Other', count: 112, color: 'bg-secondary-foreground' },\n  ];\n\n  return (\n    <div className=\"stack-lg\">\n      {/* Header */}\n      <div className=\"flex justify-between items-center\">\n        <div>\n          <h1 className=\"text-heading-2 text-heading-3 color-foreground\">Resources Overview</h1>\n          <p className=\"color-muted mt-xs\">Manage and track your organization's resources</p>\n        </div>\n        <div className=\"flex gap-sm\">\n          <Button variant=\"outline\">\n            <Upload className=\"w-4 h-4 mr-sm\" />\n            Upload Resource\n          </Button>\n          <Button>\n            <Plus className=\"w-4 h-4 mr-sm\" />\n            Create New\n          </Button>\n        </div>\n      </div>\n\n      {/* Stats Grid */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-md\">\n        {stats.map((stat, index) => (\n          <Card key={index} className=\"p-lg\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-body-sm color-muted\">{stat.label}</p>\n                <p className=\"text-heading-3 color-foreground mt-xs\">{stat.value}</p>\n                <p className=\"text-body-sm color-success mt-sm\">{stat.trend}</p>\n              </div>\n              <div className=\"p-sm bg-secondary/50 rounded-lg\">\n                <stat.icon className=\"w-6 h-6 color-muted\" />\n              </div>\n            </div>\n          </Card>\n        ))}\n      </div>\n\n      {/* Main Content Grid */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-lg\">\n        {/* Recent Resources */}\n        <div className=\"lg:col-span-2\">\n          <Card className=\"p-lg\">\n            <div className=\"flex justify-between items-center mb-md\">\n              <h2 className=\"text-body text-heading-4 color-foreground\">Recent Resources</h2>\n              <Button>View All</Button>\n            </div>\n            <div className=\"stack-md\">\n              {recentResources.map((resource: unknown) => (\n                <div key={resource.id} className=\"flex items-center justify-between p-md border rounded-lg hover:bg-secondary/50\">\n                  <div className=\"flex items-center gap-md\">\n                    <div className=\"p-sm bg-secondary/50 rounded\">\n                      <FileText className=\"w-5 h-5 color-muted\" />\n                    </div>\n                    <div>\n                      <h3 className=\"form-label color-foreground\">{resource.title}</h3>\n                      <div className=\"flex items-center gap-md mt-xs\">\n                        <Badge variant=\"outline\">{resource.type}</Badge>\n                        <span className=\"text-body-sm color-muted\">{resource.downloads} downloads</span>\n                        <div className=\"flex items-center gap-xs\">\n                          <Star className=\"w-3 h-3 color-warning fill-current\" />\n                          <span className=\"text-body-sm color-muted\">{resource.rating}</span>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                  <div className=\"text-body-sm color-muted\">\n                    {resource.updated}\n                  </div>\n                </div>\n              ))}\n            </div>\n          </Card>\n        </div>\n\n        {/* Categories */}\n        <div>\n          <Card className=\"p-lg\">\n            <h2 className=\"text-body text-heading-4 color-foreground mb-md\">Categories</h2>\n            <div className=\"stack-sm\">\n              {categories.map((category, index) => (\n                <div key={index} className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center gap-sm\">\n                    <div className={`w-3 h-3 rounded-full ${category.color}`} />\n                    <span className=\"text-body-sm color-foreground\">{category.name}</span>\n                  </div>\n                  <span className=\"text-body-sm form-label color-foreground\">{category.count}</span>\n                </div>\n              ))}\n            </div>\n            <Button variant=\"outline\" className=\"w-full mt-md\">\n              <FolderOpen className=\"w-4 h-4 mr-sm\" />\n              Manage Categories\n            </Button>\n          </Card>\n\n          {/* Quick Actions */}\n          <Card className=\"p-lg mt-md\">\n            <h2 className=\"text-body text-heading-4 color-foreground mb-md\">Quick Actions</h2>\n            <div className=\"stack-sm\">\n              <Button variant=\"outline\" className=\"w-full justify-start\">\n                <Search className=\"w-4 h-4 mr-sm\" />\n                Search Resources\n              </Button>\n              <Button variant=\"outline\" className=\"w-full justify-start\">\n                <Filter className=\"w-4 h-4 mr-sm\" />\n                Advanced Filters\n              </Button>\n              <Button variant=\"outline\" className=\"w-full justify-start\">\n                <BarChart className=\"w-4 h-4 mr-sm\" />\n                View Analytics\n              </Button>\n              <Button variant=\"outline\" className=\"w-full justify-start\">\n                <Clock className=\"w-4 h-4 mr-sm\" />\n                Recent Activity\n              </Button>\n            </div>\n          </Card>\n        </div>\n      </div>\n\n      {/* Activity Timeline */}\n      <Card className=\"p-lg\">\n        <h2 className=\"text-body text-heading-4 color-foreground mb-md\">Recent Activity</h2>\n        <div className=\"stack-md\">\n          <div className=\"flex gap-md\">\n            <div className=\"w-2 h-2 bg-accent rounded-full mt-sm\" />\n            <div className=\"flex-1\">\n              <p className=\"text-body-sm color-foreground\">New training video uploaded by Sarah Chen</p>\n              <p className=\"text-body-sm color-muted\">10 minutes ago</p>\n            </div>\n          </div>\n          <div className=\"flex gap-md\">\n            <div className=\"w-2 h-2 bg-success rounded-full mt-sm\" />\n            <div className=\"flex-1\">\n              <p className=\"text-body-sm color-foreground\">API documentation updated to v2.0</p>\n              <p className=\"text-body-sm color-muted\">1 hour ago</p>\n            </div>\n          </div>\n          <div className=\"flex gap-md\">\n            <div className=\"w-2 h-2 bg-secondary rounded-full mt-sm\" />\n            <div className=\"flex-1\">\n              <p className=\"text-body-sm color-foreground\">Q4 reports downloaded 50 times</p>\n              <p className=\"text-body-sm color-muted\">3 hours ago</p>\n            </div>\n          </div>\n        </div>\n      </Card>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ghxstship/apps/web/app/(app)/(shell)/files/policies/PoliciesClient.tsx","messages":[{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Shield' is not defined.","line":85,"column":16,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":85,"endColumn":22},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Eye' is not defined.","line":94,"column":16,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":94,"endColumn":19},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Users' is not defined.","line":103,"column":16,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":103,"endColumn":21}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\nimport { User, FileText, Settings, Award, Calendar, TrendingUp, Activity, Clock, Plus, Search, Play, Trash2 } from \"lucide-react\";\nimport { useCallback, useEffect, useMemo, useState } from 'react';\nimport { DataViewProvider, StateManagerProvider, UniversalDrawer, ViewSwitcher, DataActions } from '@ghxstship/ui';\nimport { Card, Badge, Button } from '@ghxstship/ui';\nimport { ResourcesService } from '../lib/resources-service';\nimport { getFieldConfigsForType } from '../lib/field-config';\nimport CreateResourceClient from '../drawers/CreateResourceClient';\nimport type { Resource } from '../types';\n\nexport default function PoliciesClient() {\n  const [resources, setResources] = useState<Resource[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [showCreateDrawer, setShowCreateDrawer] = useState(false);\n  const [editingResource, setEditingResource] = useState<Resource | null>(null);\n\n  const resourcesService = useMemo(() => new ResourcesService(), []);\n\n  const fetchPolicies = useCallback(async () => {\n    try {\n      setLoading(true);\n      const { resources: fetchedResources } = await resourcesService.getResources({\n        filters: { type: 'policy' },\n        sort_by: 'updated_at',\n        sort_order: 'desc'\n      });\n      setResources(fetchedResources);\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'Failed to load policies');\n    } finally {\n      setLoading(false);\n    }\n  }, [resourcesService]);\n\n  useEffect(() => {\n    fetchPolicies();\n  }, [fetchPolicies]);\n\n  const handleCreate = useCallback(() => {\n    setEditingResource(null);\n    setShowCreateDrawer(true);\n  }, []);\n\n  const handleResourceSave = useCallback(async () => {\n    await fetchPolicies();\n    setShowCreateDrawer(false);\n    setEditingResource(null);\n  }, [fetchPolicies]);\n\n  const stats = useMemo(() => {\n    const published = resources.filter(r => r.status === 'published').length;\n    const draft = resources.filter(r => r.status === 'draft').length;\n    const underReview = resources.filter(r => r.status === 'under_review').length;\n    \n    return { total: resources.length, published, draft, underReview };\n  }, [resources]);\n\n  return (\n    <StateManagerProvider>\n      <div className=\"stack-lg\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-heading-3\">Organizational Policies</h1>\n            <p className=\"color-muted\">Manage company policies and governance documents</p>\n          </div>\n          <Button onClick={handleCreate}>\n            <Plus className=\"w-4 h-4 mr-sm\" />\n            Add Policy\n          </Button>\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-md\">\n          <Card>\n            <div className=\"flex items-center gap-sm\">\n              <FileText className=\"w-5 h-5 color-accent\" />\n              <div>\n                <div className=\"text-heading-3\">{stats.total}</div>\n                <div className=\"text-body-sm color-muted\">Total Policies</div>\n              </div>\n            </div>\n          </Card>\n          <Card>\n            <div className=\"flex items-center gap-sm\">\n              <Shield className=\"w-5 h-5 color-success\" />\n              <div>\n                <div className=\"text-heading-3 color-success\">{stats.published}</div>\n                <div className=\"text-body-sm color-muted\">Published</div>\n              </div>\n            </div>\n          </Card>\n          <Card>\n            <div className=\"flex items-center gap-sm\">\n              <Eye className=\"w-5 h-5 color-warning\" />\n              <div>\n                <div className=\"text-heading-3 color-warning\">{stats.underReview}</div>\n                <div className=\"text-body-sm color-muted\">Under Review</div>\n              </div>\n            </div>\n          </Card>\n          <Card>\n            <div className=\"flex items-center gap-sm\">\n              <Users className=\"w-5 h-5 color-secondary\" />\n              <div>\n                <div className=\"text-heading-3 color-secondary\">{stats.draft}</div>\n                <div className=\"text-body-sm color-muted\">Draft</div>\n              </div>\n            </div>\n          </Card>\n        </div>\n\n        {!loading && !error && resources.length === 0 && (\n          <Card>\n            <div className=\"text-center py-xl\">\n              <FileText className=\"w-12 h-12 color-muted mx-auto mb-md\" />\n              <h3 className=\"text-body form-label color-foreground mb-sm\">No policies found</h3>\n              <p className=\"color-muted mb-md\">Start building your policy library.</p>\n              <Button onClick={handleCreate}>\n                <Plus className=\"w-4 h-4 mr-sm\" />\n                Create First Policy\n              </Button>\n            </div>\n          </Card>\n        )}\n\n        <UniversalDrawer\n          isOpen={showCreateDrawer}\n          onClose={() => setShowCreateDrawer(false)}\n          title={editingResource ? 'Edit Policy' : 'Create Policy'}\n          size=\"lg\"\n        >\n          <CreateResourceClient\n            resource={editingResource}\n            onSuccess={handleResourceSave}\n            onCancel={() => setShowCreateDrawer(false)}\n          />\n        </UniversalDrawer>\n      </div>\n    </StateManagerProvider>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ghxstship/apps/web/app/(app)/(shell)/files/procedures/ProceduresClient.tsx","messages":[{"ruleId":"react/jsx-no-undef","severity":2,"message":"'CheckSquare' is not defined.","line":155,"column":14,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":155,"endColumn":25},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Eye' is not defined.","line":173,"column":14,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":173,"endColumn":17},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Users' is not defined.","line":258,"column":26,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":258,"endColumn":31},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Eye' is not defined.","line":272,"column":26,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":272,"endColumn":29},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Download' is not defined.","line":304,"column":26,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":304,"endColumn":34}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\nimport { User, FileText, Settings, Award, Calendar, TrendingUp, Activity, Clock, Plus, Search, Play, Trash2 } from \"lucide-react\";\nimport { useCallback, useEffect, useMemo, useState } from 'react';\nimport { Card, Badge, Button } from '@ghxstship/ui';\nimport { FilesService } from '../lib/files-service';\nimport type { DigitalAsset, AssetFilters } from '../types';\nimport type { Procedure } from './types';\n\nconst procedureTypeIcons = {\n  sop: FileText,\n  workflow: CheckSquare,\n  checklist: CheckSquare,\n  guideline: FileText,\n  protocol: FileText,\n  other: FileText,\n};\n\nconst difficultyColors = {\n  beginner: 'success',\n  intermediate: 'warning',\n  advanced: 'destructive',\n};\n\nexport default function ProceduresClient() {\n  const [procedures, setProcedures] = useState<DigitalAsset[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [searchQuery, setSearchQuery] = useState('');\n  const [selectedProcedures, setSelectedProcedures] = useState<string[]>([]);\n  const [showCreateDrawer, setShowCreateDrawer] = useState(false);\n  const [currentView, setCurrentView] = useState<'grid' | 'list'>('list');\n\n  const filesService = useMemo(() => new FilesService(), []);\n\n  const fetchProcedures = useCallback(async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      \n      // Filter for procedure-related assets\n      const procedureFilters: AssetFilters = {\n        category: 'document', // Procedures are typically documents\n        // We can add more specific filtering once the service supports procedure types\n      };\n      \n      const result = await filesService.getAssets(undefined, {\n        search: searchQuery,\n        filters: procedureFilters,\n        sortField: 'updated_at',\n        sortDirection: 'desc'\n      });\n\n      if (result.error) {\n        setError(result.error);\n      } else {\n        setProcedures(result.data?.data || []);\n      }\n    } catch (err) {\n      console.error('Error fetching procedures:', err);\n      setError(err instanceof Error ? err.message : 'Failed to load procedures');\n    } finally {\n      setLoading(false);\n    }\n  }, [filesService, searchQuery]);\n\n  useEffect(() => {\n    fetchProcedures();\n  }, [fetchProcedures]);\n\n  const handleCreate = useCallback(() => {\n    setShowCreateDrawer(true);\n  }, []);\n\n  const handleView = useCallback(async (procedure: DigitalAsset) => {\n    try {\n      await filesService.incrementViewCount(procedure.id);\n      await fetchProcedures();\n    } catch (err) {\n      console.error('Error updating view count:', err);\n    }\n  }, [filesService, fetchProcedures]);\n\n  const handleDownload = useCallback(async (procedure: DigitalAsset) => {\n    if (!procedure.file_url) return;\n    \n    try {\n      await filesService.incrementDownloadCount(procedure.id);\n      window.open(procedure.file_url, '_blank');\n      await fetchProcedures();\n    } catch (err) {\n      console.error('Error downloading procedure:', err);\n    }\n  }, [filesService, fetchProcedures]);\n\n  const handleExecute = useCallback((procedure: DigitalAsset) => {\n    // This would open a procedure execution interface\n    console.log('Execute procedure:', procedure.id);\n  }, []);\n\n  // Calculate stats\n  const stats = useMemo(() => {\n    const totalViews = procedures.reduce((sum, proc) => sum + proc.view_count, 0);\n    const totalUsage = procedures.reduce((sum, proc) => sum + proc.download_count, 0);\n    const publishedCount = procedures.filter(proc => proc.status === 'active').length;\n    const draftCount = procedures.filter(proc => proc.status === 'draft').length;\n    \n    return {\n      total: procedures.length,\n      published: publishedCount,\n      draft: draftCount,\n      totalViews,\n      totalUsage\n    };\n  }, [procedures]);\n\n  return (\n    <div className=\"stack-lg\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-heading-3\">Standard Operating Procedures</h1>\n          <p className=\"color-muted\">Manage organizational procedures, workflows, and checklists</p>\n        </div>\n        <Button onClick={handleCreate}>\n          <Plus className=\"w-4 h-4 mr-sm\" />\n          Create Procedure\n        </Button>\n      </div>\n\n      {/* Search */}\n      <div className=\"relative\">\n        <Search className=\"absolute left-sm top-1/2 transform -translate-y-1/2 w-4 h-4 color-muted\" />\n        <input\n          type=\"text\"\n          placeholder=\"Search procedures...\"\n          value={searchQuery}\n          onChange={(e) => setSearchQuery(e.target.value)}\n          className=\"w-full pl-xl pr-md py-sm border border-border rounded-md focus:outline-none focus:ring-2 focus:ring-primary\"\n        />\n      </div>\n\n      {/* Stats Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-5 gap-md\">\n        <Card>\n          <div className=\"flex items-center gap-sm\">\n            <FileText className=\"w-5 h-5 color-accent\" />\n            <div>\n              <div className=\"text-heading-3\">{stats.total}</div>\n              <div className=\"text-body-sm color-muted\">Total Procedures</div>\n            </div>\n          </div>\n        </Card>\n        <Card>\n          <div className=\"flex items-center gap-sm\">\n            <CheckSquare className=\"w-5 h-5 color-success\" />\n            <div>\n              <div className=\"text-heading-3 color-success\">{stats.published}</div>\n              <div className=\"text-body-sm color-muted\">Published</div>\n            </div>\n          </div>\n        </Card>\n        <Card>\n          <div className=\"flex items-center gap-sm\">\n            <Clock className=\"w-5 h-5 color-warning\" />\n            <div>\n              <div className=\"text-heading-3 color-warning\">{stats.draft}</div>\n              <div className=\"text-body-sm color-muted\">Draft</div>\n            </div>\n          </div>\n        </Card>\n        <Card>\n          <div className=\"flex items-center gap-sm\">\n            <Eye className=\"w-5 h-5 color-secondary\" />\n            <div>\n              <div className=\"text-heading-3 color-secondary\">{stats.totalViews}</div>\n              <div className=\"text-body-sm color-muted\">Total Views</div>\n            </div>\n          </div>\n        </Card>\n        <Card>\n          <div className=\"flex items-center gap-sm\">\n            <Play className=\"w-5 h-5 color-primary\" />\n            <div>\n              <div className=\"text-heading-3 color-primary\">{stats.totalUsage}</div>\n              <div className=\"text-body-sm color-muted\">Executions</div>\n            </div>\n          </div>\n        </Card>\n      </div>\n\n      {/* Procedures List */}\n      {loading && (\n        <div className=\"text-center py-xl\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto mb-md\"></div>\n          <p className=\"color-muted\">Loading procedures...</p>\n        </div>\n      )}\n      \n      {error && (\n        <Card>\n          <div className=\"text-center py-xl\">\n            <FileText className=\"w-12 h-12 color-destructive mx-auto mb-md\" />\n            <h3 className=\"text-body form-label color-foreground mb-sm\">Error loading procedures</h3>\n            <p className=\"color-muted mb-md\">{error}</p>\n            <Button onClick={fetchProcedures}>\n              Try Again\n            </Button>\n          </div>\n        </Card>\n      )}\n      \n      {!loading && !error && procedures.length === 0 && (\n        <Card>\n          <div className=\"text-center py-xl\">\n            <FileText className=\"w-12 h-12 color-muted mx-auto mb-md\" />\n            <h3 className=\"text-body form-label color-foreground mb-sm\">No procedures found</h3>\n            <p className=\"color-muted mb-md\">\n              {searchQuery \n                ? 'No procedures match your search criteria.' \n                : 'Start building your procedure library with SOPs, workflows, and checklists.'}\n            </p>\n            <Button onClick={handleCreate}>\n              <Plus className=\"w-4 h-4 mr-sm\" />\n              Create First Procedure\n            </Button>\n          </div>\n        </Card>\n      )}\n\n      {!loading && !error && procedures.length > 0 && (\n        <div className=\"stack-md\">\n          {procedures.map(procedure => {\n            const IconComponent = procedureTypeIcons.sop; // Default to SOP icon\n            \n            return (\n              <Card \n                key={procedure.id}\n                className=\"cursor-pointer hover:shadow-elevated transition-shadow\"\n                onClick={() => handleView(procedure)}\n              >\n                <div className=\"flex items-start gap-md\">\n                  <div className=\"p-sm bg-secondary/50 rounded\">\n                    <IconComponent className=\"w-5 h-5 color-accent\" />\n                  </div>\n                  \n                  <div className=\"flex-1 min-w-0\">\n                    <div className=\"flex items-start justify-between mb-xs\">\n                      <h3 className=\"text-body form-label color-foreground\">{procedure.title}</h3>\n                      <Badge variant=\"outline\">SOP</Badge>\n                    </div>\n                    \n                    {procedure.description && (\n                      <p className=\"text-body-sm color-muted mb-sm line-clamp-2\">{procedure.description}</p>\n                    )}\n                    \n                    <div className=\"flex items-center gap-md mb-sm\">\n                      <div className=\"flex items-center gap-xs text-body-sm color-muted\">\n                        <Users className=\"w-3 h-3\" />\n                        <span>All Departments</span>\n                      </div>\n                      <div className=\"flex items-center gap-xs text-body-sm color-muted\">\n                        <Clock className=\"w-3 h-3\" />\n                        <span>~15 min</span>\n                      </div>\n                      <Badge variant=\"outline\" className=\"text-xs\">\n                        Beginner\n                      </Badge>\n                    </div>\n                    \n                    <div className=\"flex items-center gap-md text-body-sm color-muted\">\n                      <div className=\"flex items-center gap-xs\">\n                        <Eye className=\"w-3 h-3\" />\n                        <span>{procedure.view_count}</span>\n                      </div>\n                      <div className=\"flex items-center gap-xs\">\n                        <Play className=\"w-3 h-3\" />\n                        <span>{procedure.download_count}</span>\n                      </div>\n                      <span>Updated {new Date(procedure.updated_at).toLocaleDateString()}</span>\n                    </div>\n                  </div>\n                  \n                  <div className=\"flex items-center gap-sm\">\n                    <Button\n                      size=\"sm\"\n                      variant=\"outline\"\n                      onClick={(e) => {\n                        e.stopPropagation();\n                        handleExecute(procedure);\n                      }}\n                    >\n                      <Play className=\"w-3 h-3 mr-xs\" />\n                      Execute\n                    </Button>\n                    {procedure.file_url && (\n                      <Button\n                        size=\"sm\"\n                        variant=\"outline\"\n                        onClick={(e) => {\n                          e.stopPropagation();\n                          handleDownload(procedure);\n                        }}\n                      >\n                        <Download className=\"w-3 h-3\" />\n                      </Button>\n                    )}\n                  </div>\n                </div>\n              </Card>\n            );\n          })}\n        </div>\n      )}\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ghxstship/apps/web/app/(app)/(shell)/files/riders/ProgrammingRidersClient.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchRiders'. Either include it or remove the dependency array.","line":129,"column":6,"nodeType":"ArrayExpression","endLine":129,"endColumn":23,"suggestions":[{"desc":"Update the dependencies array to be: [supabase, orgId, fetchRiders]","fix":{"range":[3864,3881],"text":"[supabase, orgId, fetchRiders]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { Plus, Search, Filter, Download, Upload, MoreHorizontal, FileText, Mic, Utensils, Settings, Calendar as CalendarIcon, Shield, Car, Hotel, Film, Users, Grid3X3, List, BarChart3, Clock } from \"lucide-react\";\nimport { useCallback, useEffect, useMemo, useState } from 'react';\nimport { createBrowserClient } from '@ghxstship/auth';\nimport {\n  Badge,\n  Button,\n  Card,\n  DataActions,\n  DataGrid,\n  DataViewProvider,\n  KanbanBoard,\n  ListView,\n  StateManagerProvider,\n  ViewSwitcher,\n  Input,\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n  Tabs,\n  TabsContent,\n  TabsList,\n  TabsTrigger,\n  type DataRecord,\n} from '@ghxstship/ui';\nimport type { DataViewConfig, FieldConfig, FilterConfig, SortConfig } from '@ghxstship/ui/src/components/DataViews/types';\n\nimport type {\n  ProgrammingRider,\n  RiderFilters,\n  RiderSort,\n  ViewType,\n  RiderKind,\n  RiderStatus,\n  RiderPriority,\n  RiderEvent,\n  RiderProject,\n  STATUS_BADGE,\n  PRIORITY_BADGE,\n  RIDER_KIND_BADGE,\n} from './types';\n\n// Import view components\nimport ProgrammingRidersListView from './views/ProgrammingRidersListView';\nimport ProgrammingRidersGridView from './views/ProgrammingRidersGridView';\nimport ProgrammingRidersTimelineView from './views/ProgrammingRidersTimelineView';\nimport ProgrammingRidersAnalyticsView from './views/ProgrammingRidersAnalyticsView';\n\n// Import drawer components\nimport CreateProgrammingRiderDrawer from './drawers/CreateProgrammingRiderDrawer';\nimport EditProgrammingRiderDrawer from './drawers/EditProgrammingRiderDrawer';\nimport ViewProgrammingRiderDrawer from './drawers/ViewProgrammingRiderDrawer';\n\ninterface User {\n  id: string;\n  email: string;\n  full_name?: string | null;\n  avatar_url?: string | null;\n}\n\ninterface ProgrammingRidersClientProps {\n  orgId: string;\n  currentUserId: string;\n  initialRiders: ProgrammingRider[];\n  projects: RiderProject[];\n  events: RiderEvent[];\n  users: User[];\n}\n\nexport default function ProgrammingRidersClient({\n  orgId,\n  currentUserId,\n  initialRiders,\n  projects,\n  events,\n  users,\n}: ProgrammingRidersClientProps) {\n  const supabase = useMemo(() => createBrowserClient(), []);\n\n  // State management\n  const [riders, setRiders] = useState<ProgrammingRider[]>(initialRiders);\n  const [loading, setLoading] = useState(false);\n  const [selectedRiders, setSelectedRiders] = useState<string[]>([]);\n  const [currentView, setCurrentView] = useState<ViewType>('list');\n  const [searchQuery, setSearchQuery] = useState('');\n  const [filters, setFilters] = useState<RiderFilters>({});\n  const [sort, setSort] = useState<RiderSort>({ field: 'created_at', direction: 'desc' });\n\n  // Drawer state\n  const [createDrawerOpen, setCreateDrawerOpen] = useState(false);\n  const [editDrawerOpen, setEditDrawerOpen] = useState(false);\n  const [viewDrawerOpen, setViewDrawerOpen] = useState(false);\n  const [selectedRider, setSelectedRider] = useState<ProgrammingRider | null>(null);\n\n  // Real-time subscription\n  useEffect(() => {\n    const channel = supabase\n      .channel(`programming_riders_${orgId}`)\n      .on(\n        'postgres_changes',\n        {\n          event: '*',\n          schema: 'public',\n          table: 'programming_riders',\n          filter: `organization_id=eq.${orgId}`,\n        },\n        (payload) => {\n          if (payload.eventType === 'INSERT') {\n            fetchRiders();\n          } else if (payload.eventType === 'UPDATE') {\n            setRiders((prev) =>\n              prev.map((rider) =>\n                rider.id === payload.new.id ? { ...rider, ...payload.new } : rider\n              )\n            );\n          } else if (payload.eventType === 'DELETE') {\n            setRiders((prev) => prev.filter((rider) => rider.id !== payload.old.id));\n          }\n        }\n      )\n      .subscribe();\n\n    return () => {\n      supabase.removeChannel(channel);\n    };\n  }, [supabase, orgId]);\n\n  // Fetch riders with filters\n  const fetchRiders = useCallback(async () => {\n    try {\n      setLoading(true);\n      const params = new URLSearchParams();\n\n      if (filters.event_id) params.append('event_id', filters.event_id);\n      if (filters.project_id) params.append('project_id', filters.project_id);\n      if (filters.kind) params.append('kind', filters.kind);\n      if (filters.status) params.append('status', filters.status);\n      if (filters.priority) params.append('priority', filters.priority);\n      if (searchQuery) params.append('search', searchQuery);\n      if (filters.start_date) params.append('start_date', filters.start_date);\n      if (filters.end_date) params.append('end_date', filters.end_date);\n      if (filters.fulfilled !== undefined) params.append('fulfilled', filters.fulfilled.toString());\n      if (filters.approved !== undefined) params.append('approved', filters.approved.toString());\n\n      const response = await fetch(`/api/v1/programming/riders?${params}`);\n      if (!response.ok) throw new Error('Failed to fetch riders');\n\n      const data = await response.json();\n      setRiders(data);\n    } catch (error) {\n      console.error('Error fetching riders:', error);\n    } finally {\n      setLoading(false);\n    }\n  }, [filters, searchQuery]);\n\n  // Trigger fetch when filters change\n  useEffect(() => {\n    fetchRiders();\n  }, [fetchRiders]);\n\n  // Filter and sort riders\n  const filteredAndSortedRiders = useMemo(() => {\n    let filtered = [...riders];\n\n    // Apply local search if no server search\n    if (searchQuery && !filters.search) {\n      const query = searchQuery.toLowerCase();\n      filtered = filtered.filter(\n        (rider) =>\n          rider.title?.toLowerCase().includes(query) ||\n          rider.description?.toLowerCase().includes(query) ||\n          rider.requirements?.toLowerCase().includes(query) ||\n          rider.event?.title?.toLowerCase().includes(query)\n      );\n    }\n\n    // Apply sorting\n    filtered.sort((a, b) => {\n      const aValue = a[sort.field];\n      const bValue = b[sort.field];\n\n      if (aValue === null || aValue === undefined) return 1;\n      if (bValue === null || bValue === undefined) return -1;\n\n      if (typeof aValue === 'string' && typeof bValue === 'string') {\n        return sort.direction === 'asc'\n          ? aValue.localeCompare(bValue)\n          : bValue.localeCompare(aValue);\n      }\n\n      if (aValue < bValue) return sort.direction === 'asc' ? -1 : 1;\n      if (aValue > bValue) return sort.direction === 'asc' ? 1 : -1;\n      return 0;\n    });\n\n    return filtered;\n  }, [riders, searchQuery, filters.search, sort]);\n\n  // Handlers\n  const handleCreateRider = () => {\n    setCreateDrawerOpen(true);\n  };\n\n  const handleEditRider = (rider: ProgrammingRider) => {\n    setSelectedRider(rider);\n    setEditDrawerOpen(true);\n  };\n\n  const handleViewRider = (rider: ProgrammingRider) => {\n    setSelectedRider(rider);\n    setViewDrawerOpen(true);\n  };\n\n  const handleDeleteRider = async (riderId: string) => {\n    try {\n      const response = await fetch(`/api/v1/programming/riders/${riderId}`, {\n        method: 'DELETE',\n      });\n\n      if (!response.ok) throw new Error('Failed to delete rider');\n\n      setRiders((prev) => prev.filter((rider) => rider.id !== riderId));\n    } catch (error) {\n      console.error('Error deleting rider:', error);\n    }\n  };\n\n  const handleBulkAction = async (action: string, riderIds: string[]) => {\n    try {\n      setLoading(true);\n      \n      switch (action) {\n        case 'delete':\n          await Promise.all(\n            riderIds.map((id) =>\n              fetch(`/api/v1/programming/riders/${id}`, { method: 'DELETE' })\n            )\n          );\n          setRiders((prev) => prev.filter((rider) => !riderIds.includes(rider.id)));\n          break;\n        case 'approve':\n          await Promise.all(\n            riderIds.map((id) =>\n              fetch(`/api/v1/programming/riders/${id}`, {\n                method: 'PATCH',\n                headers: { 'Content-Type': 'application/json' },\n                body: JSON.stringify({\n                  status: 'approved',\n                  approved_at: new Date().toISOString(),\n                  approved_by: currentUserId,\n                }),\n              })\n            )\n          );\n          fetchRiders();\n          break;\n        case 'fulfill':\n          await Promise.all(\n            riderIds.map((id) =>\n              fetch(`/api/v1/programming/riders/${id}`, {\n                method: 'PATCH',\n                headers: { 'Content-Type': 'application/json' },\n                body: JSON.stringify({\n                  status: 'fulfilled',\n                  fulfilled_at: new Date().toISOString(),\n                  fulfilled_by: currentUserId,\n                }),\n              })\n            )\n          );\n          fetchRiders();\n          break;\n      }\n      \n      setSelectedRiders([]);\n    } catch (error) {\n      console.error('Error performing bulk action:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleSuccess = () => {\n    fetchRiders();\n    setCreateDrawerOpen(false);\n    setEditDrawerOpen(false);\n    setSelectedRider(null);\n  };\n\n  // Export functionality\n  const handleExport = () => {\n    const csvContent = [\n      ['Title', 'Kind', 'Status', 'Priority', 'Event', 'Created At'].join(','),\n      ...filteredAndSortedRiders.map((rider) =>\n        [\n          rider.title,\n          rider.kind,\n          rider.status,\n          rider.priority,\n          rider.event?.title || '',\n          new Date(rider.created_at).toLocaleDateString(),\n        ].join(',')\n      ),\n    ].join('\\n');\n\n    const blob = new Blob([csvContent], { type: 'text/csv' });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = `programming-riders-${new Date().toISOString().split('T')[0]}.csv`;\n    a.click();\n    URL.revokeObjectURL(url);\n  };\n\n  // View icons\n  const viewIcons = {\n    list: List,\n    grid: Grid3X3,\n    timeline: Clock,\n    analytics: BarChart3,\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-2xl font-bold\">Programming Riders</h1>\n          <p className=\"text-muted-foreground\">\n            Manage technical, hospitality, and production requirements\n          </p>\n        </div>\n        <Button onClick={handleCreateRider}>\n          <Plus className=\"mr-2 h-4 w-4\" />\n          Create Rider\n        </Button>\n      </div>\n\n      {/* Filters and Search */}\n      <Card className=\"p-4\">\n        <div className=\"flex flex-col gap-4 md:flex-row md:items-center md:justify-between\">\n          <div className=\"flex flex-1 items-center gap-4\">\n            <div className=\"relative flex-1 max-w-sm\">\n              <Search className=\"absolute left-3 top-1/2 h-4 w-4 -translate-y-1/2 text-muted-foreground\" />\n              <Input\n                placeholder=\"Search riders...\"\n                value={searchQuery}\n                onChange={(e) => setSearchQuery(e.target.value)}\n                className=\"pl-9\"\n              />\n            </div>\n\n            <Select\n              value={filters.kind || ''}\n              onValueChange={(value) =>\n                setFilters((prev) => ({ ...prev, kind: value as RiderKind || undefined }))\n              }\n            >\n              <SelectTrigger className=\"w-40\">\n                <SelectValue placeholder=\"All Types\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"\">All Types</SelectItem>\n                <SelectItem value=\"technical\">Technical</SelectItem>\n                <SelectItem value=\"hospitality\">Hospitality</SelectItem>\n                <SelectItem value=\"stage_plot\">Stage Plot</SelectItem>\n                <SelectItem value=\"security\">Security</SelectItem>\n                <SelectItem value=\"catering\">Catering</SelectItem>\n                <SelectItem value=\"transportation\">Transportation</SelectItem>\n                <SelectItem value=\"accommodation\">Accommodation</SelectItem>\n                <SelectItem value=\"production\">Production</SelectItem>\n                <SelectItem value=\"artist\">Artist</SelectItem>\n                <SelectItem value=\"crew\">Crew</SelectItem>\n              </SelectContent>\n            </Select>\n\n            <Select\n              value={filters.status || ''}\n              onValueChange={(value) =>\n                setFilters((prev) => ({ ...prev, status: value as RiderStatus || undefined }))\n              }\n            >\n              <SelectTrigger className=\"w-40\">\n                <SelectValue placeholder=\"All Status\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"\">All Status</SelectItem>\n                <SelectItem value=\"draft\">Draft</SelectItem>\n                <SelectItem value=\"pending_review\">Pending Review</SelectItem>\n                <SelectItem value=\"under_review\">Under Review</SelectItem>\n                <SelectItem value=\"approved\">Approved</SelectItem>\n                <SelectItem value=\"rejected\">Rejected</SelectItem>\n                <SelectItem value=\"fulfilled\">Fulfilled</SelectItem>\n                <SelectItem value=\"cancelled\">Cancelled</SelectItem>\n              </SelectContent>\n            </Select>\n\n            <Select\n              value={filters.event_id || ''}\n              onValueChange={(value) =>\n                setFilters((prev) => ({ ...prev, event_id: value || undefined }))\n              }\n            >\n              <SelectTrigger className=\"w-48\">\n                <SelectValue placeholder=\"All Events\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"\">All Events</SelectItem>\n                {events.map((event) => (\n                  <SelectItem key={event.id} value={event.id}>\n                    {event.title}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n\n          <div className=\"flex items-center gap-2\">\n            <Button variant=\"outline\" size=\"sm\" onClick={handleExport}>\n              <Download className=\"mr-2 h-4 w-4\" />\n              Export\n            </Button>\n\n            {/* View Switcher */}\n            <div className=\"flex items-center rounded-lg border p-1\">\n              {(['list', 'grid', 'timeline', 'analytics'] as ViewType[]).map((view) => {\n                const Icon = viewIcons[view];\n                return (\n                  <Button\n                    key={view}\n                    variant={currentView === view ? 'default' : 'ghost'}\n                    size=\"sm\"\n                    onClick={() => setCurrentView(view)}\n                    className=\"h-8 w-8 p-0\"\n                  >\n                    <Icon className=\"h-4 w-4\" />\n                  </Button>\n                );\n              })}\n            </div>\n          </div>\n        </div>\n\n        {/* Bulk Actions */}\n        {selectedRiders.length > 0 && (\n          <div className=\"mt-4 flex items-center gap-2 rounded-lg border bg-muted/50 p-3\">\n            <span className=\"text-sm text-muted-foreground\">\n              {selectedRiders.length} rider(s) selected\n            </span>\n            <div className=\"flex gap-2\">\n              <Button\n                size=\"sm\"\n                variant=\"outline\"\n                onClick={() => handleBulkAction('approve', selectedRiders)}\n              >\n                Approve\n              </Button>\n              <Button\n                size=\"sm\"\n                variant=\"outline\"\n                onClick={() => handleBulkAction('fulfill', selectedRiders)}\n              >\n                Fulfill\n              </Button>\n              <Button\n                size=\"sm\"\n                variant=\"destructive\"\n                onClick={() => handleBulkAction('delete', selectedRiders)}\n              >\n                Delete\n              </Button>\n            </div>\n          </div>\n        )}\n      </Card>\n\n      {/* Content */}\n      <div className=\"min-h-[400px]\">\n        {currentView === 'list' && (\n          <ProgrammingRidersListView\n            riders={filteredAndSortedRiders}\n            loading={loading}\n            selectedRiders={selectedRiders}\n            onSelectionChange={setSelectedRiders}\n            onEdit={handleEditRider}\n            onView={handleViewRider}\n            onDelete={handleDeleteRider}\n            sort={sort}\n            onSortChange={setSort}\n          />\n        )}\n\n        {currentView === 'grid' && (\n          <ProgrammingRidersGridView\n            riders={filteredAndSortedRiders}\n            loading={loading}\n            onEdit={handleEditRider}\n            onView={handleViewRider}\n            onDelete={handleDeleteRider}\n          />\n        )}\n\n        {currentView === 'timeline' && (\n          <ProgrammingRidersTimelineView\n            riders={filteredAndSortedRiders}\n            loading={loading}\n            onEdit={handleEditRider}\n            onView={handleViewRider}\n          />\n        )}\n\n        {currentView === 'analytics' && (\n          <ProgrammingRidersAnalyticsView\n            riders={filteredAndSortedRiders}\n            loading={loading}\n          />\n        )}\n      </div>\n\n      {/* Drawers */}\n      <CreateProgrammingRiderDrawer\n        open={createDrawerOpen}\n        onOpenChange={setCreateDrawerOpen}\n        orgId={orgId}\n        currentUserId={currentUserId}\n        projects={projects}\n        events={events}\n        onSuccess={handleSuccess}\n      />\n\n      {selectedRider && (\n        <>\n          <EditProgrammingRiderDrawer\n            open={editDrawerOpen}\n            onOpenChange={setEditDrawerOpen}\n            rider={selectedRider}\n            orgId={orgId}\n            currentUserId={currentUserId}\n            projects={projects}\n            events={events}\n            onSuccess={handleSuccess}\n          />\n\n          <ViewProgrammingRiderDrawer\n            open={viewDrawerOpen}\n            onOpenChange={setViewDrawerOpen}\n            rider={selectedRider}\n            users={users}\n            onEdit={() => {\n              setViewDrawerOpen(false);\n              setEditDrawerOpen(true);\n            }}\n            onDelete={() => {\n              handleDeleteRider(selectedRider.id);\n              setViewDrawerOpen(false);\n              setSelectedRider(null);\n            }}\n          />\n        </>\n      )}\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ghxstship/apps/web/app/(app)/(shell)/files/riders/RidersClient.tsx","messages":[{"ruleId":"react/jsx-no-undef","severity":2,"message":"'CalendarIcon' is not defined.","line":348,"column":32,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":348,"endColumn":44},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'CalendarIcon' is not defined.","line":422,"column":30,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":422,"endColumn":42}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { User, FileText, Settings, Award, Calendar, TrendingUp, Activity, Clock, Plus, Search, Play, Trash2 } from \"lucide-react\";\nimport { useCallback, useEffect, useMemo, useState } from 'react';\nimport { createBrowserClient } from '@ghxstship/auth';\nimport {\n  Badge,\n  Button,\n  Card,\n  DataActions,\n  DataGrid,\n  DataViewProvider,\n  KanbanBoard,\n  ListView,\n  StateManagerProvider,\n  ViewSwitcher,\n  type DataRecord,\n} from '@ghxstship/ui';\nimport type { DataViewConfig, FieldConfig, FilterConfig, SortConfig } from '@ghxstship/ui/src/components/DataViews/types';\nimport AppDrawer from '@/app/_components/shared/AppDrawer';\n\ninterface RiderRecord extends DataRecord {\n  id: string;\n  event_id: string;\n  event_name: string;\n  kind: 'technical' | 'hospitality' | 'stage_plot';\n  status: 'draft' | 'pending_review' | 'approved' | 'fulfilled';\n  priority: 'low' | 'medium' | 'high' | 'critical';\n  created_at: string;\n  details?: string | Record<string, unknown> | null;\n}\n\nexport default function RidersClient({ orgId }: { orgId: string }) {\n  const supabase = useMemo(() => createBrowserClient(), []);\n\n  const [data, setData] = useState<RiderRecord[]>([]);\n  const [loading, setLoading] = useState(false);\n  const [selectedRecord, setSelectedRecord] = useState<RiderRecord | null>(null);\n  const [drawerOpen, setDrawerOpen] = useState(false);\n  const [drawerMode, setDrawerMode] = useState<'view' | 'edit' | 'create'>('view');\n\n  // Define field configuration for riders\n  const fields: FieldConfig[] = [\n    {\n      key: 'event_name',\n      label: 'Event',\n      type: 'text',\n      sortable: true,\n      filterable: true,\n    },\n    {\n      key: 'kind',\n      label: 'Rider Type',\n      type: 'select',\n      options: [\n        { value: 'technical', label: 'Technical' },\n        { value: 'hospitality', label: 'Hospitality' },\n        { value: 'stage_plot', label: 'Stage Plot' }\n      ],\n      required: true,\n      sortable: true,\n      filterable: true,\n      groupable: true,\n    },\n    {\n      key: 'status',\n      label: 'Status',\n      type: 'select',\n      options: [\n        { value: 'draft', label: 'Draft' },\n        { value: 'pending_review', label: 'Pending Review' },\n        { value: 'approved', label: 'Approved' },\n        { value: 'fulfilled', label: 'Fulfilled' }\n      ],\n      sortable: true,\n      filterable: true,\n      groupable: true,\n    },\n    {\n      key: 'priority',\n      label: 'Priority',\n      type: 'select',\n      options: [\n        { value: 'low', label: 'Low' },\n        { value: 'medium', label: 'Medium' },\n        { value: 'high', label: 'High' },\n        { value: 'critical', label: 'Critical' }\n      ],\n      sortable: true,\n      filterable: true,\n      groupable: true,\n    },\n    {\n      key: 'created_at',\n      label: 'Created',\n      type: 'date',\n      sortable: true,\n      filterable: true,\n    }\n  ];\n\n  const loadRiders = useCallback(async () => {\n    if (!orgId) {\n      return;\n    }\n\n    try {\n      setLoading(true);\n      \n      const { data: ridersData, error } = await supabase\n        .from('riders')\n        .select(`\n          *,\n          events!inner(\n            name,\n            projects!inner(\n              organization_id\n            )\n          )\n        `)\n        .eq('events.projects.organization_id', orgId)\n        .order('created_at', { ascending: false });\n      \n      if (error) throw error;\n      \n      // Transform data to include event name and computed fields\n      const transformedData: RiderRecord[] = (ridersData || []).map((rider: unknown) => ({\n        id: rider.id,\n        event_id: rider.event_id,\n        event_name: rider.events?.name || 'Unknown Event',\n        kind: rider.kind ?? 'technical',\n        status: rider.status ?? 'draft',\n        priority: rider.priority ?? 'medium',\n        created_at: rider.created_at,\n        details: rider.details,\n        ...rider,\n      }));\n\n      setData(transformedData);\n    } catch (error) {\n      console.error('Error loading riders:', error);\n    } finally {\n      setLoading(false);\n    }\n  }, [orgId, supabase]);\n\n  useEffect(() => {\n    void loadRiders();\n  }, [loadRiders]);\n\n  const handleCreateRider = () => {\n    setSelectedRecord(null);\n    setDrawerMode('create');\n    setDrawerOpen(true);\n  };\n\n  const handleEditRider = (rider: RiderRecord) => {\n    setSelectedRecord(rider);\n    setDrawerMode('edit');\n    setDrawerOpen(true);\n  };\n\n  const handleViewRider = (rider: RiderRecord) => {\n    setSelectedRecord(rider);\n    setDrawerMode('view');\n    setDrawerOpen(true);\n  };\n\n  const handleSaveRider = async (riderData: Partial<RiderRecord>) => {\n    try {\n      if (drawerMode === 'create') {\n        const { error } = await supabase.from('riders').insert(riderData);\n        if (error) throw error;\n      } else if (drawerMode === 'edit') {\n        if (!selectedRecord) {\n          throw new Error('No rider selected for update');\n        }\n        const { error } = await supabase\n          .from('riders')\n          .update(riderData)\n          .eq('id', selectedRecord.id);\n        if (error) throw error;\n      }\n      \n      await loadRiders();\n      setDrawerOpen(false);\n      setSelectedRecord(null);\n    } catch (error) {\n      console.error('Error saving rider:', error);\n    }\n  };\n\n  const getRiderIcon = (kind: string) => {\n    switch (kind) {\n      case 'technical':\n        return Settings;\n      case 'hospitality':\n        return Utensils;\n      case 'stage_plot':\n        return Mic;\n      default:\n        return FileText;\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'draft':\n        return 'color-muted bg-secondary/50';\n      case 'pending_review':\n        return 'color-warning-foreground bg-warning/10';\n      case 'approved':\n        return 'text-info-foreground bg-info/10';\n      case 'fulfilled':\n        return 'color-success-foreground bg-success/10';\n      default:\n        return 'color-muted bg-secondary/50';\n    }\n  };\n\n  const getPriorityColor = (priority: string) => {\n    switch (priority) {\n      case 'low':\n        return 'color-muted bg-secondary/50';\n      case 'medium':\n        return 'text-info-foreground bg-info/10';\n      case 'high':\n        return 'color-warning-foreground bg-warning/10';\n      case 'critical':\n        return 'color-destructive-foreground bg-destructive/10';\n      default:\n        return 'color-muted bg-secondary/50';\n    }\n  };\n\n  // Configure DataView\n  const config: DataViewConfig = {\n    id: 'riders-management',\n    name: 'Riders Management',\n    viewType: 'grid',\n    defaultView: 'grid',\n    fields,\n    data,\n    \n    onSearch: (query: string) => {\n      console.log('Search riders:', query);\n    },\n    onFilter: (filters: FilterConfig[]) => {\n      console.log('Filter riders:', filters);\n    },\n    onSort: (sorts: SortConfig[]) => {\n      console.log('Sort riders:', sorts);\n    },\n    onRefresh: loadRiders,\n    onExport: (records: DataRecord[], format: string) => {\n      console.log('Export riders:', format, records);\n    },\n    onImport: (records: DataRecord[]) => {\n      console.log('Import riders:', records);\n    }\n  };\n\n  const ridersByType = useMemo(() => {\n    return data.reduce<Record<string, RiderRecord[]>>((acc, rider) => {\n      const type = rider.kind || 'technical';\n      if (!acc[type]) {\n        acc[type] = [];\n      }\n      acc[type].push(rider);\n      return acc;\n    }, {});\n  }, [data]);\n\n  const riderTypeLabels: { [key: string]: string } = {\n    technical: 'Technical Riders',\n    hospitality: 'Hospitality Riders',\n    stage_plot: 'Stage Plots'\n  };\n\n  const handleCloseDrawer = useCallback(() => {\n    if (loading) {\n      return;\n    }\n    setDrawerOpen(false);\n    setSelectedRecord(null);\n  }, [loading]);\n\n  return (\n    <div className=\"stack-md\">\n      <DataViewProvider config={config}>\n        <StateManagerProvider>\n          <div className=\"stack-md\">\n            {/* Header Actions */}\n            <div className=\"flex items-center justify-between mb-md\">\n              <div className=\"flex items-center gap-md\">\n                <h2 className=\"text-body text-heading-4\">Riders Management</h2>\n                <Button onClick={handleCreateRider}>\n                  <Plus className=\"h-4 w-4 mr-sm\" />\n                  Create Rider\n                </Button>\n              </div>\n              <div className=\"flex items-center gap-sm\">\n                <ViewSwitcher />\n                <DataActions />\n              </div>\n            </div>\n\n            {/* Rider Type Overview Cards */}\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-md mb-lg\">\n              {Object.entries(ridersByType).map(([type, typeRiders]) => {\n                const IconComponent = getRiderIcon(type);\n                const pendingCount = typeRiders.filter(r => r.status === 'pending_review').length;\n                const approvedCount = typeRiders.filter(r => r.status === 'approved').length;\n                \n                return (\n                  <Card key={type} className=\"p-md\">\n                    <div className=\"flex items-center justify-between mb-sm\">\n                      <h3 className=\"text-heading-4 flex items-center gap-sm\">\n                        <IconComponent className=\"h-4 w-4\" />\n                        {riderTypeLabels[type] || type}\n                      </h3>\n                      <Badge variant=\"secondary\">\n                        {typeRiders.length} riders\n                      </Badge>\n                    </div>\n                    \n                    <div className=\"stack-sm\">\n                      <div className=\"flex justify-between text-body-sm\">\n                        <span className=\"color-muted\">Pending Review:</span>\n                        <span className=\"form-label color-warning\">{pendingCount}</span>\n                      </div>\n                      <div className=\"flex justify-between text-body-sm\">\n                        <span className=\"color-muted\">Approved:</span>\n                        <span className=\"form-label color-success\">{approvedCount}</span>\n                      </div>\n                    </div>\n                    \n                    <div className=\"mt-sm stack-xs\">\n                      {typeRiders.slice(0, 2).map(rider => (\n                        <div\n                          key={rider.id}\n                          className=\"flex items-center justify-between text-body-sm p-sm rounded border cursor-pointer hover:bg-secondary/50\"\n                          onClick={() => handleViewRider(rider)}\n                        >\n                          <div>\n                            <div className=\"form-label\">{rider.event_name}</div>\n                            <div className=\"color-muted flex items-center gap-xs\">\n                              <CalendarIcon className=\"h-3 w-3\" />\n                              {rider.created_at ? new Date(rider.created_at).toLocaleDateString() : 'Unknown date'}\n                            </div>\n                          </div>\n                          <div className=\"flex flex-col gap-xs\">\n                            <Badge variant=\"outline\">\n                              {rider.status.replace('_', ' ')}\n                            </Badge>\n                            <Badge variant=\"outline\">\n                              {rider.priority}\n                            </Badge>\n                          </div>\n                        </div>\n                      ))}\n                      \n                      {typeRiders.length > 2 && (\n                        <div className=\"text-body-sm color-muted text-center pt-xs\">\n                          +{typeRiders.length - 2} more riders\n                        </div>\n                      )}\n                    </div>\n                  </Card>\n                );\n              })}\n            </div>\n\n            {/* Data Views */}\n            <DataGrid />\n            \n            <KanbanBoard \n              columns={[\n                { id: 'draft', title: 'Draft' },\n                { id: 'pending_review', title: 'Pending Review' },\n                { id: 'approved', title: 'Approved' },\n                { id: 'fulfilled', title: 'Fulfilled' }\n              ]}\n              statusField=\"status\"\n              titleField=\"event_name\"\n              onCardClick={handleViewRider}\n            />\n            \n            <ListView \n              titleField=\"event_name\"\n              subtitleField=\"kind\"\n              onItemClick={handleViewRider}\n            />\n            \n            {/* Rider Details Drawer */}\n            <AppDrawer\n              open={drawerOpen}\n              onClose={handleCloseDrawer}\n              record={selectedRecord}\n              fields={[]}\n              mode={drawerMode}\n              title={\n                drawerMode === 'create' \n                  ? 'Create New Rider' \n                  : `${selectedRecord?.kind?.replace('_', ' ')} Rider` || 'Rider Details'\n              }\n              tabs={[{\n                key: 'content',\n                label: 'Details',\n                content: (\n                  <div>\n                    {selectedRecord && (\n                      <div className=\"stack-md mt-lg\">\n                        <div className=\"grid grid-cols-2 gap-md\">\n                          <div className=\"flex items-center gap-sm text-body-sm color-muted\">\n                            <FileText className=\"h-4 w-4\" />\n                            <span>\n                              {selectedRecord.kind?.replace('_', ' ') || 'Technical'} Rider\n                            </span>\n                          </div>\n                          <div className=\"flex items-center gap-sm text-body-sm color-muted\">\n                            <CalendarIcon className=\"h-4 w-4\" />\n                            <span>\n                              Created {new Date(selectedRecord.created_at).toLocaleDateString()}\n                            </span>\n                          </div>\n                        </div>\n                        \n                        <div className=\"flex items-center gap-md\">\n                          <Badge className={getStatusColor(selectedRecord.status)}>\n                            {selectedRecord.status?.replace('_', ' ') || 'Draft'}\n                          </Badge>\n                          <Badge className={getPriorityColor(selectedRecord.priority)}>\n                            {selectedRecord.priority || 'Medium'} Priority\n                          </Badge>\n                        </div>\n                        \n                        {selectedRecord.details && (\n                          <div className=\"pt-md border-t\">\n                            <h4 className=\"form-label mb-sm\">Rider Details</h4>\n                            <div className=\"text-body-sm color-muted bg-secondary/50 p-sm rounded\">\n                              {typeof selectedRecord.details === 'object' \n                                ? JSON.stringify(selectedRecord.details, null, 2)\n                                : selectedRecord.details\n                              }\n                            </div>\n                          </div>\n                        )}\n                      </div>\n                    )}\n                  </div>\n                )\n              }]}\n            />\n\n            {/* Empty State */}\n            {!loading && data.length === 0 && (\n              <Card className=\"p-xl text-center\">\n                <FileText className=\"h-12 w-12 mx-auto mb-md color-muted\" />\n                <h3 className=\"text-body text-heading-4 mb-sm\">No Riders Yet</h3>\n                <p className=\"color-muted mb-md\">\n                  Start creating technical and hospitality riders for your events to ensure all requirements are met.\n                </p>\n                <Button onClick={handleCreateRider}>\n                  <Plus className=\"h-4 w-4 mr-sm\" />\n                  Create First Rider\n                </Button>\n              </Card>\n            )}\n          </div>\n        </StateManagerProvider>\n      </DataViewProvider>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ghxstship/apps/web/app/(app)/(shell)/files/templates/TemplatesClient.tsx","messages":[{"ruleId":"react/jsx-no-undef","severity":2,"message":"'File' is not defined.","line":61,"column":14,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":61,"endColumn":18},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Download' is not defined.","line":70,"column":14,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":70,"endColumn":22},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Users' is not defined.","line":79,"column":14,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":79,"endColumn":19},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'File' is not defined.","line":91,"column":14,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":91,"endColumn":18}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\nimport { User, FileText, Settings, Award, Calendar, TrendingUp, Activity, Clock, Plus, Search, Play, Trash2 } from \"lucide-react\";\nimport { useCallback, useEffect, useMemo, useState } from 'react';\nimport { Card, Badge, Button } from '@ghxstship/ui';\nimport { ResourcesService } from '../lib/resources-service';\nimport type { Resource } from '../types';\n\nexport default function TemplatesClient() {\n  const [resources, setResources] = useState<Resource[]>([]);\n  const [loading, setLoading] = useState(true);\n\n  const resourcesService = useMemo(() => new ResourcesService(), []);\n\n  const fetchTemplates = useCallback(async () => {\n    try {\n      setLoading(true);\n      const { resources: fetchedResources } = await resourcesService.getResources({\n        filters: { type: 'template' },\n        sort_by: 'download_count',\n        sort_order: 'desc'\n      });\n      setResources(fetchedResources);\n    } catch (err) {\n      console.error('Error fetching templates:', err);\n    } finally {\n      setLoading(false);\n    }\n  }, [resourcesService]);\n\n  useEffect(() => {\n    fetchTemplates();\n  }, [fetchTemplates]);\n\n  const stats = useMemo(() => {\n    const totalDownloads = resources.reduce((sum, r) => sum + r.download_count, 0);\n    const mostUsed = resources.reduce((max, r) => r.download_count > max.download_count ? r : max, resources[0]);\n    \n    return { \n      total: resources.length, \n      totalDownloads,\n      mostUsed: mostUsed?.title || 'None'\n    };\n  }, [resources]);\n\n  return (\n    <div className=\"stack-lg\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-heading-3\">Templates & Forms</h1>\n          <p className=\"color-muted\">Reusable templates and document forms</p>\n        </div>\n        <Button>\n          <Plus className=\"w-4 h-4 mr-sm\" />\n          Add Template\n        </Button>\n      </div>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-md\">\n        <Card>\n          <div className=\"flex items-center gap-sm\">\n            <File className=\"w-5 h-5 color-accent\" />\n            <div>\n              <div className=\"text-heading-3\">{stats.total}</div>\n              <div className=\"text-body-sm color-muted\">Total Templates</div>\n            </div>\n          </div>\n        </Card>\n        <Card>\n          <div className=\"flex items-center gap-sm\">\n            <Download className=\"w-5 h-5 color-success\" />\n            <div>\n              <div className=\"text-heading-3 color-success\">{stats.totalDownloads}</div>\n              <div className=\"text-body-sm color-muted\">Total Downloads</div>\n            </div>\n          </div>\n        </Card>\n        <Card>\n          <div className=\"flex items-center gap-sm\">\n            <Users className=\"w-5 h-5 color-secondary\" />\n            <div>\n              <div className=\"text-heading-4 color-secondary truncate\">{stats.mostUsed}</div>\n              <div className=\"text-body-sm color-muted\">Most Popular</div>\n            </div>\n          </div>\n        </Card>\n      </div>\n\n      {!loading && resources.length === 0 && (\n        <Card>\n          <div className=\"text-center py-xl\">\n            <File className=\"w-12 h-12 color-muted mx-auto mb-md\" />\n            <h3 className=\"text-body form-label color-foreground mb-sm\">No templates found</h3>\n            <p className=\"color-muted mb-md\">Create reusable templates and forms.</p>\n            <Button>\n              <Plus className=\"w-4 h-4 mr-sm\" />\n              Create First Template\n            </Button>\n          </div>\n        </Card>\n      )}\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ghxstship/apps/web/app/(app)/(shell)/files/views/FileFolderView.tsx","messages":[{"ruleId":"react/jsx-no-undef","severity":2,"message":"'ChevronDown' is not defined.","line":87,"column":22,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":87,"endColumn":33},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'ChevronRight' is not defined.","line":89,"column":22,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":89,"endColumn":34},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Folder' is not defined.","line":92,"column":18,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":92,"endColumn":24},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Download' is not defined.","line":146,"column":28,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":146,"endColumn":36},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Trash2' is not defined.","line":154,"column":28,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":154,"endColumn":34}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport { useState } from \"react\";\nimport { Card, Badge, Button, Checkbox } from \"@ghxstship/ui\";\nimport type { ProjectFile } from \"../FilesClient\";\nimport type { LucideIcon } from \"lucide-react\";\n\ninterface FileFolderViewProps {\n  groupedFiles: Record<string, ProjectFile[]>;\n  selectedFiles: Set<string>;\n  onSelectFile: (id: string) => void;\n  onView: (file: ProjectFile) => void;\n  onDownload: (file: ProjectFile) => void;\n  onDelete: (file: ProjectFile) => void;\n  formatFileSize: (bytes: number) => string;\n  getCategoryIcon: (category: string) => LucideIcon;\n}\n\nexport default function FileFolderView({\n  groupedFiles,\n  selectedFiles,\n  onSelectFile,\n  onView,\n  onDownload,\n  onDelete,\n  formatFileSize,\n  getCategoryIcon,\n}: FileFolderViewProps) {\n  const [expandedFolders, setExpandedFolders] = useState<Set<string>>(\n    new Set(Object.keys(groupedFiles))\n  );\n\n  const toggleFolder = (category: string) => {\n    setExpandedFolders((prev) => {\n      const next = new Set(prev);\n      if (next.has(category)) {\n        next.delete(category);\n      } else {\n        next.add(category);\n      }\n      return next;\n    });\n  };\n\n  const getCategoryColor = (category: string) => {\n    switch (category) {\n      case \"document\":\n        return \"text-blue-600\";\n      case \"image\":\n        return \"text-green-600\";\n      case \"video\":\n        return \"text-purple-600\";\n      case \"audio\":\n        return \"text-yellow-600\";\n      case \"drawing\":\n        return \"text-indigo-600\";\n      case \"specification\":\n        return \"text-pink-600\";\n      case \"report\":\n        return \"text-orange-600\";\n      default:\n        return \"text-gray-600\";\n    }\n  };\n\n  const getTotalSize = (files: ProjectFile[]) => {\n    const total = files.reduce((sum, file) => sum + file.file_size, 0);\n    return formatFileSize(total);\n  };\n\n  return (\n    <div className=\"space-y-md\">\n      {Object.entries(groupedFiles).map(([category, files]) => {\n        const CategoryIcon = getCategoryIcon(category);\n        const isExpanded = expandedFolders.has(category);\n\n        return (\n          <div key={category} className=\"border rounded-lg\">\n            {/* Folder Header */}\n            <div\n              className=\"flex items-center justify-between p-md bg-muted/50 cursor-pointer hover:bg-muted/70 transition-colors\"\n              onClick={() => toggleFolder(category)}\n            >\n              <div className=\"flex items-center gap-sm\">\n                <Button variant=\"ghost\" size=\"sm\" className=\"p-0\">\n                  {isExpanded ? (\n                    <ChevronDown className=\"h-4 w-4\" />\n                  ) : (\n                    <ChevronRight className=\"h-4 w-4\" />\n                  )}\n                </Button>\n                <Folder className={`h-5 w-5 ${getCategoryColor(category)}`} />\n                <h3 className=\"font-semibold capitalize\">{category}</h3>\n                <Badge variant=\"secondary\">{files.length} files</Badge>\n                <span className=\"text-sm text-muted-foreground\">\n                  {getTotalSize(files)}\n                </span>\n              </div>\n            </div>\n\n            {/* Folder Contents */}\n            {isExpanded && (\n              <div className=\"p-md\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-sm\">\n                  {files.map((file) => (\n                    <div\n                      key={file.id}\n                      className={`flex items-center gap-sm p-sm border rounded-lg hover:bg-muted/50 cursor-pointer transition-colors ${\n                        selectedFiles.has(file.id) ? \"bg-primary/5 border-primary\" : \"\"\n                      }`}\n                      onClick={() => onView(file)}\n                    >\n                      <Checkbox\n                        checked={selectedFiles.has(file.id)}\n                        onChange={() => onSelectFile(file.id)}\n                        onClick={(e: React.MouseEvent) => e.stopPropagation()}\n                      />\n                      \n                      <CategoryIcon className=\"h-4 w-4 text-muted-foreground flex-shrink-0\" />\n                      \n                      <div className=\"flex-1 min-w-0\">\n                        <div className=\"font-medium truncate\" title={file.name}>\n                          {file.name}\n                        </div>\n                        <div className=\"flex items-center gap-sm text-xs text-muted-foreground\">\n                          <span>{formatFileSize(file.file_size)}</span>\n                          {file.version !== \"1.0\" && (\n                            <Badge variant=\"outline\" className=\"scale-75\">\n                              v{file.version}\n                            </Badge>\n                          )}\n                          {file.is_latest && (\n                            <Badge variant=\"success\" className=\"scale-75\">\n                              Latest\n                            </Badge>\n                          )}\n                        </div>\n                      </div>\n\n                      <div className=\"flex items-center gap-xs\" onClick={(e) => e.stopPropagation()}>\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => onDownload(file)}\n                        >\n                          <Download className=\"h-3 w-3\" />\n                        </Button>\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => onDelete(file)}\n                          className=\"text-destructive\"\n                        >\n                          <Trash2 className=\"h-3 w-3\" />\n                        </Button>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            )}\n          </div>\n        );\n      })}\n\n      {Object.keys(groupedFiles).length === 0 && (\n        <div className=\"text-center py-xl text-muted-foreground\">\n          No files to display\n        </div>\n      )}\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ghxstship/apps/web/app/(app)/(shell)/files/views/FileGalleryView.tsx","messages":[{"ruleId":"@next/next/no-img-element","severity":1,"message":"Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` or a custom image loader to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","line":36,"column":15,"nodeType":"JSXOpeningElement","endLine":41,"endColumn":17},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Eye' is not defined.","line":55,"column":20,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":55,"endColumn":23},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Download' is not defined.","line":65,"column":20,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":65,"endColumn":28},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Trash2' is not defined.","line":76,"column":20,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":76,"endColumn":26},{"ruleId":"@next/next/no-img-element","severity":1,"message":"Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` or a custom image loader to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","line":109,"column":13,"nodeType":"JSXOpeningElement","endLine":114,"endColumn":15},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'X' is not defined.","line":123,"column":16,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":123,"endColumn":17},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Eye' is not defined.","line":142,"column":20,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":142,"endColumn":23},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Download' is not defined.","line":153,"column":20,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":153,"endColumn":28}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport { useState } from \"react\";\nimport { Card, Button } from \"@ghxstship/ui\";\nimport type { ProjectFile } from \"../FilesClient\";\n\ninterface FileGalleryViewProps {\n  files: ProjectFile[];\n  onView: (file: ProjectFile) => void;\n  onDownload: (file: ProjectFile) => void;\n  onDelete: (file: ProjectFile) => void;\n}\n\nexport default function FileGalleryView({\n  files,\n  onView,\n  onDownload,\n  onDelete,\n}: FileGalleryViewProps) {\n  const [selectedImage, setSelectedImage] = useState<ProjectFile | null>(null);\n  const [hoveredId, setHoveredId] = useState<string | null>(null);\n\n  return (\n    <>\n      <div className=\"grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 xl:grid-cols-5 gap-md\">\n        {files.map((file) => (\n          <div\n            key={file.id}\n            className=\"relative group cursor-pointer\"\n            onMouseEnter={() => setHoveredId(file.id)}\n            onMouseLeave={() => setHoveredId(null)}\n            onClick={() => setSelectedImage(file)}\n          >\n            {/* Image Container */}\n            <div className=\"aspect-square bg-muted rounded-lg overflow-hidden\">\n              <img\n                src={file.file_url}\n                alt={file.name}\n                className=\"w-full h-full object-cover transition-transform group-hover:scale-105\"\n                loading=\"lazy\"\n              />\n            </div>\n\n            {/* Overlay on Hover */}\n            {hoveredId === file.id && (\n              <div className=\"absolute inset-0 bg-black/60 rounded-lg flex items-center justify-center gap-sm animate-in fade-in-0 duration-200\">\n                <Button\n                  variant=\"secondary\"\n                  size=\"sm\"\n                  onClick={(e) => {\n                    e.stopPropagation();\n                    onView(file);\n                  }}\n                >\n                  <Eye className=\"h-4 w-4\" />\n                </Button>\n                <Button\n                  variant=\"secondary\"\n                  size=\"sm\"\n                  onClick={(e) => {\n                    e.stopPropagation();\n                    onDownload(file);\n                  }}\n                >\n                  <Download className=\"h-4 w-4\" />\n                </Button>\n                <Button\n                  variant=\"secondary\"\n                  size=\"sm\"\n                  onClick={(e) => {\n                    e.stopPropagation();\n                    onDelete(file);\n                  }}\n                  className=\"text-destructive\"\n                >\n                  <Trash2 className=\"h-4 w-4\" />\n                </Button>\n              </div>\n            )}\n\n            {/* File Name */}\n            <div className=\"mt-sm\">\n              <p className=\"text-sm font-medium truncate\" title={file.name}>\n                {file.name}\n              </p>\n              {file.project && (\n                <p className=\"text-xs text-muted-foreground truncate\">\n                  {file.project.name}\n                </p>\n              )}\n            </div>\n          </div>\n        ))}\n      </div>\n\n      {files.length === 0 && (\n        <div className=\"text-center py-xl text-muted-foreground\">\n          No images to display\n        </div>\n      )}\n\n      {/* Lightbox Modal */}\n      {selectedImage && (\n        <div\n          className=\"fixed inset-0 z-50 bg-black/90 flex items-center justify-center p-md animate-in fade-in-0 duration-200\"\n          onClick={() => setSelectedImage(null)}\n        >\n          <div className=\"relative max-w-[90vw] max-h-[90vh]\">\n            <img\n              src={selectedImage.file_url}\n              alt={selectedImage.name}\n              className=\"max-w-full max-h-full object-contain\"\n              onClick={(e) => e.stopPropagation()}\n            />\n            \n            {/* Close Button */}\n            <Button\n              variant=\"secondary\"\n              size=\"sm\"\n              className=\"absolute top-4 right-4\"\n              onClick={() => setSelectedImage(null)}\n            >\n              <X className=\"h-4 w-4\" />\n            </Button>\n\n            {/* Image Info */}\n            <div className=\"absolute bottom-4 left-4 right-4 bg-black/70 text-white p-md rounded-lg\">\n              <h3 className=\"font-semibold mb-xs\">{selectedImage.name}</h3>\n              {selectedImage.description && (\n                <p className=\"text-sm mb-sm\">{selectedImage.description}</p>\n              )}\n              <div className=\"flex items-center gap-md\">\n                <Button\n                  variant=\"secondary\"\n                  size=\"sm\"\n                  onClick={(e) => {\n                    e.stopPropagation();\n                    onView(selectedImage);\n                    setSelectedImage(null);\n                  }}\n                >\n                  <Eye className=\"mr-2 h-4 w-4\" />\n                  View Details\n                </Button>\n                <Button\n                  variant=\"secondary\"\n                  size=\"sm\"\n                  onClick={(e) => {\n                    e.stopPropagation();\n                    onDownload(selectedImage);\n                  }}\n                >\n                  <Download className=\"mr-2 h-4 w-4\" />\n                  Download\n                </Button>\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n    </>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ghxstship/apps/web/app/(app)/(shell)/files/views/FileGridView.tsx","messages":[{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Download' is not defined.","line":85,"column":20,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":85,"endColumn":28},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Share2' is not defined.","line":95,"column":20,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":95,"endColumn":26}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport { Card, Badge, Button, Checkbox } from \"@ghxstship/ui\";\nimport { formatDistanceToNow } from \"date-fns\";\nimport type { ProjectFile } from \"../FilesClient\";\nimport type { LucideIcon } from \"lucide-react\";\n\ninterface FileGridViewProps {\n  files: ProjectFile[];\n  selectedFiles: Set<string>;\n  onSelectFile: (id: string) => void;\n  onView: (file: ProjectFile) => void;\n  onEdit: (file: ProjectFile) => void;\n  onDownload: (file: ProjectFile) => void;\n  onDelete: (file: ProjectFile) => void;\n  onShare: (file: ProjectFile) => void;\n  formatFileSize: (bytes: number) => string;\n  getCategoryIcon: (category: string) => LucideIcon;\n  getAccessIcon: (level: string) => LucideIcon;\n}\n\nexport default function FileGridView({\n  files,\n  selectedFiles,\n  onSelectFile,\n  onView,\n  onEdit,\n  onDownload,\n  onDelete,\n  onShare,\n  formatFileSize,\n  getCategoryIcon,\n  getAccessIcon,\n}: FileGridViewProps) {\n  const getCategoryColor = (category: string) => {\n    switch (category) {\n      case \"document\":\n        return \"bg-blue-100 text-blue-800\";\n      case \"image\":\n        return \"bg-green-100 text-green-800\";\n      case \"video\":\n        return \"bg-purple-100 text-purple-800\";\n      case \"audio\":\n        return \"bg-yellow-100 text-yellow-800\";\n      case \"drawing\":\n        return \"bg-indigo-100 text-indigo-800\";\n      case \"specification\":\n        return \"bg-pink-100 text-pink-800\";\n      case \"report\":\n        return \"bg-orange-100 text-orange-800\";\n      default:\n        return \"bg-gray-100 text-gray-800\";\n    }\n  };\n\n  return (\n    <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-md\">\n      {files.map((file) => {\n        const CategoryIcon = getCategoryIcon(file.category);\n        const AccessIcon = getAccessIcon(file.access_level);\n        \n        return (\n          <Card\n            key={file.id}\n            className={`p-md cursor-pointer hover:shadow-lg transition-shadow ${\n              selectedFiles.has(file.id) ? \"ring-2 ring-primary\" : \"\"\n            }`}\n            onClick={() => onView(file)}\n          >\n            <div className=\"flex items-start justify-between mb-sm\">\n              <Checkbox\n                checked={selectedFiles.has(file.id)}\n                onChange={() => onSelectFile(file.id)}\n                onClick={(e: React.MouseEvent) => e.stopPropagation()}\n              />\n              <div className=\"flex items-center gap-xs\">\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={(e) => {\n                    e.stopPropagation();\n                    onDownload(file);\n                  }}\n                >\n                  <Download className=\"h-4 w-4\" />\n                </Button>\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={(e) => {\n                    e.stopPropagation();\n                    onShare(file);\n                  }}\n                >\n                  <Share2 className=\"h-4 w-4\" />\n                </Button>\n              </div>\n            </div>\n\n            <div className=\"space-y-sm\">\n              {/* File Icon and Category */}\n              <div className=\"flex items-center justify-center h-24 bg-muted rounded-lg\">\n                <CategoryIcon className=\"h-12 w-12 text-muted-foreground\" />\n              </div>\n\n              {/* File Name */}\n              <h3 className=\"font-semibold truncate\" title={file.name}>\n                {file.name}\n              </h3>\n\n              {/* Badges */}\n              <div className=\"flex items-center gap-xs flex-wrap\">\n                <Badge className={getCategoryColor(file.category)}>\n                  {file.category}\n                </Badge>\n                {file.version !== \"1.0\" && (\n                  <Badge variant=\"secondary\">v{file.version}</Badge>\n                )}\n                {file.is_latest && (\n                  <Badge variant=\"success\">Latest</Badge>\n                )}\n              </div>\n\n              {/* File Info */}\n              <div className=\"space-y-xs text-sm text-muted-foreground\">\n                <div className=\"flex items-center justify-between\">\n                  <span>Size:</span>\n                  <span>{formatFileSize(file.file_size)}</span>\n                </div>\n                <div className=\"flex items-center justify-between\">\n                  <span>Access:</span>\n                  <div className=\"flex items-center gap-xs\">\n                    <AccessIcon className=\"h-3 w-3\" />\n                    <span className=\"capitalize\">{file.access_level}</span>\n                  </div>\n                </div>\n                {file.project && (\n                  <div className=\"truncate\" title={file.project.name}>\n                    Project: {file.project.name}\n                  </div>\n                )}\n              </div>\n\n              {/* Footer */}\n              <div className=\"pt-sm border-t text-xs text-muted-foreground\">\n                <div className=\"flex items-center justify-between\">\n                  <span>\n                    {formatDistanceToNow(new Date(file.created_at), { addSuffix: true })}\n                  </span>\n                  {file.download_count > 0 && (\n                    <span>{file.download_count} downloads</span>\n                  )}\n                </div>\n                {file.uploaded_by_user && (\n                  <div className=\"mt-xs truncate\">\n                    by {file.uploaded_by_user.full_name || file.uploaded_by_user.email}\n                  </div>\n                )}\n              </div>\n\n              {/* Tags */}\n              {file.tags && file.tags.length > 0 && (\n                <div className=\"flex flex-wrap gap-xs\">\n                  {file.tags.slice(0, 3).map((tag, index) => (\n                    <Badge key={index} variant=\"outline\" className=\"text-xs\">\n                      {tag}\n                    </Badge>\n                  ))}\n                  {file.tags.length > 3 && (\n                    <Badge variant=\"outline\" className=\"text-xs\">\n                      +{file.tags.length - 3}\n                    </Badge>\n                  )}\n                </div>\n              )}\n            </div>\n          </Card>\n        );\n      })}\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ghxstship/apps/web/app/(app)/(shell)/files/views/FileListView.tsx","messages":[{"ruleId":"react/jsx-no-undef","severity":2,"message":"'ArrowUp' is not defined.","line":158,"column":28,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":158,"endColumn":35},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'ArrowDown' is not defined.","line":160,"column":28,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":160,"endColumn":37},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'ArrowUpDown' is not defined.","line":163,"column":26,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":163,"endColumn":37},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Download' is not defined.","line":200,"column":22,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":200,"endColumn":30},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Share2' is not defined.","line":207,"column":22,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":207,"endColumn":28},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Edit' is not defined.","line":214,"column":22,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":214,"endColumn":26},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Trash2' is not defined.","line":222,"column":22,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":222,"endColumn":28}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport { Badge, Button, Checkbox } from \"@ghxstship/ui\";\nimport { format, parseISO } from \"date-fns\";\nimport type { ProjectFile } from \"../FilesClient\";\n\ninterface FileListViewProps {\n  files: ProjectFile[];\n  selectedFiles: Set<string>;\n  fieldVisibility: Array<{ id: string; label: string; visible: boolean; sortable: boolean }>;\n  sortField: string;\n  sortDirection: \"asc\" | \"desc\";\n  onSelectAll: () => void;\n  onSelectFile: (id: string) => void;\n  onSort: (field: string) => void;\n  onView: (file: ProjectFile) => void;\n  onEdit: (file: ProjectFile) => void;\n  onDownload: (file: ProjectFile) => void;\n  onDelete: (file: ProjectFile) => void;\n  onShare: (file: ProjectFile) => void;\n  formatFileSize: (bytes: number) => string;\n}\n\nexport default function FileListView({\n  files,\n  selectedFiles,\n  fieldVisibility,\n  sortField,\n  sortDirection,\n  onSelectAll,\n  onSelectFile,\n  onSort,\n  onView,\n  onEdit,\n  onDownload,\n  onDelete,\n  onShare,\n  formatFileSize,\n}: FileListViewProps) {\n  const visibleFields = fieldVisibility.filter((f) => f.visible);\n\n  const getCategoryBadgeVariant = (category: string) => {\n    switch (category) {\n      case \"document\":\n        return \"info\";\n      case \"image\":\n        return \"success\";\n      case \"video\":\n        return \"warning\";\n      case \"audio\":\n        return \"secondary\";\n      default:\n        return \"default\";\n    }\n  };\n\n  const getAccessBadgeVariant = (level: string) => {\n    switch (level) {\n      case \"public\":\n        return \"success\";\n      case \"team\":\n        return \"info\";\n      case \"restricted\":\n        return \"destructive\";\n      default:\n        return \"secondary\";\n    }\n  };\n\n  const renderFieldValue = (file: ProjectFile, fieldId: string) => {\n    switch (fieldId) {\n      case \"name\":\n        return (\n          <div className=\"font-medium\">\n            {file.name}\n            {file.is_latest && (\n              <Badge variant=\"success\" className=\"ml-sm scale-90\">\n                Latest\n              </Badge>\n            )}\n          </div>\n        );\n      case \"category\":\n        return (\n          <Badge variant={getCategoryBadgeVariant(file.category)}>\n            {file.category}\n          </Badge>\n        );\n      case \"file_type\":\n        return <span className=\"text-sm\">{file.file_type}</span>;\n      case \"file_size\":\n        return <span className=\"text-sm\">{formatFileSize(file.file_size)}</span>;\n      case \"version\":\n        return <Badge variant=\"secondary\">v{file.version}</Badge>;\n      case \"uploaded_by\":\n        return (\n          <span className=\"text-sm\">\n            {file.uploaded_by_user?.full_name || file.uploaded_by_user?.email || \"Unknown\"}\n          </span>\n        );\n      case \"access_level\":\n        return (\n          <Badge variant={getAccessBadgeVariant(file.access_level)}>\n            {file.access_level}\n          </Badge>\n        );\n      case \"tags\":\n        return (\n          <div className=\"flex flex-wrap gap-xs\">\n            {file.tags?.slice(0, 2).map((tag, index) => (\n              <Badge key={index} variant=\"outline\" className=\"text-xs\">\n                {tag}\n              </Badge>\n            ))}\n            {file.tags?.length > 2 && (\n              <Badge variant=\"outline\" className=\"text-xs\">\n                +{file.tags.length - 2}\n              </Badge>\n            )}\n          </div>\n        );\n      case \"download_count\":\n        return <span className=\"text-sm\">{file.download_count}</span>;\n      case \"created_at\":\n        return <span className=\"text-sm\">{format(parseISO(file.created_at), \"MMM d, yyyy\")}</span>;\n      case \"updated_at\":\n        return <span className=\"text-sm\">{format(parseISO(file.updated_at), \"MMM d, yyyy\")}</span>;\n      default:\n        return \"-\";\n    }\n  };\n\n  return (\n    <div className=\"overflow-x-auto\">\n      <table className=\"w-full\">\n        <thead>\n          <tr className=\"border-b\">\n            <th className=\"text-left p-sm\">\n              <Checkbox\n                checked={selectedFiles.size === files.length && files.length > 0}\n                onChange={onSelectAll}\n              />\n            </th>\n            {visibleFields.map((field) => (\n              <th\n                key={field.id}\n                className={`text-left p-sm ${\n                  field.sortable ? \"cursor-pointer hover:bg-muted/50\" : \"\"\n                }`}\n                onClick={() => field.sortable && onSort(field.id)}\n              >\n                <div className=\"flex items-center gap-xs\">\n                  {field.label}\n                  {field.sortable && (\n                    <>\n                      {sortField === field.id ? (\n                        sortDirection === \"asc\" ? (\n                          <ArrowUp className=\"h-3 w-3\" />\n                        ) : (\n                          <ArrowDown className=\"h-3 w-3\" />\n                        )\n                      ) : (\n                        <ArrowUpDown className=\"h-3 w-3 opacity-30\" />\n                      )}\n                    </>\n                  )}\n                </div>\n              </th>\n            ))}\n            <th className=\"text-left p-sm\">Actions</th>\n          </tr>\n        </thead>\n        <tbody>\n          {files.map((file) => (\n            <tr\n              key={file.id}\n              className={`border-b hover:bg-muted/50 cursor-pointer ${\n                selectedFiles.has(file.id) ? \"bg-primary/5\" : \"\"\n              }`}\n              onClick={() => onView(file)}\n            >\n              <td className=\"p-sm\" onClick={(e) => e.stopPropagation()}>\n                <Checkbox\n                  checked={selectedFiles.has(file.id)}\n                  onChange={() => onSelectFile(file.id)}\n                />\n              </td>\n              {visibleFields.map((field) => (\n                <td key={field.id} className=\"p-sm\">\n                  {renderFieldValue(file, field.id)}\n                </td>\n              ))}\n              <td className=\"p-sm\" onClick={(e) => e.stopPropagation()}>\n                <div className=\"flex items-center gap-xs\">\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={() => onDownload(file)}\n                  >\n                    <Download className=\"h-4 w-4\" />\n                  </Button>\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={() => onShare(file)}\n                  >\n                    <Share2 className=\"h-4 w-4\" />\n                  </Button>\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={() => onEdit(file)}\n                  >\n                    <Edit className=\"h-4 w-4\" />\n                  </Button>\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={() => onDelete(file)}\n                    className=\"text-destructive\"\n                  >\n                    <Trash2 className=\"h-4 w-4\" />\n                  </Button>\n                </div>\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n      \n      {files.length === 0 && (\n        <div className=\"text-center py-xl text-muted-foreground\">\n          No files to display\n        </div>\n      )}\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ghxstship/apps/web/app/(app)/(shell)/files/views/ResourceGridView.tsx","messages":[{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Star' is not defined.","line":78,"column":22,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":78,"endColumn":26},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Eye' is not defined.","line":84,"column":18,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":84,"endColumn":21},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Download' is not defined.","line":86,"column":18,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":86,"endColumn":26},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Edit' is not defined.","line":112,"column":20,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":112,"endColumn":24},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Download' is not defined.","line":123,"column":22,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":123,"endColumn":30}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\nimport { User, FileText, Settings, Award, Calendar, TrendingUp, Activity, Clock, Plus, Search, Play, Trash2 } from \"lucide-react\";\nimport { Card, Badge, Button } from '@ghxstship/ui';\nimport type { Resource } from '../types';\n\nconst resourceTypeIcons = {\n  policy: FileText,\n  guide: BookOpen,\n  training: GraduationCap,\n  template: File,\n  procedure: Clipboard,\n  featured: Star,\n};\n\nconst statusColors = {\n  draft: 'bg-secondary/50 color-muted',\n  under_review: 'bg-accent/10 color-accent',\n  published: 'bg-success/10 color-success',\n  archived: 'bg-warning/10 color-warning',\n};\n\ninterface ResourceGridViewProps {\n  resources: Resource[];\n  onResourceClick: (resource: Resource) => void;\n  onResourceEdit: (resource: Resource) => void;\n  onResourceDownload: (resource: Resource) => void;\n  selectedResources: string[];\n  onSelectionChange: (resourceIds: string[]) => void;\n}\n\nexport default function ResourceGridView({\n  resources,\n  onResourceClick,\n  onResourceEdit,\n  onResourceDownload,\n  selectedResources,\n  onSelectionChange\n}: ResourceGridViewProps) {\n  const handleResourceSelect = (resourceId: string, selected: boolean) => {\n    if (selected) {\n      onSelectionChange([...selectedResources, resourceId]);\n    } else {\n      onSelectionChange(selectedResources.filter(id => id !== resourceId));\n    }\n  };\n\n  return (\n    <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-md\">\n      {resources.map(resource => {\n        const IconComponent = resourceTypeIcons[resource.type];\n        const isSelected = selectedResources.includes(resource.id);\n        \n        return (\n          <Card \n            key={resource.id}\n            className={`cursor-pointer hover:shadow-elevated transition-shadow ${\n              isSelected ? 'ring-2 ring-primary' : ''\n            }`}\n            onClick={() => onResourceClick(resource)}\n          >\n            <div className=\"flex items-start justify-between mb-sm\">\n              <div className=\"flex items-center gap-sm\">\n                <input\n                  type=\"checkbox\"\n                  checked={isSelected}\n                  onChange={(e) => {\n                    e.stopPropagation();\n                    handleResourceSelect(resource.id, e.target.checked);\n                  }}\n                  className=\"rounded border-border\"\n                />\n                <IconComponent className=\"w-5 h-5 color-accent\" />\n                <Badge variant=\"outline\" className={statusColors[resource.status]}>\n                  {resource.status.replace('_', ' ')}\n                </Badge>\n                {resource.is_featured && (\n                  <Badge variant=\"secondary\" className=\"bg-warning/10 color-warning\">\n                    <Star className=\"w-3 h-3 mr-xs\" />\n                    Featured\n                  </Badge>\n                )}\n              </div>\n              <div className=\"flex items-center gap-xs text-body-sm color-muted\">\n                <Eye className=\"w-4 h-4\" />\n                <span>{resource.view_count}</span>\n                <Download className=\"w-4 h-4 ml-sm\" />\n                <span>{resource.download_count}</span>\n              </div>\n            </div>\n            \n            <h3 className=\"text-heading-4 mb-sm line-clamp-2\">{resource.title}</h3>\n            \n            {resource.description && (\n              <p className=\"text-body-sm color-muted mb-sm line-clamp-3\">{resource.description}</p>\n            )}\n            \n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex flex-wrap gap-xs\">\n                <Badge variant=\"outline\">{resource.type}</Badge>\n                <Badge variant=\"outline\">{resource.category}</Badge>\n              </div>\n              \n              <div className=\"flex items-center gap-sm\">\n                <Button\n                  size=\"sm\"\n                  variant=\"outline\"\n                  onClick={(e) => {\n                    e.stopPropagation();\n                    onResourceEdit(resource);\n                  }}\n                >\n                  <Edit className=\"w-4 h-4\" />\n                </Button>\n                {resource.file_url && (\n                  <Button\n                    size=\"sm\"\n                    variant=\"outline\"\n                    onClick={(e) => {\n                      e.stopPropagation();\n                      onResourceDownload(resource);\n                    }}\n                  >\n                    <Download className=\"w-4 h-4\" />\n                  </Button>\n                )}\n              </div>\n            </div>\n            \n            {resource.tags && resource.tags.length > 0 && (\n              <div className=\"mt-sm flex flex-wrap gap-xs\">\n                {resource.tags.slice(0, 3).map((tag, index) => (\n                  <Badge key={index} variant=\"secondary\" size=\"sm\">\n                    {tag}\n                  </Badge>\n                ))}\n                {resource.tags.length > 3 && (\n                  <Badge variant=\"secondary\" size=\"sm\">\n                    +{resource.tags.length - 3} more\n                  </Badge>\n                )}\n              </div>\n            )}\n          </Card>\n        );\n      })}\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ghxstship/apps/web/app/(app)/(shell)/files/views/ResourceListView.tsx","messages":[{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Star' is not defined.","line":119,"column":22,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":119,"endColumn":26},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Edit' is not defined.","line":152,"column":22,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":152,"endColumn":26},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Download' is not defined.","line":163,"column":24,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":163,"endColumn":32}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\nimport { User, FileText, Settings, Award, Calendar, TrendingUp, Activity, Clock, Plus, Search, Play, Trash2 } from \"lucide-react\";\nimport { Badge, Button } from '@ghxstship/ui';\nimport type { Resource } from '../types';\n\nconst resourceTypeIcons = {\n  policy: FileText,\n  guide: BookOpen,\n  training: GraduationCap,\n  template: File,\n  procedure: Clipboard,\n  featured: Star,\n};\n\nconst statusColors = {\n  draft: 'bg-secondary/50 color-muted',\n  under_review: 'bg-accent/10 color-accent',\n  published: 'bg-success/10 color-success',\n  archived: 'bg-warning/10 color-warning',\n};\n\ninterface ResourceListViewProps {\n  resources: Resource[];\n  onResourceClick: (resource: Resource) => void;\n  onResourceEdit: (resource: Resource) => void;\n  onResourceDownload: (resource: Resource) => void;\n  selectedResources: string[];\n  onSelectionChange: (resourceIds: string[]) => void;\n}\n\nexport default function ResourceListView({\n  resources,\n  onResourceClick,\n  onResourceEdit,\n  onResourceDownload,\n  selectedResources,\n  onSelectionChange\n}: ResourceListViewProps) {\n  const handleResourceSelect = (resourceId: string, selected: boolean) => {\n    if (selected) {\n      onSelectionChange([...selectedResources, resourceId]);\n    } else {\n      onSelectionChange(selectedResources.filter(id => id !== resourceId));\n    }\n  };\n\n  const handleSelectAll = (selected: boolean) => {\n    if (selected) {\n      onSelectionChange(resources.map(r => r.id));\n    } else {\n      onSelectionChange([]);\n    }\n  };\n\n  const allSelected = resources.length > 0 && selectedResources.length === resources.length;\n  const someSelected = selectedResources.length > 0 && selectedResources.length < resources.length;\n\n  return (\n    <div className=\"bg-background border border-border rounded-lg overflow-hidden\">\n      {/* Table Header */}\n      <div className=\"bg-muted/50 border-b border-border p-sm\">\n        <div className=\"grid grid-cols-12 gap-md items-center text-body-sm form-label\">\n          <div className=\"col-span-1\">\n            <input\n              type=\"checkbox\"\n              checked={allSelected}\n              ref={(el) => {\n                if (el) el.indeterminate = someSelected;\n              }}\n              onChange={(e) => handleSelectAll(e.target.checked)}\n              className=\"rounded border-border\"\n            />\n          </div>\n          <div className=\"col-span-4\">Resource</div>\n          <div className=\"col-span-2\">Type</div>\n          <div className=\"col-span-2\">Status</div>\n          <div className=\"col-span-1\">Views</div>\n          <div className=\"col-span-1\">Downloads</div>\n          <div className=\"col-span-1\">Actions</div>\n        </div>\n      </div>\n\n      {/* Table Body */}\n      <div className=\"divide-y divide-border\">\n        {resources.map(resource => {\n          const IconComponent = resourceTypeIcons[resource.type];\n          const isSelected = selectedResources.includes(resource.id);\n          \n          return (\n            <div \n              key={resource.id}\n              className={`grid grid-cols-12 gap-md items-center p-sm hover:bg-muted/50 cursor-pointer transition-colors ${\n                isSelected ? 'bg-primary/5' : ''\n              }`}\n              onClick={() => onResourceClick(resource)}\n            >\n              <div className=\"col-span-1\">\n                <input\n                  type=\"checkbox\"\n                  checked={isSelected}\n                  onChange={(e) => {\n                    e.stopPropagation();\n                    handleResourceSelect(resource.id, e.target.checked);\n                  }}\n                  className=\"rounded border-border\"\n                />\n              </div>\n              \n              <div className=\"col-span-4\">\n                <div className=\"flex items-center gap-sm\">\n                  <IconComponent className=\"w-4 h-4 color-accent flex-shrink-0\" />\n                  <div className=\"min-w-0\">\n                    <div className=\"font-medium text-body-sm truncate\">{resource.title}</div>\n                    {resource.description && (\n                      <div className=\"text-body-sm color-muted truncate\">{resource.description}</div>\n                    )}\n                  </div>\n                  {resource.is_featured && (\n                    <Star className=\"w-3 h-3 color-warning flex-shrink-0\" />\n                  )}\n                </div>\n              </div>\n              \n              <div className=\"col-span-2\">\n                <Badge variant=\"outline\">{resource.type}</Badge>\n              </div>\n              \n              <div className=\"col-span-2\">\n                <Badge variant=\"outline\" className={statusColors[resource.status]}>\n                  {resource.status.replace('_', ' ')}\n                </Badge>\n              </div>\n              \n              <div className=\"col-span-1 text-body-sm color-muted\">\n                {resource.view_count}\n              </div>\n              \n              <div className=\"col-span-1 text-body-sm color-muted\">\n                {resource.download_count}\n              </div>\n              \n              <div className=\"col-span-1\">\n                <div className=\"flex items-center gap-xs\">\n                  <Button\n                    size=\"sm\"\n                    variant=\"ghost\"\n                    onClick={(e) => {\n                      e.stopPropagation();\n                      onResourceEdit(resource);\n                    }}\n                  >\n                    <Edit className=\"w-3 h-3\" />\n                  </Button>\n                  {resource.file_url && (\n                    <Button\n                      size=\"sm\"\n                      variant=\"ghost\"\n                      onClick={(e) => {\n                        e.stopPropagation();\n                        onResourceDownload(resource);\n                      }}\n                    >\n                      <Download className=\"w-3 h-3\" />\n                    </Button>\n                  )}\n                </div>\n              </div>\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ghxstship/apps/web/app/(app)/(shell)/finance/FinanceClient.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadFinanceData'. Either include it or remove the dependency array.","line":60,"column":6,"nodeType":"ArrayExpression","endLine":60,"endColumn":13,"suggestions":[{"desc":"Update the dependencies array to be: [loadFinanceData, orgId]","fix":{"range":[1915,1922],"text":"[loadFinanceData, orgId]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { DollarSign, TrendingUp, TrendingDown, Banknote, CreditCard, BarChart3, AlertTriangle, CheckCircle, Clock, Calendar, ArrowUp, ArrowDown, PieChart, Calculator, Target, Plus, RefreshCw, Download, Upload, Filter, Search } from \"lucide-react\";\nimport { useState, useEffect } from 'react';\nimport { User } from '@supabase/supabase-js';\nimport { \n  Card, \n  Button, \n  Badge, \n  Skeleton,\n  Tabs,\n  TabsList,\n  TabsTrigger,\n  TabsContent,\n  DataViewProvider,\n  StateManagerProvider,\n  ViewSwitcher,\n  DataGrid,\n  KanbanBoard,\n  CalendarView,\n  ListView,\n  DataActions,\n  UniversalDrawer,\n  type DataRecord,\n  type FieldConfig,\n  type DataViewConfig\n} from '@ghxstship/ui';\n\nimport { FinanceService, type FinanceStatistics } from './lib/finance-service';\nimport { \n  BUDGET_FIELD_CONFIGS,\n  EXPENSE_FIELD_CONFIGS,\n  REVENUE_FIELD_CONFIGS,\n  TRANSACTION_FIELD_CONFIGS,\n  ACCOUNT_FIELD_CONFIGS,\n  INVOICE_FIELD_CONFIGS,\n  FORECAST_FIELD_CONFIGS\n} from './lib/field-configs';\nimport type { FinanceClientProps, FinanceRecord } from './types';\n\n// Import submodule clients\nimport BudgetsClient from './budgets/BudgetsClient';\nimport ExpensesClient from './expenses/ExpensesClient';\nimport RevenueClient from './revenue/RevenueClient';\nimport TransactionsClient from './transactions/TransactionsClient';\nimport AccountsClient from './accounts/AccountsClient';\nimport InvoicesClient from './invoices/InvoicesClient';\nimport ForecastsClient from './forecasts/ForecastsClient';\n\nexport default function FinanceClient({ user, orgId, translations }: FinanceClientProps) {\n  const [loading, setLoading] = useState(true);\n  const [statistics, setStatistics] = useState<FinanceStatistics | null>(null);\n  const [activeTab, setActiveTab] = useState('overview');\n  const [refreshing, setRefreshing] = useState(false);\n\n  const financeService = new FinanceService();\n\n  useEffect(() => {\n    loadFinanceData();\n  }, [orgId]);\n\n  const loadFinanceData = async () => {\n    try {\n      setLoading(true);\n      const stats = await financeService.getFinanceStatistics(orgId);\n      setStatistics(stats);\n    } catch (error) {\n      console.error('Error loading finance data:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleRefresh = async () => {\n    setRefreshing(true);\n    await loadFinanceData();\n    setRefreshing(false);\n  };\n\n  const formatCurrency = (amount: number, currency = 'USD') => {\n    return financeService.formatCurrency(amount, currency);\n  };\n\n  if (loading) {\n    return (\n      <div className=\"stack-lg\">\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-md\">\n          {Array.from({ length: 8 }).map((_, i) => (\n            <Card key={i} className=\"p-lg\">\n              <Skeleton className=\"h-4 w-20 mb-sm\" />\n              <Skeleton className=\"h-8 w-32 mb-xs\" />\n              <Skeleton className=\"h-3 w-16\" />\n            </Card>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"stack-lg\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-heading-2 color-foreground\">Finance Management</h1>\n          <p className=\"text-body-sm color-foreground/70 mt-xs\">{translations.subtitle}</p>\n        </div>\n        <div className=\"cluster-sm\">\n          <Button \n            variant=\"outline\" \n            onClick={handleRefresh}\n            disabled={refreshing}\n          >\n            <RefreshCw className={`h-4 w-4 mr-sm ${refreshing ? 'animate-spin' : ''}`} />\n            Refresh\n          </Button>\n        </div>\n      </div>\n\n      {/* Finance Overview Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-md\">\n        {/* Total Revenue */}\n        <Card className=\"p-lg\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-body-sm color-muted\">Total Revenue</p>\n              <p className=\"text-heading-3 color-success\">\n                {formatCurrency(statistics?.totalRevenue || 0, statistics?.currency)}\n              </p>\n              <p className=\"text-body-sm color-success flex items-center mt-xs\">\n                <TrendingUp className=\"h-3 w-3 mr-xs\" />\n                Net Income: {formatCurrency(statistics?.netIncome || 0, statistics?.currency)}\n              </p>\n            </div>\n            <Banknote className=\"h-8 w-8 color-success\" />\n          </div>\n        </Card>\n\n        {/* Total Expenses */}\n        <Card className=\"p-lg\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-body-sm color-muted\">Total Expenses</p>\n              <p className=\"text-heading-3 color-destructive\">\n                {formatCurrency(statistics?.totalExpenses || 0, statistics?.currency)}\n              </p>\n              <p className=\"text-body-sm color-muted flex items-center mt-xs\">\n                <CreditCard className=\"h-3 w-3 mr-xs\" />\n                Budget: {formatCurrency(statistics?.totalBudgets || 0, statistics?.currency)}\n              </p>\n            </div>\n            <CreditCard className=\"h-8 w-8 color-destructive\" />\n          </div>\n        </Card>\n\n        {/* Budget Utilization */}\n        <Card className=\"p-lg\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-body-sm color-muted\">Budget Utilization</p>\n              <p className=\"text-heading-3 color-foreground\">\n                {(statistics?.budgetUtilization || 0).toFixed(1)}%\n              </p>\n              <p className=\"text-body-sm color-foreground/60 mt-xs\">\n                of total budgets\n              </p>\n            </div>\n            <PieChart className=\"h-8 w-8 color-secondary\" />\n          </div>\n        </Card>\n\n        {/* Accounts Balance */}\n        <Card className=\"p-lg\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-body-sm color-muted\">Accounts Balance</p>\n              <p className=\"text-heading-3 color-foreground\">\n                {formatCurrency(statistics?.accountsBalance || 0, statistics?.currency)}\n              </p>\n              <p className=\"text-body-sm color-foreground/60 mt-xs\">\n                {statistics?.activeAccounts || 0} active accounts\n              </p>\n            </div>\n            <Banknote className=\"h-8 w-8 color-success\" />\n          </div>\n        </Card>\n\n        {/* Pending Invoices */}\n        <Card className=\"p-lg\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-body-sm color-muted\">Pending Invoices</p>\n              <p className=\"text-heading-3 color-accent\">{statistics?.pendingInvoices || 0}</p>\n              <p className=\"text-body-sm color-muted mt-xs\">Awaiting payment</p>\n            </div>\n            <Clock className=\"h-5 w-5 color-warning\" />\n          </div>\n        </Card>\n\n        {/* Overdue Invoices */}\n        <Card className=\"p-lg\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-body-sm color-muted\">Overdue Invoices</p>\n              <p className=\"text-heading-3 color-destructive\">{statistics?.overdueInvoices || 0}</p>\n              <p className=\"text-body-sm color-muted mt-xs\">Require attention</p>\n            </div>\n            <AlertTriangle className=\"h-5 w-5 color-destructive\" />\n          </div>\n        </Card>\n\n        {/* Completed Transactions */}\n        <Card className=\"p-lg\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-body-sm color-muted\">Transactions</p>\n              <p className=\"text-heading-3 color-foreground\">{statistics?.completedTransactions || 0}</p>\n              <p className=\"text-body-sm color-muted mt-xs\">Completed</p>\n            </div>\n            <CheckCircle className=\"h-5 w-5 color-success\" />\n          </div>\n        </Card>\n\n        {/* Forecast Accuracy */}\n        <Card className=\"p-lg\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-body-sm color-muted\">Forecast Accuracy</p>\n              <p className=\"text-heading-3 color-accent\">\n                {(statistics?.forecastAccuracy || 0).toFixed(1)}%\n              </p>\n              <p className=\"text-body-sm color-muted mt-xs\">Average accuracy</p>\n            </div>\n            <Target className=\"h-5 w-5 color-accent\" />\n          </div>\n        </Card>\n      </div>\n\n      {/* Finance Module Tabs */}\n      <Card className=\"p-lg\">\n        <Tabs value={activeTab} onValueChange={setActiveTab}>\n          <TabsList className=\"grid w-full grid-cols-7\">\n            <TabsTrigger value=\"budgets\">Budgets</TabsTrigger>\n            <TabsTrigger value=\"expenses\">Expenses</TabsTrigger>\n            <TabsTrigger value=\"revenue\">Revenue</TabsTrigger>\n            <TabsTrigger value=\"transactions\">Transactions</TabsTrigger>\n            <TabsTrigger value=\"accounts\">Accounts</TabsTrigger>\n            <TabsTrigger value=\"invoices\">Invoices</TabsTrigger>\n            <TabsTrigger value=\"forecasts\">Forecasts</TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"budgets\" className=\"mt-lg\">\n            <BudgetsClient user={user} orgId={orgId} translations={translations} />\n          </TabsContent>\n\n          <TabsContent value=\"expenses\" className=\"mt-lg\">\n            <ExpensesClient user={user} orgId={orgId} translations={translations} />\n          </TabsContent>\n\n          <TabsContent value=\"revenue\" className=\"mt-lg\">\n            <RevenueClient user={user} orgId={orgId} translations={translations} />\n          </TabsContent>\n\n          <TabsContent value=\"transactions\" className=\"mt-lg\">\n            <TransactionsClient user={user} orgId={orgId} translations={translations} />\n          </TabsContent>\n\n          <TabsContent value=\"accounts\" className=\"mt-lg\">\n            <AccountsClient user={user} orgId={orgId} translations={translations} />\n          </TabsContent>\n\n          <TabsContent value=\"invoices\" className=\"mt-lg\">\n            <InvoicesClient user={user} orgId={orgId} translations={translations} />\n          </TabsContent>\n\n          <TabsContent value=\"forecasts\" className=\"mt-lg\">\n            <ForecastsClient user={user} orgId={orgId} translations={translations} />\n          </TabsContent>\n        </Tabs>\n      </Card>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ghxstship/apps/web/app/(app)/(shell)/finance/accounts/AccountsClient.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadAccounts'. Either include it or remove the dependency array.","line":73,"column":6,"nodeType":"ArrayExpression","endLine":73,"endColumn":13,"suggestions":[{"desc":"Update the dependencies array to be: [loadAccounts, orgId]","fix":{"range":[1924,1931],"text":"[loadAccounts, orgId]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { Calculator, Plus, Edit, Trash2, RefreshCw, AlertTriangle, CheckCircle, Clock, DollarSign, TrendingUp, TrendingDown, Building, FileText, Hash, Search, Filter } from \"lucide-react\";\nimport { useState, useEffect } from 'react';\nimport { User } from '@supabase/supabase-js';\nimport { createBrowserClient } from '@ghxstship/auth';\nimport { \n  Card, \n  Button, \n  Badge, \n  Skeleton, \n  UnifiedInput,\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n  DataViewProvider,\n  StateManagerProvider,\n  ViewSwitcher,\n  DataGrid,\n  KanbanBoard,\n  CalendarView,\n  ListView,\n  DataActions,\n  UniversalDrawer,\n  type DataRecord,\n  type FieldConfig,\n  type DataViewConfig\n} from '@ghxstship/ui';\n\ninterface AccountsClientProps {\n  user: User;\n  orgId: string;\n  translations: {\n    title: string;\n    subtitle: string;\n  };\n}\n\ninterface GLAccount {\n  id: string;\n  account_number: string;\n  name: string;\n  description?: string;\n  type: 'asset' | 'liability' | 'equity' | 'revenue' | 'expense';\n  subtype?: string;\n  parent_account_id?: string;\n  is_active: boolean;\n  currency: string;\n  balance: number;\n  normal_balance: 'debit' | 'credit';\n  notes?: string;\n  created_by?: string;\n  created_at: string;\n  updated_at: string;\n  organization_id: string;\n}\n\nexport default function AccountsClient({ user, orgId, translations }: AccountsClientProps) {\n  const [loading, setLoading] = useState(true);\n  const [accounts, setAccounts] = useState<GLAccount[]>([]);\n  const [selectedAccount, setSelectedAccount] = useState<GLAccount | null>(null);\n  const [drawerOpen, setDrawerOpen] = useState(false);\n  const [drawerMode, setDrawerMode] = useState<'create' | 'edit' | 'view'>('view');\n  const [filterType, setFilterType] = useState<string>('all');\n  const [searchTerm, setSearchTerm] = useState<string>('');\n\n  const supabase = createBrowserClient();\n\n  useEffect(() => {\n    loadAccounts();\n  }, [orgId]);\n\n  const loadAccounts = async () => {\n    try {\n      setLoading(true);\n      const { data, error } = await supabase\n        .from('accounts')\n        .select('*')\n        .eq('organization_id', orgId)\n        .order('account_number', { ascending: true });\n\n      if (error) throw error;\n      setAccounts(data || []);\n    } catch (error) {\n      console.error('Error loading accounts:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleCreateAccount = () => {\n    setSelectedAccount(null);\n    setDrawerMode('create');\n    setDrawerOpen(true);\n  };\n\n  const handleEditAccount = (account: GLAccount) => {\n    setSelectedAccount(account);\n    setDrawerMode('edit');\n    setDrawerOpen(true);\n  };\n\n  const handleViewAccount = (account: GLAccount) => {\n    setSelectedAccount(account);\n    setDrawerMode('view');\n    setDrawerOpen(true);\n  };\n\n  const handleDeleteAccount = async (accountId: string) => {\n    if (!confirm('Are you sure you want to delete this account? This action cannot be undone.')) return;\n\n    try {\n      const response = await fetch(`/api/v1/finance/accounts`, {\n        method: 'DELETE',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ id: accountId })\n      });\n\n      if (!response.ok) throw new Error('Failed to delete account');\n      await loadAccounts();\n    } catch (error) {\n      console.error('Error deleting account:', error);\n    }\n  };\n\n  const handleSaveAccount = async (accountData: Partial<GLAccount>) => {\n    try {\n      if (drawerMode === 'create') {\n        const response = await fetch('/api/v1/finance/accounts', {\n          method: 'POST',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify({\n            accountNumber: accountData.account_number,\n            name: accountData.name,\n            description: accountData.description,\n            type: accountData.type,\n            subtype: accountData.subtype,\n            parentAccountId: accountData.parent_account_id,\n            isActive: accountData.is_active,\n            currency: accountData.currency,\n            balance: accountData.balance,\n            notes: accountData.notes\n          })\n        });\n\n        if (!response.ok) throw new Error('Failed to create account');\n      } else if (drawerMode === 'edit' && selectedAccount) {\n        const response = await fetch('/api/v1/finance/accounts', {\n          method: 'PUT',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify({\n            id: selectedAccount.id,\n            accountNumber: accountData.account_number,\n            name: accountData.name,\n            description: accountData.description,\n            type: accountData.type,\n            subtype: accountData.subtype,\n            parentAccountId: accountData.parent_account_id,\n            isActive: accountData.is_active,\n            currency: accountData.currency,\n            balance: accountData.balance,\n            notes: accountData.notes\n          })\n        });\n\n        if (!response.ok) throw new Error('Failed to update account');\n      }\n\n      setDrawerOpen(false);\n      await loadAccounts();\n    } catch (error) {\n      console.error('Error saving account:', error);\n    }\n  };\n\n  const filteredAccounts = accounts.filter(account => {\n    const matchesSearch = searchTerm === '' || \n      account.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      account.account_number.includes(searchTerm);\n    const matchesType = filterType === 'all' || account.type === filterType;\n    return matchesSearch && matchesType;\n  });\n\n  const getAccountIcon = (account: GLAccount) => {\n    switch (account.type) {\n      case 'asset':\n        return <Building className=\"h-5 w-5\" />;\n      case 'liability':\n        return <AlertTriangle className=\"h-5 w-5\" />;\n      case 'equity':\n        return <CheckCircle className=\"h-5 w-5\" />;\n      case 'revenue':\n        return <TrendingUp className=\"h-5 w-5\" />;\n      case 'expense':\n        return <TrendingDown className=\"h-5 w-5\" />;\n      default:\n        return <Calculator className=\"h-5 w-5\" />;\n    }\n  };\n\n  const getAccountTypeColor = (account: GLAccount) => {\n    switch (account.type) {\n      case 'asset':\n        return 'bg-blue-100 text-blue-800';\n      case 'liability':\n        return 'bg-red-100 text-red-800';\n      case 'equity':\n        return 'bg-purple-100 text-purple-800';\n      case 'revenue':\n        return 'bg-green-100 text-green-800';\n      case 'expense':\n        return 'bg-orange-100 text-orange-800';\n      default:\n        return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  const formatCurrency = (amount: number, currency = 'USD') => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: currency,\n    }).format(amount);\n  };\n\n  // ATLVS DataViews field configuration\n  const fields: FieldConfig[] = [\n    {\n      key: 'account_number',\n      label: 'Account Number',\n      type: 'text',\n      required: true,\n      sortable: true,\n      filterable: true\n    },\n    {\n      key: 'name',\n      label: 'Account Name',\n      type: 'text',\n      required: true,\n      sortable: true,\n      filterable: true\n    },\n    {\n      key: 'type',\n      label: 'Type',\n      type: 'select',\n      options: [\n        { value: 'asset', label: 'Asset' },\n        { value: 'liability', label: 'Liability' },\n        { value: 'equity', label: 'Equity' },\n        { value: 'revenue', label: 'Revenue' },\n        { value: 'expense', label: 'Expense' }\n      ],\n      required: true,\n      filterable: true,\n      sortable: true\n    },\n    {\n      key: 'subtype',\n      label: 'Subtype',\n      type: 'text',\n      sortable: true,\n      filterable: true\n    },\n    {\n      key: 'balance',\n      label: 'Balance',\n      type: 'currency',\n      sortable: true,\n      filterable: true\n    },\n    {\n      key: 'normal_balance',\n      label: 'Normal Balance',\n      type: 'select',\n      options: [\n        { value: 'debit', label: 'Debit' },\n        { value: 'credit', label: 'Credit' }\n      ],\n      filterable: true,\n      sortable: true\n    },\n    {\n      key: 'is_active',\n      label: 'Active',\n      type: 'boolean',\n      filterable: true,\n      sortable: true\n    },\n    {\n      key: 'description',\n      label: 'Description',\n      type: 'textarea',\n      rows: 2,\n      filterable: true\n    }\n  ];\n\n  // ATLVS DataViews configuration\n  const accountsConfig: DataViewConfig = {\n    id: 'gl-accounts-dataviews',\n    name: 'Chart of Accounts',\n    viewType: 'grid',\n    defaultView: 'grid',\n    fields,\n    data: filteredAccounts.map(account => ({\n      ...account,\n      record_type: 'gl_account'\n    })),\n    pagination: {\n      page: 1,\n      pageSize: 25,\n      total: filteredAccounts.length\n    },\n    onSearch: (query: string) => {\n      setSearchTerm(query);\n    },\n    onFilter: (filters: unknown) => {\n      if (filters.type) setFilterType(filters.type);\n    },\n    onSort: (sorts: unknown) => {\n      console.log('Sort:', sorts);\n    },\n    onRefresh: () => {\n      loadAccounts();\n    },\n    onExport: (data, format) => {\n      console.log('Export:', format, data);\n    },\n    onImport: (data: unknown) => {\n      console.log('Import:', data);\n    },\n    onRowAction: (action: string, record: DataRecord) => {\n      const account = record as GLAccount;\n      switch (action) {\n        case 'view':\n          handleViewAccount(account);\n          break;\n        case 'edit':\n          handleEditAccount(account);\n          break;\n        case 'delete':\n          handleDeleteAccount(account.id);\n          break;\n      }\n    }\n  };\n\n  const configWithData = {\n    ...accountsConfig,\n    data: filteredAccounts.map(account => ({\n      ...account,\n      record_type: 'gl_account'\n    }))\n  };\n\n  if (loading) {\n    return (\n      <div className=\"space-y-4\">\n        <div className=\"flex justify-between items-center\">\n          <div>\n            <Skeleton className=\"h-8 w-48\" />\n            <Skeleton className=\"h-4 w-96 mt-2\" />\n          </div>\n          <Skeleton className=\"h-10 w-32\" />\n        </div>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n          {[...Array(6)].map((_, i) => (\n            <Skeleton key={i} className=\"h-32\" />\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"h-full flex flex-col\">\n      {/* Header */}\n      <div className=\"flex justify-between items-center mb-6\">\n        <div>\n          <h1 className=\"text-2xl font-bold text-gray-900\">Chart of Accounts</h1>\n          <p className=\"text-gray-600\">Manage your general ledger accounts</p>\n        </div>\n        <Button onClick={handleCreateAccount} className=\"flex items-center gap-2\">\n          <Plus className=\"h-4 w-4\" />\n          New Account\n        </Button>\n      </div>\n\n      {/* Filters */}\n      <div className=\"flex gap-4 mb-6\">\n        <div className=\"flex-1\">\n          <UnifiedInput\n            placeholder=\"Search accounts...\"\n            value={searchTerm}\n            onChange={(e) => setSearchTerm(e.target.value)}\n            leftIcon={<Search className=\"h-4 w-4\" />}\n          />\n        </div>\n        <Select value={filterType} onValueChange={setFilterType}>\n          <SelectTrigger className=\"w-48\">\n            <SelectValue placeholder=\"Filter by type\" />\n          </SelectTrigger>\n          <SelectContent>\n            <SelectItem value=\"all\">All Types</SelectItem>\n            <SelectItem value=\"asset\">Assets</SelectItem>\n            <SelectItem value=\"liability\">Liabilities</SelectItem>\n            <SelectItem value=\"equity\">Equity</SelectItem>\n            <SelectItem value=\"revenue\">Revenue</SelectItem>\n            <SelectItem value=\"expense\">Expenses</SelectItem>\n          </SelectContent>\n        </Select>\n      </div>\n\n      {/* ATLVS DataViews */}\n      <div className=\"flex-1\">\n        <DataViewProvider config={configWithData}>\n          <StateManagerProvider>\n            <div className=\"flex-1 space-y-4\">\n              {/* View Switcher and Actions */}\n              <div className=\"flex justify-between items-center\">\n                <ViewSwitcher />\n                <DataActions />\n              </div>\n\n              {/* Data Views */}\n              <div className=\"flex-1\">\n                <DataGrid />\n                <KanbanBoard \n                  columns={[\n                    { id: 'asset', title: 'Assets' },\n                    { id: 'liability', title: 'Liabilities' },\n                    { id: 'equity', title: 'Equity' },\n                    { id: 'revenue', title: 'Revenue' },\n                    { id: 'expense', title: 'Expenses' }\n                  ]}\n                  statusField=\"type\"\n                  titleField=\"name\"\n                />\n                <CalendarView \n                  startDateField=\"created_at\"\n                  titleField=\"name\"\n                />\n                <ListView titleField=\"name\" />\n              </div>\n            </div>\n          </StateManagerProvider>\n        </DataViewProvider>\n      </div>\n\n      {/* Universal Drawer for CRUD operations */}\n      <UniversalDrawer\n        open={drawerOpen}\n        onClose={() => setDrawerOpen(false)}\n        title={\n          drawerMode === 'create' ? 'Create Account' :\n          drawerMode === 'edit' ? 'Edit Account' : 'Account Details'\n        }\n        mode={drawerMode}\n        data={selectedAccount}\n        fields={fields}\n        onSave={handleSaveAccount}\n        tabs={[\n          {\n            key: 'details',\n            label: 'Account Details',\n            content: (\n              <div className=\"space-y-4\">\n                {selectedAccount && (\n                  <>\n                    <div className=\"flex items-center gap-3\">\n                      {getAccountIcon(selectedAccount)}\n                      <div>\n                        <h3 className=\"font-semibold\">{selectedAccount.name}</h3>\n                        <p className=\"text-sm text-gray-600\">#{selectedAccount.account_number}</p>\n                      </div>\n                      <Badge className={getAccountTypeColor(selectedAccount)}>\n                        {selectedAccount.type}\n                      </Badge>\n                    </div>\n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <div>\n                        <label className=\"text-sm font-medium text-gray-700\">Balance</label>\n                        <p className=\"text-lg font-semibold\">{formatCurrency(selectedAccount.balance)}</p>\n                      </div>\n                      <div>\n                        <label className=\"text-sm font-medium text-gray-700\">Normal Balance</label>\n                        <p className=\"capitalize\">{selectedAccount.normal_balance}</p>\n                      </div>\n                    </div>\n                    {selectedAccount.description && (\n                      <div>\n                        <label className=\"text-sm font-medium text-gray-700\">Description</label>\n                        <p className=\"text-sm text-gray-600\">{selectedAccount.description}</p>\n                      </div>\n                    )}\n                  </>\n                )}\n              </div>\n            )\n          }\n        ]}\n      />\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ghxstship/apps/web/app/(app)/(shell)/finance/accounts/CreateAccountClient.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadParentAccounts'. Either include it or remove the dependency array.","line":118,"column":6,"nodeType":"ArrayExpression","endLine":118,"endColumn":29,"suggestions":[{"desc":"Update the dependencies array to be: [isOpen, formData.type, loadParentAccounts]","fix":{"range":[3267,3290],"text":"[isOpen, formData.type, loadParentAccounts]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { Plus, Calculator, Building, AlertTriangle, CheckCircle, TrendingUp, TrendingDown } from \"lucide-react\";\nimport { useCallback, useEffect, useMemo, useState, type ChangeEvent, type FormEvent } from 'react';\nimport { User } from '@supabase/supabase-js';\nimport { createBrowserClient } from '@ghxstship/auth';\nimport {\n  Button,\n  Card,\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n  Textarea,\n  UnifiedInput,\n  Checkbox,\n} from '@ghxstship/ui';\nimport AppDrawer, { type DrawerTab } from '@/app/_components/shared/AppDrawer';\n\ninterface CreateAccountClientProps {\n  user: User;\n  orgId: string;\n  isOpen: boolean;\n  onClose: () => void;\n  onSuccess?: (account: CreatedAccount) => void;\n}\n\ntype AccountType = 'asset' | 'liability' | 'equity' | 'revenue' | 'expense';\ntype AccountCurrency = 'USD' | 'EUR' | 'GBP' | 'CAD' | 'AUD';\n\ninterface AccountFormData {\n  accountNumber: string;\n  name: string;\n  description: string;\n  type: AccountType;\n  subtype: string;\n  parentAccountId: string;\n  isActive: boolean;\n  currency: AccountCurrency;\n  balance: number;\n  notes: string;\n}\n\ninterface CreatedAccount {\n  id: string;\n  organization_id: string;\n  created_at: string;\n}\n\nconst ACCOUNT_TYPES: ReadonlyArray<{ value: AccountType; label: string; icon: React.ReactNode }> = [\n  { value: 'asset', label: 'Asset', icon: <Building className=\"h-4 w-4\" /> },\n  { value: 'liability', label: 'Liability', icon: <AlertTriangle className=\"h-4 w-4\" /> },\n  { value: 'equity', label: 'Equity', icon: <CheckCircle className=\"h-4 w-4\" /> },\n  { value: 'revenue', label: 'Revenue', icon: <TrendingUp className=\"h-4 w-4\" /> },\n  { value: 'expense', label: 'Expense', icon: <TrendingDown className=\"h-4 w-4\" /> },\n];\n\nconst ASSET_SUBTYPES = [\n  'current', 'fixed', 'intangible', 'contra', 'investment'\n];\n\nconst LIABILITY_SUBTYPES = [\n  'current', 'long-term', 'contingent'\n];\n\nconst EQUITY_SUBTYPES = [\n  'capital', 'retained', 'distribution', 'other'\n];\n\nconst REVENUE_SUBTYPES = [\n  'operating', 'non-operating', 'other'\n];\n\nconst EXPENSE_SUBTYPES = [\n  'cogs', 'operating', 'non-operating', 'other'\n];\n\nconst CURRENCIES: ReadonlyArray<{ value: AccountCurrency; label: string }> = [\n  { value: 'USD', label: 'US Dollar (USD)' },\n  { value: 'EUR', label: 'Euro (EUR)' },\n  { value: 'GBP', label: 'British Pound (GBP)' },\n  { value: 'CAD', label: 'Canadian Dollar (CAD)' },\n  { value: 'AUD', label: 'Australian Dollar (AUD)' },\n];\n\nconst initialFormData: AccountFormData = {\n  accountNumber: '',\n  name: '',\n  description: '',\n  type: 'asset',\n  subtype: '',\n  parentAccountId: '',\n  isActive: true,\n  currency: 'USD',\n  balance: 0,\n  notes: '',\n};\n\nexport default function CreateAccountClient({\n  user,\n  orgId,\n  isOpen,\n  onClose,\n  onSuccess,\n}: CreateAccountClientProps) {\n  const [formData, setFormData] = useState<AccountFormData>(initialFormData);\n  const [loading, setLoading] = useState(false);\n  const [errors, setErrors] = useState<Partial<Record<keyof AccountFormData, string>>>({});\n  const [parentAccounts, setParentAccounts] = useState<Array<{ id: string; name: string; account_number: string }>>([]);\n\n  const supabase = createBrowserClient();\n\n  useEffect(() => {\n    if (isOpen) {\n      loadParentAccounts();\n    }\n  }, [isOpen, formData.type]);\n\n  const loadParentAccounts = async () => {\n    try {\n      const { data, error } = await supabase\n        .from('accounts')\n        .select('id, name, account_number')\n        .eq('organization_id', orgId)\n        .eq('type', formData.type)\n        .eq('is_active', true)\n        .is('parent_account_id', null)\n        .order('account_number');\n\n      if (error) throw error;\n      setParentAccounts(data || []);\n    } catch (error) {\n      console.error('Error loading parent accounts:', error);\n    }\n  };\n\n  const getSubtypeOptions = useMemo(() => {\n    switch (formData.type) {\n      case 'asset':\n        return ASSET_SUBTYPES;\n      case 'liability':\n        return LIABILITY_SUBTYPES;\n      case 'equity':\n        return EQUITY_SUBTYPES;\n      case 'revenue':\n        return REVENUE_SUBTYPES;\n      case 'expense':\n        return EXPENSE_SUBTYPES;\n      default:\n        return [];\n    }\n  }, [formData.type]);\n\n  const handleInputChange = useCallback((field: keyof AccountFormData, value: unknown) => {\n    setFormData(prev => ({ ...prev, [field]: value }));\n    if (errors[field]) {\n      setErrors(prev => ({ ...prev, [field]: undefined }));\n    }\n  }, [errors]);\n\n  const validateForm = useCallback((): boolean => {\n    const newErrors: Partial<Record<keyof AccountFormData, string>> = {};\n\n    if (!formData.accountNumber.trim()) {\n      newErrors.accountNumber = 'Account number is required';\n    }\n\n    if (!formData.name.trim()) {\n      newErrors.name = 'Account name is required';\n    }\n\n    if (!formData.type) {\n      newErrors.type = 'Account type is required';\n    }\n\n    if (formData.balance < 0) {\n      newErrors.balance = 'Balance cannot be negative';\n    }\n\n    setErrors(newErrors);\n    return Object.keys(newErrors).length === 0;\n  }, [formData]);\n\n  const handleSubmit = async (e: FormEvent) => {\n    e.preventDefault();\n    \n    if (!validateForm()) return;\n\n    setLoading(true);\n    try {\n      const response = await fetch('/api/v1/finance/accounts', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          accountNumber: formData.accountNumber,\n          name: formData.name,\n          description: formData.description || undefined,\n          type: formData.type,\n          subtype: formData.subtype || undefined,\n          parentAccountId: formData.parentAccountId || undefined,\n          isActive: formData.isActive,\n          currency: formData.currency,\n          balance: formData.balance,\n          notes: formData.notes || undefined,\n        }),\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.error || 'Failed to create account');\n      }\n\n      const { account } = await response.json();\n      \n      setFormData(initialFormData);\n      setErrors({});\n      onSuccess?.(account);\n      onClose();\n    } catch (error) {\n      console.error('Error creating account:', error);\n      setErrors({ name: error instanceof Error ? error.message : 'Failed to create account' });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleClose = useCallback(() => {\n    setFormData(initialFormData);\n    setErrors({});\n    onClose();\n  }, [onClose]);\n\n  const tabs: DrawerTab[] = [\n    {\n      key: 'basic',\n      label: 'Basic Information',\n      content: (\n        <div className=\"space-y-4\">\n          <div className=\"grid grid-cols-2 gap-4\">\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                Account Number *\n              </label>\n              <UnifiedInput\n                value={formData.accountNumber}\n                onChange={(e) => handleInputChange('accountNumber', e.target.value)}\n                placeholder=\"e.g., 1000, 2000, 4000\"\n                error={errors.accountNumber}\n              />\n            </div>\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                Account Type *\n              </label>\n              <Select\n                value={formData.type}\n                onValueChange={(value: AccountType) => {\n                  handleInputChange('type', value);\n                  handleInputChange('subtype', '');\n                  handleInputChange('parentAccountId', '');\n                }}\n              >\n                <SelectTrigger>\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  {ACCOUNT_TYPES.map((type) => (\n                    <SelectItem key={type.value} value={type.value}>\n                      <div className=\"flex items-center gap-2\">\n                        {type.icon}\n                        {type.label}\n                      </div>\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n              {errors.type && <p className=\"text-sm text-red-600 mt-1\">{errors.type}</p>}\n            </div>\n          </div>\n\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n              Account Name *\n            </label>\n            <UnifiedInput\n              value={formData.name}\n              onChange={(e) => handleInputChange('name', e.target.value)}\n              placeholder=\"Enter account name\"\n              error={errors.name}\n            />\n          </div>\n\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n              Description\n            </label>\n            <Textarea\n              value={formData.description}\n              onChange={(e) => handleInputChange('description', e.target.value)}\n              placeholder=\"Optional description of the account\"\n              rows={3}\n            />\n          </div>\n        </div>\n      ),\n    },\n    {\n      key: 'details',\n      label: 'Account Details',\n      content: (\n        <div className=\"space-y-4\">\n          <div className=\"grid grid-cols-2 gap-4\">\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                Subtype\n              </label>\n              <Select\n                value={formData.subtype}\n                onValueChange={(value) => handleInputChange('subtype', value)}\n              >\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Select subtype\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {getSubtypeOptions.map((subtype) => (\n                    <SelectItem key={subtype} value={subtype}>\n                      {subtype.charAt(0).toUpperCase() + subtype.slice(1)}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                Parent Account\n              </label>\n              <Select\n                value={formData.parentAccountId}\n                onValueChange={(value) => handleInputChange('parentAccountId', value)}\n              >\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Select parent account\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {parentAccounts.map((account) => (\n                    <SelectItem key={account.id} value={account.id}>\n                      {account.account_number} - {account.name}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n\n          <div className=\"grid grid-cols-2 gap-4\">\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                Currency\n              </label>\n              <Select\n                value={formData.currency}\n                onValueChange={(value: AccountCurrency) => handleInputChange('currency', value)}\n              >\n                <SelectTrigger>\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  {CURRENCIES.map((currency) => (\n                    <SelectItem key={currency.value} value={currency.value}>\n                      {currency.label}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                Opening Balance\n              </label>\n              <UnifiedInput\n                type=\"number\"\n                value={formData.balance.toString()}\n                onChange={(e) => handleInputChange('balance', parseFloat(e.target.value) || 0)}\n                placeholder=\"0.00\"\n                step=\"0.01\"\n                error={errors.balance}\n              />\n            </div>\n          </div>\n\n          <div className=\"flex items-center space-x-2\">\n            <Checkbox\n              id=\"isActive\"\n              checked={formData.isActive}\n              onCheckedChange={(checked) => handleInputChange('isActive', checked)}\n            />\n            <label htmlFor=\"isActive\" className=\"text-sm font-medium text-gray-700\">\n              Account is active\n            </label>\n          </div>\n\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n              Notes\n            </label>\n            <Textarea\n              value={formData.notes}\n              onChange={(e) => handleInputChange('notes', e.target.value)}\n              placeholder=\"Additional notes or comments\"\n              rows={3}\n            />\n          </div>\n        </div>\n      ),\n    },\n  ];\n\n  return (\n    <AppDrawer\n      title=\"Create New Account\"\n      open={isOpen}\n      onClose={handleClose}\n      tabs={tabs}\n      actions={\n        <div className=\"flex gap-2\">\n          <Button variant=\"outline\" onClick={handleClose} disabled={loading}>\n            Cancel\n          </Button>\n          <Button onClick={handleSubmit} disabled={loading}>\n            {loading ? 'Creating...' : 'Create Account'}\n          </Button>\n        </div>\n      }\n    />\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ghxstship/apps/web/app/(app)/(shell)/finance/accounts/drawers/CreateAccountDrawer.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadParentAccounts'. Either include it or remove the dependency array.","line":103,"column":6,"nodeType":"ArrayExpression","endLine":103,"endColumn":29,"suggestions":[{"desc":"Update the dependencies array to be: [formData.type, isOpen, loadParentAccounts]","fix":{"range":[2418,2441],"text":"[formData.type, isOpen, loadParentAccounts]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Building, CreditCard, TrendingUp, DollarSign, Minus, Save, X } from \"lucide-react\";\n/**\n * Create Account Drawer Component\n * Specialized drawer for creating/editing GL Accounts\n */\n\n'use client';\n\nimport React, { useState, useEffect } from 'react';\nimport { \n  Drawer,\n  DrawerContent,\n  DrawerHeader,\n  DrawerTitle,\n  DrawerDescription,\n  DrawerFooter,\n  Button,\n  UnifiedInput,\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n  Textarea,\n  Switch,\n  Badge,\n  Tabs,\n  TabsContent,\n  TabsList,\n  TabsTrigger\n} from '@ghxstship/ui';\nimport type { GLAccount, AccountType, AccountFormData } from '../types';\nimport { accountsService } from '../lib/accountsService';\n\ninterface CreateAccountDrawerProps {\n  isOpen: boolean;\n  onClose: () => void;\n  onSuccess: () => void;\n  editAccount?: GLAccount | null;\n  orgId: string;\n}\n\nexport default function CreateAccountDrawer({\n  isOpen,\n  onClose,\n  onSuccess,\n  editAccount,\n  orgId\n}: CreateAccountDrawerProps) {\n  const [loading, setLoading] = useState(false);\n  const [parentAccounts, setParentAccounts] = useState<GLAccount[]>([]);\n  const [formData, setFormData] = useState<AccountFormData>({\n    account_number: '',\n    name: '',\n    description: '',\n    type: 'asset',\n    subtype: '',\n    parent_account_id: '',\n    is_active: true,\n    currency: 'USD',\n    opening_balance: 0,\n    notes: ''\n  });\n\n  const [errors, setErrors] = useState<Record<string, string>>({});\n\n  useEffect(() => {\n    if (editAccount) {\n      setFormData({\n        account_number: editAccount.account_number,\n        name: editAccount.name,\n        description: editAccount.description || '',\n        type: editAccount.type,\n        subtype: editAccount.subtype || '',\n        parent_account_id: editAccount.parent_account_id || '',\n        is_active: editAccount.is_active,\n        currency: editAccount.currency,\n        opening_balance: editAccount.balance,\n        notes: ''\n      });\n    } else {\n      // Reset form for new account\n      setFormData({\n        account_number: '',\n        name: '',\n        description: '',\n        type: 'asset',\n        subtype: '',\n        parent_account_id: '',\n        is_active: true,\n        currency: 'USD',\n        opening_balance: 0,\n        notes: ''\n      });\n    }\n    setErrors({});\n  }, [editAccount, isOpen]);\n\n  useEffect(() => {\n    if (formData.type && isOpen) {\n      loadParentAccounts();\n    }\n  }, [formData.type, isOpen]);\n\n  const loadParentAccounts = async () => {\n    try {\n      const accounts = await accountsService.getParentAccounts(orgId, formData.type);\n      setParentAccounts(accounts);\n    } catch (error) {\n      console.error('Error loading parent accounts:', error);\n    }\n  };\n\n  const getAccountTypeIcon = (type: AccountType) => {\n    const icons = {\n      asset: <Building className=\"h-4 w-4\" />,\n      liability: <CreditCard className=\"h-4 w-4\" />,\n      equity: <TrendingUp className=\"h-4 w-4\" />,\n      revenue: <DollarSign className=\"h-4 w-4\" />,\n      expense: <Minus className=\"h-4 w-4\" />\n    };\n    return icons[type];\n  };\n\n  const getSubtypeOptions = (type: AccountType) => {\n    const subtypes = {\n      asset: [\n        { value: 'current_assets', label: 'Current Assets' },\n        { value: 'fixed_assets', label: 'Fixed Assets' },\n        { value: 'intangible_assets', label: 'Intangible Assets' },\n        { value: 'investments', label: 'Investments' },\n        { value: 'other_assets', label: 'Other Assets' }\n      ],\n      liability: [\n        { value: 'current_liabilities', label: 'Current Liabilities' },\n        { value: 'long_term_liabilities', label: 'Long-term Liabilities' },\n        { value: 'other_liabilities', label: 'Other Liabilities' }\n      ],\n      equity: [\n        { value: 'owners_equity', label: 'Owner\\'s Equity' },\n        { value: 'retained_earnings', label: 'Retained Earnings' },\n        { value: 'capital_stock', label: 'Capital Stock' },\n        { value: 'other_equity', label: 'Other Equity' }\n      ],\n      revenue: [\n        { value: 'operating_revenue', label: 'Operating Revenue' },\n        { value: 'non_operating_revenue', label: 'Non-operating Revenue' },\n        { value: 'other_income', label: 'Other Income' }\n      ],\n      expense: [\n        { value: 'operating_expenses', label: 'Operating Expenses' },\n        { value: 'cost_of_goods_sold', label: 'Cost of Goods Sold' },\n        { value: 'administrative_expenses', label: 'Administrative Expenses' },\n        { value: 'other_expenses', label: 'Other Expenses' }\n      ]\n    };\n    return subtypes[type] || [];\n  };\n\n  const validateForm = (): boolean => {\n    const newErrors: Record<string, string> = {};\n\n    if (!formData.account_number.trim()) {\n      newErrors.account_number = 'Account number is required';\n    }\n\n    if (!formData.name.trim()) {\n      newErrors.name = 'Account name is required';\n    }\n\n    if (!formData.type) {\n      newErrors.type = 'Account type is required';\n    }\n\n    setErrors(newErrors);\n    return Object.keys(newErrors).length === 0;\n  };\n\n  const handleSubmit = async () => {\n    if (!validateForm()) return;\n\n    setLoading(true);\n    try {\n      const accountData = {\n        accountNumber: formData.account_number,\n        name: formData.name,\n        description: formData.description,\n        type: formData.type,\n        subtype: formData.subtype,\n        parentAccountId: formData.parent_account_id || undefined,\n        isActive: formData.is_active,\n        currency: formData.currency,\n        openingBalance: formData.opening_balance || 0\n      };\n\n      if (editAccount) {\n        await accountsService.updateAccount({\n          id: editAccount.id,\n          ...accountData\n        });\n      } else {\n        await accountsService.createAccount(accountData);\n      }\n\n      onSuccess();\n      onClose();\n    } catch (error) {\n      console.error('Error saving account:', error);\n      setErrors({ submit: 'Failed to save account. Please try again.' });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleInputChange = (field: keyof AccountFormData, value: unknown) => {\n    setFormData(prev => ({ ...prev, [field]: value }));\n    if (errors[field]) {\n      setErrors(prev => ({ ...prev, [field]: '' }));\n    }\n  };\n\n  const normalBalance = formData.type === 'asset' || formData.type === 'expense' ? 'debit' : 'credit';\n\n  return (\n    <Drawer open={isOpen} onOpenChange={onClose}>\n      <DrawerContent className=\"max-w-2xl mx-auto\">\n        <DrawerHeader>\n          <DrawerTitle className=\"flex items-center gap-2\">\n            {getAccountTypeIcon(formData.type)}\n            {editAccount ? 'Edit Account' : 'Create New Account'}\n          </DrawerTitle>\n          <DrawerDescription>\n            {editAccount \n              ? 'Update the account information below.'\n              : 'Create a new GL account for your chart of accounts.'\n            }\n          </DrawerDescription>\n        </DrawerHeader>\n\n        <div className=\"px-6 py-4\">\n          <Tabs defaultValue=\"basic\" className=\"w-full\">\n            <TabsList className=\"grid w-full grid-cols-2\">\n              <TabsTrigger value=\"basic\">Basic Information</TabsTrigger>\n              <TabsTrigger value=\"details\">Account Details</TabsTrigger>\n            </TabsList>\n\n            <TabsContent value=\"basic\" className=\"space-y-4 mt-6\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <label className=\"text-sm font-medium text-gray-700 mb-2 block\">\n                    Account Number *\n                  </label>\n                  <UnifiedInput\n                    value={formData.account_number}\n                    onChange={(e) => handleInputChange('account_number', e.target.value)}\n                    placeholder=\"e.g., 1000\"\n                    error={errors.account_number}\n                  />\n                </div>\n\n                <div>\n                  <label className=\"text-sm font-medium text-gray-700 mb-2 block\">\n                    Account Type *\n                  </label>\n                  <Select \n                    value={formData.type} \n                    onValueChange={(value) => handleInputChange('type', value as AccountType)}\n                  >\n                    <SelectTrigger>\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"asset\">\n                        <div className=\"flex items-center gap-2\">\n                          <Building className=\"h-4 w-4\" />\n                          Asset\n                        </div>\n                      </SelectItem>\n                      <SelectItem value=\"liability\">\n                        <div className=\"flex items-center gap-2\">\n                          <CreditCard className=\"h-4 w-4\" />\n                          Liability\n                        </div>\n                      </SelectItem>\n                      <SelectItem value=\"equity\">\n                        <div className=\"flex items-center gap-2\">\n                          <TrendingUp className=\"h-4 w-4\" />\n                          Equity\n                        </div>\n                      </SelectItem>\n                      <SelectItem value=\"revenue\">\n                        <div className=\"flex items-center gap-2\">\n                          <DollarSign className=\"h-4 w-4\" />\n                          Revenue\n                        </div>\n                      </SelectItem>\n                      <SelectItem value=\"expense\">\n                        <div className=\"flex items-center gap-2\">\n                          <Minus className=\"h-4 w-4\" />\n                          Expense\n                        </div>\n                      </SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n\n              <div>\n                <label className=\"text-sm font-medium text-gray-700 mb-2 block\">\n                  Account Name *\n                </label>\n                <UnifiedInput\n                  value={formData.name}\n                  onChange={(e) => handleInputChange('name', e.target.value)}\n                  placeholder=\"e.g., Cash and Cash Equivalents\"\n                  error={errors.name}\n                />\n              </div>\n\n              <div>\n                <label className=\"text-sm font-medium text-gray-700 mb-2 block\">\n                  Description\n                </label>\n                <Textarea\n                  value={formData.description}\n                  onChange={(e) => handleInputChange('description', e.target.value)}\n                  placeholder=\"Optional description of the account...\"\n                  rows={3}\n                />\n              </div>\n\n              <div className=\"flex items-center justify-between p-4 bg-gray-50 rounded-lg\">\n                <div>\n                  <div className=\"font-medium text-gray-900\">Normal Balance</div>\n                  <div className=\"text-sm text-gray-600\">\n                    This account type has a normal {normalBalance} balance\n                  </div>\n                </div>\n                <Badge className={\n                  normalBalance === 'debit' \n                    ? 'bg-blue-100 text-blue-800' \n                    : 'bg-green-100 text-green-800'\n                }>\n                  {normalBalance}\n                </Badge>\n              </div>\n            </TabsContent>\n\n            <TabsContent value=\"details\" className=\"space-y-4 mt-6\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <label className=\"text-sm font-medium text-gray-700 mb-2 block\">\n                    Subtype\n                  </label>\n                  <Select \n                    value={formData.subtype} \n                    onValueChange={(value) => handleInputChange('subtype', value)}\n                  >\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Select subtype...\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {getSubtypeOptions(formData.type).map((option) => (\n                        <SelectItem key={option.value} value={option.value}>\n                          {option.label}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div>\n                  <label className=\"text-sm font-medium text-gray-700 mb-2 block\">\n                    Parent Account\n                  </label>\n                  <Select \n                    value={formData.parent_account_id} \n                    onValueChange={(value) => handleInputChange('parent_account_id', value)}\n                  >\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Select parent account...\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {parentAccounts.map((account) => (\n                        <SelectItem key={account.id} value={account.id}>\n                          {account.account_number} - {account.name}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <label className=\"text-sm font-medium text-gray-700 mb-2 block\">\n                    Currency\n                  </label>\n                  <Select \n                    value={formData.currency} \n                    onValueChange={(value) => handleInputChange('currency', value)}\n                  >\n                    <SelectTrigger>\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"USD\">USD - US Dollar</SelectItem>\n                      <SelectItem value=\"EUR\">EUR - Euro</SelectItem>\n                      <SelectItem value=\"GBP\">GBP - British Pound</SelectItem>\n                      <SelectItem value=\"CAD\">CAD - Canadian Dollar</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div>\n                  <label className=\"text-sm font-medium text-gray-700 mb-2 block\">\n                    Opening Balance\n                  </label>\n                  <UnifiedInput\n                    type=\"number\"\n                    step=\"0.01\"\n                    value={formData.opening_balance?.toString() || '0'}\n                    onChange={(e) => handleInputChange('opening_balance', parseFloat(e.target.value) || 0)}\n                    placeholder=\"0.00\"\n                  />\n                </div>\n              </div>\n\n              <div className=\"flex items-center justify-between p-4 bg-gray-50 rounded-lg\">\n                <div>\n                  <div className=\"font-medium text-gray-900\">Account Status</div>\n                  <div className=\"text-sm text-gray-600\">\n                    {formData.is_active ? 'Account is active and available for transactions' : 'Account is inactive'}\n                  </div>\n                </div>\n                <Switch\n                  checked={formData.is_active}\n                  onCheckedChange={(checked) => handleInputChange('is_active', checked)}\n                />\n              </div>\n\n              <div>\n                <label className=\"text-sm font-medium text-gray-700 mb-2 block\">\n                  Notes\n                </label>\n                <Textarea\n                  value={formData.notes}\n                  onChange={(e) => handleInputChange('notes', e.target.value)}\n                  placeholder=\"Additional notes about this account...\"\n                  rows={3}\n                />\n              </div>\n            </TabsContent>\n          </Tabs>\n\n          {errors.submit && (\n            <div className=\"mt-4 p-3 bg-red-50 border border-red-200 rounded-md\">\n              <p className=\"text-sm text-red-600\">{errors.submit}</p>\n            </div>\n          )}\n        </div>\n\n        <DrawerFooter>\n          <div className=\"flex gap-2\">\n            <Button\n              onClick={handleSubmit}\n              disabled={loading}\n              className=\"flex items-center gap-2\"\n            >\n              <Save className=\"h-4 w-4\" />\n              {loading ? 'Saving...' : editAccount ? 'Update Account' : 'Create Account'}\n            </Button>\n            <Button\n              variant=\"outline\"\n              onClick={onClose}\n              disabled={loading}\n              className=\"flex items-center gap-2\"\n            >\n              <X className=\"h-4 w-4\" />\n              Cancel\n            </Button>\n          </div>\n        </DrawerFooter>\n      </DrawerContent>\n    </Drawer>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ghxstship/apps/web/app/(app)/(shell)/finance/budgets/BudgetsClient.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadBudgets'. Either include it or remove the dependency array.","line":78,"column":6,"nodeType":"ArrayExpression","endLine":78,"endColumn":13,"suggestions":[{"desc":"Update the dependencies array to be: [loadBudgets, orgId]","fix":{"range":[2019,2026],"text":"[loadBudgets, orgId]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { DollarSign, Plus, Edit, Trash2, RefreshCw, AlertTriangle, CheckCircle, Clock, TrendingUp, TrendingDown, Search, Filter, Calendar, Target } from \"lucide-react\";\nimport { useState, useEffect } from 'react';\nimport { User } from '@supabase/supabase-js';\nimport { createBrowserClient } from '@ghxstship/auth';\nimport { \n  Card, \n  Button, \n  Badge, \n  Skeleton, \n  UnifiedInput,\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n  DataViewProvider,\n  StateManagerProvider,\n  ViewSwitcher,\n  DataGrid,\n  KanbanBoard,\n  CalendarView,\n  ListView,\n  DataActions,\n  UniversalDrawer,\n  type DataRecord,\n  type FieldConfig,\n  type DataViewConfig\n} from '@ghxstship/ui';\n\ninterface BudgetsClientProps {\n  user: User;\n  orgId: string;\n  translations: {\n    title: string;\n    subtitle: string;\n  };\n}\n\ninterface Budget {\n  id: string;\n  name: string;\n  description?: string;\n  category: string;\n  amount: number;\n  spent: number;\n  currency: string;\n  status: 'draft' | 'active' | 'completed' | 'cancelled';\n  period_start: string;\n  period_end: string;\n  project_id?: string;\n  approved_by?: string;\n  approved_at?: string;\n  created_at: string;\n  updated_at: string;\n  organization_id: string;\n  created_by: string;\n  // Computed fields\n  remaining?: number;\n  utilization?: number;\n}\n\nexport default function BudgetsClient({ user, orgId, translations }: BudgetsClientProps) {\n  const [loading, setLoading] = useState(true);\n  const [budgets, setBudgets] = useState<Budget[]>([]);\n  const [selectedBudget, setSelectedBudget] = useState<Budget | null>(null);\n  const [drawerOpen, setDrawerOpen] = useState(false);\n  const [drawerMode, setDrawerMode] = useState<'create' | 'edit' | 'view'>('view');\n  const [filterStatus, setFilterStatus] = useState<string>('all');\n  const [filterCategory, setFilterCategory] = useState<string>('all');\n  const [searchTerm, setSearchTerm] = useState<string>('');\n\n  const supabase = createBrowserClient();\n\n  useEffect(() => {\n    loadBudgets();\n  }, [orgId]);\n\n  const loadBudgets = async () => {\n    try {\n      setLoading(true);\n      const { data, error } = await supabase\n        .from('budgets')\n        .select('*')\n        .eq('organization_id', orgId)\n        .order('created_at', { ascending: false });\n\n      if (error) throw error;\n      \n      // Add computed fields\n      const enrichedBudgets = (data || []).map(budget => ({\n        ...budget,\n        remaining: budget.amount - (budget.spent || 0),\n        utilization: budget.amount > 0 ? ((budget.spent || 0) / budget.amount) * 100 : 0\n      }));\n      \n      setBudgets(enrichedBudgets);\n    } catch (error) {\n      console.error('Error loading budgets:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleCreateBudget = () => {\n    setSelectedBudget(null);\n    setDrawerMode('create');\n    setDrawerOpen(true);\n  };\n\n  const handleEditBudget = (budget: Budget) => {\n    setSelectedBudget(budget);\n    setDrawerMode('edit');\n    setDrawerOpen(true);\n  };\n\n  const handleViewBudget = (budget: Budget) => {\n    setSelectedBudget(budget);\n    setDrawerMode('view');\n    setDrawerOpen(true);\n  };\n\n  const handleDeleteBudget = async (budgetId: string) => {\n    if (!confirm('Are you sure you want to delete this budget? This action cannot be undone.')) return;\n\n    try {\n      const response = await fetch('/api/v1/finance/budgets', {\n        method: 'DELETE',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ id: budgetId })\n      });\n\n      if (!response.ok) throw new Error('Failed to delete budget');\n      await loadBudgets();\n    } catch (error) {\n      console.error('Error deleting budget:', error);\n    }\n  };\n\n  const handleSaveBudget = async (budgetData: Partial<Budget>) => {\n    try {\n      if (drawerMode === 'create') {\n        const response = await fetch('/api/v1/finance/budgets', {\n          method: 'POST',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify({\n            name: budgetData.name,\n            description: budgetData.description,\n            amount: budgetData.amount,\n            currency: budgetData.currency,\n            category: budgetData.category,\n            startDate: budgetData.period_start,\n            endDate: budgetData.period_end,\n            projectId: budgetData.project_id,\n            status: budgetData.status\n          })\n        });\n\n        if (!response.ok) throw new Error('Failed to create budget');\n      } else if (drawerMode === 'edit' && selectedBudget) {\n        const response = await fetch('/api/v1/finance/budgets', {\n          method: 'PUT',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify({\n            id: selectedBudget.id,\n            name: budgetData.name,\n            description: budgetData.description,\n            amount: budgetData.amount,\n            currency: budgetData.currency,\n            category: budgetData.category,\n            startDate: budgetData.period_start,\n            endDate: budgetData.period_end,\n            projectId: budgetData.project_id,\n            status: budgetData.status\n          })\n        });\n\n        if (!response.ok) throw new Error('Failed to update budget');\n      }\n\n      setDrawerOpen(false);\n      await loadBudgets();\n    } catch (error) {\n      console.error('Error saving budget:', error);\n    }\n  };\n\n  const filteredBudgets = budgets.filter(budget => {\n    const matchesSearch = searchTerm === '' || \n      budget.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      budget.description?.toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesStatus = filterStatus === 'all' || budget.status === filterStatus;\n    const matchesCategory = filterCategory === 'all' || budget.category === filterCategory;\n    return matchesSearch && matchesStatus && matchesCategory;\n  });\n\n  const getBudgetStatusIcon = (budget: Budget) => {\n    switch (budget.status) {\n      case 'active':\n        return <CheckCircle className=\"h-5 w-5 text-green-500\" />;\n      case 'draft':\n        return <Clock className=\"h-5 w-5 text-yellow-500\" />;\n      case 'completed':\n        return <Target className=\"h-5 w-5 text-blue-500\" />;\n      case 'cancelled':\n        return <AlertTriangle className=\"h-5 w-5 text-red-500\" />;\n      default:\n        return <Clock className=\"h-5 w-5 text-gray-500\" />;\n    }\n  };\n\n  const getBudgetStatusColor = (budget: Budget) => {\n    switch (budget.status) {\n      case 'active':\n        return 'bg-green-100 text-green-800';\n      case 'draft':\n        return 'bg-yellow-100 text-yellow-800';\n      case 'completed':\n        return 'bg-blue-100 text-blue-800';\n      case 'cancelled':\n        return 'bg-red-100 text-red-800';\n      default:\n        return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  const getUtilizationColor = (utilization: number) => {\n    if (utilization >= 100) return 'text-red-600';\n    if (utilization >= 80) return 'text-yellow-600';\n    return 'text-green-600';\n  };\n\n  const formatCurrency = (amount: number, currency = 'USD') => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: currency,\n    }).format(amount);\n  };\n\n  // ATLVS DataViews field configuration\n  const fields: FieldConfig[] = [\n    {\n      key: 'name',\n      label: 'Budget Name',\n      type: 'text',\n      required: true,\n      sortable: true,\n      filterable: true\n    },\n    {\n      key: 'description',\n      label: 'Description',\n      type: 'textarea',\n      rows: 3,\n      sortable: true,\n      filterable: true\n    },\n    {\n      key: 'category',\n      label: 'Category',\n      type: 'select',\n      options: [\n        { value: 'equipment', label: 'Equipment' },\n        { value: 'construction', label: 'Construction' },\n        { value: 'catering', label: 'Catering' },\n        { value: 'travel', label: 'Travel' },\n        { value: 'marketing', label: 'Marketing' },\n        { value: 'operations', label: 'Operations' },\n        { value: 'other', label: 'Other' }\n      ],\n      required: true,\n      filterable: true,\n      sortable: true\n    },\n    {\n      key: 'amount',\n      label: 'Budget Amount',\n      type: 'currency',\n      required: true,\n      sortable: true,\n      filterable: true\n    },\n    {\n      key: 'spent',\n      label: 'Amount Spent',\n      type: 'currency',\n      sortable: true,\n      filterable: true\n    },\n    {\n      key: 'remaining',\n      label: 'Remaining',\n      type: 'currency',\n      sortable: true,\n      filterable: true\n    },\n    {\n      key: 'utilization',\n      label: 'Utilization %',\n      type: 'number',\n      sortable: true,\n      filterable: true\n    },\n    {\n      key: 'status',\n      label: 'Status',\n      type: 'select',\n      options: [\n        { value: 'draft', label: 'Draft' },\n        { value: 'active', label: 'Active' },\n        { value: 'completed', label: 'Completed' },\n        { value: 'cancelled', label: 'Cancelled' }\n      ],\n      filterable: true,\n      sortable: true\n    },\n    {\n      key: 'period_start',\n      label: 'Start Date',\n      type: 'date',\n      required: true,\n      sortable: true,\n      filterable: true\n    },\n    {\n      key: 'period_end',\n      label: 'End Date',\n      type: 'date',\n      sortable: true,\n      filterable: true\n    },\n    {\n      key: 'currency',\n      label: 'Currency',\n      type: 'select',\n      options: [\n        { value: 'USD', label: 'USD' },\n        { value: 'EUR', label: 'EUR' },\n        { value: 'GBP', label: 'GBP' }\n      ],\n      defaultValue: 'USD',\n      filterable: true\n    }\n  ];\n\n  // ATLVS DataViews configuration\n  const budgetsConfig: DataViewConfig = {\n    id: 'budgets-dataviews',\n    name: 'Budget Management',\n    viewType: 'grid',\n    defaultView: 'grid',\n    fields,\n    data: filteredBudgets.map(budget => ({\n      ...budget,\n      record_type: 'budget'\n    })),\n    pagination: {\n      page: 1,\n      pageSize: 25,\n      total: filteredBudgets.length\n    },\n    onSearch: (query: string) => {\n      setSearchTerm(query);\n    },\n    onFilter: (filters: unknown) => {\n      if (filters.status) setFilterStatus(filters.status);\n      if (filters.category) setFilterCategory(filters.category);\n    },\n    onSort: (sorts: unknown) => {\n      console.log('Sort:', sorts);\n    },\n    onRefresh: () => {\n      loadBudgets();\n    },\n    onExport: (data, format) => {\n      console.log('Export:', format, data);\n    },\n    onImport: (data: unknown) => {\n      console.log('Import:', data);\n    },\n    onRowAction: (action: string, record: DataRecord) => {\n      const budget = record as Budget;\n      switch (action) {\n        case 'view':\n          handleViewBudget(budget);\n          break;\n        case 'edit':\n          handleEditBudget(budget);\n          break;\n        case 'delete':\n          handleDeleteBudget(budget.id);\n          break;\n      }\n    }\n  };\n\n  const configWithData = {\n    ...budgetsConfig,\n    data: filteredBudgets.map(budget => ({\n      ...budget,\n      record_type: 'budget'\n    }))\n  };\n\n  if (loading) {\n    return (\n      <div className=\"space-y-4\">\n        <div className=\"flex justify-between items-center\">\n          <div>\n            <Skeleton className=\"h-8 w-48\" />\n            <Skeleton className=\"h-4 w-96 mt-2\" />\n          </div>\n          <Skeleton className=\"h-10 w-32\" />\n        </div>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n          {[...Array(6)].map((_, i) => (\n            <Skeleton key={i} className=\"h-32\" />\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"h-full flex flex-col\">\n      {/* Header */}\n      <div className=\"flex justify-between items-center mb-6\">\n        <div>\n          <h1 className=\"text-2xl font-bold text-gray-900\">Budget Management</h1>\n          <p className=\"text-gray-600\">Track and manage your project budgets</p>\n        </div>\n        <Button onClick={handleCreateBudget} className=\"flex items-center gap-2\">\n          <Plus className=\"h-4 w-4\" />\n          New Budget\n        </Button>\n      </div>\n\n      {/* Summary Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4 mb-6\">\n        <Card className=\"p-4\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm font-medium text-gray-600\">Total Budgets</p>\n              <p className=\"text-2xl font-bold text-gray-900\">{budgets.length}</p>\n            </div>\n            <Target className=\"h-8 w-8 text-blue-500\" />\n          </div>\n        </Card>\n        <Card className=\"p-4\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm font-medium text-gray-600\">Total Allocated</p>\n              <p className=\"text-2xl font-bold text-gray-900\">\n                {formatCurrency(budgets.reduce((sum, b) => sum + b.amount, 0))}\n              </p>\n            </div>\n            <DollarSign className=\"h-8 w-8 text-green-500\" />\n          </div>\n        </Card>\n        <Card className=\"p-4\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm font-medium text-gray-600\">Total Spent</p>\n              <p className=\"text-2xl font-bold text-gray-900\">\n                {formatCurrency(budgets.reduce((sum, b) => sum + (b.spent || 0), 0))}\n              </p>\n            </div>\n            <TrendingDown className=\"h-8 w-8 text-red-500\" />\n          </div>\n        </Card>\n        <Card className=\"p-4\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm font-medium text-gray-600\">Avg Utilization</p>\n              <p className=\"text-2xl font-bold text-gray-900\">\n                {budgets.length > 0 \n                  ? Math.round(budgets.reduce((sum, b) => sum + (b.utilization || 0), 0) / budgets.length)\n                  : 0}%\n              </p>\n            </div>\n            <TrendingUp className=\"h-8 w-8 text-yellow-500\" />\n          </div>\n        </Card>\n      </div>\n\n      {/* Filters */}\n      <div className=\"flex gap-4 mb-6\">\n        <div className=\"flex-1\">\n          <UnifiedInput\n            placeholder=\"Search budgets...\"\n            value={searchTerm}\n            onChange={(e) => setSearchTerm(e.target.value)}\n            leftIcon={<Search className=\"h-4 w-4\" />}\n          />\n        </div>\n        <Select value={filterStatus} onValueChange={setFilterStatus}>\n          <SelectTrigger className=\"w-48\">\n            <SelectValue placeholder=\"Filter by status\" />\n          </SelectTrigger>\n          <SelectContent>\n            <SelectItem value=\"all\">All Statuses</SelectItem>\n            <SelectItem value=\"draft\">Draft</SelectItem>\n            <SelectItem value=\"active\">Active</SelectItem>\n            <SelectItem value=\"completed\">Completed</SelectItem>\n            <SelectItem value=\"cancelled\">Cancelled</SelectItem>\n          </SelectContent>\n        </Select>\n        <Select value={filterCategory} onValueChange={setFilterCategory}>\n          <SelectTrigger className=\"w-48\">\n            <SelectValue placeholder=\"Filter by category\" />\n          </SelectTrigger>\n          <SelectContent>\n            <SelectItem value=\"all\">All Categories</SelectItem>\n            <SelectItem value=\"equipment\">Equipment</SelectItem>\n            <SelectItem value=\"construction\">Construction</SelectItem>\n            <SelectItem value=\"catering\">Catering</SelectItem>\n            <SelectItem value=\"travel\">Travel</SelectItem>\n            <SelectItem value=\"marketing\">Marketing</SelectItem>\n            <SelectItem value=\"operations\">Operations</SelectItem>\n            <SelectItem value=\"other\">Other</SelectItem>\n          </SelectContent>\n        </Select>\n      </div>\n\n      {/* ATLVS DataViews */}\n      <div className=\"flex-1\">\n        <DataViewProvider config={configWithData}>\n          <StateManagerProvider>\n            <div className=\"flex-1 space-y-4\">\n              {/* View Switcher and Actions */}\n              <div className=\"flex justify-between items-center\">\n                <ViewSwitcher />\n                <DataActions />\n              </div>\n\n              {/* Data Views */}\n              <div className=\"flex-1\">\n                <DataGrid />\n                <KanbanBoard \n                  columns={[\n                    { id: 'draft', title: 'Draft' },\n                    { id: 'active', title: 'Active' },\n                    { id: 'completed', title: 'Completed' },\n                    { id: 'cancelled', title: 'Cancelled' }\n                  ]}\n                  statusField=\"status\"\n                  titleField=\"name\"\n                />\n                <CalendarView \n                  startDateField=\"period_start\"\n                  endDateField=\"period_end\"\n                  titleField=\"name\"\n                />\n                <ListView titleField=\"name\" />\n              </div>\n            </div>\n          </StateManagerProvider>\n        </DataViewProvider>\n      </div>\n\n      {/* Universal Drawer for CRUD operations */}\n      <UniversalDrawer\n        open={drawerOpen}\n        onClose={() => setDrawerOpen(false)}\n        title={\n          drawerMode === 'create' ? 'Create Budget' :\n          drawerMode === 'edit' ? 'Edit Budget' : 'Budget Details'\n        }\n        mode={drawerMode}\n        data={selectedBudget}\n        fields={fields}\n        onSave={handleSaveBudget}\n        tabs={[\n          {\n            key: 'details',\n            label: 'Budget Details',\n            content: (\n              <div className=\"space-y-4\">\n                {selectedBudget && (\n                  <>\n                    <div className=\"flex items-center gap-3\">\n                      {getBudgetStatusIcon(selectedBudget)}\n                      <div>\n                        <h3 className=\"font-semibold\">{selectedBudget.name}</h3>\n                        <p className=\"text-sm text-gray-600\">{selectedBudget.category}</p>\n                      </div>\n                      <Badge className={getBudgetStatusColor(selectedBudget)}>\n                        {selectedBudget.status}\n                      </Badge>\n                    </div>\n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <div>\n                        <label className=\"text-sm font-medium text-gray-700\">Budget Amount</label>\n                        <p className=\"text-lg font-semibold\">{formatCurrency(selectedBudget.amount)}</p>\n                      </div>\n                      <div>\n                        <label className=\"text-sm font-medium text-gray-700\">Amount Spent</label>\n                        <p className=\"text-lg font-semibold\">{formatCurrency(selectedBudget.spent || 0)}</p>\n                      </div>\n                      <div>\n                        <label className=\"text-sm font-medium text-gray-700\">Remaining</label>\n                        <p className=\"text-lg font-semibold\">{formatCurrency(selectedBudget.remaining || 0)}</p>\n                      </div>\n                      <div>\n                        <label className=\"text-sm font-medium text-gray-700\">Utilization</label>\n                        <p className={`text-lg font-semibold ${getUtilizationColor(selectedBudget.utilization || 0)}`}>\n                          {Math.round(selectedBudget.utilization || 0)}%\n                        </p>\n                      </div>\n                    </div>\n                    {selectedBudget.description && (\n                      <div>\n                        <label className=\"text-sm font-medium text-gray-700\">Description</label>\n                        <p className=\"text-sm text-gray-600\">{selectedBudget.description}</p>\n                      </div>\n                    )}\n                  </>\n                )}\n              </div>\n            )\n          }\n        ]}\n      />\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ghxstship/apps/web/app/(app)/(shell)/finance/budgets/CreateBudgetClient.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useMemo has a missing dependency: 'formattedAmount'. Either include it or remove the dependency array.","line":365,"column":7,"nodeType":"ArrayExpression","endLine":365,"endColumn":149,"suggestions":[{"desc":"Update the dependencies array to be: [handleSubmit, formData.name, formData.description, formData.amount, formData.currency, formData.category, formData.startDate, formData.endDate, handleTextChange, handleTextareaChange, formattedAmount, currencyOptions, categoryOptions, onClose, loading, parsedAmount, updateForm]","fix":{"range":[12345,12487],"text":"[handleSubmit, formData.name, formData.description, formData.amount, formData.currency, formData.category, formData.startDate, formData.endDate, handleTextChange, handleTextareaChange, formattedAmount, currencyOptions, categoryOptions, onClose, loading, parsedAmount, updateForm]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { Plus, DollarSign, Calendar, Target } from \"lucide-react\";\nimport { useCallback, useEffect, useMemo, useState, type ChangeEvent, type FormEvent } from 'react';\nimport { User } from '@supabase/supabase-js';\nimport { createBrowserClient } from '@ghxstship/auth';\nimport {\n  Button,\n  Card,\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n  Textarea,\n  UnifiedInput,\n} from '@ghxstship/ui';\nimport AppDrawer, { type DrawerTab } from '@/app/_components/shared/AppDrawer';\n\ninterface CreateBudgetClientProps {\n  user: User;\n  orgId: string;\n  projectId?: string;\n  isOpen: boolean;\n  onClose: () => void;\n  onSuccess?: (budget: CreatedBudget) => void;\n}\n\ntype BudgetCurrency = 'USD' | 'EUR' | 'GBP' | 'CAD' | 'AUD';\n\ntype BudgetCategory =\n  | 'general'\n  | 'marketing'\n  | 'operations'\n  | 'personnel'\n  | 'equipment'\n  | 'travel'\n  | 'professional_services'\n  | 'other';\n\ninterface BudgetFormData {\n  name: string;\n  description: string;\n  amount: string;\n  currency: BudgetCurrency;\n  category: BudgetCategory;\n  projectId: string;\n  startDate: string;\n  endDate: string;\n}\n\ninterface CreatedBudget {\n  id: string;\n  organization_id: string;\n  created_at: string;\n}\n\nconst SUPPORTED_CURRENCIES: ReadonlyArray<{ value: BudgetCurrency; label: string }> = [\n  { value: 'USD', label: 'USD - US Dollar' },\n  { value: 'EUR', label: 'EUR - Euro' },\n  { value: 'GBP', label: 'GBP - British Pound' },\n  { value: 'CAD', label: 'CAD - Canadian Dollar' },\n  { value: 'AUD', label: 'AUD - Australian Dollar' },\n];\n\nconst BUDGET_CATEGORIES: ReadonlyArray<{ value: BudgetCategory; label: string }> = [\n  { value: 'general', label: 'General' },\n  { value: 'marketing', label: 'Marketing' },\n  { value: 'operations', label: 'Operations' },\n  { value: 'personnel', label: 'Personnel' },\n  { value: 'equipment', label: 'Equipment' },\n  { value: 'travel', label: 'Travel' },\n  { value: 'professional_services', label: 'Professional Services' },\n  { value: 'other', label: 'Other' },\n];\n\nconst createInitialFormData = (projectId?: string): BudgetFormData => ({\n  name: '',\n  description: '',\n  amount: '',\n  currency: 'USD',\n  category: 'general',\n  projectId: projectId ?? '',\n  startDate: new Date().toISOString().split('T')[0],\n  endDate: '',\n});\n\nexport default function CreateBudgetClient({ user, orgId, projectId, isOpen, onClose, onSuccess }: CreateBudgetClientProps) {\n  const supabase = createBrowserClient();\n  const [loading, setLoading] = useState(false);\n  const [formData, setFormData] = useState<BudgetFormData>(() => createInitialFormData(projectId));\n\n  useEffect(() => {\n    if (!isOpen) {\n      setFormData(createInitialFormData(projectId));\n    }\n  }, [isOpen, projectId]);\n\n  const updateForm = useCallback(<Key extends keyof BudgetFormData>(field: Key, value: BudgetFormData[Key]) => {\n    setFormData(prev => ({ ...prev, [field]: value }));\n  }, []);\n\n  const handleTextChange = useCallback((event: ChangeEvent<HTMLInputElement>) => {\n    const { name, value } = event.target;\n    updateForm(name as keyof BudgetFormData, value as BudgetFormData[keyof BudgetFormData]);\n  }, [updateForm]);\n\n  const handleTextareaChange = useCallback((event: ChangeEvent<HTMLTextAreaElement>) => {\n    const { name, value } = event.target;\n    updateForm(name as keyof BudgetFormData, value as BudgetFormData[keyof BudgetFormData]);\n  }, [updateForm]);\n\n  const handleSubmit = useCallback(async (event: FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    const trimmedName = formData.name.trim();\n    const parsedAmount = parseFloat(formData.amount.trim());\n\n    if (!trimmedName || Number.isNaN(parsedAmount) || parsedAmount <= 0 || loading) {\n      return;\n    }\n\n    setLoading(true);\n\n    try {\n      const budgetId = crypto.randomUUID();\n\n      const { data: budget, error } = await supabase\n        .from('budgets')\n        .insert({\n          id: budgetId,\n          organization_id: orgId,\n          project_id: formData.projectId.trim() || null,\n          name: trimmedName,\n          description: formData.description.trim() || null,\n          amount: parsedAmount,\n          currency: formData.currency,\n          category: formData.category,\n          spent: 0,\n          status: 'active',\n          start_date: formData.startDate || null,\n          end_date: formData.endDate || null,\n          created_at: new Date().toISOString(),\n          updated_at: new Date().toISOString(),\n        })\n        .select()\n        .single<CreatedBudget>();\n\n      if (error) throw error;\n\n      await supabase\n        .from('activity_logs')\n        .insert({\n          id: crypto.randomUUID(),\n          organization_id: orgId,\n          user_id: user.id,\n          action: 'budget.created',\n          entity_type: 'budget',\n          entity_id: budgetId,\n          metadata: {\n            budgetName: formData.name,\n            amount: parsedAmount,\n          },\n          occurred_at: new Date().toISOString(),\n        });\n\n      setFormData(createInitialFormData(projectId));\n      onSuccess?.(budget);\n      onClose();\n    } catch (error) {\n      console.error('Error creating budget:', error);\n    } finally {\n      setLoading(false);\n    }\n  }, [formData, loading, onClose, onSuccess, orgId, projectId, supabase, user.id]);\n\n  const currencyOptions = useMemo(() => SUPPORTED_CURRENCIES.map(currency => (\n    <SelectItem key={currency.value} value={currency.value}>\n      {currency.label}\n    </SelectItem>\n  )), []);\n\n  const categoryOptions = useMemo(() => BUDGET_CATEGORIES.map(category => (\n    <SelectItem key={category.value} value={category.value}>\n      {category.label}\n    </SelectItem>\n  )), []);\n\n  const parsedAmount = parseFloat(formData.amount.trim());\n\n  const formattedAmount = !Number.isNaN(parsedAmount) && parsedAmount > 0\n    ? new Intl.NumberFormat('en-US', {\n        style: 'currency',\n        currency: formData.currency,\n      }).format(parsedAmount)\n    : '';\n\n  const drawerTabs: DrawerTab[] = useMemo(() => ([\n    {\n      key: 'details',\n      label: 'Details',\n      content: (\n        <form onSubmit={handleSubmit} className=\"stack-lg\">\n          <Card className=\"p-md bg-accent/5 border-primary/20\">\n            <div className=\"flex items-center cluster-sm\">\n              <Target className=\"h-8 w-8 color-accent\" />\n              <div>\n                <h3 className=\"text-heading-4 color-accent\">Budget Planning</h3>\n                <p className=\"text-body-sm color-accent/80\">\n                  Set financial targets and track spending against your budget\n                </p>\n              </div>\n            </div>\n          </Card>\n\n          <div className=\"stack-md\">\n            <div>\n              <label htmlFor=\"name\" className=\"block text-body-sm form-label color-foreground mb-sm\">\n                Budget Name *\n              </label>\n              <UnifiedInput\n                id=\"name\"\n                name=\"name\"\n                value={formData.name}\n                onChange={handleTextChange}\n                placeholder=\"e.g., Q1 Marketing Budget, Project Alpha Budget\"\n                required\n              />\n            </div>\n\n            <div>\n              <label htmlFor=\"description\" className=\"block text-body-sm form-label color-foreground mb-sm\">\n                Description\n              </label>\n              <Textarea\n                id=\"description\"\n                name=\"description\"\n                value={formData.description}\n                onChange={handleTextareaChange}\n                placeholder=\"Describe the purpose and scope of this budget...\"\n                rows={3}\n              />\n            </div>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-md\">\n              <div>\n                <label htmlFor=\"amount\" className=\"block text-body-sm form-label color-foreground mb-sm\">\n                  Budget Amount *\n                </label>\n                <div className=\"relative\">\n                  <DollarSign className=\"absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 color-foreground/50\" />\n                  <UnifiedInput\n                    id=\"amount\"\n                    name=\"amount\"\n                    type=\"number\"\n                    value={formData.amount}\n                    onChange={handleTextChange}\n                    placeholder=\"0.00\"\n                    className=\"pl-2xl\"\n                    min=\"0\"\n                    step=\"0.01\"\n                    required\n                  />\n                </div>\n                {formattedAmount && (\n                  <p className=\"text-body-sm color-foreground/60 mt-xs\">\n                    {formattedAmount}\n                  </p>\n                )}\n              </div>\n\n              <div>\n                <label htmlFor=\"currency\" className=\"block text-body-sm form-label color-foreground mb-sm\">\n                  Currency\n                </label>\n                <Select\n                  value={formData.currency}\n                  onValueChange={value => updateForm('currency', value as BudgetCurrency)}\n                >\n                  <SelectTrigger>\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {currencyOptions}\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n\n            <div>\n              <label htmlFor=\"category\" className=\"block text-body-sm form-label color-foreground mb-sm\">\n                Category\n              </label>\n              <Select\n                value={formData.category}\n                onValueChange={value => updateForm('category', value as BudgetCategory)}\n              >\n                <SelectTrigger>\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  {categoryOptions}\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-md\">\n              <div>\n                <label htmlFor=\"startDate\" className=\"block text-body-sm form-label color-foreground mb-sm\">\n                  Start Date\n                </label>\n                <div className=\"relative\">\n                  <Calendar className=\"absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 color-foreground/50\" />\n                  <UnifiedInput\n                    id=\"startDate\"\n                    name=\"startDate\"\n                    type=\"date\"\n                    value={formData.startDate}\n                    onChange={handleTextChange}\n                    className=\"pl-2xl\"\n                  />\n                </div>\n              </div>\n\n              <div>\n                <label htmlFor=\"endDate\" className=\"block text-body-sm form-label color-foreground mb-sm\">\n                  End Date\n                </label>\n                <div className=\"relative\">\n                  <Calendar className=\"absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 color-foreground/50\" />\n                  <UnifiedInput\n                    id=\"endDate\"\n                    name=\"endDate\"\n                    type=\"date\"\n                    value={formData.endDate}\n                    onChange={handleTextChange}\n                    className=\"pl-2xl\"\n                    min={formData.startDate}\n                  />\n                </div>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"flex justify-end cluster-sm pt-lg border-t border-border\">\n            <Button type=\"button\" variant=\"ghost\" onClick={onClose} disabled={loading}>\n              Cancel\n            </Button>\n            <Button type=\"submit\" disabled={loading || !formData.name.trim() || Number.isNaN(parsedAmount) || parsedAmount <= 0} className=\"min-w-[120px]\">\n              {loading ? (\n                <div className=\"flex items-center cluster-sm\">\n                  <div className=\"w-4 h-4 border-2 border-background/30 border-t-background rounded-full animate-spin\" />\n                  <span>Creating...</span>\n                </div>\n              ) : (\n                <div className=\"flex items-center cluster-sm\">\n                  <Plus className=\"h-4 w-4\" />\n                  <span>Create Budget</span>\n                </div>\n              )}\n            </Button>\n          </div>\n        </form>\n      ),\n    },\n  ]), [categoryOptions, currencyOptions, formData, handleSubmit, handleTextareaChange, handleTextChange, loading, onClose, parsedAmount, updateForm]);\n\n  return (\n    <AppDrawer\n      open={isOpen}\n      onClose={onClose}\n      title=\"Create Budget\"\n      record={null}\n      mode=\"create\"\n      fields={[]}\n      tabs={drawerTabs}\n      loading={loading}\n    />\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ghxstship/apps/web/app/(app)/(shell)/finance/expenses/CreateExpenseClient.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useMemo has an unnecessary dependency: 'handleTextareaChange'. Either exclude it or remove the dependency array.","line":381,"column":7,"nodeType":"ArrayExpression","endLine":381,"endColumn":166,"suggestions":[{"desc":"Update the dependencies array to be: [categoryOptions, currencyOptions, formData, formattedAmount, handleSubmit, handleTextChange, loading, onClose, parsedAmount, updateForm]","fix":{"range":[13591,13750],"text":"[categoryOptions, currencyOptions, formData, formattedAmount, handleSubmit, handleTextChange, loading, onClose, parsedAmount, updateForm]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { Plus, Receipt, Calendar, DollarSign, Upload } from \"lucide-react\";\nimport { useCallback, useEffect, useMemo, useState, type ChangeEvent, type FormEvent } from 'react';\nimport { User } from '@supabase/supabase-js';\nimport { createBrowserClient } from '@ghxstship/auth';\nimport {\n  Button,\n  Card,\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n  Textarea,\n  UnifiedInput,\n} from '@ghxstship/ui';\nimport AppDrawer, { type DrawerTab } from '@/app/_components/shared/AppDrawer';\n\ninterface CreateExpenseClientProps {\n  user: User;\n  orgId: string;\n  projectId?: string;\n  budgetId?: string;\n  isOpen: boolean;\n  onClose: () => void;\n  onSuccess?: (expense: CreatedExpense) => void;\n}\n\ntype ExpenseCurrency = 'USD' | 'EUR' | 'GBP' | 'CAD' | 'AUD';\n\ntype ExpenseCategory =\n  | 'general'\n  | 'travel'\n  | 'meals'\n  | 'office_supplies'\n  | 'equipment'\n  | 'software'\n  | 'professional_services'\n  | 'marketing'\n  | 'utilities'\n  | 'other';\n\ninterface ExpenseFormData {\n  description: string;\n  amount: string;\n  currency: ExpenseCurrency;\n  category: ExpenseCategory;\n  projectId: string;\n  budgetId: string;\n  expenseDate: string;\n  receiptUrl: string;\n}\n\ninterface CreatedExpense {\n  id: string;\n  organization_id: string;\n  created_at: string;\n}\n\nconst SUPPORTED_CURRENCIES: ReadonlyArray<{ value: ExpenseCurrency; label: string }> = [\n  { value: 'USD', label: 'USD - US Dollar' },\n  { value: 'EUR', label: 'EUR - Euro' },\n  { value: 'GBP', label: 'GBP - British Pound' },\n  { value: 'CAD', label: 'CAD - Canadian Dollar' },\n  { value: 'AUD', label: 'AUD - Australian Dollar' },\n];\n\nconst EXPENSE_CATEGORIES: ReadonlyArray<{ value: ExpenseCategory; label: string }> = [\n  { value: 'general', label: 'General' },\n  { value: 'travel', label: 'Travel' },\n  { value: 'meals', label: 'Meals & Entertainment' },\n  { value: 'office_supplies', label: 'Office Supplies' },\n  { value: 'equipment', label: 'Equipment' },\n  { value: 'software', label: 'Software & Subscriptions' },\n  { value: 'professional_services', label: 'Professional Services' },\n  { value: 'marketing', label: 'Marketing' },\n  { value: 'utilities', label: 'Utilities' },\n  { value: 'other', label: 'Other' },\n];\n\nconst createInitialFormData = (projectId?: string, budgetId?: string): ExpenseFormData => ({\n  description: '',\n  amount: '',\n  currency: 'USD',\n  category: 'general',\n  projectId: projectId ?? '',\n  budgetId: budgetId ?? '',\n  expenseDate: new Date().toISOString().split('T')[0],\n  receiptUrl: '',\n});\n\nexport default function CreateExpenseClient({ user, orgId, projectId, budgetId, isOpen, onClose, onSuccess }: CreateExpenseClientProps) {\n  const supabase = createBrowserClient();\n  const [loading, setLoading] = useState(false);\n  const [formData, setFormData] = useState<ExpenseFormData>(() => createInitialFormData(projectId, budgetId));\n\n  useEffect(() => {\n    if (!isOpen) {\n      setFormData(createInitialFormData(projectId, budgetId));\n    }\n  }, [budgetId, isOpen, projectId]);\n\n  const updateForm = useCallback(<Key extends keyof ExpenseFormData>(field: Key, value: ExpenseFormData[Key]) => {\n    setFormData(prev => ({ ...prev, [field]: value }));\n  }, []);\n\n  const handleTextChange = useCallback((event: ChangeEvent<HTMLInputElement>) => {\n    const { name, value } = event.target;\n    updateForm(name as keyof ExpenseFormData, value as ExpenseFormData[keyof ExpenseFormData]);\n  }, [updateForm]);\n\n  const handleTextareaChange = useCallback((event: ChangeEvent<HTMLTextAreaElement>) => {\n    const { name, value } = event.target;\n    updateForm(name as keyof ExpenseFormData, value as ExpenseFormData[keyof ExpenseFormData]);\n  }, [updateForm]);\n\n  const handleSubmit = useCallback(async (event: FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    const trimmedDescription = formData.description.trim();\n    const parsedAmount = parseFloat(formData.amount.trim());\n\n    if (!trimmedDescription || Number.isNaN(parsedAmount) || parsedAmount <= 0 || loading) {\n      return;\n    }\n\n    setLoading(true);\n\n    try {\n      const expenseId = crypto.randomUUID();\n\n      const { data: expense, error } = await supabase\n        .from('expenses')\n        .insert({\n          id: expenseId,\n          organization_id: orgId,\n          project_id: formData.projectId.trim() || null,\n          budget_id: formData.budgetId.trim() || null,\n          description: trimmedDescription,\n          amount: parsedAmount,\n          currency: formData.currency,\n          category: formData.category,\n          status: 'draft',\n          receipt_url: formData.receiptUrl.trim() || null,\n          submitted_by: user.id,\n          expense_date: formData.expenseDate,\n          created_at: new Date().toISOString(),\n          updated_at: new Date().toISOString(),\n        })\n        .select()\n        .single<CreatedExpense>();\n\n      if (error) throw error;\n\n      await supabase\n        .from('activity_logs')\n        .insert({\n          id: crypto.randomUUID(),\n          organization_id: orgId,\n          user_id: user.id,\n          action: 'expense.created',\n          entity_type: 'expense',\n          entity_id: expenseId,\n          metadata: {\n            description: formData.description,\n            amount: parsedAmount,\n          },\n          occurred_at: new Date().toISOString(),\n        });\n\n      setFormData(createInitialFormData(projectId, budgetId));\n      onSuccess?.(expense);\n      onClose();\n    } catch (error) {\n      console.error('Error creating expense:', error);\n    } finally {\n      setLoading(false);\n    }\n  }, [budgetId, formData, loading, onClose, onSuccess, orgId, projectId, supabase, user.id]);\n\n  const currencyOptions = useMemo(() => SUPPORTED_CURRENCIES.map(currency => (\n    <SelectItem key={currency.value} value={currency.value}>\n      {currency.label}\n    </SelectItem>\n  )), []);\n\n  const categoryOptions = useMemo(() => EXPENSE_CATEGORIES.map(category => (\n    <SelectItem key={category.value} value={category.value}>\n      {category.label}\n    </SelectItem>\n  )), []);\n\n  const parsedAmount = parseFloat(formData.amount.trim());\n\n  const formattedAmount = !Number.isNaN(parsedAmount) && parsedAmount > 0\n    ? new Intl.NumberFormat('en-US', {\n        style: 'currency',\n        currency: formData.currency,\n      }).format(parsedAmount)\n    : '';\n\n  const drawerTabs: DrawerTab[] = useMemo(() => ([\n    {\n      key: 'details',\n      label: 'Details',\n      content: (\n        <form onSubmit={handleSubmit} className=\"stack-lg\">\n          <Card className=\"p-md bg-destructive/10 border-destructive/20\">\n            <div className=\"flex items-center cluster-sm\">\n              <Receipt className=\"h-8 w-8 color-destructive\" />\n              <div>\n                <h3 className=\"text-heading-4 color-destructive-foreground\">Expense Tracking</h3>\n                <p className=\"text-body-sm color-destructive/80\">\n                  Record business expenses for approval and reimbursement\n                </p>\n              </div>\n            </div>\n          </Card>\n\n          <div className=\"stack-md\">\n            <div>\n              <label htmlFor=\"description\" className=\"block text-body-sm form-label color-foreground mb-sm\">\n                Expense Description *\n              </label>\n              <UnifiedInput\n                id=\"description\"\n                name=\"description\"\n                value={formData.description}\n                onChange={handleTextChange}\n                placeholder=\"e.g., Client dinner, Office supplies, Travel expenses\"\n                required\n              />\n            </div>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-md\">\n              <div>\n                <label htmlFor=\"amount\" className=\"block text-body-sm form-label color-foreground mb-sm\">\n                  Amount *\n                </label>\n                <div className=\"relative\">\n                  <DollarSign className=\"absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 color-foreground/50\" />\n                  <UnifiedInput\n                    id=\"amount\"\n                    name=\"amount\"\n                    type=\"number\"\n                    value={formData.amount}\n                    onChange={handleTextChange}\n                    placeholder=\"0.00\"\n                    className=\"pl-2xl\"\n                    min=\"0\"\n                    step=\"0.01\"\n                    required\n                  />\n                </div>\n                {formattedAmount && (\n                  <p className=\"text-body-sm color-foreground/60 mt-xs\">\n                    {formattedAmount}\n                  </p>\n                )}\n              </div>\n\n              <div>\n                <label htmlFor=\"currency\" className=\"block text-body-sm form-label color-foreground mb-sm\">\n                  Currency\n                </label>\n                <Select\n                  value={formData.currency}\n                  onValueChange={value => updateForm('currency', value as ExpenseCurrency)}\n                >\n                  <SelectTrigger>\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {currencyOptions}\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-md\">\n              <div>\n                <label htmlFor=\"category\" className=\"block text-body-sm form-label color-foreground mb-sm\">\n                  Category\n                </label>\n                <Select\n                  value={formData.category}\n                  onValueChange={value => updateForm('category', value as ExpenseCategory)}\n                >\n                  <SelectTrigger>\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {categoryOptions}\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div>\n                <label htmlFor=\"expenseDate\" className=\"block text-body-sm form-label color-foreground mb-sm\">\n                  Expense Date *\n                </label>\n                <div className=\"relative\">\n                  <Calendar className=\"absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 color-foreground/50\" />\n                  <UnifiedInput\n                    id=\"expenseDate\"\n                    name=\"expenseDate\"\n                    type=\"date\"\n                    value={formData.expenseDate}\n                    onChange={handleTextChange}\n                    className=\"pl-2xl\"\n                    max={new Date().toISOString().split('T')[0]}\n                    required\n                  />\n                </div>\n              </div>\n            </div>\n\n            <div>\n              <label htmlFor=\"receiptUrl\" className=\"block text-body-sm form-label color-foreground mb-sm\">\n                Receipt URL\n              </label>\n              <div className=\"relative\">\n                <Upload className=\"absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 color-foreground/50\" />\n                <UnifiedInput\n                  id=\"receiptUrl\"\n                  name=\"receiptUrl\"\n                  type=\"url\"\n                  value={formData.receiptUrl}\n                  onChange={handleTextChange}\n                  placeholder=\"https://example.com/receipt.pdf\"\n                  className=\"pl-2xl\"\n                />\n              </div>\n              <p className=\"text-body-sm color-foreground/60 mt-xs\">\n                Upload receipt to cloud storage and paste the URL here\n              </p>\n            </div>\n          </div>\n\n          {formattedAmount && (\n            <Card className=\"p-md bg-secondary border-border\">\n              <h4 className=\"form-label color-foreground mb-sm\">Expense Summary</h4>\n              <div className=\"stack-xs text-body-sm\">\n                <div className=\"flex justify-between\">\n                  <span className=\"color-foreground/70\">Amount:</span>\n                  <span className=\"form-label\">{formattedAmount}</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"color-foreground/70\">Category:</span>\n                  <span className=\"form-label capitalize\">{formData.category.replace('_', ' ')}</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"color-foreground/70\">Status:</span>\n                  <span className=\"form-label color-warning\">Draft</span>\n                </div>\n              </div>\n            </Card>\n          )}\n\n          <div className=\"flex justify-end cluster-sm pt-lg border-t border-border\">\n            <Button type=\"button\" variant=\"ghost\" onClick={onClose} disabled={loading}>\n              Cancel\n            </Button>\n            <Button type=\"submit\" disabled={loading || !formData.description.trim() || Number.isNaN(parsedAmount) || parsedAmount <= 0} className=\"min-w-[120px]\">\n              {loading ? (\n                <div className=\"flex items-center cluster-sm\">\n                  <div className=\"w-4 h-4 border-2 border-background/30 border-t-background rounded-full animate-spin\" />\n                  <span>Creating...</span>\n                </div>\n              ) : (\n                <div className=\"flex items-center cluster-sm\">\n                  <Plus className=\"h-4 w-4\" />\n                  <span>Create Expense</span>\n                </div>\n              )}\n            </Button>\n          </div>\n        </form>\n      ),\n    },\n  ]), [categoryOptions, currencyOptions, formData, formattedAmount, handleSubmit, handleTextareaChange, handleTextChange, loading, onClose, parsedAmount, updateForm]);\n\n  return (\n    <AppDrawer\n      open={isOpen}\n      onClose={onClose}\n      title=\"Create Expense\"\n      record={null}\n      mode=\"create\"\n      fields={[]}\n      tabs={drawerTabs}\n      loading={loading}\n    />\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ghxstship/apps/web/app/(app)/(shell)/finance/expenses/ExpensesClient.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'loadExpenses' and 'loadStatistics'. Either include them or remove the dependency array.","line":50,"column":6,"nodeType":"ArrayExpression","endLine":50,"endColumn":22,"suggestions":[{"desc":"Update the dependencies array to be: [orgId, filters, loadExpenses, loadStatistics]","fix":{"range":[1609,1625],"text":"[orgId, filters, loadExpenses, loadStatistics]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { Receipt, Plus, Edit, Trash2, Check, X, Clock, DollarSign, Search, Filter, RefreshCw } from \"lucide-react\";\nimport { useState, useEffect } from 'react';\nimport { User } from '@supabase/supabase-js';\nimport { \n  Card, \n  Button, \n  Badge, \n  Skeleton, \n  UnifiedInput,\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue\n} from '@ghxstship/ui';\nimport { ExpensesService } from './lib/expenses-service';\nimport CreateExpenseDrawer from './drawers/CreateExpenseDrawer';\nimport ExpenseGridView from './views/ExpenseGridView';\nimport ExpenseListView from './views/ExpenseListView';\nimport type { \n  Expense, \n  ExpensesClientProps, \n  ExpenseFilters, \n  ExpenseStatistics \n} from './types';\n\nexport default function ExpensesClient({ user, orgId, translations }: ExpensesClientProps) {\n  const [expenses, setExpenses] = useState<Expense[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [statistics, setStatistics] = useState<ExpenseStatistics | null>(null);\n  const [creating, setCreating] = useState(false);\n  const [editing, setEditing] = useState<Expense | null>(null);\n  const [viewing, setViewing] = useState<Expense | null>(null);\n  const [selectedIds, setSelectedIds] = useState<string[]>([]);\n  const [filters, setFilters] = useState<ExpenseFilters>({\n    status: [],\n    category: [],\n    search: ''\n  });\n  const [viewMode, setViewMode] = useState<'grid' | 'list'>('grid');\n  const [refreshing, setRefreshing] = useState(false);\n\n  const expensesService = new ExpensesService();\n\n  useEffect(() => {\n    loadExpenses();\n    loadStatistics();\n  }, [orgId, filters]);\n\n  const loadExpenses = async () => {\n    try {\n      setLoading(true);\n      const data = await expensesService.getExpenses(orgId, filters);\n      setExpenses(data);\n    } catch (error) {\n      console.error('Error loading expenses:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const loadStatistics = async () => {\n    try {\n      const stats = await expensesService.getExpenseStatistics(orgId);\n      setStatistics(stats);\n    } catch (error) {\n      console.error('Error loading expense statistics:', error);\n    }\n  };\n\n  const handleRefresh = async () => {\n    setRefreshing(true);\n    await Promise.all([loadExpenses(), loadStatistics()]);\n    setRefreshing(false);\n  };\n\n  const handleCreateExpense = () => {\n    setCreating(true);\n  };\n\n  const handleEditExpense = (expense: Expense) => {\n    setEditing(expense);\n  };\n\n  const handleViewExpense = (expense: Expense) => {\n    setViewing(expense);\n  };\n\n  const handleDeleteExpense = async (expense: Expense) => {\n    if (confirm('Are you sure you want to delete this expense?')) {\n      try {\n        await expensesService.deleteExpense(orgId, expense.id);\n        await loadExpenses();\n      } catch (error) {\n        console.error('Error deleting expense:', error);\n      }\n    }\n  };\n\n  const handleExpenseSaved = (expense: Expense) => {\n    setCreating(false);\n    setEditing(null);\n    loadExpenses();\n  };\n\n  const handleCancel = () => {\n    setCreating(false);\n    setEditing(null);\n    setViewing(null);\n  };\n\n  const handleExport = async (format: 'csv' | 'json') => {\n    try {\n      const data = await expensesService.exportExpenses(orgId, format, filters);\n      const blob = new Blob([data], { \n        type: format === 'csv' ? 'text/csv' : 'application/json' \n      });\n      const url = URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.href = url;\n      a.download = `expenses.${format}`;\n      document.body.appendChild(a);\n      a.click();\n      document.body.removeChild(a);\n      URL.revokeObjectURL(url);\n    } catch (error) {\n      console.error('Error exporting expenses:', error);\n    }\n  };\n\n  if (loading) {\n    return (\n      <div className=\"stack-lg\">\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-md\">\n          {Array.from({ length: 4 }).map((_, i) => (\n            <Card key={i} className=\"p-lg\">\n              <Skeleton className=\"h-4 w-20 mb-sm\" />\n              <Skeleton className=\"h-8 w-32 mb-xs\" />\n              <Skeleton className=\"h-3 w-16\" />\n            </Card>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"stack-lg\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-heading-2 color-foreground\">Expenses</h1>\n          <p className=\"text-body-sm color-foreground/70 mt-xs\">\n            Manage and track business expenses\n          </p>\n        </div>\n        <div className=\"cluster-sm\">\n          <Button \n            variant=\"outline\" \n            onClick={handleRefresh}\n            disabled={refreshing}\n          >\n            <RefreshCw className={`h-4 w-4 mr-sm ${refreshing ? 'animate-spin' : ''}`} />\n            Refresh\n          </Button>\n          <Button onClick={handleCreateExpense}>\n            <Plus className=\"h-4 w-4 mr-sm\" />\n            Add Expense\n          </Button>\n        </div>\n      </div>\n\n      {/* Statistics Cards */}\n      {statistics && (\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-md\">\n          <Card className=\"p-lg\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-body-sm color-muted\">Total Expenses</p>\n                <p className=\"text-heading-3 color-foreground\">\n                  {expensesService.formatCurrency(statistics.totalExpenses)}\n                </p>\n              </div>\n              <DollarSign className=\"h-8 w-8 color-primary\" />\n            </div>\n          </Card>\n\n          <Card className=\"p-lg\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-body-sm color-muted\">Pending Approval</p>\n                <p className=\"text-heading-3 color-warning\">{statistics.pendingApproval}</p>\n              </div>\n              <Clock className=\"h-8 w-8 color-warning\" />\n            </div>\n          </Card>\n\n          <Card className=\"p-lg\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-body-sm color-muted\">Approved Amount</p>\n                <p className=\"text-heading-3 color-success\">\n                  {expensesService.formatCurrency(statistics.approvedAmount)}\n                </p>\n              </div>\n              <Check className=\"h-8 w-8 color-success\" />\n            </div>\n          </Card>\n\n          <Card className=\"p-lg\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-body-sm color-muted\">Rejected</p>\n                <p className=\"text-heading-3 color-destructive\">{statistics.rejectedCount}</p>\n              </div>\n              <X className=\"h-8 w-8 color-destructive\" />\n            </div>\n          </Card>\n        </div>\n      )}\n\n      {/* Filters and Controls */}\n      <Card className=\"p-lg\">\n        <div className=\"flex items-center justify-between mb-md\">\n          <div className=\"flex items-center gap-md\">\n            <UnifiedInput\n              placeholder=\"Search expenses...\"\n              value={filters.search || ''}\n              onChange={(e) => setFilters(prev => ({ ...prev, search: e.target.value }))}\n              className=\"w-64\"\n            />\n            \n            <Select\n              value={filters.status?.[0] || ''}\n              onValueChange={(value) => setFilters(prev => ({ \n                ...prev, \n                status: value ? [value] : [] \n              }))}\n            >\n              <SelectTrigger className=\"w-40\">\n                <SelectValue placeholder=\"Status\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"\">All Status</SelectItem>\n                <SelectItem value=\"draft\">Draft</SelectItem>\n                <SelectItem value=\"submitted\">Submitted</SelectItem>\n                <SelectItem value=\"approved\">Approved</SelectItem>\n                <SelectItem value=\"rejected\">Rejected</SelectItem>\n                <SelectItem value=\"paid\">Paid</SelectItem>\n              </SelectContent>\n            </Select>\n\n            <Select\n              value={filters.category?.[0] || ''}\n              onValueChange={(value) => setFilters(prev => ({ \n                ...prev, \n                category: value ? [value] : [] \n              }))}\n            >\n              <SelectTrigger className=\"w-40\">\n                <SelectValue placeholder=\"Category\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"\">All Categories</SelectItem>\n                <SelectItem value=\"Travel\">Travel</SelectItem>\n                <SelectItem value=\"Meals & Entertainment\">Meals & Entertainment</SelectItem>\n                <SelectItem value=\"Office Supplies\">Office Supplies</SelectItem>\n                <SelectItem value=\"Software & Subscriptions\">Software & Subscriptions</SelectItem>\n                <SelectItem value=\"Marketing\">Marketing</SelectItem>\n                <SelectItem value=\"Other\">Other</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n\n          <div className=\"flex items-center gap-sm\">\n            <Button\n              variant=\"outline\"\n              onClick={() => handleExport('csv')}\n              size=\"sm\"\n            >\n              Export CSV\n            </Button>\n            <Button\n              variant=\"outline\"\n              onClick={() => handleExport('json')}\n              size=\"sm\"\n            >\n              Export JSON\n            </Button>\n            <div className=\"flex items-center gap-xs\">\n              <Button\n                variant={viewMode === 'grid' ? 'default' : 'ghost'}\n                size=\"sm\"\n                onClick={() => setViewMode('grid')}\n              >\n                Grid\n              </Button>\n              <Button\n                variant={viewMode === 'list' ? 'default' : 'ghost'}\n                size=\"sm\"\n                onClick={() => setViewMode('list')}\n              >\n                List\n              </Button>\n            </div>\n          </div>\n        </div>\n\n        {/* Expenses Display */}\n        {viewMode === 'grid' ? (\n          <ExpenseGridView\n            expenses={expenses}\n            onEdit={handleEditExpense}\n            onView={handleViewExpense}\n            onDelete={handleDeleteExpense}\n            onRefresh={loadExpenses}\n            loading={loading}\n            user={user}\n            orgId={orgId}\n          />\n        ) : (\n          <ExpenseListView\n            expenses={expenses}\n            onEdit={handleEditExpense}\n            onView={handleViewExpense}\n            onDelete={handleDeleteExpense}\n            onRefresh={loadExpenses}\n            onSelectionChange={setSelectedIds}\n            selectedIds={selectedIds}\n            loading={loading}\n            user={user}\n            orgId={orgId}\n          />\n        )}\n      </Card>\n\n      {/* Drawers */}\n      {creating && (\n        <CreateExpenseDrawer\n          mode=\"create\"\n          onSave={handleExpenseSaved}\n          onCancel={handleCancel}\n          user={user}\n          orgId={orgId}\n        />\n      )}\n\n      {editing && (\n        <CreateExpenseDrawer\n          expense={editing}\n          mode=\"edit\"\n          onSave={handleExpenseSaved}\n          onCancel={handleCancel}\n          user={user}\n          orgId={orgId}\n        />\n      )}\n\n      {viewing && (\n        <CreateExpenseDrawer\n          expense={viewing}\n          mode=\"view\"\n          onCancel={handleCancel}\n          user={user}\n          orgId={orgId}\n        />\n      )}\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ghxstship/apps/web/app/(app)/(shell)/finance/expenses/ExpensesClient_Broken.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'loadExpenses' and 'loadStatistics'. Either include them or remove the dependency array.","line":105,"column":6,"nodeType":"ArrayExpression","endLine":105,"endColumn":22,"suggestions":[{"desc":"Update the dependencies array to be: [orgId, filters, loadExpenses, loadStatistics]","fix":{"range":[2641,2657],"text":"[orgId, filters, loadExpenses, loadStatistics]"}}]},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'DataViewProvider' is not defined.","line":593,"column":10,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":593,"endColumn":26},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'StateManagerProvider' is not defined.","line":594,"column":12,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":594,"endColumn":32},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'ViewSwitcher' is not defined.","line":598,"column":18,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":598,"endColumn":30},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'DataActions' is not defined.","line":599,"column":18,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":599,"endColumn":29},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'DataGrid' is not defined.","line":604,"column":18,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":604,"endColumn":26},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'KanbanBoard' is not defined.","line":605,"column":18,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":605,"endColumn":29},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'CalendarView' is not defined.","line":616,"column":18,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":616,"endColumn":30},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'ListView' is not defined.","line":620,"column":18,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":620,"endColumn":26},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'UniversalDrawer' is not defined.","line":628,"column":8,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":628,"endColumn":23}],"suppressedMessages":[],"errorCount":9,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { Receipt, Plus, Edit, Trash2, Check, X, Clock, AlertTriangle, FileText, DollarSign, Calendar, User as UserIcon, Search, Filter, CreditCard, Download, Upload, RefreshCw } from \"lucide-react\";\nimport { useState, useEffect } from 'react';\nimport { User } from '@supabase/supabase-js';\nimport { \n  Card, \n  Button, \n  Badge, \n  Skeleton, \n  UnifiedInput,\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue\n} from '@ghxstship/ui';\nimport { ExpensesService } from './lib/expenses-service';\nimport CreateExpenseDrawer from './drawers/CreateExpenseDrawer';\nimport ExpenseGridView from './views/ExpenseGridView';\nimport ExpenseListView from './views/ExpenseListView';\nimport type { \n  Expense, \n  ExpensesClientProps, \n  ExpenseFilters, \n  ExpenseStatistics \n} from './types';\n// Field configurations for ATLVS\nconst EXPENSE_FIELD_CONFIGS: FieldConfig[] = [\n  {\n    key: 'title',\n    label: 'Title',\n    type: 'text',\n    sortable: true,\n    filterable: true,\n    required: true\n  },\n  {\n    key: 'amount',\n    label: 'Amount',\n    type: 'currency',\n    sortable: true,\n    filterable: true,\n    required: true\n  },\n  {\n    key: 'category',\n    label: 'Category',\n    type: 'select',\n    sortable: true,\n    filterable: true,\n    required: true\n  },\n  {\n    key: 'status',\n    label: 'Status',\n    type: 'badge',\n    sortable: true,\n    filterable: true\n  },\n  {\n    key: 'vendor',\n    label: 'Vendor',\n    type: 'text',\n    sortable: true,\n    filterable: true\n  },\n  {\n    key: 'submitted_by',\n    label: 'Submitted By',\n    type: 'text',\n    sortable: true,\n    filterable: true\n  },\n  {\n    key: 'created_at',\n    label: 'Created',\n    type: 'date',\n    sortable: true,\n    filterable: true\n  }\n];\n\nexport default function ExpensesClient({ user, orgId, translations }: ExpensesClientProps) {\n  const [expenses, setExpenses] = useState<Expense[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [statistics, setStatistics] = useState<ExpenseStatistics | null>(null);\n  const [creating, setCreating] = useState(false);\n  const [editing, setEditing] = useState<Expense | null>(null);\n  const [viewing, setViewing] = useState<Expense | null>(null);\n  const [selectedIds, setSelectedIds] = useState<string[]>([]);\n  const [filters, setFilters] = useState<ExpenseFilters>({\n    status: [],\n    category: [],\n    search: ''\n  });\n  const [viewMode, setViewMode] = useState<'grid' | 'list' | 'kanban' | 'calendar'>('grid');\n  const [refreshing, setRefreshing] = useState(false);\n\n  const expensesService = new ExpensesService();\n\n  useEffect(() => {\n    loadExpenses();\n    loadStatistics();\n  }, [orgId, filters]);\n\n  const loadExpenses = async () => {\n    try {\n      setLoading(true);\n      const data = await expensesService.getExpenses(orgId, filters);\n      setExpenses(data);\n    } catch (error) {\n      console.error('Error loading expenses:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const loadStatistics = async () => {\n    try {\n      const stats = await expensesService.getExpenseStatistics(orgId);\n      setStatistics(stats);\n    } catch (error) {\n      console.error('Error loading expense statistics:', error);\n    }\n  };\n\n  const handleRefresh = async () => {\n    setRefreshing(true);\n    await Promise.all([loadExpenses(), loadStatistics()]);\n    setRefreshing(false);\n  };\n\n  const handleCreateExpense = () => {\n    setSelectedExpense(null);\n    setDrawerMode('create');\n    setDrawerOpen(true);\n  };\n\n  const handleEditExpense = (expense: Expense) => {\n    setSelectedExpense(expense);\n    setDrawerMode('edit');\n    setDrawerOpen(true);\n  };\n\n  const handleViewExpense = (expense: Expense) => {\n    setSelectedExpense(expense);\n    setDrawerMode('view');\n    setDrawerOpen(true);\n  };\n\n  const handleDeleteExpense = async (expenseId: string) => {\n    if (!confirm('Are you sure you want to delete this expense? This action cannot be undone.')) return;\n\n    try {\n      const response = await fetch('/api/v1/finance/expenses', {\n        method: 'DELETE',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ id: expenseId })\n      });\n\n      if (!response.ok) throw new Error('Failed to delete expense');\n      await loadExpenses();\n    } catch (error) {\n      console.error('Error deleting expense:', error);\n    }\n  };\n\n  const handleSaveExpense = async (expenseData: Partial<Expense>) => {\n    try {\n      if (drawerMode === 'create') {\n        const response = await fetch('/api/v1/finance/expenses', {\n          method: 'POST',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify({\n            description: expenseData.description,\n            amount: expenseData.amount,\n            currency: expenseData.currency,\n            category: expenseData.category,\n            budgetId: expenseData.budget_id,\n            projectId: expenseData.project_id,\n            expenseDate: expenseData.expense_date,\n            receiptUrl: expenseData.receipt_url,\n            status: expenseData.status\n          })\n        });\n\n        if (!response.ok) throw new Error('Failed to create expense');\n      } else if (drawerMode === 'edit' && selectedExpense) {\n        const response = await fetch('/api/v1/finance/expenses', {\n          method: 'PUT',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify({\n            id: selectedExpense.id,\n            description: expenseData.description,\n            amount: expenseData.amount,\n            currency: expenseData.currency,\n            category: expenseData.category,\n            budgetId: expenseData.budget_id,\n            projectId: expenseData.project_id,\n            expenseDate: expenseData.expense_date,\n            receiptUrl: expenseData.receipt_url,\n            status: expenseData.status\n          })\n        });\n\n        if (!response.ok) throw new Error('Failed to update expense');\n      }\n\n      setDrawerOpen(false);\n      await loadExpenses();\n    } catch (error) {\n      console.error('Error saving expense:', error);\n    }\n  };\n\n  const handleApproveExpense = async (expenseId: string) => {\n    try {\n      const response = await fetch('/api/v1/finance/expenses', {\n        method: 'PUT',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          id: expenseId,\n          status: 'approved',\n          approvedBy: user.id,\n          approvedAt: new Date().toISOString()\n        })\n      });\n\n      if (!response.ok) throw new Error('Failed to approve expense');\n      await loadExpenses();\n    } catch (error) {\n      console.error('Error approving expense:', error);\n    }\n  };\n\n  const handleRejectExpense = async (expenseId: string, reason: string) => {\n    try {\n      const response = await fetch('/api/v1/finance/expenses', {\n        method: 'PUT',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          id: expenseId,\n          status: 'rejected',\n          rejectedReason: reason\n        })\n      });\n\n      if (!response.ok) throw new Error('Failed to reject expense');\n      await loadExpenses();\n    } catch (error) {\n      console.error('Error rejecting expense:', error);\n    }\n  };\n\n  const filteredExpenses = expenses.filter(expense => {\n    const matchesSearch = searchTerm === '' || \n      expense.description.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      expense.category.toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesStatus = filterStatus === 'all' || expense.status === filterStatus;\n    const matchesCategory = filterCategory === 'all' || expense.category === filterCategory;\n    return matchesSearch && matchesStatus && matchesCategory;\n  });\n\n  const getExpenseStatusIcon = (expense: Expense) => {\n    switch (expense.status) {\n      case 'approved':\n        return <Check className=\"h-5 w-5 text-green-500\" />;\n      case 'rejected':\n        return <X className=\"h-5 w-5 text-red-500\" />;\n      case 'submitted':\n        return <Clock className=\"h-5 w-5 text-yellow-500\" />;\n      case 'paid':\n        return <CreditCard className=\"h-5 w-5 text-blue-500\" />;\n      case 'draft':\n        return <FileText className=\"h-5 w-5 text-gray-500\" />;\n      default:\n        return <Clock className=\"h-5 w-5 text-gray-500\" />;\n    }\n  };\n\n  const getExpenseStatusColor = (expense: Expense) => {\n    switch (expense.status) {\n      case 'approved':\n        return 'bg-green-100 text-green-800';\n      case 'rejected':\n        return 'bg-red-100 text-red-800';\n      case 'submitted':\n        return 'bg-yellow-100 text-yellow-800';\n      case 'paid':\n        return 'bg-blue-100 text-blue-800';\n      case 'draft':\n        return 'bg-gray-100 text-gray-800';\n      default:\n        return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  const formatCurrency = (amount: number, currency = 'USD') => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: currency,\n    }).format(amount);\n  };\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString();\n  };\n\n  // ATLVS DataViews field configuration\n  const fields: FieldConfig[] = [\n    {\n      key: 'description',\n      label: 'Description',\n      type: 'text',\n      required: true,\n      sortable: true,\n      filterable: true\n    },\n    {\n      key: 'amount',\n      label: 'Amount',\n      type: 'currency',\n      required: true,\n      sortable: true,\n      filterable: true\n    },\n    {\n      key: 'currency',\n      label: 'Currency',\n      type: 'select',\n      options: [\n        { value: 'USD', label: 'USD' },\n        { value: 'EUR', label: 'EUR' },\n        { value: 'GBP', label: 'GBP' }\n      ],\n      defaultValue: 'USD',\n      filterable: true\n    },\n    {\n      key: 'category',\n      label: 'Category',\n      type: 'select',\n      options: [\n        { value: 'equipment', label: 'Equipment' },\n        { value: 'construction', label: 'Construction' },\n        { value: 'catering', label: 'Catering' },\n        { value: 'travel', label: 'Travel' },\n        { value: 'marketing', label: 'Marketing' },\n        { value: 'operations', label: 'Operations' },\n        { value: 'office', label: 'Office Supplies' },\n        { value: 'professional', label: 'Professional Services' },\n        { value: 'other', label: 'Other' }\n      ],\n      required: true,\n      filterable: true,\n      sortable: true\n    },\n    {\n      key: 'status',\n      label: 'Status',\n      type: 'select',\n      options: [\n        { value: 'draft', label: 'Draft' },\n        { value: 'submitted', label: 'Submitted' },\n        { value: 'approved', label: 'Approved' },\n        { value: 'rejected', label: 'Rejected' },\n        { value: 'paid', label: 'Paid' }\n      ],\n      filterable: true,\n      sortable: true\n    },\n    {\n      key: 'expense_date',\n      label: 'Expense Date',\n      type: 'date',\n      required: true,\n      sortable: true,\n      filterable: true\n    },\n    {\n      key: 'receipt_url',\n      label: 'Receipt URL',\n      type: 'url',\n      sortable: false,\n      filterable: false\n    },\n    {\n      key: 'budget_id',\n      label: 'Budget',\n      type: 'text',\n      sortable: true,\n      filterable: true\n    },\n    {\n      key: 'project_id',\n      label: 'Project',\n      type: 'text',\n      sortable: true,\n      filterable: true\n    }\n  ];\n\n  // ATLVS DataViews configuration\n  const expensesConfig: DataViewConfig = {\n    id: 'expenses-dataviews',\n    name: 'Expense Management',\n    viewType: 'grid',\n    defaultView: 'grid',\n    fields,\n    data: filteredExpenses.map(expense => ({\n      ...expense,\n      record_type: 'expense'\n    })),\n    pagination: {\n      page: 1,\n      pageSize: 25,\n      total: filteredExpenses.length\n    },\n    onSearch: (query: string) => {\n      setSearchTerm(query);\n    },\n    onFilter: (filters: unknown) => {\n      if (filters.status) setFilterStatus(filters.status);\n      if (filters.category) setFilterCategory(filters.category);\n    },\n    onSort: (sorts: unknown) => {\n      console.log('Sort:', sorts);\n    },\n    onRefresh: () => {\n      loadExpenses();\n    },\n    onExport: (data, format) => {\n      console.log('Export:', format, data);\n    },\n    onImport: (data: unknown) => {\n      console.log('Import:', data);\n    },\n    onRowAction: (action: string, record: DataRecord) => {\n      const expense = record as Expense;\n      switch (action) {\n        case 'view':\n          handleViewExpense(expense);\n          break;\n        case 'edit':\n          handleEditExpense(expense);\n          break;\n        case 'delete':\n          handleDeleteExpense(expense.id);\n          break;\n        case 'approve':\n          handleApproveExpense(expense.id);\n          break;\n        case 'reject':\n          const reason = prompt('Please provide a reason for rejection:');\n          if (reason) handleRejectExpense(expense.id, reason);\n          break;\n      }\n    }\n  };\n\n  const configWithData = {\n    ...expensesConfig,\n    data: filteredExpenses.map(expense => ({\n      ...expense,\n      record_type: 'expense'\n    }))\n  };\n\n  if (loading) {\n    return (\n      <div className=\"space-y-4\">\n        <div className=\"flex justify-between items-center\">\n          <div>\n            <Skeleton className=\"h-8 w-48\" />\n            <Skeleton className=\"h-4 w-96 mt-2\" />\n          </div>\n          <Skeleton className=\"h-10 w-32\" />\n        </div>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n          {[...Array(6)].map((_, i) => (\n            <Skeleton key={i} className=\"h-32\" />\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"h-full flex flex-col\">\n      {/* Header */}\n      <div className=\"flex justify-between items-center mb-6\">\n        <div>\n          <h1 className=\"text-2xl font-bold text-gray-900\">Expense Management</h1>\n          <p className=\"text-gray-600\">Track and manage your business expenses</p>\n        </div>\n        <Button onClick={handleCreateExpense} className=\"flex items-center gap-2\">\n          <Plus className=\"h-4 w-4\" />\n          New Expense\n        </Button>\n      </div>\n\n      {/* Summary Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4 mb-6\">\n        <Card className=\"p-4\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm font-medium text-gray-600\">Total Expenses</p>\n              <p className=\"text-2xl font-bold text-gray-900\">{expenses.length}</p>\n            </div>\n            <Receipt className=\"h-8 w-8 text-blue-500\" />\n          </div>\n        </Card>\n        <Card className=\"p-4\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm font-medium text-gray-600\">Total Amount</p>\n              <p className=\"text-2xl font-bold text-gray-900\">\n                {formatCurrency(expenses.reduce((sum, e) => sum + e.amount, 0))}\n              </p>\n            </div>\n            <DollarSign className=\"h-8 w-8 text-green-500\" />\n          </div>\n        </Card>\n        <Card className=\"p-4\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm font-medium text-gray-600\">Pending Approval</p>\n              <p className=\"text-2xl font-bold text-gray-900\">\n                {expenses.filter(e => e.status === 'submitted').length}\n              </p>\n            </div>\n            <Clock className=\"h-8 w-8 text-yellow-500\" />\n          </div>\n        </Card>\n        <Card className=\"p-4\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm font-medium text-gray-600\">Approved</p>\n              <p className=\"text-2xl font-bold text-gray-900\">\n                {expenses.filter(e => e.status === 'approved').length}\n              </p>\n            </div>\n            <Check className=\"h-8 w-8 text-green-500\" />\n          </div>\n        </Card>\n      </div>\n\n      {/* Filters */}\n      <div className=\"flex gap-4 mb-6\">\n        <div className=\"flex-1\">\n          <UnifiedInput\n            placeholder=\"Search expenses...\"\n            value={searchTerm}\n            onChange={(e) => setSearchTerm(e.target.value)}\n            leftIcon={<Search className=\"h-4 w-4\" />}\n          />\n        </div>\n        <Select value={filterStatus} onValueChange={setFilterStatus}>\n          <SelectTrigger className=\"w-48\">\n            <SelectValue placeholder=\"Filter by status\" />\n          </SelectTrigger>\n          <SelectContent>\n            <SelectItem value=\"all\">All Statuses</SelectItem>\n            <SelectItem value=\"draft\">Draft</SelectItem>\n            <SelectItem value=\"submitted\">Submitted</SelectItem>\n            <SelectItem value=\"approved\">Approved</SelectItem>\n            <SelectItem value=\"rejected\">Rejected</SelectItem>\n            <SelectItem value=\"paid\">Paid</SelectItem>\n          </SelectContent>\n        </Select>\n        <Select value={filterCategory} onValueChange={setFilterCategory}>\n          <SelectTrigger className=\"w-48\">\n            <SelectValue placeholder=\"Filter by category\" />\n          </SelectTrigger>\n          <SelectContent>\n            <SelectItem value=\"all\">All Categories</SelectItem>\n            <SelectItem value=\"equipment\">Equipment</SelectItem>\n            <SelectItem value=\"construction\">Construction</SelectItem>\n            <SelectItem value=\"catering\">Catering</SelectItem>\n            <SelectItem value=\"travel\">Travel</SelectItem>\n            <SelectItem value=\"marketing\">Marketing</SelectItem>\n            <SelectItem value=\"operations\">Operations</SelectItem>\n            <SelectItem value=\"office\">Office Supplies</SelectItem>\n            <SelectItem value=\"professional\">Professional Services</SelectItem>\n            <SelectItem value=\"other\">Other</SelectItem>\n          </SelectContent>\n        </Select>\n      </div>\n\n      {/* ATLVS DataViews */}\n      <div className=\"flex-1\">\n        <DataViewProvider config={configWithData}>\n          <StateManagerProvider>\n            <div className=\"flex-1 space-y-4\">\n              {/* View Switcher and Actions */}\n              <div className=\"flex justify-between items-center\">\n                <ViewSwitcher />\n                <DataActions />\n              </div>\n\n              {/* Data Views */}\n              <div className=\"flex-1\">\n                <DataGrid />\n                <KanbanBoard \n                  columns={[\n                    { id: 'draft', title: 'Draft' },\n                    { id: 'submitted', title: 'Submitted' },\n                    { id: 'approved', title: 'Approved' },\n                    { id: 'rejected', title: 'Rejected' },\n                    { id: 'paid', title: 'Paid' }\n                  ]}\n                  statusField=\"status\"\n                  titleField=\"description\"\n                />\n                <CalendarView \n                  startDateField=\"expense_date\"\n                  titleField=\"description\"\n                />\n                <ListView titleField=\"description\" />\n              </div>\n            </div>\n          </StateManagerProvider>\n        </DataViewProvider>\n      </div>\n\n      {/* Universal Drawer for CRUD operations */}\n      <UniversalDrawer\n        open={drawerOpen}\n        onClose={() => setDrawerOpen(false)}\n        title={\n          drawerMode === 'create' ? 'Create Expense' :\n          drawerMode === 'edit' ? 'Edit Expense' : 'Expense Details'\n        }\n        mode={drawerMode}\n        data={selectedExpense}\n        fields={fields}\n        onSave={handleSaveExpense}\n        tabs={[\n          {\n            key: 'details',\n            label: 'Expense Details',\n            content: (\n              <div className=\"space-y-4\">\n                {selectedExpense && (\n                  <>\n                    <div className=\"flex items-center gap-3\">\n                      {getExpenseStatusIcon(selectedExpense)}\n                      <div>\n                        <h3 className=\"font-semibold\">{selectedExpense.description}</h3>\n                        <p className=\"text-sm text-gray-600\">{selectedExpense.category}</p>\n                      </div>\n                      <Badge className={getExpenseStatusColor(selectedExpense)}>\n                        {selectedExpense.status}\n                      </Badge>\n                    </div>\n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <div>\n                        <label className=\"text-sm font-medium text-gray-700\">Amount</label>\n                        <p className=\"text-lg font-semibold\">{formatCurrency(selectedExpense.amount)}</p>\n                      </div>\n                      <div>\n                        <label className=\"text-sm font-medium text-gray-700\">Expense Date</label>\n                        <p className=\"text-sm\">{formatDate(selectedExpense.expense_date)}</p>\n                      </div>\n                    </div>\n                    {selectedExpense.receipt_url && (\n                      <div>\n                        <label className=\"text-sm font-medium text-gray-700\">Receipt</label>\n                        <a \n                          href={selectedExpense.receipt_url} \n                          target=\"_blank\" \n                          rel=\"noopener noreferrer\"\n                          className=\"text-blue-600 hover:text-blue-800 text-sm\"\n                        >\n                          View Receipt\n                        </a>\n                      </div>\n                    )}\n                    {selectedExpense.rejected_reason && (\n                      <div>\n                        <label className=\"text-sm font-medium text-gray-700\">Rejection Reason</label>\n                        <p className=\"text-sm text-red-600\">{selectedExpense.rejected_reason}</p>\n                      </div>\n                    )}\n                    {selectedExpense.status === 'submitted' && (\n                      <div className=\"flex gap-2\">\n                        <Button \n                          onClick={() => handleApproveExpense(selectedExpense.id)}\n                          className=\"flex items-center gap-2\"\n                          size=\"sm\"\n                        >\n                          <Check className=\"h-4 w-4\" />\n                          Approve\n                        </Button>\n                        <Button \n                          onClick={() => {\n                            const reason = prompt('Please provide a reason for rejection:');\n                            if (reason) handleRejectExpense(selectedExpense.id, reason);\n                          }}\n                          variant=\"outline\"\n                          className=\"flex items-center gap-2\"\n                          size=\"sm\"\n                        >\n                          <X className=\"h-4 w-4\" />\n                          Reject\n                        </Button>\n                      </div>\n                    )}\n                  </>\n                )}\n              </div>\n            )\n          }\n        ]}\n      />\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ghxstship/apps/web/app/(app)/(shell)/finance/forecasts/ForecastsClient.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadForecasts'. Either include it or remove the dependency array.","line":79,"column":6,"nodeType":"ArrayExpression","endLine":79,"endColumn":13,"suggestions":[{"desc":"Update the dependencies array to be: [loadForecasts, orgId]","fix":{"range":[2216,2223],"text":"[loadForecasts, orgId]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { TrendingUp, Plus, Edit, Trash2, BarChart3, Target, Calendar, DollarSign, AlertTriangle, CheckCircle, Clock, Activity, PieChart, Search, Filter, TrendingDown } from \"lucide-react\";\nimport { useState, useEffect } from 'react';\nimport { User } from '@supabase/supabase-js';\nimport { createBrowserClient } from '@ghxstship/auth';\nimport { \n  Card, \n  Button, \n  Badge, \n  Skeleton, \n  UnifiedInput,\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n  DataViewProvider,\n  StateManagerProvider,\n  ViewSwitcher,\n  DataGrid,\n  KanbanBoard,\n  CalendarView,\n  ListView,\n  DataActions,\n  UniversalDrawer,\n  type DataRecord,\n  type FieldConfig,\n  type DataViewConfig\n} from '@ghxstship/ui';\n\ninterface ForecastsClientProps {\n  user: User;\n  orgId: string;\n  translations: {\n    title: string;\n    subtitle: string;\n  };\n}\n\ninterface Forecast {\n  id: string;\n  name: string;\n  description?: string;\n  type: 'revenue' | 'expense' | 'budget' | 'cash_flow';\n  period: 'monthly' | 'quarterly' | 'annually';\n  start_date: string;\n  end_date: string;\n  projected_amount: number;\n  actual_amount?: number;\n  currency: string;\n  status: 'draft' | 'active' | 'completed' | 'archived';\n  assumptions?: string;\n  confidence_level: 'low' | 'medium' | 'high';\n  variance?: number;\n  accuracy?: number;\n  project_id?: string;\n  created_at: string;\n  updated_at: string;\n  organization_id: string;\n  created_by: string;\n}\n\nexport default function ForecastsClient({ user, orgId, translations }: ForecastsClientProps) {\n  const [loading, setLoading] = useState(true);\n  const [forecasts, setForecasts] = useState<Forecast[]>([]);\n  const [selectedForecast, setSelectedForecast] = useState<Forecast | null>(null);\n  const [drawerOpen, setDrawerOpen] = useState(false);\n  const [drawerMode, setDrawerMode] = useState<'create' | 'edit' | 'view'>('view');\n  const [filterType, setFilterType] = useState<string>('all');\n  const [filterPeriod, setFilterPeriod] = useState<string>('all');\n  const [filterStatus, setFilterStatus] = useState<string>('all');\n  const [searchTerm, setSearchTerm] = useState<string>('');\n\n  const supabase = createBrowserClient();\n\n  useEffect(() => {\n    loadForecasts();\n  }, [orgId]);\n\n  const loadForecasts = async () => {\n    try {\n      setLoading(true);\n      const { data, error } = await supabase\n        .from('forecasts')\n        .select('*')\n        .eq('organization_id', orgId)\n        .order('created_at', { ascending: false });\n\n      if (error) throw error;\n      \n      // Add computed fields\n      const enrichedForecasts = (data || []).map(forecast => ({\n        ...forecast,\n        variance: forecast.actual_amount && forecast.projected_amount \n          ? forecast.actual_amount - forecast.projected_amount \n          : 0,\n        accuracy: forecast.actual_amount && forecast.projected_amount && forecast.projected_amount > 0\n          ? Math.abs(1 - (Math.abs(forecast.actual_amount - forecast.projected_amount) / forecast.projected_amount)) * 100\n          : 0\n      }));\n      \n      setForecasts(enrichedForecasts);\n    } catch (error) {\n      console.error('Error loading forecasts:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleCreateForecast = () => {\n    setSelectedForecast(null);\n    setDrawerMode('create');\n    setDrawerOpen(true);\n  };\n\n  const handleEditForecast = (forecast: Forecast) => {\n    setSelectedForecast(forecast);\n    setDrawerMode('edit');\n    setDrawerOpen(true);\n  };\n\n  const handleViewForecast = (forecast: Forecast) => {\n    setSelectedForecast(forecast);\n    setDrawerMode('view');\n    setDrawerOpen(true);\n  };\n\n  const handleDeleteForecast = async (forecastId: string) => {\n    if (!confirm('Are you sure you want to delete this forecast? This action cannot be undone.')) return;\n\n    try {\n      const response = await fetch('/api/v1/finance/forecasts', {\n        method: 'DELETE',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ id: forecastId })\n      });\n\n      if (!response.ok) throw new Error('Failed to delete forecast');\n      await loadForecasts();\n    } catch (error) {\n      console.error('Error deleting forecast:', error);\n    }\n  };\n\n  const handleSaveForecast = async (forecastData: Partial<Forecast>) => {\n    try {\n      if (drawerMode === 'create') {\n        const response = await fetch('/api/v1/finance/forecasts', {\n          method: 'POST',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify({\n            name: forecastData.name,\n            description: forecastData.description,\n            type: forecastData.type,\n            period: forecastData.period,\n            startDate: forecastData.start_date,\n            endDate: forecastData.end_date,\n            baseAmount: forecastData.projected_amount,\n            confidence: forecastData.confidence_level,\n            assumptions: forecastData.assumptions,\n            projectId: forecastData.project_id\n          })\n        });\n\n        if (!response.ok) throw new Error('Failed to create forecast');\n      } else if (drawerMode === 'edit' && selectedForecast) {\n        const response = await fetch('/api/v1/finance/forecasts', {\n          method: 'PUT',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify({\n            id: selectedForecast.id,\n            name: forecastData.name,\n            description: forecastData.description,\n            type: forecastData.type,\n            period: forecastData.period,\n            startDate: forecastData.start_date,\n            endDate: forecastData.end_date,\n            baseAmount: forecastData.projected_amount,\n            confidence: forecastData.confidence_level,\n            assumptions: forecastData.assumptions,\n            projectId: forecastData.project_id\n          })\n        });\n\n        if (!response.ok) throw new Error('Failed to update forecast');\n      }\n\n      setDrawerOpen(false);\n      await loadForecasts();\n    } catch (error) {\n      console.error('Error saving forecast:', error);\n    }\n  };\n\n  const filteredForecasts = forecasts.filter(forecast => {\n    const matchesSearch = searchTerm === '' || \n      forecast.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      forecast.description?.toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesType = filterType === 'all' || forecast.type === filterType;\n    const matchesPeriod = filterPeriod === 'all' || forecast.period === filterPeriod;\n    const matchesStatus = filterStatus === 'all' || forecast.status === filterStatus;\n    return matchesSearch && matchesType && matchesPeriod && matchesStatus;\n  });\n\n  const getForecastTypeIcon = (forecast: Forecast) => {\n    switch (forecast.type) {\n      case 'revenue':\n        return <TrendingUp className=\"h-5 w-5 text-green-500\" />;\n      case 'expense':\n        return <TrendingDown className=\"h-5 w-5 text-red-500\" />;\n      case 'budget':\n        return <Target className=\"h-5 w-5 text-blue-500\" />;\n      case 'cash_flow':\n        return <Activity className=\"h-5 w-5 text-purple-500\" />;\n      default:\n        return <BarChart3 className=\"h-5 w-5 text-gray-500\" />;\n    }\n  };\n\n  const getForecastTypeColor = (forecast: Forecast) => {\n    switch (forecast.type) {\n      case 'revenue':\n        return 'bg-green-100 text-green-800';\n      case 'expense':\n        return 'bg-red-100 text-red-800';\n      case 'budget':\n        return 'bg-blue-100 text-blue-800';\n      case 'cash_flow':\n        return 'bg-purple-100 text-purple-800';\n      default:\n        return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  const getConfidenceColor = (level: string) => {\n    switch (level) {\n      case 'high':\n        return 'bg-green-100 text-green-800';\n      case 'medium':\n        return 'bg-yellow-100 text-yellow-800';\n      case 'low':\n        return 'bg-red-100 text-red-800';\n      default:\n        return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  const getAccuracyColor = (accuracy: number) => {\n    if (accuracy >= 90) return 'text-green-600';\n    if (accuracy >= 70) return 'text-yellow-600';\n    return 'text-red-600';\n  };\n\n  const formatCurrency = (amount: number, currency = 'USD') => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: currency,\n    }).format(amount);\n  };\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString();\n  };\n\n  // ATLVS DataViews field configuration\n  const fields: FieldConfig[] = [\n    {\n      key: 'name',\n      label: 'Forecast Name',\n      type: 'text',\n      required: true,\n      sortable: true,\n      filterable: true\n    },\n    {\n      key: 'description',\n      label: 'Description',\n      type: 'textarea',\n      rows: 3,\n      sortable: true,\n      filterable: true\n    },\n    {\n      key: 'type',\n      label: 'Type',\n      type: 'select',\n      options: [\n        { value: 'revenue', label: 'Revenue' },\n        { value: 'expense', label: 'Expense' },\n        { value: 'budget', label: 'Budget' },\n        { value: 'cash_flow', label: 'Cash Flow' }\n      ],\n      required: true,\n      filterable: true,\n      sortable: true\n    },\n    {\n      key: 'period',\n      label: 'Period',\n      type: 'select',\n      options: [\n        { value: 'monthly', label: 'Monthly' },\n        { value: 'quarterly', label: 'Quarterly' },\n        { value: 'annually', label: 'Annually' }\n      ],\n      required: true,\n      filterable: true,\n      sortable: true\n    },\n    {\n      key: 'projected_amount',\n      label: 'Projected Amount',\n      type: 'currency',\n      required: true,\n      sortable: true,\n      filterable: true\n    },\n    {\n      key: 'actual_amount',\n      label: 'Actual Amount',\n      type: 'currency',\n      sortable: true,\n      filterable: true\n    },\n    {\n      key: 'variance',\n      label: 'Variance',\n      type: 'currency',\n      sortable: true,\n      filterable: true\n    },\n    {\n      key: 'accuracy',\n      label: 'Accuracy %',\n      type: 'number',\n      sortable: true,\n      filterable: true\n    },\n    {\n      key: 'confidence_level',\n      label: 'Confidence Level',\n      type: 'select',\n      options: [\n        { value: 'low', label: 'Low' },\n        { value: 'medium', label: 'Medium' },\n        { value: 'high', label: 'High' }\n      ],\n      filterable: true,\n      sortable: true\n    },\n    {\n      key: 'status',\n      label: 'Status',\n      type: 'select',\n      options: [\n        { value: 'draft', label: 'Draft' },\n        { value: 'active', label: 'Active' },\n        { value: 'completed', label: 'Completed' },\n        { value: 'archived', label: 'Archived' }\n      ],\n      filterable: true,\n      sortable: true\n    },\n    {\n      key: 'start_date',\n      label: 'Start Date',\n      type: 'date',\n      required: true,\n      sortable: true,\n      filterable: true\n    },\n    {\n      key: 'end_date',\n      label: 'End Date',\n      type: 'date',\n      required: true,\n      sortable: true,\n      filterable: true\n    },\n    {\n      key: 'assumptions',\n      label: 'Assumptions',\n      type: 'textarea',\n      rows: 4,\n      sortable: false,\n      filterable: true\n    }\n  ];\n\n  // ATLVS DataViews configuration\n  const forecastsConfig: DataViewConfig = {\n    id: 'forecasts-dataviews',\n    name: 'Financial Forecasts',\n    viewType: 'grid',\n    defaultView: 'grid',\n    fields,\n    data: filteredForecasts.map(forecast => ({\n      ...forecast,\n      record_type: 'forecast'\n    })),\n    pagination: {\n      page: 1,\n      pageSize: 25,\n      total: filteredForecasts.length\n    },\n    onSearch: (query: string) => {\n      setSearchTerm(query);\n    },\n    onFilter: (filters: unknown) => {\n      if (filters.type) setFilterType(filters.type);\n      if (filters.period) setFilterPeriod(filters.period);\n      if (filters.status) setFilterStatus(filters.status);\n    },\n    onSort: (sorts: unknown) => {\n      console.log('Sort:', sorts);\n    },\n    onRefresh: () => {\n      loadForecasts();\n    },\n    onExport: (data, format) => {\n      console.log('Export:', format, data);\n    },\n    onImport: (data: unknown) => {\n      console.log('Import:', data);\n    },\n    onRowAction: (action: string, record: DataRecord) => {\n      const forecast = record as Forecast;\n      switch (action) {\n        case 'view':\n          handleViewForecast(forecast);\n          break;\n        case 'edit':\n          handleEditForecast(forecast);\n          break;\n        case 'delete':\n          handleDeleteForecast(forecast.id);\n          break;\n      }\n    }\n  };\n\n  const configWithData = {\n    ...forecastsConfig,\n    data: filteredForecasts.map(forecast => ({\n      ...forecast,\n      record_type: 'forecast'\n    }))\n  };\n\n  if (loading) {\n    return (\n      <div className=\"space-y-4\">\n        <div className=\"flex justify-between items-center\">\n          <div>\n            <Skeleton className=\"h-8 w-48\" />\n            <Skeleton className=\"h-4 w-96 mt-2\" />\n          </div>\n          <Skeleton className=\"h-10 w-32\" />\n        </div>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n          {[...Array(6)].map((_, i) => (\n            <Skeleton key={i} className=\"h-32\" />\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"h-full flex flex-col\">\n      {/* Header */}\n      <div className=\"flex justify-between items-center mb-6\">\n        <div>\n          <h1 className=\"text-2xl font-bold text-gray-900\">Financial Forecasts</h1>\n          <p className=\"text-gray-600\">Plan and track your financial projections</p>\n        </div>\n        <Button onClick={handleCreateForecast} className=\"flex items-center gap-2\">\n          <Plus className=\"h-4 w-4\" />\n          New Forecast\n        </Button>\n      </div>\n\n      {/* Summary Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4 mb-6\">\n        <Card className=\"p-4\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm font-medium text-gray-600\">Total Forecasts</p>\n              <p className=\"text-2xl font-bold text-gray-900\">{forecasts.length}</p>\n            </div>\n            <BarChart3 className=\"h-8 w-8 text-blue-500\" />\n          </div>\n        </Card>\n        <Card className=\"p-4\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm font-medium text-gray-600\">Total Projected</p>\n              <p className=\"text-2xl font-bold text-gray-900\">\n                {formatCurrency(forecasts.reduce((sum, f) => sum + f.projected_amount, 0))}\n              </p>\n            </div>\n            <Target className=\"h-8 w-8 text-green-500\" />\n          </div>\n        </Card>\n        <Card className=\"p-4\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm font-medium text-gray-600\">Active Forecasts</p>\n              <p className=\"text-2xl font-bold text-gray-900\">\n                {forecasts.filter(f => f.status === 'active').length}\n              </p>\n            </div>\n            <Activity className=\"h-8 w-8 text-purple-500\" />\n          </div>\n        </Card>\n        <Card className=\"p-4\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm font-medium text-gray-600\">Avg Accuracy</p>\n              <p className=\"text-2xl font-bold text-gray-900\">\n                {forecasts.length > 0 \n                  ? Math.round(forecasts.reduce((sum, f) => sum + (f.accuracy || 0), 0) / forecasts.length)\n                  : 0}%\n              </p>\n            </div>\n            <CheckCircle className=\"h-8 w-8 text-yellow-500\" />\n          </div>\n        </Card>\n      </div>\n\n      {/* Filters */}\n      <div className=\"flex gap-4 mb-6\">\n        <div className=\"flex-1\">\n          <UnifiedInput\n            placeholder=\"Search forecasts...\"\n            value={searchTerm}\n            onChange={(e) => setSearchTerm(e.target.value)}\n            leftIcon={<Search className=\"h-4 w-4\" />}\n          />\n        </div>\n        <Select value={filterType} onValueChange={setFilterType}>\n          <SelectTrigger className=\"w-48\">\n            <SelectValue placeholder=\"Filter by type\" />\n          </SelectTrigger>\n          <SelectContent>\n            <SelectItem value=\"all\">All Types</SelectItem>\n            <SelectItem value=\"revenue\">Revenue</SelectItem>\n            <SelectItem value=\"expense\">Expense</SelectItem>\n            <SelectItem value=\"budget\">Budget</SelectItem>\n            <SelectItem value=\"cash_flow\">Cash Flow</SelectItem>\n          </SelectContent>\n        </Select>\n        <Select value={filterPeriod} onValueChange={setFilterPeriod}>\n          <SelectTrigger className=\"w-48\">\n            <SelectValue placeholder=\"Filter by period\" />\n          </SelectTrigger>\n          <SelectContent>\n            <SelectItem value=\"all\">All Periods</SelectItem>\n            <SelectItem value=\"monthly\">Monthly</SelectItem>\n            <SelectItem value=\"quarterly\">Quarterly</SelectItem>\n            <SelectItem value=\"annually\">Annually</SelectItem>\n          </SelectContent>\n        </Select>\n        <Select value={filterStatus} onValueChange={setFilterStatus}>\n          <SelectTrigger className=\"w-48\">\n            <SelectValue placeholder=\"Filter by status\" />\n          </SelectTrigger>\n          <SelectContent>\n            <SelectItem value=\"all\">All Statuses</SelectItem>\n            <SelectItem value=\"draft\">Draft</SelectItem>\n            <SelectItem value=\"active\">Active</SelectItem>\n            <SelectItem value=\"completed\">Completed</SelectItem>\n            <SelectItem value=\"archived\">Archived</SelectItem>\n          </SelectContent>\n        </Select>\n      </div>\n\n      {/* ATLVS DataViews */}\n      <div className=\"flex-1\">\n        <DataViewProvider config={configWithData}>\n          <StateManagerProvider>\n            <div className=\"flex-1 space-y-4\">\n              {/* View Switcher and Actions */}\n              <div className=\"flex justify-between items-center\">\n                <ViewSwitcher />\n                <DataActions />\n              </div>\n\n              {/* Data Views */}\n              <div className=\"flex-1\">\n                <DataGrid />\n                <KanbanBoard \n                  columns={[\n                    { id: 'draft', title: 'Draft' },\n                    { id: 'active', title: 'Active' },\n                    { id: 'completed', title: 'Completed' },\n                    { id: 'archived', title: 'Archived' }\n                  ]}\n                  statusField=\"status\"\n                  titleField=\"name\"\n                />\n                <CalendarView \n                  startDateField=\"start_date\"\n                  endDateField=\"end_date\"\n                  titleField=\"name\"\n                />\n                <ListView titleField=\"name\" />\n              </div>\n            </div>\n          </StateManagerProvider>\n        </DataViewProvider>\n      </div>\n\n      {/* Universal Drawer for CRUD operations */}\n      <UniversalDrawer\n        open={drawerOpen}\n        onClose={() => setDrawerOpen(false)}\n        title={\n          drawerMode === 'create' ? 'Create Forecast' :\n          drawerMode === 'edit' ? 'Edit Forecast' : 'Forecast Details'\n        }\n        mode={drawerMode}\n        data={selectedForecast}\n        fields={fields}\n        onSave={handleSaveForecast}\n        tabs={[\n          {\n            key: 'details',\n            label: 'Forecast Details',\n            content: (\n              <div className=\"space-y-4\">\n                {selectedForecast && (\n                  <>\n                    <div className=\"flex items-center gap-3\">\n                      {getForecastTypeIcon(selectedForecast)}\n                      <div>\n                        <h3 className=\"font-semibold\">{selectedForecast.name}</h3>\n                        <p className=\"text-sm text-gray-600\">{selectedForecast.period} {selectedForecast.type}</p>\n                      </div>\n                      <Badge className={getForecastTypeColor(selectedForecast)}>\n                        {selectedForecast.type}\n                      </Badge>\n                      <Badge className={getConfidenceColor(selectedForecast.confidence_level)}>\n                        {selectedForecast.confidence_level} confidence\n                      </Badge>\n                    </div>\n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <div>\n                        <label className=\"text-sm font-medium text-gray-700\">Projected Amount</label>\n                        <p className=\"text-lg font-semibold\">{formatCurrency(selectedForecast.projected_amount)}</p>\n                      </div>\n                      <div>\n                        <label className=\"text-sm font-medium text-gray-700\">Actual Amount</label>\n                        <p className=\"text-lg font-semibold\">\n                          {selectedForecast.actual_amount ? formatCurrency(selectedForecast.actual_amount) : 'N/A'}\n                        </p>\n                      </div>\n                      <div>\n                        <label className=\"text-sm font-medium text-gray-700\">Variance</label>\n                        <p className={`text-lg font-semibold ${(selectedForecast.variance || 0) >= 0 ? 'text-green-600' : 'text-red-600'}`}>\n                          {selectedForecast.variance ? formatCurrency(selectedForecast.variance) : 'N/A'}\n                        </p>\n                      </div>\n                      <div>\n                        <label className=\"text-sm font-medium text-gray-700\">Accuracy</label>\n                        <p className={`text-lg font-semibold ${getAccuracyColor(selectedForecast.accuracy || 0)}`}>\n                          {selectedForecast.accuracy ? Math.round(selectedForecast.accuracy) : 0}%\n                        </p>\n                      </div>\n                    </div>\n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <div>\n                        <label className=\"text-sm font-medium text-gray-700\">Start Date</label>\n                        <p className=\"text-sm\">{formatDate(selectedForecast.start_date)}</p>\n                      </div>\n                      <div>\n                        <label className=\"text-sm font-medium text-gray-700\">End Date</label>\n                        <p className=\"text-sm\">{formatDate(selectedForecast.end_date)}</p>\n                      </div>\n                    </div>\n                    {selectedForecast.description && (\n                      <div>\n                        <label className=\"text-sm font-medium text-gray-700\">Description</label>\n                        <p className=\"text-sm text-gray-600\">{selectedForecast.description}</p>\n                      </div>\n                    )}\n                    {selectedForecast.assumptions && (\n                      <div>\n                        <label className=\"text-sm font-medium text-gray-700\">Assumptions</label>\n                        <p className=\"text-sm text-gray-600\">{selectedForecast.assumptions}</p>\n                      </div>\n                    )}\n                  </>\n                )}\n              </div>\n            )\n          }\n        ]}\n      />\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ghxstship/apps/web/app/(app)/(shell)/finance/invoices/InvoicesClient.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadInvoices'. Either include it or remove the dependency array.","line":82,"column":6,"nodeType":"ArrayExpression","endLine":82,"endColumn":13,"suggestions":[{"desc":"Update the dependencies array to be: [loadInvoices, orgId]","fix":{"range":[2135,2142],"text":"[loadInvoices, orgId]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { FileText, Plus, Edit, Trash2, Eye, Send, Download, Search, AlertTriangle, CheckCircle, XCircle, Clock, DollarSign, Calendar, User as UserIcon, Mail } from \"lucide-react\";\nimport { useState, useEffect } from 'react';\nimport { User } from '@supabase/supabase-js';\nimport { createBrowserClient } from '@ghxstship/auth';\nimport { \n  Card, \n  Button, \n  Badge, \n  Skeleton, \n  UnifiedInput,\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n  DataViewProvider,\n  StateManagerProvider,\n  ViewSwitcher,\n  DataGrid,\n  KanbanBoard,\n  CalendarView,\n  ListView,\n  DataActions,\n  UniversalDrawer,\n  type DataRecord,\n  type FieldConfig,\n  type DataViewConfig\n} from '@ghxstship/ui';\n\ninterface InvoicesClientProps {\n  user: User;\n  orgId: string;\n  translations: {\n    title: string;\n    subtitle: string;\n  };\n}\n\ninterface Invoice {\n  id: string;\n  invoice_number: string;\n  description?: string;\n  client_company_id?: string;\n  project_id?: string;\n  purchase_order_id?: string;\n  status: 'draft' | 'sent' | 'paid' | 'overdue' | 'cancelled';\n  amount_due: number;\n  total_amount?: number;\n  tax_amount?: number;\n  discount_amount?: number;\n  currency: string;\n  issued_date?: string;\n  due_at?: string;\n  paid_date?: string;\n  payment_terms?: string;\n  line_items?: unknown[];\n  notes?: string;\n  created_at: string;\n  updated_at: string;\n  organization_id: string;\n  // Computed fields\n  days_overdue?: number;\n  client_name?: string;\n  project_name?: string;\n}\n\nexport default function InvoicesClient({ user, orgId, translations }: InvoicesClientProps) {\n  const [loading, setLoading] = useState(true);\n  const [invoices, setInvoices] = useState<Invoice[]>([]);\n  const [selectedInvoice, setSelectedInvoice] = useState<Invoice | null>(null);\n  const [drawerOpen, setDrawerOpen] = useState(false);\n  const [drawerMode, setDrawerMode] = useState<'create' | 'edit' | 'view'>('view');\n  const [filterStatus, setFilterStatus] = useState<string>('all');\n  const [searchTerm, setSearchTerm] = useState<string>('');\n\n  const supabase = createBrowserClient();\n\n  useEffect(() => {\n    loadInvoices();\n  }, [orgId]);\n\n  const loadInvoices = async () => {\n    try {\n      setLoading(true);\n      const { data, error } = await supabase\n        .from('invoices')\n        .select(`\n          *,\n          companies:client_company_id(name),\n          projects:project_id(name)\n        `)\n        .eq('organization_id', orgId)\n        .order('created_at', { ascending: false });\n\n      if (error) throw error;\n      \n      // Add computed fields\n      const enrichedInvoices = (data || []).map(invoice => {\n        const today = new Date();\n        const dueDate = invoice.due_at ? new Date(invoice.due_at) : null;\n        const daysOverdue = dueDate && today > dueDate && invoice.status !== 'paid' \n          ? Math.floor((today.getTime() - dueDate.getTime()) / (1000 * 60 * 60 * 24))\n          : 0;\n\n        return {\n          ...invoice,\n          days_overdue: daysOverdue,\n          client_name: invoice.companies?.name || 'Unknown Client',\n          project_name: invoice.projects?.name || null,\n          total_amount: invoice.total_amount || invoice.amount_due\n        };\n      });\n      \n      setInvoices(enrichedInvoices);\n    } catch (error) {\n      console.error('Error loading invoices:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleCreateInvoice = () => {\n    setSelectedInvoice(null);\n    setDrawerMode('create');\n    setDrawerOpen(true);\n  };\n\n  const handleEditInvoice = (invoice: Invoice) => {\n    setSelectedInvoice(invoice);\n    setDrawerMode('edit');\n    setDrawerOpen(true);\n  };\n\n  const handleViewInvoice = (invoice: Invoice) => {\n    setSelectedInvoice(invoice);\n    setDrawerMode('view');\n    setDrawerOpen(true);\n  };\n\n  const handleDeleteInvoice = async (invoiceId: string) => {\n    if (!confirm('Are you sure you want to delete this invoice? This action cannot be undone.')) return;\n\n    try {\n      const response = await fetch('/api/v1/finance/invoices', {\n        method: 'DELETE',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ id: invoiceId })\n      });\n\n      if (!response.ok) throw new Error('Failed to delete invoice');\n      await loadInvoices();\n    } catch (error) {\n      console.error('Error deleting invoice:', error);\n    }\n  };\n\n  const handleSaveInvoice = async (invoiceData: Partial<Invoice>) => {\n    try {\n      if (drawerMode === 'create') {\n        const response = await fetch('/api/v1/finance/invoices', {\n          method: 'POST',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify({\n            invoiceNumber: invoiceData.invoice_number,\n            clientId: invoiceData.client_company_id,\n            projectId: invoiceData.project_id,\n            issueDate: invoiceData.issued_date,\n            dueDate: invoiceData.due_at,\n            status: invoiceData.status,\n            currency: invoiceData.currency,\n            subtotal: invoiceData.amount_due,\n            taxAmount: invoiceData.tax_amount,\n            discount: invoiceData.discount_amount,\n            total: invoiceData.total_amount,\n            paymentTerms: invoiceData.payment_terms,\n            notes: invoiceData.notes,\n            lineItems: invoiceData.line_items\n          })\n        });\n\n        if (!response.ok) throw new Error('Failed to create invoice');\n      } else if (drawerMode === 'edit' && selectedInvoice) {\n        const response = await fetch('/api/v1/finance/invoices', {\n          method: 'PUT',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify({\n            id: selectedInvoice.id,\n            invoiceNumber: invoiceData.invoice_number,\n            clientId: invoiceData.client_company_id,\n            projectId: invoiceData.project_id,\n            issueDate: invoiceData.issued_date,\n            dueDate: invoiceData.due_at,\n            status: invoiceData.status,\n            currency: invoiceData.currency,\n            subtotal: invoiceData.amount_due,\n            taxAmount: invoiceData.tax_amount,\n            discount: invoiceData.discount_amount,\n            total: invoiceData.total_amount,\n            paymentTerms: invoiceData.payment_terms,\n            notes: invoiceData.notes,\n            lineItems: invoiceData.line_items\n          })\n        });\n\n        if (!response.ok) throw new Error('Failed to update invoice');\n      }\n\n      setDrawerOpen(false);\n      await loadInvoices();\n    } catch (error) {\n      console.error('Error saving invoice:', error);\n    }\n  };\n\n  const handleSendInvoice = async (invoiceId: string) => {\n    try {\n      const response = await fetch('/api/v1/finance/invoices', {\n        method: 'PUT',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          id: invoiceId,\n          status: 'sent'\n        })\n      });\n\n      if (!response.ok) throw new Error('Failed to send invoice');\n      await loadInvoices();\n    } catch (error) {\n      console.error('Error sending invoice:', error);\n    }\n  };\n\n  const handleMarkPaid = async (invoiceId: string) => {\n    try {\n      const response = await fetch('/api/v1/finance/invoices', {\n        method: 'PUT',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          id: invoiceId,\n          status: 'paid',\n          paidDate: new Date().toISOString()\n        })\n      });\n\n      if (!response.ok) throw new Error('Failed to mark invoice as paid');\n      await loadInvoices();\n    } catch (error) {\n      console.error('Error marking invoice as paid:', error);\n    }\n  };\n\n  const filteredInvoices = invoices.filter(invoice => {\n    const matchesSearch = searchTerm === '' || \n      invoice.invoice_number.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      invoice.client_name?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      invoice.description?.toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesStatus = filterStatus === 'all' || invoice.status === filterStatus;\n    return matchesSearch && matchesStatus;\n  });\n\n  const getInvoiceStatusIcon = (invoice: Invoice) => {\n    switch (invoice.status) {\n      case 'paid':\n        return <CheckCircle className=\"h-5 w-5 text-green-500\" />;\n      case 'overdue':\n        return <AlertTriangle className=\"h-5 w-5 text-red-500\" />;\n      case 'sent':\n        return <Mail className=\"h-5 w-5 text-blue-500\" />;\n      case 'cancelled':\n        return <XCircle className=\"h-5 w-5 text-gray-500\" />;\n      case 'draft':\n        return <FileText className=\"h-5 w-5 text-yellow-500\" />;\n      default:\n        return <Clock className=\"h-5 w-5 text-gray-500\" />;\n    }\n  };\n\n  const getInvoiceStatusColor = (invoice: Invoice) => {\n    switch (invoice.status) {\n      case 'paid':\n        return 'bg-green-100 text-green-800';\n      case 'overdue':\n        return 'bg-red-100 text-red-800';\n      case 'sent':\n        return 'bg-blue-100 text-blue-800';\n      case 'cancelled':\n        return 'bg-gray-100 text-gray-800';\n      case 'draft':\n        return 'bg-yellow-100 text-yellow-800';\n      default:\n        return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  const formatCurrency = (amount: number, currency = 'USD') => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: currency,\n    }).format(amount);\n  };\n\n  const formatDate = (dateString?: string) => {\n    if (!dateString) return 'N/A';\n    return new Date(dateString).toLocaleDateString();\n  };\n\n  // ATLVS DataViews field configuration\n  const fields: FieldConfig[] = [\n    {\n      key: 'invoice_number',\n      label: 'Invoice Number',\n      type: 'text',\n      required: true,\n      sortable: true,\n      filterable: true\n    },\n    {\n      key: 'description',\n      label: 'Description',\n      type: 'textarea',\n      rows: 3,\n      sortable: true,\n      filterable: true\n    },\n    {\n      key: 'client_company_id',\n      label: 'Client',\n      type: 'text',\n      required: true,\n      sortable: true,\n      filterable: true\n    },\n    {\n      key: 'project_id',\n      label: 'Project',\n      type: 'text',\n      sortable: true,\n      filterable: true\n    },\n    {\n      key: 'amount_due',\n      label: 'Amount Due',\n      type: 'currency',\n      required: true,\n      sortable: true,\n      filterable: true\n    },\n    {\n      key: 'total_amount',\n      label: 'Total Amount',\n      type: 'currency',\n      sortable: true,\n      filterable: true\n    },\n    {\n      key: 'tax_amount',\n      label: 'Tax Amount',\n      type: 'currency',\n      sortable: true,\n      filterable: true\n    },\n    {\n      key: 'discount_amount',\n      label: 'Discount Amount',\n      type: 'currency',\n      sortable: true,\n      filterable: true\n    },\n    {\n      key: 'currency',\n      label: 'Currency',\n      type: 'select',\n      options: [\n        { value: 'USD', label: 'USD' },\n        { value: 'EUR', label: 'EUR' },\n        { value: 'GBP', label: 'GBP' }\n      ],\n      defaultValue: 'USD',\n      filterable: true\n    },\n    {\n      key: 'status',\n      label: 'Status',\n      type: 'select',\n      options: [\n        { value: 'draft', label: 'Draft' },\n        { value: 'sent', label: 'Sent' },\n        { value: 'paid', label: 'Paid' },\n        { value: 'overdue', label: 'Overdue' },\n        { value: 'cancelled', label: 'Cancelled' }\n      ],\n      filterable: true,\n      sortable: true\n    },\n    {\n      key: 'issued_date',\n      label: 'Issue Date',\n      type: 'date',\n      sortable: true,\n      filterable: true\n    },\n    {\n      key: 'due_at',\n      label: 'Due Date',\n      type: 'date',\n      sortable: true,\n      filterable: true\n    },\n    {\n      key: 'paid_date',\n      label: 'Paid Date',\n      type: 'date',\n      sortable: true,\n      filterable: true\n    },\n    {\n      key: 'payment_terms',\n      label: 'Payment Terms',\n      type: 'text',\n      sortable: true,\n      filterable: true\n    },\n    {\n      key: 'notes',\n      label: 'Notes',\n      type: 'textarea',\n      rows: 3,\n      sortable: false,\n      filterable: true\n    }\n  ];\n\n  // ATLVS DataViews configuration\n  const invoicesConfig: DataViewConfig = {\n    id: 'invoices-dataviews',\n    name: 'Invoice Management',\n    viewType: 'grid',\n    defaultView: 'grid',\n    fields,\n    data: filteredInvoices.map(invoice => ({\n      ...invoice,\n      record_type: 'invoice'\n    })),\n    pagination: {\n      page: 1,\n      pageSize: 25,\n      total: filteredInvoices.length\n    },\n    onSearch: (query: string) => {\n      setSearchTerm(query);\n    },\n    onFilter: (filters: unknown) => {\n      if (filters.status) setFilterStatus(filters.status);\n    },\n    onSort: (sorts: unknown) => {\n      console.log('Sort:', sorts);\n    },\n    onRefresh: () => {\n      loadInvoices();\n    },\n    onExport: (data, format) => {\n      console.log('Export:', format, data);\n    },\n    onImport: (data: unknown) => {\n      console.log('Import:', data);\n    },\n    onRowAction: (action: string, record: DataRecord) => {\n      const invoice = record as Invoice;\n      switch (action) {\n        case 'view':\n          handleViewInvoice(invoice);\n          break;\n        case 'edit':\n          handleEditInvoice(invoice);\n          break;\n        case 'delete':\n          handleDeleteInvoice(invoice.id);\n          break;\n        case 'send':\n          handleSendInvoice(invoice.id);\n          break;\n        case 'mark_paid':\n          handleMarkPaid(invoice.id);\n          break;\n      }\n    }\n  };\n\n  const configWithData = {\n    ...invoicesConfig,\n    data: filteredInvoices.map(invoice => ({\n      ...invoice,\n      record_type: 'invoice'\n    }))\n  };\n\n  if (loading) {\n    return (\n      <div className=\"space-y-4\">\n        <div className=\"flex justify-between items-center\">\n          <div>\n            <Skeleton className=\"h-8 w-48\" />\n            <Skeleton className=\"h-4 w-96 mt-2\" />\n          </div>\n          <Skeleton className=\"h-10 w-32\" />\n        </div>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n          {[...Array(6)].map((_, i) => (\n            <Skeleton key={i} className=\"h-32\" />\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"h-full flex flex-col\">\n      {/* Header */}\n      <div className=\"flex justify-between items-center mb-6\">\n        <div>\n          <h1 className=\"text-2xl font-bold text-gray-900\">Invoice Management</h1>\n          <p className=\"text-gray-600\">Create and manage your client invoices</p>\n        </div>\n        <Button onClick={handleCreateInvoice} className=\"flex items-center gap-2\">\n          <Plus className=\"h-4 w-4\" />\n          New Invoice\n        </Button>\n      </div>\n\n      {/* Summary Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4 mb-6\">\n        <Card className=\"p-4\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm font-medium text-gray-600\">Total Invoices</p>\n              <p className=\"text-2xl font-bold text-gray-900\">{invoices.length}</p>\n            </div>\n            <FileText className=\"h-8 w-8 text-blue-500\" />\n          </div>\n        </Card>\n        <Card className=\"p-4\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm font-medium text-gray-600\">Total Amount</p>\n              <p className=\"text-2xl font-bold text-gray-900\">\n                {formatCurrency(invoices.reduce((sum, i) => sum + (i.total_amount || i.amount_due), 0))}\n              </p>\n            </div>\n            <DollarSign className=\"h-8 w-8 text-green-500\" />\n          </div>\n        </Card>\n        <Card className=\"p-4\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm font-medium text-gray-600\">Pending Payment</p>\n              <p className=\"text-2xl font-bold text-gray-900\">\n                {invoices.filter(i => i.status === 'sent' || i.status === 'overdue').length}\n              </p>\n            </div>\n            <Clock className=\"h-8 w-8 text-yellow-500\" />\n          </div>\n        </Card>\n        <Card className=\"p-4\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm font-medium text-gray-600\">Paid</p>\n              <p className=\"text-2xl font-bold text-gray-900\">\n                {invoices.filter(i => i.status === 'paid').length}\n              </p>\n            </div>\n            <CheckCircle className=\"h-8 w-8 text-green-500\" />\n          </div>\n        </Card>\n      </div>\n\n      {/* Filters */}\n      <div className=\"flex gap-4 mb-6\">\n        <div className=\"flex-1\">\n          <UnifiedInput\n            placeholder=\"Search invoices...\"\n            value={searchTerm}\n            onChange={(e) => setSearchTerm(e.target.value)}\n            leftIcon={<Search className=\"h-4 w-4\" />}\n          />\n        </div>\n        <Select value={filterStatus} onValueChange={setFilterStatus}>\n          <SelectTrigger className=\"w-48\">\n            <SelectValue placeholder=\"Filter by status\" />\n          </SelectTrigger>\n          <SelectContent>\n            <SelectItem value=\"all\">All Statuses</SelectItem>\n            <SelectItem value=\"draft\">Draft</SelectItem>\n            <SelectItem value=\"sent\">Sent</SelectItem>\n            <SelectItem value=\"paid\">Paid</SelectItem>\n            <SelectItem value=\"overdue\">Overdue</SelectItem>\n            <SelectItem value=\"cancelled\">Cancelled</SelectItem>\n          </SelectContent>\n        </Select>\n      </div>\n\n      {/* ATLVS DataViews */}\n      <div className=\"flex-1\">\n        <DataViewProvider config={configWithData}>\n          <StateManagerProvider>\n            <div className=\"flex-1 space-y-4\">\n              {/* View Switcher and Actions */}\n              <div className=\"flex justify-between items-center\">\n                <ViewSwitcher />\n                <DataActions />\n              </div>\n\n              {/* Data Views */}\n              <div className=\"flex-1\">\n                <DataGrid />\n                <KanbanBoard \n                  columns={[\n                    { id: 'draft', title: 'Draft' },\n                    { id: 'sent', title: 'Sent' },\n                    { id: 'paid', title: 'Paid' },\n                    { id: 'overdue', title: 'Overdue' },\n                    { id: 'cancelled', title: 'Cancelled' }\n                  ]}\n                  statusField=\"status\"\n                  titleField=\"invoice_number\"\n                />\n                <CalendarView \n                  startDateField=\"issued_date\"\n                  endDateField=\"due_at\"\n                  titleField=\"invoice_number\"\n                />\n                <ListView titleField=\"invoice_number\" />\n              </div>\n            </div>\n          </StateManagerProvider>\n        </DataViewProvider>\n      </div>\n\n      {/* Universal Drawer for CRUD operations */}\n      <UniversalDrawer\n        open={drawerOpen}\n        onClose={() => setDrawerOpen(false)}\n        title={\n          drawerMode === 'create' ? 'Create Invoice' :\n          drawerMode === 'edit' ? 'Edit Invoice' : 'Invoice Details'\n        }\n        mode={drawerMode}\n        data={selectedInvoice}\n        fields={fields}\n        onSave={handleSaveInvoice}\n        tabs={[\n          {\n            key: 'details',\n            label: 'Invoice Details',\n            content: (\n              <div className=\"space-y-4\">\n                {selectedInvoice && (\n                  <>\n                    <div className=\"flex items-center gap-3\">\n                      {getInvoiceStatusIcon(selectedInvoice)}\n                      <div>\n                        <h3 className=\"font-semibold\">{selectedInvoice.invoice_number}</h3>\n                        <p className=\"text-sm text-gray-600\">{selectedInvoice.client_name}</p>\n                      </div>\n                      <Badge className={getInvoiceStatusColor(selectedInvoice)}>\n                        {selectedInvoice.status}\n                      </Badge>\n                      {selectedInvoice.days_overdue && selectedInvoice.days_overdue > 0 && (\n                        <Badge className=\"bg-red-100 text-red-800\">\n                          {selectedInvoice.days_overdue} days overdue\n                        </Badge>\n                      )}\n                    </div>\n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <div>\n                        <label className=\"text-sm font-medium text-gray-700\">Amount Due</label>\n                        <p className=\"text-lg font-semibold\">{formatCurrency(selectedInvoice.amount_due)}</p>\n                      </div>\n                      <div>\n                        <label className=\"text-sm font-medium text-gray-700\">Total Amount</label>\n                        <p className=\"text-lg font-semibold\">\n                          {formatCurrency(selectedInvoice.total_amount || selectedInvoice.amount_due)}\n                        </p>\n                      </div>\n                      <div>\n                        <label className=\"text-sm font-medium text-gray-700\">Issue Date</label>\n                        <p className=\"text-sm\">{formatDate(selectedInvoice.issued_date)}</p>\n                      </div>\n                      <div>\n                        <label className=\"text-sm font-medium text-gray-700\">Due Date</label>\n                        <p className=\"text-sm\">{formatDate(selectedInvoice.due_at)}</p>\n                      </div>\n                    </div>\n                    {selectedInvoice.project_name && (\n                      <div>\n                        <label className=\"text-sm font-medium text-gray-700\">Project</label>\n                        <p className=\"text-sm text-gray-600\">{selectedInvoice.project_name}</p>\n                      </div>\n                    )}\n                    {selectedInvoice.payment_terms && (\n                      <div>\n                        <label className=\"text-sm font-medium text-gray-700\">Payment Terms</label>\n                        <p className=\"text-sm text-gray-600\">{selectedInvoice.payment_terms}</p>\n                      </div>\n                    )}\n                    {selectedInvoice.notes && (\n                      <div>\n                        <label className=\"text-sm font-medium text-gray-700\">Notes</label>\n                        <p className=\"text-sm text-gray-600\">{selectedInvoice.notes}</p>\n                      </div>\n                    )}\n                    {selectedInvoice.status === 'draft' && (\n                      <div className=\"flex gap-2\">\n                        <Button \n                          onClick={() => handleSendInvoice(selectedInvoice.id)}\n                          className=\"flex items-center gap-2\"\n                          size=\"sm\"\n                        >\n                          <Send className=\"h-4 w-4\" />\n                          Send Invoice\n                        </Button>\n                      </div>\n                    )}\n                    {(selectedInvoice.status === 'sent' || selectedInvoice.status === 'overdue') && (\n                      <div className=\"flex gap-2\">\n                        <Button \n                          onClick={() => handleMarkPaid(selectedInvoice.id)}\n                          className=\"flex items-center gap-2\"\n                          size=\"sm\"\n                        >\n                          <CheckCircle className=\"h-4 w-4\" />\n                          Mark as Paid\n                        </Button>\n                      </div>\n                    )}\n                  </>\n                )}\n              </div>\n            )\n          }\n        ]}\n      />\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ghxstship/apps/web/app/(app)/(shell)/finance/overview/FinanceClient.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadFinanceData'. Either include it or remove the dependency array.","line":18,"column":6,"nodeType":"ArrayExpression","endLine":18,"endColumn":13,"suggestions":[{"desc":"Update the dependencies array to be: [loadFinanceData, orgId]","fix":{"range":[713,720],"text":"[loadFinanceData, orgId]"}}]},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'DataViewProvider' is not defined.","line":185,"column":8,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":185,"endColumn":24},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'StateManagerProvider' is not defined.","line":186,"column":10,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":186,"endColumn":30},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'ViewSwitcher' is not defined.","line":190,"column":16,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":190,"endColumn":28},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'DataActions' is not defined.","line":191,"column":16,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":191,"endColumn":27},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'DataGrid' is not defined.","line":196,"column":16,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":196,"endColumn":24},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'KanbanBoard' is not defined.","line":197,"column":16,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":197,"endColumn":27},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'CalendarView' is not defined.","line":207,"column":16,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":207,"endColumn":28},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'ListView' is not defined.","line":211,"column":16,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":211,"endColumn":24}],"suppressedMessages":[],"errorCount":8,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { User, FileText, Settings, Award, Calendar, TrendingUp, Activity, Clock, Plus, Search, Play, Trash2 } from \"lucide-react\";\nimport { useEffect, useState } from 'react';\nimport { type DataRecord } from '@ghxstship/ui';\nimport { useTranslations } from 'next-intl';\nimport { createBrowserClient } from '@ghxstship/auth';\nimport AppDrawer from '@/app/_components/shared/AppDrawer';\n\nexport default function FinanceClient({ orgId }: { orgId: string }) {\n  const t = useTranslations('finance');\n  const sb = createBrowserClient();\n  const [loading, setLoading] = useState(false);\n  const [financeData, setFinanceData] = useState<DataRecord[]>([]);\n\n  useEffect(() => {\n    loadFinanceData();\n  }, [orgId]);\n\n  async function loadFinanceData() {\n    setLoading(true);\n    try {\n      // Load all finance-related data (budgets, expenses, invoices)\n      const [budgetsData, expensesData, invoicesData] = await Promise.all([\n        sb.from('budgets').select('*').eq('organization_id', orgId).order('created_at', { ascending: false }),\n        sb.from('expenses').select('*').eq('organization_id', orgId).order('date', { ascending: false }),\n        sb.from('invoices').select('*').eq('organization_id', orgId).order('created_at', { ascending: false })\n      ]);\n\n      // Combine all data with type indicators\n      const allData = [\n        ...(budgetsData.data || []).map(item => ({ ...item, record_type: 'budget' })),\n        ...(expensesData.data || []).map(item => ({ ...item, record_type: 'expense' })),\n        ...(invoicesData.data || []).map(item => ({ ...item, record_type: 'invoice' }))\n      ];\n\n      setFinanceData(allData);\n    } catch (error) {\n      console.error('Error loading finance data:', error);\n    } finally {\n      setLoading(false);\n    }\n  }\n\n  // ATLVS DataViews field configuration\n  const fields: FieldConfig[] = [\n    {\n      key: 'name',\n      label: t('name'),\n      type: 'text',\n      required: true,\n      sortable: true,\n      filterable: true\n    },\n    {\n      key: 'description',\n      label: t('description'),\n      type: 'textarea',\n      rows: 3,\n      sortable: true,\n      filterable: true\n    },\n    {\n      key: 'amount',\n      label: t('amount'),\n      type: 'currency',\n      required: true,\n      sortable: true,\n      filterable: true\n    },\n    {\n      key: 'total_amount',\n      label: t('totalAmount'),\n      type: 'currency',\n      sortable: true,\n      filterable: true\n    },\n    {\n      key: 'currency',\n      label: t('currency'),\n      type: 'select',\n      options: [\n        { value: 'USD', label: 'USD' },\n        { value: 'EUR', label: 'EUR' },\n        { value: 'GBP', label: 'GBP' }\n      ],\n      defaultValue: 'USD',\n      filterable: true\n    },\n    {\n      key: 'status',\n      label: t('status'),\n      type: 'select',\n      options: [\n        { value: 'draft', label: t('statuses.draft') },\n        { value: 'pending', label: t('statuses.pending') },\n        { value: 'approved', label: t('statuses.approved') },\n        { value: 'active', label: t('statuses.active') },\n        { value: 'rejected', label: t('statuses.rejected') },\n        { value: 'closed', label: t('statuses.closed') }\n      ],\n      filterable: true,\n      sortable: true\n    },\n    {\n      key: 'category',\n      label: t('category'),\n      type: 'select',\n      options: [\n        { value: 'equipment', label: t('categories.equipment') },\n        { value: 'construction', label: t('categories.construction') },\n        { value: 'catering', label: t('categories.catering') },\n        { value: 'travel', label: t('categories.travel') },\n        { value: 'other', label: t('categories.other') }\n      ],\n      filterable: true,\n      sortable: true\n    },\n    {\n      key: 'date',\n      label: t('date'),\n      type: 'date',\n      sortable: true,\n      filterable: true\n    },\n    {\n      key: 'record_type',\n      label: t('type'),\n      type: 'select',\n      options: [\n        { value: 'budget', label: t('types.budget') },\n        { value: 'expense', label: t('types.expense') },\n        { value: 'invoice', label: t('types.invoice') }\n      ],\n      filterable: true,\n      sortable: true\n    }\n  ];\n\n  // ATLVS DataViews configuration\n  const financeConfig: DataViewConfig = {\n    id: 'finance-dataviews',\n    name: t('title'),\n    viewType: 'grid',\n    defaultView: 'grid',\n    fields,\n    data: financeData,\n    pagination: {\n      page: 1,\n      pageSize: 25,\n      total: financeData.length\n    },\n    onSearch: (query: string) => {\n      console.log('Search:', query);\n      // Implement search logic\n    },\n    onFilter: (filters: unknown) => {\n      console.log('Filter:', filters);\n      // Implement filter logic\n    },\n    onSort: (sorts: unknown) => {\n      console.log('Sort:', sorts);\n      // Implement sort logic\n    },\n    onRefresh: () => {\n      loadFinanceData();\n    },\n    onExport: (data, format) => {\n      console.log('Export:', format, data);\n      // Implement export logic\n    },\n    onImport: (data: unknown) => {\n      console.log('Import:', data);\n      // Implement import logic\n    }\n  };\n\n  const configWithData = {\n    ...financeConfig,\n    data: financeData\n  };\n\n  return (\n    <div className=\"h-full flex flex-col\">\n      <DataViewProvider config={configWithData}>\n        <StateManagerProvider>\n          <div className=\"flex-1 stack-lg\">\n            {/* View Switcher and Actions */}\n            <div className=\"flex justify-between items-center\">\n              <ViewSwitcher />\n              <DataActions />\n            </div>\n\n            {/* ATLVS DataViews */}\n            <div className=\"flex-1 stack-lg\">\n              <DataGrid />\n              <KanbanBoard \n                columns={[\n                  { id: 'draft', title: t('statuses.draft') },\n                  { id: 'pending', title: t('statuses.pending') },\n                  { id: 'approved', title: t('statuses.approved') },\n                  { id: 'active', title: t('statuses.active') }\n                ]}\n                statusField=\"status\"\n                titleField=\"name\"\n              />\n              <CalendarView \n                startDateField=\"date\"\n                titleField=\"name\"\n              />\n              <ListView titleField=\"name\" />\n            </div>\n\n            {/* Drawer for record details and editing */}\n            <AppDrawer\n              title=\"Details\"\n              open={false}\n              onClose={() => {}}\n              record={null}\n              fields={[]}\n              mode=\"view\"\n              tabs={[{\n                key: 'content',\n                label: 'Details',\n                content: (\n                  <div className=\"p-md\">\n                    <p>Details will be shown here.</p>\n                  </div>\n                )\n              }]}\n            />\n          </div>\n        </StateManagerProvider>\n      </DataViewProvider>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ghxstship/apps/web/app/(app)/(shell)/finance/overview/OverviewClient.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadFinanceOverview'. Either include it or remove the dependency array.","line":61,"column":6,"nodeType":"ArrayExpression","endLine":61,"endColumn":13,"suggestions":[{"desc":"Update the dependencies array to be: [loadFinanceOverview, orgId]","fix":{"range":[1724,1731],"text":"[loadFinanceOverview, orgId]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\n\nimport { DollarSign, TrendingUp, TrendingDown, Banknote, CreditCard, BarChart3, AlertTriangle, CheckCircle, Clock, Calendar, ArrowUp, ArrowDown, ArrowUpRight, ArrowDownRight, PieChart, Calculator, Target } from \"lucide-react\";\nimport { useState, useEffect } from 'react';\nimport { User } from '@supabase/supabase-js';\nimport { createBrowserClient } from '@ghxstship/auth';\nimport { Card, Button, Badge, Skeleton } from '@ghxstship/ui';\n// Using Lucide React icons as alternative to Heroicons\n\ninterface FinanceOverviewClientProps {\n  user: User;\n  orgId: string;\n  translations: {\n    title: string;\n    subtitle: string;\n  };\n}\n\ninterface FinancialSummary {\n  totalRevenue: number;\n  totalExpenses: number;\n  netIncome: number;\n  totalBudget: number;\n  budgetUtilization: number;\n  pendingInvoices: number;\n  overdueInvoices: number;\n  cashFlow: number;\n  accountsBalance: number;\n  currency: string;\n}\n\ninterface RecentTransaction {\n  id: string;\n  description: string;\n  amount: number;\n  kind: 'revenue' | 'expense';\n  occurredAt: string;\n  accountName: string;\n}\n\ninterface BudgetAlert {\n  id: string;\n  budgetName: string;\n  spent: number;\n  amount: number;\n  utilization: number;\n  status: 'warning' | 'critical';\n}\n\nexport default function FinanceOverviewClient({ user, orgId, translations }: FinanceOverviewClientProps) {\n  const [loading, setLoading] = useState(true);\n  const [summary, setSummary] = useState<FinancialSummary | null>(null);\n  const [recentTransactions, setRecentTransactions] = useState<RecentTransaction[]>([]);\n  const [budgetAlerts, setBudgetAlerts] = useState<BudgetAlert[]>([]);\n\n  const supabase = createBrowserClient();\n\n  useEffect(() => {\n    loadFinanceOverview();\n  }, [orgId]);\n\n  const loadFinanceOverview = async () => {\n    try {\n      setLoading(true);\n      \n      // Load financial summary data\n      const [\n        revenueData,\n        expensesData,\n        budgetsData,\n        invoicesData,\n        accountsData,\n        transactionsData\n      ] = await Promise.all([\n        supabase.from('revenue').select('amount, currency').eq('organization_id', orgId).eq('status', 'received'),\n        supabase.from('expenses').select('amount, currency').eq('organization_id', orgId).eq('status', 'approved'),\n        supabase.from('budgets').select('id, amount, spent, currency, name').eq('organization_id', orgId),\n        supabase.from('invoices').select('amount_due, status').eq('organization_id', orgId),\n        supabase.from('finance_accounts').select('balance, currency').eq('organization_id', orgId),\n        supabase.from('finance_transactions').select('*, finance_accounts(name)').eq('organization_id', orgId).order('occurred_at', { ascending: false }).limit(10)\n      ]);\n\n      // Calculate summary metrics\n      const totalRevenue = (revenueData.data || []).reduce((sum, item) => sum + Number(item.amount), 0);\n      const totalExpenses = (expensesData.data || []).reduce((sum, item) => sum + Number(item.amount), 0);\n      const totalBudget = (budgetsData.data || []).reduce((sum, item) => sum + Number(item.amount), 0);\n      const budgetSpent = (budgetsData.data || []).reduce((sum, item) => sum + Number(item.spent), 0);\n      const accountsBalance = (accountsData.data || []).reduce((sum, item) => sum + Number(item.balance), 0);\n      \n      const pendingInvoices = (invoicesData.data || []).filter(inv => inv.status === 'sent').length;\n      const overdueInvoices = (invoicesData.data || []).filter(inv => inv.status === 'overdue').length;\n\n      const financialSummary: FinancialSummary = {\n        totalRevenue,\n        totalExpenses,\n        netIncome: totalRevenue - totalExpenses,\n        totalBudget,\n        budgetUtilization: totalBudget > 0 ? (budgetSpent / totalBudget) * 100 : 0,\n        pendingInvoices,\n        overdueInvoices,\n        cashFlow: totalRevenue - totalExpenses,\n        accountsBalance,\n        currency: 'USD'\n      };\n\n      setSummary(financialSummary);\n\n      // Process recent transactions\n      const transactions = (transactionsData.data || []).map(tx => ({\n        id: tx.id,\n        description: tx.description,\n        amount: tx.amount,\n        kind: tx.kind,\n        occurredAt: tx.occurred_at,\n        accountName: tx.finance_accounts?.name || 'Unknown Account'\n      }));\n      setRecentTransactions(transactions);\n\n      // Generate budget alerts\n      const alerts = (budgetsData.data || [])\n        .map((budget, index) => {\n          const utilization = budget.amount > 0 ? (budget.spent / budget.amount) * 100 : 0;\n          return {\n            id: budget.id || `budget-${index}`,\n            budgetName: budget.name,\n            spent: budget.spent,\n            amount: budget.amount,\n            utilization,\n            status: utilization >= 90 ? 'critical' as const : utilization >= 75 ? 'warning' as const : null\n          };\n        })\n        .filter(alert => alert.status !== null) as BudgetAlert[];\n      setBudgetAlerts(alerts);\n\n    } catch (error) {\n      console.error('Error loading finance overview:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const formatCurrency = (amount: number, currency = 'USD') => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: currency,\n    }).format(amount);\n  };\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString();\n  };\n\n  if (loading) {\n    return (\n      <div className=\"stack-lg\">\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-md\">\n          {Array.from({ length: 8 }).map((_, i) => (\n            <Card key={i} className=\"p-lg\">\n              <Skeleton className=\"h-4 w-20 mb-sm\" />\n              <Skeleton className=\"h-8 w-32 mb-xs\" />\n              <Skeleton className=\"h-3 w-16\" />\n            </Card>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"stack-lg\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-heading-3 text-heading-3 color-foreground\">Finance Overview</h1>\n          <p className=\"text-body-sm color-foreground/70 mt-xs\">{translations.subtitle}</p>\n        </div>\n        <Button onClick={loadFinanceOverview}>\n          <BarChart3 className=\"h-4 w-4 mr-sm\" />\n          Refresh Data\n        </Button>\n      </div>\n\n      {/* Financial Metrics Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-md\">\n        {/* Total Revenue */}\n        <Card className=\"p-lg\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-body-sm color-muted\">Total Revenue</p>\n              <p className=\"text-heading-3 text-heading-3 color-success\">{formatCurrency(summary?.totalRevenue || 0, summary?.currency)}</p>\n              <p className=\"text-body-sm color-success flex items-center mt-xs\">\n                <TrendingUp className=\"h-3 w-3 mr-xs\" />\n                +12.5% from last month\n              </p>\n            </div>\n            <Banknote className=\"h-8 w-8 color-success\" />\n          </div>\n        </Card>\n\n        {/* Total Expenses */}\n        <Card className=\"p-lg\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-body-sm color-muted\">Total Expenses</p>\n              <p className=\"text-heading-3 text-heading-3 color-destructive\">{formatCurrency(summary?.totalExpenses || 0, summary?.currency)}</p>\n              <p className=\"text-body-sm color-destructive flex items-center mt-xs\">\n                <TrendingUp className=\"h-3 w-3 mr-xs\" />\n                +8.2% from last month\n              </p>\n            </div>\n            <CreditCard className=\"h-8 w-8 color-destructive\" />\n          </div>\n        </Card>\n\n        {/* Net Income */}\n        <Card className=\"p-lg\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-body-sm form-label color-foreground/70\">Net Income</p>\n              <p className={`text-heading-3 text-heading-3 ${(summary?.netIncome || 0) >= 0 ? 'color-success' : 'color-destructive'}`}>\n                {formatCurrency(summary?.netIncome || 0, summary?.currency)}\n              </p>\n              <p className=\"text-body-sm color-muted flex items-center mt-xs\">\n                {(summary?.netIncome || 0) >= 0 ? (\n                  <ArrowUp className=\"h-3 w-3 mr-xs color-success\" />\n                ) : (\n                  <ArrowDown className=\"h-3 w-3 mr-xs color-destructive\" />\n                )}\n                Revenue - Expenses\n              </p>\n            </div>\n            <DollarSign className=\"h-8 w-8 color-accent\" />\n          </div>\n        </Card>\n\n        {/* Budget Utilization */}\n        <Card className=\"p-lg\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-body-sm color-muted\">Budget Utilization</p>\n              <p className=\"text-heading-3 text-heading-3 color-foreground\">\n                {(summary?.budgetUtilization || 0).toFixed(1)}%\n              </p>\n              <p className=\"text-body-sm color-foreground/60 mt-xs\">\n                of {formatCurrency(summary?.totalBudget || 0, summary?.currency)}\n              </p>\n            </div>\n            <PieChart className=\"h-8 w-8 color-secondary\" />\n          </div>\n        </Card>\n\n        {/* Accounts Balance */}\n        <Card className=\"p-lg\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-body-sm form-label color-foreground/70\">Accounts Balance</p>\n              <p className=\"text-heading-3 text-heading-3 color-foreground\">\n                {formatCurrency(summary?.accountsBalance || 0, summary?.currency)}\n              </p>\n              <p className=\"text-body-sm color-foreground/60 mt-xs\">Across all accounts</p>\n            </div>\n            <Banknote className=\"h-8 w-8 color-success\" />\n          </div>\n        </Card>\n\n        {/* Pending Invoices */}\n        <Card className=\"p-lg\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-body-sm form-label color-foreground/70\">Pending Invoices</p>\n              <p className=\"text-heading-3 text-heading-3 color-accent\">{summary?.pendingInvoices || 0}</p>\n              <p className=\"text-body-sm color-muted mt-xs\">Awaiting payment</p>\n            </div>\n            <Clock className=\"h-5 w-5 color-warning\" />\n          </div>\n        </Card>\n\n        {/* Overdue Invoices */}\n        <Card className=\"p-lg\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-body-sm form-label color-foreground/70\">Overdue Invoices</p>\n              <p className=\"text-heading-3 text-heading-3 color-destructive\">{summary?.overdueInvoices || 0}</p>\n              <p className=\"text-body-sm color-muted mt-xs\">Require attention</p>\n            </div>\n            <AlertTriangle className=\"h-5 w-5 color-destructive\" />\n          </div>\n        </Card>\n\n        {/* Cash Flow */}\n        <Card className=\"p-lg\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-body-sm form-label color-foreground/70\">Cash Flow</p>\n              <p className={`text-heading-3 text-heading-3 ${(summary?.cashFlow || 0) >= 0 ? 'color-success' : 'color-destructive'}`}>\n                {formatCurrency(summary?.cashFlow || 0, summary?.currency)}\n              </p>\n              <p className=\"text-body-sm color-muted\">+12% from last month</p>\n            </div>\n            <TrendingUp className=\"h-8 w-8 color-accent\" />\n          </div>\n        </Card>\n      </div>\n\n      {/* Budget Alerts */}\n      {budgetAlerts.length > 0 && (\n        <Card className=\"p-lg\">\n          <div className=\"flex items-center justify-between mb-md\">\n            <h3 className=\"text-body text-heading-4 color-foreground\">Budget Alerts</h3>\n            <Badge variant=\"secondary\">{budgetAlerts.length} alerts</Badge>\n          </div>\n          <div className=\"stack-sm\">\n            {budgetAlerts.map((alert: unknown) => (\n              <div key={alert.id} className=\"flex items-center justify-between p-sm bg-warning/10 border border-warning/20 rounded-lg\">\n                <div className=\"flex items-center cluster-sm\">\n                  <AlertTriangle className={`h-5 w-5 ${alert.status === 'critical' ? 'color-destructive' : 'color-warning'}`} />\n                  <div>\n                    <h4 className=\"form-label color-warning\">Budget Alert</h4>\n                    <p className=\"text-body-sm color-foreground/70\">\n                      {formatCurrency(alert.spent)} of {formatCurrency(alert.amount)} spent ({alert.utilization.toFixed(1)}%)\n                    </p>\n                  </div>\n                </div>\n                <Badge variant={alert.status === 'critical' ? 'destructive' : 'secondary'}>\n                  {alert.status === 'critical' ? 'Over Budget' : 'Near Limit'}\n                </Badge>\n              </div>\n            ))}\n          </div>\n        </Card>\n      )}\n\n      {/* Recent Transactions */}\n      <Card className=\"p-lg\">\n        <div className=\"flex items-center justify-between mb-md\">\n          <h3 className=\"text-body text-heading-4 color-foreground\">Recent Transactions</h3>\n          <Button>View All</Button>\n        </div>\n        <div className=\"stack-sm\">\n          {recentTransactions.length > 0 ? (\n            recentTransactions.map((transaction: unknown) => (\n              <div key={transaction.id} className=\"flex items-center justify-between p-sm border border-border rounded-lg\">\n                <div className=\"flex items-center cluster-sm\">\n                  {transaction.kind === 'revenue' ? (\n                    <ArrowUpRight className=\"h-4 w-4 color-success\" />\n                  ) : (\n                    <ArrowDownRight className=\"h-4 w-4 color-destructive\" />\n                  )}\n                  <div>\n                    <p className=\"form-label color-foreground\">{transaction.description}</p>\n                    <span className=\"text-body-sm color-warning/70\">{transaction.accountName} • {formatDate(transaction.occurredAt)}</span>\n                  </div>\n                </div>\n                <span className={`text-body-sm form-label ${\n                  transaction.kind === 'revenue' ? 'color-success' : 'color-destructive'\n                }`}>{transaction.kind === 'revenue' ? '+' : '-'}{formatCurrency(Math.abs(transaction.amount))}</span>\n              </div>\n            ))\n          ) : (\n            <div className=\"bg-warning/10 border border-warning/20 rounded-lg p-md\">\n              <Calendar className=\"h-12 w-12 mx-auto mb-md color-muted/50\" />\n              <p>No recent transactions found</p>\n            </div>\n          )}\n        </div>\n      </Card>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ghxstship/apps/web/app/(app)/(shell)/finance/revenue/CreateRevenueClient.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useMemo has a missing dependency: 'handleTextChange'. Either include it or remove the dependency array.","line":370,"column":7,"nodeType":"ArrayExpression","endLine":370,"endColumn":124,"suggestions":[{"desc":"Update the dependencies array to be: [currencyOptions, formData.amount, formData.currency, formData.description, formData.invoiceId, formData.recognitionDate, formData.source, formattedAmount, handleSubmit, handleTextChange, loading, onClose, parsedAmount, sourceOptions, updateForm]","fix":{"range":[13258,13375],"text":"[currencyOptions, formData.amount, formData.currency, formData.description, formData.invoiceId, formData.recognitionDate, formData.source, formattedAmount, handleSubmit, handleTextChange, loading, onClose, parsedAmount, sourceOptions, updateForm]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { Plus, TrendingUp, Calendar, DollarSign, Building } from \"lucide-react\";\nimport { useCallback, useEffect, useMemo, useState, type ChangeEvent, type FormEvent } from 'react';\nimport { User } from '@supabase/supabase-js';\nimport { createBrowserClient } from '@ghxstship/auth';\nimport {\n  Button,\n  Card,\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n  UnifiedInput,\n} from '@ghxstship/ui';\nimport AppDrawer, { type DrawerTab } from '@/app/_components/shared/AppDrawer';\n\ninterface CreateRevenueClientProps {\n  user: User;\n  orgId: string;\n  projectId?: string;\n  isOpen: boolean;\n  onClose: () => void;\n  onSuccess?: (revenue: CreatedRevenue) => void;\n}\n\ntype RevenueCurrency = 'USD' | 'EUR' | 'GBP' | 'CAD' | 'AUD';\n\ntype RevenueSource =\n  | 'services'\n  | 'products'\n  | 'consulting'\n  | 'licensing'\n  | 'subscriptions'\n  | 'events'\n  | 'grants'\n  | 'partnerships'\n  | 'other';\n\ninterface RevenueFormData {\n  description: string;\n  amount: string;\n  currency: RevenueCurrency;\n  source: RevenueSource;\n  projectId: string;\n  recognitionDate: string;\n  invoiceId: string;\n}\n\ninterface CreatedRevenue {\n  id: string;\n  organization_id: string;\n  created_at: string;\n}\n\nconst SUPPORTED_CURRENCIES: ReadonlyArray<{ value: RevenueCurrency; label: string }> = [\n  { value: 'USD', label: 'USD - US Dollar' },\n  { value: 'EUR', label: 'EUR - Euro' },\n  { value: 'GBP', label: 'GBP - British Pound' },\n  { value: 'CAD', label: 'CAD - Canadian Dollar' },\n  { value: 'AUD', label: 'AUD - Australian Dollar' },\n];\n\nconst REVENUE_SOURCES: ReadonlyArray<{ value: RevenueSource; label: string }> = [\n  { value: 'services', label: 'Professional Services' },\n  { value: 'products', label: 'Product Sales' },\n  { value: 'consulting', label: 'Consulting' },\n  { value: 'licensing', label: 'Licensing' },\n  { value: 'subscriptions', label: 'Subscriptions' },\n  { value: 'events', label: 'Events & Performances' },\n  { value: 'grants', label: 'Grants & Funding' },\n  { value: 'partnerships', label: 'Partnerships' },\n  { value: 'other', label: 'Other' },\n];\n\nconst createInitialFormData = (projectId?: string): RevenueFormData => ({\n  description: '',\n  amount: '',\n  currency: 'USD',\n  source: 'services',\n  projectId: projectId ?? '',\n  recognitionDate: new Date().toISOString().split('T')[0],\n  invoiceId: '',\n});\n\nexport default function CreateRevenueClient({ user, orgId, projectId, isOpen, onClose, onSuccess }: CreateRevenueClientProps) {\n  const supabase = createBrowserClient();\n  const [loading, setLoading] = useState(false);\n  const [formData, setFormData] = useState<RevenueFormData>(() => createInitialFormData(projectId));\n\n  useEffect(() => {\n    if (!isOpen) {\n      setFormData(createInitialFormData(projectId));\n    }\n  }, [isOpen, projectId]);\n\n  const updateForm = useCallback(<Key extends keyof RevenueFormData>(field: Key, value: RevenueFormData[Key]) => {\n    setFormData(prev => ({ ...prev, [field]: value }));\n  }, []);\n\n  const handleTextChange = useCallback((event: ChangeEvent<HTMLInputElement>) => {\n    const { name, value } = event.target;\n    updateForm(name as keyof RevenueFormData, value as RevenueFormData[keyof RevenueFormData]);\n  }, [updateForm]);\n\n  const handleSubmit = useCallback(async (event: FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    const trimmedDescription = formData.description.trim();\n    const parsedAmount = parseFloat(formData.amount.trim());\n\n    if (!trimmedDescription || Number.isNaN(parsedAmount) || parsedAmount <= 0 || loading) {\n      return;\n    }\n\n    setLoading(true);\n\n    try {\n      const revenueId = crypto.randomUUID();\n\n      const { data: revenue, error } = await supabase\n        .from('revenue')\n        .insert({\n          id: revenueId,\n          organization_id: orgId,\n          project_id: formData.projectId.trim() || null,\n          invoice_id: formData.invoiceId.trim() || null,\n          description: trimmedDescription,\n          amount: parsedAmount,\n          currency: formData.currency,\n          source: formData.source,\n          status: 'projected',\n          recognition_date: formData.recognitionDate,\n          created_by: user.id,\n          created_at: new Date().toISOString(),\n          updated_at: new Date().toISOString(),\n        })\n        .select()\n        .single<CreatedRevenue>();\n\n      if (error) throw error;\n\n      await supabase\n        .from('activity_logs')\n        .insert({\n          id: crypto.randomUUID(),\n          organization_id: orgId,\n          user_id: user.id,\n          action: 'revenue.created',\n          entity_type: 'revenue',\n          entity_id: revenueId,\n          metadata: {\n            description: trimmedDescription,\n            amount: parsedAmount,\n          },\n          occurred_at: new Date().toISOString(),\n        });\n\n      setFormData(createInitialFormData(projectId));\n      onSuccess?.(revenue);\n      onClose();\n    } catch (error) {\n      console.error('Error creating revenue:', error);\n    } finally {\n      setLoading(false);\n    }\n  }, [formData, loading, onClose, onSuccess, orgId, projectId, supabase, user.id]);\n\n  const currencyOptions = useMemo(() => SUPPORTED_CURRENCIES.map(currency => (\n    <SelectItem key={currency.value} value={currency.value}>\n      {currency.label}\n    </SelectItem>\n  )), []);\n\n  const sourceOptions = useMemo(() => REVENUE_SOURCES.map(source => (\n    <SelectItem key={source.value} value={source.value}>\n      {source.label}\n    </SelectItem>\n  )), []);\n\n  const parsedAmount = parseFloat(formData.amount.trim());\n  const formattedAmount = !Number.isNaN(parsedAmount) && parsedAmount > 0\n    ? new Intl.NumberFormat('en-US', {\n        style: 'currency',\n        currency: formData.currency,\n      }).format(parsedAmount)\n    : '';\n\n  const drawerTabs: DrawerTab[] = useMemo(() => ([\n    {\n      key: 'details',\n      label: 'Details',\n      content: (\n        <form onSubmit={handleSubmit} className=\"stack-lg\">\n          <Card className=\"p-md bg-success/10 border-success/20\">\n            <div className=\"flex items-center cluster-sm\">\n              <TrendingUp className=\"h-8 w-8 color-success\" />\n              <div>\n                <h3 className=\"text-heading-4 color-success-foreground\">Revenue Tracking</h3>\n                <p className=\"text-body-sm color-success/80\">\n                  Record and track revenue streams and income recognition\n                </p>\n              </div>\n            </div>\n          </Card>\n\n          <div className=\"stack-md\">\n            <div>\n              <label htmlFor=\"description\" className=\"block text-body-sm form-label color-foreground mb-sm\">\n                Revenue Description *\n              </label>\n              <UnifiedInput\n                id=\"description\"\n                name=\"description\"\n                value={formData.description}\n                onChange={handleTextChange}\n                placeholder=\"e.g., Project Alpha Payment, Consulting Services, Product Sales\"\n                required\n              />\n            </div>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-md\">\n              <div>\n                <label htmlFor=\"amount\" className=\"block text-body-sm form-label color-foreground mb-sm\">\n                  Amount *\n                </label>\n                <div className=\"relative\">\n                  <DollarSign className=\"absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 color-foreground/50\" />\n                  <UnifiedInput\n                    id=\"amount\"\n                    name=\"amount\"\n                    type=\"number\"\n                    value={formData.amount}\n                    onChange={handleTextChange}\n                    placeholder=\"0.00\"\n                    className=\"pl-2xl\"\n                    min=\"0\"\n                    step=\"0.01\"\n                    required\n                  />\n                </div>\n                {formattedAmount && (\n                  <p className=\"text-body-sm color-foreground/60 mt-xs\">\n                    {formattedAmount}\n                  </p>\n                )}\n              </div>\n\n              <div>\n                <label htmlFor=\"currency\" className=\"block text-body-sm form-label color-foreground mb-sm\">\n                  Currency\n                </label>\n                <Select\n                  value={formData.currency}\n                  onValueChange={value => updateForm('currency', value as RevenueCurrency)}\n                >\n                  <SelectTrigger>\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {currencyOptions}\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-md\">\n              <div>\n                <label htmlFor=\"source\" className=\"block text-body-sm form-label color-foreground mb-sm\">\n                  Revenue Source\n                </label>\n                <div className=\"relative\">\n                  <Building className=\"pointer-events-none absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 color-foreground/50\" />\n                  <Select\n                    value={formData.source}\n                    onValueChange={value => updateForm('source', value as RevenueSource)}\n                  >\n                    <SelectTrigger className=\"pl-10\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {sourceOptions}\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n\n              <div>\n                <label htmlFor=\"recognitionDate\" className=\"block text-body-sm form-label color-foreground mb-sm\">\n                  Recognition Date *\n                </label>\n                <div className=\"relative\">\n                  <Calendar className=\"absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 color-foreground/50\" />\n                  <UnifiedInput\n                    id=\"recognitionDate\"\n                    name=\"recognitionDate\"\n                    type=\"date\"\n                    value={formData.recognitionDate}\n                    onChange={handleTextChange}\n                    className=\"pl-2xl\"\n                    required\n                  />\n                </div>\n              </div>\n            </div>\n\n            <div>\n              <label htmlFor=\"invoiceId\" className=\"block text-body-sm form-label color-foreground mb-sm\">\n                Related Invoice ID\n              </label>\n              <UnifiedInput\n                id=\"invoiceId\"\n                name=\"invoiceId\"\n                value={formData.invoiceId}\n                onChange={handleTextChange}\n                placeholder=\"Optional: Link to existing invoice\"\n              />\n              <p className=\"text-body-sm color-foreground/60 mt-xs\">\n                Connect this revenue to an existing invoice for tracking\n              </p>\n            </div>\n          </div>\n\n          {formattedAmount && (\n            <Card className=\"p-md bg-secondary border-border\">\n              <h4 className=\"form-label color-foreground mb-sm\">Revenue Summary</h4>\n              <div className=\"stack-xs text-body-sm\">\n                <div className=\"flex justify-between\">\n                  <span className=\"color-foreground/70\">Amount:</span>\n                  <span className=\"form-label color-success\">{formattedAmount}</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"color-foreground/70\">Source:</span>\n                  <span className=\"form-label capitalize\">{formData.source.replace('_', ' ')}</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"color-foreground/70\">Status:</span>\n                  <span className=\"form-label color-accent\">Projected</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"color-foreground/70\">Recognition Date:</span>\n                  <span className=\"form-label\">{new Date(formData.recognitionDate).toLocaleDateString()}</span>\n                </div>\n              </div>\n            </Card>\n          )}\n\n          <div className=\"flex justify-end cluster-sm pt-lg border-t border-border\">\n            <Button type=\"button\" variant=\"ghost\" onClick={onClose} disabled={loading}>\n              Cancel\n            </Button>\n            <Button type=\"submit\" disabled={loading || !formData.description.trim() || Number.isNaN(parsedAmount) || parsedAmount <= 0} className=\"min-w-[120px]\">\n              {loading ? (\n                <div className=\"flex items-center cluster-sm\">\n                  <div className=\"w-4 h-4 border-2 border-background/30 border-t-background rounded-full animate-spin\" />\n                  <span>Adding...</span>\n                </div>\n              ) : (\n                <div className=\"flex items-center cluster-sm\">\n                  <Plus className=\"h-4 w-4\" />\n                  <span>Add Revenue</span>\n                </div>\n              )}\n            </Button>\n          </div>\n        </form>\n      ),\n    },\n  ]), [currencyOptions, formData, formattedAmount, handleSubmit, loading, onClose, parsedAmount, sourceOptions, updateForm]);\n\n  return (\n    <AppDrawer\n      open={isOpen}\n      onClose={onClose}\n      title=\"Add Revenue\"\n      record={null}\n      mode=\"create\"\n      fields={[]}\n      tabs={drawerTabs}\n      loading={loading}\n    />\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ghxstship/apps/web/app/(app)/(shell)/finance/revenue/RevenueClient.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadRevenues'. Either include it or remove the dependency array.","line":75,"column":6,"nodeType":"ArrayExpression","endLine":75,"endColumn":13,"suggestions":[{"desc":"Update the dependencies array to be: [loadRevenues, orgId]","fix":{"range":[1992,1999],"text":"[loadRevenues, orgId]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { TrendingUp, Plus, Edit, Trash2, DollarSign, Calendar, Target, CheckCircle, Clock, AlertTriangle, BarChart3, Search, Filter, User as UserIcon } from \"lucide-react\";\nimport { useState, useEffect } from 'react';\nimport { User } from '@supabase/supabase-js';\nimport { createBrowserClient } from '@ghxstship/auth';\nimport { \n  Card, \n  Button, \n  Badge, \n  Skeleton, \n  UnifiedInput,\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n  DataViewProvider,\n  StateManagerProvider,\n  ViewSwitcher,\n  DataGrid,\n  KanbanBoard,\n  CalendarView,\n  ListView,\n  DataActions,\n  UniversalDrawer,\n  type DataRecord,\n  type FieldConfig,\n  type DataViewConfig\n} from '@ghxstship/ui';\n\ninterface RevenueClientProps {\n  user: User;\n  orgId: string;\n  translations: {\n    title: string;\n    subtitle: string;\n  };\n}\n\ninterface Revenue {\n  id: string;\n  description: string;\n  amount: number;\n  currency: string;\n  source: string;\n  status: 'projected' | 'invoiced' | 'received' | 'cancelled';\n  recognition_date?: string;\n  received_date?: string;\n  project_id?: string;\n  invoice_id?: string;\n  created_by?: string;\n  created_at: string;\n  updated_at: string;\n  organization_id: string;\n  // Computed fields\n  project_name?: string;\n  days_to_recognition?: number;\n}\n\nexport default function RevenueClient({ user, orgId, translations }: RevenueClientProps) {\n  const [loading, setLoading] = useState(true);\n  const [revenues, setRevenues] = useState<Revenue[]>([]);\n  const [selectedRevenue, setSelectedRevenue] = useState<Revenue | null>(null);\n  const [drawerOpen, setDrawerOpen] = useState(false);\n  const [drawerMode, setDrawerMode] = useState<'create' | 'edit' | 'view'>('view');\n  const [filterStatus, setFilterStatus] = useState<string>('all');\n  const [filterSource, setFilterSource] = useState<string>('all');\n  const [searchTerm, setSearchTerm] = useState<string>('');\n\n  const supabase = createBrowserClient();\n\n  useEffect(() => {\n    loadRevenues();\n  }, [orgId]);\n\n  const loadRevenues = async () => {\n    try {\n      setLoading(true);\n      const { data, error } = await supabase\n        .from('revenue')\n        .select(`\n          *,\n          projects:project_id(name),\n          invoices:invoice_id(invoice_number)\n        `)\n        .eq('organization_id', orgId)\n        .order('created_at', { ascending: false });\n\n      if (error) throw error;\n      \n      // Add computed fields\n      const enrichedRevenues = (data || []).map(revenue => {\n        const today = new Date();\n        const recognitionDate = revenue.recognition_date ? new Date(revenue.recognition_date) : null;\n        const daysToRecognition = recognitionDate \n          ? Math.ceil((recognitionDate.getTime() - today.getTime()) / (1000 * 60 * 60 * 24))\n          : 0;\n\n        return {\n          ...revenue,\n          project_name: revenue.projects?.name || null,\n          days_to_recognition: daysToRecognition\n        };\n      });\n      \n      setRevenues(enrichedRevenues);\n    } catch (error) {\n      console.error('Error loading revenues:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleCreateRevenue = () => {\n    setSelectedRevenue(null);\n    setDrawerMode('create');\n    setDrawerOpen(true);\n  };\n\n  const handleEditRevenue = (revenue: Revenue) => {\n    setSelectedRevenue(revenue);\n    setDrawerMode('edit');\n    setDrawerOpen(true);\n  };\n\n  const handleViewRevenue = (revenue: Revenue) => {\n    setSelectedRevenue(revenue);\n    setDrawerMode('view');\n    setDrawerOpen(true);\n  };\n\n  const handleDeleteRevenue = async (revenueId: string) => {\n    if (!confirm('Are you sure you want to delete this revenue record? This action cannot be undone.')) return;\n\n    try {\n      const response = await fetch('/api/v1/finance/revenue', {\n        method: 'DELETE',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ id: revenueId })\n      });\n\n      if (!response.ok) throw new Error('Failed to delete revenue');\n      await loadRevenues();\n    } catch (error) {\n      console.error('Error deleting revenue:', error);\n    }\n  };\n\n  const handleSaveRevenue = async (revenueData: Partial<Revenue>) => {\n    try {\n      if (drawerMode === 'create') {\n        const response = await fetch('/api/v1/finance/revenue', {\n          method: 'POST',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify({\n            description: revenueData.description,\n            amount: revenueData.amount,\n            currency: revenueData.currency,\n            source: revenueData.source,\n            status: revenueData.status,\n            recognitionDate: revenueData.recognition_date,\n            receivedDate: revenueData.received_date,\n            projectId: revenueData.project_id,\n            invoiceId: revenueData.invoice_id\n          })\n        });\n\n        if (!response.ok) throw new Error('Failed to create revenue');\n      } else if (drawerMode === 'edit' && selectedRevenue) {\n        const response = await fetch('/api/v1/finance/revenue', {\n          method: 'PUT',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify({\n            id: selectedRevenue.id,\n            description: revenueData.description,\n            amount: revenueData.amount,\n            currency: revenueData.currency,\n            source: revenueData.source,\n            status: revenueData.status,\n            recognitionDate: revenueData.recognition_date,\n            receivedDate: revenueData.received_date,\n            projectId: revenueData.project_id,\n            invoiceId: revenueData.invoice_id\n          })\n        });\n\n        if (!response.ok) throw new Error('Failed to update revenue');\n      }\n\n      setDrawerOpen(false);\n      await loadRevenues();\n    } catch (error) {\n      console.error('Error saving revenue:', error);\n    }\n  };\n\n  const handleRecognizeRevenue = async (revenueId: string) => {\n    try {\n      const response = await fetch('/api/v1/finance/revenue', {\n        method: 'PUT',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          id: revenueId,\n          status: 'received',\n          receivedDate: new Date().toISOString()\n        })\n      });\n\n      if (!response.ok) throw new Error('Failed to recognize revenue');\n      await loadRevenues();\n    } catch (error) {\n      console.error('Error recognizing revenue:', error);\n    }\n  };\n\n  const filteredRevenues = revenues.filter(revenue => {\n    const matchesSearch = searchTerm === '' || \n      revenue.description.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      revenue.source.toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesStatus = filterStatus === 'all' || revenue.status === filterStatus;\n    const matchesSource = filterSource === 'all' || revenue.source === filterSource;\n    return matchesSearch && matchesStatus && matchesSource;\n  });\n\n  const getRevenueStatusIcon = (revenue: Revenue) => {\n    switch (revenue.status) {\n      case 'received':\n        return <CheckCircle className=\"h-5 w-5 text-green-500\" />;\n      case 'invoiced':\n        return <BarChart3 className=\"h-5 w-5 text-blue-500\" />;\n      case 'projected':\n        return <Target className=\"h-5 w-5 text-yellow-500\" />;\n      case 'cancelled':\n        return <AlertTriangle className=\"h-5 w-5 text-red-500\" />;\n      default:\n        return <Clock className=\"h-5 w-5 text-gray-500\" />;\n    }\n  };\n\n  const getRevenueStatusColor = (revenue: Revenue) => {\n    switch (revenue.status) {\n      case 'received':\n        return 'bg-green-100 text-green-800';\n      case 'invoiced':\n        return 'bg-blue-100 text-blue-800';\n      case 'projected':\n        return 'bg-yellow-100 text-yellow-800';\n      case 'cancelled':\n        return 'bg-red-100 text-red-800';\n      default:\n        return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  const formatCurrency = (amount: number, currency = 'USD') => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: currency,\n    }).format(amount);\n  };\n\n  const formatDate = (dateString?: string) => {\n    if (!dateString) return 'N/A';\n    return new Date(dateString).toLocaleDateString();\n  };\n\n  // ATLVS DataViews field configuration\n  const fields: FieldConfig[] = [\n    {\n      key: 'description',\n      label: 'Description',\n      type: 'text',\n      required: true,\n      sortable: true,\n      filterable: true\n    },\n    {\n      key: 'amount',\n      label: 'Amount',\n      type: 'currency',\n      required: true,\n      sortable: true,\n      filterable: true\n    },\n    {\n      key: 'currency',\n      label: 'Currency',\n      type: 'select',\n      options: [\n        { value: 'USD', label: 'USD' },\n        { value: 'EUR', label: 'EUR' },\n        { value: 'GBP', label: 'GBP' }\n      ],\n      defaultValue: 'USD',\n      filterable: true\n    },\n    {\n      key: 'source',\n      label: 'Source',\n      type: 'select',\n      options: [\n        { value: 'services', label: 'Services' },\n        { value: 'products', label: 'Products' },\n        { value: 'subscriptions', label: 'Subscriptions' },\n        { value: 'licensing', label: 'Licensing' },\n        { value: 'consulting', label: 'Consulting' },\n        { value: 'other', label: 'Other' }\n      ],\n      required: true,\n      filterable: true,\n      sortable: true\n    },\n    {\n      key: 'status',\n      label: 'Status',\n      type: 'select',\n      options: [\n        { value: 'projected', label: 'Projected' },\n        { value: 'invoiced', label: 'Invoiced' },\n        { value: 'received', label: 'Received' },\n        { value: 'cancelled', label: 'Cancelled' }\n      ],\n      filterable: true,\n      sortable: true\n    },\n    {\n      key: 'recognition_date',\n      label: 'Recognition Date',\n      type: 'date',\n      sortable: true,\n      filterable: true\n    },\n    {\n      key: 'received_date',\n      label: 'Received Date',\n      type: 'date',\n      sortable: true,\n      filterable: true\n    },\n    {\n      key: 'project_id',\n      label: 'Project',\n      type: 'text',\n      sortable: true,\n      filterable: true\n    },\n    {\n      key: 'invoice_id',\n      label: 'Invoice',\n      type: 'text',\n      sortable: true,\n      filterable: true\n    }\n  ];\n\n  // ATLVS DataViews configuration\n  const revenuesConfig: DataViewConfig = {\n    id: 'revenues-dataviews',\n    name: 'Revenue Management',\n    viewType: 'grid',\n    defaultView: 'grid',\n    fields,\n    data: filteredRevenues.map(revenue => ({\n      ...revenue,\n      record_type: 'revenue'\n    })),\n    pagination: {\n      page: 1,\n      pageSize: 25,\n      total: filteredRevenues.length\n    },\n    onSearch: (query: string) => {\n      setSearchTerm(query);\n    },\n    onFilter: (filters: unknown) => {\n      if (filters.status) setFilterStatus(filters.status);\n      if (filters.source) setFilterSource(filters.source);\n    },\n    onSort: (sorts: unknown) => {\n      console.log('Sort:', sorts);\n    },\n    onRefresh: () => {\n      loadRevenues();\n    },\n    onExport: (data, format) => {\n      console.log('Export:', format, data);\n    },\n    onImport: (data: unknown) => {\n      console.log('Import:', data);\n    },\n    onRowAction: (action: string, record: DataRecord) => {\n      const revenue = record as Revenue;\n      switch (action) {\n        case 'view':\n          handleViewRevenue(revenue);\n          break;\n        case 'edit':\n          handleEditRevenue(revenue);\n          break;\n        case 'delete':\n          handleDeleteRevenue(revenue.id);\n          break;\n        case 'recognize':\n          handleRecognizeRevenue(revenue.id);\n          break;\n      }\n    }\n  };\n\n  const configWithData = {\n    ...revenuesConfig,\n    data: filteredRevenues.map(revenue => ({\n      ...revenue,\n      record_type: 'revenue'\n    }))\n  };\n\n  if (loading) {\n    return (\n      <div className=\"space-y-4\">\n        <div className=\"flex justify-between items-center\">\n          <div>\n            <Skeleton className=\"h-8 w-48\" />\n            <Skeleton className=\"h-4 w-96 mt-2\" />\n          </div>\n          <Skeleton className=\"h-10 w-32\" />\n        </div>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n          {[...Array(6)].map((_, i) => (\n            <Skeleton key={i} className=\"h-32\" />\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"h-full flex flex-col\">\n      {/* Header */}\n      <div className=\"flex justify-between items-center mb-6\">\n        <div>\n          <h1 className=\"text-2xl font-bold text-gray-900\">Revenue Management</h1>\n          <p className=\"text-gray-600\">Track and manage your revenue streams</p>\n        </div>\n        <Button onClick={handleCreateRevenue} className=\"flex items-center gap-2\">\n          <Plus className=\"h-4 w-4\" />\n          New Revenue\n        </Button>\n      </div>\n\n      {/* Summary Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4 mb-6\">\n        <Card className=\"p-4\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm font-medium text-gray-600\">Total Revenue</p>\n              <p className=\"text-2xl font-bold text-gray-900\">{revenues.length}</p>\n            </div>\n            <TrendingUp className=\"h-8 w-8 text-blue-500\" />\n          </div>\n        </Card>\n        <Card className=\"p-4\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm font-medium text-gray-600\">Total Amount</p>\n              <p className=\"text-2xl font-bold text-gray-900\">\n                {formatCurrency(revenues.reduce((sum, r) => sum + r.amount, 0))}\n              </p>\n            </div>\n            <DollarSign className=\"h-8 w-8 text-green-500\" />\n          </div>\n        </Card>\n        <Card className=\"p-4\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm font-medium text-gray-600\">Received</p>\n              <p className=\"text-2xl font-bold text-gray-900\">\n                {revenues.filter(r => r.status === 'received').length}\n              </p>\n            </div>\n            <CheckCircle className=\"h-8 w-8 text-green-500\" />\n          </div>\n        </Card>\n        <Card className=\"p-4\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm font-medium text-gray-600\">Projected</p>\n              <p className=\"text-2xl font-bold text-gray-900\">\n                {revenues.filter(r => r.status === 'projected').length}\n              </p>\n            </div>\n            <Target className=\"h-8 w-8 text-yellow-500\" />\n          </div>\n        </Card>\n      </div>\n\n      {/* Filters */}\n      <div className=\"flex gap-4 mb-6\">\n        <div className=\"flex-1\">\n          <UnifiedInput\n            placeholder=\"Search revenues...\"\n            value={searchTerm}\n            onChange={(e) => setSearchTerm(e.target.value)}\n            leftIcon={<Search className=\"h-4 w-4\" />}\n          />\n        </div>\n        <Select value={filterStatus} onValueChange={setFilterStatus}>\n          <SelectTrigger className=\"w-48\">\n            <SelectValue placeholder=\"Filter by status\" />\n          </SelectTrigger>\n          <SelectContent>\n            <SelectItem value=\"all\">All Statuses</SelectItem>\n            <SelectItem value=\"projected\">Projected</SelectItem>\n            <SelectItem value=\"invoiced\">Invoiced</SelectItem>\n            <SelectItem value=\"received\">Received</SelectItem>\n            <SelectItem value=\"cancelled\">Cancelled</SelectItem>\n          </SelectContent>\n        </Select>\n        <Select value={filterSource} onValueChange={setFilterSource}>\n          <SelectTrigger className=\"w-48\">\n            <SelectValue placeholder=\"Filter by source\" />\n          </SelectTrigger>\n          <SelectContent>\n            <SelectItem value=\"all\">All Sources</SelectItem>\n            <SelectItem value=\"services\">Services</SelectItem>\n            <SelectItem value=\"products\">Products</SelectItem>\n            <SelectItem value=\"subscriptions\">Subscriptions</SelectItem>\n            <SelectItem value=\"licensing\">Licensing</SelectItem>\n            <SelectItem value=\"consulting\">Consulting</SelectItem>\n            <SelectItem value=\"other\">Other</SelectItem>\n          </SelectContent>\n        </Select>\n      </div>\n\n      {/* ATLVS DataViews */}\n      <div className=\"flex-1\">\n        <DataViewProvider config={configWithData}>\n          <StateManagerProvider>\n            <div className=\"flex-1 space-y-4\">\n              {/* View Switcher and Actions */}\n              <div className=\"flex justify-between items-center\">\n                <ViewSwitcher />\n                <DataActions />\n              </div>\n\n              {/* Data Views */}\n              <div className=\"flex-1\">\n                <DataGrid />\n                <KanbanBoard \n                  columns={[\n                    { id: 'projected', title: 'Projected' },\n                    { id: 'invoiced', title: 'Invoiced' },\n                    { id: 'received', title: 'Received' },\n                    { id: 'cancelled', title: 'Cancelled' }\n                  ]}\n                  statusField=\"status\"\n                  titleField=\"description\"\n                />\n                <CalendarView \n                  startDateField=\"recognition_date\"\n                  titleField=\"description\"\n                />\n                <ListView titleField=\"description\" />\n              </div>\n            </div>\n          </StateManagerProvider>\n        </DataViewProvider>\n      </div>\n\n      {/* Universal Drawer for CRUD operations */}\n      <UniversalDrawer\n        open={drawerOpen}\n        onClose={() => setDrawerOpen(false)}\n        title={\n          drawerMode === 'create' ? 'Create Revenue' :\n          drawerMode === 'edit' ? 'Edit Revenue' : 'Revenue Details'\n        }\n        mode={drawerMode}\n        data={selectedRevenue}\n        fields={fields}\n        onSave={handleSaveRevenue}\n        tabs={[\n          {\n            key: 'details',\n            label: 'Revenue Details',\n            content: (\n              <div className=\"space-y-4\">\n                {selectedRevenue && (\n                  <>\n                    <div className=\"flex items-center gap-3\">\n                      {getRevenueStatusIcon(selectedRevenue)}\n                      <div>\n                        <h3 className=\"font-semibold\">{selectedRevenue.description}</h3>\n                        <p className=\"text-sm text-gray-600\">{selectedRevenue.source}</p>\n                      </div>\n                      <Badge className={getRevenueStatusColor(selectedRevenue)}>\n                        {selectedRevenue.status}\n                      </Badge>\n                    </div>\n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <div>\n                        <label className=\"text-sm font-medium text-gray-700\">Amount</label>\n                        <p className=\"text-lg font-semibold\">{formatCurrency(selectedRevenue.amount)}</p>\n                      </div>\n                      <div>\n                        <label className=\"text-sm font-medium text-gray-700\">Source</label>\n                        <p className=\"text-sm\">{selectedRevenue.source}</p>\n                      </div>\n                      <div>\n                        <label className=\"text-sm font-medium text-gray-700\">Recognition Date</label>\n                        <p className=\"text-sm\">{formatDate(selectedRevenue.recognition_date)}</p>\n                      </div>\n                      <div>\n                        <label className=\"text-sm font-medium text-gray-700\">Received Date</label>\n                        <p className=\"text-sm\">{formatDate(selectedRevenue.received_date)}</p>\n                      </div>\n                    </div>\n                    {selectedRevenue.project_name && (\n                      <div>\n                        <label className=\"text-sm font-medium text-gray-700\">Project</label>\n                        <p className=\"text-sm text-gray-600\">{selectedRevenue.project_name}</p>\n                      </div>\n                    )}\n                    {selectedRevenue.status === 'invoiced' && (\n                      <div className=\"flex gap-2\">\n                        <Button \n                          onClick={() => handleRecognizeRevenue(selectedRevenue.id)}\n                          className=\"flex items-center gap-2\"\n                          size=\"sm\"\n                        >\n                          <CheckCircle className=\"h-4 w-4\" />\n                          Mark as Received\n                        </Button>\n                      </div>\n                    )}\n                  </>\n                )}\n              </div>\n            )\n          }\n        ]}\n      />\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ghxstship/apps/web/app/(app)/(shell)/finance/transactions/CreateTransactionClient.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useMemo has missing dependencies: 'currencyOptions' and 'handleTextChange'. Either include them or remove the dependency array.","line":449,"column":7,"nodeType":"ArrayExpression","endLine":449,"endColumn":138,"suggestions":[{"desc":"Update the dependencies array to be: [accountOptions, currencyOptions, formData.accountId, formData.amount, formData.currency, formData.description, formData.invoiceId, formData.kind, formData.occurredAt, formData.projectId, formData.referenceNumber, formattedAmount, handleSubmit, handleTextChange, kindOptions, loading, onClose, parsedAmount, selectedAccount, updateForm]","fix":{"range":[16179,16310],"text":"[accountOptions, currencyOptions, formData.accountId, formData.amount, formData.currency, formData.description, formData.invoiceId, formData.kind, formData.occurredAt, formData.projectId, formData.referenceNumber, formattedAmount, handleSubmit, handleTextChange, kindOptions, loading, onClose, parsedAmount, selectedAccount, updateForm]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { Plus, ArrowUpDown, Calendar, DollarSign, Building } from \"lucide-react\";\nimport { useCallback, useEffect, useMemo, useState, type ChangeEvent, type FormEvent } from 'react';\nimport { User } from '@supabase/supabase-js';\nimport { createBrowserClient } from '@ghxstship/auth';\nimport {\n  Button,\n  Card,\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n  UnifiedInput,\n} from '@ghxstship/ui';\nimport AppDrawer, { type DrawerTab } from '@/app/_components/shared/AppDrawer';\n\ninterface CreateTransactionClientProps {\n  user: User;\n  orgId: string;\n  accountId?: string;\n  isOpen: boolean;\n  onClose: () => void;\n  onSuccess?: (transaction: CreatedTransaction) => void;\n}\n\ntype TransactionKind = 'revenue' | 'expense';\n\ntype TransactionCurrency = 'USD' | 'EUR' | 'GBP' | 'CAD' | 'AUD';\n\ninterface TransactionFormData {\n  description: string;\n  amount: string;\n  currency: TransactionCurrency;\n  kind: TransactionKind;\n  accountId: string;\n  projectId: string;\n  invoiceId: string;\n  referenceNumber: string;\n  occurredAt: string;\n}\n\ninterface FinanceAccount {\n  id: string;\n  name: string;\n  kind: string;\n  currency: string;\n}\n\ninterface CreatedTransaction {\n  id: string;\n  organization_id: string;\n  created_at: string;\n}\n\nconst SUPPORTED_CURRENCIES: ReadonlyArray<{ value: TransactionCurrency; label: string }> = [\n  { value: 'USD', label: 'USD - US Dollar' },\n  { value: 'EUR', label: 'EUR - Euro' },\n  { value: 'GBP', label: 'GBP - British Pound' },\n  { value: 'CAD', label: 'CAD - Canadian Dollar' },\n  { value: 'AUD', label: 'AUD - Australian Dollar' },\n];\n\nconst TRANSACTION_KINDS: ReadonlyArray<{ value: TransactionKind; label: string }> = [\n  { value: 'revenue', label: 'Revenue (Money In)' },\n  { value: 'expense', label: 'Expense (Money Out)' },\n];\n\nconst createInitialFormData = (accountId?: string): TransactionFormData => ({\n  description: '',\n  amount: '',\n  currency: 'USD',\n  kind: 'expense',\n  accountId: accountId ?? '',\n  projectId: '',\n  invoiceId: '',\n  referenceNumber: '',\n  occurredAt: new Date().toISOString().slice(0, 16),\n});\n\nexport default function CreateTransactionClient({ user, orgId, accountId, isOpen, onClose, onSuccess }: CreateTransactionClientProps) {\n  const supabase = createBrowserClient();\n  const [loading, setLoading] = useState(false);\n  const [accounts, setAccounts] = useState<FinanceAccount[]>([]);\n  const [formData, setFormData] = useState<TransactionFormData>(() => createInitialFormData(accountId));\n\n  const loadAccounts = useCallback(async () => {\n    try {\n      const { data, error } = await supabase\n        .from('finance_accounts')\n        .select('id, name, kind, currency')\n        .eq('organization_id', orgId)\n        .eq('status', 'active')\n        .order('name');\n\n      if (error) throw error;\n\n      setAccounts(data ?? []);\n    } catch (error) {\n      console.error('Error loading accounts:', error);\n    }\n  }, [orgId, supabase]);\n\n  useEffect(() => {\n    if (isOpen) {\n      loadAccounts();\n    }\n  }, [isOpen, loadAccounts]);\n\n  useEffect(() => {\n    if (!isOpen) {\n      setFormData(createInitialFormData(accountId));\n    }\n  }, [accountId, isOpen]);\n\n  const updateForm = useCallback(<Key extends keyof TransactionFormData>(field: Key, value: TransactionFormData[Key]) => {\n    setFormData(prev => ({ ...prev, [field]: value }));\n  }, []);\n\n  const handleTextChange = useCallback((event: ChangeEvent<HTMLInputElement>) => {\n    const { name, value } = event.target;\n    updateForm(name as keyof TransactionFormData, value as TransactionFormData[keyof TransactionFormData]);\n  }, [updateForm]);\n\n  const handleSubmit = useCallback(async (event: FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    const trimmedDescription = formData.description.trim();\n    const parsedAmount = parseFloat(formData.amount.trim());\n\n    if (!trimmedDescription || Number.isNaN(parsedAmount) || parsedAmount === 0 || !formData.accountId || loading) {\n      return;\n    }\n\n    setLoading(true);\n\n    try {\n      const transactionId = crypto.randomUUID();\n      const signedAmount = formData.kind === 'expense' ? -Math.abs(parsedAmount) : Math.abs(parsedAmount);\n\n      const { data: transaction, error } = await supabase\n        .from('finance_transactions')\n        .insert({\n          id: transactionId,\n          organization_id: orgId,\n          account_id: formData.accountId,\n          project_id: formData.projectId.trim() || null,\n          invoice_id: formData.invoiceId.trim() || null,\n          description: trimmedDescription,\n          amount: signedAmount,\n          currency: formData.currency,\n          kind: formData.kind,\n          reference_number: formData.referenceNumber.trim() || null,\n          status: 'completed',\n          occurred_at: formData.occurredAt,\n          created_at: new Date().toISOString(),\n          updated_at: new Date().toISOString(),\n        })\n        .select()\n        .single<CreatedTransaction>();\n\n      if (error) throw error;\n\n      await supabase.rpc('update_account_balance', {\n        account_id: formData.accountId,\n        amount_change: signedAmount,\n      });\n\n      await supabase\n        .from('activity_logs')\n        .insert({\n          id: crypto.randomUUID(),\n          organization_id: orgId,\n          user_id: user.id,\n          action: 'transaction.created',\n          entity_type: 'transaction',\n          entity_id: transactionId,\n          metadata: {\n            description: trimmedDescription,\n            amount: parsedAmount,\n            kind: formData.kind,\n          },\n          occurred_at: new Date().toISOString(),\n        });\n\n      setFormData(createInitialFormData(accountId));\n      onSuccess?.(transaction);\n      onClose();\n    } catch (error) {\n      console.error('Error creating transaction:', error);\n    } finally {\n      setLoading(false);\n    }\n  }, [accountId, formData, loading, onClose, onSuccess, orgId, supabase, user.id]);\n\n  const currencyOptions = useMemo(() => SUPPORTED_CURRENCIES.map(currency => (\n    <SelectItem key={currency.value} value={currency.value}>\n      {currency.label}\n    </SelectItem>\n  )), []);\n\n  const kindOptions = useMemo(() => TRANSACTION_KINDS.map(kind => (\n    <SelectItem key={kind.value} value={kind.value}>\n      {kind.label}\n    </SelectItem>\n  )), []);\n\n  const accountOptions = useMemo(() => accounts.map(account => (\n    <SelectItem key={account.id} value={account.id}>\n      {account.name} ({account.kind}) · {account.currency}\n    </SelectItem>\n  )), [accounts]);\n\n  const parsedAmount = parseFloat(formData.amount.trim());\n  const formattedAmount = !Number.isNaN(parsedAmount) && parsedAmount !== 0\n    ? new Intl.NumberFormat('en-US', {\n        style: 'currency',\n        currency: formData.currency,\n      }).format(Math.abs(parsedAmount))\n    : '';\n\n  const selectedAccount = useMemo(() => accounts.find(account => account.id === formData.accountId), [accounts, formData.accountId]);\n\n  const drawerTabs: DrawerTab[] = useMemo(() => ([\n    {\n      key: 'details',\n      label: 'Details',\n      content: (\n        <form onSubmit={handleSubmit} className=\"stack-lg\">\n          <Card className=\"p-md bg-accent/10 border-primary/20\">\n            <div className=\"flex items-center cluster-sm\">\n              <ArrowUpDown className=\"h-8 w-8 color-accent\" />\n              <div>\n                <h3 className=\"text-heading-4 color-accent-foreground\">Transaction Entry</h3>\n                <p className=\"text-body-sm color-accent/80\">\n                  Record financial transactions and update account balances\n                </p>\n              </div>\n            </div>\n          </Card>\n\n          <div className=\"stack-md\">\n            <div>\n              <label htmlFor=\"description\" className=\"block text-body-sm form-label color-foreground mb-sm\">\n                Transaction Description *\n              </label>\n              <UnifiedInput\n                id=\"description\"\n                name=\"description\"\n                value={formData.description}\n                onChange={handleTextChange}\n                placeholder=\"e.g., Payment received from Client ABC, Office rent payment\"\n                required\n              />\n            </div>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-md\">\n              <div>\n                <label htmlFor=\"kind\" className=\"block text-body-sm form-label color-foreground mb-sm\">\n                  Type *\n                </label>\n                <Select\n                  value={formData.kind}\n                  onValueChange={value => updateForm('kind', value as TransactionKind)}\n                >\n                  <SelectTrigger>\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {kindOptions}\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div>\n                <label htmlFor=\"amount\" className=\"block text-body-sm form-label color-foreground mb-sm\">\n                  Amount *\n                </label>\n                <div className=\"relative\">\n                  <DollarSign className=\"absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 color-foreground/50\" />\n                  <UnifiedInput\n                    id=\"amount\"\n                    name=\"amount\"\n                    type=\"number\"\n                    value={formData.amount}\n                    onChange={handleTextChange}\n                    placeholder=\"0.00\"\n                    className=\"pl-2xl\"\n                    min=\"0\"\n                    step=\"0.01\"\n                    required\n                  />\n                </div>\n              </div>\n\n              <div>\n                <label htmlFor=\"currency\" className=\"block text-body-sm form-label color-foreground mb-sm\">\n                  Currency\n                </label>\n                <Select\n                  value={formData.currency}\n                  onValueChange={value => updateForm('currency', value as TransactionCurrency)}\n                >\n                  <SelectTrigger>\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {currencyOptions}\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n\n            <div>\n              <label htmlFor=\"accountId\" className=\"block text-body-sm form-label color-foreground mb-sm\">\n                Account *\n              </label>\n              <div className=\"relative\">\n                <Building className=\"pointer-events-none absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 color-foreground/50\" />\n                <Select\n                  value={formData.accountId}\n                  onValueChange={value => updateForm('accountId', value)}\n                >\n                  <SelectTrigger className=\"pl-10\">\n                    <SelectValue placeholder=\"Select an account\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {accountOptions}\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-md\">\n              <div>\n                <label htmlFor=\"referenceNumber\" className=\"block text-body-sm form-label color-foreground mb-sm\">\n                  Reference Number\n                </label>\n                <UnifiedInput\n                  id=\"referenceNumber\"\n                  name=\"referenceNumber\"\n                  value={formData.referenceNumber}\n                  onChange={handleTextChange}\n                  placeholder=\"e.g., Check #1234, Wire #ABC123\"\n                />\n              </div>\n\n              <div>\n                <label htmlFor=\"occurredAt\" className=\"block text-body-sm form-label color-foreground mb-sm\">\n                  Transaction Date & Time *\n                </label>\n                <div className=\"relative\">\n                  <Calendar className=\"absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 color-foreground/50\" />\n                  <UnifiedInput\n                    id=\"occurredAt\"\n                    name=\"occurredAt\"\n                    type=\"datetime-local\"\n                    value={formData.occurredAt}\n                    onChange={handleTextChange}\n                    className=\"pl-2xl\"\n                    max={new Date().toISOString().slice(0, 16)}\n                    required\n                  />\n                </div>\n              </div>\n            </div>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-md\">\n              <div>\n                <label htmlFor=\"projectId\" className=\"block text-body-sm form-label color-foreground mb-sm\">\n                  Project ID\n                </label>\n                <UnifiedInput\n                  id=\"projectId\"\n                  name=\"projectId\"\n                  value={formData.projectId}\n                  onChange={handleTextChange}\n                  placeholder=\"Optional: Link to project\"\n                />\n              </div>\n\n              <div>\n                <label htmlFor=\"invoiceId\" className=\"block text-body-sm form-label color-foreground mb-sm\">\n                  Invoice ID\n                </label>\n                <UnifiedInput\n                  id=\"invoiceId\"\n                  name=\"invoiceId\"\n                  value={formData.invoiceId}\n                  onChange={handleTextChange}\n                  placeholder=\"Optional: Link to invoice\"\n                />\n              </div>\n            </div>\n          </div>\n\n          {formattedAmount && formData.accountId && selectedAccount && (\n            <Card className=\"p-md bg-secondary border-border\">\n              <h4 className=\"form-label color-foreground mb-sm\">Transaction Summary</h4>\n              <div className=\"stack-xs text-body-sm\">\n                <div className=\"flex justify-between\">\n                  <span className=\"color-foreground/70\">Type:</span>\n                  <span className={`form-label capitalize ${formData.kind === 'revenue' ? 'color-success' : 'color-destructive'}`}>\n                    {formData.kind} ({formData.kind === 'revenue' ? 'Money In' : 'Money Out'})\n                  </span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"color-foreground/70\">Amount:</span>\n                  <span className={`form-label ${formData.kind === 'revenue' ? 'color-success' : 'color-destructive'}`}>\n                    {formData.kind === 'revenue' ? '+' : '-'}{formattedAmount}\n                  </span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"color-foreground/70\">Account:</span>\n                  <span className=\"form-label\">\n                    {selectedAccount.name}\n                  </span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"color-foreground/70\">Date:</span>\n                  <span className=\"form-label\">{new Date(formData.occurredAt).toLocaleString()}</span>\n                </div>\n              </div>\n            </Card>\n          )}\n\n          <div className=\"flex justify-end cluster-sm pt-lg border-t border-border\">\n            <Button type=\"button\" variant=\"ghost\" onClick={onClose} disabled={loading}>\n              Cancel\n            </Button>\n            <Button type=\"submit\" disabled={loading || !formData.description.trim() || Number.isNaN(parsedAmount) || parsedAmount === 0 || !formData.accountId} className=\"min-w-[120px]\">\n              {loading ? (\n                <div className=\"flex items-center cluster-sm\">\n                  <div className=\"w-4 h-4 border-2 border-background/30 border-t-background rounded-full animate-spin\" />\n                  <span>Adding...</span>\n                </div>\n              ) : (\n                <div className=\"flex items-center cluster-sm\">\n                  <Plus className=\"h-4 w-4\" />\n                  <span>Add Transaction</span>\n                </div>\n              )}\n            </Button>\n          </div>\n        </form>\n      ),\n    },\n  ]), [accountOptions, formData, formattedAmount, handleSubmit, kindOptions, loading, onClose, parsedAmount, selectedAccount, updateForm]);\n\n  return (\n    <AppDrawer\n      open={isOpen}\n      onClose={onClose}\n      title=\"Add Transaction\"\n      record={null}\n      mode=\"create\"\n      fields={[]}\n      tabs={drawerTabs}\n      loading={loading}\n    />\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ghxstship/apps/web/app/(app)/(shell)/finance/transactions/TransactionsClient.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadTransactions'. Either include it or remove the dependency array.","line":77,"column":6,"nodeType":"ArrayExpression","endLine":77,"endColumn":13,"suggestions":[{"desc":"Update the dependencies array to be: [loadTransactions, orgId]","fix":{"range":[2191,2198],"text":"[loadTransactions, orgId]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { ArrowUpDown, Plus, Edit, Trash2, ArrowUp, ArrowDown, DollarSign, Calendar, Filter, Search, FileText, CheckCircle, Clock, AlertTriangle, CreditCard, Building } from \"lucide-react\";\nimport { useState, useEffect } from 'react';\nimport { User } from '@supabase/supabase-js';\nimport { createBrowserClient } from '@ghxstship/auth';\nimport { \n  Card, \n  Button, \n  Badge, \n  Skeleton, \n  UnifiedInput,\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n  DataViewProvider,\n  StateManagerProvider,\n  ViewSwitcher,\n  DataGrid,\n  KanbanBoard,\n  CalendarView,\n  ListView,\n  DataActions,\n  UniversalDrawer,\n  type DataRecord,\n  type FieldConfig,\n  type DataViewConfig\n} from '@ghxstship/ui';\n\ninterface TransactionsClientProps {\n  user: User;\n  orgId: string;\n  translations: {\n    title: string;\n    subtitle: string;\n  };\n}\n\ninterface Transaction {\n  id: string;\n  description: string;\n  amount: number;\n  currency: string;\n  kind: 'debit' | 'credit';\n  status: 'pending' | 'completed' | 'failed' | 'cancelled';\n  category: string;\n  account_id: string;\n  reference_type?: 'invoice' | 'expense' | 'budget' | 'revenue';\n  reference_id?: string;\n  reference_number?: string;\n  occurred_at: string;\n  created_at: string;\n  updated_at: string;\n  organization_id: string;\n  // Computed fields\n  account_name?: string;\n  reference_description?: string;\n}\n\nexport default function TransactionsClient({ user, orgId, translations }: TransactionsClientProps) {\n  const [loading, setLoading] = useState(true);\n  const [transactions, setTransactions] = useState<Transaction[]>([]);\n  const [selectedTransaction, setSelectedTransaction] = useState<Transaction | null>(null);\n  const [drawerOpen, setDrawerOpen] = useState(false);\n  const [drawerMode, setDrawerMode] = useState<'create' | 'edit' | 'view'>('view');\n  const [filterKind, setFilterKind] = useState<string>('all');\n  const [filterStatus, setFilterStatus] = useState<string>('all');\n  const [filterCategory, setFilterCategory] = useState<string>('all');\n  const [searchTerm, setSearchTerm] = useState<string>('');\n\n  const supabase = createBrowserClient();\n\n  useEffect(() => {\n    loadTransactions();\n  }, [orgId]);\n\n  const loadTransactions = async () => {\n    try {\n      setLoading(true);\n      const { data, error } = await supabase\n        .from('finance_transactions')\n        .select(`\n          *,\n          accounts:account_id(name, account_number)\n        `)\n        .eq('organization_id', orgId)\n        .order('occurred_at', { ascending: false });\n\n      if (error) throw error;\n      \n      // Add computed fields\n      const enrichedTransactions = (data || []).map(transaction => ({\n        ...transaction,\n        account_name: transaction.accounts?.name || 'Unknown Account'\n      }));\n      \n      setTransactions(enrichedTransactions);\n    } catch (error) {\n      console.error('Error loading transactions:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleCreateTransaction = () => {\n    setSelectedTransaction(null);\n    setDrawerMode('create');\n    setDrawerOpen(true);\n  };\n\n  const handleEditTransaction = (transaction: Transaction) => {\n    setSelectedTransaction(transaction);\n    setDrawerMode('edit');\n    setDrawerOpen(true);\n  };\n\n  const handleViewTransaction = (transaction: Transaction) => {\n    setSelectedTransaction(transaction);\n    setDrawerMode('view');\n    setDrawerOpen(true);\n  };\n\n  const handleDeleteTransaction = async (transactionId: string) => {\n    if (!confirm('Are you sure you want to delete this transaction? This action cannot be undone.')) return;\n\n    try {\n      const response = await fetch('/api/v1/finance/transactions', {\n        method: 'DELETE',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ id: transactionId })\n      });\n\n      if (!response.ok) throw new Error('Failed to delete transaction');\n      await loadTransactions();\n    } catch (error) {\n      console.error('Error deleting transaction:', error);\n    }\n  };\n\n  const handleSaveTransaction = async (transactionData: Partial<Transaction>) => {\n    try {\n      if (drawerMode === 'create') {\n        const response = await fetch('/api/v1/finance/transactions', {\n          method: 'POST',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify({\n            description: transactionData.description,\n            amount: transactionData.amount,\n            currency: transactionData.currency,\n            kind: transactionData.kind,\n            status: transactionData.status,\n            category: transactionData.category,\n            accountId: transactionData.account_id,\n            referenceType: transactionData.reference_type,\n            referenceId: transactionData.reference_id,\n            referenceNumber: transactionData.reference_number,\n            occurredAt: transactionData.occurred_at\n          })\n        });\n\n        if (!response.ok) throw new Error('Failed to create transaction');\n      } else if (drawerMode === 'edit' && selectedTransaction) {\n        const response = await fetch('/api/v1/finance/transactions', {\n          method: 'PUT',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify({\n            id: selectedTransaction.id,\n            description: transactionData.description,\n            amount: transactionData.amount,\n            currency: transactionData.currency,\n            kind: transactionData.kind,\n            status: transactionData.status,\n            category: transactionData.category,\n            accountId: transactionData.account_id,\n            referenceType: transactionData.reference_type,\n            referenceId: transactionData.reference_id,\n            referenceNumber: transactionData.reference_number,\n            occurredAt: transactionData.occurred_at\n          })\n        });\n\n        if (!response.ok) throw new Error('Failed to update transaction');\n      }\n\n      setDrawerOpen(false);\n      await loadTransactions();\n    } catch (error) {\n      console.error('Error saving transaction:', error);\n    }\n  };\n\n  const handleCompleteTransaction = async (transactionId: string) => {\n    try {\n      const response = await fetch('/api/v1/finance/transactions', {\n        method: 'PUT',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          id: transactionId,\n          status: 'completed'\n        })\n      });\n\n      if (!response.ok) throw new Error('Failed to complete transaction');\n      await loadTransactions();\n    } catch (error) {\n      console.error('Error completing transaction:', error);\n    }\n  };\n\n  const filteredTransactions = transactions.filter(transaction => {\n    const matchesSearch = searchTerm === '' || \n      transaction.description.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      transaction.reference_number?.toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesKind = filterKind === 'all' || transaction.kind === filterKind;\n    const matchesStatus = filterStatus === 'all' || transaction.status === filterStatus;\n    const matchesCategory = filterCategory === 'all' || transaction.category === filterCategory;\n    return matchesSearch && matchesKind && matchesStatus && matchesCategory;\n  });\n\n  const getTransactionKindIcon = (transaction: Transaction) => {\n    return transaction.kind === 'debit' \n      ? <ArrowDown className=\"h-5 w-5 text-red-500\" />\n      : <ArrowUp className=\"h-5 w-5 text-green-500\" />;\n  };\n\n  const getTransactionStatusIcon = (transaction: Transaction) => {\n    switch (transaction.status) {\n      case 'completed':\n        return <CheckCircle className=\"h-5 w-5 text-green-500\" />;\n      case 'pending':\n        return <Clock className=\"h-5 w-5 text-yellow-500\" />;\n      case 'failed':\n        return <AlertTriangle className=\"h-5 w-5 text-red-500\" />;\n      case 'cancelled':\n        return <AlertTriangle className=\"h-5 w-5 text-gray-500\" />;\n      default:\n        return <Clock className=\"h-5 w-5 text-gray-500\" />;\n    }\n  };\n\n  const getTransactionStatusColor = (transaction: Transaction) => {\n    switch (transaction.status) {\n      case 'completed':\n        return 'bg-green-100 text-green-800';\n      case 'pending':\n        return 'bg-yellow-100 text-yellow-800';\n      case 'failed':\n        return 'bg-red-100 text-red-800';\n      case 'cancelled':\n        return 'bg-gray-100 text-gray-800';\n      default:\n        return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  const getTransactionKindColor = (transaction: Transaction) => {\n    return transaction.kind === 'debit'\n      ? 'bg-red-100 text-red-800'\n      : 'bg-green-100 text-green-800';\n  };\n\n  const formatCurrency = (amount: number, currency = 'USD') => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: currency,\n    }).format(amount);\n  };\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString();\n  };\n\n  const formatDateTime = (dateString: string) => {\n    return new Date(dateString).toLocaleString();\n  };\n\n  // ATLVS DataViews field configuration\n  const fields: FieldConfig[] = [\n    {\n      key: 'description',\n      label: 'Description',\n      type: 'text',\n      required: true,\n      sortable: true,\n      filterable: true\n    },\n    {\n      key: 'amount',\n      label: 'Amount',\n      type: 'currency',\n      required: true,\n      sortable: true,\n      filterable: true\n    },\n    {\n      key: 'currency',\n      label: 'Currency',\n      type: 'select',\n      options: [\n        { value: 'USD', label: 'USD' },\n        { value: 'EUR', label: 'EUR' },\n        { value: 'GBP', label: 'GBP' }\n      ],\n      defaultValue: 'USD',\n      filterable: true\n    },\n    {\n      key: 'kind',\n      label: 'Type',\n      type: 'select',\n      options: [\n        { value: 'debit', label: 'Debit' },\n        { value: 'credit', label: 'Credit' }\n      ],\n      required: true,\n      filterable: true,\n      sortable: true\n    },\n    {\n      key: 'status',\n      label: 'Status',\n      type: 'select',\n      options: [\n        { value: 'pending', label: 'Pending' },\n        { value: 'completed', label: 'Completed' },\n        { value: 'failed', label: 'Failed' },\n        { value: 'cancelled', label: 'Cancelled' }\n      ],\n      filterable: true,\n      sortable: true\n    },\n    {\n      key: 'category',\n      label: 'Category',\n      type: 'select',\n      options: [\n        { value: 'revenue', label: 'Revenue' },\n        { value: 'expense', label: 'Expense' },\n        { value: 'transfer', label: 'Transfer' },\n        { value: 'adjustment', label: 'Adjustment' },\n        { value: 'fee', label: 'Fee' },\n        { value: 'other', label: 'Other' }\n      ],\n      required: true,\n      filterable: true,\n      sortable: true\n    },\n    {\n      key: 'account_id',\n      label: 'Account',\n      type: 'text',\n      required: true,\n      sortable: true,\n      filterable: true\n    },\n    {\n      key: 'reference_type',\n      label: 'Reference Type',\n      type: 'select',\n      options: [\n        { value: 'invoice', label: 'Invoice' },\n        { value: 'expense', label: 'Expense' },\n        { value: 'budget', label: 'Budget' },\n        { value: 'revenue', label: 'Revenue' }\n      ],\n      sortable: true,\n      filterable: true\n    },\n    {\n      key: 'reference_number',\n      label: 'Reference Number',\n      type: 'text',\n      sortable: true,\n      filterable: true\n    },\n    {\n      key: 'occurred_at',\n      label: 'Transaction Date',\n      type: 'datetime-local',\n      required: true,\n      sortable: true,\n      filterable: true\n    }\n  ];\n\n  // ATLVS DataViews configuration\n  const transactionsConfig: DataViewConfig = {\n    id: 'transactions-dataviews',\n    name: 'Transaction Management',\n    viewType: 'grid',\n    defaultView: 'grid',\n    fields,\n    data: filteredTransactions.map(transaction => ({\n      ...transaction,\n      record_type: 'transaction'\n    })),\n    pagination: {\n      page: 1,\n      pageSize: 25,\n      total: filteredTransactions.length\n    },\n    onSearch: (query: string) => {\n      setSearchTerm(query);\n    },\n    onFilter: (filters: unknown) => {\n      if (filters.kind) setFilterKind(filters.kind);\n      if (filters.status) setFilterStatus(filters.status);\n      if (filters.category) setFilterCategory(filters.category);\n    },\n    onSort: (sorts: unknown) => {\n      console.log('Sort:', sorts);\n    },\n    onRefresh: () => {\n      loadTransactions();\n    },\n    onExport: (data, format) => {\n      console.log('Export:', format, data);\n    },\n    onImport: (data: unknown) => {\n      console.log('Import:', data);\n    },\n    onRowAction: (action: string, record: DataRecord) => {\n      const transaction = record as Transaction;\n      switch (action) {\n        case 'view':\n          handleViewTransaction(transaction);\n          break;\n        case 'edit':\n          handleEditTransaction(transaction);\n          break;\n        case 'delete':\n          handleDeleteTransaction(transaction.id);\n          break;\n        case 'complete':\n          handleCompleteTransaction(transaction.id);\n          break;\n      }\n    }\n  };\n\n  const configWithData = {\n    ...transactionsConfig,\n    data: filteredTransactions.map(transaction => ({\n      ...transaction,\n      record_type: 'transaction'\n    }))\n  };\n\n  if (loading) {\n    return (\n      <div className=\"space-y-4\">\n        <div className=\"flex justify-between items-center\">\n          <div>\n            <Skeleton className=\"h-8 w-48\" />\n            <Skeleton className=\"h-4 w-96 mt-2\" />\n          </div>\n          <Skeleton className=\"h-10 w-32\" />\n        </div>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n          {[...Array(6)].map((_, i) => (\n            <Skeleton key={i} className=\"h-32\" />\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"h-full flex flex-col\">\n      {/* Header */}\n      <div className=\"flex justify-between items-center mb-6\">\n        <div>\n          <h1 className=\"text-2xl font-bold text-gray-900\">Transaction Management</h1>\n          <p className=\"text-gray-600\">Track and manage your financial transactions</p>\n        </div>\n        <Button onClick={handleCreateTransaction} className=\"flex items-center gap-2\">\n          <Plus className=\"h-4 w-4\" />\n          New Transaction\n        </Button>\n      </div>\n\n      {/* Summary Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4 mb-6\">\n        <Card className=\"p-4\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm font-medium text-gray-600\">Total Transactions</p>\n              <p className=\"text-2xl font-bold text-gray-900\">{transactions.length}</p>\n            </div>\n            <ArrowUpDown className=\"h-8 w-8 text-blue-500\" />\n          </div>\n        </Card>\n        <Card className=\"p-4\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm font-medium text-gray-600\">Total Debits</p>\n              <p className=\"text-2xl font-bold text-gray-900\">\n                {formatCurrency(transactions.filter(t => t.kind === 'debit').reduce((sum, t) => sum + t.amount, 0))}\n              </p>\n            </div>\n            <ArrowDown className=\"h-8 w-8 text-red-500\" />\n          </div>\n        </Card>\n        <Card className=\"p-4\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm font-medium text-gray-600\">Total Credits</p>\n              <p className=\"text-2xl font-bold text-gray-900\">\n                {formatCurrency(transactions.filter(t => t.kind === 'credit').reduce((sum, t) => sum + t.amount, 0))}\n              </p>\n            </div>\n            <ArrowUp className=\"h-8 w-8 text-green-500\" />\n          </div>\n        </Card>\n        <Card className=\"p-4\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm font-medium text-gray-600\">Pending</p>\n              <p className=\"text-2xl font-bold text-gray-900\">\n                {transactions.filter(t => t.status === 'pending').length}\n              </p>\n            </div>\n            <Clock className=\"h-8 w-8 text-yellow-500\" />\n          </div>\n        </Card>\n      </div>\n\n      {/* Filters */}\n      <div className=\"flex gap-4 mb-6\">\n        <div className=\"flex-1\">\n          <UnifiedInput\n            placeholder=\"Search transactions...\"\n            value={searchTerm}\n            onChange={(e) => setSearchTerm(e.target.value)}\n            leftIcon={<Search className=\"h-4 w-4\" />}\n          />\n        </div>\n        <Select value={filterKind} onValueChange={setFilterKind}>\n          <SelectTrigger className=\"w-48\">\n            <SelectValue placeholder=\"Filter by type\" />\n          </SelectTrigger>\n          <SelectContent>\n            <SelectItem value=\"all\">All Types</SelectItem>\n            <SelectItem value=\"debit\">Debit</SelectItem>\n            <SelectItem value=\"credit\">Credit</SelectItem>\n          </SelectContent>\n        </Select>\n        <Select value={filterStatus} onValueChange={setFilterStatus}>\n          <SelectTrigger className=\"w-48\">\n            <SelectValue placeholder=\"Filter by status\" />\n          </SelectTrigger>\n          <SelectContent>\n            <SelectItem value=\"all\">All Statuses</SelectItem>\n            <SelectItem value=\"pending\">Pending</SelectItem>\n            <SelectItem value=\"completed\">Completed</SelectItem>\n            <SelectItem value=\"failed\">Failed</SelectItem>\n            <SelectItem value=\"cancelled\">Cancelled</SelectItem>\n          </SelectContent>\n        </Select>\n        <Select value={filterCategory} onValueChange={setFilterCategory}>\n          <SelectTrigger className=\"w-48\">\n            <SelectValue placeholder=\"Filter by category\" />\n          </SelectTrigger>\n          <SelectContent>\n            <SelectItem value=\"all\">All Categories</SelectItem>\n            <SelectItem value=\"revenue\">Revenue</SelectItem>\n            <SelectItem value=\"expense\">Expense</SelectItem>\n            <SelectItem value=\"transfer\">Transfer</SelectItem>\n            <SelectItem value=\"adjustment\">Adjustment</SelectItem>\n            <SelectItem value=\"fee\">Fee</SelectItem>\n            <SelectItem value=\"other\">Other</SelectItem>\n          </SelectContent>\n        </Select>\n      </div>\n\n      {/* ATLVS DataViews */}\n      <div className=\"flex-1\">\n        <DataViewProvider config={configWithData}>\n          <StateManagerProvider>\n            <div className=\"flex-1 space-y-4\">\n              {/* View Switcher and Actions */}\n              <div className=\"flex justify-between items-center\">\n                <ViewSwitcher />\n                <DataActions />\n              </div>\n\n              {/* Data Views */}\n              <div className=\"flex-1\">\n                <DataGrid />\n                <KanbanBoard \n                  columns={[\n                    { id: 'pending', title: 'Pending' },\n                    { id: 'completed', title: 'Completed' },\n                    { id: 'failed', title: 'Failed' },\n                    { id: 'cancelled', title: 'Cancelled' }\n                  ]}\n                  statusField=\"status\"\n                  titleField=\"description\"\n                />\n                <CalendarView \n                  startDateField=\"occurred_at\"\n                  titleField=\"description\"\n                />\n                <ListView titleField=\"description\" />\n              </div>\n            </div>\n          </StateManagerProvider>\n        </DataViewProvider>\n      </div>\n\n      {/* Universal Drawer for CRUD operations */}\n      <UniversalDrawer\n        open={drawerOpen}\n        onClose={() => setDrawerOpen(false)}\n        title={\n          drawerMode === 'create' ? 'Create Transaction' :\n          drawerMode === 'edit' ? 'Edit Transaction' : 'Transaction Details'\n        }\n        mode={drawerMode}\n        data={selectedTransaction}\n        fields={fields}\n        onSave={handleSaveTransaction}\n        tabs={[\n          {\n            key: 'details',\n            label: 'Transaction Details',\n            content: (\n              <div className=\"space-y-4\">\n                {selectedTransaction && (\n                  <>\n                    <div className=\"flex items-center gap-3\">\n                      {getTransactionKindIcon(selectedTransaction)}\n                      {getTransactionStatusIcon(selectedTransaction)}\n                      <div>\n                        <h3 className=\"font-semibold\">{selectedTransaction.description}</h3>\n                        <p className=\"text-sm text-gray-600\">{selectedTransaction.category}</p>\n                      </div>\n                      <Badge className={getTransactionKindColor(selectedTransaction)}>\n                        {selectedTransaction.kind}\n                      </Badge>\n                      <Badge className={getTransactionStatusColor(selectedTransaction)}>\n                        {selectedTransaction.status}\n                      </Badge>\n                    </div>\n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <div>\n                        <label className=\"text-sm font-medium text-gray-700\">Amount</label>\n                        <p className=\"text-lg font-semibold\">{formatCurrency(selectedTransaction.amount)}</p>\n                      </div>\n                      <div>\n                        <label className=\"text-sm font-medium text-gray-700\">Account</label>\n                        <p className=\"text-sm\">{selectedTransaction.account_name}</p>\n                      </div>\n                      <div>\n                        <label className=\"text-sm font-medium text-gray-700\">Transaction Date</label>\n                        <p className=\"text-sm\">{formatDateTime(selectedTransaction.occurred_at)}</p>\n                      </div>\n                      <div>\n                        <label className=\"text-sm font-medium text-gray-700\">Reference</label>\n                        <p className=\"text-sm\">\n                          {selectedTransaction.reference_number || selectedTransaction.reference_type || 'N/A'}\n                        </p>\n                      </div>\n                    </div>\n                    {selectedTransaction.status === 'pending' && (\n                      <div className=\"flex gap-2\">\n                        <Button \n                          onClick={() => handleCompleteTransaction(selectedTransaction.id)}\n                          className=\"flex items-center gap-2\"\n                          size=\"sm\"\n                        >\n                          <CheckCircle className=\"h-4 w-4\" />\n                          Mark as Completed\n                        </Button>\n                      </div>\n                    )}\n                  </>\n                )}\n              </div>\n            )\n          }\n        ]}\n      />\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ghxstship/apps/web/app/(app)/(shell)/jobs/assignments/AssignmentsClient.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"The 'fieldConfig' array makes the dependencies of useMemo Hook (at line 443) change on every render. To fix this, wrap the initialization of 'fieldConfig' in its own useMemo() Hook.","line":58,"column":9,"nodeType":"VariableDeclarator","endLine":131,"endColumn":4}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { Plus, Users, Clock, CheckCircle, AlertCircle, TrendingUp } from \"lucide-react\";\nimport { useCallback, useEffect, useMemo, useState } from 'react';\nimport { useTranslations } from 'next-intl';\nimport {\n  type DataRecord,\n  type FieldConfig,\n  type FilterConfig,\n  type SortConfig,\n  DataViewProvider,\n  StateManagerProvider,\n  ViewSwitcher,\n  DataActions,\n  DataGrid,\n  KanbanBoard,\n  CalendarView,\n  ListView,\n  TimelineView,\n  DashboardView,\n  Button,\n  Badge,\n  Card\n} from '@ghxstship/ui';\nimport type { DataViewConfig } from '@ghxstship/ui/components/DataViews/types';\nimport { tryCatch, reportError } from '@ghxstship/ui/utils/error-handling';\nimport AppDrawer from '@/app/_components/shared/AppDrawer';\n\ninterface AssignmentsResponse {\n  assignments: DataRecord[];\n}\n\ninterface JobAssignment extends DataRecord {\n  id: string;\n  job_id: string;\n  assignee_user_id: string;\n  note?: string;\n  assigned_at: string;\n  // Enhanced fields from joins\n  job_title?: string;\n  job_status?: string;\n  assignee_name?: string;\n  assignee_email?: string;\n  assignee_avatar?: string;\n}\n\nexport default function AssignmentsClient({ orgId }: { orgId: string }) {\n  const t = useTranslations('assignments');\n  const [assignments, setAssignments] = useState<DataRecord[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [filters, setFilters] = useState<Record<string, string>>({});\n  const [selectedAssignment, setSelectedAssignment] = useState<DataRecord | null>(null);\n  const [createDrawerOpen, setCreateDrawerOpen] = useState(false);\n  const [editDrawerOpen, setEditDrawerOpen] = useState(false);\n  const [viewMode, setViewMode] = useState<'grid' | 'kanban' | 'calendar' | 'list' | 'timeline' | 'dashboard'>('grid');\n\n  // Enhanced field configuration for assignments data (ATLVS compatible)\n  const fieldConfig: FieldConfig[] = [\n    {\n      key: 'id',\n      label: 'Assignment ID',\n      type: 'text' as const,\n      required: false,\n      sortable: true,\n      filterable: false\n    },\n    {\n      key: 'job_title',\n      label: 'Job Title',\n      type: 'text' as const,\n      required: true,\n      sortable: true,\n      filterable: true\n    },\n    {\n      key: 'assignee_name',\n      label: 'Assignee Name',\n      type: 'text' as const,\n      required: true,\n      sortable: true,\n      filterable: true\n    },\n    {\n      key: 'assignee_email',\n      label: 'Assignee Email',\n      type: 'email' as const,\n      required: false,\n      sortable: true,\n      filterable: true\n    },\n    {\n      key: 'assigned_at',\n      label: 'Assigned Date',\n      type: 'date' as const,\n      required: false,\n      sortable: true,\n      filterable: true\n    },\n    {\n      key: 'note',\n      label: 'Notes',\n      type: 'textarea' as const,\n      required: false,\n      sortable: false,\n      filterable: true\n    },\n    {\n      key: 'job_id',\n      label: 'Job ID',\n      type: 'text' as const,\n      required: true,\n      sortable: true,\n      filterable: true\n    },\n    {\n      key: 'assignee_user_id',\n      label: 'Assignee ID',\n      type: 'text' as const,\n      required: true,\n      sortable: true,\n      filterable: true\n    },\n    {\n      key: 'job_status',\n      label: 'Job Status',\n      type: 'text' as const,\n      required: false,\n      sortable: true,\n      filterable: true\n    }\n  ];\n\n  // Enhanced Supabase data loading function with enriched data\n  const loadAssignmentsData = useCallback(async (activeFilters?: Record<string, string>): Promise<DataRecord[]> => {\n    try {\n      const params = new URLSearchParams();\n      if (activeFilters?.job_id) params.append('job_id', activeFilters.job_id);\n      if (activeFilters?.assignee_user_id) params.append('assignee_user_id', activeFilters.assignee_user_id);\n      if (activeFilters?.search) params.append('search', activeFilters.search);\n      if (activeFilters?.job_status) params.append('job_status', activeFilters.job_status);\n\n      const responseResult = await tryCatch(async () =>\n        fetch(`/api/v1/jobs/assignments?${params.toString()}`, {\n          method: 'GET',\n          headers: { 'Content-Type': 'application/json' }\n        })\n      );\n\n      if (!responseResult.success) {\n        reportError(responseResult.error);\n        throw new Error(responseResult.error.message);\n      }\n\n      const response = responseResult.data;\n      if (!response.ok) {\n        throw new Error(`Failed to fetch assignments: ${response.statusText}`);\n      }\n\n      const data: AssignmentsResponse = await response.json();\n      \n      // Enrich assignments data with job and user information\n      const enrichedAssignments = (data.assignments ?? []).map((assignment: unknown) => ({\n        ...assignment,\n        job_title: assignment.jobs?.title || 'Untitled Job',\n        job_status: assignment.jobs?.status || 'unknown',\n        assignee_name: assignment.users?.email?.split('@')[0] || 'Unknown User',\n        assignee_email: assignment.users?.email || '',\n        assignee_avatar: assignment.users?.avatar_url || null\n      }));\n\n      return enrichedAssignments;\n    } catch (error) {\n      console.error('Error loading assignments:', error);\n      return [];\n    }\n  }, []);\n\n  // Statistics calculation\n  const assignmentStats = useMemo(() => {\n    const total = assignments.length;\n    const byJobStatus = assignments.reduce((acc: Record<string, number>, assignment: unknown) => {\n      const status = assignment.job_status || 'unknown';\n      acc[status] = (acc[status] || 0) + 1;\n      return acc;\n    }, {});\n\n    const recentAssignments = assignments.filter((assignment: unknown) => {\n      const assignedDate = new Date(assignment.assigned_at);\n      const weekAgo = new Date();\n      weekAgo.setDate(weekAgo.getDate() - 7);\n      return assignedDate >= weekAgo;\n    }).length;\n\n    return {\n      total,\n      byJobStatus,\n      recentAssignments,\n      activeJobs: byJobStatus.in_progress || 0,\n      completedJobs: byJobStatus.done || 0,\n      pendingJobs: byJobStatus.open || 0\n    };\n  }, [assignments]);\n\n  // Load data on mount and when filters change\n  useEffect(() => {\n    const fetchData = async () => {\n      setLoading(true);\n      const data = await loadAssignmentsData(filters);\n      setAssignments(data);\n      setLoading(false);\n    };\n    void fetchData();\n  }, [filters, loadAssignmentsData]);\n\n  // Drawer management\n  const closeDrawer = useCallback(() => {\n    setSelectedAssignment(null);\n    setCreateDrawerOpen(false);\n    setEditDrawerOpen(false);\n  }, []);\n\n  const openViewDrawer = useCallback((record: DataRecord) => {\n    setSelectedAssignment(record);\n    setCreateDrawerOpen(false);\n    setEditDrawerOpen(false);\n  }, []);\n\n  const openCreateDrawer = useCallback(() => {\n    setSelectedAssignment(null);\n    setCreateDrawerOpen(true);\n    setEditDrawerOpen(false);\n  }, []);\n\n  const openEditDrawer = useCallback((record: DataRecord) => {\n    setSelectedAssignment(record);\n    setCreateDrawerOpen(false);\n    setEditDrawerOpen(true);\n  }, []);\n\n  // Enhanced search and filtering\n  const handleSearch = useCallback((query: string) => {\n    setFilters(prev => ({ ...prev, search: query }));\n  }, []);\n\n  const handleFilter = useCallback((newFilters: FilterConfig[]) => {\n    const normalizedFilters = newFilters.reduce<Record<string, string>>((acc, filter) => {\n      if (filter.value) {\n        acc[filter.field] = String(filter.value);\n      }\n      return acc;\n    }, {});\n    setFilters(prev => ({ ...prev, ...normalizedFilters }));\n  }, []);\n\n  const handleSort = useCallback((sorts: SortConfig[]) => {\n    // Implement sorting logic here\n    console.debug('Sort assignments:', sorts);\n    // In a real implementation, you would update the API call to include sort parameters\n  }, []);\n\n  const handleRefresh = useCallback(async () => {\n    setLoading(true);\n    const data = await loadAssignmentsData(filters);\n    setAssignments(data);\n    setLoading(false);\n  }, [filters, loadAssignmentsData]);\n\n  // Enhanced export functionality\n  const handleExport = useCallback(async (data: DataRecord[], format: string) => {\n    try {\n      const exportData = data.map(assignment => ({\n        'Assignment ID': assignment.id,\n        'Job Title': assignment.job_title,\n        'Job Status': assignment.job_status,\n        'Assignee Name': assignment.assignee_name,\n        'Assignee Email': assignment.assignee_email,\n        'Assigned Date': assignment.assigned_at,\n        'Notes': assignment.note || ''\n      }));\n\n      if (format === 'csv') {\n        const csv = [\n          Object.keys(exportData[0] || {}).join(','),\n          ...exportData.map(row => Object.values(row).map(val => `\"${val}\"`).join(','))\n        ].join('\\n');\n        \n        const blob = new Blob([csv], { type: 'text/csv' });\n        const url = URL.createObjectURL(blob);\n        const a = document.createElement('a');\n        a.href = url;\n        a.download = `assignments-${new Date().toISOString().split('T')[0]}.csv`;\n        a.click();\n        URL.revokeObjectURL(url);\n      } else if (format === 'json') {\n        const json = JSON.stringify(exportData, null, 2);\n        const blob = new Blob([json], { type: 'application/json' });\n        const url = URL.createObjectURL(blob);\n        const a = document.createElement('a');\n        a.href = url;\n        a.download = `assignments-${new Date().toISOString().split('T')[0]}.json`;\n        a.click();\n        URL.revokeObjectURL(url);\n      }\n    } catch (error) {\n      console.error('Export error:', error);\n    }\n  }, []);\n\n  // Import functionality\n  const handleImport = useCallback((data: DataRecord[]) => {\n    console.debug('Import assignments:', data.length);\n    // In a real implementation, you would validate and process the imported data\n    // then make API calls to create new assignments\n  }, []);\n\n  // Enhanced delete functionality with API integration\n  const handleDelete = useCallback(async (ids: string[]) => {\n    try {\n      setLoading(true);\n      \n      for (const id of ids) {\n        const responseResult = await tryCatch(async () =>\n          fetch(`/api/v1/jobs/assignments`, {\n            method: 'DELETE',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({ id })\n          })\n        );\n\n        if (!responseResult.success) {\n          reportError(responseResult.error);\n          throw new Error(responseResult.error.message);\n        }\n\n        const response = responseResult.data;\n        if (!response.ok) {\n          throw new Error(`Failed to delete assignment ${id}: ${response.statusText}`);\n        }\n      }\n\n      // Refresh data after deletion\n      await handleRefresh();\n    } catch (error) {\n      console.error('Delete error:', error);\n    } finally {\n      setLoading(false);\n    }\n  }, [handleRefresh]);\n\n  // Create assignment handler\n  const handleCreate = useCallback(async (formData: Record<string, unknown>) => {\n    try {\n      setLoading(true);\n      \n      const responseResult = await tryCatch(async () =>\n        fetch('/api/v1/jobs/assignments', {\n          method: 'POST',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify({\n            job_id: formData.job_id,\n            assignee_user_id: formData.assignee_user_id,\n            note: formData.note || ''\n          })\n        })\n      );\n\n      if (!responseResult.success) {\n        reportError(responseResult.error);\n        throw new Error(responseResult.error.message);\n      }\n\n      const response = responseResult.data;\n      if (!response.ok) {\n        throw new Error(`Failed to create assignment: ${response.statusText}`);\n      }\n\n      closeDrawer();\n      await handleRefresh();\n    } catch (error) {\n      console.error('Create error:', error);\n    } finally {\n      setLoading(false);\n    }\n  }, [closeDrawer, handleRefresh]);\n\n  // Update assignment handler\n  const handleUpdate = useCallback(async (formData: Record<string, unknown>) => {\n    if (!selectedAssignment) return;\n\n    try {\n      setLoading(true);\n      \n      const responseResult = await tryCatch(async () =>\n        fetch('/api/v1/jobs/assignments', {\n          method: 'PUT',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify({\n            id: selectedAssignment.id,\n            job_id: formData.job_id,\n            assignee_user_id: formData.assignee_user_id,\n            note: formData.note || ''\n          })\n        })\n      );\n\n      if (!responseResult.success) {\n        reportError(responseResult.error);\n        throw new Error(responseResult.error.message);\n      }\n\n      const response = responseResult.data;\n      if (!response.ok) {\n        throw new Error(`Failed to update assignment: ${response.statusText}`);\n      }\n\n      closeDrawer();\n      await handleRefresh();\n    } catch (error) {\n      console.error('Update error:', error);\n    } finally {\n      setLoading(false);\n    }\n  }, [selectedAssignment, closeDrawer, handleRefresh]);\n\n  const dataViewConfig = useMemo<DataViewConfig>(() => ({\n    id: 'assignments-view',\n    name: 'Job Assignments Management',\n    viewType: viewMode,\n    defaultView: 'grid',\n    fields: fieldConfig,\n    data: assignments,\n    loading,\n    onSearch: handleSearch,\n    onFilter: handleFilter,\n    onSort: handleSort,\n    onRefresh: handleRefresh,\n    onExport: handleExport,\n    onImport: handleImport,\n    onEdit: openEditDrawer,\n    onDelete: handleDelete,\n    onCreate: openCreateDrawer,\n    onView: openViewDrawer\n  }), [assignments, fieldConfig, handleDelete, handleExport, handleFilter, handleImport, handleRefresh, handleSearch, handleSort, loading, openCreateDrawer, openEditDrawer, openViewDrawer, viewMode]);\n\n  return (\n    <div className=\"h-full w-full\">\n      <StateManagerProvider>\n        <DataViewProvider config={dataViewConfig}>\n          <div className=\"flex flex-col h-full stack-md\">\n            {/* Header with Stats Dashboard */}\n            <div className=\"grid grid-cols-1 md:grid-cols-4 gap-md mb-md\">\n              <Card className=\"p-md\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-body-sm color-muted\">Total Assignments</p>\n                    <p className=\"text-heading-2 font-semibold color-foreground\">{assignmentStats.total}</p>\n                  </div>\n                  <Users className=\"h-8 w-8 color-accent\" />\n                </div>\n              </Card>\n              \n              <Card className=\"p-md\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-body-sm color-muted\">Active Jobs</p>\n                    <p className=\"text-heading-2 font-semibold color-success\">{assignmentStats.activeJobs}</p>\n                  </div>\n                  <CheckCircle className=\"h-8 w-8 color-success\" />\n                </div>\n              </Card>\n              \n              <Card className=\"p-md\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-body-sm color-muted\">Pending Jobs</p>\n                    <p className=\"text-heading-2 font-semibold color-warning\">{assignmentStats.pendingJobs}</p>\n                  </div>\n                  <Clock className=\"h-8 w-8 color-warning\" />\n                </div>\n              </Card>\n              \n              <Card className=\"p-md\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-body-sm color-muted\">Recent (7 days)</p>\n                    <p className=\"text-heading-2 font-semibold color-accent\">{assignmentStats.recentAssignments}</p>\n                  </div>\n                  <TrendingUp className=\"h-8 w-8 color-accent\" />\n                </div>\n              </Card>\n            </div>\n\n            {/* View Switcher and Actions */}\n            <div className=\"flex items-center justify-between\">\n              <ViewSwitcher />\n              <div className=\"flex items-center gap-sm\">\n                <DataActions />\n                <Button onClick={openCreateDrawer} className=\"flex items-center gap-xs\">\n                  <Plus className=\"h-4 w-4\" />\n                  New Assignment\n                </Button>\n              </div>\n            </div>\n\n            {/* Data Views */}\n            <div className=\"flex-1 min-h-0\">\n              {viewMode === 'grid' && <DataGrid />}\n              {viewMode === 'kanban' && (\n                <KanbanBoard\n                  columns={[\n                    { id: 'open', title: 'Open Jobs' },\n                    { id: 'in_progress', title: 'In Progress' },\n                    { id: 'done', title: 'Completed' },\n                    { id: 'cancelled', title: 'Cancelled' }\n                  ]}\n                  statusField=\"job_status\"\n                  titleField=\"job_title\"\n                />\n              )}\n              {viewMode === 'calendar' && (\n                <CalendarView\n                  startDateField=\"assigned_at\"\n                  titleField=\"job_title\"\n                />\n              )}\n              {viewMode === 'list' && (\n                <ListView\n                  titleField=\"job_title\"\n                  subtitleField=\"assignee_name\"\n                />\n              )}\n              {viewMode === 'timeline' && (\n                <TimelineView\n                  startDateField=\"assigned_at\"\n                  titleField=\"job_title\"\n                />\n              )}\n              {viewMode === 'dashboard' && <DashboardView />}\n            </div>\n\n            {/* Create Assignment Drawer */}\n            {createDrawerOpen && (\n              <AppDrawer\n                open={createDrawerOpen}\n                onClose={closeDrawer}\n                title=\"Create New Assignment\"\n                mode=\"create\"\n              >\n                <div className=\"stack-md\">\n                  <div className=\"grid grid-cols-1 gap-md\">\n                    <div>\n                      <label className=\"block text-body-sm font-medium color-foreground mb-xs\">\n                        Job ID\n                      </label>\n                      <input\n                        type=\"text\"\n                        name=\"job_id\"\n                        className=\"w-full px-sm py-xs border border-border rounded-md\"\n                        placeholder=\"Enter job ID\"\n                      />\n                    </div>\n                    <div>\n                      <label className=\"block text-body-sm font-medium color-foreground mb-xs\">\n                        Assignee User ID\n                      </label>\n                      <input\n                        type=\"text\"\n                        name=\"assignee_user_id\"\n                        className=\"w-full px-sm py-xs border border-border rounded-md\"\n                        placeholder=\"Enter user ID\"\n                      />\n                    </div>\n                    <div>\n                      <label className=\"block text-body-sm font-medium color-foreground mb-xs\">\n                        Notes\n                      </label>\n                      <textarea\n                        name=\"note\"\n                        rows={3}\n                        className=\"w-full px-sm py-xs border border-border rounded-md\"\n                        placeholder=\"Add any notes about this assignment\"\n                      />\n                    </div>\n                  </div>\n                  <div className=\"flex justify-end gap-sm pt-md\">\n                    <Button variant=\"outline\" onClick={closeDrawer}>\n                      Cancel\n                    </Button>\n                    <Button onClick={() => {\n                      const form = document.querySelector('form') as HTMLFormElement;\n                      if (form) {\n                        const formData = new FormData(form);\n                        handleCreate(Object.fromEntries(formData));\n                      }\n                    }}>\n                      Create Assignment\n                    </Button>\n                  </div>\n                </div>\n              </AppDrawer>\n            )}\n\n            {/* Edit Assignment Drawer */}\n            {editDrawerOpen && selectedAssignment && (\n              <AppDrawer\n                open={editDrawerOpen}\n                onClose={closeDrawer}\n                title={`Edit Assignment ${selectedAssignment.id}`}\n                record={selectedAssignment}\n                mode=\"edit\"\n              >\n                <div className=\"stack-md\">\n                  <div className=\"grid grid-cols-1 gap-md\">\n                    <div>\n                      <label className=\"block text-body-sm font-medium color-foreground mb-xs\">\n                        Job ID\n                      </label>\n                      <input\n                        type=\"text\"\n                        name=\"job_id\"\n                        defaultValue={selectedAssignment.job_id}\n                        className=\"w-full px-sm py-xs border border-border rounded-md\"\n                      />\n                    </div>\n                    <div>\n                      <label className=\"block text-body-sm font-medium color-foreground mb-xs\">\n                        Assignee User ID\n                      </label>\n                      <input\n                        type=\"text\"\n                        name=\"assignee_user_id\"\n                        defaultValue={selectedAssignment.assignee_user_id}\n                        className=\"w-full px-sm py-xs border border-border rounded-md\"\n                      />\n                    </div>\n                    <div>\n                      <label className=\"block text-body-sm font-medium color-foreground mb-xs\">\n                        Notes\n                      </label>\n                      <textarea\n                        name=\"note\"\n                        rows={3}\n                        defaultValue={selectedAssignment.note || ''}\n                        className=\"w-full px-sm py-xs border border-border rounded-md\"\n                      />\n                    </div>\n                  </div>\n                  <div className=\"flex justify-end gap-sm pt-md\">\n                    <Button variant=\"outline\" onClick={closeDrawer}>\n                      Cancel\n                    </Button>\n                    <Button onClick={() => {\n                      const form = document.querySelector('form') as HTMLFormElement;\n                      if (form) {\n                        const formData = new FormData(form);\n                        handleUpdate(Object.fromEntries(formData));\n                      }\n                    }}>\n                      Update Assignment\n                    </Button>\n                  </div>\n                </div>\n              </AppDrawer>\n            )}\n\n            {/* View Assignment Drawer */}\n            {selectedAssignment && !createDrawerOpen && !editDrawerOpen && (\n              <AppDrawer\n                open={!!selectedAssignment}\n                onClose={closeDrawer}\n                title={`Assignment Details`}\n                record={selectedAssignment}\n                mode=\"view\"\n              >\n                <div className=\"stack-md\">\n                  <div className=\"grid grid-cols-1 gap-md\">\n                    {fieldConfig.map(field => (\n                      <div key={field.key} className=\"stack-2xs\">\n                        <p className=\"text-body-xs font-medium color-muted\">{field.label}</p>\n                        <p className=\"text-body-sm color-foreground\">\n                          {selectedAssignment[field.key] \n                            ? (field.type === 'date' \n                                ? new Date(selectedAssignment[field.key]).toLocaleString()\n                                : String(selectedAssignment[field.key])\n                              )\n                            : '—'\n                          }\n                        </p>\n                      </div>\n                    ))}\n                  </div>\n                  <div className=\"flex justify-end gap-sm pt-md\">\n                    <Button variant=\"outline\" onClick={() => openEditDrawer(selectedAssignment)}>\n                      Edit Assignment\n                    </Button>\n                    <Button variant=\"outline\" onClick={closeDrawer}>\n                      Close\n                    </Button>\n                  </div>\n                </div>\n              </AppDrawer>\n            )}\n          </div>\n        </DataViewProvider>\n      </StateManagerProvider>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ghxstship/apps/web/app/(app)/(shell)/jobs/assignments/types.ts","messages":[{"ruleId":"no-restricted-syntax","severity":2,"message":"Do not create shadow components. Import and re-export from @ghxstship/ui if needed","line":4,"column":1,"nodeType":"ExportNamedDeclaration","messageId":"restrictedSyntax","endLine":4,"endColumn":99},{"ruleId":"no-restricted-syntax","severity":2,"message":"Do not create shadow components. Import and re-export from @ghxstship/ui if needed","line":5,"column":1,"nodeType":"ExportNamedDeclaration","messageId":"restrictedSyntax","endLine":5,"endColumn":73},{"ruleId":"no-restricted-syntax","severity":2,"message":"Do not create shadow components. Import and re-export from @ghxstship/ui if needed","line":6,"column":1,"nodeType":"ExportNamedDeclaration","messageId":"restrictedSyntax","endLine":6,"endColumn":75},{"ruleId":"no-restricted-syntax","severity":2,"message":"Do not create shadow components. Import and re-export from @ghxstship/ui if needed","line":9,"column":1,"nodeType":"ExportNamedDeclaration","messageId":"restrictedSyntax","endLine":24,"endColumn":2},{"ruleId":"no-restricted-syntax","severity":2,"message":"Do not create shadow components. Import and re-export from @ghxstship/ui if needed","line":27,"column":1,"nodeType":"ExportNamedDeclaration","messageId":"restrictedSyntax","endLine":32,"endColumn":2},{"ruleId":"no-restricted-syntax","severity":2,"message":"Do not create shadow components. Import and re-export from @ghxstship/ui if needed","line":35,"column":1,"nodeType":"ExportNamedDeclaration","messageId":"restrictedSyntax","endLine":41,"endColumn":2},{"ruleId":"no-restricted-syntax","severity":2,"message":"Do not create shadow components. Import and re-export from @ghxstship/ui if needed","line":43,"column":1,"nodeType":"ExportNamedDeclaration","messageId":"restrictedSyntax","endLine":46,"endColumn":2},{"ruleId":"no-restricted-syntax","severity":2,"message":"Do not create shadow components. Import and re-export from @ghxstship/ui if needed","line":49,"column":1,"nodeType":"ExportNamedDeclaration","messageId":"restrictedSyntax","endLine":57,"endColumn":2},{"ruleId":"no-restricted-syntax","severity":2,"message":"Do not create shadow components. Import and re-export from @ghxstship/ui if needed","line":60,"column":1,"nodeType":"ExportNamedDeclaration","messageId":"restrictedSyntax","endLine":68,"endColumn":2},{"ruleId":"no-restricted-syntax","severity":2,"message":"Do not create shadow components. Import and re-export from @ghxstship/ui if needed","line":71,"column":1,"nodeType":"ExportNamedDeclaration","messageId":"restrictedSyntax","endLine":77,"endColumn":2},{"ruleId":"no-restricted-syntax","severity":2,"message":"Do not create shadow components. Import and re-export from @ghxstship/ui if needed","line":80,"column":1,"nodeType":"ExportNamedDeclaration","messageId":"restrictedSyntax","endLine":86,"endColumn":2},{"ruleId":"no-restricted-syntax","severity":2,"message":"Do not create shadow components. Import and re-export from @ghxstship/ui if needed","line":89,"column":1,"nodeType":"ExportNamedDeclaration","messageId":"restrictedSyntax","endLine":96,"endColumn":2}],"suppressedMessages":[],"errorCount":12,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { type DataRecord } from '@ghxstship/ui';\n\n// Core assignment types\nexport type AssignmentStatus = 'pending' | 'assigned' | 'in_progress' | 'completed' | 'cancelled';\nexport type AssignmentPriority = 'low' | 'medium' | 'high' | 'critical';\nexport type AssignmentAssigneeType = 'internal' | 'contractor' | 'vendor';\n\n// Main assignment interface\nexport interface JobAssignment extends DataRecord {\n  id: string;\n  job_id: string;\n  assignee_user_id: string;\n  note?: string;\n  assigned_at: string;\n  // Enhanced fields from joins\n  job_title?: string;\n  job_status?: string;\n  job_due_at?: string;\n  assignee_name?: string;\n  assignee_email?: string;\n  assignee_avatar?: string;\n  project_title?: string;\n  organization_name?: string;\n}\n\n// API response types\nexport interface AssignmentsResponse {\n  assignments: JobAssignment[];\n  total?: number;\n  page?: number;\n  limit?: number;\n}\n\n// Form data types\nexport interface CreateAssignmentData {\n  job_id: string;\n  assignee_user_id: string;\n  note?: string;\n  priority?: AssignmentPriority;\n  due_date?: string;\n}\n\nexport interface UpdateAssignmentData extends Partial<CreateAssignmentData> {\n  id: string;\n  status?: AssignmentStatus;\n}\n\n// Filter and search types\nexport interface AssignmentFilters {\n  status?: AssignmentStatus;\n  assignee_user_id?: string;\n  job_id?: string;\n  priority?: AssignmentPriority;\n  search?: string;\n  date_from?: string;\n  date_to?: string;\n}\n\n// Statistics types\nexport interface AssignmentStats {\n  total: number;\n  byStatus: Record<AssignmentStatus, number>;\n  byPriority: Record<AssignmentPriority, number>;\n  recentAssignments: number;\n  completionRate: number;\n  averageCompletionTime: number;\n  overdue: number;\n}\n\n// View configuration types\nexport interface AssignmentViewConfig {\n  showCompletedTasks: boolean;\n  groupByAssignee: boolean;\n  showJobDetails: boolean;\n  defaultSort: 'assigned_at' | 'due_date' | 'priority' | 'status';\n  defaultView: 'grid' | 'kanban' | 'calendar' | 'list' | 'timeline' | 'dashboard';\n}\n\n// Drawer types\nexport interface AssignmentDrawerProps {\n  assignment?: JobAssignment;\n  mode: 'create' | 'edit' | 'view';\n  onSave?: (data: CreateAssignmentData | UpdateAssignmentData) => Promise<void>;\n  onClose: () => void;\n  open: boolean;\n}\n\n// Service types\nexport interface AssignmentService {\n  getAssignments: (filters?: AssignmentFilters) => Promise<AssignmentsResponse>;\n  getAssignment: (id: string) => Promise<JobAssignment>;\n  createAssignment: (data: CreateAssignmentData) => Promise<JobAssignment>;\n  updateAssignment: (data: UpdateAssignmentData) => Promise<JobAssignment>;\n  deleteAssignment: (id: string) => Promise<void>;\n  getAssignmentStats: () => Promise<AssignmentStats>;\n}\n\n// Export all types\nexport type {\n  DataRecord\n} from '@ghxstship/ui';\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ghxstship/apps/web/app/(app)/(shell)/jobs/bids/BidsClient.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadBids'. Either include it or remove the dependency array.","line":218,"column":6,"nodeType":"ArrayExpression","endLine":218,"endColumn":13,"suggestions":[{"desc":"Update the dependencies array to be: [loadBids, orgId]","fix":{"range":[6450,6457],"text":"[loadBids, orgId]"}}]},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Skeleton' is not defined.","line":340,"column":22,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":340,"endColumn":30},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Skeleton' is not defined.","line":342,"column":20,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":342,"endColumn":28},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Skeleton' is not defined.","line":343,"column":20,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":343,"endColumn":28},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Skeleton' is not defined.","line":346,"column":20,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":346,"endColumn":28},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Skeleton' is not defined.","line":347,"column":20,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":347,"endColumn":28},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'UnifiedInput' is not defined.","line":371,"column":12,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":371,"endColumn":24},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'UnifiedInput' is not defined.","line":500,"column":20,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":500,"endColumn":32},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'UnifiedInput' is not defined.","line":518,"column":20,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":518,"endColumn":32},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'UnifiedInput' is not defined.","line":522,"column":20,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":522,"endColumn":32}],"suppressedMessages":[],"errorCount":9,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { Plus, DollarSign, Clock, CheckCircle, XCircle, AlertCircle, TrendingUp } from \"lucide-react\";\nimport { useCallback, useEffect, useMemo, useState } from 'react';\nimport {\n  type DataRecord,\n  type FieldConfig,\n  type FilterConfig,\n  type SortConfig,\n  DataViewProvider,\n  StateManagerProvider,\n  ViewSwitcher,\n  DataActions,\n  DataGrid,\n  KanbanBoard,\n  CalendarView,\n  ListView,\n  TimelineView,\n  DashboardView,\n  Button,\n  Badge,\n  Card\n} from '@ghxstship/ui';\nimport type { DataViewConfig } from '@ghxstship/ui/components/DataViews/types';\nimport { tryCatch, reportError } from '@ghxstship/ui/utils/error-handling';\nimport AppDrawer from '@/app/_components/shared/AppDrawer';\n\ninterface BidsResponse {\n  bids: DataRecord[];\n}\n\ninterface JobBid extends DataRecord {\n  id: string;\n  opportunity_id: string;\n  company_id: string;\n  amount: number;\n  status: 'submitted' | 'under_review' | 'accepted' | 'rejected' | 'withdrawn';\n  submitted_at: string;\n  // Enhanced fields from joins\n  opportunity_title?: string;\n  company_name?: string;\n  project_title?: string;\n}\n\nexport default function BidsClient({ orgId }: { orgId: string }) {\n  const t = useTranslations('bids');\n  const [bids, setBids] = useState<DataRecord[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [filters, setFilters] = useState<Record<string, string>>({});\n  const [selectedBid, setSelectedBid] = useState<DataRecord | null>(null);\n  const [createDrawerOpen, setCreateDrawerOpen] = useState(false);\n  const [editDrawerOpen, setEditDrawerOpen] = useState(false);\n  const [viewMode, setViewMode] = useState<'grid' | 'kanban' | 'calendar' | 'list' | 'timeline' | 'dashboard'>('grid');\n\n  // Enhanced field configuration for bids data (matching database schema)\n  const fieldConfig: FieldConfig[] = [\n    {\n      key: 'id',\n      label: 'Bid ID',\n      type: 'text' as const,\n      required: false,\n      sortable: true,\n      filterable: false\n    },\n    {\n      key: 'opportunity_title',\n      label: 'Opportunity',\n      type: 'text' as const,\n      required: true,\n      sortable: true,\n      filterable: true\n    },\n    {\n      key: 'company_name',\n      label: 'Company',\n      type: 'text' as const,\n      required: true,\n      sortable: true,\n      filterable: true\n    },\n    {\n      key: 'amount',\n      label: 'Bid Amount',\n      type: 'currency' as const,\n      required: true,\n      sortable: true,\n      filterable: true\n    },\n    {\n      key: 'status',\n      label: 'Status',\n      type: 'select' as const,\n      required: true,\n      sortable: true,\n      filterable: true,\n      options: [\n        { value: 'submitted', label: 'Submitted' },\n        { value: 'under_review', label: 'Under Review' },\n        { value: 'accepted', label: 'Accepted' },\n        { value: 'rejected', label: 'Rejected' },\n        { value: 'withdrawn', label: 'Withdrawn' }\n      ]\n    },\n    {\n      key: 'submitted_at',\n      label: 'Submitted Date',\n      type: 'date' as const,\n      required: false,\n      sortable: true,\n      filterable: true\n    },\n    {\n      key: 'opportunity_id',\n      label: 'Opportunity ID',\n      type: 'text' as const,\n      required: true,\n      sortable: true,\n      filterable: true\n    },\n    {\n      key: 'company_id',\n      label: 'Company ID',\n      type: 'text' as const,\n      required: true,\n      sortable: true,\n      filterable: true\n    },\n    {\n      key: 'project_title',\n      label: 'Project',\n      type: 'text' as const,\n      required: false,\n      sortable: true,\n      filterable: true\n    }\n  ];\n\n  // Enhanced Supabase data loading function with enriched data\n  const loadBidsData = useCallback(async (activeFilters?: Record<string, string>): Promise<DataRecord[]> => {\n    try {\n      const params = new URLSearchParams();\n      if (activeFilters?.opportunity_id) params.append('opportunity_id', activeFilters.opportunity_id);\n      if (activeFilters?.company_id) params.append('company_id', activeFilters.company_id);\n      if (activeFilters?.status) params.append('status', activeFilters.status);\n      if (activeFilters?.search) params.append('search', activeFilters.search);\n\n      const responseResult = await tryCatch(async () =>\n        fetch(`/api/v1/jobs/bids?${params.toString()}`, {\n          method: 'GET',\n          headers: { 'Content-Type': 'application/json' }\n        })\n      );\n\n      if (!responseResult.success) {\n        reportError(responseResult.error);\n        throw new Error(responseResult.error.message);\n      }\n\n      const response = responseResult.data;\n      if (!response.ok) {\n        throw new Error(`Failed to fetch bids: ${response.statusText}`);\n      }\n\n      const data: BidsResponse = await response.json();\n      \n      // Enrich bids data with opportunity and company information\n      const enrichedBids = (data.bids ?? []).map((bid: unknown) => ({\n        ...bid,\n        opportunity_title: bid.opportunities?.title || 'Unknown Opportunity',\n        company_name: bid.companies?.name || 'Unknown Company',\n        project_title: bid.opportunities?.projects?.title || 'No Project'\n      }));\n\n      return enrichedBids;\n    } catch (error) {\n      console.error('Error loading bids:', error);\n      return [];\n    }\n  }, []);\n\n  // Statistics calculation\n  const bidStats = useMemo(() => {\n    const total = bids.length;\n    const byStatus = bids.reduce((acc: Record<string, number>, bid: unknown) => {\n      const status = bid.status || 'unknown';\n      acc[status] = (acc[status] || 0) + 1;\n      return acc;\n    }, {});\n\n    const totalValue = bids.reduce((sum, bid: unknown) => sum + (bid.amount || 0), 0);\n    const avgBidValue = total > 0 ? totalValue / total : 0;\n\n    const recentBids = bids.filter((bid: unknown) => {\n      const submittedDate = new Date(bid.submitted_at);\n      const weekAgo = new Date();\n      weekAgo.setDate(weekAgo.getDate() - 7);\n      return submittedDate >= weekAgo;\n    }).length;\n\n    return {\n      total,\n      byStatus,\n      totalValue,\n      avgBidValue,\n      recentBids,\n      acceptedBids: byStatus.accepted || 0,\n      pendingBids: byStatus.under_review || 0,\n      rejectedBids: byStatus.rejected || 0\n    };\n  }, [bids]);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [statusFilter, setStatusFilter] = useState('all');\n  const [typeFilter, setTypeFilter] = useState('all');\n  const [showCreateDialog, setShowCreateDialog] = useState(false);\n\n  useEffect(() => {\n    loadBids();\n  }, [orgId]);\n\n  const loadBids = async () => {\n    try {\n      setLoading(true);\n      const responseResult = await tryCatch(async () => fetch('/api/v1/jobs/bids', {\n        headers: {\n          'x-org-id': orgId,\n          'Content-Type': 'application/json',\n        },\n      }));\nif (!responseResult.success) {\n  reportError(responseResult.error);\n  throw new Error(responseResult.error.message);\n}\nconst response = responseResult.data;\n\n      if (!response.ok) {\n        throw new Error('Failed to load bids');\n      }\n\n      const data = await response.json();\n      setBids(data.items || []);\n    } catch (error) {\n      console.error('Error loading bids:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const filteredBids = bids.filter((bid: unknown) => {\n    const matchesSearch = bid.title.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         (bid.description?.toLowerCase().includes(searchTerm.toLowerCase()));\n    const matchesStatus = statusFilter === 'all' || bid.status === statusFilter;\n    const matchesType = typeFilter === 'all' || bid.type === typeFilter;\n\n    return matchesSearch && matchesStatus && matchesType;\n  });\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'draft':\n        return 'bg-secondary color-muted';\n      case 'submitted':\n        return 'bg-accent/10 color-accent';\n      case 'under_review':\n        return 'bg-warning/10 color-warning';\n      case 'accepted':\n        return 'bg-success/10 color-success';\n      case 'rejected':\n        return 'bg-destructive/10 color-destructive';\n      case 'withdrawn':\n        return 'bg-secondary/10 color-secondary-foreground';\n      default:\n        return 'bg-secondary color-muted';\n    }\n  };\n\n  const getTypeColor = (type: string) => {\n    switch (type) {\n      case 'fixed_price':\n        return 'bg-accent/10 color-accent';\n      case 'hourly':\n        return 'bg-success/10 color-success';\n      case 'milestone_based':\n        return 'bg-secondary/10 color-secondary-foreground';\n      case 'retainer':\n        return 'bg-accent/10 color-accent-foreground';\n      default:\n        return 'bg-secondary color-muted';\n    }\n  };\n\n  const createBid = async (data: Partial<Bid>) => {\n    try {\n      const responseResult = await tryCatch(async () =>\n        fetch('/api/v1/jobs/bids', {\n          method: 'POST',\n          headers: {\n            'x-org-id': orgId,\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify(data),\n        })\n      );\n      if (!responseResult.success) {\n        reportError(responseResult.error);\n        throw new Error(responseResult.error.message);\n      }\n      const response = responseResult.data;\n\n      if (!response.ok) {\n        throw new Error('Failed to create bid');\n      }\n\n      await loadBids();\n      setShowCreateDialog(false);\n    } catch (error) {\n      console.error('Error creating bid:', error);\n    }\n  };\n\n  if (loading) {\n    return (\n      <div className=\"stack-lg\">\n        <div className=\"flex justify-between items-center\">\n          <div>\n            <h1 className=\"text-heading-3 text-heading-3 color-foreground\">{translations.title}</h1>\n            <p className=\"color-muted\">{translations.subtitle}</p>\n          </div>\n          <Button onClick={() => setShowCreateDialog(true)}>\n            + Create Bid\n          </Button>\n        </div>\n\n        <div className=\"grid gap-md\">\n          {[...Array(6)].map((_, i) => (\n            <Card key={i} className=\"p-lg\">\n              <div className=\"flex items-start justify-between\">\n                <div className=\"flex-1\">\n                  <div className=\"flex items-center gap-sm mb-sm\">\n                    <div className=\"h-5 w-5 bg-secondary rounded\" />\n                    <Skeleton className=\"h-5 w-48\" />\n                  </div>\n                  <Skeleton className=\"h-4 w-full mb-sm\" />\n                  <Skeleton className=\"h-4 w-3/4\" />\n                </div>\n                <div className=\"flex gap-sm\">\n                  <Skeleton className=\"h-6 w-16\" />\n                  <Skeleton className=\"h-6 w-20\" />\n                </div>\n              </div>\n            </Card>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"stack-lg\">\n      <div className=\"flex justify-between items-center\">\n        <div>\n          <h1 className=\"text-heading-3 text-heading-3 color-foreground\">{translations.title}</h1>\n          <p className=\"color-muted\">{translations.subtitle}</p>\n        </div>\n        <Button onClick={() => setShowCreateDialog(true)}>\n          + Create Bid\n        </Button>\n      </div>\n\n      <div className=\"flex gap-md mb-lg\">\n        <div className=\"flex-1\">\n          <UnifiedInput             placeholder=\"Search bids...\"\n            value={searchTerm}\n            onChange={(e: React.ChangeEvent<HTMLInputElement>) => setSearchTerm(e.target.value)}\n            className=\"w-full\"\n          />\n        </div>\n        <select\n          value={statusFilter}\n          onChange={(e: React.ChangeEvent<HTMLSelectElement>) => setStatusFilter(e.target.value)}\n          className=\" px-md py-sm border border-border rounded-md bg-background\"\n        >\n          {STATUS_OPTIONS.map((option: unknown) => (\n            <option key={option.value} value={option.value}>\n              {option.label}\n            </option>\n          ))}\n        </select>\n        <select\n          value={typeFilter}\n          onChange={(e: React.ChangeEvent<HTMLSelectElement>) => setTypeFilter(e.target.value)}\n          className=\" px-md py-sm border border-border rounded-md bg-background\"\n        >\n          {TYPE_OPTIONS.map((option: unknown) => (\n            <option key={option.value} value={option.value}>\n              {option.label}\n            </option>\n          ))}\n        </select>\n      </div>\n\n      {filteredBids.length === 0 ? (\n        <Card className=\"p-2xl text-center\">\n          <div className=\"h-12 w-12 bg-secondary rounded mx-auto mb-md\" />\n          <h3 className=\"text-body form-label color-foreground mb-sm\">No bids found</h3>\n          <p className=\"color-muted mb-md\">\n            {searchTerm || statusFilter !== 'all' || typeFilter !== 'all'\n              ? 'Try adjusting your search or filters to find bids.'\n              : 'Get started by creating your first bid.'}\n          </p>\n          <Button onClick={() => setShowCreateDialog(true)}>\n            + Create Bid\n          </Button>\n        </Card>\n      ) : (\n        <div className=\"grid gap-md\">\n          {filteredBids.map((bid: unknown) => (\n            <Card key={bid.id} className=\"p-lg hover:shadow-elevated transition-shadow\">\n              <div className=\"flex items-start justify-between\">\n                <div className=\"flex-1\">\n                  <div className=\"flex items-center gap-sm mb-sm\">\n                    <div className=\"h-5 w-5 bg-secondary rounded\" />\n                    <h3 className=\"text-body text-heading-4 color-foreground\">{bid.title}</h3>\n                    <Badge className={getStatusColor(bid.status)}>\n                      {bid.status}\n                    </Badge>\n                    <Badge className={getTypeColor(bid.type)}>\n                      {bid.type.replace('_', ' ')}\n                    </Badge>\n                  </div>\n\n                  {bid.description && (\n                    <p className=\"color-muted mb-md line-clamp-2\">{bid.description}</p>\n                  )}\n\n                  <div className=\"grid grid-cols-2 md:grid-cols-3 gap-md text-body-sm mb-md\">\n                    <div className=\"flex items-center gap-sm\">\n                      <div className=\"h-4 w-4 bg-secondary rounded\" />\n                      <span className=\"form-label\">${bid.amount.toLocaleString()} {bid.currency}</span>\n                    </div>\n                    {bid.estimatedDuration && (\n                      <div className=\"flex items-center gap-sm\">\n                        <div className=\"h-4 w-4 bg-secondary rounded\" />\n                        <span>{bid.estimatedDuration}</span>\n                      </div>\n                    )}\n                    {bid.responseDeadline && (\n                      <div className=\"flex items-center gap-sm\">\n                        <div className=\"h-4 w-4 bg-secondary rounded\" />\n                        <span>{new Date(bid.responseDeadline).toLocaleDateString()}</span>\n                      </div>\n                    )}\n                  </div>\n\n                  <div className=\"flex items-center justify-between pt-md border-t\">\n                    <div className=\"flex items-center gap-md text-body-sm color-muted\">\n                      {bid.createdAt && (\n                        <span>Created {new Date(bid.createdAt).toLocaleDateString()}</span>\n                      )}\n                      {bid.submittedAt && (\n                        <span>Submitted {new Date(bid.submittedAt).toLocaleDateString()}</span>\n                      )}\n                    </div>\n                    <div className=\"flex gap-sm\">\n                      <Button>\n                        View\n                      </Button>\n                      <Button>\n                        Edit\n                      </Button>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </Card>\n          ))}\n        </div>\n      )}\n\n      {/* Create Dialog */}\n      {showCreateDialog && (\n        <div className=\"fixed inset-0 bg-foreground/30 backdrop-blur-sm flex items-center justify-center p-md z-50\">\n          <div className=\"bg-background rounded-lg p-lg w-full max-w-md\">\n            <h3 className=\"text-body text-heading-4 mb-md\">Create New Bid</h3>\n            <form onSubmit={(e: unknown) => {\n              e.preventDefault();\n              const formData = new FormData(e.currentTarget);\n              createBid({\n                title: formData.get('title') as string,\n                description: formData.get('description') as string,\n                type: formData.get('type') as unknown,\n                status: 'draft',\n                amount: Number(formData.get('amount')),\n                currency: 'USD',\n                opportunityId: formData.get('opportunityId') as string,\n              });\n            }}>\n              <div className=\"stack-md\">\n                <div>\n                  <label className=\"block text-body-sm form-label mb-xs\">Title</label>\n                  <UnifiedInput name=\"title\" required />\n                </div>\n                <div>\n                  <label className=\"block text-body-sm form-label mb-xs\">Description</label>\n                  <textarea name=\"description\" className=\"w-full p-sm border border-border rounded bg-background\" rows={3} />\n                </div>\n                <div>\n                  <label className=\"block text-body-sm form-label mb-xs\">Type</label>\n                  <select name=\"type\" className=\"w-full p-sm border border-border rounded bg-background\" required>\n                    {TYPE_OPTIONS.slice(1).map((option: unknown) => (\n                      <option key={option.value} value={option.value}>\n                        {option.label}\n                      </option>\n                    ))}\n                  </select>\n                </div>\n                <div>\n                  <label className=\"block text-body-sm form-label mb-xs\">Amount</label>\n                  <UnifiedInput name=\"amount\" type=\"number\" required />\n                </div>\n                <div>\n                  <label className=\"block text-body-sm form-label mb-xs\">Opportunity ID</label>\n                  <UnifiedInput name=\"opportunityId\" required />\n                </div>\n              </div>\n              <div className=\"flex gap-sm mt-lg\">\n                <Button type=\"submit\">Create</Button>\n                <Button type=\"button\" variant=\"outline\" onClick={() => setShowCreateDialog(false)}>\n                  Cancel\n                </Button>\n              </div>\n            </form>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ghxstship/apps/web/app/(app)/(shell)/jobs/bids/types.ts","messages":[{"ruleId":"no-restricted-syntax","severity":2,"message":"Do not create shadow components. Import and re-export from @ghxstship/ui if needed","line":4,"column":1,"nodeType":"ExportNamedDeclaration","messageId":"restrictedSyntax","endLine":4,"endColumn":94},{"ruleId":"no-restricted-syntax","severity":2,"message":"Do not create shadow components. Import and re-export from @ghxstship/ui if needed","line":5,"column":1,"nodeType":"ExportNamedDeclaration","messageId":"restrictedSyntax","endLine":5,"endColumn":81},{"ruleId":"no-restricted-syntax","severity":2,"message":"Do not create shadow components. Import and re-export from @ghxstship/ui if needed","line":6,"column":1,"nodeType":"ExportNamedDeclaration","messageId":"restrictedSyntax","endLine":6,"endColumn":65},{"ruleId":"no-restricted-syntax","severity":2,"message":"Do not create shadow components. Import and re-export from @ghxstship/ui if needed","line":9,"column":1,"nodeType":"ExportNamedDeclaration","messageId":"restrictedSyntax","endLine":27,"endColumn":2},{"ruleId":"no-restricted-syntax","severity":2,"message":"Do not create shadow components. Import and re-export from @ghxstship/ui if needed","line":30,"column":1,"nodeType":"ExportNamedDeclaration","messageId":"restrictedSyntax","endLine":35,"endColumn":2},{"ruleId":"no-restricted-syntax","severity":2,"message":"Do not create shadow components. Import and re-export from @ghxstship/ui if needed","line":38,"column":1,"nodeType":"ExportNamedDeclaration","messageId":"restrictedSyntax","endLine":48,"endColumn":2},{"ruleId":"no-restricted-syntax","severity":2,"message":"Do not create shadow components. Import and re-export from @ghxstship/ui if needed","line":50,"column":1,"nodeType":"ExportNamedDeclaration","messageId":"restrictedSyntax","endLine":53,"endColumn":2},{"ruleId":"no-restricted-syntax","severity":2,"message":"Do not create shadow components. Import and re-export from @ghxstship/ui if needed","line":56,"column":1,"nodeType":"ExportNamedDeclaration","messageId":"restrictedSyntax","endLine":67,"endColumn":2},{"ruleId":"no-restricted-syntax","severity":2,"message":"Do not create shadow components. Import and re-export from @ghxstship/ui if needed","line":70,"column":1,"nodeType":"ExportNamedDeclaration","messageId":"restrictedSyntax","endLine":82,"endColumn":2},{"ruleId":"no-restricted-syntax","severity":2,"message":"Do not create shadow components. Import and re-export from @ghxstship/ui if needed","line":85,"column":1,"nodeType":"ExportNamedDeclaration","messageId":"restrictedSyntax","endLine":92,"endColumn":2},{"ruleId":"no-restricted-syntax","severity":2,"message":"Do not create shadow components. Import and re-export from @ghxstship/ui if needed","line":95,"column":1,"nodeType":"ExportNamedDeclaration","messageId":"restrictedSyntax","endLine":101,"endColumn":2},{"ruleId":"no-restricted-syntax","severity":2,"message":"Do not create shadow components. Import and re-export from @ghxstship/ui if needed","line":104,"column":1,"nodeType":"ExportNamedDeclaration","messageId":"restrictedSyntax","endLine":113,"endColumn":2},{"ruleId":"no-restricted-syntax","severity":2,"message":"Do not create shadow components. Import and re-export from @ghxstship/ui if needed","line":116,"column":1,"nodeType":"ExportNamedDeclaration","messageId":"restrictedSyntax","endLine":127,"endColumn":2},{"ruleId":"no-restricted-syntax","severity":2,"message":"Do not create shadow components. Import and re-export from @ghxstship/ui if needed","line":130,"column":1,"nodeType":"ExportNamedDeclaration","messageId":"restrictedSyntax","endLine":138,"endColumn":2},{"ruleId":"no-restricted-syntax","severity":2,"message":"Do not create shadow components. Import and re-export from @ghxstship/ui if needed","line":141,"column":1,"nodeType":"ExportNamedDeclaration","messageId":"restrictedSyntax","endLine":149,"endColumn":2}],"suppressedMessages":[],"errorCount":15,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { type DataRecord } from '@ghxstship/ui';\n\n// Core bid types\nexport type BidStatus = 'submitted' | 'under_review' | 'accepted' | 'rejected' | 'withdrawn';\nexport type BidType = 'fixed_price' | 'hourly' | 'milestone_based' | 'retainer';\nexport type BidCurrency = 'USD' | 'EUR' | 'GBP' | 'CAD' | 'AUD';\n\n// Main bid interface\nexport interface JobBid extends DataRecord {\n  id: string;\n  opportunity_id: string;\n  company_id: string;\n  amount: number;\n  status: BidStatus;\n  submitted_at: string;\n  // Enhanced fields from joins\n  opportunity_title?: string;\n  company_name?: string;\n  project_title?: string;\n  project_id?: string;\n  organization_name?: string;\n  client_contact?: string;\n  response_deadline?: string;\n  estimated_duration?: string;\n  proposal_document_url?: string;\n  notes?: string;\n}\n\n// API response types\nexport interface BidsResponse {\n  bids: JobBid[];\n  total?: number;\n  page?: number;\n  limit?: number;\n}\n\n// Form data types\nexport interface CreateBidData {\n  opportunity_id: string;\n  company_id: string;\n  amount: number;\n  currency?: BidCurrency;\n  type?: BidType;\n  estimated_duration?: string;\n  proposal_document_url?: string;\n  notes?: string;\n  response_deadline?: string;\n}\n\nexport interface UpdateBidData extends Partial<CreateBidData> {\n  id: string;\n  status?: BidStatus;\n}\n\n// Filter and search types\nexport interface BidFilters {\n  status?: BidStatus;\n  opportunity_id?: string;\n  company_id?: string;\n  type?: BidType;\n  currency?: BidCurrency;\n  amount_min?: number;\n  amount_max?: number;\n  search?: string;\n  date_from?: string;\n  date_to?: string;\n}\n\n// Statistics types\nexport interface BidStats {\n  total: number;\n  byStatus: Record<BidStatus, number>;\n  byType: Record<BidType, number>;\n  totalValue: number;\n  averageBidValue: number;\n  winRate: number;\n  recentBids: number;\n  activeBids: number;\n  pendingBids: number;\n  acceptedBids: number;\n  rejectedBids: number;\n}\n\n// View configuration types\nexport interface BidViewConfig {\n  showAmounts: boolean;\n  groupByStatus: boolean;\n  showOpportunityDetails: boolean;\n  defaultSort: 'submitted_at' | 'amount' | 'status' | 'opportunity_title';\n  defaultView: 'grid' | 'kanban' | 'calendar' | 'list' | 'timeline' | 'dashboard';\n  currencyDisplay: BidCurrency;\n}\n\n// Drawer types\nexport interface BidDrawerProps {\n  bid?: JobBid;\n  mode: 'create' | 'edit' | 'view';\n  onSave?: (data: CreateBidData | UpdateBidData) => Promise<void>;\n  onClose: () => void;\n  open: boolean;\n}\n\n// Service types\nexport interface BidService {\n  getBids: (filters?: BidFilters) => Promise<BidsResponse>;\n  getBid: (id: string) => Promise<JobBid>;\n  createBid: (data: CreateBidData) => Promise<JobBid>;\n  updateBid: (data: UpdateBidData) => Promise<JobBid>;\n  deleteBid: (id: string) => Promise<void>;\n  getBidStats: () => Promise<BidStats>;\n  withdrawBid: (id: string) => Promise<JobBid>;\n  submitBid: (id: string) => Promise<JobBid>;\n}\n\n// Opportunity integration types\nexport interface OpportunityInfo {\n  id: string;\n  title: string;\n  description?: string;\n  budget_min?: number;\n  budget_max?: number;\n  currency?: BidCurrency;\n  deadline?: string;\n  client_name?: string;\n  project_title?: string;\n  requirements?: string[];\n}\n\n// Company integration types\nexport interface CompanyInfo {\n  id: string;\n  name: string;\n  type?: string;\n  contact_email?: string;\n  contact_phone?: string;\n  website?: string;\n  capabilities?: string[];\n}\n\n// Bid evaluation types\nexport interface BidEvaluation {\n  bid_id: string;\n  score?: number;\n  criteria_scores?: Record<string, number>;\n  evaluator_notes?: string;\n  recommendation?: 'accept' | 'reject' | 'negotiate';\n  evaluated_at?: string;\n  evaluated_by?: string;\n}\n\n// Export all types\nexport type {\n  DataRecord\n} from '@ghxstship/ui';\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ghxstship/apps/web/app/(app)/(shell)/jobs/compliance/ComplianceClient.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadCompliance'. Either include it or remove the dependency array.","line":98,"column":6,"nodeType":"ArrayExpression","endLine":98,"endColumn":13,"suggestions":[{"desc":"Update the dependencies array to be: [loadCompliance, orgId]","fix":{"range":[2971,2978],"text":"[loadCompliance, orgId]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { User, FileText, Settings, Award, Calendar, TrendingUp, Activity, Clock, Plus, Search, Play, Trash2 } from \"lucide-react\";\nimport { useState, useEffect } from 'react';\nimport { User } from '@supabase/supabase-js';\nimport { createBrowserClient } from '@ghxstship/auth';\nimport { Card, Button, Badge, UnifiedInput, Skeleton } from '@ghxstship/ui';\nimport {\n  MagnifyingGlassIcon,\n  PlusIcon,\n  EyeIcon,\n  PencilIcon,\n  DocumentTextIcon,\n  ClockIcon,\n  CheckCircleIcon,\n  XCircleIcon,\n  ExclamationTriangleIcon,\n  CalendarIcon,\n  BuildingOfficeIcon,\n  ShieldCheckIcon,\n  DocumentCheckIcon,\n  ArrowDownTrayIcon,\n} from '@heroicons/react/24/outline';\n\ninterface ComplianceClientProps {\n  user: User;\n  orgId: string;\n  translations: {\n    title: string;\n    subtitle: string;\n  };\n}\n\ninterface JobCompliance {\n  id: string;\n  job_id: string;\n  kind: 'regulatory' | 'safety' | 'quality' | 'security' | 'environmental' | 'legal' | 'financial';\n  title: string;\n  description: string;\n  status: 'pending' | 'in_progress' | 'compliant' | 'non_compliant' | 'expired' | 'waived';\n  priority: 'low' | 'medium' | 'high' | 'critical';\n  due_at?: string;\n  completed_at?: string;\n  evidence_url?: string;\n  notes?: string;\n  requirements?: string[];\n  responsible_party?: string;\n  reviewer?: string;\n  created_at: string;\n  updated_at: string;\n  organization_id: string;\n  // Related data\n  job_title?: string;\n}\n\nconst STATUS_OPTIONS = [\n  { value: 'all', label: 'All Statuses' },\n  { value: 'pending', label: 'Pending' },\n  { value: 'in_progress', label: 'In Progress' },\n  { value: 'compliant', label: 'Compliant' },\n  { value: 'non_compliant', label: 'Non-Compliant' },\n  { value: 'expired', label: 'Expired' },\n  { value: 'waived', label: 'Waived' },\n];\n\nconst KIND_OPTIONS = [\n  { value: 'all', label: 'All Types' },\n  { value: 'regulatory', label: 'Regulatory' },\n  { value: 'safety', label: 'Safety' },\n  { value: 'quality', label: 'Quality' },\n  { value: 'security', label: 'Security' },\n  { value: 'environmental', label: 'Environmental' },\n  { value: 'legal', label: 'Legal' },\n  { value: 'financial', label: 'Financial' },\n];\n\nconst PRIORITY_OPTIONS = [\n  { value: 'all', label: 'All Priorities' },\n  { value: 'low', label: 'Low' },\n  { value: 'medium', label: 'Medium' },\n  { value: 'high', label: 'High' },\n  { value: 'critical', label: 'Critical' },\n];\n\nexport function ComplianceClient({ user, orgId, translations }: ComplianceClientProps) {\n  const [compliance, setCompliance] = useState<JobCompliance[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [statusFilter, setStatusFilter] = useState('all');\n  const [kindFilter, setKindFilter] = useState('all');\n  const [priorityFilter, setPriorityFilter] = useState('all');\n  const [showCreateDialog, setShowCreateDialog] = useState(false);\n\n  const supabase = createBrowserClient();\n\n  useEffect(() => {\n    loadCompliance();\n  }, [orgId]);\n\n  const loadCompliance = async () => {\n    try {\n      setLoading(true);\n      \n      // Load compliance items with related job data\n      const { data, error } = await supabase\n        .from('job_compliance')\n        .select(`\n          *,\n          jobs (\n            title\n          )\n        `)\n        .eq('organization_id', orgId)\n        .order('created_at', { ascending: false });\n\n      if (error) throw error;\n\n      // Transform the data to flatten relationships\n      const transformedCompliance = (data || []).map((item: unknown) => ({\n        ...item,\n        job_title: item.jobs?.title || 'Unknown Job',\n      }));\n\n      setCompliance(transformedCompliance);\n    } catch (error) {\n      console.error('Error loading compliance:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const filteredCompliance = compliance.filter((item: unknown) => {\n    const matchesSearch = item.title.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         item.description.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         (item.job_title && item.job_title.toLowerCase().includes(searchTerm.toLowerCase())) ||\n                         (item.notes && item.notes.toLowerCase().includes(searchTerm.toLowerCase()));\n    const matchesStatus = statusFilter === 'all' || item.status === statusFilter;\n    const matchesKind = kindFilter === 'all' || item.kind === kindFilter;\n    const matchesPriority = priorityFilter === 'all' || item.priority === priorityFilter;\n\n    return matchesSearch && matchesStatus && matchesKind && matchesPriority;\n  });\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'pending':\n        return 'bg-warning/10 color-warning';\n      case 'in_progress':\n        return 'bg-accent/10 color-accent';\n      case 'compliant':\n        return 'bg-success/10 color-success';\n      case 'non_compliant':\n        return 'bg-destructive/10 color-destructive';\n      case 'expired':\n        return 'bg-warning/10 color-warning';\n      case 'waived':\n        return 'bg-secondary color-muted';\n      default:\n        return 'bg-secondary color-muted';\n    }\n  };\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case 'pending':\n        return ClockIcon;\n      case 'in_progress':\n        return DocumentTextIcon;\n      case 'compliant':\n        return CheckCircleIcon;\n      case 'non_compliant':\n        return XCircleIcon;\n      case 'expired':\n        return ExclamationTriangleIcon;\n      case 'waived':\n        return DocumentCheckIcon;\n      default:\n        return ClockIcon;\n    }\n  };\n\n  const getPriorityColor = (priority: string) => {\n    switch (priority) {\n      case 'low':\n        return 'bg-secondary color-muted';\n      case 'medium':\n        return 'bg-accent/10 color-accent';\n      case 'high':\n        return 'bg-warning/10 color-warning';\n      case 'critical':\n        return 'bg-destructive/10 color-destructive';\n      default:\n        return 'bg-secondary color-muted';\n    }\n  };\n\n  const getKindColor = (kind: string) => {\n    switch (kind) {\n      case 'regulatory':\n        return 'bg-secondary/10 color-secondary';\n      case 'safety':\n        return 'bg-destructive/10 color-destructive';\n      case 'quality':\n        return 'bg-accent/10 color-accent';\n      case 'security':\n        return 'bg-accent/10 color-accent';\n      case 'environmental':\n        return 'bg-success/10 color-success';\n      case 'legal':\n        return 'bg-warning/10 color-warning';\n      case 'financial':\n        return 'bg-warning/10 color-warning';\n      default:\n        return 'bg-secondary color-muted';\n    }\n  };\n\n  const isOverdue = (dueDate?: string) => {\n    if (!dueDate) return false;\n    return new Date(dueDate) < new Date();\n  };\n\n  const isDueSoon = (dueDate?: string) => {\n    if (!dueDate) return false;\n    const due = new Date(dueDate);\n    const now = new Date();\n    const diffDays = Math.ceil((due.getTime() - now.getTime()) / (1000 * 60 * 60 * 24));\n    return diffDays <= 7 && diffDays >= 0;\n  };\n\n  return (\n    <div className=\"stack-lg\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-heading-3 text-heading-3 color-foreground\">{translations.title}</h1>\n          <p className=\"text-body-sm color-foreground/70 mt-xs\">{translations.subtitle}</p>\n        </div>\n        <Button onClick={() => setShowCreateDialog(true)}>\n          <PlusIcon className=\"h-4 w-4 mr-sm\" />\n          Add Compliance Item\n        </Button>\n      </div>\n\n      {/* Filters */}\n      <Card className=\"p-md\">\n        <div className=\"flex flex-col sm:flex-row gap-md\">\n          <div className=\"flex-1\">\n            <UnifiedInput               placeholder=\"Search compliance items...\"\n              value={searchTerm}\n              onChange={(e: React.ChangeEvent<HTMLInputElement>) => setSearchTerm(e.target.value)}\n              className=\"w-full\"\n            />\n          </div>\n          <div className=\"flex gap-sm\">\n            <select\n              value={statusFilter}\n              onChange={(e: React.ChangeEvent<HTMLSelectElement>) => setStatusFilter(e.target.value)}\n              className=\" px-md py-sm border border-border rounded-md bg-background\"\n            >\n              {STATUS_OPTIONS.map((option: unknown) => (\n                <option key={option.value} value={option.value}>\n                  {option.label}\n                </option>\n              ))}\n            </select>\n            <select\n              value={kindFilter}\n              onChange={(e: React.ChangeEvent<HTMLSelectElement>) => setKindFilter(e.target.value)}\n              className=\" px-md py-sm border border-border rounded-md bg-background\"\n            >\n              {KIND_OPTIONS.map((option: unknown) => (\n                <option key={option.value} value={option.value}>\n                  {option.label}\n                </option>\n              ))}\n            </select>\n            <select\n              value={priorityFilter}\n              onChange={(e: React.ChangeEvent<HTMLSelectElement>) => setPriorityFilter(e.target.value)}\n              className=\" px-md py-sm border border-border rounded-md bg-background\"\n            >\n              {PRIORITY_OPTIONS.map((option: unknown) => (\n                <option key={option.value} value={option.value}>\n                  {option.label}\n                </option>\n              ))}\n            </select>\n          </div>\n        </div>\n      </Card>\n\n      {/* Stats */}\n      <div className=\"grid grid-cols-1 md:grid-cols-5 gap-md\">\n        <Card className=\"p-md\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-body-sm form-label color-foreground/70\">Total Items</p>\n              <p className=\"text-heading-3 text-heading-3 color-foreground\">{compliance.length}</p>\n            </div>\n            <ShieldCheckIcon className=\"h-8 w-8 color-accent\" />\n          </div>\n        </Card>\n        <Card className=\"p-md\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-body-sm form-label color-foreground/70\">Compliant</p>\n              <p className=\"text-heading-3 text-heading-3 color-success\">\n                {compliance.filter(c => c.status === 'compliant').length}\n              </p>\n            </div>\n            <CheckCircleIcon className=\"h-8 w-8 color-success\" />\n          </div>\n        </Card>\n        <Card className=\"p-md\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-body-sm form-label color-foreground/70\">Non-Compliant</p>\n              <p className=\"text-heading-3 text-heading-3 color-destructive\">\n                {compliance.filter(c => c.status === 'non_compliant').length}\n              </p>\n            </div>\n            <XCircleIcon className=\"h-8 w-8 color-destructive\" />\n          </div>\n        </Card>\n        <Card className=\"p-md\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-body-sm form-label color-foreground/70\">Overdue</p>\n              <p className=\"text-heading-3 text-heading-3 color-warning\">\n                {compliance.filter(c => isOverdue(c.due_at)).length}\n              </p>\n            </div>\n            <ExclamationTriangleIcon className=\"h-8 w-8 color-warning\" />\n          </div>\n        </Card>\n        <Card className=\"p-md\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-body-sm form-label color-foreground/70\">Critical</p>\n              <p className=\"text-heading-3 text-heading-3 color-secondary\">\n                {compliance.filter(c => c.priority === 'critical').length}\n              </p>\n            </div>\n            <ExclamationTriangleIcon className=\"h-8 w-8 color-secondary\" />\n          </div>\n        </Card>\n      </div>\n\n      {/* Compliance List */}\n      <div className=\"stack-md\">\n        {loading ? (\n          Array.from({ length: 5 }).map((_, i) => (\n            <Card key={i} className=\"p-lg\">\n              <div className=\"flex items-start justify-between\">\n                <div className=\"flex-1\">\n                  <Skeleton className=\"h-5 w-64 mb-sm\" />\n                  <Skeleton className=\"h-4 w-32 mb-sm\" />\n                  <Skeleton className=\"h-4 w-full mb-sm\" />\n                  <Skeleton className=\"h-4 w-3/4\" />\n                </div>\n                <div className=\"flex gap-sm\">\n                  <Skeleton className=\"h-6 w-16\" />\n                  <Skeleton className=\"h-6 w-20\" />\n                </div>\n              </div>\n            </Card>\n          ))\n        ) : filteredCompliance.length > 0 ? (\n          filteredCompliance.map((item: unknown) => {\n            const StatusIcon = getStatusIcon(item.status);\n            const isLate = isOverdue(item.due_at);\n            const isDue = isDueSoon(item.due_at);\n\n            return (\n              <Card key={item.id} className={`p-lg hover:shadow-elevated transition-shadow ${isLate ? 'border-destructive/20 bg-destructive/5' : isDue ? 'border-warning/20 bg-warning/5' : ''}`}>\n                <div className=\"flex items-start justify-between\">\n                  <div className=\"flex-1\">\n                    <div className=\"flex items-start justify-between mb-sm\">\n                      <div>\n                        <h3 className=\"text-body text-heading-4 color-foreground mb-xs flex items-center gap-sm\">\n                          <StatusIcon className=\"h-5 w-5 color-foreground/60\" />\n                          {item.title}\n                          {(isDue || isLate) && (\n                            <ExclamationTriangleIcon className={`h-4 w-4 ${isLate ? 'color-destructive' : 'color-warning'}`} />\n                          )}\n                        </h3>\n                        <div className=\"flex items-center gap-sm text-body-sm color-foreground/70\">\n                          <BuildingOfficeIcon className=\"h-4 w-4\" />\n                          <span>{item.job_title}</span>\n                          {item.responsible_party && (\n                            <>\n                              <span>•</span>\n                              <span>Responsible: {item.responsible_party}</span>\n                            </>\n                          )}\n                        </div>\n                      </div>\n                      <div className=\"flex gap-sm\">\n                        <Badge className={getStatusColor(item.status)}>\n                          {item.status.replace('_', ' ')}\n                        </Badge>\n                        <Badge className={getKindColor(item.kind)}>\n                          {item.kind}\n                        </Badge>\n                        <Badge className={getPriorityColor(item.priority)}>\n                          {item.priority}\n                        </Badge>\n                      </div>\n                    </div>\n\n                    <p className=\"text-body-sm color-foreground/80 mb-sm line-clamp-2\">\n                      {item.description}\n                    </p>\n\n                    <div className=\"flex items-center gap-lg text-body-sm color-foreground/70 mb-sm\">\n                      {item.due_at && (\n                        <div className={`flex items-center gap-xs ${isLate ? 'color-destructive' : isDue ? 'color-warning' : ''}`}>\n                          <CalendarIcon className=\"h-4 w-4\" />\n                          <span>\n                            {isLate ? 'Overdue: ' : 'Due: '}\n                            {new Date(item.due_at).toLocaleDateString()}\n                          </span>\n                        </div>\n                      )}\n                      {item.completed_at && (\n                        <div className=\"flex items-center gap-xs color-success\">\n                          <CheckCircleIcon className=\"h-4 w-4\" />\n                          <span>Completed: {new Date(item.completed_at).toLocaleDateString()}</span>\n                        </div>\n                      )}\n                      {item.reviewer && (\n                        <div className=\"flex items-center gap-xs\">\n                          <span>Reviewer: {item.reviewer}</span>\n                        </div>\n                      )}\n                    </div>\n\n                    {item.requirements && item.requirements.length > 0 && (\n                      <div className=\"mb-sm\">\n                        <span className=\"text-body-sm form-label color-foreground/70 mb-xs block\">Requirements:</span>\n                        <div className=\"stack-md\">\n                          {item.requirements.slice(0, 3).map((req, index) => (\n                            <div key={index} className=\"text-body-sm color-foreground/70 flex items-start gap-sm\">\n                              <span className=\"color-foreground/40\">•</span>\n                              <span>{req}</span>\n                            </div>\n                          ))}\n                          {item.requirements.length > 3 && (\n                            <div className=\"text-body-sm color-foreground/50\">\n                              +{item.requirements.length - 3} more requirements\n                            </div>\n                          )}\n                        </div>\n                      </div>\n                    )}\n\n                    {item.notes && (\n                      <div className=\"mt-sm p-sm bg-accent rounded-md\">\n                        <p className=\"text-body-sm color-foreground/70\">\n                          <strong>Notes:</strong> {item.notes}\n                        </p>\n                      </div>\n                    )}\n                  </div>\n                </div>\n\n                <div className=\"flex items-center justify-between mt-md pt-md border-t border-border\">\n                  <div className=\"text-body-sm color-foreground/50\">\n                    Created: {new Date(item.created_at).toLocaleDateString()}\n                    {item.updated_at !== item.created_at && (\n                      <span> • Updated: {new Date(item.updated_at).toLocaleDateString()}</span>\n                    )}\n                  </div>\n                  <div className=\"flex gap-sm\">\n                    <Button>\n                      <EyeIcon className=\"h-4 w-4 mr-xs\" />\n                      View\n                    </Button>\n                    <Button>\n                      <PencilIcon className=\"h-4 w-4 mr-xs\" />\n                      Edit\n                    </Button>\n                    {item.evidence_url && (\n                      <Button>\n                        <ArrowDownTrayIcon className=\"h-4 w-4 mr-xs\" />\n                        Evidence\n                      </Button>\n                    )}\n                    <Button>\n                      <DocumentCheckIcon className=\"h-4 w-4 mr-xs\" />\n                      Audit\n                    </Button>\n                  </div>\n                </div>\n              </Card>\n            );\n          })\n        ) : (\n          <Card className=\"p-2xl text-center\">\n            <ShieldCheckIcon className=\"h-12 w-12 color-foreground/30 mx-auto mb-md\" />\n            <h3 className=\"text-body form-label color-foreground mb-sm\">No compliance items found</h3>\n            <p className=\"text-body-sm color-foreground/70 mb-md\">\n              {searchTerm || statusFilter !== 'all' || kindFilter !== 'all' || priorityFilter !== 'all'\n                ? 'Try adjusting your filters or search terms.'\n                : 'Get started by adding your first compliance requirement.'}\n            </p>\n            <Button onClick={() => setShowCreateDialog(true)}>\n              <PlusIcon className=\"h-4 w-4 mr-sm\" />\n              Add Compliance Item\n            </Button>\n          </Card>\n        )}\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ghxstship/apps/web/app/(app)/(shell)/jobs/compliance/types.ts","messages":[{"ruleId":"no-restricted-syntax","severity":2,"message":"Do not create shadow components. Import and re-export from @ghxstship/ui if needed","line":4,"column":1,"nodeType":"ExportNamedDeclaration","messageId":"restrictedSyntax","endLine":4,"endColumn":82},{"ruleId":"no-restricted-syntax","severity":2,"message":"Do not create shadow components. Import and re-export from @ghxstship/ui if needed","line":5,"column":1,"nodeType":"ExportNamedDeclaration","messageId":"restrictedSyntax","endLine":5,"endColumn":121},{"ruleId":"no-restricted-syntax","severity":2,"message":"Do not create shadow components. Import and re-export from @ghxstship/ui if needed","line":6,"column":1,"nodeType":"ExportNamedDeclaration","messageId":"restrictedSyntax","endLine":6,"endColumn":73},{"ruleId":"no-restricted-syntax","severity":2,"message":"Do not create shadow components. Import and re-export from @ghxstship/ui if needed","line":7,"column":1,"nodeType":"ExportNamedDeclaration","messageId":"restrictedSyntax","endLine":7,"endColumn":74},{"ruleId":"no-restricted-syntax","severity":2,"message":"Do not create shadow components. Import and re-export from @ghxstship/ui if needed","line":10,"column":1,"nodeType":"ExportNamedDeclaration","messageId":"restrictedSyntax","endLine":32,"endColumn":2},{"ruleId":"no-restricted-syntax","severity":2,"message":"Do not create shadow components. Import and re-export from @ghxstship/ui if needed","line":35,"column":1,"nodeType":"ExportNamedDeclaration","messageId":"restrictedSyntax","endLine":40,"endColumn":2},{"ruleId":"no-restricted-syntax","severity":2,"message":"Do not create shadow components. Import and re-export from @ghxstship/ui if needed","line":43,"column":1,"nodeType":"ExportNamedDeclaration","messageId":"restrictedSyntax","endLine":54,"endColumn":2},{"ruleId":"no-restricted-syntax","severity":2,"message":"Do not create shadow components. Import and re-export from @ghxstship/ui if needed","line":56,"column":1,"nodeType":"ExportNamedDeclaration","messageId":"restrictedSyntax","endLine":62,"endColumn":2},{"ruleId":"no-restricted-syntax","severity":2,"message":"Do not create shadow components. Import and re-export from @ghxstship/ui if needed","line":65,"column":1,"nodeType":"ExportNamedDeclaration","messageId":"restrictedSyntax","endLine":76,"endColumn":2},{"ruleId":"no-restricted-syntax","severity":2,"message":"Do not create shadow components. Import and re-export from @ghxstship/ui if needed","line":79,"column":1,"nodeType":"ExportNamedDeclaration","messageId":"restrictedSyntax","endLine":90,"endColumn":2},{"ruleId":"no-restricted-syntax","severity":2,"message":"Do not create shadow components. Import and re-export from @ghxstship/ui if needed","line":93,"column":1,"nodeType":"ExportNamedDeclaration","messageId":"restrictedSyntax","endLine":101,"endColumn":2},{"ruleId":"no-restricted-syntax","severity":2,"message":"Do not create shadow components. Import and re-export from @ghxstship/ui if needed","line":104,"column":1,"nodeType":"ExportNamedDeclaration","messageId":"restrictedSyntax","endLine":110,"endColumn":2},{"ruleId":"no-restricted-syntax","severity":2,"message":"Do not create shadow components. Import and re-export from @ghxstship/ui if needed","line":113,"column":1,"nodeType":"ExportNamedDeclaration","messageId":"restrictedSyntax","endLine":123,"endColumn":2},{"ruleId":"no-restricted-syntax","severity":2,"message":"Do not create shadow components. Import and re-export from @ghxstship/ui if needed","line":126,"column":1,"nodeType":"ExportNamedDeclaration","messageId":"restrictedSyntax","endLine":137,"endColumn":2},{"ruleId":"no-restricted-syntax","severity":2,"message":"Do not create shadow components. Import and re-export from @ghxstship/ui if needed","line":140,"column":1,"nodeType":"ExportNamedDeclaration","messageId":"restrictedSyntax","endLine":148,"endColumn":2},{"ruleId":"no-restricted-syntax","severity":2,"message":"Do not create shadow components. Import and re-export from @ghxstship/ui if needed","line":150,"column":1,"nodeType":"ExportNamedDeclaration","messageId":"restrictedSyntax","endLine":159,"endColumn":2},{"ruleId":"no-restricted-syntax","severity":2,"message":"Do not create shadow components. Import and re-export from @ghxstship/ui if needed","line":162,"column":1,"nodeType":"ExportNamedDeclaration","messageId":"restrictedSyntax","endLine":170,"endColumn":2},{"ruleId":"no-restricted-syntax","severity":2,"message":"Do not create shadow components. Import and re-export from @ghxstship/ui if needed","line":173,"column":1,"nodeType":"ExportNamedDeclaration","messageId":"restrictedSyntax","endLine":184,"endColumn":2},{"ruleId":"no-restricted-syntax","severity":2,"message":"Do not create shadow components. Import and re-export from @ghxstship/ui if needed","line":187,"column":1,"nodeType":"ExportNamedDeclaration","messageId":"restrictedSyntax","endLine":198,"endColumn":2},{"ruleId":"no-restricted-syntax","severity":2,"message":"Do not create shadow components. Import and re-export from @ghxstship/ui if needed","line":200,"column":1,"nodeType":"ExportNamedDeclaration","messageId":"restrictedSyntax","endLine":209,"endColumn":2}],"suppressedMessages":[],"errorCount":20,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { type DataRecord } from '@ghxstship/ui';\n\n// Core compliance types\nexport type ComplianceStatus = 'pending' | 'submitted' | 'approved' | 'rejected';\nexport type ComplianceKind = 'regulatory' | 'safety' | 'quality' | 'security' | 'environmental' | 'legal' | 'financial';\nexport type CompliancePriority = 'low' | 'medium' | 'high' | 'critical';\nexport type ComplianceRiskLevel = 'low' | 'medium' | 'high' | 'critical';\n\n// Main compliance interface\nexport interface JobCompliance extends DataRecord {\n  id: string;\n  job_id: string;\n  kind: ComplianceKind;\n  status: ComplianceStatus;\n  due_at?: string;\n  created_at: string;\n  // Enhanced fields from joins\n  job_title?: string;\n  job_status?: string;\n  project_title?: string;\n  project_id?: string;\n  organization_name?: string;\n  compliance_title?: string;\n  description?: string;\n  requirements?: string[];\n  evidence_documents?: string[];\n  assessor_name?: string;\n  assessment_date?: string;\n  completion_date?: string;\n  risk_level?: ComplianceRiskLevel;\n  notes?: string;\n}\n\n// API response types\nexport interface ComplianceResponse {\n  compliance: JobCompliance[];\n  total?: number;\n  page?: number;\n  limit?: number;\n}\n\n// Form data types\nexport interface CreateComplianceData {\n  job_id: string;\n  kind: ComplianceKind;\n  compliance_title?: string;\n  description?: string;\n  requirements?: string[];\n  due_at?: string;\n  risk_level?: ComplianceRiskLevel;\n  priority?: CompliancePriority;\n  assessor_name?: string;\n  notes?: string;\n}\n\nexport interface UpdateComplianceData extends Partial<CreateComplianceData> {\n  id: string;\n  status?: ComplianceStatus;\n  evidence_documents?: string[];\n  assessment_date?: string;\n  completion_date?: string;\n}\n\n// Filter and search types\nexport interface ComplianceFilters {\n  status?: ComplianceStatus;\n  kind?: ComplianceKind;\n  job_id?: string;\n  risk_level?: ComplianceRiskLevel;\n  priority?: CompliancePriority;\n  search?: string;\n  due_from?: string;\n  due_to?: string;\n  overdue?: boolean;\n  assessor?: string;\n}\n\n// Statistics types\nexport interface ComplianceStats {\n  total: number;\n  byStatus: Record<ComplianceStatus, number>;\n  byKind: Record<ComplianceKind, number>;\n  byRiskLevel: Record<ComplianceRiskLevel, number>;\n  pendingCompliance: number;\n  overdueCompliance: number;\n  recentCompliance: number;\n  complianceRate: number;\n  averageCompletionTime: number;\n  criticalIssues: number;\n}\n\n// View configuration types\nexport interface ComplianceViewConfig {\n  showRiskLevels: boolean;\n  groupByKind: boolean;\n  showJobDetails: boolean;\n  showOverdueAlerts: boolean;\n  defaultSort: 'due_at' | 'created_at' | 'risk_level' | 'status' | 'kind';\n  defaultView: 'grid' | 'kanban' | 'calendar' | 'list' | 'timeline' | 'dashboard';\n  riskColorCoding: boolean;\n}\n\n// Drawer types\nexport interface ComplianceDrawerProps {\n  compliance?: JobCompliance;\n  mode: 'create' | 'edit' | 'view';\n  onSave?: (data: CreateComplianceData | UpdateComplianceData) => Promise<void>;\n  onClose: () => void;\n  open: boolean;\n}\n\n// Service types\nexport interface ComplianceService {\n  getCompliance: (filters?: ComplianceFilters) => Promise<ComplianceResponse>;\n  getComplianceItem: (id: string) => Promise<JobCompliance>;\n  createCompliance: (data: CreateComplianceData) => Promise<JobCompliance>;\n  updateCompliance: (data: UpdateComplianceData) => Promise<JobCompliance>;\n  deleteCompliance: (id: string) => Promise<void>;\n  getComplianceStats: () => Promise<ComplianceStats>;\n  submitCompliance: (id: string) => Promise<JobCompliance>;\n  approveCompliance: (id: string, notes?: string) => Promise<JobCompliance>;\n  rejectCompliance: (id: string, reason: string) => Promise<JobCompliance>;\n}\n\n// Job integration types\nexport interface JobInfo {\n  id: string;\n  title: string;\n  description?: string;\n  status?: string;\n  project_id?: string;\n  project_title?: string;\n  organization_id?: string;\n  due_at?: string;\n  created_by?: string;\n  risk_assessment?: ComplianceRiskLevel;\n}\n\n// Compliance framework types\nexport interface ComplianceFramework {\n  id: string;\n  name: string;\n  kind: ComplianceKind;\n  version: string;\n  requirements: ComplianceRequirement[];\n  effective_date: string;\n  is_active: boolean;\n}\n\nexport interface ComplianceRequirement {\n  id: string;\n  framework_id: string;\n  title: string;\n  description: string;\n  category: string;\n  mandatory: boolean;\n  evidence_required: string[];\n  assessment_criteria: string[];\n}\n\n// Audit trail types\nexport interface ComplianceAudit {\n  id: string;\n  compliance_id: string;\n  action: 'created' | 'updated' | 'submitted' | 'approved' | 'rejected' | 'evidence_added';\n  performed_by: string;\n  performed_at: string;\n  details: Record<string, unknown>;\n  notes?: string;\n}\n\n// Evidence types\nexport interface ComplianceEvidence {\n  id: string;\n  compliance_id: string;\n  document_name: string;\n  document_url: string;\n  document_type: string;\n  uploaded_by: string;\n  uploaded_at: string;\n  verified: boolean;\n  verified_by?: string;\n  verified_at?: string;\n}\n\n// Assessment types\nexport interface ComplianceAssessment {\n  id: string;\n  compliance_id: string;\n  assessor_id: string;\n  assessment_date: string;\n  score?: number;\n  max_score?: number;\n  findings: AssessmentFinding[];\n  recommendations: string[];\n  status: 'in_progress' | 'completed' | 'requires_followup';\n  next_review_date?: string;\n}\n\nexport interface AssessmentFinding {\n  id: string;\n  category: string;\n  severity: 'low' | 'medium' | 'high' | 'critical';\n  description: string;\n  evidence?: string;\n  remediation_required: boolean;\n  remediation_deadline?: string;\n  status: 'open' | 'in_progress' | 'resolved' | 'accepted_risk';\n}\n\n// Export all types\nexport type {\n  DataRecord\n} from '@ghxstship/ui';\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ghxstship/apps/web/app/(app)/(shell)/jobs/contracts/types.ts","messages":[{"ruleId":"no-restricted-syntax","severity":2,"message":"Do not create shadow components. Import and re-export from @ghxstship/ui if needed","line":4,"column":1,"nodeType":"ExportNamedDeclaration","messageId":"restrictedSyntax","endLine":4,"endColumn":78},{"ruleId":"no-restricted-syntax","severity":2,"message":"Do not create shadow components. Import and re-export from @ghxstship/ui if needed","line":5,"column":1,"nodeType":"ExportNamedDeclaration","messageId":"restrictedSyntax","endLine":5,"endColumn":86},{"ruleId":"no-restricted-syntax","severity":2,"message":"Do not create shadow components. Import and re-export from @ghxstship/ui if needed","line":6,"column":1,"nodeType":"ExportNamedDeclaration","messageId":"restrictedSyntax","endLine":6,"endColumn":71},{"ruleId":"no-restricted-syntax","severity":2,"message":"Do not create shadow components. Import and re-export from @ghxstship/ui if needed","line":9,"column":1,"nodeType":"ExportNamedDeclaration","messageId":"restrictedSyntax","endLine":29,"endColumn":2},{"ruleId":"no-restricted-syntax","severity":2,"message":"Do not create shadow components. Import and re-export from @ghxstship/ui if needed","line":32,"column":1,"nodeType":"ExportNamedDeclaration","messageId":"restrictedSyntax","endLine":37,"endColumn":2},{"ruleId":"no-restricted-syntax","severity":2,"message":"Do not create shadow components. Import and re-export from @ghxstship/ui if needed","line":40,"column":1,"nodeType":"ExportNamedDeclaration","messageId":"restrictedSyntax","endLine":52,"endColumn":2},{"ruleId":"no-restricted-syntax","severity":2,"message":"Do not create shadow components. Import and re-export from @ghxstship/ui if needed","line":54,"column":1,"nodeType":"ExportNamedDeclaration","messageId":"restrictedSyntax","endLine":58,"endColumn":2},{"ruleId":"no-restricted-syntax","severity":2,"message":"Do not create shadow components. Import and re-export from @ghxstship/ui if needed","line":61,"column":1,"nodeType":"ExportNamedDeclaration","messageId":"restrictedSyntax","endLine":73,"endColumn":2},{"ruleId":"no-restricted-syntax","severity":2,"message":"Do not create shadow components. Import and re-export from @ghxstship/ui if needed","line":76,"column":1,"nodeType":"ExportNamedDeclaration","messageId":"restrictedSyntax","endLine":87,"endColumn":2},{"ruleId":"no-restricted-syntax","severity":2,"message":"Do not create shadow components. Import and re-export from @ghxstship/ui if needed","line":90,"column":1,"nodeType":"ExportNamedDeclaration","messageId":"restrictedSyntax","endLine":98,"endColumn":2},{"ruleId":"no-restricted-syntax","severity":2,"message":"Do not create shadow components. Import and re-export from @ghxstship/ui if needed","line":101,"column":1,"nodeType":"ExportNamedDeclaration","messageId":"restrictedSyntax","endLine":107,"endColumn":2},{"ruleId":"no-restricted-syntax","severity":2,"message":"Do not create shadow components. Import and re-export from @ghxstship/ui if needed","line":110,"column":1,"nodeType":"ExportNamedDeclaration","messageId":"restrictedSyntax","endLine":120,"endColumn":2},{"ruleId":"no-restricted-syntax","severity":2,"message":"Do not create shadow components. Import and re-export from @ghxstship/ui if needed","line":123,"column":1,"nodeType":"ExportNamedDeclaration","messageId":"restrictedSyntax","endLine":133,"endColumn":2},{"ruleId":"no-restricted-syntax","severity":2,"message":"Do not create shadow components. Import and re-export from @ghxstship/ui if needed","line":136,"column":1,"nodeType":"ExportNamedDeclaration","messageId":"restrictedSyntax","endLine":145,"endColumn":2},{"ruleId":"no-restricted-syntax","severity":2,"message":"Do not create shadow components. Import and re-export from @ghxstship/ui if needed","line":148,"column":1,"nodeType":"ExportNamedDeclaration","messageId":"restrictedSyntax","endLine":158,"endColumn":2},{"ruleId":"no-restricted-syntax","severity":2,"message":"Do not create shadow components. Import and re-export from @ghxstship/ui if needed","line":161,"column":1,"nodeType":"ExportNamedDeclaration","messageId":"restrictedSyntax","endLine":172,"endColumn":2},{"ruleId":"no-restricted-syntax","severity":2,"message":"Do not create shadow components. Import and re-export from @ghxstship/ui if needed","line":175,"column":1,"nodeType":"ExportNamedDeclaration","messageId":"restrictedSyntax","endLine":184,"endColumn":2}],"suppressedMessages":[],"errorCount":17,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { type DataRecord } from '@ghxstship/ui';\n\n// Core contract types\nexport type ContractStatus = 'draft' | 'active' | 'completed' | 'terminated';\nexport type ContractType = 'employment' | 'freelance' | 'nda' | 'vendor' | 'service';\nexport type ContractPriority = 'low' | 'medium' | 'high' | 'critical';\n\n// Main contract interface\nexport interface JobContract extends DataRecord {\n  id: string;\n  job_id: string;\n  company_id: string;\n  document_url?: string;\n  status: ContractStatus;\n  created_at: string;\n  // Enhanced fields from joins\n  job_title?: string;\n  company_name?: string;\n  project_title?: string;\n  project_id?: string;\n  organization_name?: string;\n  contract_value?: number;\n  currency?: string;\n  start_date?: string;\n  end_date?: string;\n  renewal_date?: string;\n  terms?: string;\n  notes?: string;\n}\n\n// API response types\nexport interface ContractsResponse {\n  contracts: JobContract[];\n  total?: number;\n  page?: number;\n  limit?: number;\n}\n\n// Form data types\nexport interface CreateContractData {\n  job_id: string;\n  company_id: string;\n  type?: ContractType;\n  contract_value?: number;\n  currency?: string;\n  start_date?: string;\n  end_date?: string;\n  document_url?: string;\n  terms?: string;\n  notes?: string;\n  priority?: ContractPriority;\n}\n\nexport interface UpdateContractData extends Partial<CreateContractData> {\n  id: string;\n  status?: ContractStatus;\n  renewal_date?: string;\n}\n\n// Filter and search types\nexport interface ContractFilters {\n  status?: ContractStatus;\n  job_id?: string;\n  company_id?: string;\n  type?: ContractType;\n  priority?: ContractPriority;\n  value_min?: number;\n  value_max?: number;\n  search?: string;\n  date_from?: string;\n  date_to?: string;\n  expiring_soon?: boolean;\n}\n\n// Statistics types\nexport interface ContractStats {\n  total: number;\n  byStatus: Record<ContractStatus, number>;\n  byType: Record<ContractType, number>;\n  totalValue: number;\n  averageContractValue: number;\n  activeContracts: number;\n  expiringContracts: number;\n  recentContracts: number;\n  completionRate: number;\n  renewalRate: number;\n}\n\n// View configuration types\nexport interface ContractViewConfig {\n  showValues: boolean;\n  groupByStatus: boolean;\n  showJobDetails: boolean;\n  showExpirationAlerts: boolean;\n  defaultSort: 'created_at' | 'start_date' | 'end_date' | 'contract_value' | 'status';\n  defaultView: 'grid' | 'kanban' | 'calendar' | 'list' | 'timeline' | 'dashboard';\n  currencyDisplay: string;\n}\n\n// Drawer types\nexport interface ContractDrawerProps {\n  contract?: JobContract;\n  mode: 'create' | 'edit' | 'view';\n  onSave?: (data: CreateContractData | UpdateContractData) => Promise<void>;\n  onClose: () => void;\n  open: boolean;\n}\n\n// Service types\nexport interface ContractService {\n  getContracts: (filters?: ContractFilters) => Promise<ContractsResponse>;\n  getContract: (id: string) => Promise<JobContract>;\n  createContract: (data: CreateContractData) => Promise<JobContract>;\n  updateContract: (data: UpdateContractData) => Promise<JobContract>;\n  deleteContract: (id: string) => Promise<void>;\n  getContractStats: () => Promise<ContractStats>;\n  activateContract: (id: string) => Promise<JobContract>;\n  terminateContract: (id: string, reason?: string) => Promise<JobContract>;\n  renewContract: (id: string, newEndDate: string) => Promise<JobContract>;\n}\n\n// Job integration types\nexport interface JobInfo {\n  id: string;\n  title: string;\n  description?: string;\n  status?: string;\n  project_id?: string;\n  project_title?: string;\n  organization_id?: string;\n  due_at?: string;\n  created_by?: string;\n}\n\n// Company integration types\nexport interface CompanyInfo {\n  id: string;\n  name: string;\n  type?: string;\n  contact_email?: string;\n  contact_phone?: string;\n  website?: string;\n  address?: string;\n  tax_id?: string;\n}\n\n// Contract milestone types\nexport interface ContractMilestone {\n  id: string;\n  contract_id: string;\n  title: string;\n  description?: string;\n  due_date?: string;\n  completion_date?: string;\n  status: 'pending' | 'in_progress' | 'completed' | 'overdue';\n  value?: number;\n  deliverables?: string[];\n}\n\n// Contract amendment types\nexport interface ContractAmendment {\n  id: string;\n  contract_id: string;\n  amendment_type: 'extension' | 'value_change' | 'scope_change' | 'termination';\n  description: string;\n  effective_date: string;\n  old_value?: any;\n  new_value?: any;\n  approved_by?: string;\n  approved_at?: string;\n  status: 'draft' | 'pending' | 'approved' | 'rejected';\n}\n\n// Contract template types\nexport interface ContractTemplate {\n  id: string;\n  name: string;\n  type: ContractType;\n  template_content: string;\n  variables: string[];\n  created_by: string;\n  created_at: string;\n  is_active: boolean;\n}\n\n// Export all types\nexport type {\n  DataRecord\n} from '@ghxstship/ui';\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ghxstship/apps/web/app/(app)/(shell)/jobs/opportunities/OpportunitiesClient.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadOpportunities'. Either include it or remove the dependency array.","line":68,"column":6,"nodeType":"ArrayExpression","endLine":68,"endColumn":13,"suggestions":[{"desc":"Update the dependencies array to be: [loadOpportunities, orgId]","fix":{"range":[2301,2308],"text":"[loadOpportunities, orgId]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { User, FileText, Settings, Award, Calendar, TrendingUp, Activity, Clock, Plus, Search, Play, Trash2 } from \"lucide-react\";\nimport { useState, useEffect } from 'react';\nimport { User } from '@supabase/supabase-js';\nimport { Card, Button, Badge, UnifiedInput, Select, Skeleton } from '@ghxstship/ui';\nimport { tryCatch, Result, reportError } from '@ghxstship/ui/utils/error-handling';\n\ninterface OpportunitiesClientProps {\n  user: User;\n  orgId: string;\n  translations: {\n    title: string;\n    subtitle: string;\n  };\n}\n\ninterface Opportunity {\n  id: string;\n  organizationId: string;\n  title: string;\n  description?: string;\n  type: 'construction' | 'technical' | 'creative' | 'logistics' | 'consulting' | 'other';\n  status: 'lead' | 'qualified' | 'proposal' | 'negotiation' | 'won' | 'lost';\n  estimatedValue?: number;\n  currency?: string;\n  probability?: number;\n  expectedCloseDate?: string;\n  clientName?: string;\n  clientContact?: string;\n  source?: string;\n  notes?: string;\n  createdAt?: string;\n  updatedAt?: string;\n}\n\nconst STATUS_OPTIONS = [\n  { value: 'all', label: 'All Statuses' },\n  { value: 'lead', label: 'Lead' },\n  { value: 'qualified', label: 'Qualified' },\n  { value: 'proposal', label: 'Proposal' },\n  { value: 'negotiation', label: 'Negotiation' },\n  { value: 'won', label: 'Won' },\n  { value: 'lost', label: 'Lost' },\n];\n\nconst TYPE_OPTIONS = [\n  { value: 'all', label: 'All Types' },\n  { value: 'construction', label: 'Construction' },\n  { value: 'technical', label: 'Technical' },\n  { value: 'creative', label: 'Creative' },\n  { value: 'logistics', label: 'Logistics' },\n  { value: 'consulting', label: 'Consulting' },\n  { value: 'other', label: 'Other' },\n];\n\nexport function OpportunitiesClient({ user, orgId, translations }: OpportunitiesClientProps) {\n  const [opportunities, setOpportunities] = useState<Opportunity[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [statusFilter, setStatusFilter] = useState('all');\n  const [typeFilter, setTypeFilter] = useState('all');\n  const [showCreateDialog, setShowCreateDialog] = useState(false);\n  const [selectedOpportunity, setSelectedOpportunity] = useState<Opportunity | null>(null);\n\n  useEffect(() => {\n    loadOpportunities();\n  }, [orgId]);\n\n  const loadOpportunities = async () => {\n    try {\n      setLoading(true);\n      const responseResult = await tryCatch(async () => fetch('/api/v1/jobs/opportunities', {\n        headers: {\n          'x-org-id': orgId,\n          'Content-Type': 'application/json',\n        },\n      }));\nif (!responseResult.success) {\n  reportError(responseResult.error);\n  throw new Error(responseResult.error.message);\n}\nconst response = responseResult.data;\n\n      if (!response.ok) {\n        throw new Error('Failed to load opportunities');\n      }\n\n      const data = await response.json();\n      setOpportunities(data.items || []);\n    } catch (error) {\n      console.error('Error loading opportunities:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const filteredOpportunities = opportunities.filter((opportunity: unknown) => {\n    const matchesSearch = opportunity.title.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         (opportunity.clientName?.toLowerCase().includes(searchTerm.toLowerCase())) ||\n                         (opportunity.description?.toLowerCase().includes(searchTerm.toLowerCase()));\n    const matchesStatus = statusFilter === 'all' || opportunity.status === statusFilter;\n    const matchesType = typeFilter === 'all' || opportunity.type === typeFilter;\n\n    return matchesSearch && matchesStatus && matchesType;\n  });\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'lead':\n        return 'bg-warning/10 color-warning';\n      case 'qualified':\n        return 'bg-accent/10 color-accent';\n      case 'proposal':\n        return 'bg-secondary/10 color-secondary';\n      case 'negotiation':\n        return 'bg-warning/10 color-warning';\n      case 'won':\n        return 'bg-success/10 color-success';\n      case 'lost':\n        return 'bg-destructive/10 color-destructive';\n      default:\n        return 'bg-secondary/50 color-muted';\n    }\n  };\n\n  const getTypeColor = (type: string) => {\n    switch (type) {\n      case 'construction':\n        return 'bg-warning/10 color-warning';\n      case 'technical':\n        return 'bg-accent/10 color-accent';\n      case 'creative':\n        return 'bg-secondary/10 color-secondary';\n      case 'logistics':\n        return 'bg-success/10 color-success';\n      case 'consulting':\n        return 'bg-accent/10 color-accent';\n      case 'other':\n        return 'bg-secondary/50 color-muted';\n      default:\n        return 'bg-secondary/50 color-muted';\n    }\n  };\n\n  const createOpportunity = async (data: Partial<Opportunity>) => {\n    try {\n      const responseResult = await tryCatch(async () =>\n        fetch('/api/v1/jobs/opportunities', {\n          method: 'POST',\n          headers: {\n            'x-org-id': orgId,\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify(data),\n        })\n      );\n      if (!responseResult.success) {\n        reportError(responseResult.error);\n        throw new Error(responseResult.error.message);\n      }\n      const response = responseResult.data;\n\n      if (!response.ok) {\n        throw new Error('Failed to create opportunity');\n      }\n\n      await loadOpportunities();\n      setShowCreateDialog(false);\n    } catch (error) {\n      console.error('Error creating opportunity:', error);\n    }\n  };\n\n  if (loading) {\n    return (\n      <div className=\"stack-lg\">\n        <div className=\"flex justify-between items-center\">\n          <div>\n            <h1 className=\"text-heading-3 text-heading-3 color-foreground\">{translations.title}</h1>\n            <p className=\"color-muted\">{translations.subtitle}</p>\n          </div>\n          <Button onClick={() => setShowCreateDialog(true)}>\n            + Create Opportunity\n          </Button>\n        </div>\n\n        <div className=\"flex gap-md mb-lg\">\n          <div className=\"flex-1\">\n            <UnifiedInput               placeholder=\"Search opportunities...\"\n              value={searchTerm}\n              onChange={(e: React.ChangeEvent<HTMLInputElement>) => setSearchTerm(e.target.value)}\n              className=\"w-full\"\n            />\n          </div>\n          <Select value={statusFilter} onValueChange={setStatusFilter}>\n            {STATUS_OPTIONS.map((option: unknown) => (\n              <option key={option.value} value={option.value}>\n                {option.label}\n              </option>\n            ))}\n          </Select>\n          <Select value={typeFilter} onValueChange={setTypeFilter}>\n            {TYPE_OPTIONS.map((option: unknown) => (\n              <option key={option.value} value={option.value}>\n                {option.label}\n              </option>\n            ))}\n          </Select>\n        </div>\n\n        <div className=\"grid gap-md\">\n          {[...Array(6)].map((_, i) => (\n            <Card key={i} className=\"p-lg\">\n              <div className=\"flex items-start justify-between\">\n                <div className=\"flex-1\">\n                  <div className=\"flex items-center gap-sm mb-sm\">\n                    <div className=\"h-5 w-5 bg-secondary rounded\" />\n                    <Skeleton className=\"h-5 w-48\" />\n                  </div>\n                  <Skeleton className=\"h-4 w-full mb-sm\" />\n                  <Skeleton className=\"h-4 w-3/4\" />\n                </div>\n                <div className=\"flex gap-sm\">\n                  <Skeleton className=\"h-6 w-16\" />\n                  <Skeleton className=\"h-6 w-20\" />\n                </div>\n              </div>\n            </Card>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"stack-lg\">\n      <div className=\"flex justify-between items-center\">\n        <div>\n          <h1 className=\"text-heading-3 text-heading-3 color-foreground\">{translations.title}</h1>\n          <p className=\"color-muted\">{translations.subtitle}</p>\n        </div>\n        <Button onClick={() => setShowCreateDialog(true)}>\n          + Create Opportunity\n        </Button>\n      </div>\n\n      <div className=\"flex gap-md mb-lg\">\n        <div className=\"flex-1\">\n          <UnifiedInput             placeholder=\"Search opportunities...\"\n            value={searchTerm}\n            onChange={(e: React.ChangeEvent<HTMLInputElement>) => setSearchTerm(e.target.value)}\n            className=\"w-full\"\n          />\n        </div>\n        <Select value={statusFilter} onValueChange={setStatusFilter}>\n          {STATUS_OPTIONS.map((option: unknown) => (\n            <option key={option.value} value={option.value}>\n              {option.label}\n            </option>\n          ))}\n        </Select>\n        <Select value={typeFilter} onValueChange={setTypeFilter}>\n          {TYPE_OPTIONS.map((option: unknown) => (\n            <option key={option.value} value={option.value}>\n              {option.label}\n            </option>\n          ))}\n        </Select>\n      </div>\n\n      {filteredOpportunities.length === 0 ? (\n        <Card className=\"p-2xl text-center\">\n          <div className=\"h-12 w-12 bg-secondary rounded mx-auto mb-md\" />\n          <h3 className=\"text-body form-label color-foreground mb-sm\">No opportunities found</h3>\n          <p className=\"color-muted mb-md\">\n            {searchTerm || statusFilter !== 'all' || typeFilter !== 'all'\n              ? 'Try adjusting your search or filters to find opportunities.'\n              : 'Get started by creating your first opportunity.'}\n          </p>\n          <Button onClick={() => setShowCreateDialog(true)}>\n            + Create Opportunity\n          </Button>\n        </Card>\n      ) : (\n        <div className=\"grid gap-md\">\n          {filteredOpportunities.map((opportunity: unknown) => (\n            <Card key={opportunity.id} className=\"p-lg hover:shadow-elevated transition-shadow\">\n              <div className=\"flex items-start justify-between\">\n                <div className=\"flex-1\">\n                  <div className=\"flex items-center gap-sm mb-sm\">\n                    <div className=\"h-5 w-5 bg-secondary rounded\" />\n                    <h3 className=\"text-body text-heading-4 color-foreground\">{opportunity.title}</h3>\n                    <Badge className={getStatusColor(opportunity.status)}>\n                      {opportunity.status}\n                    </Badge>\n                    <Badge className={getTypeColor(opportunity.type)}>\n                      {opportunity.type}\n                    </Badge>\n                  </div>\n\n                  {opportunity.description && (\n                    <p className=\"color-muted mb-md line-clamp-2\">{opportunity.description}</p>\n                  )}\n\n                  <div className=\"grid grid-cols-2 md:grid-cols-3 gap-md text-body-sm\">\n                    {opportunity.clientName && (\n                      <div className=\"flex items-center gap-sm\">\n                        <div className=\"h-4 w-4 bg-secondary rounded\" />\n                        <span className=\"color-muted\">{opportunity.clientName}</span>\n                      </div>\n                    )}\n                    {opportunity.estimatedValue && (\n                      <div className=\"flex items-center gap-sm\">\n                        <div className=\"h-4 w-4 bg-secondary rounded\" />\n                        <span className=\"color-muted\">\n                          ${opportunity.estimatedValue.toLocaleString()} {opportunity.currency || 'USD'}\n                        </span>\n                      </div>\n                    )}\n                    {opportunity.expectedCloseDate && (\n                      <div className=\"flex items-center gap-sm\">\n                        <div className=\"h-4 w-4 bg-secondary rounded\" />\n                        <span className=\"color-muted\">\n                          {new Date(opportunity.expectedCloseDate).toLocaleDateString()}\n                        </span>\n                      </div>\n                    )}\n                  </div>\n\n                  <div className=\"flex items-center justify-between mt-md pt-md border-t border-border\">\n                    <div className=\"flex items-center gap-md text-body-sm color-muted\">\n                      {opportunity.createdAt && (\n                        <span>Created {new Date(opportunity.createdAt).toLocaleDateString()}</span>\n                      )}\n                      {opportunity.updatedAt && opportunity.updatedAt !== opportunity.createdAt && (\n                        <span>Updated {new Date(opportunity.updatedAt).toLocaleDateString()}</span>\n                      )}\n                    </div>\n                    <div className=\"flex gap-sm\">\n                      <Button\n                        variant=\"outline\"\n                       \n                        onClick={() => setSelectedOpportunity(opportunity)}\n                      >\n                        View\n                      </Button>\n                      <Button>\n                        Edit\n                      </Button>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </Card>\n          ))}\n        </div>\n      )}\n\n      {/* Create Dialog */}\n      {showCreateDialog && (\n        <div className=\"fixed inset-0 bg-foreground/30 backdrop-blur-sm flex items-center justify-center p-md z-50\">\n          <div className=\"bg-background rounded-lg p-lg w-full max-w-md\">\n            <h3 className=\"text-body text-heading-4 mb-md\">Create New Opportunity</h3>\n            <form onSubmit={(e: unknown) => {\n              e.preventDefault();\n              const formData = new FormData(e.currentTarget);\n              createOpportunity({\n                title: formData.get('title') as string,\n                description: formData.get('description') as string,\n                type: formData.get('type') as unknown,\n                status: 'lead',\n                clientName: formData.get('clientName') as string,\n                estimatedValue: formData.get('estimatedValue') ? Number(formData.get('estimatedValue')) : undefined,\n                currency: 'USD',\n              });\n            }}>\n              <div className=\"stack-md\">\n                <div>\n                  <label className=\"block text-body-sm form-label mb-xs\">Title</label>\n                  <UnifiedInput />\n                </div>\n                <div>\n                  <label className=\"block text-body-sm form-label mb-xs\">Description</label>\n                  <textarea className=\"w-full p-sm border border-border rounded bg-background\" rows={3} />\n                </div>\n                <div>\n                  <label className=\"block text-body-sm form-label mb-xs\">Type</label>\n                  <Select>\n                    {TYPE_OPTIONS.slice(1).map((option: unknown) => (\n                      <option key={option.value} value={option.value}>\n                        {option.label}\n                      </option>\n                    ))}\n                  </Select>\n                </div>\n                <div>\n                  <label className=\"block text-body-sm form-label mb-xs\">Client Name</label>\n                  <UnifiedInput />\n                </div>\n                <div>\n                  <label className=\"block text-body-sm form-label mb-xs\">Estimated Value</label>\n                  <UnifiedInput type=\"number\" />\n                </div>\n              </div>\n              <div className=\"flex gap-sm mt-lg\">\n                <Button type=\"submit\">Create</Button>\n                <Button type=\"button\" variant=\"outline\" onClick={() => setShowCreateDialog(false)}>\n                  Cancel\n                </Button>\n              </div>\n            </form>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ghxstship/apps/web/app/(app)/(shell)/jobs/opportunities/types.ts","messages":[{"ruleId":"no-restricted-syntax","severity":2,"message":"Do not create shadow components. Import and re-export from @ghxstship/ui if needed","line":4,"column":1,"nodeType":"ExportNamedDeclaration","messageId":"restrictedSyntax","endLine":4,"endColumn":77},{"ruleId":"no-restricted-syntax","severity":2,"message":"Do not create shadow components. Import and re-export from @ghxstship/ui if needed","line":5,"column":1,"nodeType":"ExportNamedDeclaration","messageId":"restrictedSyntax","endLine":5,"endColumn":112},{"ruleId":"no-restricted-syntax","severity":2,"message":"Do not create shadow components. Import and re-export from @ghxstship/ui if needed","line":6,"column":1,"nodeType":"ExportNamedDeclaration","messageId":"restrictedSyntax","endLine":6,"endColumn":74},{"ruleId":"no-restricted-syntax","severity":2,"message":"Do not create shadow components. Import and re-export from @ghxstship/ui if needed","line":7,"column":1,"nodeType":"ExportNamedDeclaration","messageId":"restrictedSyntax","endLine":7,"endColumn":99},{"ruleId":"no-restricted-syntax","severity":2,"message":"Do not create shadow components. Import and re-export from @ghxstship/ui if needed","line":10,"column":1,"nodeType":"ExportNamedDeclaration","messageId":"restrictedSyntax","endLine":37,"endColumn":2},{"ruleId":"no-restricted-syntax","severity":2,"message":"Do not create shadow components. Import and re-export from @ghxstship/ui if needed","line":40,"column":1,"nodeType":"ExportNamedDeclaration","messageId":"restrictedSyntax","endLine":45,"endColumn":2},{"ruleId":"no-restricted-syntax","severity":2,"message":"Do not create shadow components. Import and re-export from @ghxstship/ui if needed","line":48,"column":1,"nodeType":"ExportNamedDeclaration","messageId":"restrictedSyntax","endLine":68,"endColumn":2},{"ruleId":"no-restricted-syntax","severity":2,"message":"Do not create shadow components. Import and re-export from @ghxstship/ui if needed","line":70,"column":1,"nodeType":"ExportNamedDeclaration","messageId":"restrictedSyntax","endLine":76,"endColumn":2},{"ruleId":"no-restricted-syntax","severity":2,"message":"Do not create shadow components. Import and re-export from @ghxstship/ui if needed","line":79,"column":1,"nodeType":"ExportNamedDeclaration","messageId":"restrictedSyntax","endLine":96,"endColumn":2},{"ruleId":"no-restricted-syntax","severity":2,"message":"Do not create shadow components. Import and re-export from @ghxstship/ui if needed","line":99,"column":1,"nodeType":"ExportNamedDeclaration","messageId":"restrictedSyntax","endLine":112,"endColumn":2},{"ruleId":"no-restricted-syntax","severity":2,"message":"Do not create shadow components. Import and re-export from @ghxstship/ui if needed","line":115,"column":1,"nodeType":"ExportNamedDeclaration","messageId":"restrictedSyntax","endLine":124,"endColumn":2},{"ruleId":"no-restricted-syntax","severity":2,"message":"Do not create shadow components. Import and re-export from @ghxstship/ui if needed","line":127,"column":1,"nodeType":"ExportNamedDeclaration","messageId":"restrictedSyntax","endLine":133,"endColumn":2},{"ruleId":"no-restricted-syntax","severity":2,"message":"Do not create shadow components. Import and re-export from @ghxstship/ui if needed","line":136,"column":1,"nodeType":"ExportNamedDeclaration","messageId":"restrictedSyntax","endLine":146,"endColumn":2},{"ruleId":"no-restricted-syntax","severity":2,"message":"Do not create shadow components. Import and re-export from @ghxstship/ui if needed","line":149,"column":1,"nodeType":"ExportNamedDeclaration","messageId":"restrictedSyntax","endLine":159,"endColumn":2},{"ruleId":"no-restricted-syntax","severity":2,"message":"Do not create shadow components. Import and re-export from @ghxstship/ui if needed","line":162,"column":1,"nodeType":"ExportNamedDeclaration","messageId":"restrictedSyntax","endLine":171,"endColumn":2},{"ruleId":"no-restricted-syntax","severity":2,"message":"Do not create shadow components. Import and re-export from @ghxstship/ui if needed","line":174,"column":1,"nodeType":"ExportNamedDeclaration","messageId":"restrictedSyntax","endLine":180,"endColumn":2},{"ruleId":"no-restricted-syntax","severity":2,"message":"Do not create shadow components. Import and re-export from @ghxstship/ui if needed","line":183,"column":1,"nodeType":"ExportNamedDeclaration","messageId":"restrictedSyntax","endLine":191,"endColumn":2},{"ruleId":"no-restricted-syntax","severity":2,"message":"Do not create shadow components. Import and re-export from @ghxstship/ui if needed","line":194,"column":1,"nodeType":"ExportNamedDeclaration","messageId":"restrictedSyntax","endLine":205,"endColumn":2},{"ruleId":"no-restricted-syntax","severity":2,"message":"Do not create shadow components. Import and re-export from @ghxstship/ui if needed","line":208,"column":1,"nodeType":"ExportNamedDeclaration","messageId":"restrictedSyntax","endLine":220,"endColumn":2},{"ruleId":"no-restricted-syntax","severity":2,"message":"Do not create shadow components. Import and re-export from @ghxstship/ui if needed","line":223,"column":1,"nodeType":"ExportNamedDeclaration","messageId":"restrictedSyntax","endLine":233,"endColumn":2}],"suppressedMessages":[],"errorCount":20,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { type DataRecord } from '@ghxstship/ui';\n\n// Core opportunity types\nexport type OpportunityStatus = 'open' | 'closed' | 'awarded' | 'cancelled';\nexport type OpportunityType = 'construction' | 'technical' | 'creative' | 'logistics' | 'consulting' | 'other';\nexport type OpportunityPriority = 'low' | 'medium' | 'high' | 'critical';\nexport type OpportunityStage = 'lead' | 'qualified' | 'proposal' | 'negotiation' | 'won' | 'lost';\n\n// Main opportunity interface\nexport interface JobOpportunity extends DataRecord {\n  id: string;\n  organization_id: string;\n  project_id?: string;\n  title: string;\n  status: OpportunityStatus;\n  opens_at?: string;\n  closes_at?: string;\n  created_at: string;\n  // Enhanced fields from joins\n  project_title?: string;\n  organization_name?: string;\n  description?: string;\n  requirements?: string[];\n  budget_min?: number;\n  budget_max?: number;\n  currency?: string;\n  client_name?: string;\n  client_contact?: string;\n  location?: string;\n  duration?: string;\n  skills_required?: string[];\n  experience_level?: string;\n  stage?: OpportunityStage;\n  probability?: number;\n  estimated_value?: number;\n  notes?: string;\n}\n\n// API response types\nexport interface OpportunitiesResponse {\n  opportunities: JobOpportunity[];\n  total?: number;\n  page?: number;\n  limit?: number;\n}\n\n// Form data types\nexport interface CreateOpportunityData {\n  organization_id: string;\n  project_id?: string;\n  title: string;\n  description?: string;\n  type?: OpportunityType;\n  requirements?: string[];\n  budget_min?: number;\n  budget_max?: number;\n  currency?: string;\n  opens_at?: string;\n  closes_at?: string;\n  client_name?: string;\n  client_contact?: string;\n  location?: string;\n  duration?: string;\n  skills_required?: string[];\n  experience_level?: string;\n  priority?: OpportunityPriority;\n  notes?: string;\n}\n\nexport interface UpdateOpportunityData extends Partial<CreateOpportunityData> {\n  id: string;\n  status?: OpportunityStatus;\n  stage?: OpportunityStage;\n  probability?: number;\n  estimated_value?: number;\n}\n\n// Filter and search types\nexport interface OpportunityFilters {\n  status?: OpportunityStatus;\n  type?: OpportunityType;\n  stage?: OpportunityStage;\n  organization_id?: string;\n  project_id?: string;\n  priority?: OpportunityPriority;\n  budget_min?: number;\n  budget_max?: number;\n  value_min?: number;\n  value_max?: number;\n  search?: string;\n  location?: string;\n  skills?: string[];\n  date_from?: string;\n  date_to?: string;\n  closing_soon?: boolean;\n}\n\n// Statistics types\nexport interface OpportunityStats {\n  total: number;\n  byStatus: Record<OpportunityStatus, number>;\n  byStage: Record<OpportunityStage, number>;\n  byType: Record<OpportunityType, number>;\n  totalValue: number;\n  averageValue: number;\n  winRate: number;\n  pipelineValue: number;\n  activeOpportunities: number;\n  closingOpportunities: number;\n  recentOpportunities: number;\n  conversionRate: number;\n}\n\n// View configuration types\nexport interface OpportunityViewConfig {\n  showBudgets: boolean;\n  groupByStage: boolean;\n  showProjectDetails: boolean;\n  showClosingAlerts: boolean;\n  defaultSort: 'created_at' | 'closes_at' | 'estimated_value' | 'probability' | 'status';\n  defaultView: 'grid' | 'kanban' | 'calendar' | 'list' | 'timeline' | 'dashboard';\n  currencyDisplay: string;\n  probabilityDisplay: boolean;\n}\n\n// Drawer types\nexport interface OpportunityDrawerProps {\n  opportunity?: JobOpportunity;\n  mode: 'create' | 'edit' | 'view';\n  onSave?: (data: CreateOpportunityData | UpdateOpportunityData) => Promise<void>;\n  onClose: () => void;\n  open: boolean;\n}\n\n// Service types\nexport interface OpportunityService {\n  getOpportunities: (filters?: OpportunityFilters) => Promise<OpportunitiesResponse>;\n  getOpportunity: (id: string) => Promise<JobOpportunity>;\n  createOpportunity: (data: CreateOpportunityData) => Promise<JobOpportunity>;\n  updateOpportunity: (data: UpdateOpportunityData) => Promise<JobOpportunity>;\n  deleteOpportunity: (id: string) => Promise<void>;\n  getOpportunityStats: () => Promise<OpportunityStats>;\n  closeOpportunity: (id: string) => Promise<JobOpportunity>;\n  awardOpportunity: (id: string, winnerId: string) => Promise<JobOpportunity>;\n  cancelOpportunity: (id: string, reason?: string) => Promise<JobOpportunity>;\n}\n\n// Project integration types\nexport interface ProjectInfo {\n  id: string;\n  name: string;\n  description?: string;\n  status?: string;\n  organization_id?: string;\n  start_date?: string;\n  end_date?: string;\n  budget?: number;\n  client_name?: string;\n}\n\n// Organization integration types\nexport interface OrganizationInfo {\n  id: string;\n  name: string;\n  type?: string;\n  industry?: string;\n  location?: string;\n  website?: string;\n  contact_email?: string;\n  contact_phone?: string;\n}\n\n// Opportunity pipeline types\nexport interface OpportunityPipeline {\n  stage: OpportunityStage;\n  opportunities: JobOpportunity[];\n  totalValue: number;\n  averageProbability: number;\n  count: number;\n}\n\n// Opportunity activity types\nexport interface OpportunityActivity {\n  id: string;\n  opportunity_id: string;\n  activity_type: 'created' | 'updated' | 'stage_changed' | 'note_added' | 'contact_made' | 'proposal_sent' | 'meeting_scheduled';\n  description: string;\n  performed_by: string;\n  performed_at: string;\n  metadata?: Record<string, unknown>;\n}\n\n// Opportunity contact types\nexport interface OpportunityContact {\n  id: string;\n  opportunity_id: string;\n  contact_type: 'email' | 'phone' | 'meeting' | 'proposal' | 'follow_up';\n  contact_date: string;\n  contact_person?: string;\n  subject?: string;\n  notes?: string;\n  outcome?: string;\n  next_action?: string;\n  next_action_date?: string;\n}\n\n// Opportunity proposal types\nexport interface OpportunityProposal {\n  id: string;\n  opportunity_id: string;\n  proposal_title: string;\n  proposal_document_url?: string;\n  submitted_at: string;\n  submitted_by: string;\n  status: 'draft' | 'submitted' | 'under_review' | 'accepted' | 'rejected';\n  feedback?: string;\n  value: number;\n  currency: string;\n  validity_period?: string;\n}\n\n// Opportunity competitor types\nexport interface OpportunityCompetitor {\n  id: string;\n  opportunity_id: string;\n  competitor_name: string;\n  competitor_type?: string;\n  strengths?: string[];\n  weaknesses?: string[];\n  estimated_bid?: number;\n  win_probability?: number;\n  notes?: string;\n}\n\n// Export all types\nexport type {\n  DataRecord\n} from '@ghxstship/ui';\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ghxstship/apps/web/app/(app)/(shell)/jobs/overview/JobsClient.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"The 'fieldConfig' array makes the dependencies of useMemo Hook (at line 195) change on every render. To fix this, wrap the initialization of 'fieldConfig' in its own useMemo() Hook.","line":35,"column":9,"nodeType":"VariableDeclarator","endLine":91,"endColumn":4}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\nimport { User, FileText, Settings, Award, Calendar, TrendingUp, Activity, Clock, Plus, Search, Play, Trash2 } from \"lucide-react\";\nimport { useCallback, useEffect, useMemo, useState } from 'react';\nimport { useTranslations } from 'next-intl';\nimport {\n  type DataRecord,\n  type FieldConfig,\n  type FilterConfig,\n  type SortConfig,\n  DataViewProvider,\n  StateManagerProvider,\n  ViewSwitcher,\n  DataActions,\n  DataGrid,\n  KanbanBoard,\n  CalendarView,\n  ListView\n} from '@ghxstship/ui';\nimport type { DataViewConfig } from '@ghxstship/ui/components/DataViews/types';\nimport { tryCatch, reportError } from '@ghxstship/ui/utils/error-handling';\nimport AppDrawer from '@/app/_components/shared/AppDrawer';\n\ninterface JobsResponse {\n  jobs: DataRecord[];\n}\n\nexport default function JobsClient({ orgId }: { orgId: string }) {\n  const t = useTranslations('jobs');\n  const [jobs, setJobs] = useState<DataRecord[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [filters, setFilters] = useState<Record<string, string>>({});\n  const [selectedJob, setSelectedJob] = useState<DataRecord | null>(null);\n\n  // Field configuration for jobs data (matching database schema)\n  const fieldConfig: FieldConfig[] = [\n    {\n      key: 'title',\n      label: 'Job Title',\n      type: 'text' as const,\n      required: true,\n      sortable: true,\n      filterable: true\n    },\n    {\n      key: 'status',\n      label: 'Status',\n      type: 'select' as const,\n      required: true,\n      sortable: true,\n      filterable: true,\n      options: [\n        { value: 'open', label: 'Open' },\n        { value: 'in_progress', label: 'In Progress' },\n        { value: 'blocked', label: 'Blocked' },\n        { value: 'done', label: 'Done' },\n        { value: 'cancelled', label: 'Cancelled' }\n      ]\n    },\n    {\n      key: 'project_id',\n      label: 'Project',\n      type: 'text' as const,\n      required: false,\n      sortable: true,\n      filterable: true\n    },\n    {\n      key: 'due_at',\n      label: 'Due Date',\n      type: 'date' as const,\n      required: false,\n      sortable: true,\n      filterable: true\n    },\n    {\n      key: 'created_by',\n      label: 'Created By',\n      type: 'text' as const,\n      required: false,\n      sortable: true,\n      filterable: true\n    },\n    {\n      key: 'created_at',\n      label: 'Created Date',\n      type: 'date' as const,\n      required: false,\n      sortable: true,\n      filterable: true\n    }\n  ];\n\n  // Real Supabase data loading function\n  const loadJobsData = useCallback(async (activeFilters?: Record<string, string>): Promise<DataRecord[]> => {\n    try {\n      const params = new URLSearchParams();\n      if (activeFilters?.type) params.append('type', activeFilters.type);\n      if (activeFilters?.status) params.append('status', activeFilters.status);\n      if (activeFilters?.search) params.append('search', activeFilters.search);\n\n      const responseResult = await tryCatch(async () =>\n        fetch(`/api/v1/jobs?${params.toString()}`, {\n          method: 'GET',\n          headers: { 'Content-Type': 'application/json' }\n        })\n      );\n\n      if (!responseResult.success) {\n        reportError(responseResult.error);\n        throw new Error(responseResult.error.message);\n      }\n\n      const response = responseResult.data;\n      if (!response.ok) {\n        throw new Error(`Failed to fetch jobs: ${response.statusText}`);\n      }\n\n      const data: JobsResponse = await response.json();\n      return data.jobs ?? [];\n    } catch (error) {\n      console.error('Error loading jobs:', error);\n      return [];\n    }\n  }, []);\n\n  // Load data on mount and when filters change\n  useEffect(() => {\n    const fetchData = async () => {\n      setLoading(true);\n      const data = await loadJobsData(filters);\n      setJobs(data);\n      setLoading(false);\n    };\n    void fetchData();\n  }, [filters, loadJobsData]);\n\n  const closeDrawer = useCallback(() => {\n    setSelectedJob(null);\n  }, []);\n\n  const openViewDrawer = useCallback((record: DataRecord) => {\n    setSelectedJob(record);\n  }, []);\n\n  const handleSearch = useCallback((query: string) => {\n    setFilters(prev => ({ ...prev, search: query }));\n  }, []);\n\n  const handleFilter = useCallback((newFilters: FilterConfig[]) => {\n    const normalizedFilters = newFilters.reduce<Record<string, string>>((acc, filter) => {\n      if (filter.value) {\n        acc[filter.field] = String(filter.value);\n      }\n      return acc;\n    }, {});\n    setFilters(prev => ({ ...prev, ...normalizedFilters }));\n  }, []);\n\n  const handleSort = useCallback((sorts: SortConfig[]) => {\n    console.debug('Sort jobs:', sorts);\n  }, []);\n\n  const handleRefresh = useCallback(() => {\n    setFilters({});\n  }, []);\n\n  const handleExport = useCallback((data: DataRecord[], format: string) => {\n    console.debug('Export jobs:', format, data.length);\n  }, []);\n\n  const handleImport = useCallback((data: DataRecord[]) => {\n    console.debug('Import jobs:', data.length);\n  }, []);\n\n  const handleDelete = useCallback((ids: string[]) => {\n    console.debug('Delete jobs:', ids);\n  }, []);\n\n  const dataViewConfig = useMemo<DataViewConfig>(() => ({\n    id: 'jobs-view',\n    name: 'Jobs Management',\n    viewType: 'grid',\n    defaultView: 'grid',\n    fields: fieldConfig,\n    data: jobs,\n    loading,\n    onSearch: handleSearch,\n    onFilter: handleFilter,\n    onSort: handleSort,\n    onRefresh: handleRefresh,\n    onExport: handleExport,\n    onImport: handleImport,\n    onEdit: openViewDrawer,\n    onDelete: handleDelete\n  }), [jobs, fieldConfig, handleDelete, handleExport, handleFilter, handleImport, handleRefresh, handleSearch, handleSort, loading, openViewDrawer]);\n\n  return (\n    <div className=\"h-full w-full\">\n      <StateManagerProvider>\n        <DataViewProvider config={dataViewConfig}>\n          <div className=\"flex flex-col h-full stack-md\">\n            {/* View Switcher and Actions */}\n            <div className=\"flex items-center justify-between\">\n              <ViewSwitcher />\n              <DataActions />\n            </div>\n\n            {/* Data Views */}\n            <DataGrid />\n            <KanbanBoard\n              columns={[\n                { id: 'open', title: 'Open' },\n                { id: 'in_progress', title: 'In Progress' },\n                { id: 'blocked', title: 'Blocked' },\n                { id: 'done', title: 'Done' },\n                { id: 'cancelled', title: 'Cancelled' }\n              ]}\n              statusField=\"status\"\n              titleField=\"title\"\n            />\n            <CalendarView\n              startDateField=\"due_at\"\n              titleField=\"title\"\n            />\n            <ListView\n              titleField=\"title\"\n              subtitleField=\"description\"\n            />\n\n            {/* Drawer for CRUD operations */}\n            {selectedJob && (\n              <AppDrawer\n                open\n                onClose={closeDrawer}\n                title={selectedJob.title ?? 'Job Details'}\n                record={selectedJob}\n                mode=\"view\"\n              >\n                <div className=\"stack-md\">\n                  {fieldConfig.map(field => (\n                    <div key={field.key} className=\"stack-2xs\">\n                      <p className=\"text-body-xs form-label color-muted\">{field.label}</p>\n                      <p className=\"text-body-sm\">{String(selectedJob[field.key] ?? '—')}</p>\n                    </div>\n                  ))}\n                </div>\n              </AppDrawer>\n            )}\n          </div>\n        </DataViewProvider>\n      </StateManagerProvider>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ghxstship/apps/web/app/(app)/(shell)/jobs/overview/OverviewClient.tsx","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: Declaration or statement expected.","line":449,"column":0,"nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { Plus, Briefcase, FileText, CheckCircle, AlertTriangle, TrendingUp, Calendar, Users, DollarSign, Clock } from \"lucide-react\";\nimport { useCallback, useEffect, useMemo, useState } from 'react';\nimport {\n  type DataRecord,\n  type FieldConfig,\n  DataViewProvider,\n  StateManagerProvider,\n  DashboardView,\n  Button,\n  Badge,\n  Card\n} from '@ghxstship/ui';\nimport type { DataViewConfig } from '@ghxstship/ui/components/DataViews/types';\nimport { tryCatch, reportError } from '@ghxstship/ui/utils/error-handling';\nimport Link from 'next/link';\n\ninterface JobsOverviewData {\n  totalJobs: number;\n  activeJobs: number;\n  completedJobs: number;\n  draftJobs: number;\n  totalOpportunities: number;\n  activeBids: number;\n  activeContracts: number;\n  pendingCompliance: number;\n  totalAssignments: number;\n  activeRFPs: number;\n  recentActivity: RecentActivity[];\n}\n\ninterface RecentActivity {\n  id: string;\n  type: 'job' | 'opportunity' | 'bid' | 'contract' | 'assignment' | 'compliance' | 'rfp';\n  title: string;\n  status: string;\n  updatedAt: string;\n  priority?: 'high' | 'medium' | 'low';\n}\n\nexport default function OverviewClient({ orgId }: { orgId: string }) {\n  const [overviewData, setOverviewData] = useState<JobsOverviewData | null>(null);\n  const [loading, setLoading] = useState(true);\n\n  // Load comprehensive jobs overview data\n  const loadOverviewData = useCallback(async (): Promise<JobsOverviewData> => {\n    try {\n      // Load data from all jobs modules in parallel\n      const [\n        jobsResponse,\n        opportunitiesResponse,\n        bidsResponse,\n        contractsResponse,\n        assignmentsResponse,\n        complianceResponse,\n        rfpsResponse\n      ] = await Promise.all([\n        tryCatch(async () => fetch(`/api/v1/jobs?limit=1000`, { headers: { 'Content-Type': 'application/json' } })),\n        tryCatch(async () => fetch(`/api/v1/jobs/opportunities?limit=1000`, { headers: { 'Content-Type': 'application/json' } })),\n        tryCatch(async () => fetch(`/api/v1/jobs/bids?limit=1000`, { headers: { 'Content-Type': 'application/json' } })),\n        tryCatch(async () => fetch(`/api/v1/jobs/contracts?limit=1000`, { headers: { 'Content-Type': 'application/json' } })),\n        tryCatch(async () => fetch(`/api/v1/jobs/assignments?limit=1000`, { headers: { 'Content-Type': 'application/json' } })),\n        tryCatch(async () => fetch(`/api/v1/jobs/compliance?limit=1000`, { headers: { 'Content-Type': 'application/json' } })),\n        tryCatch(async () => fetch(`/api/v1/jobs/rfps?limit=1000`, { headers: { 'Content-Type': 'application/json' } }))\n      ]);\n\n      // Process all responses\n      const jobs = jobsResponse.success ? await jobsResponse.data.json() : { jobs: [] };\n      const opportunities = opportunitiesResponse.success ? await opportunitiesResponse.data.json() : { opportunities: [] };\n      const bids = bidsResponse.success ? await bidsResponse.data.json() : { bids: [] };\n      const contracts = contractsResponse.success ? await contractsResponse.data.json() : { contracts: [] };\n      const assignments = assignmentsResponse.success ? await assignmentsResponse.data.json() : { assignments: [] };\n      const compliance = complianceResponse.success ? await complianceResponse.data.json() : { compliance: [] };\n      const rfps = rfpsResponse.success ? await rfpsResponse.data.json() : { rfps: [] };\n\n      // Calculate statistics\n      const jobsList = jobs.jobs || [];\n      const opportunitiesList = opportunities.opportunities || [];\n      const bidsList = bids.bids || [];\n      const contractsList = contracts.contracts || [];\n      const assignmentsList = assignments.assignments || [];\n      const complianceList = compliance.compliance || [];\n      const rfpsList = rfps.rfps || [];\n\n      // Aggregate recent activity from all modules\n      const recentActivity: RecentActivity[] = [\n        ...jobsList.slice(0, 3).map((job: unknown) => ({\n          id: job.id,\n          type: 'job' as const,\n          title: job.title || 'Untitled Job',\n          status: job.status || 'unknown',\n          updatedAt: job.updated_at || job.created_at,\n          priority: job.priority\n        })),\n        ...opportunitiesList.slice(0, 2).map((opp: unknown) => ({\n          id: opp.id,\n          type: 'opportunity' as const,\n          title: opp.title || 'Untitled Opportunity',\n          status: opp.status || 'unknown',\n          updatedAt: opp.updated_at || opp.created_at,\n          priority: opp.priority\n        })),\n        ...bidsList.slice(0, 2).map((bid: unknown) => ({\n          id: bid.id,\n          type: 'bid' as const,\n          title: bid.opportunity_title || 'Bid',\n          status: bid.status || 'unknown',\n          updatedAt: bid.submitted_at || bid.created_at,\n          priority: 'medium'\n        }))\n      ].sort((a, b) => new Date(b.updatedAt).getTime() - new Date(a.updatedAt).getTime()).slice(0, 10);\n\n      return {\n        totalJobs: jobsList.length,\n        activeJobs: jobsList.filter((j: unknown) => j.status === 'in_progress').length,\n        completedJobs: jobsList.filter((j: unknown) => j.status === 'done').length,\n        draftJobs: jobsList.filter((j: unknown) => j.status === 'draft').length,\n        totalOpportunities: opportunitiesList.length,\n        activeBids: bidsList.filter((b: unknown) => ['submitted', 'under_review'].includes(b.status)).length,\n        activeContracts: contractsList.filter((c: unknown) => c.status === 'active').length,\n        pendingCompliance: complianceList.filter((c: unknown) => c.status === 'pending').length,\n        totalAssignments: assignmentsList.length,\n        activeRFPs: rfpsList.filter((r: unknown) => r.status === 'open').length,\n        recentActivity\n      };\n    } catch (error) {\n      console.error('Error loading overview data:', error);\n      return {\n        totalJobs: 0,\n        activeJobs: 0,\n        completedJobs: 0,\n        draftJobs: 0,\n        totalOpportunities: 0,\n        activeBids: 0,\n        activeContracts: 0,\n        pendingCompliance: 0,\n        totalAssignments: 0,\n        activeRFPs: 0,\n        recentActivity: []\n      };\n    }\n  }, []);\n\n  // Load data on mount\n  useEffect(() => {\n    const fetchData = async () => {\n      setLoading(true);\n      const data = await loadOverviewData();\n      setOverviewData(data);\n      setLoading(false);\n    };\n    void fetchData();\n  }, [loadOverviewData]);\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'active':\n      case 'in_progress':\n      case 'open':\n        return 'success';\n      case 'pending':\n      case 'draft':\n        return 'warning';\n      case 'completed':\n      case 'done':\n        return 'info';\n      case 'cancelled':\n      case 'rejected':\n        return 'destructive';\n      default:\n        return 'secondary';\n    }\n  };\n\n  const getTypeIcon = (type: string) => {\n    switch (type) {\n      case 'job':\n        return <Briefcase className=\"h-4 w-4\" />;\n      case 'opportunity':\n        return <TrendingUp className=\"h-4 w-4\" />;\n      case 'bid':\n        return <DollarSign className=\"h-4 w-4\" />;\n      case 'contract':\n        return <FileText className=\"h-4 w-4\" />;\n      case 'assignment':\n        return <Users className=\"h-4 w-4\" />;\n      case 'compliance':\n        return <CheckCircle className=\"h-4 w-4\" />;\n      case 'rfp':\n        return <FileText className=\"h-4 w-4\" />;\n      default:\n        return <Briefcase className=\"h-4 w-4\" />;\n    }\n  };\n\n  if (loading) {\n    return (\n      <div className=\"h-full w-full p-lg\">\n        <div className=\"stack-lg\">\n          <div>\n            <h1 className=\"text-heading-3 color-foreground\">Jobs Overview</h1>\n            <p className=\"color-muted\">Loading jobs dashboard...</p>\n          </div>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-md\">\n            {[...Array(8)].map((_, i) => (\n              <Card key={i} className=\"p-lg\">\n                <div className=\"stack-sm\">\n                  <div className=\"h-6 w-6 bg-secondary rounded\" />\n                  <div className=\"h-4 w-20 bg-secondary rounded\" />\n                  <div className=\"h-8 w-16 bg-secondary rounded\" />\n                </div>\n              </Card>\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (!overviewData) {\n    return (\n      <div className=\"h-full w-full p-lg\">\n        <div className=\"text-center stack-lg\">\n          <AlertTriangle className=\"h-12 w-12 color-warning mx-auto\" />\n          <div>\n            <h2 className=\"text-heading-4 color-foreground\">Unable to Load Overview</h2>\n            <p className=\"color-muted\">There was an error loading the jobs overview data.</p>\n          </div>\n          <Button onClick={() => window.location.reload()}>\n            Retry\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"h-full w-full\">\n      <StateManagerProvider>\n        <div className=\"flex flex-col h-full stack-lg p-lg\">\n          {/* Header */}\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h1 className=\"text-heading-3 color-foreground\">Jobs Overview</h1>\n              <p className=\"color-muted\">Comprehensive dashboard for all job-related activities</p>\n            </div>\n            <div className=\"flex gap-sm\">\n              <Link href=\"/jobs\">\n                <Button variant=\"outline\">View All Jobs</Button>\n              </Link>\n              <Link href=\"/jobs/opportunities\">\n                <Button>New Opportunity</Button>\n              </Link>\n            </div>\n          </div>\n\n          {/* Statistics Cards */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-md\">\n            <Card className=\"p-lg\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-body-sm color-muted\">Total Jobs</p>\n                  <p className=\"text-heading-2 font-semibold color-foreground\">{overviewData.totalJobs}</p>\n                  <p className=\"text-body-xs color-muted\">{overviewData.activeJobs} active</p>\n                </div>\n                <Briefcase className=\"h-8 w-8 color-accent\" />\n              </div>\n            </Card>\n\n            <Card className=\"p-lg\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-body-sm color-muted\">Opportunities</p>\n                  <p className=\"text-heading-2 font-semibold color-foreground\">{overviewData.totalOpportunities}</p>\n                  <p className=\"text-body-xs color-muted\">Pipeline value</p>\n                </div>\n                <TrendingUp className=\"h-8 w-8 color-success\" />\n              </div>\n            </Card>\n\n            <Card className=\"p-lg\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-body-sm color-muted\">Active Bids</p>\n                  <p className=\"text-heading-2 font-semibold color-foreground\">{overviewData.activeBids}</p>\n                  <p className=\"text-body-xs color-muted\">In progress</p>\n                </div>\n                <DollarSign className=\"h-8 w-8 color-warning\" />\n              </div>\n            </Card>\n\n            <Card className=\"p-lg\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-body-sm color-muted\">Active Contracts</p>\n                  <p className=\"text-heading-2 font-semibold color-foreground\">{overviewData.activeContracts}</p>\n                  <p className=\"text-body-xs color-muted\">Running</p>\n                </div>\n                <FileText className=\"h-8 w-8 color-info\" />\n              </div>\n            </Card>\n\n            <Card className=\"p-lg\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-body-sm color-muted\">Assignments</p>\n                  <p className=\"text-heading-2 font-semibold color-foreground\">{overviewData.totalAssignments}</p>\n                  <p className=\"text-body-xs color-muted\">Total assigned</p>\n                </div>\n                <Users className=\"h-8 w-8 color-accent\" />\n              </div>\n            </Card>\n\n            <Card className=\"p-lg\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-body-sm color-muted\">Pending Compliance</p>\n                  <p className=\"text-heading-2 font-semibold color-foreground\">{overviewData.pendingCompliance}</p>\n                  <p className=\"text-body-xs color-muted\">Requires attention</p>\n                </div>\n                <AlertTriangle className=\"h-8 w-8 color-warning\" />\n              </div>\n            </Card>\n\n            <Card className=\"p-lg\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-body-sm color-muted\">Active RFPs</p>\n                  <p className=\"text-heading-2 font-semibold color-foreground\">{overviewData.activeRFPs}</p>\n                  <p className=\"text-body-xs color-muted\">Open for bids</p>\n                </div>\n                <FileText className=\"h-8 w-8 color-info\" />\n              </div>\n            </Card>\n\n            <Card className=\"p-lg\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-body-sm color-muted\">Completion Rate</p>\n                  <p className=\"text-heading-2 font-semibold color-foreground\">\n                    {overviewData.totalJobs > 0 ? Math.round((overviewData.completedJobs / overviewData.totalJobs) * 100) : 0}%\n                  </p>\n                  <p className=\"text-body-xs color-muted\">Jobs completed</p>\n                </div>\n                <CheckCircle className=\"h-8 w-8 color-success\" />\n              </div>\n            </Card>\n          </div>\n\n          {/* Recent Activity */}\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-lg\">\n            <Card className=\"p-lg\">\n              <div className=\"stack-md\">\n                <div className=\"flex items-center justify-between\">\n                  <h3 className=\"text-heading-4 color-foreground\">Recent Activity</h3>\n                  <Link href=\"/jobs\">\n                    <Button variant=\"ghost\" size=\"sm\">View All</Button>\n                  </Link>\n                </div>\n                \n                <div className=\"stack-sm\">\n                  {overviewData.recentActivity.length === 0 ? (\n                    <div className=\"text-center p-lg\">\n                      <Clock className=\"h-8 w-8 color-muted mx-auto mb-sm\" />\n                      <p className=\"color-muted\">No recent activity</p>\n                    </div>\n                  ) : (\n                    overviewData.recentActivity.map((activity) => (\n                      <div key={activity.id} className=\"flex items-center justify-between p-sm border border-border rounded-md\">\n                        <div className=\"flex items-center gap-sm\">\n                          {getTypeIcon(activity.type)}\n                          <div>\n                            <p className=\"text-body-sm font-medium color-foreground\">{activity.title}</p>\n                            <p className=\"text-body-xs color-muted\">\n                              {activity.type} • {new Date(activity.updatedAt).toLocaleDateString()}\n                            </p>\n                          </div>\n                        </div>\n                        <Badge variant={getStatusColor(activity.status)}>\n                          {activity.status}\n                        </Badge>\n                      </div>\n                    ))\n                  )}\n                </div>\n              </div>\n            </Card>\n\n            {/* Quick Actions */}\n            <Card className=\"p-lg\">\n              <div className=\"stack-md\">\n                <h3 className=\"text-heading-4 color-foreground\">Quick Actions</h3>\n                \n                <div className=\"grid grid-cols-2 gap-sm\">\n                  <Link href=\"/jobs/opportunities\">\n                    <Button variant=\"outline\" className=\"w-full justify-start\">\n                      <Plus className=\"h-4 w-4 mr-xs\" />\n                      New Opportunity\n                    </Button>\n                  </Link>\n                  \n                  <Link href=\"/jobs/rfps\">\n                    <Button variant=\"outline\" className=\"w-full justify-start\">\n                      <Plus className=\"h-4 w-4 mr-xs\" />\n                      Create RFP\n                    </Button>\n                  </Link>\n                  \n                  <Link href=\"/jobs/assignments\">\n                    <Button variant=\"outline\" className=\"w-full justify-start\">\n                      <Users className=\"h-4 w-4 mr-xs\" />\n                      Assign Jobs\n                    </Button>\n                  </Link>\n                  \n                  <Link href=\"/jobs/compliance\">\n                    <Button variant=\"outline\" className=\"w-full justify-start\">\n                      <CheckCircle className=\"h-4 w-4 mr-xs\" />\n                      Check Compliance\n                    </Button>\n                  </Link>\n                  \n                  <Link href=\"/jobs/contracts\">\n                    <Button variant=\"outline\" className=\"w-full justify-start\">\n                      <FileText className=\"h-4 w-4 mr-xs\" />\n                      Manage Contracts\n                    </Button>\n                  </Link>\n                  \n                  <Link href=\"/jobs/bids\">\n                    <Button variant=\"outline\" className=\"w-full justify-start\">\n                      <DollarSign className=\"h-4 w-4 mr-xs\" />\n                      Review Bids\n                    </Button>\n                  </Link>\n                </div>\n              </div>\n            </Card>\n          </div>\n        </div>\n      </StateManagerProvider>\n    </div>\n  );\n}\n  totalAssignments: number;\n  activeRFPs: number;\n}\n\ninterface RecentActivity {\n  id: string;\n  type: 'job' | 'opportunity' | 'bid' | 'contract' | 'assignment' | 'compliance' | 'rfp';\n  title: string;\n  status: string;\n  updatedAt: string;\n  priority?: 'high' | 'medium' | 'low';\n}\n\nconst QUICK_ACTIONS = [\n  {\n    title: 'Create New Job',\n    description: 'Start a new job posting',\n    href: '/jobs?action=create',\n    icon: BriefcaseIcon,\n    color: 'bg-accent',\n  },\n  {\n    title: 'Browse Opportunities',\n    description: 'View available opportunities',\n    href: '/jobs/opportunities',\n    icon: ClipboardDocumentListIcon,\n    color: 'bg-success',\n  },\n  {\n    title: 'Submit New Bid',\n    description: 'Create a new bid proposal',\n    href: '/jobs/bids?action=create',\n    icon: DocumentTextIcon,\n    color: 'bg-secondary',\n  },\n  {\n    title: 'Review Compliance',\n    description: 'Check compliance status',\n    href: '/jobs/compliance',\n    icon: CheckCircleIcon,\n    color: 'bg-warning',\n  },\n];\n\nexport function OverviewClient({ user, orgId, translations }: OverviewClientProps) {\n  const [stats, setStats] = useState<JobsStats | null>(null);\n  const [recentActivity, setRecentActivity] = useState<RecentActivity[]>([]);\n  const [loading, setLoading] = useState(true);\n  const supabase = createBrowserClient();\n\n  useEffect(() => {\n    loadOverviewData();\n  }, [orgId]);\n\n  const loadOverviewData = async () => {\n    try {\n      setLoading(true);\n\n      // Load jobs stats\n      const [\n        jobsResult,\n        opportunitiesResult,\n        bidsResult,\n        contractsResult,\n        assignmentsResult,\n        complianceResult,\n        rfpsResult\n      ] = await Promise.all([\n        supabase.from('jobs').select('status').eq('organization_id', orgId),\n        supabase.from('opportunities').select('status').eq('organization_id', orgId),\n        supabase.from('job_bids').select('status').eq('organization_id', orgId),\n        supabase.from('job_contracts').select('status').eq('organization_id', orgId),\n        supabase.from('job_assignments').select('status').eq('organization_id', orgId),\n        supabase.from('job_compliance').select('status').eq('organization_id', orgId),\n        supabase.from('rfps').select('status').eq('organization_id', orgId)\n      ]);\n\n      const jobs = jobsResult.data || [];\n      const opportunities = opportunitiesResult.data || [];\n      const bids = bidsResult.data || [];\n      const contracts = contractsResult.data || [];\n      const assignments = assignmentsResult.data || [];\n      const compliance = complianceResult.data || [];\n      const rfps = rfpsResult.data || [];\n\n      setStats({\n        totalJobs: jobs.length,\n        activeJobs: jobs.filter((j: unknown) => j.status === 'in_progress').length,\n        completedJobs: jobs.filter((j: unknown) => j.status === 'completed').length,\n        draftJobs: jobs.filter((j: unknown) => j.status === 'draft').length,\n        totalOpportunities: opportunities.length,\n        activeBids: bids.filter((b: unknown) => b.status === 'submitted' || b.status === 'under_review').length,\n        activeContracts: contracts.filter((c: unknown) => c.status === 'active').length,\n        pendingCompliance: compliance.filter((c: unknown) => c.status === 'pending').length,\n        totalAssignments: assignments.length,\n        activeRFPs: rfps.filter((r: unknown) => r.status === 'open').length,\n      });\n\n      // Load recent activity (combining multiple sources)\n      const recentJobs = await supabase\n        .from('jobs')\n        .select('id, title, status, updated_at')\n        .eq('organization_id', orgId)\n        .order('updated_at', { ascending: false })\n        .limit(3);\n\n      const recentOpportunities = await supabase\n        .from('opportunities')\n        .select('id, title, status, updated_at')\n        .eq('organization_id', orgId)\n        .order('updated_at', { ascending: false })\n        .limit(2);\n\n      const activity: RecentActivity[] = [\n        ...(recentJobs.data || []).map((job: unknown) => ({\n          id: job.id,\n          type: 'job' as const,\n          title: job.title,\n          status: job.status,\n          updatedAt: job.updated_at,\n        })),\n        ...(recentOpportunities.data || []).map((opp: unknown) => ({\n          id: opp.id,\n          type: 'opportunity' as const,\n          title: opp.title,\n          status: opp.status,\n          updatedAt: opp.updated_at,\n        })),\n      ];\n\n      // Sort by updated_at and take top 5\n      activity.sort((a, b) => new Date(b.updatedAt).getTime() - new Date(a.updatedAt).getTime());\n      setRecentActivity(activity.slice(0, 5));\n\n    } catch (error) {\n      console.error('Error loading overview data:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status.toLowerCase()) {\n      case 'active': return 'bg-success/10 color-success';\n      case 'completed': return 'bg-accent/10 color-accent';\n      case 'pending': return 'bg-warning/10 color-warning';\n      case 'draft': return 'bg-secondary/10 color-muted';\n      case 'cancelled': return 'bg-destructive/10 color-destructive';\n      default: return 'bg-secondary/10 color-muted';\n    }\n  };\n\n  const getTypeIcon = (type: string) => {\n    switch (type) {\n      case 'job':\n        return BriefcaseIcon;\n      case 'opportunity':\n        return ClipboardDocumentListIcon;\n      case 'bid':\n        return DocumentTextIcon;\n      case 'contract':\n        return CheckCircleIcon;\n      case 'assignment':\n        return CalendarIcon;\n      case 'compliance':\n        return ExclamationTriangleIcon;\n      default:\n        return BriefcaseIcon;\n    }\n  };\n\n  return (\n    <div className=\"stack-lg\">\n      {/* Header */}\n      <div>\n        <h1 className=\"text-heading-3 text-heading-3 color-foreground\">{translations.title}</h1>\n        <p className=\"text-body-sm color-foreground/70 mt-xs\">{translations.subtitle}</p>\n      </div>\n\n      {/* Stats Grid */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-md\">\n        {loading ? (\n          Array.from({ length: 8 }).map((_, i) => (\n            <Card key={i} className=\"p-md\">\n              <Skeleton className=\"h-4 w-20 mb-sm\" />\n              <Skeleton className=\"h-8 w-12\" />\n            </Card>\n          ))\n        ) : (\n          <>\n            <Card className=\"p-md\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-body-sm form-label color-foreground/70\">Total Jobs</p>\n                  <p className=\"text-heading-3 text-heading-3 color-foreground\">{stats?.totalJobs || 0}</p>\n                </div>\n                <BriefcaseIcon className=\"h-8 w-8 color-accent\" />\n              </div>\n            </Card>\n\n            <Card className=\"p-md\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-body-sm form-label color-foreground/70\">Active Jobs</p>\n                  <p className=\"text-body-sm color-muted\">{stats?.activeJobs || 0} active</p>\n                </div>\n                <ChartBarIcon className=\"h-8 w-8 color-success\" />\n              </div>\n            </Card>\n\n            <Card className=\"p-md\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"color-muted\">Monitor job performance and manage opportunities.</p>\n                  <p className=\"text-heading-3 text-heading-3 color-success\">{stats?.totalOpportunities || 0}</p>\n                </div>\n                <ClipboardDocumentListIcon className=\"h-8 w-8 color-success\" />\n              </div>\n            </Card>\n\n            <Card className=\"p-md\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-body-sm form-label color-foreground/70\">Active Bids</p>\n                  <p className=\"text-body-sm color-muted\">{stats?.activeBids || 0} active bids</p>\n                </div>\n                <DocumentTextIcon className=\"h-8 w-8 color-secondary\" />\n              </div>\n            </Card>\n\n            <Card className=\"p-md\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <span className=\"text-body-sm color-muted\">tracts</span>\n                  <p className=\"text-heading-3 text-heading-3 color-secondary\">{stats?.activeContracts || 0}</p>\n                </div>\n                <CheckCircleIcon className=\"h-8 w-8 color-accent\" />\n              </div>\n            </Card>\n\n            <Card className=\"p-md\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-body-sm form-label color-foreground/70\">Assignments</p>\n                  <p className=\"text-body-sm color-muted\">{stats?.totalAssignments || 0} assignments</p>\n                </div>\n                <DocumentTextIcon className=\"h-8 w-8 color-warning\" />\n              </div>\n            </Card>\n\n            <Card className=\"p-md\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-body-sm color-muted\">Pending Compliance</p>\n                  <h1 className=\"text-heading-3 text-heading-3 color-foreground\">{stats?.pendingCompliance || 0}</h1>\n                </div>\n                <ExclamationTriangleIcon className=\"h-8 w-8 color-warning\" />\n              </div>\n            </Card>\n\n            <Card className=\"p-md\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-body-sm form-label color-foreground/70\">Active RFPs</p>\n                  <p className=\"text-body-sm color-muted\">{stats?.activeRFPs || 0} active RFPs</p>\n                </div>\n                <DocumentTextIcon className=\"h-8 w-8 color-accent\" />\n              </div>\n            </Card>\n          </>\n        )}\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-lg\">\n        {/* Quick Actions */}\n        <Card title=\"Quick Actions\" className=\"p-lg\">\n          <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-md\">\n            {QUICK_ACTIONS.map((action: unknown) => {\n              const Icon = action.icon;\n              return (\n                <Link key={action.title} href=\"#\">\n                  <div className=\"flex items-center p-md rounded-lg border border-border hover:bg-accent transition-colors cursor-pointer\">\n                    <div className={`p-sm rounded-lg ${action.color} text-background mr-sm`}>\n                      <Icon className=\"h-5 w-5\" />\n                    </div>\n                    <div className=\"flex-1 min-w-0\">\n                      <p className=\"text-body-sm form-label color-foreground truncate\">\n                        {action.title}\n                      </p>\n                      <p className=\"text-body-sm color-foreground/70 truncate\">\n                        {action.description}\n                      </p>\n                    </div>\n                    <ArrowRightIcon className=\"h-4 w-4 color-foreground/40\" />\n                  </div>\n                </Link>\n              );\n            })}\n          </div>\n        </Card>\n\n        {/* Recent Activity */}\n        <Card title=\"Recent Activity\" className=\"p-lg\">\n          {loading ? (\n            <div className=\"stack-sm\">\n              {Array.from({ length: 5 }).map((_, i) => (\n                <div key={i} className=\"flex items-center cluster-sm\">\n                  <div className=\"w-3 h-3 bg-secondary rounded\"></div>\n                  <Skeleton className=\"h-5 w-16\" />\n                </div>\n              ))}\n            </div>\n          ) : recentActivity.length > 0 ? (\n            <div className=\"stack-sm\">\n              {recentActivity.map((activity: unknown) => {\n                const Icon = getTypeIcon(activity.type);\n                return (\n                  <div key={activity.id} className=\"flex items-center justify-between p-sm rounded-lg border border-border\">\n                    <div className=\"flex items-center cluster-sm\">\n                      <Icon className=\"h-5 w-5 color-foreground/60\" />\n                      <div>\n                        <p className=\"text-body-sm form-label color-foreground truncate\">\n                          {activity.title}\n                        </p>\n                        <p className=\"text-body-sm color-foreground/70 capitalize\">\n                          {activity.type} • {new Date(activity.updatedAt).toLocaleDateString()}\n                        </p>\n                      </div>\n                    </div>\n                    <Badge className={getStatusColor(activity.status)}>\n                      {activity.status.replace('_', ' ')}\n                    </Badge>\n                  </div>\n                );\n              })}\n            </div>\n          ) : (\n            <div className=\"text-center py-xl\">\n              <BriefcaseIcon className=\"h-12 w-12 color-muted mx-auto mb-sm\" />\n              <p className=\"text-body-sm color-muted\">No recent activity</p>\n              <p className=\"text-body-sm color-muted mt-xs\">\n                Create your first job to get started\n              </p>\n            </div>\n          )}\n          \n          {recentActivity.length > 0 && (\n            <div className=\"mt-md pt-md border-t border-border\">\n              <Link href=\"/jobs\">\n                <Button className=\"w-full\">\n                  View All Jobs\n                  <ArrowRightIcon className=\"h-4 w-4 ml-sm\" />\n                </Button>\n              </Link>\n            </div>\n          )}\n        </Card>\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ghxstship/apps/web/app/(app)/(shell)/jobs/rfps/RFPsClient.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadRFPs'. Either include it or remove the dependency array.","line":91,"column":6,"nodeType":"ArrayExpression","endLine":91,"endColumn":13,"suggestions":[{"desc":"Update the dependencies array to be: [loadRFPs, orgId]","fix":{"range":[2629,2636],"text":"[loadRFPs, orgId]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { User, FileText, Settings, Award, Calendar, TrendingUp, Activity, Clock, Plus, Search, Play, Trash2 } from \"lucide-react\";\nimport { useState, useEffect } from 'react';\nimport { User } from '@supabase/supabase-js';\nimport { createBrowserClient } from '@ghxstship/auth';\nimport { Card, Button, Badge, UnifiedInput, Skeleton } from '@ghxstship/ui';\nimport {\n  MagnifyingGlassIcon,\n  PlusIcon,\n  EyeIcon,\n  PencilIcon,\n  DocumentTextIcon,\n  ClockIcon,\n  CheckCircleIcon,\n  XCircleIcon,\n  ExclamationTriangleIcon,\n  CalendarIcon,\n  BuildingOfficeIcon,\n  CurrencyDollarIcon,\n  ArrowDownTrayIcon,\n  PaperAirplaneIcon,\n  UsersIcon,\n} from '@heroicons/react/24/outline';\n\ninterface RFPsClientProps {\n  user: User;\n  orgId: string;\n  translations: {\n    title: string;\n    subtitle: string;\n  };\n}\n\ninterface RFP {\n  id: string;\n  title: string;\n  description: string;\n  issuer_organization: string;\n  status: 'draft' | 'published' | 'open' | 'closed' | 'awarded' | 'cancelled';\n  type: 'services' | 'products' | 'consulting' | 'construction' | 'technology' | 'other';\n  budget_min?: number;\n  budget_max?: number;\n  currency: string;\n  submission_deadline: string;\n  project_start_date?: string;\n  project_duration?: string;\n  requirements?: string[];\n  evaluation_criteria?: string[];\n  contact_email?: string;\n  document_url?: string;\n  responses_count?: number;\n  published_at?: string;\n  created_at: string;\n  updated_at: string;\n  organization_id: string;\n}\n\nconst STATUS_OPTIONS = [\n  { value: 'all', label: 'All Statuses' },\n  { value: 'draft', label: 'Draft' },\n  { value: 'published', label: 'Published' },\n  { value: 'open', label: 'Open' },\n  { value: 'closed', label: 'Closed' },\n  { value: 'awarded', label: 'Awarded' },\n  { value: 'cancelled', label: 'Cancelled' },\n];\n\nconst TYPE_OPTIONS = [\n  { value: 'all', label: 'All Types' },\n  { value: 'services', label: 'Services' },\n  { value: 'products', label: 'Products' },\n  { value: 'consulting', label: 'Consulting' },\n  { value: 'construction', label: 'Construction' },\n  { value: 'technology', label: 'Technology' },\n  { value: 'other', label: 'Other' },\n];\n\nexport function RFPsClient({ user, orgId, translations }: RFPsClientProps) {\n  const [rfps, setRfps] = useState<RFP[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [statusFilter, setStatusFilter] = useState('all');\n  const [typeFilter, setTypeFilter] = useState('all');\n  const [showCreateDialog, setShowCreateDialog] = useState(false);\n\n  const supabase = createBrowserClient();\n\n  useEffect(() => {\n    loadRFPs();\n  }, [orgId]);\n\n  const loadRFPs = async () => {\n    try {\n      setLoading(true);\n      \n      const { data, error } = await supabase\n        .from('rfps')\n        .select('*')\n        .eq('organization_id', orgId)\n        .order('created_at', { ascending: false });\n\n      if (error) throw error;\n      setRfps(data || []);\n    } catch (error) {\n      console.error('Error loading RFPs:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const filteredRFPs = rfps.filter((rfp: unknown) => {\n    const matchesSearch = rfp.title.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         rfp.description.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         rfp.issuer_organization.toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesStatus = statusFilter === 'all' || rfp.status === statusFilter;\n    const matchesType = typeFilter === 'all' || rfp.type === typeFilter;\n\n    return matchesSearch && matchesStatus && matchesType;\n  });\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'draft':\n        return 'bg-secondary color-muted';\n      case 'published':\n        return 'bg-accent/10 color-accent';\n      case 'open':\n        return 'bg-success/10 color-success';\n      case 'closed':\n        return 'bg-warning/10 color-warning';\n      case 'awarded':\n        return 'bg-secondary/10 color-secondary';\n      case 'cancelled':\n        return 'bg-destructive/10 color-destructive';\n      default:\n        return 'bg-secondary color-muted';\n    }\n  };\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case 'draft':\n        return DocumentTextIcon;\n      case 'published':\n        return PaperAirplaneIcon;\n      case 'open':\n        return CheckCircleIcon;\n      case 'closed':\n        return ClockIcon;\n      case 'awarded':\n        return CheckCircleIcon;\n      case 'cancelled':\n        return XCircleIcon;\n      default:\n        return DocumentTextIcon;\n    }\n  };\n\n  const getTypeColor = (type: string) => {\n    switch (type) {\n      case 'services':\n        return 'bg-accent/10 color-accent';\n      case 'products':\n        return 'bg-success/10 color-success';\n      case 'consulting':\n        return 'bg-secondary/10 color-secondary';\n      case 'construction':\n        return 'bg-warning/10 color-warning';\n      case 'technology':\n        return 'bg-accent/10 color-accent';\n      case 'other':\n        return 'bg-secondary color-muted';\n      default:\n        return 'bg-secondary color-muted';\n    }\n  };\n\n  const formatBudget = (min?: number, max?: number, currency: string = 'USD') => {\n    const formatter = new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: currency,\n    });\n    \n    if (!min && !max) return 'Budget not specified';\n    if (min && max) return `${formatter.format(min)} - ${formatter.format(max)}`;\n    if (min) return `From ${formatter.format(min)}`;\n    if (max) return `Up to ${formatter.format(max)}`;\n    return 'Budget not specified';\n  };\n\n  const isDeadlineApproaching = (deadline: string) => {\n    const deadlineDate = new Date(deadline);\n    const now = new Date();\n    const diffDays = Math.ceil((deadlineDate.getTime() - now.getTime()) / (1000 * 60 * 60 * 24));\n    return diffDays <= 7 && diffDays >= 0;\n  };\n\n  const isOverdue = (deadline: string) => {\n    return new Date(deadline) < new Date();\n  };\n\n  return (\n    <div className=\"stack-lg\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-heading-3 text-heading-3 color-foreground\">{translations.title}</h1>\n          <p className=\"text-body-sm color-foreground/70 mt-xs\">{translations.subtitle}</p>\n        </div>\n        <Button onClick={() => setShowCreateDialog(true)}>\n          <PlusIcon className=\"h-4 w-4 mr-sm\" />\n          Create RFP\n        </Button>\n      </div>\n\n      {/* Filters */}\n      <Card className=\"p-md\">\n        <div className=\"flex flex-col sm:flex-row gap-md\">\n          <div className=\"flex-1\">\n            <UnifiedInput               placeholder=\"Search RFPs...\"\n              value={searchTerm}\n              onChange={(e: React.ChangeEvent<HTMLInputElement>) => setSearchTerm(e.target.value)}\n              className=\"w-full\"\n            />\n          </div>\n          <div className=\"flex gap-sm\">\n            <select\n              value={statusFilter}\n              onChange={(e: React.ChangeEvent<HTMLSelectElement>) => setStatusFilter(e.target.value)}\n              className=\" px-md py-sm border border-border rounded-md bg-background\"\n            >\n              {STATUS_OPTIONS.map((option: unknown) => (\n                <option key={option.value} value={option.value}>\n                  {option.label}\n                </option>\n              ))}\n            </select>\n            <select\n              value={typeFilter}\n              onChange={(e: React.ChangeEvent<HTMLSelectElement>) => setTypeFilter(e.target.value)}\n              className=\" px-md py-sm border border-border rounded-md bg-background\"\n            >\n              {TYPE_OPTIONS.map((option: unknown) => (\n                <option key={option.value} value={option.value}>\n                  {option.label}\n                </option>\n              ))}\n            </select>\n          </div>\n        </div>\n      </Card>\n\n      {/* Stats */}\n      <div className=\"grid grid-cols-1 md:grid-cols-5 gap-md\">\n        <Card className=\"p-md\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-body-sm form-label color-foreground/70\">Total RFPs</p>\n              <p className=\"text-heading-3 text-heading-3 color-foreground\">{rfps.length}</p>\n            </div>\n            <DocumentTextIcon className=\"h-8 w-8 color-accent\" />\n          </div>\n        </Card>\n        <Card className=\"p-md\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-body-sm form-label color-foreground/70\">Open</p>\n              <p className=\"text-heading-3 text-heading-3 color-success\">\n                {rfps.filter(r => r.status === 'open').length}\n              </p>\n            </div>\n            <CheckCircleIcon className=\"h-8 w-8 color-success\" />\n          </div>\n        </Card>\n        <Card className=\"p-md\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-body-sm form-label color-foreground/70\">Published</p>\n              <p className=\"text-heading-3 text-heading-3 color-accent\">\n                {rfps.filter(r => r.status === 'published').length}\n              </p>\n            </div>\n            <PaperAirplaneIcon className=\"h-8 w-8 color-accent\" />\n          </div>\n        </Card>\n        <Card className=\"p-md\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-body-sm form-label color-foreground/70\">Awarded</p>\n              <p className=\"text-heading-3 text-heading-3 color-secondary\">\n                {rfps.filter(r => r.status === 'awarded').length}\n              </p>\n            </div>\n            <CheckCircleIcon className=\"h-8 w-8 color-secondary\" />\n          </div>\n        </Card>\n        <Card className=\"p-md\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-body-sm form-label color-foreground/70\">Total Responses</p>\n              <p className=\"text-heading-3 text-heading-3 color-warning\">\n                {rfps.reduce((sum, r) => sum + (r.responses_count || 0), 0)}\n              </p>\n            </div>\n            <UsersIcon className=\"h-8 w-8 color-warning\" />\n          </div>\n        </Card>\n      </div>\n\n      {/* RFPs List */}\n      <div className=\"stack-md\">\n        {loading ? (\n          Array.from({ length: 5 }).map((_, i) => (\n            <Card key={i} className=\"p-lg\">\n              <div className=\"flex items-start justify-between\">\n                <div className=\"flex-1\">\n                  <Skeleton className=\"h-5 w-64 mb-sm\" />\n                  <Skeleton className=\"h-4 w-32 mb-sm\" />\n                  <Skeleton className=\"h-4 w-full mb-sm\" />\n                  <Skeleton className=\"h-4 w-3/4\" />\n                </div>\n                <div className=\"flex gap-sm\">\n                  <Skeleton className=\"h-6 w-16\" />\n                  <Skeleton className=\"h-6 w-20\" />\n                </div>\n              </div>\n            </Card>\n          ))\n        ) : filteredRFPs.length > 0 ? (\n          filteredRFPs.map((rfp: unknown) => {\n            const StatusIcon = getStatusIcon(rfp.status);\n            const isUrgent = isDeadlineApproaching(rfp.submission_deadline);\n            const isLate = isOverdue(rfp.submission_deadline);\n\n            return (\n              <Card key={rfp.id} className={`p-lg hover:shadow-elevated transition-shadow ${isLate ? 'border-destructive/20 bg-destructive/5' : isUrgent ? 'border-warning/20 bg-warning/5' : ''}`}>\n                <div className=\"flex items-start justify-between\">\n                  <div className=\"flex-1\">\n                    <div className=\"flex items-start justify-between mb-sm\">\n                      <div>\n                        <h3 className=\"text-body text-heading-4 color-foreground mb-xs flex items-center gap-sm\">\n                          <StatusIcon className=\"h-5 w-5 color-foreground/60\" />\n                          {rfp.title}\n                          {(isUrgent || isLate) && (\n                            <ExclamationTriangleIcon className={`h-4 w-4 ${isLate ? 'color-destructive' : 'color-warning'}`} />\n                          )}\n                        </h3>\n                        <div className=\"flex items-center gap-sm text-body-sm color-foreground/70\">\n                          <BuildingOfficeIcon className=\"h-4 w-4\" />\n                          <span>{rfp.issuer_organization}</span>\n                          {rfp.responses_count !== undefined && (\n                            <>\n                              <span>•</span>\n                              <span>{rfp.responses_count} responses</span>\n                            </>\n                          )}\n                        </div>\n                      </div>\n                      <div className=\"flex gap-sm\">\n                        <Badge className={getStatusColor(rfp.status)}>\n                          {rfp.status.replace('_', ' ')}\n                        </Badge>\n                        <Badge className={getTypeColor(rfp.type)}>\n                          {rfp.type}\n                        </Badge>\n                      </div>\n                    </div>\n\n                    <p className=\"text-body-sm color-foreground/80 mb-sm line-clamp-2\">\n                      {rfp.description}\n                    </p>\n\n                    <div className=\"flex items-center gap-lg text-body-sm color-foreground/70 mb-sm\">\n                      <div className=\"flex items-center gap-xs\">\n                        <CurrencyDollarIcon className=\"h-4 w-4\" />\n                        <span>{formatBudget(rfp.budget_min, rfp.budget_max, rfp.currency)}</span>\n                      </div>\n                      <div className={`flex items-center gap-xs ${isLate ? 'color-destructive' : isUrgent ? 'color-warning' : ''}`}>\n                        <CalendarIcon className=\"h-4 w-4\" />\n                        <span>\n                          {isLate ? 'Overdue: ' : 'Deadline: '}\n                          {new Date(rfp.submission_deadline).toLocaleDateString()}\n                        </span>\n                      </div>\n                      {rfp.project_start_date && (\n                        <div className=\"flex items-center gap-xs\">\n                          <span>Start: {new Date(rfp.project_start_date).toLocaleDateString()}</span>\n                        </div>\n                      )}\n                      {rfp.project_duration && (\n                        <div className=\"flex items-center gap-xs\">\n                          <ClockIcon className=\"h-4 w-4\" />\n                          <span>{rfp.project_duration}</span>\n                        </div>\n                      )}\n                    </div>\n\n                    {rfp.requirements && rfp.requirements.length > 0 && (\n                      <div className=\"mb-sm\">\n                        <span className=\"text-body-sm form-label color-foreground/70 mb-xs block\">Key Requirements:</span>\n                        <div className=\"stack-md\">\n                          {rfp.requirements.slice(0, 3).map((req, index) => (\n                            <div key={index} className=\"text-body-sm color-foreground/70 flex items-start gap-sm\">\n                              <span className=\"color-foreground/40\">•</span>\n                              <span>{req}</span>\n                            </div>\n                          ))}\n                          {rfp.requirements.length > 3 && (\n                            <div className=\"text-body-sm color-foreground/50\">\n                              +{rfp.requirements.length - 3} more requirements\n                            </div>\n                          )}\n                        </div>\n                      </div>\n                    )}\n\n                    {rfp.evaluation_criteria && rfp.evaluation_criteria.length > 0 && (\n                      <div className=\"mb-sm\">\n                        <span className=\"text-body-sm form-label color-foreground/70 mb-xs block\">Evaluation Criteria:</span>\n                        <div className=\"flex flex-wrap gap-xs\">\n                          {rfp.evaluation_criteria.slice(0, 4).map((criteria, index) => (\n                            <Badge key={index} variant=\"secondary\">\n                              {criteria}\n                            </Badge>\n                          ))}\n                          {rfp.evaluation_criteria.length > 4 && (\n                            <Badge variant=\"secondary\">\n                              +{rfp.evaluation_criteria.length - 4} more\n                            </Badge>\n                          )}\n                        </div>\n                      </div>\n                    )}\n                  </div>\n                </div>\n\n                <div className=\"flex items-center justify-between mt-md pt-md border-t border-border\">\n                  <div className=\"text-body-sm color-foreground/50\">\n                    Created: {new Date(rfp.created_at).toLocaleDateString()}\n                    {rfp.published_at && (\n                      <span> • Published: {new Date(rfp.published_at).toLocaleDateString()}</span>\n                    )}\n                    {rfp.contact_email && (\n                      <span> • Contact: {rfp.contact_email}</span>\n                    )}\n                  </div>\n                  <div className=\"flex gap-sm\">\n                    <Button>\n                      <EyeIcon className=\"h-4 w-4 mr-xs\" />\n                      View\n                    </Button>\n                    <Button>\n                      <PencilIcon className=\"h-4 w-4 mr-xs\" />\n                      Edit\n                    </Button>\n                    {rfp.document_url && (\n                      <Button>\n                        <ArrowDownTrayIcon className=\"h-4 w-4 mr-xs\" />\n                        Download\n                      </Button>\n                    )}\n                    {rfp.status === 'open' && (\n                      <Button>\n                        <PaperAirplaneIcon className=\"h-4 w-4 mr-xs\" />\n                        Respond\n                      </Button>\n                    )}\n                  </div>\n                </div>\n              </Card>\n            );\n          })\n        ) : (\n          <Card className=\"p-2xl text-center\">\n            <DocumentTextIcon className=\"h-12 w-12 color-foreground/30 mx-auto mb-md\" />\n            <h3 className=\"text-body form-label color-foreground mb-sm\">No RFPs found</h3>\n            <p className=\"text-body-sm color-foreground/70 mb-md\">\n              {searchTerm || statusFilter !== 'all' || typeFilter !== 'all'\n                ? 'Try adjusting your filters or search terms.'\n                : 'Get started by creating your first RFP.'}\n            </p>\n            <Button onClick={() => setShowCreateDialog(true)}>\n              <PlusIcon className=\"h-4 w-4 mr-sm\" />\n              Create RFP\n            </Button>\n          </Card>\n        )}\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ghxstship/apps/web/app/(app)/(shell)/jobs/rfps/types.ts","messages":[{"ruleId":"no-restricted-syntax","severity":2,"message":"Do not create shadow components. Import and re-export from @ghxstship/ui if needed","line":4,"column":1,"nodeType":"ExportNamedDeclaration","messageId":"restrictedSyntax","endLine":4,"endColumn":69},{"ruleId":"no-restricted-syntax","severity":2,"message":"Do not create shadow components. Import and re-export from @ghxstship/ui if needed","line":5,"column":1,"nodeType":"ExportNamedDeclaration","messageId":"restrictedSyntax","endLine":5,"endColumn":108},{"ruleId":"no-restricted-syntax","severity":2,"message":"Do not create shadow components. Import and re-export from @ghxstship/ui if needed","line":6,"column":1,"nodeType":"ExportNamedDeclaration","messageId":"restrictedSyntax","endLine":6,"endColumn":66},{"ruleId":"no-restricted-syntax","severity":2,"message":"Do not create shadow components. Import and re-export from @ghxstship/ui if needed","line":7,"column":1,"nodeType":"ExportNamedDeclaration","messageId":"restrictedSyntax","endLine":7,"endColumn":114},{"ruleId":"no-restricted-syntax","severity":2,"message":"Do not create shadow components. Import and re-export from @ghxstship/ui if needed","line":10,"column":1,"nodeType":"ExportNamedDeclaration","messageId":"restrictedSyntax","endLine":39,"endColumn":2},{"ruleId":"no-restricted-syntax","severity":2,"message":"Do not create shadow components. Import and re-export from @ghxstship/ui if needed","line":42,"column":1,"nodeType":"ExportNamedDeclaration","messageId":"restrictedSyntax","endLine":47,"endColumn":2},{"ruleId":"no-restricted-syntax","severity":2,"message":"Do not create shadow components. Import and re-export from @ghxstship/ui if needed","line":50,"column":1,"nodeType":"ExportNamedDeclaration","messageId":"restrictedSyntax","endLine":71,"endColumn":2},{"ruleId":"no-restricted-syntax","severity":2,"message":"Do not create shadow components. Import and re-export from @ghxstship/ui if needed","line":73,"column":1,"nodeType":"ExportNamedDeclaration","messageId":"restrictedSyntax","endLine":78,"endColumn":2},{"ruleId":"no-restricted-syntax","severity":2,"message":"Do not create shadow components. Import and re-export from @ghxstship/ui if needed","line":81,"column":1,"nodeType":"ExportNamedDeclaration","messageId":"restrictedSyntax","endLine":96,"endColumn":2},{"ruleId":"no-restricted-syntax","severity":2,"message":"Do not create shadow components. Import and re-export from @ghxstship/ui if needed","line":99,"column":1,"nodeType":"ExportNamedDeclaration","messageId":"restrictedSyntax","endLine":111,"endColumn":2},{"ruleId":"no-restricted-syntax","severity":2,"message":"Do not create shadow components. Import and re-export from @ghxstship/ui if needed","line":114,"column":1,"nodeType":"ExportNamedDeclaration","messageId":"restrictedSyntax","endLine":123,"endColumn":2},{"ruleId":"no-restricted-syntax","severity":2,"message":"Do not create shadow components. Import and re-export from @ghxstship/ui if needed","line":126,"column":1,"nodeType":"ExportNamedDeclaration","messageId":"restrictedSyntax","endLine":132,"endColumn":2},{"ruleId":"no-restricted-syntax","severity":2,"message":"Do not create shadow components. Import and re-export from @ghxstship/ui if needed","line":135,"column":1,"nodeType":"ExportNamedDeclaration","messageId":"restrictedSyntax","endLine":146,"endColumn":2},{"ruleId":"no-restricted-syntax","severity":2,"message":"Do not create shadow components. Import and re-export from @ghxstship/ui if needed","line":149,"column":1,"nodeType":"ExportNamedDeclaration","messageId":"restrictedSyntax","endLine":159,"endColumn":2},{"ruleId":"no-restricted-syntax","severity":2,"message":"Do not create shadow components. Import and re-export from @ghxstship/ui if needed","line":162,"column":1,"nodeType":"ExportNamedDeclaration","messageId":"restrictedSyntax","endLine":171,"endColumn":2},{"ruleId":"no-restricted-syntax","severity":2,"message":"Do not create shadow components. Import and re-export from @ghxstship/ui if needed","line":174,"column":1,"nodeType":"ExportNamedDeclaration","messageId":"restrictedSyntax","endLine":189,"endColumn":2},{"ruleId":"no-restricted-syntax","severity":2,"message":"Do not create shadow components. Import and re-export from @ghxstship/ui if needed","line":192,"column":1,"nodeType":"ExportNamedDeclaration","messageId":"restrictedSyntax","endLine":205,"endColumn":2},{"ruleId":"no-restricted-syntax","severity":2,"message":"Do not create shadow components. Import and re-export from @ghxstship/ui if needed","line":208,"column":1,"nodeType":"ExportNamedDeclaration","messageId":"restrictedSyntax","endLine":220,"endColumn":2},{"ruleId":"no-restricted-syntax","severity":2,"message":"Do not create shadow components. Import and re-export from @ghxstship/ui if needed","line":223,"column":1,"nodeType":"ExportNamedDeclaration","messageId":"restrictedSyntax","endLine":231,"endColumn":2},{"ruleId":"no-restricted-syntax","severity":2,"message":"Do not create shadow components. Import and re-export from @ghxstship/ui if needed","line":234,"column":1,"nodeType":"ExportNamedDeclaration","messageId":"restrictedSyntax","endLine":243,"endColumn":2},{"ruleId":"no-restricted-syntax","severity":2,"message":"Do not create shadow components. Import and re-export from @ghxstship/ui if needed","line":246,"column":1,"nodeType":"ExportNamedDeclaration","messageId":"restrictedSyntax","endLine":256,"endColumn":2}],"suppressedMessages":[],"errorCount":21,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { type DataRecord } from '@ghxstship/ui';\n\n// Core RFP types\nexport type RfpStatus = 'open' | 'closed' | 'awarded' | 'cancelled';\nexport type RfpCategory = 'construction' | 'consulting' | 'technology' | 'services' | 'supplies' | 'other';\nexport type RfpPriority = 'low' | 'medium' | 'high' | 'critical';\nexport type RfpEvaluationCriteria = 'price' | 'quality' | 'experience' | 'timeline' | 'technical' | 'references';\n\n// Main RFP interface\nexport interface JobRfp extends DataRecord {\n  id: string;\n  organization_id: string;\n  project_id?: string;\n  title: string;\n  description?: string;\n  status: RfpStatus;\n  due_at?: string;\n  created_at: string;\n  // Enhanced fields from joins\n  project_title?: string;\n  organization_name?: string;\n  category?: RfpCategory;\n  budget_min?: number;\n  budget_max?: number;\n  currency?: string;\n  requirements?: string[];\n  evaluation_criteria?: RfpEvaluationCriteria[];\n  submission_guidelines?: string;\n  contact_person?: string;\n  contact_email?: string;\n  location?: string;\n  duration?: string;\n  start_date?: string;\n  end_date?: string;\n  award_date?: string;\n  winner_id?: string;\n  winner_name?: string;\n  notes?: string;\n}\n\n// API response types\nexport interface RfpsResponse {\n  rfps: JobRfp[];\n  total?: number;\n  page?: number;\n  limit?: number;\n}\n\n// Form data types\nexport interface CreateRfpData {\n  organization_id: string;\n  project_id?: string;\n  title: string;\n  description?: string;\n  category?: RfpCategory;\n  budget_min?: number;\n  budget_max?: number;\n  currency?: string;\n  requirements?: string[];\n  evaluation_criteria?: RfpEvaluationCriteria[];\n  submission_guidelines?: string;\n  contact_person?: string;\n  contact_email?: string;\n  location?: string;\n  duration?: string;\n  due_at?: string;\n  start_date?: string;\n  end_date?: string;\n  priority?: RfpPriority;\n  notes?: string;\n}\n\nexport interface UpdateRfpData extends Partial<CreateRfpData> {\n  id: string;\n  status?: RfpStatus;\n  award_date?: string;\n  winner_id?: string;\n}\n\n// Filter and search types\nexport interface RfpFilters {\n  status?: RfpStatus;\n  category?: RfpCategory;\n  organization_id?: string;\n  project_id?: string;\n  priority?: RfpPriority;\n  budget_min?: number;\n  budget_max?: number;\n  search?: string;\n  location?: string;\n  evaluation_criteria?: RfpEvaluationCriteria[];\n  date_from?: string;\n  date_to?: string;\n  due_soon?: boolean;\n  contact_person?: string;\n}\n\n// Statistics types\nexport interface RfpStats {\n  total: number;\n  byStatus: Record<RfpStatus, number>;\n  byCategory: Record<RfpCategory, number>;\n  totalValue: number;\n  averageValue: number;\n  activeRfps: number;\n  dueSoonRfps: number;\n  recentRfps: number;\n  awardRate: number;\n  averageResponseTime: number;\n  totalSubmissions: number;\n}\n\n// View configuration types\nexport interface RfpViewConfig {\n  showBudgets: boolean;\n  groupByCategory: boolean;\n  showProjectDetails: boolean;\n  showDueAlerts: boolean;\n  defaultSort: 'created_at' | 'due_at' | 'budget_max' | 'status' | 'title';\n  defaultView: 'grid' | 'kanban' | 'calendar' | 'list' | 'timeline' | 'dashboard';\n  currencyDisplay: string;\n  evaluationDisplay: boolean;\n}\n\n// Drawer types\nexport interface RfpDrawerProps {\n  rfp?: JobRfp;\n  mode: 'create' | 'edit' | 'view';\n  onSave?: (data: CreateRfpData | UpdateRfpData) => Promise<void>;\n  onClose: () => void;\n  open: boolean;\n}\n\n// Service types\nexport interface RfpService {\n  getRfps: (filters?: RfpFilters) => Promise<RfpsResponse>;\n  getRfp: (id: string) => Promise<JobRfp>;\n  createRfp: (data: CreateRfpData) => Promise<JobRfp>;\n  updateRfp: (data: UpdateRfpData) => Promise<JobRfp>;\n  deleteRfp: (id: string) => Promise<void>;\n  getRfpStats: () => Promise<RfpStats>;\n  closeRfp: (id: string) => Promise<JobRfp>;\n  awardRfp: (id: string, winnerId: string) => Promise<JobRfp>;\n  cancelRfp: (id: string, reason?: string) => Promise<JobRfp>;\n  publishRfp: (id: string) => Promise<JobRfp>;\n}\n\n// Project integration types\nexport interface ProjectInfo {\n  id: string;\n  name: string;\n  description?: string;\n  status?: string;\n  organization_id?: string;\n  start_date?: string;\n  end_date?: string;\n  budget?: number;\n  client_name?: string;\n}\n\n// Organization integration types\nexport interface OrganizationInfo {\n  id: string;\n  name: string;\n  type?: string;\n  industry?: string;\n  location?: string;\n  website?: string;\n  contact_email?: string;\n  contact_phone?: string;\n}\n\n// RFP submission types\nexport interface RfpSubmission {\n  id: string;\n  rfp_id: string;\n  vendor_id: string;\n  vendor_name: string;\n  submitted_at: string;\n  proposal_document_url?: string;\n  bid_amount?: number;\n  currency?: string;\n  timeline?: string;\n  status: 'submitted' | 'under_review' | 'shortlisted' | 'selected' | 'rejected';\n  evaluation_score?: number;\n  evaluator_notes?: string;\n  contact_person?: string;\n  contact_email?: string;\n}\n\n// RFP evaluation types\nexport interface RfpEvaluation {\n  id: string;\n  rfp_id: string;\n  submission_id: string;\n  evaluator_id: string;\n  evaluation_date: string;\n  criteria_scores: Record<RfpEvaluationCriteria, number>;\n  total_score: number;\n  max_score: number;\n  comments: string;\n  recommendation: 'accept' | 'reject' | 'shortlist' | 'request_clarification';\n  strengths?: string[];\n  weaknesses?: string[];\n}\n\n// RFP template types\nexport interface RfpTemplate {\n  id: string;\n  name: string;\n  category: RfpCategory;\n  description?: string;\n  template_content: string;\n  requirements_template: string[];\n  evaluation_criteria_template: RfpEvaluationCriteria[];\n  submission_guidelines_template: string;\n  created_by: string;\n  created_at: string;\n  is_active: boolean;\n}\n\n// RFP activity types\nexport interface RfpActivity {\n  id: string;\n  rfp_id: string;\n  activity_type: 'created' | 'updated' | 'published' | 'submission_received' | 'evaluated' | 'awarded' | 'closed' | 'cancelled';\n  description: string;\n  performed_by: string;\n  performed_at: string;\n  metadata?: Record<string, unknown>;\n}\n\n// RFP vendor types\nexport interface RfpVendor {\n  id: string;\n  rfp_id: string;\n  vendor_id: string;\n  vendor_name: string;\n  invited_at?: string;\n  invitation_status: 'invited' | 'viewed' | 'declined' | 'submitted';\n  submission_id?: string;\n  notes?: string;\n}\n\n// RFP document types\nexport interface RfpDocument {\n  id: string;\n  rfp_id: string;\n  document_name: string;\n  document_url: string;\n  document_type: 'specification' | 'template' | 'reference' | 'legal' | 'other';\n  uploaded_by: string;\n  uploaded_at: string;\n  is_public: boolean;\n  description?: string;\n}\n\n// Export all types\nexport type {\n  DataRecord\n} from '@ghxstship/ui';\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ghxstship/apps/web/app/(app)/(shell)/marketplace/MarketplaceDashboard.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadDashboardData'. Either include it or remove the dependency array.","line":56,"column":6,"nodeType":"ArrayExpression","endLine":56,"endColumn":33,"suggestions":[{"desc":"Update the dependencies array to be: [orgId, userId, activeView, loadDashboardData]","fix":{"range":[1693,1720],"text":"[orgId, userId, activeView, loadDashboardData]"}}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":295,"column":45,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[11237,11301],"text":"&quot;Excellent work on the lighting setup. Professional and timely.\""},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[11237,11301],"text":"&ldquo;Excellent work on the lighting setup. Professional and timely.\""},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[11237,11301],"text":"&#34;Excellent work on the lighting setup. Professional and timely.\""},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[11237,11301],"text":"&rdquo;Excellent work on the lighting setup. Professional and timely.\""},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":295,"column":108,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[11237,11301],"text":"\"Excellent work on the lighting setup. Professional and timely.&quot;"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[11237,11301],"text":"\"Excellent work on the lighting setup. Professional and timely.&ldquo;"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[11237,11301],"text":"\"Excellent work on the lighting setup. Professional and timely.&#34;"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[11237,11301],"text":"\"Excellent work on the lighting setup. Professional and timely.&rdquo;"},"desc":"Replace with `&rdquo;`."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\n\n\nimport { Briefcase, DollarSign, Users, TrendingUp, Package, Clock, Star, MessageSquare, FileText, Award, Target, Calendar, BarChart3, Building, Zap, Shield, Globe, ArrowUpRight, ArrowDownRight } from \"lucide-react\";\nimport { useState, useEffect } from 'react';\nimport { Card, Button, Badge, Tabs, TabsContent, TabsList, TabsTrigger } from '@ghxstship/ui';\nimport { createBrowserClient } from '@ghxstship/auth';\nimport { useTranslations } from 'next-intl';\n\ninterface DashboardProps {\n  orgId: string;\n  userId: string;\n  userRole: 'vendor' | 'client' | 'both';\n}\n\nexport default function OpenDeckDashboard({ orgId, userId, userRole }: DashboardProps) {\n  const t = useTranslations('opendeck');\n  const supabase = createBrowserClient();\n  \n  const [activeView, setActiveView] = useState<'vendor' | 'client'>(\n    userRole === 'vendor' ? 'vendor' : 'client'\n  );\n  \n  const [loading, setLoading] = useState(true);\n  const [stats, setStats] = useState<unknown>({\n    vendor: {\n      totalEarnings: 0,\n      activeProjects: 0,\n      completedProjects: 0,\n      avgRating: 0,\n      totalReviews: 0,\n      responseRate: 0,\n      profileViews: 0,\n      proposalsSent: 0,\n      successRate: 0\n    },\n    client: {\n      totalSpent: 0,\n      activeProjects: 0,\n      completedProjects: 0,\n      vendorsHired: 0,\n      avgProjectValue: 0,\n      totalSaved: 0,\n      proposalsReceived: 0,\n      avgCompletionTime: 0\n    }\n  });\n\n  const [recentActivity, setRecentActivity] = useState<any[]>([]);\n  const [upcomingMilestones, setUpcomingMilestones] = useState<any[]>([]);\n  const [notifications, setNotifications] = useState<any[]>([]);\n\n  useEffect(() => {\n    loadDashboardData();\n  }, [orgId, userId, activeView]);\n\n  async function loadDashboardData() {\n    setLoading(true);\n    try {\n      // Load vendor profile if vendor view\n      if (activeView === 'vendor') {\n        const { data: vendorProfile } = await supabase\n          .from('opendeck_vendor_profiles')\n          .select('*')\n          .eq('user_id', userId)\n          .single();\n\n        if (vendorProfile) {\n          // Load vendor stats\n          const { data: contracts } = await supabase\n            .from('opendeck_contracts')\n            .select('*')\n            .eq('vendor_id', vendorProfile.id);\n\n          const { data: proposals } = await supabase\n            .from('opendeck_proposals')\n            .select('*')\n            .eq('vendor_id', vendorProfile.id);\n\n          const { data: reviews } = await supabase\n            .from('opendeck_reviews')\n            .select('*')\n            .eq('reviewee_id', userId)\n            .eq('status', 'published');\n\n          // Calculate stats\n          const activeContracts = contracts?.filter(c => c.status === 'active') || [];\n          const completedContracts = contracts?.filter(c => c.status === 'completed') || [];\n          const totalEarnings = completedContracts.reduce((sum, c) => sum + Number(c.total_amount), 0);\n          const avgRating = reviews?.length ? \n            reviews.reduce((sum, r) => sum + r.overall_rating, 0) / reviews.length : 0;\n\n          setStats((prev: unknown) => ({\n            ...prev,\n            vendor: {\n              totalEarnings,\n              activeProjects: activeContracts.length,\n              completedProjects: completedContracts.length,\n              avgRating: avgRating.toFixed(1),\n              totalReviews: reviews?.length || 0,\n              responseRate: 98, // Mock for now\n              profileViews: vendorProfile.views || 0,\n              proposalsSent: proposals?.length || 0,\n              successRate: proposals?.length ? \n                (proposals.filter(p => p.status === 'accepted').length / proposals.length * 100).toFixed(0) : 0\n            }\n          }));\n        }\n      }\n\n      // Load client stats\n      if (activeView === 'client') {\n        const { data: projects } = await supabase\n          .from('opendeck_projects')\n          .select('*')\n          .eq('client_id', userId);\n\n        const { data: contracts } = await supabase\n          .from('opendeck_contracts')\n          .select('*')\n          .eq('client_id', userId);\n\n        const activeProjects = projects?.filter(p => p.status === 'in_progress') || [];\n        const completedProjects = projects?.filter(p => p.status === 'completed') || [];\n        const totalSpent = contracts?.reduce((sum, c) => sum + Number(c.total_amount), 0) || 0;\n\n        setStats((prev: unknown) => ({\n          ...prev,\n          client: {\n            totalSpent,\n            activeProjects: activeProjects.length,\n            completedProjects: completedProjects.length,\n            vendorsHired: new Set(contracts?.map(c => c.vendor_id)).size,\n            avgProjectValue: contracts?.length ? totalSpent / contracts.length : 0,\n            totalSaved: totalSpent * 0.15, // Mock savings\n            proposalsReceived: 0, // Will calculate from proposals\n            avgCompletionTime: 14 // Mock days\n          }\n        }));\n      }\n\n      // Load recent activity\n      const { data: activityData } = await supabase\n        .from('opendeck_analytics')\n        .select('*')\n        .eq('user_id', userId)\n        .order('created_at', { ascending: false })\n        .limit(10);\n      \n      setRecentActivity(activityData || []);\n\n      // Load notifications\n      const { data: notifs } = await supabase\n        .from('opendeck_notifications')\n        .select('*')\n        .eq('user_id', userId)\n        .eq('read', false)\n        .order('created_at', { ascending: false })\n        .limit(5);\n      \n      setNotifications(notifs || []);\n\n    } catch (error) {\n      console.error('Error loading dashboard:', error);\n    } finally {\n      setLoading(false);\n    }\n  }\n\n  const VendorDashboard = () => (\n    <div className=\"brand-marketplace stack-lg\">\n      {/* Key Metrics */}\n      <div className=\"brand-marketplace grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-md\">\n        <Card className=\"p-md\">\n          <div className=\"brand-marketplace flex items-center justify-between\">\n            <div>\n              <p className=\"text-body-sm color-muted\">Total Earnings</p>\n              <p className=\"text-heading-3\">${stats.vendor.totalEarnings.toLocaleString()}</p>\n              <p className=\"text-body-sm color-success flex items-center mt-xs\">\n                <ArrowUpRight className=\"h-3 w-3 mr-xs\" />\n                +12% from last month\n              </p>\n            </div>\n            <DollarSign className=\"h-8 w-8 color-success\" />\n          </div>\n        </Card>\n\n        <Card className=\"p-md\">\n          <div className=\"brand-marketplace flex items-center justify-between\">\n            <div>\n              <p className=\"text-body-sm color-muted\">Active Projects</p>\n              <p className=\"text-heading-3\">{stats.vendor.activeProjects}</p>\n              <p className=\"text-body-sm color-muted mt-xs\">\n                {stats.vendor.completedProjects} completed\n              </p>\n            </div>\n            <Briefcase className=\"h-8 w-8 color-accent\" />\n          </div>\n        </Card>\n\n        <Card className=\"p-md\">\n          <div className=\"brand-marketplace flex items-center justify-between\">\n            <div>\n              <p className=\"text-body-sm color-muted\">Average Rating</p>\n              <div className=\"brand-marketplace flex items-center\">\n                <p className=\"text-heading-3 mr-sm\">{stats.vendor.avgRating}</p>\n                <Star className=\"h-5 w-5 color-warning fill-warning\" />\n              </div>\n              <p className=\"text-body-sm color-muted mt-xs\">\n                {stats.vendor.totalReviews} reviews\n              </p>\n            </div>\n            <Award className=\"h-8 w-8 color-warning\" />\n          </div>\n        </Card>\n\n        <Card className=\"p-md\">\n          <div className=\"brand-marketplace flex items-center justify-between\">\n            <div>\n              <p className=\"text-body-sm color-muted\">Success Rate</p>\n              <p className=\"text-heading-3\">{stats.vendor.successRate}%</p>\n              <p className=\"text-body-sm color-muted mt-xs\">\n                {stats.vendor.proposalsSent} proposals sent\n              </p>\n            </div>\n            <Target className=\"h-8 w-8 text-info\" />\n          </div>\n        </Card>\n      </div>\n\n      {/* Performance Overview */}\n      <div className=\"brand-marketplace grid grid-cols-1 lg:grid-cols-3 gap-lg\">\n        <Card className=\"lg:col-span-2 p-lg\">\n          <h3 className=\"text-body text-heading-4 mb-md\">Earnings Overview</h3>\n          <div className=\"brand-marketplace h-64 flex items-center justify-center border-2 border-dashed rounded-lg\">\n            <BarChart3 className=\"h-12 w-12 color-muted\" />\n            <span className=\"ml-sm color-muted\">Chart will be rendered here</span>\n          </div>\n        </Card>\n\n        <Card className=\"p-lg\">\n          <h3 className=\"text-body text-heading-4 mb-md\">Quick Actions</h3>\n          <div className=\"brand-marketplace stack-sm\">\n            <Button variant=\"outline\" className=\"w-full justify-start\">\n              <Package className=\"h-4 w-4 mr-sm\" />\n              Create New Service\n            </Button>\n            <Button variant=\"outline\" className=\"w-full justify-start\">\n              <FileText className=\"h-4 w-4 mr-sm\" />\n              Browse Projects\n            </Button>\n            <Button variant=\"outline\" className=\"w-full justify-start\">\n              <MessageSquare className=\"h-4 w-4 mr-sm\" />\n              View Messages\n            </Button>\n            <Button variant=\"outline\" className=\"w-full justify-start\">\n              <Users className=\"h-4 w-4 mr-sm\" />\n              Update Portfolio\n            </Button>\n          </div>\n        </Card>\n      </div>\n\n      {/* Active Projects & Upcoming Milestones */}\n      <div className=\"brand-marketplace grid grid-cols-1 lg:grid-cols-2 gap-lg\">\n        <Card className=\"p-lg\">\n          <h3 className=\"text-body text-heading-4 mb-md\">Active Projects</h3>\n          <div className=\"brand-marketplace stack-sm\">\n            {[1, 2, 3].map(i => (\n              <div key={i} className=\"flex items-center justify-between p-sm border rounded-lg\">\n                <div>\n                  <p className=\"form-label\">Event Production Setup</p>\n                  <p className=\"text-body-sm color-muted\">Due in 3 days</p>\n                </div>\n                <Badge variant=\"secondary\">In Progress</Badge>\n              </div>\n            ))}\n          </div>\n        </Card>\n\n        <Card className=\"p-lg\">\n          <h3 className=\"text-body text-heading-4 mb-md\">Recent Reviews</h3>\n          <div className=\"brand-marketplace stack-sm\">\n            {[1, 2, 3].map(i => (\n              <div key={i} className=\"p-sm border rounded-lg\">\n                <div className=\"brand-marketplace flex items-center mb-sm\">\n                  <div className=\"brand-marketplace flex\">\n                    {[1, 2, 3, 4, 5].map(star => (\n                      <Star key={star} className=\"h-4 w-4 color-warning fill-warning\" />\n                    ))}\n                  </div>\n                  <span className=\"ml-sm text-body-sm color-muted\">2 days ago</span>\n                </div>\n                <p className=\"text-body-sm\">\"Excellent work on the lighting setup. Professional and timely.\"</p>\n              </div>\n            ))}\n          </div>\n        </Card>\n      </div>\n    </div>\n  );\n\n  const ClientDashboard = () => (\n    <div className=\"brand-marketplace stack-lg\">\n      {/* Key Metrics */}\n      <div className=\"brand-marketplace grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-md\">\n        <Card className=\"p-md\">\n          <div className=\"brand-marketplace flex items-center justify-between\">\n            <div>\n              <p className=\"text-body-sm color-muted\">Total Spent</p>\n              <p className=\"text-heading-3\">${stats.client.totalSpent.toLocaleString()}</p>\n              <p className=\"text-body-sm color-success flex items-center mt-xs\">\n                <ArrowDownRight className=\"h-3 w-3 mr-xs\" />\n                -8% from budget\n              </p>\n            </div>\n            <DollarSign className=\"h-8 w-8 color-accent\" />\n          </div>\n        </Card>\n\n        <Card className=\"p-md\">\n          <div className=\"brand-marketplace flex items-center justify-between\">\n            <div>\n              <p className=\"text-body-sm color-muted\">Active Projects</p>\n              <p className=\"text-heading-3\">{stats.client.activeProjects}</p>\n              <p className=\"text-body-sm color-muted mt-xs\">\n                {stats.client.completedProjects} completed\n              </p>\n            </div>\n            <Briefcase className=\"h-8 w-8 text-info\" />\n          </div>\n        </Card>\n\n        <Card className=\"p-md\">\n          <div className=\"brand-marketplace flex items-center justify-between\">\n            <div>\n              <p className=\"text-body-sm color-muted\">Vendors Hired</p>\n              <p className=\"text-heading-3\">{stats.client.vendorsHired}</p>\n              <p className=\"text-body-sm color-muted mt-xs\">\n                Across all projects\n              </p>\n            </div>\n            <Users className=\"h-8 w-8 color-success\" />\n          </div>\n        </Card>\n\n        <Card className=\"p-md\">\n          <div className=\"brand-marketplace flex items-center justify-between\">\n            <div>\n              <p className=\"text-body-sm color-muted\">Avg Completion</p>\n              <p className=\"text-heading-3\">{stats.client.avgCompletionTime}d</p>\n              <p className=\"text-body-sm color-success flex items-center mt-xs\">\n                <Zap className=\"h-3 w-3 mr-xs\" />\n                2 days faster\n              </p>\n            </div>\n            <Clock className=\"h-8 w-8 color-warning\" />\n          </div>\n        </Card>\n      </div>\n\n      {/* Project Management */}\n      <div className=\"brand-marketplace grid grid-cols-1 lg:grid-cols-3 gap-lg\">\n        <Card className=\"lg:col-span-2 p-lg\">\n          <h3 className=\"text-body text-heading-4 mb-md\">Project Timeline</h3>\n          <div className=\"brand-marketplace h-64 flex items-center justify-center border-2 border-dashed rounded-lg\">\n            <Calendar className=\"h-12 w-12 color-muted\" />\n            <span className=\"ml-sm color-muted\">Timeline will be rendered here</span>\n          </div>\n        </Card>\n\n        <Card className=\"p-lg\">\n          <h3 className=\"text-body text-heading-4 mb-md\">Quick Actions</h3>\n          <div className=\"brand-marketplace stack-sm\">\n            <Button variant=\"outline\" className=\"w-full justify-start\">\n              <FileText className=\"h-4 w-4 mr-sm\" />\n              Post New Project\n            </Button>\n            <Button variant=\"outline\" className=\"w-full justify-start\">\n              <Users className=\"h-4 w-4 mr-sm\" />\n              Browse Vendors\n            </Button>\n            <Button variant=\"outline\" className=\"w-full justify-start\">\n              <Package className=\"h-4 w-4 mr-sm\" />\n              View Services\n            </Button>\n            <Button variant=\"outline\" className=\"w-full justify-start\">\n              <MessageSquare className=\"h-4 w-4 mr-sm\" />\n              Messages\n            </Button>\n          </div>\n        </Card>\n      </div>\n\n      {/* Active Projects & Proposals */}\n      <div className=\"brand-marketplace grid grid-cols-1 lg:grid-cols-2 gap-lg\">\n        <Card className=\"p-lg\">\n          <h3 className=\"text-body text-heading-4 mb-md\">Active Projects</h3>\n          <div className=\"brand-marketplace stack-sm\">\n            {[1, 2, 3].map(i => (\n              <div key={i} className=\"flex items-center justify-between p-sm border rounded-lg\">\n                <div>\n                  <p className=\"form-label\">Music Festival Setup</p>\n                  <p className=\"text-body-sm color-muted\">3 vendors assigned</p>\n                </div>\n                <Badge variant=\"secondary\">In Progress</Badge>\n              </div>\n            ))}\n          </div>\n        </Card>\n\n        <Card className=\"p-lg\">\n          <h3 className=\"text-body text-heading-4 mb-md\">Recent Proposals</h3>\n          <div className=\"brand-marketplace stack-sm\">\n            {[1, 2, 3].map(i => (\n              <div key={i} className=\"p-sm border rounded-lg\">\n                <div className=\"brand-marketplace flex items-center justify-between mb-sm\">\n                  <p className=\"form-label\">Stage Design Services</p>\n                  <Badge variant=\"outline\">New</Badge>\n                </div>\n                <p className=\"text-body-sm color-muted\">$5,000 - 7 days delivery</p>\n                <div className=\"brand-marketplace flex items-center mt-sm\">\n                  <Star className=\"h-4 w-4 color-warning fill-warning\" />\n                  <span className=\"ml-xs text-body-sm\">4.8 rating</span>\n                </div>\n              </div>\n            ))}\n          </div>\n        </Card>\n      </div>\n    </div>\n  );\n\n  return (\n    <div className=\"brand-marketplace stack-lg\">\n      {/* Dashboard Toggle */}\n      {userRole === 'both' && (\n        <div className=\"brand-marketplace flex items-center justify-between\">\n          <h2 className=\"text-heading-3\">OPENDECK Dashboard</h2>\n          <Tabs value={activeView} onValueChange={(v: unknown) => setActiveView(v as 'vendor' | 'client')}>\n            <TabsList>\n              <TabsTrigger value=\"vendor\">\n                <Building className=\"h-4 w-4 mr-sm\" />\n                Vendor Dashboard\n              </TabsTrigger>\n              <TabsTrigger value=\"client\">\n                <Briefcase className=\"h-4 w-4 mr-sm\" />\n                Client Dashboard\n              </TabsTrigger>\n            </TabsList>\n          </Tabs>\n        </div>\n      )}\n\n      {/* Notifications Bar */}\n      {notifications.length > 0 && (\n        <Card className=\"p-md bg-info/5 border-info/20\">\n          <div className=\"brand-marketplace flex items-center justify-between\">\n            <div className=\"brand-marketplace flex items-center\">\n              <Shield className=\"h-5 w-5 text-info mr-sm\" />\n              <span className=\"text-body-sm\">\n                You have {notifications.length} new notifications\n              </span>\n            </div>\n            <Button>View All</Button>\n          </div>\n        </Card>\n      )}\n\n      {/* Main Dashboard Content */}\n      {loading ? (\n        <div className=\"brand-marketplace flex items-center justify-center h-64\">\n          <div className=\"brand-marketplace animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\n        </div>\n      ) : (\n        activeView === 'vendor' ? <VendorDashboard /> : <ClientDashboard />\n      )}\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ghxstship/apps/web/app/(app)/(shell)/marketplace/MarketplaceVendorProfileClient.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadVendorProfile'. Either include it or remove the dependency array.","line":122,"column":6,"nodeType":"ArrayExpression","endLine":122,"endColumn":14,"suggestions":[{"desc":"Update the dependencies array to be: [loadVendorProfile, userId]","fix":{"range":[3918,3926],"text":"[loadVendorProfile, userId]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { User, Briefcase, Award, Globe, Mail, Phone, MapPin, Calendar, DollarSign, Clock, Star, Upload, Plus, Edit, Trash2, Eye, Camera, FileText, Link2, Shield, CheckCircle, AlertCircle } from \"lucide-react\";\nimport { useState, useEffect } from 'react';\nimport { Card, CardContent, Button, Badge, UnifiedInput, Textarea, Select, SelectContent, SelectItem, SelectTrigger, SelectValue, Tabs, TabsContent, TabsList, TabsTrigger } from '@ghxstship/ui';\nimport { createBrowserClient } from '@ghxstship/auth';\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\n// import { z } from 'zod';\nimport AppDrawer from '@/app/_components/shared/AppDrawer';\n\nconst vendorProfileSchema = z.object({\n  business_name: z.string().min(2, 'Business name is required'),\n  business_type: z.enum(['individual', 'company', 'agency']),\n  display_name: z.string().min(2, 'Display name is required'),\n  tagline: z.string().max(100).optional(),\n  bio: z.string().max(1000).optional(),\n  email: z.string().email('Valid email required'),\n  phone: z.string().optional(),\n  website: z.string().url().optional().or(z.literal('')),\n  primary_category: z.string().min(1, 'Category is required'),\n  skills: z.array(z.string()).optional(),\n  years_experience: z.number().min(0).max(50).optional(),\n  team_size: z.number().min(1).max(1000).optional(),\n  hourly_rate: z.number().min(0).optional(),\n  currency: z.string().default('USD'),\n  availability_status: z.enum(['available', 'busy', 'unavailable']),\n  response_time: z.string().optional()\n});\n\ntype VendorProfileForm = z.infer<typeof vendorProfileSchema>;\n\ninterface VendorProfileClientProps {\n  userId: string;\n  orgId: string;\n}\n\nexport default function VendorProfileClient({ userId, orgId }: VendorProfileClientProps) {\n  const supabase = createBrowserClient();\n  const [loading, setLoading] = useState(true);\n  const [profile, setProfile] = useState<unknown>(null);\n  const [portfolio, setPortfolio] = useState<any[]>([]);\n  const [services, setServices] = useState<any[]>([]);\n  const [certifications, setCertifications] = useState<any[]>([]);\n  const [activeTab, setActiveTab] = useState('profile');\n  const [editMode, setEditMode] = useState(false);\n  const [drawerOpen, setDrawerOpen] = useState(false);\n  type DrawerMode = 'portfolio' | 'service' | 'certification';\n\n  interface PortfolioItem {\n    id: string;\n    title: string;\n    category?: string;\n    description?: string;\n    views?: number;\n    featured?: boolean;\n  }\n\n  interface ServiceItem {\n    id: string;\n    title: string;\n    status?: string;\n    category?: string;\n    description?: string;\n    base_price?: number;\n    delivery_time?: string;\n    orders_completed?: number;\n  }\n\n  interface CertificationItem {\n    id?: string;\n    name?: string;\n    issuer?: string;\n    issued_at?: string;\n    description?: string;\n  }\n\n  type DrawerItem = PortfolioItem | ServiceItem | CertificationItem | null;\n\n  const [drawerMode, setDrawerMode] = useState<DrawerMode>('portfolio');\n  const [selectedItem, setSelectedItem] = useState<DrawerItem>(null);\n\n  const {\n    register,\n    handleSubmit,\n    formState: { errors, isSubmitting },\n    reset,\n    setValue,\n    watch\n  } = useForm<VendorProfileForm>({\n    resolver: zodResolver(vendorProfileSchema)\n  });\n\n  const categories = [\n    'Audio & Sound',\n    'Lighting Design',\n    'Stage Production',\n    'Video & Projection',\n    'Event Management',\n    'Artist Services',\n    'Logistics & Transport',\n    'Catering & Hospitality',\n    'Security & Safety',\n    'Marketing & Promotion'\n  ];\n\n  const skillsList = [\n    'Live Sound Engineering',\n    'Stage Design',\n    'Lighting Programming',\n    'Video Production',\n    'Event Planning',\n    'Artist Management',\n    'Technical Direction',\n    'Project Management',\n    'Budget Management',\n    'Team Leadership'\n  ];\n\n  useEffect(() => {\n    loadVendorProfile();\n  }, [userId]);\n\n  async function loadVendorProfile() {\n    setLoading(true);\n    try {\n      // Load vendor profile\n      const { data: vendorData } = await supabase\n        .from('opendeck_vendor_profiles')\n        .select('*')\n        .eq('user_id', userId)\n        .single();\n\n      if (vendorData) {\n        setProfile(vendorData);\n        reset(vendorData);\n\n        // Load portfolio items\n        const { data: portfolioData } = await supabase\n          .from('opendeck_portfolio_items')\n          .select('*')\n          .eq('vendor_id', vendorData.id)\n          .order('created_at', { ascending: false });\n        \n        setPortfolio(portfolioData || []);\n\n        // Load services\n        const { data: servicesData } = await supabase\n          .from('opendeck_services')\n          .select('*')\n          .eq('vendor_id', vendorData.id)\n          .order('created_at', { ascending: false });\n        \n        setServices(servicesData || []);\n\n        // Load certifications\n        if (vendorData.certifications) {\n          setCertifications(vendorData.certifications);\n        }\n      }\n    } catch (error) {\n      console.error('Error loading vendor profile:', error);\n    } finally {\n      setLoading(false);\n    }\n  }\n\n  async function onSubmit(data: VendorProfileForm) {\n    try {\n      if (profile) {\n        // Update existing profile\n        const { error } = await supabase\n          .from('opendeck_vendor_profiles')\n          .update(data)\n          .eq('id', profile.id);\n\n        if (error) throw error;\n      } else {\n        // Create new profile\n        const { error } = await supabase\n          .from('opendeck_vendor_profiles')\n          .insert({\n            ...data,\n            user_id: userId,\n            organization_id: orgId\n          });\n\n        if (error) throw error;\n      }\n\n      setEditMode(false);\n      loadVendorProfile();\n    } catch (error) {\n      console.error('Error saving profile:', error);\n    }\n  }\n\n  const ProfileTab = () => (\n    <div className=\"brand-marketplace stack-lg\">\n      {/* Profile Header */}\n      <Card className=\"p-lg\">\n        <div className=\"brand-marketplace flex items-start justify-between\">\n          <div className=\"brand-marketplace flex items-start cluster\">\n            <div className=\"brand-marketplace relative\">\n              <div className=\"brand-marketplace w-24 h-24 rounded-full bg-gradient-to-br from-primary to-secondary flex items-center justify-center color-accent-foreground text-heading-3\">\n                {profile?.display_name?.charAt(0) || 'V'}\n              </div>\n              {profile?.verified && (\n                <div className=\"brand-marketplace absolute -bottom-1 -right-1 bg-success rounded-full p-xs\">\n                  <CheckCircle className=\"h-5 w-5 text-background\" />\n                </div>\n              )}\n            </div>\n            <div>\n              <h2 className=\"text-heading-3\">{profile?.display_name || 'Vendor Profile'}</h2>\n              <p className=\"color-muted\">{profile?.tagline || 'No tagline set'}</p>\n              <div className=\"brand-marketplace flex items-center cluster mt-sm\">\n                <Badge variant={profile?.availability_status === 'available' ? 'success' : 'secondary'}>\n                  {profile?.availability_status || 'Available'}\n                </Badge>\n                <div className=\"brand-marketplace flex items-center\">\n                  <Star className=\"h-4 w-4 color-warning fill-warning\" />\n                  <span className=\"ml-xs text-body-sm\">{profile?.rating || 0} ({profile?.total_reviews || 0} reviews)</span>\n                </div>\n              </div>\n            </div>\n          </div>\n          <Button onClick={() => setEditMode(!editMode)} variant=\"outline\">\n            <Edit className=\"h-4 w-4 mr-sm\" />\n            {editMode ? 'Cancel' : 'Edit Profile'}\n          </Button>\n        </div>\n      </Card>\n\n      {/* Profile Form */}\n      {editMode ? (\n        <Card className=\"p-lg\">\n          <form onSubmit={handleSubmit(onSubmit)} className=\"stack-md\">\n            <div className=\"brand-marketplace grid grid-cols-1 md:grid-cols-2 gap-md\">\n              <div>\n                <label className=\"text-body-sm form-label\">Business Name</label>\n                <UnifiedInput {...register('business_name')} placeholder=\"Your business name\" />\n                {errors.business_name && (\n                  <p className=\"text-body-sm color-destructive mt-xs\">{errors.business_name.message}</p>\n                )}\n              </div>\n\n              <div>\n                <label className=\"text-body-sm form-label\">Business Type</label>\n                <Select \n                  value={watch('business_type')} \n                  onValueChange={(value: unknown) => setValue('business_type', value as unknown)}\n                >\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Select type\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"individual\">Individual</SelectItem>\n                    <SelectItem value=\"company\">Company</SelectItem>\n                    <SelectItem value=\"agency\">Agency</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div>\n                <label className=\"text-body-sm form-label\">Display Name</label>\n                <UnifiedInput {...register('display_name')} placeholder=\"Public display name\" />\n                {errors.display_name && (\n                  <p className=\"text-body-sm color-destructive mt-xs\">{errors.display_name.message}</p>\n                )}\n              </div>\n\n              <div>\n                <label className=\"text-body-sm form-label\">Email</label>\n                <UnifiedInput {...register('email')} type=\"email\" placeholder=\"contact@example.com\" />\n                {errors.email && (\n                  <p className=\"text-body-sm color-destructive mt-xs\">{errors.email.message}</p>\n                )}\n              </div>\n\n              <div>\n                <label className=\"text-body-sm form-label\">Phone</label>\n                <UnifiedInput {...register('phone')} placeholder=\"+1 234 567 8900\" />\n              </div>\n\n              <div>\n                <label className=\"text-body-sm form-label\">Website</label>\n                <UnifiedInput {...register('website')} placeholder=\"https://example.com\" />\n              </div>\n\n              <div>\n                <label className=\"text-body-sm form-label\">Primary Category</label>\n                <Select \n                  value={watch('primary_category')} \n                  onValueChange={(value: unknown) => setValue('primary_category', value)}\n                >\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Select category\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {categories.map(cat => (\n                      <SelectItem key={cat} value={cat}>{cat}</SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div>\n                <label className=\"text-body-sm form-label\">Availability</label>\n                <Select \n                  value={watch('availability_status')} \n                  onValueChange={(value: unknown) => setValue('availability_status', value as unknown)}\n                >\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Select status\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"available\">Available</SelectItem>\n                    <SelectItem value=\"busy\">Busy</SelectItem>\n                    <SelectItem value=\"unavailable\">Unavailable</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div>\n                <label className=\"text-body-sm form-label\">Years of Experience</label>\n                <UnifiedInput \n                  {...register('years_experience', { valueAsNumber: true })} \n                  type=\"number\" \n                  placeholder=\"5\" \n                />\n              </div>\n\n              <div>\n                <label className=\"text-body-sm form-label\">Team Size</label>\n                <UnifiedInput \n                  {...register('team_size', { valueAsNumber: true })} \n                  type=\"number\" \n                  placeholder=\"10\" \n                />\n              </div>\n\n              <div>\n                <label className=\"text-body-sm form-label\">Hourly Rate</label>\n                <UnifiedInput \n                  {...register('hourly_rate', { valueAsNumber: true })} \n                  type=\"number\" \n                  placeholder=\"150\" \n                />\n              </div>\n\n              <div>\n                <label className=\"text-body-sm form-label\">Response Time</label>\n                <UnifiedInput {...register('response_time')} placeholder=\"Within 1 hour\" />\n              </div>\n            </div>\n\n            <div>\n              <label className=\"text-body-sm form-label\">Tagline</label>\n              <UnifiedInput {...register('tagline')} placeholder=\"Your professional tagline\" />\n            </div>\n\n            <div>\n              <label className=\"text-body-sm form-label\">Bio</label>\n              <Textarea \n                {...register('bio')} \n                placeholder=\"Tell clients about your experience and expertise...\"\n                rows={4}\n              />\n            </div>\n\n            <div className=\"brand-marketplace flex justify-end cluster-sm\">\n              <Button type=\"button\" variant=\"outline\" onClick={() => setEditMode(false)}>\n                Cancel\n              </Button>\n              <Button type=\"submit\" disabled={isSubmitting}>\n                {isSubmitting ? 'Saving...' : 'Save Profile'}\n              </Button>\n            </div>\n          </form>\n        </Card>\n      ) : (\n        <div className=\"brand-marketplace grid grid-cols-1 md:grid-cols-3 gap-lg\">\n          <Card className=\"md:col-span-2 p-lg\">\n            <h3 className=\"text-body text-heading-4 mb-md\">About</h3>\n            <p className=\"color-muted mb-lg\">\n              {profile?.bio || 'No bio provided yet.'}\n            </p>\n\n            <div className=\"brand-marketplace stack-md\">\n              <div className=\"brand-marketplace flex items-center\">\n                <Briefcase className=\"h-5 w-5 mr-sm color-muted\" />\n                <span>{profile?.years_experience || 0} years experience</span>\n              </div>\n              <div className=\"brand-marketplace flex items-center\">\n                <User className=\"h-5 w-5 mr-sm color-muted\" />\n                <span>Team of {profile?.team_size || 1}</span>\n              </div>\n              <div className=\"brand-marketplace flex items-center\">\n                <DollarSign className=\"h-5 w-5 mr-sm color-muted\" />\n                <span>${profile?.hourly_rate || 0}/hour</span>\n              </div>\n              <div className=\"brand-marketplace flex items-center\">\n                <Clock className=\"h-5 w-5 mr-sm color-muted\" />\n                <span>Responds {profile?.response_time || 'within 24 hours'}</span>\n              </div>\n            </div>\n\n            <div className=\"brand-marketplace mt-lg\">\n              <h4 className=\"form-label mb-sm\">Skills</h4>\n              <div className=\"brand-marketplace flex flex-wrap gap-sm\">\n                {(profile?.skills || []).map((skill: string) => (\n                  <Badge key={skill} variant=\"secondary\">{skill}</Badge>\n                ))}\n              </div>\n            </div>\n          </Card>\n\n          <Card className=\"p-lg\">\n            <h3 className=\"text-body text-heading-4 mb-md\">Contact</h3>\n            <div className=\"brand-marketplace stack-sm\">\n              <div className=\"brand-marketplace flex items-center\">\n                <Mail className=\"h-4 w-4 mr-sm color-muted\" />\n                <span className=\"text-body-sm\">{profile?.email}</span>\n              </div>\n              {profile?.phone && (\n                <div className=\"brand-marketplace flex items-center\">\n                  <Phone className=\"h-4 w-4 mr-sm color-muted\" />\n                  <span className=\"text-body-sm\">{profile?.phone}</span>\n                </div>\n              )}\n              {profile?.website && (\n                <div className=\"brand-marketplace flex items-center\">\n                  <Globe className=\"h-4 w-4 mr-sm color-muted\" />\n                  <a href=\"#\" target=\"_blank\" rel=\"noopener noreferrer\" \n                     className=\"text-body-sm color-accent hover:underline\">\n                    Website\n                  </a>\n                </div>\n              )}\n              {profile?.address && (\n                <div className=\"brand-marketplace flex items-start\">\n                  <MapPin className=\"h-4 w-4 mr-sm mt-0.5 color-muted\" />\n                  <span className=\"text-body-sm\">\n                    {profile.address.city}, {profile.address.state}\n                  </span>\n                </div>\n              )}\n            </div>\n\n            <div className=\"brand-marketplace mt-lg\">\n              <h4 className=\"form-label mb-sm\">Verification</h4>\n              <div className=\"brand-marketplace stack-sm\">\n                <div className=\"brand-marketplace flex items-center\">\n                  {profile?.verified ? (\n                    <CheckCircle className=\"h-4 w-4 mr-sm color-success\" />\n                  ) : (\n                    <AlertCircle className=\"h-4 w-4 mr-sm color-warning\" />\n                  )}\n                  <span className=\"text-body-sm\">\n                    {profile?.verified ? 'Verified Vendor' : 'Pending Verification'}\n                  </span>\n                </div>\n              </div>\n            </div>\n          </Card>\n        </div>\n      )}\n    </div>\n  );\n\n  const PortfolioTab = () => (\n    <div className=\"brand-marketplace stack-lg\">\n      <div className=\"brand-marketplace flex justify-between items-center\">\n        <h3 className=\"text-body text-heading-4\">Portfolio Items</h3>\n        <Button onClick={() => handleOpenDrawer('portfolio')}>\n          <Plus className=\"h-4 w-4 mr-sm\" />\n          Add Portfolio Item\n        </Button>\n      </div>\n\n      <div className=\"brand-marketplace grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-md\">\n        {portfolio.map((item: unknown) => (\n          <Card key={item.id} className=\"overflow-hidden\">\n            <div className=\"brand-marketplace aspect-video bg-gradient-to-br from-primary to-secondary relative\">\n              {item.featured && (\n                <Badge className=\"absolute top-2 right-2\" variant=\"secondary\">\n                  Featured\n                </Badge>\n              )}\n            </div>\n            <div className=\"brand-marketplace p-md\">\n              <h4 className=\"text-body text-heading-4\">{item.title}</h4>\n              <p className=\"text-body-sm color-muted mt-xs\">{item.category}</p>\n              <p className=\"text-body-sm mt-sm line-clamp-2\">{item.description}</p>\n              <div className=\"brand-marketplace flex items-center justify-between mt-md\">\n                <div className=\"brand-marketplace flex items-center cluster-sm text-body-sm color-muted\">\n                  <Eye className=\"h-4 w-4\" />\n                  <span>{item.views || 0}</span>\n                </div>\n                <div className=\"brand-marketplace flex cluster-sm\">\n                  <Button\n                    variant=\"ghost\"\n                    onClick={() => handleOpenDrawer('portfolio', item)}\n                  >\n                    <Edit className=\"h-4 w-4\" />\n                  </Button>\n                  <Button variant=\"ghost\">\n                    <Trash2 className=\"h-4 w-4\" />\n                  </Button>\n                </div>\n              </div>\n            </div>\n          </Card>\n        ))}\n      </div>\n    </div>\n  );\n\n  const ServicesTab = () => (\n    <div className=\"brand-marketplace stack-lg\">\n      <div className=\"brand-marketplace flex justify-between items-center\">\n        <h3 className=\"text-body text-heading-4\">Services</h3>\n        <Button onClick={() => handleOpenDrawer('service')}>\n          <Plus className=\"h-4 w-4 mr-sm\" />\n          Add Service\n        </Button>\n      </div>\n\n      <div className=\"brand-marketplace grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-md\">\n        {services.map((service: unknown) => (\n          <Card key={service.id} className=\"p-md\">\n            <div className=\"brand-marketplace flex justify-between items-start mb-sm\">\n              <h4 className=\"text-body text-heading-4\">{service.title}</h4>\n              <Badge variant={service.status === 'active' ? 'success' : 'secondary'}>\n                {service.status}\n              </Badge>\n            </div>\n            <p className=\"text-body-sm color-muted mb-sm\">{service.category}</p>\n            <p className=\"text-body-sm line-clamp-2 mb-md\">{service.description}</p>\n            <div className=\"brand-marketplace stack-sm\">\n              <div className=\"brand-marketplace flex justify-between text-body-sm\">\n                <span>Starting at</span>\n                <span className=\"text-body-sm\">${service.base_price}</span>\n              </div>\n              <div className=\"brand-marketplace flex justify-between text-body-sm\">\n                <span>Delivery</span>\n                <span>{service.delivery_time}</span>\n              </div>\n              <div className=\"brand-marketplace flex justify-between text-body-sm\">\n                <span>Orders</span>\n                <span>{service.orders_completed || 0}</span>\n              </div>\n            </div>\n            <div className=\"brand-marketplace flex cluster-sm mt-md\">\n              <Button\n                variant=\"outline\"\n                className=\"flex-1\"\n                onClick={() => handleOpenDrawer('service', service)}\n              >\n                Edit\n              </Button>\n              <Button variant=\"outline\" className=\"flex-1\">\n                View\n              </Button>\n            </div>\n          </Card>\n        ))}\n      </div>\n    </div>\n  );\n\n  const handleOpenDrawer = (mode: DrawerMode, item: DrawerItem = null) => {\n    setDrawerMode(mode);\n    setSelectedItem(item);\n    setDrawerOpen(true);\n  };\n\n  const handleCloseDrawer = () => {\n    setDrawerOpen(false);\n    setSelectedItem(null);\n  };\n\n  if (loading) {\n    return (\n      <div className=\"brand-marketplace flex items-center justify-center h-64\">\n        <div className=\"brand-marketplace animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"brand-marketplace stack-lg\">\n      <Tabs value={activeTab} onValueChange={setActiveTab}>\n        <TabsList>\n          <TabsTrigger value=\"profile\">Profile</TabsTrigger>\n          <TabsTrigger value=\"portfolio\">Portfolio</TabsTrigger>\n          <TabsTrigger value=\"services\">Services</TabsTrigger>\n          <TabsTrigger value=\"earnings\">Earnings</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"profile\">\n          <ProfileTab />\n        </TabsContent>\n\n        <TabsContent value=\"portfolio\">\n          <PortfolioTab />\n        </TabsContent>\n\n        <TabsContent value=\"services\">\n          <ServicesTab />\n        </TabsContent>\n\n        <TabsContent value=\"earnings\">\n          <Card className=\"p-lg\">\n            <h3 className=\"text-body text-heading-4 mb-md\">Earnings Overview</h3>\n            <p className=\"color-muted\">Earnings tracking coming soon...</p>\n          </Card>\n        </TabsContent>\n      </Tabs>\n\n      {/* Drawer for creating/editing items */}\n      <AppDrawer\n        open={drawerOpen}\n        onClose={handleCloseDrawer}\n        title={\n          drawerMode === 'portfolio' ? 'Portfolio Item' :\n          drawerMode === 'service' ? 'Service Package' :\n          'Certification'\n        }\n        record={selectedItem}\n        mode=\"view\"\n        fields={[]}\n        tabs={[{\n          key: 'details',\n          label: 'Details',\n          content: (\n            <div className=\"brand-marketplace p-md\">\n              <p className=\"color-muted\">\n                Form for {drawerMode} will be implemented here...\n              </p>\n            </div>\n          )\n        }]}\n      />\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ghxstship/apps/web/app/(app)/(shell)/marketplace/ProjectPostingClient.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadProjects'. Either include it or remove the dependency array.","line":154,"column":6,"nodeType":"ArrayExpression","endLine":154,"endColumn":21,"suggestions":[{"desc":"Update the dependencies array to be: [userId, orgId, loadProjects]","fix":{"range":[4544,4559],"text":"[userId, orgId, loadProjects]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { Plus, Edit, Trash2, Eye, Calendar, DollarSign, MapPin, Users, Paperclip, Search, AlertCircle } from \"lucide-react\";\nimport { useCallback, useEffect, useMemo, useState, type ChangeEvent, type FormEvent } from 'react';\nimport {\n  Card,\n  Button,\n  Badge,\n  UnifiedInput,\n  Textarea,\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from '@ghxstship/ui';\nimport { createBrowserClient } from '@ghxstship/auth';\nimport AppDrawer from '@/app/_components/shared/AppDrawer';\n\ntype ProjectStatus = 'draft' | 'open' | 'in_progress' | 'completed' | string;\ntype ProjectExperienceLevel = 'entry' | 'intermediate' | 'expert';\ntype ProjectBudgetType = 'fixed' | 'hourly' | 'not_specified';\ntype ProjectLocationType = 'remote' | 'onsite' | 'hybrid';\ntype ProjectVisibility = 'public' | 'private' | 'invite_only';\n\ninterface ProjectFormData {\n  title: string;\n  description: string;\n  category: string;\n  subcategory: string;\n  scope: string;\n  skillsRequired: string;\n  experienceLevel: ProjectExperienceLevel;\n  budgetType: ProjectBudgetType;\n  budgetMin: string;\n  budgetMax: string;\n  currency: string;\n  startDate: string;\n  endDate: string;\n  duration: string;\n  isUrgent: boolean;\n  locationType: ProjectLocationType;\n  visibility: ProjectVisibility;\n}\n\ninterface ProjectProposalCount {\n  count?: number | null;\n}\n\ninterface OpenDeckProject {\n  id: string;\n  title?: string | null;\n  description?: string | null;\n  category?: string | null;\n  subcategory?: string | null;\n  scope?: string | null;\n  skills_required?: string[] | null;\n  experience_level?: string | null;\n  budget_type?: string | null;\n  budget_min?: number | null;\n  budget_max?: number | null;\n  currency?: string | null;\n  start_date?: string | null;\n  end_date?: string | null;\n  duration?: string | null;\n  is_urgent?: boolean | null;\n  location_type?: string | null;\n  visibility?: string | null;\n  status: ProjectStatus;\n  proposals?: ProjectProposalCount[];\n  created_at: string;\n  client_id: string;\n  organization_id: string;\n  is_demo?: boolean | null;\n}\n\ninterface ProjectPostingClientProps {\n  userId: string;\n  orgId: string;\n}\n\nconst categories = [\n  'Audio & Sound',\n  'Lighting Design',\n  'Stage Production',\n  'Video & Projection',\n  'Event Management',\n  'Artist Services',\n  'Logistics & Transport',\n  'Catering & Hospitality',\n  'Security & Safety',\n  'Marketing & Promotion',\n];\n\nconst experienceLevelOptions: ReadonlyArray<{ value: ProjectExperienceLevel; label: string }> = [\n  { value: 'entry', label: 'Entry Level' },\n  { value: 'intermediate', label: 'Intermediate' },\n  { value: 'expert', label: 'Expert' },\n];\n\nconst budgetTypeOptions: ReadonlyArray<{ value: ProjectBudgetType; label: string }> = [\n  { value: 'fixed', label: 'Fixed Price' },\n  { value: 'hourly', label: 'Hourly Rate' },\n  { value: 'not_specified', label: 'Not Specified' },\n];\n\nconst locationTypeOptions: ReadonlyArray<{ value: ProjectLocationType; label: string }> = [\n  { value: 'remote', label: 'Remote' },\n  { value: 'onsite', label: 'Onsite' },\n  { value: 'hybrid', label: 'Hybrid' },\n];\n\nconst visibilityOptions: ReadonlyArray<{ value: ProjectVisibility; label: string }> = [\n  { value: 'public', label: 'Public' },\n  { value: 'private', label: 'Private' },\n  { value: 'invite_only', label: 'Invite Only' },\n];\n\nconst createInitialFormData = (): ProjectFormData => ({\n  title: '',\n  description: '',\n  category: '',\n  subcategory: '',\n  scope: '',\n  skillsRequired: '',\n  experienceLevel: 'entry',\n  budgetType: 'not_specified',\n  budgetMin: '',\n  budgetMax: '',\n  currency: 'USD',\n  startDate: '',\n  endDate: '',\n  duration: '',\n  isUrgent: false,\n  locationType: 'remote',\n  visibility: 'public',\n});\n\nexport default function ProjectPostingClient({ userId, orgId }: ProjectPostingClientProps) {\n  const supabase = createBrowserClient();\n  const [projects, setProjects] = useState<OpenDeckProject[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [drawerOpen, setDrawerOpen] = useState(false);\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [selectedProject, setSelectedProject] = useState<OpenDeckProject | null>(null);\n  const [viewMode, setViewMode] = useState<'grid' | 'list'>('grid');\n  const [filterStatus, setFilterStatus] = useState('all');\n  const [searchQuery, setSearchQuery] = useState('');\n  const [formData, setFormData] = useState<ProjectFormData>(() => createInitialFormData());\n\n  useEffect(() => {\n    loadProjects();\n  }, [userId, orgId]);\n\n  const loadProjects = useCallback(async () => {\n    setLoading(true);\n    try {\n      const { data, error: fetchError } = await supabase\n        .from('opendeck_projects')\n        .select(\n          `*, proposals:opendeck_proposals(count)`\n        )\n        .eq('client_id', userId)\n        .order('created_at', { ascending: false });\n\n      if (fetchError) {\n        throw fetchError;\n      }\n\n      setProjects((data || []) as OpenDeckProject[]);\n    } catch (fetchErr) {\n      console.error('Error loading projects:', fetchErr);\n    } finally {\n      setLoading(false);\n    }\n  }, [supabase, userId]);\n\n  const updateForm = useCallback(<Key extends keyof ProjectFormData>(field: Key, value: ProjectFormData[Key]) => {\n    setFormData(prev => ({ ...prev, [field]: value }));\n  }, []);\n\n  const handleInputChange = useCallback((event: ChangeEvent<HTMLInputElement>) => {\n    const { name, value, type, checked } = event.target;\n    if (type === 'checkbox') {\n      updateForm(name as keyof ProjectFormData, checked as ProjectFormData[keyof ProjectFormData]);\n      return;\n    }\n    updateForm(name as keyof ProjectFormData, value as ProjectFormData[keyof ProjectFormData]);\n  }, [updateForm]);\n\n  const handleTextareaChange = useCallback((event: ChangeEvent<HTMLTextAreaElement>) => {\n    const { name, value } = event.target;\n    updateForm(name as keyof ProjectFormData, value as ProjectFormData[keyof ProjectFormData]);\n  }, [updateForm]);\n\n  const handleSelectChange = useCallback(<Key extends keyof ProjectFormData>(field: Key) => (value: string) => {\n    updateForm(field, value as ProjectFormData[Key]);\n  }, [updateForm]);\n\n  const handleOpenDrawer = useCallback((project?: OpenDeckProject) => {\n    if (project) {\n      setSelectedProject(project);\n      setFormData({\n        title: project.title ?? '',\n        description: project.description ?? '',\n        category: project.category ?? '',\n        subcategory: project.subcategory ?? '',\n        scope: project.scope ?? '',\n        skillsRequired: (project.skills_required ?? []).join(', '),\n        experienceLevel: (project.experience_level as ProjectExperienceLevel) || 'entry',\n        budgetType: (project.budget_type as ProjectBudgetType) || 'not_specified',\n        budgetMin: project.budget_min != null ? String(project.budget_min) : '',\n        budgetMax: project.budget_max != null ? String(project.budget_max) : '',\n        currency: project.currency ?? 'USD',\n        startDate: project.start_date ?? '',\n        endDate: project.end_date ?? '',\n        duration: project.duration ?? '',\n        isUrgent: project.is_urgent ?? false,\n        locationType: (project.location_type as ProjectLocationType) || 'remote',\n        visibility: (project.visibility as ProjectVisibility) || 'public',\n      });\n    } else {\n      setSelectedProject(null);\n      setFormData(createInitialFormData());\n    }\n\n    setError(null);\n    setDrawerOpen(true);\n  }, []);\n\n  const handleCloseDrawer = useCallback(() => {\n    if (isSubmitting) {\n      return;\n    }\n\n    setDrawerOpen(false);\n    setSelectedProject(null);\n    setFormData(createInitialFormData());\n    setError(null);\n  }, [isSubmitting]);\n\n  const deleteProject = useCallback(async (id: string) => {\n    if (!confirm('Are you sure you want to delete this project?')) {\n      return;\n    }\n\n    try {\n      const { error: deleteError } = await supabase\n        .from('opendeck_projects')\n        .delete()\n        .eq('id', id);\n\n      if (deleteError) {\n        throw deleteError;\n      }\n\n      loadProjects();\n    } catch (deleteErr) {\n      console.error('Error deleting project:', deleteErr);\n    }\n  }, [loadProjects, supabase]);\n\n  const filteredProjects = useMemo(() => {\n    return projects.filter(project => {\n      const title = project.title || '';\n      const description = project.description || '';\n      const matchesStatus = filterStatus === 'all' || project.status === filterStatus;\n      const matchesSearch =\n        title.toLowerCase().includes(searchQuery.toLowerCase()) ||\n        description.toLowerCase().includes(searchQuery.toLowerCase());\n\n      return matchesStatus && matchesSearch;\n    });\n  }, [filterStatus, projects, searchQuery]);\n\n  const statusItems = useMemo(() => (\n    <>\n      <SelectItem value=\"all\">All Projects</SelectItem>\n      <SelectItem value=\"draft\">Draft</SelectItem>\n      <SelectItem value=\"open\">Open</SelectItem>\n      <SelectItem value=\"in_progress\">In Progress</SelectItem>\n      <SelectItem value=\"completed\">Completed</SelectItem>\n    </>\n  ), []);\n\n  const experienceLevelItems = useMemo(() => experienceLevelOptions.map(option => (\n    <SelectItem key={option.value} value={option.value}>\n      {option.label}\n    </SelectItem>\n  )), []);\n\n  const budgetTypeItems = useMemo(() => budgetTypeOptions.map(option => (\n    <SelectItem key={option.value} value={option.value}>\n      {option.label}\n    </SelectItem>\n  )), []);\n\n  const locationTypeItems = useMemo(() => locationTypeOptions.map(option => (\n    <SelectItem key={option.value} value={option.value}>\n      {option.label}\n    </SelectItem>\n  )), []);\n\n  const visibilityItems = useMemo(() => visibilityOptions.map(option => (\n    <SelectItem key={option.value} value={option.value}>\n      {option.label}\n    </SelectItem>\n  )), []);\n\n  const handleSubmit = useCallback(async (event: FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    const trimmedTitle = formData.title.trim();\n    const trimmedDescription = formData.description.trim();\n    const trimmedScope = formData.scope.trim();\n    const trimmedCategory = formData.category.trim();\n    const trimmedSkills = formData.skillsRequired.split(',').map(skill => skill.trim()).filter(Boolean);\n\n    if (trimmedTitle.length < 5) {\n      setError('Title must be at least 5 characters.');\n      return;\n    }\n\n    if (trimmedDescription.length < 50) {\n      setError('Description must be at least 50 characters.');\n      return;\n    }\n\n    if (!trimmedCategory) {\n      setError('Category is required.');\n      return;\n    }\n\n    if (trimmedScope.length < 20) {\n      setError('Scope must be at least 20 characters.');\n      return;\n    }\n\n    if (trimmedSkills.length === 0) {\n      setError('Please specify at least one required skill.');\n      return;\n    }\n\n    const budgetMinValue = parseFloat(formData.budgetMin.trim());\n    const budgetMaxValue = parseFloat(formData.budgetMax.trim());\n\n    if (formData.budgetType !== 'not_specified') {\n      if (Number.isNaN(budgetMinValue) || budgetMinValue < 0) {\n        setError('Minimum budget must be a non-negative number.');\n        return;\n      }\n\n      if (Number.isNaN(budgetMaxValue) || budgetMaxValue < 0) {\n        setError('Maximum budget must be a non-negative number.');\n        return;\n      }\n\n      if (budgetMaxValue < budgetMinValue) {\n        setError('Maximum budget must be greater than or equal to minimum budget.');\n        return;\n      }\n    }\n\n    setError(null);\n    setIsSubmitting(true);\n\n    const payload = {\n      title: trimmedTitle,\n      description: trimmedDescription,\n      category: trimmedCategory,\n      subcategory: formData.subcategory.trim() || undefined,\n      scope: trimmedScope,\n      skills_required: trimmedSkills,\n      experience_level: formData.experienceLevel,\n      budget_type: formData.budgetType,\n      budget_min: formData.budgetType === 'not_specified' ? null : budgetMinValue,\n      budget_max: formData.budgetType === 'not_specified' ? null : budgetMaxValue,\n      currency: formData.currency,\n      start_date: formData.startDate || undefined,\n      end_date: formData.endDate || undefined,\n      duration: formData.duration.trim() || undefined,\n      is_urgent: formData.isUrgent,\n      location_type: formData.locationType,\n      visibility: formData.visibility,\n      client_id: userId,\n      organization_id: orgId,\n      status: selectedProject?.status || 'open',\n    };\n\n    try {\n      if (selectedProject) {\n        const { error: updateError } = await supabase\n          .from('opendeck_projects')\n          .update(payload)\n          .eq('id', selectedProject.id);\n\n        if (updateError) {\n          throw updateError;\n        }\n      } else {\n        const { error: insertError } = await supabase\n          .from('opendeck_projects')\n          .insert(payload);\n\n        if (insertError) {\n          throw insertError;\n        }\n      }\n\n      setDrawerOpen(false);\n      setSelectedProject(null);\n      setFormData(createInitialFormData());\n      loadProjects();\n    } catch (submitError) {\n      console.error('Error saving project:', submitError);\n      setError(submitError instanceof Error ? submitError.message : 'An unexpected error occurred while saving the project.');\n    } finally {\n      setIsSubmitting(false);\n    }\n  }, [formData, loadProjects, orgId, selectedProject, supabase, userId]);\n\n  const isSubmitDisabled = useMemo(() => {\n    return (\n      isSubmitting ||\n      !formData.title.trim() ||\n      formData.title.trim().length < 5 ||\n      !formData.description.trim() ||\n      formData.description.trim().length < 50 ||\n      !formData.category.trim() ||\n      !formData.scope.trim() ||\n      formData.scope.trim().length < 20 ||\n      formData.skillsRequired.split(',').map(skill => skill.trim()).filter(Boolean).length === 0\n    );\n  }, [formData, isSubmitting]);\n\n  if (loading) {\n    return (\n      <div className=\"brand-marketplace flex items-center justify-center h-64\">\n        <div className=\"brand-marketplace animate-spin rounded-full h-8 w-8 border-b-2 border-primary\" />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"brand-marketplace stack-lg\">\n      <div className=\"brand-marketplace flex justify-between items-center\">\n        <div>\n          <h2 className=\"text-heading-3\">Project Postings</h2>\n          <p className=\"color-muted\">Manage your project briefs and proposals</p>\n        </div>\n        <Button onClick={() => handleOpenDrawer()}>\n          <Plus className=\"h-4 w-4 mr-sm\" />\n          Post New Project\n        </Button>\n      </div>\n\n      <Card className=\"p-md\">\n        <div className=\"brand-marketplace flex flex-col md:flex-row gap-md\">\n          <div className=\"brand-marketplace flex-1\">\n            <div className=\"brand-marketplace relative\">\n              <Search className=\"absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 color-muted\" />\n              <UnifiedInput\n                placeholder=\"Search projects...\"\n                value={searchQuery}\n                onChange={(event: ChangeEvent<HTMLInputElement>) => setSearchQuery(event.target.value)}\n                className=\"pl-2xl\"\n              />\n            </div>\n          </div>\n          <Select value={filterStatus} onValueChange={setFilterStatus}>\n            <SelectTrigger className=\"w-[180px]\">\n              <SelectValue placeholder=\"Filter by status\" />\n            </SelectTrigger>\n            <SelectContent>{statusItems}</SelectContent>\n          </Select>\n          <div className=\"brand-marketplace flex gap-sm\">\n            <Button\n              variant={viewMode === 'grid' ? 'default' : 'outline'}\n              onClick={() => setViewMode('grid')}\n            >\n              Grid\n            </Button>\n            <Button\n              variant={viewMode === 'list' ? 'default' : 'outline'}\n              onClick={() => setViewMode('list')}\n            >\n              List\n            </Button>\n          </div>\n        </div>\n      </Card>\n\n      {filteredProjects.length === 0 ? (\n        <Card className=\"p-2xl text-center\">\n          <div className=\"brand-marketplace max-w-md mx-auto\">\n            <Paperclip className=\"h-12 w-12 mx-auto mb-md color-muted\" />\n            <h3 className=\"text-body text-heading-4 mb-sm\">No projects found</h3>\n            <p className=\"color-muted mb-md\">\n              Post your first project to start receiving proposals from vendors\n            </p>\n            <Button onClick={() => handleOpenDrawer()}>\n              <Plus className=\"h-4 w-4 mr-sm\" />\n              Post New Project\n            </Button>\n          </div>\n        </Card>\n      ) : viewMode === 'grid' ? (\n        <div className=\"brand-marketplace grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-md\">\n          {filteredProjects.map(project => (\n            <ProjectCard\n              key={project.id}\n              project={project}\n              onEdit={handleOpenDrawer}\n              onDelete={deleteProject}\n            />\n          ))}\n        </div>\n      ) : (\n        <Card>\n          <div className=\"brand-marketplace divide-y\">\n            {filteredProjects.map(project => (\n              <ProjectListRow\n                key={project.id}\n                project={project}\n                onEdit={handleOpenDrawer}\n                onDelete={deleteProject}\n              />\n            ))}\n          </div>\n        </Card>\n      )}\n\n      <AppDrawer\n        open={drawerOpen}\n        onClose={handleCloseDrawer}\n        record={selectedProject}\n        mode={selectedProject ? 'edit' : 'create'}\n        title={selectedProject ? 'Edit Project' : 'Post New Project'}\n        fields={[]}\n        loading={isSubmitting}\n        tabs={[{\n          key: 'details',\n          label: 'Details',\n          content: (\n            <form onSubmit={handleSubmit} className=\"p-lg stack-md\">\n              <div>\n                <label htmlFor=\"title\" className=\"text-body-sm form-label\">\n                  Project Title\n                </label>\n                <UnifiedInput\n                  id=\"title\"\n                  name=\"title\"\n                  value={formData.title}\n                  onChange={handleInputChange}\n                  placeholder=\"e.g., Stage Design for Music Festival\"\n                  required\n                />\n              </div>\n\n              <div>\n                <label htmlFor=\"category\" className=\"text-body-sm form-label\">\n                  Category\n                </label>\n                <Select\n                  value={formData.category}\n                  onValueChange={handleSelectChange('category')}\n                >\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Select category\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {categories.map(cat => (\n                      <SelectItem key={cat} value={cat}>\n                        {cat}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div>\n                <label htmlFor=\"description\" className=\"text-body-sm form-label\">\n                  Description\n                </label>\n                <Textarea\n                  id=\"description\"\n                  name=\"description\"\n                  value={formData.description}\n                  onChange={handleTextareaChange}\n                  placeholder=\"Describe your project requirements in detail...\"\n                  rows={4}\n                  required\n                />\n              </div>\n\n              <div>\n                <label htmlFor=\"scope\" className=\"text-body-sm form-label\">\n                  Scope of Work\n                </label>\n                <Textarea\n                  id=\"scope\"\n                  name=\"scope\"\n                  value={formData.scope}\n                  onChange={handleTextareaChange}\n                  placeholder=\"Define the scope and deliverables...\"\n                  rows={3}\n                  required\n                />\n              </div>\n\n              <div>\n                <label htmlFor=\"skillsRequired\" className=\"text-body-sm form-label\">\n                  Required Skills\n                </label>\n                <UnifiedInput\n                  id=\"skillsRequired\"\n                  name=\"skillsRequired\"\n                  value={formData.skillsRequired}\n                  onChange={handleInputChange}\n                  placeholder=\"Comma-separated list of skills\"\n                  required\n                />\n              </div>\n\n              <div className=\"brand-marketplace grid grid-cols-1 gap-md md:grid-cols-2\">\n                <div>\n                  <label className=\"text-body-sm form-label\">Budget Type</label>\n                  <Select\n                    value={formData.budgetType}\n                    onValueChange={handleSelectChange('budgetType')}\n                  >\n                    <SelectTrigger>\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>{budgetTypeItems}</SelectContent>\n                  </Select>\n                </div>\n\n                <div>\n                  <label className=\"text-body-sm form-label\">Experience Level</label>\n                  <Select\n                    value={formData.experienceLevel}\n                    onValueChange={handleSelectChange('experienceLevel')}\n                  >\n                    <SelectTrigger>\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>{experienceLevelItems}</SelectContent>\n                  </Select>\n                </div>\n              </div>\n\n              {formData.budgetType !== 'not_specified' && (\n                <div className=\"brand-marketplace grid grid-cols-1 gap-md md:grid-cols-2\">\n                  <div>\n                    <label htmlFor=\"budgetMin\" className=\"text-body-sm form-label\">\n                      {formData.budgetType === 'hourly' ? 'Min Rate' : 'Min Budget'}\n                    </label>\n                    <UnifiedInput\n                      id=\"budgetMin\"\n                      name=\"budgetMin\"\n                      type=\"number\"\n                      value={formData.budgetMin}\n                      onChange={handleInputChange}\n                      placeholder=\"0\"\n                      min=\"0\"\n                      step=\"0.01\"\n                    />\n                  </div>\n                  <div>\n                    <label htmlFor=\"budgetMax\" className=\"text-body-sm form-label\">\n                      {formData.budgetType === 'hourly' ? 'Max Rate' : 'Max Budget'}\n                    </label>\n                    <UnifiedInput\n                      id=\"budgetMax\"\n                      name=\"budgetMax\"\n                      type=\"number\"\n                      value={formData.budgetMax}\n                      onChange={handleInputChange}\n                      placeholder=\"0\"\n                      min=\"0\"\n                      step=\"0.01\"\n                    />\n                  </div>\n                </div>\n              )}\n\n              <div className=\"brand-marketplace grid grid-cols-1 gap-md md:grid-cols-2\">\n                <div>\n                  <label htmlFor=\"startDate\" className=\"text-body-sm form-label\">\n                    Start Date\n                  </label>\n                  <UnifiedInput\n                    id=\"startDate\"\n                    name=\"startDate\"\n                    type=\"date\"\n                    value={formData.startDate}\n                    onChange={handleInputChange}\n                  />\n                </div>\n                <div>\n                  <label htmlFor=\"endDate\" className=\"text-body-sm form-label\">\n                    End Date\n                  </label>\n                  <UnifiedInput\n                    id=\"endDate\"\n                    name=\"endDate\"\n                    type=\"date\"\n                    value={formData.endDate}\n                    onChange={handleInputChange}\n                  />\n                </div>\n              </div>\n\n              <div>\n                <label htmlFor=\"duration\" className=\"text-body-sm form-label\">\n                  Duration\n                </label>\n                <UnifiedInput\n                  id=\"duration\"\n                  name=\"duration\"\n                  value={formData.duration}\n                  onChange={handleInputChange}\n                  placeholder=\"e.g., 2 weeks, 1 month\"\n                />\n              </div>\n\n              <div className=\"brand-marketplace grid grid-cols-1 gap-md md:grid-cols-2\">\n                <div>\n                  <label className=\"text-body-sm form-label\">Location Type</label>\n                  <Select\n                    value={formData.locationType}\n                    onValueChange={handleSelectChange('locationType')}\n                  >\n                    <SelectTrigger>\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>{locationTypeItems}</SelectContent>\n                  </Select>\n                </div>\n                <div>\n                  <label className=\"text-body-sm form-label\">Visibility</label>\n                  <Select\n                    value={formData.visibility}\n                    onValueChange={handleSelectChange('visibility')}\n                  >\n                    <SelectTrigger>\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>{visibilityItems}</SelectContent>\n                  </Select>\n                </div>\n              </div>\n\n              <div className=\"brand-marketplace flex items-center gap-sm pt-sm\">\n                <input\n                  id=\"isUrgent\"\n                  name=\"isUrgent\"\n                  type=\"checkbox\"\n                  checked={formData.isUrgent}\n                  onChange={handleInputChange}\n                  className=\"rounded border-border\"\n                />\n                <label htmlFor=\"isUrgent\" className=\"text-body-sm\">\n                  Mark as urgent project\n                </label>\n              </div>\n\n              <div className=\"brand-marketplace flex items-center justify-between gap-sm pt-md\">\n                <div className=\"flex items-center gap-sm text-body-sm color-muted\">\n                  {error && (\n                    <>\n                      <AlertCircle className=\"h-4 w-4 color-destructive\" />\n                      <span className=\"color-destructive\">{error}</span>\n                    </>\n                  )}\n                </div>\n                <div className=\"brand-marketplace flex items-center gap-sm\">\n                  <Button type=\"button\" variant=\"outline\" onClick={handleCloseDrawer}>\n                    Cancel\n                  </Button>\n                  <Button type=\"submit\" disabled={isSubmitDisabled}>\n                    {selectedProject ? 'Update Project' : 'Post Project'}\n                  </Button>\n                </div>\n              </div>\n            </form>\n          ),\n        }]}\n      />\n    </div>\n  );\n}\n\ninterface ProjectCardProps {\n  project: OpenDeckProject;\n  onEdit: (project: OpenDeckProject) => void;\n  onDelete: (id: string) => void;\n}\n\nfunction ProjectCard({ project, onEdit, onDelete }: ProjectCardProps) {\n  return (\n    <Card className=\"p-lg hover:shadow-floating transition-shadow\">\n      <div className=\"brand-marketplace flex justify-between items-start mb-md\">\n        <div>\n          <h3 className=\"text-body text-heading-4\">{project.title}</h3>\n          <p className=\"text-body-sm color-muted\">{project.category}</p>\n        </div>\n        <Badge\n          variant={\n            project.status === 'open'\n              ? 'success'\n              : project.status === 'in_progress'\n              ? 'warning'\n              : 'secondary'\n          }\n        >\n          {project.status}\n        </Badge>\n      </div>\n\n      <p className=\"text-body-sm line-clamp-3 mb-md\">{project.description}</p>\n\n      <div className=\"brand-marketplace stack-sm mb-md\">\n        <div className=\"brand-marketplace flex items-center text-body-sm\">\n          <DollarSign className=\"h-4 w-4 mr-sm color-muted\" />\n          {project.budget_type === 'fixed'\n            ? `$${project.budget_min?.toLocaleString()} - $${project.budget_max?.toLocaleString()}`\n            : project.budget_type === 'hourly'\n            ? `$${project.budget_min}/hr`\n            : 'Budget not specified'}\n        </div>\n        <div className=\"brand-marketplace flex items-center text-body-sm\">\n          <Calendar className=\"h-4 w-4 mr-sm color-muted\" />\n          {project.duration || 'Timeline flexible'}\n        </div>\n        <div className=\"brand-marketplace flex items-center text-body-sm\">\n          <MapPin className=\"h-4 w-4 mr-sm color-muted\" />\n          {project.location_type || 'Remote'}\n        </div>\n        <div className=\"brand-marketplace flex items-center text-body-sm\">\n          <Users className=\"h-4 w-4 mr-sm color-muted\" />\n          {project.proposals?.[0]?.count || 0} proposals\n        </div>\n      </div>\n\n      {project.is_urgent && (\n        <Badge variant=\"destructive\" className=\"mb-md\">\n          <AlertCircle className=\"h-3 w-3 mr-xs\" />\n          Urgent\n        </Badge>\n      )}\n\n      <div className=\"brand-marketplace flex cluster-sm\">\n        <Button variant=\"outline\" className=\"flex-1\" onClick={() => onEdit(project)}>\n          <Edit className=\"h-4 w-4 mr-xs\" />\n          Edit\n        </Button>\n        <Button variant=\"outline\" className=\"flex-1\">\n          <Eye className=\"h-4 w-4 mr-xs\" />\n          View\n        </Button>\n        <Button variant=\"ghost\" onClick={() => onDelete(project.id)}>\n          <Trash2 className=\"h-4 w-4\" />\n        </Button>\n      </div>\n    </Card>\n  );\n}\n\ninterface ProjectListRowProps {\n  project: OpenDeckProject;\n  onEdit: (project: OpenDeckProject) => void;\n  onDelete: (id: string) => void;\n}\n\nfunction ProjectListRow({ project, onEdit, onDelete }: ProjectListRowProps) {\n  return (\n    <div className=\"p-md hover:bg-accent/50 transition-colors\">\n      <div className=\"brand-marketplace flex items-center justify-between\">\n        <div className=\"brand-marketplace flex-1\">\n          <div className=\"brand-marketplace flex items-center gap-sm\">\n            <h3 className=\"text-body text-heading-4\">{project.title}</h3>\n            <Badge\n              variant={\n                project.status === 'open'\n                  ? 'success'\n                  : project.status === 'in_progress'\n                  ? 'warning'\n                  : 'secondary'\n              }\n            >\n              {project.status}\n            </Badge>\n            {project.is_urgent && <Badge variant=\"destructive\">Urgent</Badge>}\n          </div>\n          <p className=\"text-body-sm color-muted mt-xs\">{project.description}</p>\n          <div className=\"brand-marketplace flex items-center gap-md mt-sm text-body-sm color-muted\">\n            <span>{project.category}</span>\n            <span>•</span>\n            <span>{project.proposals?.[0]?.count || 0} proposals</span>\n            <span>•</span>\n            <span>Posted {new Date(project.created_at).toLocaleDateString()}</span>\n          </div>\n        </div>\n        <div className=\"brand-marketplace flex items-center gap-sm\">\n          <Button variant=\"ghost\" onClick={() => onEdit(project)}>\n            <Edit className=\"h-4 w-4\" />\n          </Button>\n          <Button variant=\"ghost\">\n            <Eye className=\"h-4 w-4\" />\n          </Button>\n          <Button variant=\"ghost\" onClick={() => onDelete(project.id)}>\n            <Trash2 className=\"h-4 w-4\" />\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ghxstship/apps/web/app/(app)/(shell)/marketplace/ProposalSystem.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'loadProject' and 'loadProposals'. Either include them or remove the dependency array.","line":125,"column":6,"nodeType":"ArrayExpression","endLine":125,"endColumn":17,"suggestions":[{"desc":"Update the dependencies array to be: [loadProject, loadProposals, projectId]","fix":{"range":[3250,3261],"text":"[loadProject, loadProposals, projectId]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"The 'loadProposals' function makes the dependencies of useCallback Hook (at line 329) change on every render. To fix this, wrap the definition of 'loadProposals' in its own useCallback() Hook.","line":137,"column":3,"nodeType":"FunctionDeclaration","endLine":169,"endColumn":4}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\n\n\nimport { Send, DollarSign, Calendar, CheckCircle, XCircle, Star, Award, AlertCircle, FileText } from \"lucide-react\";\nimport { useCallback, useEffect, useMemo, useState, type ChangeEvent, type FormEvent } from 'react';\nimport {\n  Card,\n  Button,\n  Badge,\n  UnifiedInput,\n  Textarea,\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from '@ghxstship/ui';\nimport { createBrowserClient } from '@ghxstship/auth';\nimport AppDrawer from '@/app/_components/shared/AppDrawer';\n\ntype ProposalStatus = 'submitted' | 'shortlisted' | 'accepted' | 'rejected' | string;\ntype ProposalFeeType = 'fixed' | 'hourly';\n\ninterface ProposalFormData {\n  coverLetter: string;\n  approach: string;\n  bidAmount: string;\n  currency: string;\n  feeType: ProposalFeeType;\n  estimatedHours: string;\n  proposedTimeline: string;\n  startAvailability: string;\n  questions: string;\n}\n\ninterface VendorProfile {\n  id: string;\n  display_name?: string | null;\n  avatar_url?: string | null;\n  rating?: number | null;\n  total_reviews?: number | null;\n  hourly_rate?: number | null;\n}\n\ninterface ProposalMilestone {\n  title: string;\n  description: string;\n  amount: number;\n  duration: string;\n}\n\ninterface OpenDeckProposal {\n  id: string;\n  project_id: string;\n  vendor_id: string;\n  status: ProposalStatus;\n  vendor?: VendorProfile;\n  milestones?: ProposalMilestone[];\n  client_viewed?: boolean;\n  created_at: string;\n  cover_letter: string;\n  approach: string;\n  bid_amount: number;\n  currency: string;\n  fee_type: ProposalFeeType;\n  estimated_hours?: number | null;\n  proposed_timeline: string;\n  start_availability?: string | null;\n  questions?: string | null;\n}\n\ninterface OpenDeckProject extends Partial<{\n  budget_type: 'fixed' | 'hourly' | 'not_specified';\n  budget_min: number;\n  budget_max: number;\n  duration: string;\n  description: string;\n  start_date: string;\n  end_date: string;\n  status: string;\n}> {\n  id: string;\n  title: string;\n}\n\ninterface ProposalSystemProps {\n  projectId: string;\n  vendorId?: string;\n  userId: string;\n  mode: 'vendor' | 'client';\n}\n\nconst FEE_TYPE_OPTIONS: ReadonlyArray<{ value: ProposalFeeType; label: string }> = [\n  { value: 'fixed', label: 'Fixed Price' },\n  { value: 'hourly', label: 'Hourly Rate' },\n];\n\nconst createInitialFormData = (): ProposalFormData => ({\n  coverLetter: '',\n  approach: '',\n  bidAmount: '',\n  currency: 'USD',\n  feeType: 'fixed',\n  estimatedHours: '',\n  proposedTimeline: '',\n  startAvailability: '',\n  questions: '',\n});\n\nexport default function ProposalSystem({ projectId, vendorId, userId, mode }: ProposalSystemProps) {\n  const supabase = createBrowserClient();\n  const [proposals, setProposals] = useState<OpenDeckProposal[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [drawerOpen, setDrawerOpen] = useState(false);\n  const [selectedProposal, setSelectedProposal] = useState<OpenDeckProposal | null>(null);\n  const [project, setProject] = useState<OpenDeckProject | null>(null);\n  const [formData, setFormData] = useState<ProposalFormData>(() => createInitialFormData());\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n\n  useEffect(() => {\n    loadProject();\n    loadProposals();\n  }, [projectId]);\n\n  async function loadProject() {\n    const { data } = await supabase\n      .from('opendeck_projects')\n      .select('*')\n      .eq('id', projectId)\n      .single();\n    \n    setProject(data as OpenDeckProject | null);\n  }\n\n  async function loadProposals() {\n    setLoading(true);\n    try {\n      let query = supabase\n        .from('opendeck_proposals')\n        .select(`\n          *,\n          vendor:opendeck_vendor_profiles!vendor_id(\n            id,\n            display_name,\n            avatar_url,\n            rating,\n            total_reviews,\n            hourly_rate\n          )\n        `)\n        .eq('project_id', projectId)\n        .order('created_at', { ascending: false });\n\n      if (mode === 'vendor' && vendorId) {\n        query = query.eq('vendor_id', vendorId);\n      }\n\n      const { data, error } = await query;\n      if (error) throw error;\n\n      setProposals((data || []) as OpenDeckProposal[]);\n    } catch (error) {\n      console.error('Error loading proposals:', error);\n    } finally {\n      setLoading(false);\n    }\n  }\n\n  async function updateProposalStatus(proposalId: string, status: ProposalStatus) {\n    try {\n      const { error } = await supabase\n        .from('opendeck_proposals')\n        .update({ \n          status,\n          client_viewed: true,\n          client_viewed_at: new Date().toISOString(),\n          shortlisted: status === 'shortlisted'\n        })\n        .eq('id', proposalId);\n\n      if (error) throw error;\n      loadProposals();\n    } catch (error) {\n      console.error('Error updating proposal:', error);\n    }\n  }\n\n  const updateForm = useCallback(<Key extends keyof ProposalFormData>(field: Key, value: ProposalFormData[Key]) => {\n    setFormData(prev => ({ ...prev, [field]: value }));\n  }, []);\n\n  const handleInputChange = useCallback((event: ChangeEvent<HTMLInputElement>) => {\n    const { name, value } = event.target;\n    updateForm(name as keyof ProposalFormData, value as ProposalFormData[keyof ProposalFormData]);\n  }, [updateForm]);\n\n  const handleTextareaChange = useCallback((event: ChangeEvent<HTMLTextAreaElement>) => {\n    const { name, value } = event.target;\n    updateForm(name as keyof ProposalFormData, value as ProposalFormData[keyof ProposalFormData]);\n  }, [updateForm]);\n\n  const handleFeeTypeChange = useCallback((value: string) => {\n    updateForm('feeType', value as ProposalFeeType);\n  }, [updateForm]);\n\n  const handleOpenDrawer = useCallback((proposal?: OpenDeckProposal | null) => {\n    if (proposal) {\n      setSelectedProposal(proposal);\n      setFormData({\n        coverLetter: proposal.cover_letter,\n        approach: proposal.approach,\n        bidAmount: String(proposal.bid_amount ?? ''),\n        currency: proposal.currency ?? 'USD',\n        feeType: (proposal.fee_type as ProposalFeeType) || 'fixed',\n        estimatedHours: proposal.estimated_hours != null ? String(proposal.estimated_hours) : '',\n        proposedTimeline: proposal.proposed_timeline,\n        startAvailability: proposal.start_availability ?? '',\n        questions: proposal.questions ?? '',\n      });\n    } else {\n      setSelectedProposal(null);\n      setFormData(createInitialFormData());\n    }\n\n    setError(null);\n    setDrawerOpen(true);\n  }, []);\n\n  const handleCloseDrawer = useCallback(() => {\n    if (isSubmitting) {\n      return;\n    }\n\n    setDrawerOpen(false);\n    setSelectedProposal(null);\n    setFormData(createInitialFormData());\n    setError(null);\n  }, [isSubmitting]);\n\n  const feeTypeItems = useMemo(() => FEE_TYPE_OPTIONS.map(option => (\n    <SelectItem key={option.value} value={option.value}>\n      {option.label}\n    </SelectItem>\n  )), []);\n\n  const handleSubmitProposal = useCallback(async (event: FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    if (!vendorId) {\n      return;\n    }\n\n    const trimmedCoverLetter = formData.coverLetter.trim();\n    const trimmedApproach = formData.approach.trim();\n    const trimmedTimeline = formData.proposedTimeline.trim();\n    const trimmedQuestions = formData.questions.trim();\n\n    if (trimmedCoverLetter.length < 100) {\n      setError('Cover letter must be at least 100 characters.');\n      return;\n    }\n\n    if (trimmedApproach.length < 50) {\n      setError('Approach must be at least 50 characters.');\n      return;\n    }\n\n    if (trimmedTimeline.length < 10) {\n      setError('Timeline must be at least 10 characters.');\n      return;\n    }\n\n    const bidAmountValue = parseFloat(formData.bidAmount.trim());\n    if (Number.isNaN(bidAmountValue) || bidAmountValue <= 0) {\n      setError('Bid amount is required and must be greater than zero.');\n      return;\n    }\n\n    const estimatedHoursValue = parseFloat(formData.estimatedHours.trim());\n    if (formData.feeType === 'hourly' && (Number.isNaN(estimatedHoursValue) || estimatedHoursValue <= 0)) {\n      setError('Estimated hours must be greater than zero for hourly proposals.');\n      return;\n    }\n\n    setError(null);\n    setIsSubmitting(true);\n\n    const payload: Partial<OpenDeckProposal> = {\n      cover_letter: trimmedCoverLetter,\n      approach: trimmedApproach,\n      bid_amount: bidAmountValue,\n      currency: formData.currency,\n      fee_type: formData.feeType,\n      estimated_hours: formData.feeType === 'hourly' ? estimatedHoursValue : null,\n      proposed_timeline: trimmedTimeline,\n      start_availability: formData.startAvailability || null,\n      questions: trimmedQuestions || null,\n      project_id: projectId,\n      vendor_id: vendorId,\n      status: 'submitted',\n    };\n\n    try {\n      const { error: insertError } = await supabase\n        .from('opendeck_proposals')\n        .insert(payload);\n\n      if (insertError) {\n        throw insertError;\n      }\n\n      await supabase.rpc('increment', {\n        table_name: 'opendeck_projects',\n        column_name: 'proposals_count',\n        row_id: projectId,\n      });\n\n      setDrawerOpen(false);\n      setFormData(createInitialFormData());\n      loadProposals();\n    } catch (submitError) {\n      console.error('Error submitting proposal:', submitError);\n      setError(submitError instanceof Error ? submitError.message : 'An unexpected error occurred while submitting the proposal.');\n    } finally {\n      setIsSubmitting(false);\n    }\n  }, [formData, loadProposals, projectId, supabase, vendorId]);\n\n  const isSubmitDisabled = useMemo(() => {\n    if (isSubmitting || !vendorId) {\n      return true;\n    }\n\n    const trimmedCoverLetter = formData.coverLetter.trim();\n    const trimmedApproach = formData.approach.trim();\n    const trimmedTimeline = formData.proposedTimeline.trim();\n    const bidAmountValue = parseFloat(formData.bidAmount.trim());\n    const estimatedHoursValue = parseFloat(formData.estimatedHours.trim());\n\n    return (\n      trimmedCoverLetter.length < 100 ||\n      trimmedApproach.length < 50 ||\n      trimmedTimeline.length < 10 ||\n      Number.isNaN(bidAmountValue) ||\n      bidAmountValue <= 0 ||\n      (formData.feeType === 'hourly' && (Number.isNaN(estimatedHoursValue) || estimatedHoursValue <= 0))\n    );\n  }, [formData, isSubmitting, vendorId]);\n\n  const ProposalCard = ({ proposal }: { proposal: OpenDeckProposal }) => (\n    <Card className=\"p-lg\">\n      <div className=\"brand-marketplace flex justify-between items-start mb-md\">\n        <div className=\"brand-marketplace flex items-start cluster\">\n          <div className=\"brand-marketplace w-12 h-12 rounded-full bg-gradient-to-br from-primary to-secondary flex items-center justify-center text-background text-heading-3\">\n            {proposal.vendor?.display_name?.charAt(0) || 'V'}\n          </div>\n          <div>\n            <h4 className=\"text-body text-heading-4\">{proposal.vendor?.display_name || 'Vendor'}</h4>\n            <div className=\"brand-marketplace flex items-center cluster-sm text-body-sm color-muted\">\n              <div className=\"brand-marketplace flex items-center\">\n                <Star className=\"h-4 w-4 color-warning fill-warning mr-xs\" />\n                <span>{proposal.vendor?.rating || 0}</span>\n              </div>\n              <span>•</span>\n              <span>{proposal.vendor?.total_reviews || 0} reviews</span>\n              {proposal.vendor?.hourly_rate && (\n                <>\n                  <span>•</span>\n                  <span>${proposal.vendor.hourly_rate}/hr</span>\n                </>\n              )}\n            </div>\n          </div>\n        </div>\n        <Badge variant={\n          proposal.status === 'accepted' ? 'success' :\n          proposal.status === 'shortlisted' ? 'warning' :\n          proposal.status === 'rejected' ? 'destructive' :\n          'secondary'\n        }>\n          {proposal.status}\n        </Badge>\n      </div>\n\n      <div className=\"brand-marketplace stack-sm\">\n        <div>\n          <p className=\"text-body-sm form-label mb-xs\">Proposed Budget</p>\n          <p className=\"text-heading-3\">\n            ${proposal.bid_amount?.toLocaleString()}\n            {proposal.fee_type === 'hourly' && <span className=\"text-body-sm text-body\">/hr</span>}\n          </p>\n        </div>\n\n        <div>\n          <p className=\"text-body-sm form-label mb-xs\">Timeline</p>\n          <p className=\"text-body-sm\">{proposal.proposed_timeline}</p>\n        </div>\n\n        <div>\n          <p className=\"text-body-sm form-label mb-xs\">Cover Letter</p>\n          <p className=\"text-body-sm line-clamp-3\">{proposal.cover_letter}</p>\n        </div>\n\n        {proposal.milestones && proposal.milestones.length > 0 && (\n          <div>\n            <p className=\"text-body-sm form-label mb-xs\">Milestones</p>\n            <div className=\"brand-marketplace stack-md\">\n              {proposal.milestones.slice(0, 2).map((milestone: ProposalMilestone, i: number) => (\n                <div key={i} className=\"flex justify-between text-body-sm\">\n                  <span>{milestone.title}</span>\n                  <span className=\"form-label\">${milestone.amount.toLocaleString()}</span>\n                </div>\n              ))}\n              {proposal.milestones.length > 2 && (\n                <p className=\"text-body-sm color-muted\">\n                  +{proposal.milestones.length - 2} more milestones\n                </p>\n              )}\n            </div>\n          </div>\n        )}\n      </div>\n\n      <div className=\"brand-marketplace flex cluster-sm mt-md\">\n        {mode === 'client' ? (\n          <>\n            <Button \n              variant=\"default\" \n              className=\"flex-1\"\n              onClick={() => updateProposalStatus(proposal.id, 'accepted')}\n            >\n              <CheckCircle className=\"h-4 w-4 mr-xs\" />\n              Accept\n            </Button>\n            <Button \n              \n              variant=\"outline\" \n              className=\"flex-1\"\n              onClick={() => updateProposalStatus(proposal.id, 'shortlisted')}\n            >\n              <Star className=\"h-4 w-4 mr-xs\" />\n              Shortlist\n            </Button>\n            <Button \n              \n              variant=\"ghost\"\n              onClick={() => updateProposalStatus(proposal.id, 'rejected')}\n            >\n              <XCircle className=\"h-4 w-4\" />\n            </Button>\n          </>\n        ) : (\n          <>\n            <Button variant=\"outline\" className=\"flex-1\">\n              View Details\n            </Button>\n            {proposal.status === 'submitted' && (\n              <Button variant=\"ghost\">\n                Withdraw\n              </Button>\n            )}\n          </>\n        )}\n      </div>\n    </Card>\n  );\n\n  if (loading) {\n    return (\n      <div className=\"brand-marketplace flex items-center justify-center h-64\">\n        <div className=\"brand-marketplace animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"brand-marketplace stack-lg\">\n      {/* Project Summary */}\n      {project && (\n        <Card className=\"p-lg bg-accent/10\">\n          <h3 className=\"text-body text-heading-4 mb-sm\">{project.title}</h3>\n          <p className=\"text-body-sm color-muted mb-md\">{project.description}</p>\n          <div className=\"brand-marketplace flex items-center cluster-lg text-body-sm\">\n            <div className=\"brand-marketplace flex items-center\">\n              <DollarSign className=\"h-4 w-4 mr-xs color-muted\" />\n              <span>\n                {project.budget_type === 'fixed' ? \n                  `$${project.budget_min?.toLocaleString()} - $${project.budget_max?.toLocaleString()}` :\n                  project.budget_type === 'hourly' ?\n                  `$${project.budget_min}/hr` :\n                  'Budget not specified'\n                }\n              </span>\n            </div>\n            <div className=\"brand-marketplace flex items-center\">\n              <Calendar className=\"h-4 w-4 mr-xs color-muted\" />\n              <span>{project.duration || 'Timeline flexible'}</span>\n            </div>\n            <div className=\"brand-marketplace flex items-center\">\n              <FileText className=\"h-4 w-4 mr-xs color-muted\" />\n              <span>{proposals.length} proposals</span>\n            </div>\n          </div>\n        </Card>\n      )}\n\n      {/* Actions */}\n      {mode === 'vendor' && (\n        <div className=\"brand-marketplace flex justify-between items-center\">\n          <h3 className=\"text-body text-heading-4\">Your Proposals</h3>\n          {proposals.length === 0 && (\n            <Button onClick={() => handleOpenDrawer()}>\n              <Send className=\"h-4 w-4 mr-sm\" />\n              Submit Proposal\n            </Button>\n          )}\n        </div>\n      )}\n\n      {mode === 'client' && (\n        <div className=\"brand-marketplace flex justify-between items-center\">\n          <h3 className=\"text-body text-heading-4\">Received Proposals</h3>\n          <div className=\"brand-marketplace flex items-center cluster-sm\">\n            <Badge variant=\"secondary\">\n              {proposals.filter(p => p.status === 'shortlisted').length} shortlisted\n            </Badge>\n            <Badge variant=\"success\">\n              {proposals.filter(p => p.status === 'accepted').length} accepted\n            </Badge>\n          </div>\n        </div>\n      )}\n\n      {/* Proposals List */}\n      {proposals.length === 0 ? (\n        <Card className=\"p-2xl text-center\">\n          <Award className=\"h-12 w-12 mx-auto mb-md color-muted\" />\n          <h3 className=\"text-body text-heading-4 mb-sm\">\n            {mode === 'vendor' ? 'No proposals submitted yet' : 'No proposals received yet'}\n          </h3>\n          <p className=\"color-muted mb-md\">\n            {mode === 'vendor' ? \n              'Submit a proposal to bid on this project' : \n              'Proposals from vendors will appear here'\n            }\n          </p>\n          {mode === 'vendor' && (\n            <Button onClick={() => handleOpenDrawer()}\n              disabled={isSubmitting}\n            >\n              <Send className=\"h-4 w-4 mr-sm\" />\n              Submit Proposal\n            </Button>\n          )}\n        </Card>\n      ) : (\n        <div className=\"brand-marketplace grid grid-cols-1 md:grid-cols-2 gap-md\">\n          {proposals.map(proposal => (\n            <ProposalCard key={proposal.id} proposal={proposal} />\n          ))}\n        </div>\n      )}\n\n      {/* Proposal Form Drawer */}\n      <AppDrawer\n        open={drawerOpen}\n        onClose={handleCloseDrawer}\n        title=\"Submit Proposal\"\n        record={selectedProposal}\n        mode={mode === 'vendor' ? 'create' : 'view'}\n        fields={[]}\n        loading={isSubmitting}\n        tabs={[{\n          key: 'proposal-details',\n          label: 'Proposal',\n          content: mode === 'vendor' ? (\n            <form onSubmit={handleSubmitProposal} className=\"p-lg stack-md\">\n              <div>\n                <label htmlFor=\"coverLetter\" className=\"text-body-sm form-label\">\n                  Cover Letter\n                </label>\n                <Textarea\n                  id=\"coverLetter\"\n                  name=\"coverLetter\"\n                  value={formData.coverLetter}\n                  onChange={handleTextareaChange}\n                  placeholder=\"Introduce yourself and explain why you're the best fit for this project...\"\n                  rows={4}\n                  required\n                />\n              </div>\n\n              <div>\n                <label htmlFor=\"approach\" className=\"text-body-sm form-label\">\n                  Your Approach\n                </label>\n                <Textarea\n                  id=\"approach\"\n                  name=\"approach\"\n                  value={formData.approach}\n                  onChange={handleTextareaChange}\n                  placeholder=\"Describe how you would approach this project...\"\n                  rows={3}\n                  required\n                />\n              </div>\n\n              <div className=\"brand-marketplace grid grid-cols-1 gap-md md:grid-cols-2\">\n                <div>\n                  <label className=\"text-body-sm form-label\">Fee Type</label>\n                  <Select value={formData.feeType} onValueChange={handleFeeTypeChange}>\n                    <SelectTrigger>\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>{feeTypeItems}</SelectContent>\n                  </Select>\n                </div>\n\n                <div>\n                  <label htmlFor=\"bidAmount\" className=\"text-body-sm form-label\">\n                    {formData.feeType === 'hourly' ? 'Hourly Rate' : 'Total Amount'}\n                  </label>\n                  <UnifiedInput\n                    id=\"bidAmount\"\n                    name=\"bidAmount\"\n                    type=\"number\"\n                    value={formData.bidAmount}\n                    onChange={handleInputChange}\n                    placeholder=\"0\"\n                    min=\"0\"\n                    step=\"0.01\"\n                    required\n                  />\n                </div>\n              </div>\n\n              {formData.feeType === 'hourly' && (\n                <div>\n                  <label htmlFor=\"estimatedHours\" className=\"text-body-sm form-label\">\n                    Estimated Hours\n                  </label>\n                  <UnifiedInput\n                    id=\"estimatedHours\"\n                    name=\"estimatedHours\"\n                    type=\"number\"\n                    value={formData.estimatedHours}\n                    onChange={handleInputChange}\n                    placeholder=\"0\"\n                    min=\"0\"\n                    step=\"0.1\"\n                  />\n                </div>\n              )}\n\n              <div>\n                <label htmlFor=\"proposedTimeline\" className=\"text-body-sm form-label\">\n                  Proposed Timeline\n                </label>\n                <UnifiedInput\n                  id=\"proposedTimeline\"\n                  name=\"proposedTimeline\"\n                  value={formData.proposedTimeline}\n                  onChange={handleInputChange}\n                  placeholder=\"e.g., 2 weeks, 1 month\"\n                  required\n                />\n              </div>\n\n              <div>\n                <label htmlFor=\"startAvailability\" className=\"text-body-sm form-label\">\n                  Start Availability\n                </label>\n                <UnifiedInput\n                  id=\"startAvailability\"\n                  name=\"startAvailability\"\n                  type=\"date\"\n                  value={formData.startAvailability}\n                  onChange={handleInputChange}\n                />\n              </div>\n\n              <div>\n                <label htmlFor=\"questions\" className=\"text-body-sm form-label\">\n                  Questions for Client (Optional)\n                </label>\n                <Textarea\n                  id=\"questions\"\n                  name=\"questions\"\n                  value={formData.questions}\n                  onChange={handleTextareaChange}\n                  placeholder=\"Any questions or clarifications needed?\"\n                  rows={2}\n                />\n              </div>\n\n              <div className=\"brand-marketplace flex justify-between items-center gap-sm pt-md border-t\">\n                <div className=\"flex items-center gap-sm text-body-sm color-muted\">\n                  {error && (\n                    <>\n                      <AlertCircle className=\"h-4 w-4 color-destructive\" />\n                      <span className=\"color-destructive\">{error}</span>\n                    </>\n                  )}\n                </div>\n                <div className=\"brand-marketplace flex items-center gap-sm\">\n                  <Button type=\"button\" variant=\"outline\" onClick={handleCloseDrawer}>\n                    Cancel\n                  </Button>\n                  <Button type=\"submit\" disabled={isSubmitDisabled}>\n                    {isSubmitting ? 'Submitting...' : 'Submit Proposal'}\n                  </Button>\n                </div>\n              </div>\n            </form>\n          ) : (\n            <div className=\"p-lg\">\n              <p className=\"text-body-sm color-muted\">Proposal details are available in the cards above.</p>\n            </div>\n          ),\n        }]}\n      />\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ghxstship/apps/web/app/(app)/(shell)/marketplace/listings/ListingsClient.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadListings'. Either include it or remove the dependency array.","line":158,"column":6,"nodeType":"ArrayExpression","endLine":158,"endColumn":22,"suggestions":[{"desc":"Update the dependencies array to be: [orgId, filters, loadListings]","fix":{"range":[3696,3712],"text":"[orgId, filters, loadListings]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { Plus, Search, Filter, Eye, Edit, Trash2, Star, MapPin, Calendar, DollarSign, Package, Users, Briefcase } from \"lucide-react\";\nimport { useState, useEffect } from 'react';\nimport { \n  DataGrid,\n  ViewSwitcher,\n  DataActions,\n  DataViewProvider,\n  StateManagerProvider,\n  UniversalDrawer,\n  Button,\n  Badge,\n  Card,\n  type DataRecord\n} from '@ghxstship/ui';\nimport { createBrowserClient } from '@ghxstship/auth';\nimport type { MarketplaceListing, ListingFilters } from '../types';\nimport CreateListingClient from '../drawers/CreateListingDrawer';\n\ninterface ListingsClientProps {\n  orgId: string;\n  userId: string;\n}\n\nconst LISTINGS_FIELD_CONFIGS = [\n  {\n    key: 'title',\n    label: 'Title',\n    type: 'text' as const,\n    sortable: true,\n    filterable: true,\n    searchable: true,\n    visible: true,\n    width: 250\n  },\n  {\n    key: 'type',\n    label: 'Type',\n    type: 'select' as const,\n    options: [\n      { label: 'Offer', value: 'offer' },\n      { label: 'Request', value: 'request' },\n      { label: 'Exchange', value: 'exchange' }\n    ],\n    sortable: true,\n    filterable: true,\n    visible: true,\n    width: 120\n  },\n  {\n    key: 'category',\n    label: 'Category',\n    type: 'select' as const,\n    options: [\n      { label: 'Equipment', value: 'equipment' },\n      { label: 'Services', value: 'services' },\n      { label: 'Talent', value: 'talent' },\n      { label: 'Locations', value: 'locations' },\n      { label: 'Materials', value: 'materials' },\n      { label: 'Other', value: 'other' }\n    ],\n    sortable: true,\n    filterable: true,\n    visible: true,\n    width: 140\n  },\n  {\n    key: 'status',\n    label: 'Status',\n    type: 'select' as const,\n    options: [\n      { label: 'Draft', value: 'draft' },\n      { label: 'Active', value: 'active' },\n      { label: 'Archived', value: 'archived' }\n    ],\n    sortable: true,\n    filterable: true,\n    visible: true,\n    width: 120\n  },\n  {\n    key: 'pricing',\n    label: 'Price',\n    type: 'currency' as const,\n    sortable: true,\n    filterable: true,\n    visible: true,\n    width: 140\n  },\n  {\n    key: 'location',\n    label: 'Location',\n    type: 'text' as const,\n    sortable: true,\n    filterable: true,\n    searchable: true,\n    visible: true,\n    width: 160\n  },\n  {\n    key: 'featured',\n    label: 'Featured',\n    type: 'boolean' as const,\n    sortable: true,\n    filterable: true,\n    visible: true,\n    width: 100\n  },\n  {\n    key: 'view_count',\n    label: 'Views',\n    type: 'number' as const,\n    sortable: true,\n    filterable: false,\n    visible: true,\n    width: 100\n  },\n  {\n    key: 'response_count',\n    label: 'Responses',\n    type: 'number' as const,\n    sortable: true,\n    filterable: false,\n    visible: true,\n    width: 120\n  },\n  {\n    key: 'created_at',\n    label: 'Created',\n    type: 'datetime' as const,\n    sortable: true,\n    filterable: true,\n    visible: true,\n    width: 160\n  }\n];\n\nexport default function ListingsClient({ orgId, userId }: ListingsClientProps) {\n  const [listings, setListings] = useState<MarketplaceListing[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [selectedView, setSelectedView] = useState<'grid' | 'list' | 'kanban' | 'calendar'>('grid');\n  const [drawerOpen, setDrawerOpen] = useState(false);\n  const [drawerMode, setDrawerMode] = useState<'create' | 'edit' | 'view'>('create');\n  const [selectedListing, setSelectedListing] = useState<MarketplaceListing | null>(null);\n  const [filters, setFilters] = useState<ListingFilters>({});\n  const [stats, setStats] = useState({\n    total: 0,\n    active: 0,\n    featured: 0,\n    responses: 0\n  });\n\n  const supabase = createBrowserClient();\n\n  useEffect(() => {\n    loadListings();\n  }, [orgId, filters]);\n\n  const loadListings = async () => {\n    try {\n      setLoading(true);\n      \n      // Build query parameters\n      const params = new URLSearchParams();\n      if (filters.type) params.append('type', filters.type);\n      if (filters.category) params.append('category', filters.category);\n      if (filters.location) params.append('location', filters.location);\n      if (filters.minPrice) params.append('minPrice', filters.minPrice);\n      if (filters.maxPrice) params.append('maxPrice', filters.maxPrice);\n      if (filters.search) params.append('search', filters.search);\n      if (filters.featured) params.append('featured', 'true');\n      if (filters.showMine) params.append('showMine', 'true');\n      if (filters.active) params.append('active', 'true');\n\n      const response = await fetch(`/api/v1/marketplace/listings?${params.toString()}`);\n      const data = await response.json();\n\n      if (response.ok) {\n        const listingsData = data.listings || [];\n        setListings(listingsData);\n        \n        // Calculate stats\n        setStats({\n          total: listingsData.length,\n          active: listingsData.filter((l: MarketplaceListing) => l.status === 'active').length,\n          featured: listingsData.filter((l: MarketplaceListing) => l.featured).length,\n          responses: listingsData.reduce((sum: number, l: MarketplaceListing) => sum + (l.response_count || 0), 0)\n        });\n      } else {\n        console.error('Error loading listings:', data.error);\n      }\n    } catch (error) {\n      console.error('Error loading listings:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleCreateListing = () => {\n    setSelectedListing(null);\n    setDrawerMode('create');\n    setDrawerOpen(true);\n  };\n\n  const handleEditListing = (listing: MarketplaceListing) => {\n    setSelectedListing(listing);\n    setDrawerMode('edit');\n    setDrawerOpen(true);\n  };\n\n  const handleViewListing = (listing: MarketplaceListing) => {\n    setSelectedListing(listing);\n    setDrawerMode('view');\n    setDrawerOpen(true);\n  };\n\n  const handleDeleteListing = async (listing: MarketplaceListing) => {\n    if (!confirm('Are you sure you want to delete this listing?')) return;\n\n    try {\n      const response = await fetch('/api/v1/marketplace/listings', {\n        method: 'DELETE',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ id: listing.id })\n      });\n\n      if (response.ok) {\n        await loadListings();\n      } else {\n        const data = await response.json();\n        console.error('Error deleting listing:', data.error);\n      }\n    } catch (error) {\n      console.error('Error deleting listing:', error);\n    }\n  };\n\n  const handleExport = async (format: 'csv' | 'json' | 'excel') => {\n    try {\n      const exportData = listings.map(listing => ({\n        title: listing.title,\n        type: listing.type,\n        category: listing.category,\n        status: listing.status,\n        price: listing.pricing?.amount || 0,\n        currency: listing.pricing?.currency || 'USD',\n        location: listing.location?.city || '',\n        featured: listing.featured,\n        views: listing.view_count || 0,\n        responses: listing.response_count || 0,\n        created: listing.created_at\n      }));\n\n      const filename = `marketplace-listings-${new Date().toISOString().split('T')[0]}`;\n      \n      if (format === 'csv') {\n        const csv = [\n          Object.keys(exportData[0]).join(','),\n          ...exportData.map(row => Object.values(row).join(','))\n        ].join('\\n');\n        \n        const blob = new Blob([csv], { type: 'text/csv' });\n        const url = URL.createObjectURL(blob);\n        const a = document.createElement('a');\n        a.href = url;\n        a.download = `${filename}.csv`;\n        a.click();\n        URL.revokeObjectURL(url);\n      } else if (format === 'json') {\n        const json = JSON.stringify(exportData, null, 2);\n        const blob = new Blob([json], { type: 'application/json' });\n        const url = URL.createObjectURL(blob);\n        const a = document.createElement('a');\n        a.href = url;\n        a.download = `${filename}.json`;\n        a.click();\n        URL.revokeObjectURL(url);\n      }\n    } catch (error) {\n      console.error('Error exporting listings:', error);\n    }\n  };\n\n  const handleBulkAction = async (action: string, selectedIds: string[]) => {\n    if (action === 'delete') {\n      if (!confirm(`Are you sure you want to delete ${selectedIds.length} listings?`)) return;\n      \n      try {\n        await Promise.all(\n          selectedIds.map(id => \n            fetch('/api/v1/marketplace/listings', {\n              method: 'DELETE',\n              headers: { 'Content-Type': 'application/json' },\n              body: JSON.stringify({ id })\n            })\n          )\n        );\n        await loadListings();\n      } catch (error) {\n        console.error('Error bulk deleting listings:', error);\n      }\n    } else if (action === 'feature') {\n      try {\n        await Promise.all(\n          selectedIds.map(id => \n            fetch('/api/v1/marketplace/listings', {\n              method: 'PUT',\n              headers: { 'Content-Type': 'application/json' },\n              body: JSON.stringify({ id, featured: true })\n            })\n          )\n        );\n        await loadListings();\n      } catch (error) {\n        console.error('Error bulk featuring listings:', error);\n      }\n    }\n  };\n\n  const handleSearch = (query: string) => {\n    setFilters(prev => ({ ...prev, search: query }));\n  };\n\n  const handleFilter = (newFilters: Partial<ListingFilters>) => {\n    setFilters(prev => ({ ...prev, ...newFilters }));\n  };\n\n  const getRowActions = (listing: MarketplaceListing) => [\n    {\n      label: 'View',\n      icon: Eye,\n      onClick: () => handleViewListing(listing)\n    },\n    {\n      label: 'Edit',\n      icon: Edit,\n      onClick: () => handleEditListing(listing),\n      disabled: listing.created_by !== userId\n    },\n    {\n      label: 'Delete',\n      icon: Trash2,\n      onClick: () => handleDeleteListing(listing),\n      disabled: listing.created_by !== userId,\n      variant: 'destructive' as const\n    }\n  ];\n\n  const renderListingCard = (listing: MarketplaceListing) => {\n    const typeIcons = {\n      offer: Package,\n      request: Search,\n      exchange: Users\n    };\n    const TypeIcon = typeIcons[listing.type];\n\n    return (\n      <Card key={listing.id} className=\"p-md hover:shadow-md transition-shadow\">\n        <div className=\"flex items-start justify-between mb-sm\">\n          <div className=\"flex items-center gap-sm\">\n            <TypeIcon className=\"h-5 w-5 color-primary\" />\n            <Badge variant={listing.type === 'offer' ? 'success' : listing.type === 'request' ? 'warning' : 'secondary'}>\n              {listing.type}\n            </Badge>\n            {listing.featured && <Badge variant=\"primary\">Featured</Badge>}\n          </div>\n          <Badge variant={listing.status === 'active' ? 'success' : 'secondary'}>\n            {listing.status}\n          </Badge>\n        </div>\n        \n        <h3 className=\"text-heading-4 mb-xs\">{listing.title}</h3>\n        <p className=\"text-body-sm color-muted mb-sm line-clamp-2\">{listing.description}</p>\n        \n        <div className=\"flex items-center gap-md mb-sm text-body-sm color-muted\">\n          <div className=\"flex items-center gap-xs\">\n            <Briefcase className=\"h-4 w-4\" />\n            <span>{listing.category}</span>\n          </div>\n          {listing.location?.city && (\n            <div className=\"flex items-center gap-xs\">\n              <MapPin className=\"h-4 w-4\" />\n              <span>{listing.location.city}</span>\n            </div>\n          )}\n          {listing.pricing?.amount && (\n            <div className=\"flex items-center gap-xs\">\n              <DollarSign className=\"h-4 w-4\" />\n              <span>{listing.pricing.currency} {listing.pricing.amount}</span>\n            </div>\n          )}\n        </div>\n        \n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center gap-md text-body-sm color-muted\">\n            <span>{listing.view_count || 0} views</span>\n            <span>{listing.response_count || 0} responses</span>\n          </div>\n          <div className=\"flex items-center gap-xs\">\n            <Button size=\"sm\" variant=\"outline\" onClick={() => handleViewListing(listing)}>\n              <Eye className=\"h-4 w-4\" />\n            </Button>\n            {listing.created_by === userId && (\n              <Button size=\"sm\" variant=\"outline\" onClick={() => handleEditListing(listing)}>\n                <Edit className=\"h-4 w-4\" />\n              </Button>\n            )}\n          </div>\n        </div>\n      </Card>\n    );\n  };\n\n  return (\n    <div className=\"stack-lg\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-heading-2\">Marketplace Listings</h1>\n          <p className=\"color-muted\">Browse and manage marketplace listings</p>\n        </div>\n        <Button onClick={handleCreateListing}>\n          <Plus className=\"h-4 w-4 mr-sm\" />\n          Create Listing\n        </Button>\n      </div>\n\n      {/* Stats Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-md\">\n        <Card className=\"p-md\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-body-sm color-muted\">Total Listings</p>\n              <p className=\"text-heading-3 font-bold\">{stats.total}</p>\n            </div>\n            <Briefcase className=\"h-8 w-8 color-primary\" />\n          </div>\n        </Card>\n        <Card className=\"p-md\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-body-sm color-muted\">Active</p>\n              <p className=\"text-heading-3 font-bold\">{stats.active}</p>\n            </div>\n            <Package className=\"h-8 w-8 color-success\" />\n          </div>\n        </Card>\n        <Card className=\"p-md\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-body-sm color-muted\">Featured</p>\n              <p className=\"text-heading-3 font-bold\">{stats.featured}</p>\n            </div>\n            <Star className=\"h-8 w-8 color-warning\" />\n          </div>\n        </Card>\n        <Card className=\"p-md\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-body-sm color-muted\">Total Responses</p>\n              <p className=\"text-heading-3 font-bold\">{stats.responses}</p>\n            </div>\n            <Users className=\"h-8 w-8 color-secondary\" />\n          </div>\n        </Card>\n      </div>\n\n      {/* Data View */}\n      <StateManagerProvider>\n        <DataViewProvider\n          data={listings}\n          fields={LISTINGS_FIELD_CONFIGS}\n          onExport={handleExport}\n          onBulkAction={handleBulkAction}\n        >\n          <Card className=\"p-md\">\n            <div className=\"flex items-center justify-between mb-md\">\n              <ViewSwitcher\n                currentView={selectedView}\n                onViewChange={setSelectedView}\n                availableViews={['grid', 'list', 'kanban']}\n              />\n              <div className=\"flex items-center gap-sm\">\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={() => setFilters(prev => ({ ...prev, showMine: !prev.showMine }))}\n                >\n                  {filters.showMine ? 'Show All' : 'Show Mine'}\n                </Button>\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={() => setFilters(prev => ({ ...prev, featured: !prev.featured }))}\n                >\n                  {filters.featured ? 'All Listings' : 'Featured Only'}\n                </Button>\n              </div>\n            </div>\n\n            <div className=\"stack-sm\">\n              <DataActions\n                onSearch={handleSearch}\n                onFilter={handleFilter}\n                onExport={handleExport}\n                showBulkActions={true}\n                bulkActions={[\n                  { label: 'Delete Selected', value: 'delete', variant: 'destructive' },\n                  { label: 'Feature Selected', value: 'feature', variant: 'default' }\n                ]}\n              />\n              \n              {selectedView === 'grid' ? (\n                <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-md\">\n                  {listings.map(renderListingCard)}\n                </div>\n              ) : (\n                <DataGrid\n                  viewType={selectedView}\n                  onRowClick={handleViewListing}\n                  rowActions={getRowActions}\n                  emptyMessage=\"No listings found\"\n                  loading={loading}\n                  className=\"min-h-[400px]\"\n                />\n              )}\n            </div>\n          </Card>\n        </DataViewProvider>\n      </StateManagerProvider>\n\n      {/* Create/Edit Drawer */}\n      <UniversalDrawer\n        isOpen={drawerOpen}\n        onClose={() => setDrawerOpen(false)}\n        title={drawerMode === 'create' ? 'Create Listing' : drawerMode === 'edit' ? 'Edit Listing' : 'View Listing'}\n        size=\"lg\"\n      >\n        <CreateListingClient\n          mode={drawerMode}\n          listing={selectedListing}\n          onSuccess={() => {\n            setDrawerOpen(false);\n            loadListings();\n          }}\n          onCancel={() => setDrawerOpen(false)}\n        />\n      </UniversalDrawer>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ghxstship/apps/web/app/(app)/(shell)/marketplace/overview/OverviewClient.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadDashboardData'. Either include it or remove the dependency array.","line":128,"column":6,"nodeType":"ArrayExpression","endLine":128,"endColumn":13,"suggestions":[{"desc":"Update the dependencies array to be: [loadDashboardData, orgId]","fix":{"range":[3197,3204],"text":"[loadDashboardData, orgId]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { LayoutDashboard, TrendingUp, Users, Briefcase, DollarSign, Star, Activity, Plus, Search, Filter, Download, Eye, MessageSquare, Calendar, ArrowUpRight, ArrowDownRight } from \"lucide-react\";\nimport { useState, useEffect } from 'react';\nimport { \n  Card, \n  Badge, \n  Button,\n  DataGrid,\n  ViewSwitcher,\n  DataActions,\n  DataViewProvider,\n  StateManagerProvider,\n  UniversalDrawer,\n  type DataRecord\n} from '@ghxstship/ui';\nimport { createBrowserClient } from '@ghxstship/auth';\nimport type { MarketplaceStats } from '../types';\n\ninterface OverviewClientProps {\n  orgId: string;\n  userId: string;\n  userRole: 'vendor' | 'client' | 'both';\n}\n\ninterface DashboardMetric {\n  id: string;\n  title: string;\n  value: string | number;\n  change: string;\n  trend: 'up' | 'down' | 'neutral';\n  icon: React.ComponentType<{ className?: string }>;\n  color: 'primary' | 'success' | 'warning' | 'destructive';\n}\n\ninterface RecentActivity extends DataRecord {\n  id: string;\n  type: 'listing_created' | 'proposal_submitted' | 'contract_signed' | 'payment_received';\n  title: string;\n  description: string;\n  timestamp: string;\n  user: string;\n  status: 'active' | 'pending' | 'completed';\n}\n\nconst OVERVIEW_FIELD_CONFIGS = [\n  {\n    key: 'type',\n    label: 'Type',\n    type: 'select' as const,\n    options: [\n      { label: 'Listing Created', value: 'listing_created' },\n      { label: 'Proposal Submitted', value: 'proposal_submitted' },\n      { label: 'Contract Signed', value: 'contract_signed' },\n      { label: 'Payment Received', value: 'payment_received' }\n    ],\n    sortable: true,\n    filterable: true,\n    visible: true,\n    width: 140\n  },\n  {\n    key: 'title',\n    label: 'Activity',\n    type: 'text' as const,\n    sortable: true,\n    filterable: true,\n    searchable: true,\n    visible: true,\n    width: 200\n  },\n  {\n    key: 'description',\n    label: 'Description',\n    type: 'text' as const,\n    sortable: false,\n    filterable: false,\n    searchable: true,\n    visible: true,\n    width: 300\n  },\n  {\n    key: 'user',\n    label: 'User',\n    type: 'text' as const,\n    sortable: true,\n    filterable: true,\n    searchable: true,\n    visible: true,\n    width: 150\n  },\n  {\n    key: 'status',\n    label: 'Status',\n    type: 'select' as const,\n    options: [\n      { label: 'Active', value: 'active' },\n      { label: 'Pending', value: 'pending' },\n      { label: 'Completed', value: 'completed' }\n    ],\n    sortable: true,\n    filterable: true,\n    visible: true,\n    width: 120\n  },\n  {\n    key: 'timestamp',\n    label: 'Time',\n    type: 'datetime' as const,\n    sortable: true,\n    filterable: true,\n    visible: true,\n    width: 160\n  }\n];\n\nexport default function OverviewClient({ orgId, userId, userRole }: OverviewClientProps) {\n  const [stats, setStats] = useState<MarketplaceStats | null>(null);\n  const [recentActivity, setRecentActivity] = useState<RecentActivity[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [drawerOpen, setDrawerOpen] = useState(false);\n  const [selectedView, setSelectedView] = useState<'grid' | 'list' | 'kanban' | 'calendar'>('grid');\n\n  const supabase = createBrowserClient();\n\n  useEffect(() => {\n    loadDashboardData();\n  }, [orgId]);\n\n  const loadDashboardData = async () => {\n    try {\n      setLoading(true);\n      \n      // Load marketplace statistics\n      const { data: listings } = await supabase\n        .from('marketplace_listings')\n        .select('*')\n        .eq('organization_id', orgId);\n\n      const { data: projects } = await supabase\n        .from('opendeck_projects')\n        .select('*')\n        .eq('organization_id', orgId);\n\n      const { data: vendors } = await supabase\n        .from('opendeck_vendor_profiles')\n        .select('*')\n        .eq('organization_id', orgId);\n\n      const { data: proposals } = await supabase\n        .from('opendeck_proposals')\n        .select('*');\n\n      // Calculate stats\n      const marketplaceStats: MarketplaceStats = {\n        totalListings: listings?.length || 0,\n        featuredListings: listings?.filter(l => l.featured)?.length || 0,\n        totalResponses: proposals?.length || 0,\n        averageResponseRate: 0,\n        activeOffers: listings?.filter(l => l.type === 'offer' && l.status === 'active')?.length || 0,\n        activeRequests: listings?.filter(l => l.type === 'request' && l.status === 'active')?.length || 0,\n        activeExchanges: listings?.filter(l => l.type === 'exchange' && l.status === 'active')?.length || 0,\n        totalVendors: vendors?.length || 0,\n        totalProjects: projects?.length || 0,\n        lastUpdated: new Date().toISOString()\n      };\n\n      setStats(marketplaceStats);\n\n      // Load recent activity (mock data for now)\n      const mockActivity: RecentActivity[] = [\n        {\n          id: '1',\n          type: 'listing_created',\n          title: 'New Equipment Listing',\n          description: 'LED Wall Panel System posted by TechCorp',\n          timestamp: new Date(Date.now() - 1000 * 60 * 30).toISOString(),\n          user: 'TechCorp',\n          status: 'active'\n        },\n        {\n          id: '2',\n          type: 'proposal_submitted',\n          title: 'Proposal Submitted',\n          description: 'Sound Engineer proposal for Festival 2024',\n          timestamp: new Date(Date.now() - 1000 * 60 * 60 * 2).toISOString(),\n          user: 'AudioPro',\n          status: 'pending'\n        },\n        {\n          id: '3',\n          type: 'contract_signed',\n          title: 'Contract Executed',\n          description: 'Lighting Design contract for Concert Series',\n          timestamp: new Date(Date.now() - 1000 * 60 * 60 * 6).toISOString(),\n          user: 'LightMaster',\n          status: 'completed'\n        }\n      ];\n\n      setRecentActivity(mockActivity);\n    } catch (error) {\n      console.error('Error loading dashboard data:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const getDashboardMetrics = (): DashboardMetric[] => {\n    if (!stats) return [];\n\n    return [\n      {\n        id: 'total-listings',\n        title: 'Total Listings',\n        value: stats.totalListings,\n        change: '+12%',\n        trend: 'up',\n        icon: Briefcase,\n        color: 'primary'\n      },\n      {\n        id: 'active-vendors',\n        title: 'Active Vendors',\n        value: stats.totalVendors,\n        change: '+8%',\n        trend: 'up',\n        icon: Users,\n        color: 'success'\n      },\n      {\n        id: 'total-projects',\n        title: 'Active Projects',\n        value: stats.totalProjects,\n        change: '+15%',\n        trend: 'up',\n        icon: LayoutDashboard,\n        color: 'warning'\n      },\n      {\n        id: 'total-responses',\n        title: 'Total Responses',\n        value: stats.totalResponses,\n        change: '-3%',\n        trend: 'down',\n        icon: MessageSquare,\n        color: 'destructive'\n      }\n    ];\n  };\n\n  const handleExport = async (format: 'csv' | 'json' | 'excel') => {\n    // Implementation for exporting overview data\n    console.log('Exporting overview data as:', format);\n  };\n\n  const handleBulkAction = async (action: string, selectedIds: string[]) => {\n    // Implementation for bulk actions on activity items\n    console.log('Bulk action:', action, 'on items:', selectedIds);\n  };\n\n  if (loading) {\n    return (\n      <div className=\"stack-lg\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-heading-2\">Marketplace Overview</h1>\n            <p className=\"color-muted\">Digital marketplace dashboard and analytics</p>\n          </div>\n        </div>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-md\">\n          {[...Array(4)].map((_, i) => (\n            <Card key={i} className=\"p-md animate-pulse\">\n              <div className=\"h-4 bg-muted rounded mb-sm\"></div>\n              <div className=\"h-8 bg-muted rounded mb-xs\"></div>\n              <div className=\"h-3 bg-muted rounded w-1/2\"></div>\n            </Card>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  const metrics = getDashboardMetrics();\n\n  return (\n    <div className=\"stack-lg\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-heading-2\">Marketplace Overview</h1>\n          <p className=\"color-muted\">\n            Digital marketplace for live and experiential entertainment\n          </p>\n        </div>\n        <div className=\"flex items-center gap-sm\">\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={() => loadDashboardData()}\n          >\n            <Activity className=\"h-4 w-4 mr-xs\" />\n            Refresh\n          </Button>\n        </div>\n      </div>\n\n      {/* Metrics Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-md\">\n        {metrics.map((metric) => {\n          const Icon = metric.icon;\n          const TrendIcon = metric.trend === 'up' ? ArrowUpRight : \n                           metric.trend === 'down' ? ArrowDownRight : Activity;\n          \n          return (\n            <Card key={metric.id} className=\"p-md\">\n              <div className=\"flex items-center justify-between mb-sm\">\n                <Icon className={`h-5 w-5 color-${metric.color}`} />\n                <Badge \n                  variant={metric.trend === 'up' ? 'success' : \n                          metric.trend === 'down' ? 'destructive' : 'secondary'}\n                  size=\"sm\"\n                >\n                  <TrendIcon className=\"h-3 w-3 mr-xs\" />\n                  {metric.change}\n                </Badge>\n              </div>\n              <div className=\"stack-xs\">\n                <h3 className=\"text-heading-4 font-bold\">{metric.value}</h3>\n                <p className=\"text-body-sm color-muted\">{metric.title}</p>\n              </div>\n            </Card>\n          );\n        })}\n      </div>\n\n      {/* Quick Actions */}\n      <Card className=\"p-md\">\n        <h3 className=\"text-heading-4 mb-md\">Quick Actions</h3>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-sm\">\n          <Button variant=\"outline\" className=\"justify-start\">\n            <Plus className=\"h-4 w-4 mr-sm\" />\n            Create Listing\n          </Button>\n          <Button variant=\"outline\" className=\"justify-start\">\n            <Briefcase className=\"h-4 w-4 mr-sm\" />\n            Post Project\n          </Button>\n          <Button variant=\"outline\" className=\"justify-start\">\n            <Users className=\"h-4 w-4 mr-sm\" />\n            Browse Vendors\n          </Button>\n          <Button variant=\"outline\" className=\"justify-start\">\n            <Star className=\"h-4 w-4 mr-sm\" />\n            View Reviews\n          </Button>\n        </div>\n      </Card>\n\n      {/* Recent Activity */}\n      <Card className=\"p-md\">\n        <div className=\"flex items-center justify-between mb-md\">\n          <h3 className=\"text-heading-4\">Recent Activity</h3>\n          <ViewSwitcher\n            currentView={selectedView}\n            onViewChange={setSelectedView}\n            availableViews={['grid', 'list']}\n          />\n        </div>\n\n        <StateManagerProvider>\n          <DataViewProvider\n            data={recentActivity}\n            fields={OVERVIEW_FIELD_CONFIGS}\n            onExport={handleExport}\n            onBulkAction={handleBulkAction}\n          >\n            <div className=\"stack-sm\">\n              <DataActions\n                onExport={handleExport}\n                showBulkActions={true}\n                searchConfig={{\n                  placeholder: \"Search activity...\",\n                  onSearch: (query) => console.log('Search:', query)\n                }}\n                filterConfig={{\n                  fields: OVERVIEW_FIELD_CONFIGS,\n                  onFilter: (filters) => console.log('Filter:', filters)\n                }}\n              />\n              \n              <DataGrid\n                viewType={selectedView}\n                onRowClick={(item) => console.log('Row clicked:', item)}\n                emptyMessage=\"No recent activity found\"\n                className=\"min-h-[300px]\"\n              />\n            </div>\n          </DataViewProvider>\n        </StateManagerProvider>\n      </Card>\n\n      {/* Marketplace Insights */}\n      {stats && (\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-md\">\n          <Card className=\"p-md\">\n            <h3 className=\"text-heading-4 mb-md\">Listing Distribution</h3>\n            <div className=\"stack-sm\">\n              <div className=\"flex items-center justify-between\">\n                <span className=\"text-body-sm\">Offers</span>\n                <Badge variant=\"primary\">{stats.activeOffers}</Badge>\n              </div>\n              <div className=\"flex items-center justify-between\">\n                <span className=\"text-body-sm\">Requests</span>\n                <Badge variant=\"secondary\">{stats.activeRequests}</Badge>\n              </div>\n              <div className=\"flex items-center justify-between\">\n                <span className=\"text-body-sm\">Exchanges</span>\n                <Badge variant=\"outline\">{stats.activeExchanges}</Badge>\n              </div>\n              <div className=\"flex items-center justify-between\">\n                <span className=\"text-body-sm\">Featured</span>\n                <Badge variant=\"success\">{stats.featuredListings}</Badge>\n              </div>\n            </div>\n          </Card>\n\n          <Card className=\"p-md\">\n            <h3 className=\"text-heading-4 mb-md\">Performance Metrics</h3>\n            <div className=\"stack-sm\">\n              <div className=\"flex items-center justify-between\">\n                <span className=\"text-body-sm\">Response Rate</span>\n                <span className=\"font-medium\">{stats.averageResponseRate}%</span>\n              </div>\n              <div className=\"flex items-center justify-between\">\n                <span className=\"text-body-sm\">Active Vendors</span>\n                <span className=\"font-medium\">{stats.totalVendors}</span>\n              </div>\n              <div className=\"flex items-center justify-between\">\n                <span className=\"text-body-sm\">Total Projects</span>\n                <span className=\"font-medium\">{stats.totalProjects}</span>\n              </div>\n              <div className=\"flex items-center justify-between\">\n                <span className=\"text-body-sm\">Last Updated</span>\n                <span className=\"text-body-sm color-muted\">\n                  {new Date(stats.lastUpdated).toLocaleTimeString()}\n                </span>\n              </div>\n            </div>\n          </Card>\n        </div>\n      )}\n\n      {/* Universal Drawer for Actions */}\n      <UniversalDrawer\n        isOpen={drawerOpen}\n        onClose={() => setDrawerOpen(false)}\n        title=\"Marketplace Action\"\n        size=\"lg\"\n      >\n        <div className=\"p-md\">\n          <p>Marketplace action content will go here...</p>\n        </div>\n      </UniversalDrawer>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ghxstship/apps/web/app/(app)/(shell)/marketplace/reviews/ReviewsClient.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadReviews'. Either include it or remove the dependency array.","line":65,"column":6,"nodeType":"ArrayExpression","endLine":65,"endColumn":13,"suggestions":[{"desc":"Update the dependencies array to be: [loadReviews, orgId]","fix":{"range":[1556,1563],"text":"[loadReviews, orgId]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { Star, ThumbsUp, ThumbsDown, MessageSquare, Filter, Search, Plus, Flag, Calendar, User, Award, TrendingUp } from \"lucide-react\";\nimport { useState, useEffect } from 'react';\nimport { \n  Card,\n  Button,\n  Badge,\n  Input,\n  Textarea,\n  Avatar\n} from '@ghxstship/ui';\n\ninterface ReviewsClientProps {\n  orgId: string;\n  userId: string;\n}\n\ninterface Review {\n  id: string;\n  reviewer_id: string;\n  reviewer_name: string;\n  reviewer_avatar?: string;\n  reviewee_id: string;\n  reviewee_name: string;\n  project_title?: string;\n  rating: number;\n  title: string;\n  content: string;\n  categories: {\n    communication: number;\n    quality: number;\n    timeliness: number;\n    professionalism: number;\n  };\n  helpful_count: number;\n  created_at: string;\n  response?: {\n    content: string;\n    created_at: string;\n  };\n  verified: boolean;\n  type: 'received' | 'given';\n}\n\nexport default function ReviewsClient({ orgId, userId }: ReviewsClientProps) {\n  const [reviews, setReviews] = useState<Review[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [filter, setFilter] = useState<'all' | 'received' | 'given'>('all');\n  const [ratingFilter, setRatingFilter] = useState<number | null>(null);\n  const [searchQuery, setSearchQuery] = useState('');\n  const [showWriteReview, setShowWriteReview] = useState(false);\n  const [stats, setStats] = useState({\n    averageRating: 0,\n    totalReviews: 0,\n    fiveStars: 0,\n    fourStars: 0,\n    threeStars: 0,\n    twoStars: 0,\n    oneStars: 0\n  });\n\n  useEffect(() => {\n    loadReviews();\n  }, [orgId]);\n\n  const loadReviews = async () => {\n    try {\n      setLoading(true);\n      \n      // Mock review data - would integrate with real reviews API\n      const mockReviews: Review[] = [\n        {\n          id: '1',\n          reviewer_id: 'user1',\n          reviewer_name: 'TechCorp Solutions',\n          reviewer_avatar: '',\n          reviewee_id: userId,\n          reviewee_name: 'Your Organization',\n          project_title: 'LED Wall System Rental',\n          rating: 5,\n          title: 'Excellent service and equipment quality',\n          content: 'The LED wall system was exactly what we needed for our event. Setup was smooth, equipment worked flawlessly throughout the 3-day event, and the support team was very responsive.',\n          categories: {\n            communication: 5,\n            quality: 5,\n            timeliness: 4,\n            professionalism: 5\n          },\n          helpful_count: 8,\n          created_at: '2024-01-15T10:00:00Z',\n          verified: true,\n          type: 'received'\n        },\n        {\n          id: '2',\n          reviewer_id: userId,\n          reviewer_name: 'Your Organization',\n          reviewee_id: 'vendor1',\n          reviewee_name: 'AudioPro Services',\n          project_title: 'Corporate Event Sound Engineering',\n          rating: 4,\n          title: 'Professional sound engineering services',\n          content: 'AudioPro delivered great sound quality for our corporate event. The team was professional and handled all technical aspects smoothly. Minor delay in setup but overall excellent work.',\n          categories: {\n            communication: 4,\n            quality: 5,\n            timeliness: 3,\n            professionalism: 4\n          },\n          helpful_count: 3,\n          created_at: '2024-01-12T14:30:00Z',\n          response: {\n            content: 'Thank you for the feedback! We apologize for the setup delay and have improved our processes since then.',\n            created_at: '2024-01-13T09:00:00Z'\n          },\n          verified: true,\n          type: 'given'\n        },\n        {\n          id: '3',\n          reviewer_id: 'user2',\n          reviewer_name: 'LightMaster Inc',\n          reviewee_id: userId,\n          reviewee_name: 'Your Organization',\n          project_title: 'Concert Series Lighting Contract',\n          rating: 5,\n          title: 'Outstanding collaboration and project management',\n          content: 'Working with this team was a pleasure. Clear communication, well-defined requirements, and prompt payments. The concert series was a huge success thanks to their professional approach.',\n          categories: {\n            communication: 5,\n            quality: 5,\n            timeliness: 5,\n            professionalism: 5\n          },\n          helpful_count: 12,\n          created_at: '2024-01-10T16:45:00Z',\n          verified: true,\n          type: 'received'\n        }\n      ];\n\n      setReviews(mockReviews);\n\n      // Calculate stats\n      const receivedReviews = mockReviews.filter(r => r.type === 'received');\n      const totalReviews = receivedReviews.length;\n      const avgRating = totalReviews > 0 \n        ? receivedReviews.reduce((sum, r) => sum + r.rating, 0) / totalReviews \n        : 0;\n\n      const ratingDistribution = receivedReviews.reduce((acc, review) => {\n        acc[review.rating] = (acc[review.rating] || 0) + 1;\n        return acc;\n      }, {} as Record<number, number>);\n\n      setStats({\n        averageRating: Math.round(avgRating * 10) / 10,\n        totalReviews,\n        fiveStars: ratingDistribution[5] || 0,\n        fourStars: ratingDistribution[4] || 0,\n        threeStars: ratingDistribution[3] || 0,\n        twoStars: ratingDistribution[2] || 0,\n        oneStars: ratingDistribution[1] || 0\n      });\n    } catch (error) {\n      console.error('Error loading reviews:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const filteredReviews = reviews.filter(review => {\n    const matchesFilter = filter === 'all' || review.type === filter;\n    const matchesRating = ratingFilter === null || review.rating === ratingFilter;\n    const matchesSearch = review.title.toLowerCase().includes(searchQuery.toLowerCase()) ||\n                         review.content.toLowerCase().includes(searchQuery.toLowerCase()) ||\n                         review.reviewer_name.toLowerCase().includes(searchQuery.toLowerCase());\n    return matchesFilter && matchesRating && matchesSearch;\n  });\n\n  const renderStars = (rating: number, size: 'sm' | 'md' = 'sm') => {\n    return (\n      <div className=\"flex items-center gap-xs\">\n        {[1, 2, 3, 4, 5].map((star) => (\n          <Star\n            key={star}\n            className={`${size === 'sm' ? 'h-4 w-4' : 'h-5 w-5'} ${\n              star <= rating ? 'fill-current color-warning' : 'color-muted'\n            }`}\n          />\n        ))}\n      </div>\n    );\n  };\n\n  const renderCategoryRating = (label: string, rating: number) => (\n    <div className=\"flex items-center justify-between\">\n      <span className=\"text-body-sm\">{label}</span>\n      <div className=\"flex items-center gap-xs\">\n        {renderStars(rating)}\n        <span className=\"text-body-sm font-medium\">{rating}</span>\n      </div>\n    </div>\n  );\n\n  return (\n    <div className=\"stack-lg\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-heading-2\">Reviews & Ratings</h1>\n          <p className=\"color-muted\">Manage feedback and build your reputation</p>\n        </div>\n        <Button onClick={() => setShowWriteReview(true)}>\n          <Plus className=\"h-4 w-4 mr-sm\" />\n          Write Review\n        </Button>\n      </div>\n\n      {/* Stats Overview */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-md\">\n        <Card className=\"p-md\">\n          <div className=\"text-center\">\n            <div className=\"flex items-center justify-center mb-sm\">\n              {renderStars(Math.round(stats.averageRating), 'md')}\n            </div>\n            <div className=\"text-heading-2 font-bold mb-xs\">{stats.averageRating}</div>\n            <p className=\"text-body-sm color-muted\">{stats.totalReviews} reviews</p>\n          </div>\n        </Card>\n\n        <Card className=\"p-md lg:col-span-2\">\n          <h3 className=\"text-heading-5 mb-sm\">Rating Distribution</h3>\n          <div className=\"stack-xs\">\n            {[5, 4, 3, 2, 1].map((rating) => {\n              const count = stats[`${rating === 1 ? 'one' : rating === 2 ? 'two' : rating === 3 ? 'three' : rating === 4 ? 'four' : 'five'}Stars` as keyof typeof stats] as number;\n              const percentage = stats.totalReviews > 0 ? (count / stats.totalReviews) * 100 : 0;\n              \n              return (\n                <div key={rating} className=\"flex items-center gap-sm\">\n                  <span className=\"text-body-sm w-8\">{rating}</span>\n                  <Star className=\"h-4 w-4 fill-current color-warning\" />\n                  <div className=\"flex-1 bg-muted rounded-full h-2\">\n                    <div \n                      className=\"bg-warning rounded-full h-2 transition-all\"\n                      style={{ width: `${percentage}%` }}\n                    />\n                  </div>\n                  <span className=\"text-body-sm w-8 text-right\">{count}</span>\n                </div>\n              );\n            })}\n          </div>\n        </Card>\n\n        <Card className=\"p-md\">\n          <div className=\"stack-sm\">\n            <div className=\"flex items-center justify-between\">\n              <span className=\"text-body-sm\">Response Rate</span>\n              <span className=\"text-body font-medium\">95%</span>\n            </div>\n            <div className=\"flex items-center justify-between\">\n              <span className=\"text-body-sm\">Avg Response Time</span>\n              <span className=\"text-body font-medium\">2 hours</span>\n            </div>\n            <div className=\"flex items-center justify-between\">\n              <span className=\"text-body-sm\">Verified Reviews</span>\n              <span className=\"text-body font-medium\">100%</span>\n            </div>\n          </div>\n        </Card>\n      </div>\n\n      {/* Filters and Reviews */}\n      <Card className=\"p-md\">\n        <div className=\"flex items-center justify-between mb-md\">\n          <h3 className=\"text-heading-4\">All Reviews</h3>\n          <div className=\"flex items-center gap-sm\">\n            <Button variant=\"outline\" size=\"sm\">\n              <Filter className=\"h-4 w-4 mr-xs\" />\n              Filter\n            </Button>\n          </div>\n        </div>\n\n        <div className=\"flex items-center gap-sm mb-md\">\n          <Input\n            placeholder=\"Search reviews...\"\n            value={searchQuery}\n            onChange={(e) => setSearchQuery(e.target.value)}\n            className=\"flex-1\"\n          />\n          <div className=\"flex items-center gap-sm\">\n            <Button\n              variant={filter === 'all' ? 'default' : 'outline'}\n              size=\"sm\"\n              onClick={() => setFilter('all')}\n            >\n              All\n            </Button>\n            <Button\n              variant={filter === 'received' ? 'default' : 'outline'}\n              size=\"sm\"\n              onClick={() => setFilter('received')}\n            >\n              Received\n            </Button>\n            <Button\n              variant={filter === 'given' ? 'default' : 'outline'}\n              size=\"sm\"\n              onClick={() => setFilter('given')}\n            >\n              Given\n            </Button>\n          </div>\n        </div>\n\n        <div className=\"stack-md\">\n          {filteredReviews.map((review) => (\n            <Card key={review.id} className=\"p-md border\">\n              <div className=\"flex items-start justify-between mb-sm\">\n                <div className=\"flex items-center gap-sm\">\n                  <Avatar className=\"h-10 w-10\">\n                    <div className=\"flex items-center justify-center h-full w-full bg-primary/10\">\n                      <User className=\"h-5 w-5 color-primary\" />\n                    </div>\n                  </Avatar>\n                  <div>\n                    <div className=\"flex items-center gap-sm mb-xs\">\n                      <h4 className=\"text-body font-medium\">{review.reviewer_name}</h4>\n                      {review.verified && (\n                        <Badge variant=\"success\" size=\"sm\">\n                          <Award className=\"h-3 w-3 mr-xs\" />\n                          Verified\n                        </Badge>\n                      )}\n                      <Badge variant={review.type === 'received' ? 'secondary' : 'outline'} size=\"sm\">\n                        {review.type === 'received' ? 'Received' : 'Given'}\n                      </Badge>\n                    </div>\n                    <div className=\"flex items-center gap-sm\">\n                      {renderStars(review.rating)}\n                      <span className=\"text-body-sm color-muted\">\n                        {new Date(review.created_at).toLocaleDateString()}\n                      </span>\n                      {review.project_title && (\n                        <span className=\"text-body-sm color-muted\">\n                          • {review.project_title}\n                        </span>\n                      )}\n                    </div>\n                  </div>\n                </div>\n                <Button variant=\"ghost\" size=\"sm\">\n                  <Flag className=\"h-4 w-4\" />\n                </Button>\n              </div>\n\n              <h3 className=\"text-body font-medium mb-sm\">{review.title}</h3>\n              <p className=\"text-body-sm mb-md\">{review.content}</p>\n\n              {/* Category Ratings */}\n              <div className=\"grid grid-cols-2 lg:grid-cols-4 gap-md mb-md p-sm bg-muted/50 rounded\">\n                {renderCategoryRating('Communication', review.categories.communication)}\n                {renderCategoryRating('Quality', review.categories.quality)}\n                {renderCategoryRating('Timeliness', review.categories.timeliness)}\n                {renderCategoryRating('Professionalism', review.categories.professionalism)}\n              </div>\n\n              {/* Response */}\n              {review.response && (\n                <div className=\"p-sm bg-primary/5 rounded mb-sm\">\n                  <div className=\"flex items-center gap-sm mb-xs\">\n                    <MessageSquare className=\"h-4 w-4 color-primary\" />\n                    <span className=\"text-body-sm font-medium\">Response from {review.reviewee_name}</span>\n                    <span className=\"text-body-sm color-muted\">\n                      {new Date(review.response.created_at).toLocaleDateString()}\n                    </span>\n                  </div>\n                  <p className=\"text-body-sm\">{review.response.content}</p>\n                </div>\n              )}\n\n              {/* Actions */}\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center gap-sm\">\n                  <Button variant=\"ghost\" size=\"sm\">\n                    <ThumbsUp className=\"h-4 w-4 mr-xs\" />\n                    Helpful ({review.helpful_count})\n                  </Button>\n                  {review.type === 'received' && !review.response && (\n                    <Button variant=\"outline\" size=\"sm\">\n                      <MessageSquare className=\"h-4 w-4 mr-xs\" />\n                      Respond\n                    </Button>\n                  )}\n                </div>\n                <Button variant=\"ghost\" size=\"sm\">\n                  Share\n                </Button>\n              </div>\n            </Card>\n          ))}\n        </div>\n      </Card>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ghxstship/apps/web/app/(app)/(shell)/marketplace/settings/SettingsClient.tsx","messages":[{"ruleId":"@next/next/no-img-element","severity":1,"message":"Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` or a custom image loader to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","line":218,"column":17,"nodeType":"JSXOpeningElement","endLine":218,"endColumn":106}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { Settings, Bell, Shield, CreditCard, Globe, Users, Eye, Lock, Mail, Smartphone, Save, RefreshCw, AlertCircle, CheckCircle, Trash2 } from \"lucide-react\";\nimport { useState, useEffect } from 'react';\nimport { \n  Card,\n  Button,\n  Input,\n  Textarea,\n  Select,\n  Badge\n} from '@ghxstship/ui';\n\ninterface SettingsClientProps {\n  orgId: string;\n  userId: string;\n}\n\ninterface MarketplaceSettings {\n  // Profile Settings\n  display_name: string;\n  business_description: string;\n  website_url: string;\n  logo_url: string;\n  \n  // Privacy Settings\n  profile_visibility: 'public' | 'marketplace_only' | 'private';\n  show_contact_info: boolean;\n  allow_direct_messages: boolean;\n  \n  // Notification Settings\n  email_notifications: {\n    new_messages: boolean;\n    project_updates: boolean;\n    payment_notifications: boolean;\n    review_notifications: boolean;\n    marketing_emails: boolean;\n  };\n  \n  sms_notifications: {\n    urgent_messages: boolean;\n    payment_alerts: boolean;\n  };\n  \n  // Marketplace Preferences\n  auto_accept_projects: boolean;\n  default_response_time: string;\n  preferred_categories: string[];\n  minimum_project_value: number;\n  currency: string;\n  \n  // Security Settings\n  two_factor_enabled: boolean;\n  login_notifications: boolean;\n  session_timeout: number;\n  \n  // Payment Settings\n  auto_invoice: boolean;\n  payment_terms: string;\n  late_fee_percentage: number;\n  escrow_preference: 'always' | 'large_projects' | 'never';\n}\n\nexport default function SettingsClient({ orgId, userId }: SettingsClientProps) {\n  const [settings, setSettings] = useState<MarketplaceSettings>({\n    display_name: '',\n    business_description: '',\n    website_url: '',\n    logo_url: '',\n    profile_visibility: 'public',\n    show_contact_info: true,\n    allow_direct_messages: true,\n    email_notifications: {\n      new_messages: true,\n      project_updates: true,\n      payment_notifications: true,\n      review_notifications: true,\n      marketing_emails: false\n    },\n    sms_notifications: {\n      urgent_messages: false,\n      payment_alerts: true\n    },\n    auto_accept_projects: false,\n    default_response_time: '24 hours',\n    preferred_categories: [],\n    minimum_project_value: 0,\n    currency: 'USD',\n    two_factor_enabled: false,\n    login_notifications: true,\n    session_timeout: 30,\n    auto_invoice: true,\n    payment_terms: 'Net 30',\n    late_fee_percentage: 1.5,\n    escrow_preference: 'large_projects'\n  });\n  \n  const [loading, setLoading] = useState(true);\n  const [saving, setSaving] = useState(false);\n  const [activeTab, setActiveTab] = useState('profile');\n\n  useEffect(() => {\n    loadSettings();\n  }, [orgId]);\n\n  const loadSettings = async () => {\n    try {\n      setLoading(true);\n      \n      // Mock settings data - would load from API\n      const mockSettings: MarketplaceSettings = {\n        display_name: 'Your Organization',\n        business_description: 'Professional live event production and technical services',\n        website_url: 'https://yourorganization.com',\n        logo_url: '',\n        profile_visibility: 'public',\n        show_contact_info: true,\n        allow_direct_messages: true,\n        email_notifications: {\n          new_messages: true,\n          project_updates: true,\n          payment_notifications: true,\n          review_notifications: true,\n          marketing_emails: false\n        },\n        sms_notifications: {\n          urgent_messages: false,\n          payment_alerts: true\n        },\n        auto_accept_projects: false,\n        default_response_time: '24 hours',\n        preferred_categories: ['audio_visual', 'lighting'],\n        minimum_project_value: 1000,\n        currency: 'USD',\n        two_factor_enabled: false,\n        login_notifications: true,\n        session_timeout: 30,\n        auto_invoice: true,\n        payment_terms: 'Net 30',\n        late_fee_percentage: 1.5,\n        escrow_preference: 'large_projects'\n      };\n\n      setSettings(mockSettings);\n    } catch (error) {\n      console.error('Error loading settings:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleSave = async () => {\n    try {\n      setSaving(true);\n      \n      // Mock save - would save to API\n      await new Promise(resolve => setTimeout(resolve, 1000));\n      \n      console.log('Settings saved:', settings);\n    } catch (error) {\n      console.error('Error saving settings:', error);\n    } finally {\n      setSaving(false);\n    }\n  };\n\n  const updateSettings = (updates: Partial<MarketplaceSettings>) => {\n    setSettings(prev => ({ ...prev, ...updates }));\n  };\n\n  const updateNestedSettings = (section: keyof MarketplaceSettings, updates: unknown) => {\n    setSettings(prev => ({\n      ...prev,\n      [section]: { ...prev[section], ...updates }\n    }));\n  };\n\n  const tabs = [\n    { id: 'profile', label: 'Profile', icon: Users },\n    { id: 'privacy', label: 'Privacy', icon: Eye },\n    { id: 'notifications', label: 'Notifications', icon: Bell },\n    { id: 'marketplace', label: 'Marketplace', icon: Globe },\n    { id: 'security', label: 'Security', icon: Shield },\n    { id: 'payments', label: 'Payments', icon: CreditCard }\n  ];\n\n  const renderProfileSettings = () => (\n    <Card className=\"p-md\">\n      <h3 className=\"text-heading-4 mb-md\">Profile Information</h3>\n      <div className=\"stack-md\">\n        <Input\n          label=\"Display Name\"\n          value={settings.display_name}\n          onChange={(e) => updateSettings({ display_name: e.target.value })}\n          placeholder=\"How you appear in the marketplace\"\n        />\n        \n        <Textarea\n          label=\"Business Description\"\n          value={settings.business_description}\n          onChange={(e) => updateSettings({ business_description: e.target.value })}\n          placeholder=\"Describe your business and services\"\n          rows={4}\n        />\n        \n        <Input\n          label=\"Website URL\"\n          value={settings.website_url}\n          onChange={(e) => updateSettings({ website_url: e.target.value })}\n          placeholder=\"https://yourwebsite.com\"\n        />\n        \n        <div>\n          <label className=\"text-body-sm font-medium mb-xs block\">Logo</label>\n          <div className=\"flex items-center gap-sm\">\n            <div className=\"h-16 w-16 bg-muted rounded flex items-center justify-center\">\n              {settings.logo_url ? (\n                <img src={settings.logo_url} alt=\"Logo\" className=\"h-full w-full object-cover rounded\" />\n              ) : (\n                <Users className=\"h-8 w-8 color-muted\" />\n              )}\n            </div>\n            <div className=\"flex gap-sm\">\n              <Button variant=\"outline\" size=\"sm\">Upload Logo</Button>\n              {settings.logo_url && (\n                <Button variant=\"outline\" size=\"sm\">\n                  <Trash2 className=\"h-4 w-4\" />\n                </Button>\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </Card>\n  );\n\n  const renderPrivacySettings = () => (\n    <Card className=\"p-md\">\n      <h3 className=\"text-heading-4 mb-md\">Privacy Settings</h3>\n      <div className=\"stack-md\">\n        <div>\n          <label className=\"text-body-sm font-medium mb-xs block\">Profile Visibility</label>\n          <Select\n            value={settings.profile_visibility}\n            onValueChange={(value: unknown) => updateSettings({ profile_visibility: value })}\n          >\n            <option value=\"public\">Public - Visible to everyone</option>\n            <option value=\"marketplace_only\">Marketplace Only - Visible to marketplace users</option>\n            <option value=\"private\">Private - Only visible to direct contacts</option>\n          </Select>\n        </div>\n        \n        <div className=\"flex items-center justify-between\">\n          <div>\n            <p className=\"text-body font-medium\">Show Contact Information</p>\n            <p className=\"text-body-sm color-muted\">Display email and phone in your profile</p>\n          </div>\n          <input\n            type=\"checkbox\"\n            checked={settings.show_contact_info}\n            onChange={(e) => updateSettings({ show_contact_info: e.target.checked })}\n          />\n        </div>\n        \n        <div className=\"flex items-center justify-between\">\n          <div>\n            <p className=\"text-body font-medium\">Allow Direct Messages</p>\n            <p className=\"text-body-sm color-muted\">Let other users message you directly</p>\n          </div>\n          <input\n            type=\"checkbox\"\n            checked={settings.allow_direct_messages}\n            onChange={(e) => updateSettings({ allow_direct_messages: e.target.checked })}\n          />\n        </div>\n      </div>\n    </Card>\n  );\n\n  const renderNotificationSettings = () => (\n    <div className=\"stack-md\">\n      <Card className=\"p-md\">\n        <h3 className=\"text-heading-4 mb-md flex items-center gap-sm\">\n          <Mail className=\"h-5 w-5\" />\n          Email Notifications\n        </h3>\n        <div className=\"stack-sm\">\n          {Object.entries(settings.email_notifications).map(([key, value]) => (\n            <div key={key} className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-body font-medium capitalize\">\n                  {key.replace('_', ' ')}\n                </p>\n              </div>\n              <input\n                type=\"checkbox\"\n                checked={value}\n                onChange={(e) => updateNestedSettings('email_notifications', { [key]: e.target.checked })}\n              />\n            </div>\n          ))}\n        </div>\n      </Card>\n      \n      <Card className=\"p-md\">\n        <h3 className=\"text-heading-4 mb-md flex items-center gap-sm\">\n          <Smartphone className=\"h-5 w-5\" />\n          SMS Notifications\n        </h3>\n        <div className=\"stack-sm\">\n          {Object.entries(settings.sms_notifications).map(([key, value]) => (\n            <div key={key} className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-body font-medium capitalize\">\n                  {key.replace('_', ' ')}\n                </p>\n              </div>\n              <input\n                type=\"checkbox\"\n                checked={value}\n                onChange={(e) => updateNestedSettings('sms_notifications', { [key]: e.target.checked })}\n              />\n            </div>\n          ))}\n        </div>\n      </Card>\n    </div>\n  );\n\n  const renderMarketplaceSettings = () => (\n    <Card className=\"p-md\">\n      <h3 className=\"text-heading-4 mb-md\">Marketplace Preferences</h3>\n      <div className=\"stack-md\">\n        <div>\n          <label className=\"text-body-sm font-medium mb-xs block\">Default Response Time</label>\n          <Select\n            value={settings.default_response_time}\n            onValueChange={(value) => updateSettings({ default_response_time: value })}\n          >\n            <option value=\"1 hour\">Within 1 hour</option>\n            <option value=\"4 hours\">Within 4 hours</option>\n            <option value=\"24 hours\">Within 24 hours</option>\n            <option value=\"48 hours\">Within 48 hours</option>\n          </Select>\n        </div>\n        \n        <div className=\"grid grid-cols-2 gap-sm\">\n          <Input\n            label=\"Minimum Project Value\"\n            type=\"number\"\n            value={settings.minimum_project_value}\n            onChange={(e) => updateSettings({ minimum_project_value: parseFloat(e.target.value) || 0 })}\n          />\n          \n          <Select\n            label=\"Currency\"\n            value={settings.currency}\n            onValueChange={(value) => updateSettings({ currency: value })}\n          >\n            <option value=\"USD\">USD</option>\n            <option value=\"EUR\">EUR</option>\n            <option value=\"GBP\">GBP</option>\n            <option value=\"CAD\">CAD</option>\n          </Select>\n        </div>\n        \n        <div className=\"flex items-center justify-between\">\n          <div>\n            <p className=\"text-body font-medium\">Auto-accept Projects</p>\n            <p className=\"text-body-sm color-muted\">Automatically accept projects that meet your criteria</p>\n          </div>\n          <input\n            type=\"checkbox\"\n            checked={settings.auto_accept_projects}\n            onChange={(e) => updateSettings({ auto_accept_projects: e.target.checked })}\n          />\n        </div>\n      </div>\n    </Card>\n  );\n\n  const renderSecuritySettings = () => (\n    <Card className=\"p-md\">\n      <h3 className=\"text-heading-4 mb-md\">Security Settings</h3>\n      <div className=\"stack-md\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <p className=\"text-body font-medium\">Two-Factor Authentication</p>\n            <p className=\"text-body-sm color-muted\">Add an extra layer of security to your account</p>\n          </div>\n          <div className=\"flex items-center gap-sm\">\n            {settings.two_factor_enabled && (\n              <Badge variant=\"success\" size=\"sm\">Enabled</Badge>\n            )}\n            <Button variant=\"outline\" size=\"sm\">\n              {settings.two_factor_enabled ? 'Disable' : 'Enable'}\n            </Button>\n          </div>\n        </div>\n        \n        <div className=\"flex items-center justify-between\">\n          <div>\n            <p className=\"text-body font-medium\">Login Notifications</p>\n            <p className=\"text-body-sm color-muted\">Get notified of new login attempts</p>\n          </div>\n          <input\n            type=\"checkbox\"\n            checked={settings.login_notifications}\n            onChange={(e) => updateSettings({ login_notifications: e.target.checked })}\n          />\n        </div>\n        \n        <div>\n          <label className=\"text-body-sm font-medium mb-xs block\">Session Timeout (minutes)</label>\n          <Select\n            value={settings.session_timeout.toString()}\n            onValueChange={(value) => updateSettings({ session_timeout: parseInt(value) })}\n          >\n            <option value=\"15\">15 minutes</option>\n            <option value=\"30\">30 minutes</option>\n            <option value=\"60\">1 hour</option>\n            <option value=\"240\">4 hours</option>\n          </Select>\n        </div>\n      </div>\n    </Card>\n  );\n\n  const renderPaymentSettings = () => (\n    <Card className=\"p-md\">\n      <h3 className=\"text-heading-4 mb-md\">Payment Settings</h3>\n      <div className=\"stack-md\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <p className=\"text-body font-medium\">Auto-generate Invoices</p>\n            <p className=\"text-body-sm color-muted\">Automatically create invoices for completed work</p>\n          </div>\n          <input\n            type=\"checkbox\"\n            checked={settings.auto_invoice}\n            onChange={(e) => updateSettings({ auto_invoice: e.target.checked })}\n          />\n        </div>\n        \n        <div className=\"grid grid-cols-2 gap-sm\">\n          <Select\n            label=\"Payment Terms\"\n            value={settings.payment_terms}\n            onValueChange={(value) => updateSettings({ payment_terms: value })}\n          >\n            <option value=\"Due on receipt\">Due on receipt</option>\n            <option value=\"Net 15\">Net 15</option>\n            <option value=\"Net 30\">Net 30</option>\n            <option value=\"Net 60\">Net 60</option>\n          </Select>\n          \n          <Input\n            label=\"Late Fee (%)\"\n            type=\"number\"\n            step=\"0.1\"\n            value={settings.late_fee_percentage}\n            onChange={(e) => updateSettings({ late_fee_percentage: parseFloat(e.target.value) || 0 })}\n          />\n        </div>\n        \n        <div>\n          <label className=\"text-body-sm font-medium mb-xs block\">Escrow Preference</label>\n          <Select\n            value={settings.escrow_preference}\n            onValueChange={(value: unknown) => updateSettings({ escrow_preference: value })}\n          >\n            <option value=\"always\">Always use escrow</option>\n            <option value=\"large_projects\">Use for large projects only</option>\n            <option value=\"never\">Never use escrow</option>\n          </Select>\n        </div>\n      </div>\n    </Card>\n  );\n\n  const renderTabContent = () => {\n    switch (activeTab) {\n      case 'profile': return renderProfileSettings();\n      case 'privacy': return renderPrivacySettings();\n      case 'notifications': return renderNotificationSettings();\n      case 'marketplace': return renderMarketplaceSettings();\n      case 'security': return renderSecuritySettings();\n      case 'payments': return renderPaymentSettings();\n      default: return renderProfileSettings();\n    }\n  };\n\n  return (\n    <div className=\"stack-lg\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-heading-2\">Marketplace Settings</h1>\n          <p className=\"color-muted\">Configure your marketplace preferences and account settings</p>\n        </div>\n        <div className=\"flex items-center gap-sm\">\n          <Button variant=\"outline\" onClick={loadSettings} disabled={loading}>\n            <RefreshCw className=\"h-4 w-4 mr-sm\" />\n            Reset\n          </Button>\n          <Button onClick={handleSave} loading={saving}>\n            <Save className=\"h-4 w-4 mr-sm\" />\n            Save Changes\n          </Button>\n        </div>\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-md\">\n        {/* Settings Navigation */}\n        <Card className=\"p-md lg:col-span-1\">\n          <h3 className=\"text-heading-5 mb-md\">Settings</h3>\n          <div className=\"stack-xs\">\n            {tabs.map((tab) => {\n              const Icon = tab.icon;\n              return (\n                <button\n                  key={tab.id}\n                  onClick={() => setActiveTab(tab.id)}\n                  className={`flex items-center gap-sm p-sm rounded text-left w-full transition-colors ${\n                    activeTab === tab.id \n                      ? 'bg-primary text-primary-foreground' \n                      : 'hover:bg-muted'\n                  }`}\n                >\n                  <Icon className=\"h-4 w-4\" />\n                  <span className=\"text-body-sm\">{tab.label}</span>\n                </button>\n              );\n            })}\n          </div>\n        </Card>\n\n        {/* Settings Content */}\n        <div className=\"lg:col-span-3\">\n          {renderTabContent()}\n        </div>\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ghxstship/apps/web/app/(app)/(shell)/marketplace/vendors/VendorsClient.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadVendors'. Either include it or remove the dependency array.","line":162,"column":6,"nodeType":"ArrayExpression","endLine":162,"endColumn":13,"suggestions":[{"desc":"Update the dependencies array to be: [loadVendors, orgId]","fix":{"range":[3858,3865],"text":"[loadVendors, orgId]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { Plus, Users, Star, Eye, Edit, Trash2, MapPin, Briefcase, Award, TrendingUp, Clock, DollarSign } from \"lucide-react\";\nimport { useState, useEffect } from 'react';\nimport { \n  DataGrid,\n  ViewSwitcher,\n  DataActions,\n  DataViewProvider,\n  StateManagerProvider,\n  UniversalDrawer,\n  Button,\n  Badge,\n  Card,\n  type DataRecord\n} from '@ghxstship/ui';\nimport { createBrowserClient } from '@ghxstship/auth';\nimport type { VendorProfile } from '../types';\nimport CreateVendorClient from '../drawers/CreateVendorClient';\n\ninterface VendorsClientProps {\n  orgId: string;\n  userId: string;\n}\n\nconst VENDORS_FIELD_CONFIGS = [\n  {\n    key: 'display_name',\n    label: 'Vendor Name',\n    type: 'text' as const,\n    sortable: true,\n    filterable: true,\n    searchable: true,\n    visible: true,\n    width: 200\n  },\n  {\n    key: 'business_type',\n    label: 'Type',\n    type: 'select' as const,\n    options: [\n      { label: 'Individual', value: 'individual' },\n      { label: 'Company', value: 'company' },\n      { label: 'Agency', value: 'agency' }\n    ],\n    sortable: true,\n    filterable: true,\n    visible: true,\n    width: 120\n  },\n  {\n    key: 'primary_category',\n    label: 'Category',\n    type: 'select' as const,\n    options: [\n      { label: 'Audio/Visual', value: 'audio_visual' },\n      { label: 'Lighting', value: 'lighting' },\n      { label: 'Staging', value: 'staging' },\n      { label: 'Production', value: 'production' },\n      { label: 'Creative', value: 'creative' },\n      { label: 'Technical', value: 'technical' }\n    ],\n    sortable: true,\n    filterable: true,\n    visible: true,\n    width: 140\n  },\n  {\n    key: 'availability_status',\n    label: 'Availability',\n    type: 'select' as const,\n    options: [\n      { label: 'Available', value: 'available' },\n      { label: 'Busy', value: 'busy' },\n      { label: 'Unavailable', value: 'unavailable' }\n    ],\n    sortable: true,\n    filterable: true,\n    visible: true,\n    width: 120\n  },\n  {\n    key: 'rating',\n    label: 'Rating',\n    type: 'number' as const,\n    sortable: true,\n    filterable: true,\n    visible: true,\n    width: 100\n  },\n  {\n    key: 'total_reviews',\n    label: 'Reviews',\n    type: 'number' as const,\n    sortable: true,\n    filterable: false,\n    visible: true,\n    width: 100\n  },\n  {\n    key: 'total_projects',\n    label: 'Projects',\n    type: 'number' as const,\n    sortable: true,\n    filterable: false,\n    visible: true,\n    width: 100\n  },\n  {\n    key: 'hourly_rate',\n    label: 'Rate',\n    type: 'currency' as const,\n    sortable: true,\n    filterable: true,\n    visible: true,\n    width: 120\n  },\n  {\n    key: 'years_experience',\n    label: 'Experience',\n    type: 'number' as const,\n    sortable: true,\n    filterable: true,\n    visible: true,\n    width: 120\n  },\n  {\n    key: 'status',\n    label: 'Status',\n    type: 'select' as const,\n    options: [\n      { label: 'Pending', value: 'pending' },\n      { label: 'Active', value: 'active' },\n      { label: 'Suspended', value: 'suspended' },\n      { label: 'Inactive', value: 'inactive' }\n    ],\n    sortable: true,\n    filterable: true,\n    visible: true,\n    width: 120\n  }\n];\n\nexport default function VendorsClient({ orgId, userId }: VendorsClientProps) {\n  const [vendors, setVendors] = useState<VendorProfile[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [selectedView, setSelectedView] = useState<'grid' | 'list' | 'kanban' | 'calendar'>('grid');\n  const [drawerOpen, setDrawerOpen] = useState(false);\n  const [drawerMode, setDrawerMode] = useState<'create' | 'edit' | 'view'>('create');\n  const [selectedVendor, setSelectedVendor] = useState<VendorProfile | null>(null);\n  const [stats, setStats] = useState({\n    total: 0,\n    active: 0,\n    verified: 0,\n    avgRating: 0\n  });\n\n  const supabase = createBrowserClient();\n\n  useEffect(() => {\n    loadVendors();\n  }, [orgId]);\n\n  const loadVendors = async () => {\n    try {\n      setLoading(true);\n      \n      const { data: vendorsData, error } = await supabase\n        .from('opendeck_vendor_profiles')\n        .select('*')\n        .eq('organization_id', orgId)\n        .order('created_at', { ascending: false });\n\n      if (error) throw error;\n\n      setVendors(vendorsData || []);\n      \n      // Calculate stats\n      const totalVendors = vendorsData?.length || 0;\n      const activeVendors = vendorsData?.filter(v => v.status === 'active').length || 0;\n      const verifiedVendors = vendorsData?.filter(v => v.verified).length || 0;\n      const avgRating = totalVendors > 0 \n        ? vendorsData?.reduce((sum, v) => sum + (v.rating || 0), 0) / totalVendors \n        : 0;\n\n      setStats({\n        total: totalVendors,\n        active: activeVendors,\n        verified: verifiedVendors,\n        avgRating: Math.round(avgRating * 10) / 10\n      });\n    } catch (error) {\n      console.error('Error loading vendors:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleCreateVendor = () => {\n    setSelectedVendor(null);\n    setDrawerMode('create');\n    setDrawerOpen(true);\n  };\n\n  const handleEditVendor = (vendor: VendorProfile) => {\n    setSelectedVendor(vendor);\n    setDrawerMode('edit');\n    setDrawerOpen(true);\n  };\n\n  const handleViewVendor = (vendor: VendorProfile) => {\n    setSelectedVendor(vendor);\n    setDrawerMode('view');\n    setDrawerOpen(true);\n  };\n\n  const handleDeleteVendor = async (vendor: VendorProfile) => {\n    if (!confirm('Are you sure you want to delete this vendor profile?')) return;\n\n    try {\n      const { error } = await supabase\n        .from('opendeck_vendor_profiles')\n        .delete()\n        .eq('id', vendor.id);\n\n      if (error) throw error;\n      await loadVendors();\n    } catch (error) {\n      console.error('Error deleting vendor:', error);\n    }\n  };\n\n  const handleExport = async (format: 'csv' | 'json' | 'excel') => {\n    try {\n      const exportData = vendors.map(vendor => ({\n        name: vendor.name,\n        business_name: vendor.business_name,\n        business_type: vendor.business_type,\n        primary_category: vendor.primary_category,\n        availability_status: vendor.availability_status,\n        rating: vendor.rating,\n        total_reviews: vendor.total_reviews,\n        total_projects: vendor.total_projects,\n        hourly_rate: vendor.hourly_rate,\n        currency: vendor.currency,\n        years_experience: vendor.years_experience,\n        status: vendor.status,\n        verified: vendor.verified,\n        created_at: vendor.created_at\n      }));\n\n      const filename = `marketplace-vendors-${new Date().toISOString().split('T')[0]}`;\n      \n      if (format === 'csv') {\n        const csv = [\n          Object.keys(exportData[0]).join(','),\n          ...exportData.map(row => Object.values(row).join(','))\n        ].join('\\n');\n        \n        const blob = new Blob([csv], { type: 'text/csv' });\n        const url = URL.createObjectURL(blob);\n        const a = document.createElement('a');\n        a.href = url;\n        a.download = `${filename}.csv`;\n        a.click();\n        URL.revokeObjectURL(url);\n      } else if (format === 'json') {\n        const json = JSON.stringify(exportData, null, 2);\n        const blob = new Blob([json], { type: 'application/json' });\n        const url = URL.createObjectURL(blob);\n        const a = document.createElement('a');\n        a.href = url;\n        a.download = `${filename}.json`;\n        a.click();\n        URL.revokeObjectURL(url);\n      }\n    } catch (error) {\n      console.error('Error exporting vendors:', error);\n    }\n  };\n\n  const handleBulkAction = async (action: string, selectedIds: string[]) => {\n    if (action === 'delete') {\n      if (!confirm(`Are you sure you want to delete ${selectedIds.length} vendor profiles?`)) return;\n      \n      try {\n        const { error } = await supabase\n          .from('opendeck_vendor_profiles')\n          .delete()\n          .in('id', selectedIds);\n\n        if (error) throw error;\n        await loadVendors();\n      } catch (error) {\n        console.error('Error bulk deleting vendors:', error);\n      }\n    } else if (action === 'verify') {\n      try {\n        const { error } = await supabase\n          .from('opendeck_vendor_profiles')\n          .update({ verified: true, verification_date: new Date().toISOString() })\n          .in('id', selectedIds);\n\n        if (error) throw error;\n        await loadVendors();\n      } catch (error) {\n        console.error('Error bulk verifying vendors:', error);\n      }\n    }\n  };\n\n  const getRowActions = (vendor: VendorProfile) => [\n    {\n      label: 'View',\n      icon: Eye,\n      onClick: () => handleViewVendor(vendor)\n    },\n    {\n      label: 'Edit',\n      icon: Edit,\n      onClick: () => handleEditVendor(vendor),\n      disabled: vendor.user_id !== userId\n    },\n    {\n      label: 'Delete',\n      icon: Trash2,\n      onClick: () => handleDeleteVendor(vendor),\n      disabled: vendor.user_id !== userId,\n      variant: 'destructive' as const\n    }\n  ];\n\n  const renderVendorCard = (vendor: VendorProfile) => {\n    const statusColors = {\n      pending: 'warning',\n      active: 'success',\n      suspended: 'destructive',\n      inactive: 'secondary'\n    };\n\n    const availabilityColors = {\n      available: 'success',\n      busy: 'warning',\n      unavailable: 'destructive'\n    };\n\n    return (\n      <Card key={vendor.id} className=\"p-md hover:shadow-md transition-shadow\">\n        <div className=\"flex items-start justify-between mb-sm\">\n          <div className=\"flex items-center gap-sm\">\n            <Users className=\"h-5 w-5 color-primary\" />\n            <Badge variant={statusColors[vendor.status] as unknown}>\n              {vendor.status}\n            </Badge>\n            {vendor.verified && <Badge variant=\"primary\">Verified</Badge>}\n          </div>\n          <Badge variant={availabilityColors[vendor.availability_status] as unknown}>\n            {vendor.availability_status}\n          </Badge>\n        </div>\n        \n        <h3 className=\"text-heading-4 mb-xs\">{vendor.display_name || vendor.name}</h3>\n        <p className=\"text-body-sm color-muted mb-xs\">{vendor.business_name}</p>\n        <p className=\"text-body-sm color-muted mb-sm line-clamp-2\">{vendor.tagline || vendor.bio}</p>\n        \n        <div className=\"flex items-center gap-md mb-sm text-body-sm color-muted\">\n          <div className=\"flex items-center gap-xs\">\n            <Briefcase className=\"h-4 w-4\" />\n            <span>{vendor.primary_category?.replace('_', ' ')}</span>\n          </div>\n          {vendor.years_experience && (\n            <div className=\"flex items-center gap-xs\">\n              <Clock className=\"h-4 w-4\" />\n              <span>{vendor.years_experience}y exp</span>\n            </div>\n          )}\n          {vendor.hourly_rate && (\n            <div className=\"flex items-center gap-xs\">\n              <DollarSign className=\"h-4 w-4\" />\n              <span>{vendor.currency} {vendor.hourly_rate}/hr</span>\n            </div>\n          )}\n        </div>\n        \n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center gap-md text-body-sm color-muted\">\n            <div className=\"flex items-center gap-xs\">\n              <Star className=\"h-4 w-4 fill-current color-warning\" />\n              <span>{vendor.rating || 0}</span>\n            </div>\n            <span>{vendor.total_reviews || 0} reviews</span>\n            <span>{vendor.total_projects || 0} projects</span>\n          </div>\n          <div className=\"flex items-center gap-xs\">\n            <Button size=\"sm\" variant=\"outline\" onClick={() => handleViewVendor(vendor)}>\n              <Eye className=\"h-4 w-4\" />\n            </Button>\n            {vendor.user_id === userId && (\n              <Button size=\"sm\" variant=\"outline\" onClick={() => handleEditVendor(vendor)}>\n                <Edit className=\"h-4 w-4\" />\n              </Button>\n            )}\n          </div>\n        </div>\n      </Card>\n    );\n  };\n\n  return (\n    <div className=\"stack-lg\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-heading-2\">Marketplace Vendors</h1>\n          <p className=\"color-muted\">Browse and manage vendor profiles</p>\n        </div>\n        <Button onClick={handleCreateVendor}>\n          <Plus className=\"h-4 w-4 mr-sm\" />\n          Create Profile\n        </Button>\n      </div>\n\n      {/* Stats Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-md\">\n        <Card className=\"p-md\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-body-sm color-muted\">Total Vendors</p>\n              <p className=\"text-heading-3 font-bold\">{stats.total}</p>\n            </div>\n            <Users className=\"h-8 w-8 color-primary\" />\n          </div>\n        </Card>\n        <Card className=\"p-md\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-body-sm color-muted\">Active</p>\n              <p className=\"text-heading-3 font-bold\">{stats.active}</p>\n            </div>\n            <TrendingUp className=\"h-8 w-8 color-success\" />\n          </div>\n        </Card>\n        <Card className=\"p-md\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-body-sm color-muted\">Verified</p>\n              <p className=\"text-heading-3 font-bold\">{stats.verified}</p>\n            </div>\n            <Award className=\"h-8 w-8 color-warning\" />\n          </div>\n        </Card>\n        <Card className=\"p-md\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-body-sm color-muted\">Avg Rating</p>\n              <p className=\"text-heading-3 font-bold\">{stats.avgRating}</p>\n            </div>\n            <Star className=\"h-8 w-8 color-secondary\" />\n          </div>\n        </Card>\n      </div>\n\n      {/* Data View */}\n      <StateManagerProvider>\n        <DataViewProvider\n          data={vendors}\n          fields={VENDORS_FIELD_CONFIGS}\n          onExport={handleExport}\n          onBulkAction={handleBulkAction}\n        >\n          <Card className=\"p-md\">\n            <div className=\"flex items-center justify-between mb-md\">\n              <ViewSwitcher\n                currentView={selectedView}\n                onViewChange={setSelectedView}\n                availableViews={['grid', 'list']}\n              />\n            </div>\n\n            <div className=\"stack-sm\">\n              <DataActions\n                onSearch={(query) => console.log('Search:', query)}\n                onFilter={(filters) => console.log('Filter:', filters)}\n                onExport={handleExport}\n                showBulkActions={true}\n                bulkActions={[\n                  { label: 'Delete Selected', value: 'delete', variant: 'destructive' },\n                  { label: 'Verify Selected', value: 'verify', variant: 'default' }\n                ]}\n              />\n              \n              {selectedView === 'grid' ? (\n                <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-md\">\n                  {vendors.map(renderVendorCard)}\n                </div>\n              ) : (\n                <DataGrid\n                  viewType={selectedView}\n                  onRowClick={handleViewVendor}\n                  rowActions={getRowActions}\n                  emptyMessage=\"No vendors found\"\n                  loading={loading}\n                  className=\"min-h-[400px]\"\n                />\n              )}\n            </div>\n          </Card>\n        </DataViewProvider>\n      </StateManagerProvider>\n\n      {/* Create/Edit Drawer */}\n      <UniversalDrawer\n        isOpen={drawerOpen}\n        onClose={() => setDrawerOpen(false)}\n        title={drawerMode === 'create' ? 'Create Vendor Profile' : drawerMode === 'edit' ? 'Edit Vendor Profile' : 'View Vendor Profile'}\n        size=\"lg\"\n      >\n        <CreateVendorClient\n          mode={drawerMode}\n          vendor={selectedVendor}\n          onSuccess={() => {\n            setDrawerOpen(false);\n            loadVendors();\n          }}\n          onCancel={() => setDrawerOpen(false)}\n        />\n      </UniversalDrawer>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ghxstship/apps/web/app/(app)/(shell)/people/assignments/AssignmentsClient.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'loadAssignmentsData' and 'sb'. Either include them or remove the dependency array.","line":63,"column":6,"nodeType":"ArrayExpression","endLine":63,"endColumn":13,"suggestions":[{"desc":"Update the dependencies array to be: [loadAssignmentsData, orgId, sb]","fix":{"range":[1987,1994],"text":"[loadAssignmentsData, orgId, sb]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\nimport { User, FileText, Settings, Award, Calendar, TrendingUp, Activity, Clock, Plus, Search, Play, Trash2 } from \"lucide-react\";\nimport { useEffect, useState, useCallback, useMemo } from 'react';\nimport { type DataRecord } from '@ghxstship/ui';\nimport { DataViewProvider, StateManagerProvider, ViewSwitcher, DataActions, DataGrid, KanbanBoard, CalendarView, ListView, TimelineView, GalleryView } from '@ghxstship/ui/components/DataViews';\nimport { type FieldConfig, type DataViewConfig } from '@ghxstship/ui/components/DataViews/types';\nimport { useTranslations } from 'next-intl';\nimport { createBrowserClient } from '@ghxstship/auth';\nimport AppDrawer from '@/app/_components/shared/AppDrawer';\n\ninterface Assignment extends DataRecord {\n  id: string;\n  project_id: string;\n  role: string;\n  required_count: number;\n  filled_count: number;\n  department?: string;\n  skills_required?: string[];\n  hourly_rate?: number;\n  notes?: string;\n  organization_id: string;\n  created_at: string;\n  updated_at: string;\n  project?: {\n    name: string;\n    status: string;\n  };\n}\n\ninterface AssignmentsClientProps {\n  orgId: string;\n}\n\nexport default function AssignmentsClient({ orgId }: AssignmentsClientProps) {\n  const t = useTranslations('people.assignments');\n  const sb = createBrowserClient();\n  const [loading, setLoading] = useState(false);\n  const [assignmentsData, setAssignmentsData] = useState<Assignment[]>([]);\n\n  useEffect(() => {\n    loadAssignmentsData();\n    \n    // Set up real-time subscription\n    const subscription = sb\n      .channel('assignments-changes')\n      .on('postgres_changes', \n        { \n          event: '*', \n          schema: 'public', \n          table: 'manning_slots',\n          filter: `organization_id=eq.${orgId}`\n        }, \n        (payload) => {\n          console.log('Real-time update:', payload);\n          loadAssignmentsData();\n        }\n      )\n      .subscribe();\n\n    return () => {\n      subscription.unsubscribe();\n    };\n  }, [orgId]);\n\n  const loadAssignmentsData = useCallback(async () => {\n    setLoading(true);\n    try {\n      const { data, error } = await sb\n        .from('manning_slots')\n        .select(`\n          *,\n          project:projects(name, status)\n        `)\n        .eq('organization_id', orgId)\n        .order('created_at', { ascending: false });\n      \n      if (error) {\n        console.error('Supabase error:', error);\n        throw error;\n      }\n      \n      setAssignmentsData(data || []);\n    } catch (error) {\n      console.error('Error loading assignments data:', error);\n      // Could add toast notification here\n    } finally {\n      setLoading(false);\n    }\n  }, [orgId, sb]);\n\n  // ATLVS DataViews field configuration - memoized for performance\n  const fields: FieldConfig[] = useMemo(() => [\n    {\n      key: 'role',\n      label: t('role'),\n      type: 'text',\n      required: true,\n      sortable: true,\n      filterable: true\n    },\n    {\n      key: 'project.name',\n      label: t('project'),\n      type: 'text',\n      sortable: true,\n      filterable: true\n    },\n    {\n      key: 'required_count',\n      label: t('requiredCount'),\n      type: 'number',\n      sortable: true,\n      filterable: true\n    },\n    {\n      key: 'filled_count',\n      label: t('filledCount'),\n      type: 'number',\n      sortable: true,\n      filterable: true\n    },\n    {\n      key: 'department',\n      label: t('department'),\n      type: 'text',\n      sortable: true,\n      filterable: true\n    },\n    {\n      key: 'hourly_rate',\n      label: t('hourlyRate'),\n      type: 'currency',\n      sortable: true,\n      filterable: true\n    },\n    {\n      key: 'created_at',\n      label: t('createdAt'),\n      type: 'date',\n      sortable: true,\n      filterable: true\n    }\n  ], [t]);\n\n  // Advanced search functionality\n  const handleSearch = useCallback(async (query: string) => {\n    if (!query.trim()) {\n      loadAssignmentsData();\n      return;\n    }\n\n    try {\n      const { data } = await sb\n        .from('manning_slots')\n        .select(`\n          *,\n          project:projects(name, status)\n        `)\n        .eq('organization_id', orgId)\n        .or(`role.ilike.%${query}%,department.ilike.%${query}%,notes.ilike.%${query}%`)\n        .order('created_at', { ascending: false });\n      \n      setAssignmentsData(data || []);\n    } catch (error) {\n      console.error('Search error:', error);\n    }\n  }, [orgId, sb, loadAssignmentsData]);\n\n  // Advanced filtering\n  const handleFilter = useCallback(async (filters: unknown) => {\n    try {\n      let query = sb\n        .from('manning_slots')\n        .select(`\n          *,\n          project:projects(name, status)\n        `)\n        .eq('organization_id', orgId);\n\n      filters.forEach((filter: unknown) => {\n        if (filter.value) {\n          query = query.eq(filter.field, filter.value);\n        }\n      });\n\n      const { data } = await query.order('created_at', { ascending: false });\n      setAssignmentsData(data || []);\n    } catch (error) {\n      console.error('Filter error:', error);\n    }\n  }, [orgId, sb]);\n\n  // Advanced sorting\n  const handleSort = useCallback(async (sorts: unknown) => {\n    try {\n      let query = sb\n        .from('manning_slots')\n        .select(`\n          *,\n          project:projects(name, status)\n        `)\n        .eq('organization_id', orgId);\n\n      if (sorts.length > 0) {\n        const sort = sorts[0];\n        query = query.order(sort.field, { ascending: sort.direction === 'asc' });\n      }\n\n      const { data } = await query;\n      setAssignmentsData(data || []);\n    } catch (error) {\n      console.error('Sort error:', error);\n    }\n  }, [orgId, sb]);\n\n  // Export functionality\n  const handleExport = useCallback((format: string, data: DataRecord[], config?: unknown) => {\n    const exportData = data.map(assignment => ({\n      'Role': assignment.role,\n      'Project': assignment.project?.name || 'N/A',\n      'Required Count': assignment.required_count,\n      'Filled Count': assignment.filled_count,\n      'Department': assignment.department || 'N/A',\n      'Hourly Rate': assignment.hourly_rate || 'N/A',\n      'Notes': assignment.notes || 'N/A',\n      'Created At': assignment.created_at\n    }));\n\n    if (format === 'csv') {\n      const csv = [\n        Object.keys(exportData[0]).join(','),\n        ...exportData.map(row => Object.values(row).join(','))\n      ].join('\\n');\n      \n      const blob = new Blob([csv], { type: 'text/csv' });\n      const url = URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.href = url;\n      a.download = `assignments-${new Date().toISOString().split('T')[0]}.csv`;\n      a.click();\n    } else if (format === 'json') {\n      const json = JSON.stringify(exportData, null, 2);\n      const blob = new Blob([json], { type: 'application/json' });\n      const url = URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.href = url;\n      a.download = `assignments-${new Date().toISOString().split('T')[0]}.json`;\n      a.click();\n    }\n  }, []);\n\n  // Import functionality\n  const handleImport = useCallback(async (data: DataRecord[]) => {\n    try {\n      const importData = data.map(assignment => ({\n        ...assignment,\n        organization_id: orgId,\n        created_at: new Date().toISOString(),\n        updated_at: new Date().toISOString()\n      }));\n\n      const { error } = await sb\n        .from('manning_slots')\n        .insert(importData);\n\n      if (error) throw error;\n      \n      loadAssignmentsData();\n    } catch (error) {\n      console.error('Import error:', error);\n    }\n  }, [orgId, sb, loadAssignmentsData]);\n\n  // ATLVS DataViews configuration\n  const assignmentsConfig: DataViewConfig = useMemo(() => ({\n    id: 'assignments-dataviews',\n    name: t('title'),\n    viewType: 'grid',\n    fields,\n    data: assignmentsData,\n    defaultView: 'grid',\n    bulkActions: [\n      {\n        key: 'delete',\n        label: 'Delete Selected',\n        variant: 'destructive',\n        onClick: async (selectedIds: string[]) => {\n          console.log('Delete action:', selectedIds);\n          // Implement delete functionality\n        },\n        requiresSelection: true,\n        confirmMessage: 'Are you sure you want to delete the selected assignments?'\n      },\n      {\n        key: 'export',\n        label: 'Export Selected',\n        variant: 'secondary',\n        onClick: async (selectedIds: string[]) => {\n          const selectedData = assignmentsData.filter(a => selectedIds.includes(a.id));\n          handleExport('csv', selectedData);\n        },\n        requiresSelection: true\n      }\n    ],\n    exportConfig: {\n      formats: ['csv', 'json', 'excel'],\n      onExport: handleExport\n    },\n    importConfig: {\n      formats: ['csv', 'json'],\n      onImport: handleImport\n    },\n    onSearch: handleSearch,\n    onFilter: handleFilter,\n    onSort: handleSort\n  }), [t, fields, assignmentsData, handleSearch, handleFilter, handleSort, handleExport, handleImport]);\n\n  return (\n    <div className=\"stack-lg\">\n      <DataViewProvider config={assignmentsConfig}>\n        <StateManagerProvider>\n          <div className=\"stack-md\">\n            <ViewSwitcher />\n            <DataActions />\n            \n            <DataGrid />\n            \n            <KanbanBoard \n              columns={[\n                { id: 'open', title: 'Open' },\n                { id: 'filled', title: 'Filled' },\n                { id: 'closed', title: 'Closed' }\n              ]}\n              statusField=\"status\"\n              titleField=\"role\"\n            />\n            \n            <CalendarView \n              startDateField=\"created_at\"\n              titleField=\"role\"\n            />\n            \n            <ListView \n              titleField=\"role\"\n            />\n            \n            <TimelineView \n              startDateField=\"created_at\"\n              titleField=\"role\"\n            />\n            \n            <GalleryView \n              titleField=\"role\"\n            />\n            \n            <AppDrawer\n              title=\"Assignment Details\"\n              open={false}\n              onClose={() => {}}\n              record={null}\n              fields={fields}\n              mode=\"view\"\n              tabs={[\n                {\n                  key: 'details',\n                  label: 'Details',\n                  content: (\n                    <div className=\"p-md stack-md\">\n                      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-md\">\n                        <div>\n                          <label className=\"block text-body-sm form-label mb-xs\">Role</label>\n                          <div className=\"text-body color-foreground\">Camera Operator</div>\n                        </div>\n                        <div>\n                          <label className=\"block text-body-sm form-label mb-xs\">Project</label>\n                          <div className=\"text-body color-foreground\">Blackwater Reverb</div>\n                        </div>\n                        <div>\n                          <label className=\"block text-body-sm form-label mb-xs\">Required Count</label>\n                          <div className=\"text-body color-foreground\">3</div>\n                        </div>\n                        <div>\n                          <label className=\"block text-body-sm form-label mb-xs\">Filled Count</label>\n                          <div className=\"text-body color-foreground\">2</div>\n                        </div>\n                      </div>\n                    </div>\n                  )\n                },\n                {\n                  key: 'requirements',\n                  label: 'Requirements',\n                  content: (\n                    <div className=\"p-md\">\n                      <p className=\"color-muted\">Skills and requirements will be shown here.</p>\n                    </div>\n                  )\n                },\n                {\n                  key: 'candidates',\n                  label: 'Candidates',\n                  content: (\n                    <div className=\"p-md\">\n                      <p className=\"color-muted\">Candidate applications will be shown here.</p>\n                    </div>\n                  )\n                }\n              ]}\n            />\n          </div>\n        </StateManagerProvider>\n      </DataViewProvider>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ghxstship/apps/web/app/(app)/(shell)/people/assignments/CreateAssignmentClient.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadProjects'. Either include it or remove the dependency array.","line":38,"column":6,"nodeType":"ArrayExpression","endLine":38,"endColumn":13,"suggestions":[{"desc":"Update the dependencies array to be: [loadProjects, orgId]","fix":{"range":[1179,1186],"text":"[loadProjects, orgId]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useState, useEffect } from 'react';\nimport { useRouter } from 'next/navigation';\nimport { Card, Button, UnifiedInput, Badge } from '@ghxstship/ui';\nimport { useTranslations } from 'next-intl';\nimport { createBrowserClient } from '@ghxstship/auth';\nimport { AssignmentService } from './lib/assignmentService';\nimport type { CreateAssignmentData } from './types';\n\ninterface CreateAssignmentClientProps {\n  orgId: string;\n}\n\nexport default function CreateAssignmentClient({ orgId }: CreateAssignmentClientProps) {\n  const t = useTranslations('people.assignments');\n  const router = useRouter();\n  const sb = createBrowserClient();\n  const assignmentService = new AssignmentService();\n\n  const [loading, setLoading] = useState(false);\n  const [projects, setProjects] = useState<any[]>([]);\n  const [skills, setSkills] = useState<string[]>([]);\n  const [newSkill, setNewSkill] = useState('');\n  \n  const [formData, setFormData] = useState<CreateAssignmentData>({\n    project_id: '',\n    role: '',\n    required_count: 1,\n    department: '',\n    skills_required: [],\n    hourly_rate: undefined,\n    notes: ''\n  });\n\n  useEffect(() => {\n    loadProjects();\n  }, [orgId]);\n\n  const loadProjects = async () => {\n    try {\n      const { data, error } = await sb\n        .from('projects')\n        .select('id, name, status')\n        .eq('organization_id', orgId)\n        .eq('status', 'active')\n        .order('name');\n\n      if (error) throw error;\n      setProjects(data || []);\n    } catch (error) {\n      console.error('Error loading projects:', error);\n    }\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!formData.project_id || !formData.role) return;\n\n    setLoading(true);\n    try {\n      await assignmentService.createAssignment(orgId, {\n        ...formData,\n        skills_required: skills\n      });\n\n      router.push('/people/assignments');\n    } catch (error) {\n      console.error('Error creating assignment:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const addSkill = () => {\n    if (newSkill.trim() && !skills.includes(newSkill.trim())) {\n      setSkills([...skills, newSkill.trim()]);\n      setNewSkill('');\n    }\n  };\n\n  const removeSkill = (skillToRemove: string) => {\n    setSkills(skills.filter(skill => skill !== skillToRemove));\n  };\n\n  return (\n    <div className=\"stack-lg\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-heading-3 font-anton uppercase\">Create Assignment</h1>\n          <p className=\"text-body-sm color-muted\">Create a new project assignment</p>\n        </div>\n        <Button variant=\"outline\" onClick={() => router.back()}>\n          Cancel\n        </Button>\n      </div>\n\n      <Card>\n        <div className=\"p-md\">\n          <form onSubmit={handleSubmit} className=\"stack-md\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-md\">\n              <div>\n                <label className=\"block text-body-sm form-label mb-xs\">Project *</label>\n                <select\n                  value={formData.project_id}\n                  onChange={(e) => setFormData(prev => ({ ...prev, project_id: e.target.value }))}\n                  className=\"w-full px-md py-sm border border-border rounded-md focus:outline-none focus:ring-2 focus:ring-primary bg-background\"\n                  required\n                >\n                  <option value=\"\">Select project...</option>\n                  {projects.map(project => (\n                    <option key={project.id} value={project.id}>\n                      {project.name}\n                    </option>\n                  ))}\n                </select>\n              </div>\n\n              <div>\n                <label className=\"block text-body-sm form-label mb-xs\">Role *</label>\n                <UnifiedInput\n                  type=\"text\"\n                  value={formData.role}\n                  onChange={(e) => setFormData(prev => ({ ...prev, role: e.target.value }))}\n                  placeholder=\"e.g. Senior Camera Operator\"\n                  required\n                />\n              </div>\n\n              <div>\n                <label className=\"block text-body-sm form-label mb-xs\">Department</label>\n                <UnifiedInput\n                  type=\"text\"\n                  value={formData.department}\n                  onChange={(e) => setFormData(prev => ({ ...prev, department: e.target.value }))}\n                  placeholder=\"e.g. Production\"\n                />\n              </div>\n\n              <div>\n                <label className=\"block text-body-sm form-label mb-xs\">Required Count *</label>\n                <UnifiedInput\n                  type=\"number\"\n                  min=\"1\"\n                  value={formData.required_count}\n                  onChange={(e) => setFormData(prev => ({ ...prev, required_count: parseInt(e.target.value) || 1 }))}\n                  required\n                />\n              </div>\n\n              <div>\n                <label className=\"block text-body-sm form-label mb-xs\">Hourly Rate</label>\n                <UnifiedInput\n                  type=\"number\"\n                  step=\"0.01\"\n                  value={formData.hourly_rate || ''}\n                  onChange={(e) => setFormData(prev => ({ ...prev, hourly_rate: parseFloat(e.target.value) || undefined }))}\n                  placeholder=\"0.00\"\n                />\n              </div>\n            </div>\n\n            <div>\n              <label className=\"block text-body-sm form-label mb-xs\">Skills Required</label>\n              <div className=\"flex gap-sm mb-sm\">\n                <UnifiedInput\n                  type=\"text\"\n                  value={newSkill}\n                  onChange={(e) => setNewSkill(e.target.value)}\n                  placeholder=\"Add a skill...\"\n                  onKeyPress={(e) => e.key === 'Enter' && (e.preventDefault(), addSkill())}\n                />\n                <Button type=\"button\" onClick={addSkill} variant=\"outline\">\n                  Add\n                </Button>\n              </div>\n              {skills.length > 0 && (\n                <div className=\"flex flex-wrap gap-xs\">\n                  {skills.map((skill, index) => (\n                    <Badge \n                      key={index} \n                      variant=\"secondary\" \n                      className=\"cursor-pointer\"\n                      onClick={() => removeSkill(skill)}\n                    >\n                      {skill} ×\n                    </Badge>\n                  ))}\n                </div>\n              )}\n            </div>\n\n            <div>\n              <label className=\"block text-body-sm form-label mb-xs\">Notes</label>\n              <textarea\n                value={formData.notes}\n                onChange={(e) => setFormData(prev => ({ ...prev, notes: e.target.value }))}\n                placeholder=\"Additional requirements or notes...\"\n                className=\"w-full px-md py-sm border border-border rounded-md focus:outline-none focus:ring-2 focus:ring-primary bg-background min-h-[100px]\"\n              />\n            </div>\n\n            <div className=\"flex gap-sm\">\n              <Button type=\"submit\" loading={loading}>\n                Create Assignment\n              </Button>\n              <Button type=\"button\" variant=\"outline\" onClick={() => router.back()}>\n                Cancel\n              </Button>\n            </div>\n          </form>\n        </div>\n      </Card>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ghxstship/apps/web/app/(app)/(shell)/people/competencies/CompetenciesClient.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'loadCompetenciesData' and 'sb'. Either include them or remove the dependency array.","line":60,"column":6,"nodeType":"ArrayExpression","endLine":60,"endColumn":13,"suggestions":[{"desc":"Update the dependencies array to be: [loadCompetenciesData, orgId, sb]","fix":{"range":[2089,2096],"text":"[loadCompetenciesData, orgId, sb]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\nimport { User, FileText, Settings, Award, Calendar, TrendingUp, Activity, Clock, Plus, Search, Play, Trash2 } from \"lucide-react\";\nimport { useEffect, useState, useCallback, useMemo } from 'react';\nimport { type DataRecord } from '@ghxstship/ui';\nimport { DataViewProvider, StateManagerProvider, ViewSwitcher, DataActions, DataGrid, KanbanBoard, CalendarView, ListView, TimelineView, GalleryView } from '@ghxstship/ui/components/DataViews';\nimport { type FieldConfig, type DataViewConfig } from '@ghxstship/ui/components/DataViews/types';\nimport { useTranslations } from 'next-intl';\nimport { createBrowserClient } from '@ghxstship/auth';\nimport AppDrawer from '@/app/_components/shared/AppDrawer';\n\ninterface Competency extends DataRecord {\n  id: string;\n  name: string;\n  description?: string;\n  category: 'technical' | 'creative' | 'management' | 'soft_skills' | 'industry_specific';\n  level: 'beginner' | 'intermediate' | 'advanced' | 'expert';\n  certification_required: boolean;\n  certification_body?: string;\n  expiry_period?: number;\n  tags?: string[];\n  organization_id: string;\n  created_at: string;\n  updated_at: string;\n  assignments_count?: number;\n}\n\ninterface CompetenciesClientProps {\n  orgId: string;\n}\n\nexport default function CompetenciesClient({ orgId }: CompetenciesClientProps) {\n  const t = useTranslations('people.competencies');\n  const sb = createBrowserClient();\n  const [loading, setLoading] = useState(false);\n  const [competenciesData, setCompetenciesData] = useState<Competency[]>([]);\n\n  useEffect(() => {\n    loadCompetenciesData();\n    \n    // Set up real-time subscription\n    const subscription = sb\n      .channel('competencies-changes')\n      .on('postgres_changes', \n        { \n          event: '*', \n          schema: 'public', \n          table: 'competencies',\n          filter: `organization_id=eq.${orgId}`\n        }, \n        (payload) => {\n          console.log('Real-time update:', payload);\n          loadCompetenciesData();\n        }\n      )\n      .subscribe();\n\n    return () => {\n      subscription.unsubscribe();\n    };\n  }, [orgId]);\n\n  const loadCompetenciesData = useCallback(async () => {\n    setLoading(true);\n    try {\n      const { data, error } = await sb\n        .from('competencies')\n        .select(`\n          *,\n          assignments:person_competencies(count)\n        `)\n        .eq('organization_id', orgId)\n        .order('name', { ascending: true });\n      \n      if (error) {\n        console.error('Supabase error:', error);\n        throw error;\n      }\n      \n      setCompetenciesData(data || []);\n    } catch (error) {\n      console.error('Error loading competencies data:', error);\n      // Could add toast notification here\n    } finally {\n      setLoading(false);\n    }\n  }, [orgId, sb]);\n\n  // ATLVS DataViews field configuration - memoized for performance\n  const fields: FieldConfig[] = useMemo(() => [\n    {\n      key: 'name',\n      label: t('name'),\n      type: 'text',\n      required: true,\n      sortable: true,\n      filterable: true\n    },\n    {\n      key: 'category',\n      label: t('category'),\n      type: 'select',\n      options: [\n        { value: 'technical', label: t('technical') },\n        { value: 'creative', label: t('creative') },\n        { value: 'management', label: t('management') },\n        { value: 'soft_skills', label: t('softSkills') },\n        { value: 'industry_specific', label: t('industrySpecific') }\n      ],\n      sortable: true,\n      filterable: true\n    },\n    {\n      key: 'level',\n      label: t('level'),\n      type: 'select',\n      options: [\n        { value: 'beginner', label: t('beginner') },\n        { value: 'intermediate', label: t('intermediate') },\n        { value: 'advanced', label: t('advanced') },\n        { value: 'expert', label: t('expert') }\n      ],\n      sortable: true,\n      filterable: true\n    },\n    {\n      key: 'description',\n      label: t('description'),\n      type: 'textarea',\n      sortable: false,\n      filterable: true\n    },\n    {\n      key: 'certification_required',\n      label: t('certificationRequired'),\n      type: 'boolean',\n      sortable: true,\n      filterable: true\n    },\n    {\n      key: 'certification_body',\n      label: t('certificationBody'),\n      type: 'text',\n      sortable: true,\n      filterable: true\n    },\n    {\n      key: 'expiry_period',\n      label: t('expiryPeriod'),\n      type: 'number',\n      sortable: true,\n      filterable: true\n    },\n    {\n      key: 'assignments_count',\n      label: t('assignmentsCount'),\n      type: 'number',\n      sortable: true,\n      filterable: false\n    },\n    {\n      key: 'created_at',\n      label: t('createdAt'),\n      type: 'date',\n      sortable: true,\n      filterable: true\n    }\n  ], [t]);\n\n  // Advanced search functionality\n  const handleSearch = useCallback(async (query: string) => {\n    if (!query.trim()) {\n      loadCompetenciesData();\n      return;\n    }\n\n    try {\n      const { data } = await sb\n        .from('competencies')\n        .select(`\n          *,\n          assignments:person_competencies(count)\n        `)\n        .eq('organization_id', orgId)\n        .or(`name.ilike.%${query}%,description.ilike.%${query}%,certification_body.ilike.%${query}%`)\n        .order('name', { ascending: true });\n      \n      setCompetenciesData(data || []);\n    } catch (error) {\n      console.error('Search error:', error);\n    }\n  }, [orgId, sb, loadCompetenciesData]);\n\n  // Advanced filtering\n  const handleFilter = useCallback(async (filters: unknown) => {\n    try {\n      let query = sb\n        .from('competencies')\n        .select(`\n          *,\n          assignments:person_competencies(count)\n        `)\n        .eq('organization_id', orgId);\n\n      filters.forEach((filter: unknown) => {\n        if (filter.value) {\n          query = query.eq(filter.field, filter.value);\n        }\n      });\n\n      const { data } = await query.order('name', { ascending: true });\n      setCompetenciesData(data || []);\n    } catch (error) {\n      console.error('Filter error:', error);\n    }\n  }, [orgId, sb]);\n\n  // Advanced sorting\n  const handleSort = useCallback(async (sorts: unknown) => {\n    try {\n      let query = sb\n        .from('competencies')\n        .select(`\n          *,\n          assignments:person_competencies(count)\n        `)\n        .eq('organization_id', orgId);\n\n      if (sorts.length > 0) {\n        const sort = sorts[0];\n        query = query.order(sort.field, { ascending: sort.direction === 'asc' });\n      }\n\n      const { data } = await query;\n      setCompetenciesData(data || []);\n    } catch (error) {\n      console.error('Sort error:', error);\n    }\n  }, [orgId, sb]);\n\n  // Export functionality\n  const handleExport = useCallback((format: string, data: DataRecord[], config?: unknown) => {\n    const exportData = data.map(competency => ({\n      'Name': competency.name,\n      'Category': competency.category,\n      'Level': competency.level,\n      'Description': competency.description || 'N/A',\n      'Certification Required': competency.certification_required ? 'Yes' : 'No',\n      'Certification Body': competency.certification_body || 'N/A',\n      'Expiry Period (months)': competency.expiry_period || 'N/A',\n      'Assignments Count': competency.assignments_count || 0,\n      'Created At': competency.created_at\n    }));\n\n    if (format === 'csv') {\n      const csv = [\n        Object.keys(exportData[0]).join(','),\n        ...exportData.map(row => Object.values(row).join(','))\n      ].join('\\n');\n      \n      const blob = new Blob([csv], { type: 'text/csv' });\n      const url = URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.href = url;\n      a.download = `competencies-${new Date().toISOString().split('T')[0]}.csv`;\n      a.click();\n    } else if (format === 'json') {\n      const json = JSON.stringify(exportData, null, 2);\n      const blob = new Blob([json], { type: 'application/json' });\n      const url = URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.href = url;\n      a.download = `competencies-${new Date().toISOString().split('T')[0]}.json`;\n      a.click();\n    }\n  }, []);\n\n  // Import functionality\n  const handleImport = useCallback(async (data: DataRecord[]) => {\n    try {\n      const importData = data.map(competency => ({\n        ...competency,\n        organization_id: orgId,\n        created_at: new Date().toISOString(),\n        updated_at: new Date().toISOString()\n      }));\n\n      const { error } = await sb\n        .from('competencies')\n        .insert(importData);\n\n      if (error) throw error;\n      \n      loadCompetenciesData();\n    } catch (error) {\n      console.error('Import error:', error);\n    }\n  }, [orgId, sb, loadCompetenciesData]);\n\n  // ATLVS DataViews configuration\n  const competenciesConfig: DataViewConfig = useMemo(() => ({\n    id: 'competencies-dataviews',\n    name: t('title'),\n    viewType: 'grid',\n    fields,\n    data: competenciesData,\n    defaultView: 'grid',\n    bulkActions: [\n      {\n        key: 'delete',\n        label: 'Delete Selected',\n        variant: 'destructive',\n        onClick: async (selectedIds: string[]) => {\n          console.log('Delete action:', selectedIds);\n          // Implement delete functionality\n        },\n        requiresSelection: true,\n        confirmMessage: 'Are you sure you want to delete the selected competencies?'\n      },\n      {\n        key: 'export',\n        label: 'Export Selected',\n        variant: 'secondary',\n        onClick: async (selectedIds: string[]) => {\n          const selectedData = competenciesData.filter(c => selectedIds.includes(c.id));\n          handleExport('csv', selectedData);\n        },\n        requiresSelection: true\n      },\n      {\n        key: 'assign',\n        label: 'Assign to People',\n        variant: 'secondary',\n        onClick: async (selectedIds: string[]) => {\n          console.log('Assign action:', selectedIds);\n          // Implement assignment functionality\n        },\n        requiresSelection: true\n      }\n    ],\n    exportConfig: {\n      formats: ['csv', 'json', 'excel'],\n      onExport: handleExport\n    },\n    importConfig: {\n      formats: ['csv', 'json'],\n      onImport: handleImport\n    },\n    onSearch: handleSearch,\n    onFilter: handleFilter,\n    onSort: handleSort\n  }), [t, fields, competenciesData, handleSearch, handleFilter, handleSort, handleExport, handleImport]);\n\n  return (\n    <div className=\"stack-lg\">\n      <DataViewProvider config={competenciesConfig}>\n        <StateManagerProvider>\n          <div className=\"stack-md\">\n            <ViewSwitcher />\n            <DataActions />\n            \n            <DataGrid />\n            \n            <KanbanBoard \n              columns={[\n                { id: 'beginner', title: 'Beginner' },\n                { id: 'intermediate', title: 'Intermediate' },\n                { id: 'advanced', title: 'Advanced' },\n                { id: 'expert', title: 'Expert' }\n              ]}\n              statusField=\"level\"\n              titleField=\"name\"\n            />\n            \n            <CalendarView \n              startDateField=\"created_at\"\n              titleField=\"name\"\n            />\n            \n            <ListView \n              titleField=\"name\"\n            />\n            \n            <TimelineView \n              startDateField=\"created_at\"\n              titleField=\"name\"\n            />\n            \n            <GalleryView \n              titleField=\"name\"\n            />\n            \n            <AppDrawer\n              title=\"Competency Details\"\n              open={false}\n              onClose={() => {}}\n              record={null}\n              fields={fields}\n              mode=\"view\"\n              tabs={[\n                {\n                  key: 'details',\n                  label: 'Details',\n                  content: (\n                    <div className=\"p-md stack-md\">\n                      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-md\">\n                        <div>\n                          <label className=\"block text-body-sm form-label mb-xs\">Name</label>\n                          <div className=\"text-body color-foreground\">Camera Operation</div>\n                        </div>\n                        <div>\n                          <label className=\"block text-body-sm form-label mb-xs\">Category</label>\n                          <div className=\"text-body color-foreground\">Technical</div>\n                        </div>\n                        <div>\n                          <label className=\"block text-body-sm form-label mb-xs\">Level</label>\n                          <div className=\"text-body color-foreground\">Advanced</div>\n                        </div>\n                        <div>\n                          <label className=\"block text-body-sm form-label mb-xs\">Certification Required</label>\n                          <div className=\"text-body color-foreground\">Yes</div>\n                        </div>\n                      </div>\n                    </div>\n                  )\n                },\n                {\n                  key: 'assignments',\n                  label: 'Assignments',\n                  content: (\n                    <div className=\"p-md\">\n                      <p className=\"color-muted\">People with this competency will be shown here.</p>\n                    </div>\n                  )\n                },\n                {\n                  key: 'requirements',\n                  label: 'Requirements',\n                  content: (\n                    <div className=\"p-md\">\n                      <p className=\"color-muted\">Certification and training requirements will be shown here.</p>\n                    </div>\n                  )\n                }\n              ]}\n            />\n          </div>\n        </StateManagerProvider>\n      </DataViewProvider>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ghxstship/apps/web/app/(app)/(shell)/people/contracts/ContractsClient.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'loadContractsData' and 'sb'. Either include them or remove the dependency array.","line":71,"column":6,"nodeType":"ArrayExpression","endLine":71,"endColumn":13,"suggestions":[{"desc":"Update the dependencies array to be: [loadContractsData, orgId, sb]","fix":{"range":[2199,2206],"text":"[loadContractsData, orgId, sb]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\nimport { User, FileText, Settings, Award, Calendar, TrendingUp, Activity, Clock, Plus, Search, Play, Trash2 } from \"lucide-react\";\nimport { useEffect, useState, useCallback, useMemo } from 'react';\nimport { type DataRecord } from '@ghxstship/ui';\nimport { DataViewProvider, StateManagerProvider, ViewSwitcher, DataActions, DataGrid, KanbanBoard, CalendarView, ListView, TimelineView, GalleryView } from '@ghxstship/ui/components/DataViews';\nimport { type FieldConfig, type DataViewConfig } from '@ghxstship/ui/components/DataViews/types';\nimport { useTranslations } from 'next-intl';\nimport { createBrowserClient } from '@ghxstship/auth';\nimport AppDrawer from '@/app/_components/shared/AppDrawer';\n\ninterface Contract extends DataRecord {\n  id: string;\n  person_id: string;\n  project_id: string;\n  type: 'employment' | 'freelance' | 'nda' | 'vendor' | 'service';\n  status: 'draft' | 'sent' | 'signed' | 'expired' | 'terminated';\n  start_date: string;\n  end_date?: string;\n  value?: number;\n  currency: string;\n  signed_date?: string;\n  document_url?: string;\n  notes?: string;\n  organization_id: string;\n  created_at: string;\n  updated_at: string;\n  person?: {\n    first_name: string;\n    last_name: string;\n    email?: string;\n  };\n  project?: {\n    name: string;\n    status: string;\n  };\n}\n\ninterface ContractsClientProps {\n  orgId: string;\n}\n\nexport default function ContractsClient({ orgId }: ContractsClientProps) {\n  const t = useTranslations('people.contracts');\n  const sb = createBrowserClient();\n  const [loading, setLoading] = useState(false);\n  const [contractsData, setContractsData] = useState<Contract[]>([]);\n\n  useEffect(() => {\n    loadContractsData();\n    \n    // Set up real-time subscription\n    const subscription = sb\n      .channel('files-contracts-changes')\n      .on('postgres_changes', \n        { \n          event: '*', \n          schema: 'public', \n          table: 'files_contracts',\n          filter: `organization_id=eq.${orgId}`\n        }, \n        (payload) => {\n          console.log('Real-time update:', payload);\n          loadContractsData();\n        }\n      )\n      .subscribe();\n\n    return () => {\n      subscription.unsubscribe();\n    };\n  }, [orgId]);\n\n  const loadContractsData = useCallback(async () => {\n    setLoading(true);\n    try {\n      const { data, error } = await sb\n        .from('files_contracts')\n        .select(`\n          *,\n          person:people(first_name, last_name, email),\n          project:projects(name, status)\n        `)\n        .eq('organization_id', orgId)\n        .order('created_at', { ascending: false });\n      \n      if (error) {\n        console.error('Supabase error:', error);\n        throw error;\n      }\n      \n      setContractsData(data || []);\n    } catch (error) {\n      console.error('Error loading contracts data:', error);\n      // Could add toast notification here\n    } finally {\n      setLoading(false);\n    }\n  }, [orgId, sb]);\n\n  // ATLVS DataViews field configuration - memoized for performance\n  const fields: FieldConfig[] = useMemo(() => [\n    {\n      key: 'person.first_name',\n      label: t('person'),\n      type: 'text',\n      sortable: true,\n      filterable: true\n    },\n    {\n      key: 'project.name',\n      label: t('project'),\n      type: 'text',\n      sortable: true,\n      filterable: true\n    },\n    {\n      key: 'type',\n      label: t('type'),\n      type: 'select',\n      options: [\n        { value: 'employment', label: t('employment') },\n        { value: 'freelance', label: t('freelance') },\n        { value: 'nda', label: t('nda') },\n        { value: 'vendor', label: t('vendor') },\n        { value: 'service', label: t('service') }\n      ],\n      sortable: true,\n      filterable: true\n    },\n    {\n      key: 'status',\n      label: t('status'),\n      type: 'select',\n      options: [\n        { value: 'draft', label: t('draft') },\n        { value: 'sent', label: t('sent') },\n        { value: 'signed', label: t('signed') },\n        { value: 'expired', label: t('expired') },\n        { value: 'terminated', label: t('terminated') }\n      ],\n      sortable: true,\n      filterable: true\n    },\n    {\n      key: 'start_date',\n      label: t('startDate'),\n      type: 'date',\n      sortable: true,\n      filterable: true\n    },\n    {\n      key: 'end_date',\n      label: t('endDate'),\n      type: 'date',\n      sortable: true,\n      filterable: true\n    },\n    {\n      key: 'value',\n      label: t('value'),\n      type: 'currency',\n      sortable: true,\n      filterable: true\n    },\n    {\n      key: 'currency',\n      label: t('currency'),\n      type: 'text',\n      sortable: true,\n      filterable: true\n    },\n    {\n      key: 'signed_date',\n      label: t('signedDate'),\n      type: 'date',\n      sortable: true,\n      filterable: true\n    },\n    {\n      key: 'created_at',\n      label: t('createdAt'),\n      type: 'date',\n      sortable: true,\n      filterable: true\n    }\n  ], [t]);\n\n  // Advanced search functionality\n  const handleSearch = useCallback(async (query: string) => {\n    if (!query.trim()) {\n      loadContractsData();\n      return;\n    }\n\n    try {\n      const { data, error } = await sb\n        .from('files_contracts')\n        .select(`\n          *,\n          person:people(first_name, last_name, email),\n          project:projects(name, status)\n        `)\n        .eq('organization_id', orgId)\n        .or(`notes.ilike.%${query}%,type.ilike.%${query}%,status.ilike.%${query}%`)\n        .order('created_at', { ascending: false });\n      \n      if (error) throw error;\n      setContractsData(data || []);\n    } catch (error) {\n      console.error('Search error:', error);\n    }\n  }, [orgId, sb, loadContractsData]);\n\n  // Advanced filtering\n  const handleFilter = useCallback(async (filters: Array<{ field: string; value?: unknown }>) => {\n    try {\n      let query = sb\n        .from('files_contracts')\n        .select(`\n          *,\n          person:people(first_name, last_name, email),\n          project:projects(name, status)\n        `)\n        .eq('organization_id', orgId);\n\n      for (const filter of filters) {\n        if (!filter || typeof filter.field !== 'string') continue;\n        const value = filter.value;\n        if (value === undefined || value === null || value === '') continue;\n        query = query.eq(filter.field, value as string | number | boolean);\n      }\n\n      const { data, error } = await query.order('created_at', { ascending: false });\n      if (error) throw error;\n      setContractsData(data || []);\n    } catch (error) {\n      console.error('Filter error:', error);\n    }\n  }, [orgId, sb]);\n\n  // Advanced sorting\n  const handleSort = useCallback(async (sorts: Array<{ field: string; direction: 'asc' | 'desc' }>) => {\n    try {\n      let query = sb\n        .from('files_contracts')\n        .select(`\n          *,\n          person:people(first_name, last_name, email),\n          project:projects(name, status)\n        `)\n        .eq('organization_id', orgId);\n\n      if (Array.isArray(sorts) && sorts.length > 0) {\n        const sort = sorts[0];\n        if (sort && sort.field) {\n          query = query.order(sort.field, { ascending: sort.direction === 'asc' });\n        }\n      }\n\n      const { data, error } = await query;\n      if (error) throw error;\n      setContractsData(data || []);\n    } catch (error) {\n      console.error('Sort error:', error);\n    }\n  }, [orgId, sb]);\n\n  // Export functionality\n  const handleExport = useCallback((format: string, data: DataRecord[], config?: unknown) => {\n    const exportData = data.map(contract => ({\n      'Person': contract.person ? `${contract.person.first_name} ${contract.person.last_name}` : 'N/A',\n      'Project': contract.project?.name || 'N/A',\n      'Type': contract.type,\n      'Status': contract.status,\n      'Start Date': contract.start_date,\n      'End Date': contract.end_date || 'N/A',\n      'Value': contract.value || 'N/A',\n      'Currency': contract.currency,\n      'Signed Date': contract.signed_date || 'N/A',\n      'Notes': contract.notes || 'N/A',\n      'Created At': contract.created_at\n    }));\n\n    if (format === 'csv') {\n      const csv = [\n        Object.keys(exportData[0]).join(','),\n        ...exportData.map(row => Object.values(row).join(','))\n      ].join('\\n');\n      \n      const blob = new Blob([csv], { type: 'text/csv' });\n      const url = URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.href = url;\n      a.download = `contracts-${new Date().toISOString().split('T')[0]}.csv`;\n      a.click();\n    } else if (format === 'json') {\n      const json = JSON.stringify(exportData, null, 2);\n      const blob = new Blob([json], { type: 'application/json' });\n      const url = URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.href = url;\n      a.download = `contracts-${new Date().toISOString().split('T')[0]}.json`;\n      a.click();\n    }\n  }, []);\n\n  // Import functionality\n  const handleImport = useCallback(async (data: DataRecord[]) => {\n    try {\n      const importData = data.map(contract => ({\n        ...contract,\n        organization_id: orgId,\n        created_at: new Date().toISOString(),\n        updated_at: new Date().toISOString()\n      }));\n\n      const { error } = await sb\n        .from('files_contracts')\n        .insert(importData);\n\n      if (error) throw error;\n      \n      loadContractsData();\n    } catch (error) {\n      console.error('Import error:', error);\n    }\n  }, [orgId, sb, loadContractsData]);\n\n  // ATLVS DataViews configuration\n  const contractsConfig: DataViewConfig = useMemo(() => ({\n    id: 'contracts-dataviews',\n    name: t('title'),\n    viewType: 'grid',\n    fields,\n    data: contractsData,\n    defaultView: 'grid',\n    bulkActions: [\n      {\n        key: 'delete',\n        label: 'Delete Selected',\n        variant: 'destructive',\n        onClick: async (selectedIds: string[]) => {\n          console.log('Delete action:', selectedIds);\n          // Implement delete functionality\n        },\n        requiresSelection: true,\n        confirmMessage: 'Are you sure you want to delete the selected contracts?'\n      },\n      {\n        key: 'export',\n        label: 'Export Selected',\n        variant: 'secondary',\n        onClick: async (selectedIds: string[]) => {\n          const selectedData = contractsData.filter(c => selectedIds.includes(c.id));\n          handleExport('csv', selectedData);\n        },\n        requiresSelection: true\n      },\n      {\n        key: 'sign',\n        label: 'Mark as Signed',\n        variant: 'secondary',\n        onClick: async (selectedIds: string[]) => {\n          console.log('Sign action:', selectedIds);\n          // Implement sign functionality\n        },\n        requiresSelection: true\n      }\n    ],\n    exportConfig: {\n      formats: ['csv', 'json', 'excel'],\n      onExport: handleExport\n    },\n    importConfig: {\n      formats: ['csv', 'json'],\n      onImport: handleImport\n    },\n    onSearch: handleSearch,\n    onFilter: handleFilter,\n    onSort: handleSort\n  }), [t, fields, contractsData, handleSearch, handleFilter, handleSort, handleExport, handleImport]);\n\n  return (\n    <div className=\"stack-lg\">\n      <DataViewProvider config={contractsConfig}>\n        <StateManagerProvider>\n          <div className=\"stack-md\">\n            <ViewSwitcher />\n            <DataActions />\n            \n            <DataGrid />\n            \n            <KanbanBoard \n              columns={[\n                { id: 'draft', title: 'Draft' },\n                { id: 'sent', title: 'Sent' },\n                { id: 'signed', title: 'Signed' },\n                { id: 'expired', title: 'Expired' }\n              ]}\n              statusField=\"status\"\n              titleField=\"person.first_name\"\n            />\n            \n            <CalendarView \n              startDateField=\"start_date\"\n              endDateField=\"end_date\"\n              titleField=\"person.first_name\"\n            />\n            \n            <ListView \n              titleField=\"person.first_name\"\n            />\n            \n            <TimelineView \n              startDateField=\"start_date\"\n              titleField=\"person.first_name\"\n            />\n            \n            <GalleryView \n              titleField=\"person.first_name\"\n            />\n            \n            <AppDrawer\n              title=\"Contract Details\"\n              open={false}\n              onClose={() => {}}\n              record={null}\n              fields={fields}\n              mode=\"view\"\n              tabs={[\n                {\n                  key: 'details',\n                  label: 'Details',\n                  content: (\n                    <div className=\"p-md stack-md\">\n                      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-md\">\n                        <div>\n                          <label className=\"block text-body-sm form-label mb-xs\">Person</label>\n                          <div className=\"text-body color-foreground\">Jack Sparrow</div>\n                        </div>\n                        <div>\n                          <label className=\"block text-body-sm form-label mb-xs\">Project</label>\n                          <div className=\"text-body color-foreground\">Blackwater Reverb</div>\n                        </div>\n                        <div>\n                          <label className=\"block text-body-sm form-label mb-xs\">Type</label>\n                          <div className=\"text-body color-foreground\">Employment</div>\n                        </div>\n                        <div>\n                          <label className=\"block text-body-sm form-label mb-xs\">Status</label>\n                          <div className=\"text-body color-foreground\">Signed</div>\n                        </div>\n                      </div>\n                    </div>\n                  )\n                },\n                {\n                  key: 'terms',\n                  label: 'Terms',\n                  content: (\n                    <div className=\"p-md\">\n                      <p className=\"color-muted\">Contract terms and conditions will be shown here.</p>\n                    </div>\n                  )\n                },\n                {\n                  key: 'documents',\n                  label: 'Documents',\n                  content: (\n                    <div className=\"p-md\">\n                      <p className=\"color-muted\">Contract documents and attachments will be shown here.</p>\n                    </div>\n                  )\n                }\n              ]}\n            />\n          </div>\n        </StateManagerProvider>\n      </DataViewProvider>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ghxstship/apps/web/app/(app)/(shell)/people/directory/DirectoryClient.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'loadPeopleData' and 'sb'. Either include them or remove the dependency array.","line":66,"column":6,"nodeType":"ArrayExpression","endLine":66,"endColumn":13,"suggestions":[{"desc":"Update the dependencies array to be: [loadPeopleData, orgId, sb]","fix":{"range":[2052,2059],"text":"[loadPeopleData, orgId, sb]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\nimport { User, FileText, Settings, Award, Calendar, TrendingUp, Activity, Clock, Plus, Search, Play, Trash2 } from \"lucide-react\";\nimport { useEffect, useState, useCallback, useMemo } from 'react';\nimport { type DataRecord } from '@ghxstship/ui';\nimport { DataViewProvider, StateManagerProvider, ViewSwitcher, DataActions, DataGrid, KanbanBoard, CalendarView, ListView, TimelineView, GalleryView } from '@ghxstship/ui/components/DataViews';\nimport { type FieldConfig, type DataViewConfig } from '@ghxstship/ui/components/DataViews/types';\nimport { useTranslations } from 'next-intl';\nimport { createBrowserClient } from '@ghxstship/auth';\nimport AppDrawer from '@/app/_components/shared/AppDrawer';\n\ninterface Person extends DataRecord {\n  id: string;\n  first_name: string;\n  last_name: string;\n  email?: string;\n  phone?: string;\n  role?: string;\n  department?: string;\n  location?: string;\n  status: 'active' | 'inactive' | 'terminated';\n  avatar_url?: string;\n  hire_date?: string;\n  birth_date?: string;\n  emergency_contact?: string;\n  emergency_phone?: string;\n  skills?: string[];\n  notes?: string;\n  organization_id: string;\n  created_at: string;\n  updated_at: string;\n}\n\ninterface DirectoryClientProps {\n  orgId: string;\n}\n\nexport default function DirectoryClient({ orgId }: DirectoryClientProps) {\n  const t = useTranslations('people.directory');\n  const sb = createBrowserClient();\n  const [loading, setLoading] = useState(false);\n  const [peopleData, setPeopleData] = useState<Person[]>([]);\n\n  useEffect(() => {\n    loadPeopleData();\n    \n    // Set up real-time subscription\n    const subscription = sb\n      .channel('people-changes')\n      .on('postgres_changes', \n        { \n          event: '*', \n          schema: 'public', \n          table: 'people',\n          filter: `organization_id=eq.${orgId}`\n        }, \n        (payload) => {\n          console.log('Real-time update:', payload);\n          loadPeopleData();\n        }\n      )\n      .subscribe();\n\n    return () => {\n      subscription.unsubscribe();\n    };\n  }, [orgId]);\n\n  const loadPeopleData = useCallback(async () => {\n    setLoading(true);\n    try {\n      const { data, error } = await sb\n        .from('people')\n        .select('*')\n        .eq('organization_id', orgId)\n        .order('first_name', { ascending: true });\n      \n      if (error) {\n        console.error('Supabase error:', error);\n        throw error;\n      }\n      \n      setPeopleData(data || []);\n    } catch (error) {\n      console.error('Error loading people data:', error);\n      // Could add toast notification here\n    } finally {\n      setLoading(false);\n    }\n  }, [orgId, sb]);\n\n  // ATLVS DataViews field configuration - memoized for performance\n  const fields: FieldConfig[] = useMemo(() => [\n    {\n      key: 'first_name',\n      label: t('firstName'),\n      type: 'text',\n      required: true,\n      sortable: true,\n      filterable: true\n    },\n    {\n      key: 'last_name',\n      label: t('lastName'),\n      type: 'text',\n      required: true,\n      sortable: true,\n      filterable: true\n    },\n    {\n      key: 'email',\n      label: t('email'),\n      type: 'email',\n      sortable: true,\n      filterable: true\n    },\n    {\n      key: 'phone',\n      label: t('phone'),\n      type: 'tel',\n      sortable: true,\n      filterable: true\n    },\n    {\n      key: 'role',\n      label: t('role'),\n      type: 'text',\n      sortable: true,\n      filterable: true\n    },\n    {\n      key: 'department',\n      label: t('department'),\n      type: 'text',\n      sortable: true,\n      filterable: true\n    },\n    {\n      key: 'location',\n      label: t('location'),\n      type: 'text',\n      sortable: true,\n      filterable: true\n    },\n    {\n      key: 'status',\n      label: t('status'),\n      type: 'select',\n      options: [\n        { value: 'active', label: t('active') },\n        { value: 'inactive', label: t('inactive') },\n        { value: 'terminated', label: t('terminated') }\n      ],\n      sortable: true,\n      filterable: true,\n      defaultValue: 'active'\n    },\n    {\n      key: 'hire_date',\n      label: t('hireDate'),\n      type: 'date',\n      sortable: true,\n      filterable: true\n    },\n    {\n      key: 'created_at',\n      label: t('createdAt'),\n      type: 'date',\n      sortable: true,\n      filterable: true\n    }\n  ], [t]);\n\n  // Advanced search functionality\n  const handleSearch = useCallback(async (query: string) => {\n    if (!query.trim()) {\n      loadPeopleData();\n      return;\n    }\n\n    try {\n      const { data, error } = await sb\n        .from('people')\n        .select('*')\n        .eq('organization_id', orgId)\n        .or(`first_name.ilike.%${query}%,last_name.ilike.%${query}%,email.ilike.%${query}%,role.ilike.%${query}%,department.ilike.%${query}%`)\n        .order('first_name', { ascending: true });\n      \n      if (error) throw error;\n      setPeopleData(data || []);\n    } catch (error) {\n      console.error('Search error:', error);\n    }\n  }, [orgId, sb, loadPeopleData]);\n\n  // Advanced filtering\n  const handleFilter = useCallback(async (filters: unknown) => {\n    try {\n      let query = sb\n        .from('people')\n        .select('*')\n        .eq('organization_id', orgId);\n\n      filters.forEach((filter: unknown) => {\n        if (filter.value) {\n          query = query.eq(filter.field, filter.value);\n        }\n      });\n\n      const { data, error } = await query.order('first_name', { ascending: true });\n      if (error) throw error;\n      setPeopleData(data || []);\n    } catch (error) {\n      console.error('Filter error:', error);\n    }\n  }, [orgId, sb]);\n\n  // Advanced sorting\n  const handleSort = useCallback(async (sorts: unknown) => {\n    try {\n      let query = sb\n        .from('people')\n        .select('*')\n        .eq('organization_id', orgId);\n\n      if (sorts.length > 0) {\n        const sort = sorts[0];\n        query = query.order(sort.field, { ascending: sort.direction === 'asc' });\n      }\n\n      const { data, error } = await query;\n      if (error) throw error;\n      setPeopleData(data || []);\n    } catch (error) {\n      console.error('Sort error:', error);\n    }\n  }, [orgId, sb]);\n\n  // Export functionality\n  const handleExport = useCallback((format: string, data: DataRecord[], config?: unknown) => {\n    const exportData = data.map(person => ({\n      'First Name': person.first_name,\n      'Last Name': person.last_name,\n      'Email': person.email || 'N/A',\n      'Phone': person.phone || 'N/A',\n      'Role': person.role || 'N/A',\n      'Department': person.department || 'N/A',\n      'Location': person.location || 'N/A',\n      'Status': person.status,\n      'Hire Date': person.hire_date || 'N/A',\n      'Created At': person.created_at\n    }));\n\n    if (format === 'csv') {\n      const csv = [\n        Object.keys(exportData[0]).join(','),\n        ...exportData.map(row => Object.values(row).join(','))\n      ].join('\\n');\n      \n      const blob = new Blob([csv], { type: 'text/csv' });\n      const url = URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.href = url;\n      a.download = `people-directory-${new Date().toISOString().split('T')[0]}.csv`;\n      a.click();\n    } else if (format === 'json') {\n      const json = JSON.stringify(exportData, null, 2);\n      const blob = new Blob([json], { type: 'application/json' });\n      const url = URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.href = url;\n      a.download = `people-directory-${new Date().toISOString().split('T')[0]}.json`;\n      a.click();\n    }\n  }, []);\n\n  // Import functionality\n  const handleImport = useCallback(async (data: DataRecord[]) => {\n    try {\n      const importData = data.map(person => ({\n        ...person,\n        organization_id: orgId,\n        created_at: new Date().toISOString(),\n        updated_at: new Date().toISOString()\n      }));\n\n      const { error } = await sb\n        .from('people')\n        .insert(importData);\n\n      if (error) throw error;\n      \n      loadPeopleData();\n    } catch (error) {\n      console.error('Import error:', error);\n    }\n  }, [orgId, sb, loadPeopleData]);\n\n  // ATLVS DataViews configuration\n  const directoryConfig: DataViewConfig = useMemo(() => ({\n    id: 'directory-dataviews',\n    name: t('title'),\n    viewType: 'grid',\n    fields,\n    data: peopleData,\n    defaultView: 'grid',\n    bulkActions: [\n      {\n        key: 'delete',\n        label: 'Delete Selected',\n        variant: 'destructive',\n        onClick: async (selectedIds: string[]) => {\n          console.log('Delete action:', selectedIds);\n          // Implement delete functionality\n        },\n        requiresSelection: true,\n        confirmMessage: 'Are you sure you want to delete the selected people?'\n      },\n      {\n        key: 'export',\n        label: 'Export Selected',\n        variant: 'secondary',\n        onClick: async (selectedIds: string[]) => {\n          const selectedData = peopleData.filter(p => selectedIds.includes(p.id));\n          handleExport('csv', selectedData);\n        },\n        requiresSelection: true\n      },\n      {\n        key: 'activate',\n        label: 'Activate Selected',\n        variant: 'secondary',\n        onClick: async (selectedIds: string[]) => {\n          console.log('Activate action:', selectedIds);\n          // Implement activate functionality\n        },\n        requiresSelection: true\n      },\n      {\n        key: 'deactivate',\n        label: 'Deactivate Selected',\n        variant: 'secondary',\n        onClick: async (selectedIds: string[]) => {\n          console.log('Deactivate action:', selectedIds);\n          // Implement deactivate functionality\n        },\n        requiresSelection: true\n      }\n    ],\n    exportConfig: {\n      formats: ['csv', 'json', 'excel'],\n      onExport: handleExport\n    },\n    importConfig: {\n      formats: ['csv', 'json'],\n      onImport: handleImport\n    },\n    onSearch: handleSearch,\n    onFilter: handleFilter,\n    onSort: handleSort\n  }), [t, fields, peopleData, handleSearch, handleFilter, handleSort, handleExport, handleImport]);\n\n  return (\n    <div className=\"stack-lg\">\n      <DataViewProvider config={directoryConfig}>\n        <StateManagerProvider>\n          <div className=\"stack-md\">\n            <ViewSwitcher />\n            <DataActions />\n            \n            <DataGrid />\n            \n            <KanbanBoard \n              columns={[\n                { id: 'active', title: 'Active' },\n                { id: 'inactive', title: 'Inactive' },\n                { id: 'terminated', title: 'Terminated' }\n              ]}\n              statusField=\"status\"\n              titleField=\"first_name\"\n            />\n            \n            <CalendarView \n              startDateField=\"hire_date\"\n              titleField=\"first_name\"\n            />\n            \n            <ListView \n              titleField=\"first_name\"\n            />\n            \n            <TimelineView \n              startDateField=\"hire_date\"\n              titleField=\"first_name\"\n            />\n            \n            <GalleryView \n              titleField=\"first_name\"\n              imageField=\"avatar_url\"\n            />\n            \n            <AppDrawer\n              title=\"Person Details\"\n              open={false}\n              onClose={() => {}}\n              record={null}\n              fields={fields}\n              mode=\"view\"\n              tabs={[\n                {\n                  key: 'profile',\n                  label: 'Profile',\n                  content: (\n                    <div className=\"p-md stack-md\">\n                      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-md\">\n                        <div>\n                          <label className=\"block text-body-sm form-label mb-xs\">First Name</label>\n                          <div className=\"text-body color-foreground\">Jack</div>\n                        </div>\n                        <div>\n                          <label className=\"block text-body-sm form-label mb-xs\">Last Name</label>\n                          <div className=\"text-body color-foreground\">Sparrow</div>\n                        </div>\n                        <div>\n                          <label className=\"block text-body-sm form-label mb-xs\">Email</label>\n                          <div className=\"text-body color-foreground\">jack.sparrow@blackwater.fleet</div>\n                        </div>\n                        <div>\n                          <label className=\"block text-body-sm form-label mb-xs\">Role</label>\n                          <div className=\"text-body color-foreground\">Captain</div>\n                        </div>\n                      </div>\n                    </div>\n                  )\n                },\n                {\n                  key: 'contact',\n                  label: 'Contact',\n                  content: (\n                    <div className=\"p-md\">\n                      <p className=\"color-muted\">Contact information and emergency contacts will be shown here.</p>\n                    </div>\n                  )\n                },\n                {\n                  key: 'employment',\n                  label: 'Employment',\n                  content: (\n                    <div className=\"p-md\">\n                      <p className=\"color-muted\">Employment history and contract information will be shown here.</p>\n                    </div>\n                  )\n                }\n              ]}\n            />\n          </div>\n        </StateManagerProvider>\n      </DataViewProvider>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ghxstship/apps/web/app/(app)/(shell)/people/directory/page.tsx","messages":[{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":38,"column":75,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[1395,1434],"text":"Manage your organization&apos;s team members"},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[1395,1434],"text":"Manage your organization&lsquo;s team members"},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[1395,1434],"text":"Manage your organization&#39;s team members"},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[1395,1434],"text":"Manage your organization&rsquo;s team members"},"desc":"Replace with `&rsquo;`."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { User, FileText, Settings, Award, Calendar, TrendingUp, Activity, Clock, Plus, Search, Play, Trash2 } from \"lucide-react\";\nimport { Card } from '@ghxstship/ui';\nimport { cookies } from 'next/headers';\nimport { createServerClient } from '@ghxstship/auth';\nimport { getTranslations } from 'next-intl/server';\nimport DirectoryClient from './DirectoryClient';\nimport CreatePersonClient from './CreatePersonClient';\n\nexport const metadata = { title: 'People · Directory' };\n\nexport default async function PeopleDirectoryPage() {\n  const t = await getTranslations('people.directory');\n  const cookieStore = cookies();\n  const supabase = createServerClient(cookieStore);\n\n  const { data: { user } } = await supabase.auth.getUser();\n  let orgId: string | null = null;\n  if (user) {\n    const { data: membership } = await supabase\n      .from('memberships')\n      .select('organization_id')\n      .eq('user_id', user.id)\n      .eq('status', 'active')\n      .order('created_at', { ascending: true })\n      .maybeSingle();\n    orgId = membership?.organization_id ?? null;\n  }\n\n  if (!orgId) {\n    return <div>Access denied</div>;\n  }\n\n  return (\n    <div className=\"stack-md\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-heading-3 text-heading-3 font-anton uppercase\">People Directory</h1>\n          <p className=\"text-body-sm color-muted\">Manage your organization's team members</p>\n        </div>\n        <CreatePersonClient orgId={orgId} />\n      </div>\n      <DirectoryClient orgId={orgId} />\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ghxstship/apps/web/app/(app)/(shell)/people/endorsements/CreateEndorsementClient.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'loadCompetencies' and 'loadPeople'. Either include them or remove the dependency array.","line":90,"column":6,"nodeType":"ArrayExpression","endLine":90,"endColumn":21,"suggestions":[{"desc":"Update the dependencies array to be: [isOpen, loadCompetencies, loadPeople, orgId]","fix":{"range":[2581,2596],"text":"[isOpen, loadCompetencies, loadPeople, orgId]"}}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":435,"column":40,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[13934,13983],"text":"• Consider the person&apos;s role and experience level"},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[13934,13983],"text":"• Consider the person&lsquo;s role and experience level"},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[13934,13983],"text":"• Consider the person&#39;s role and experience level"},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[13934,13983],"text":"• Consider the person&rsquo;s role and experience level"},"desc":"Replace with `&rsquo;`."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\n\nimport { Star, Plus, Save, X } from \"lucide-react\";\nimport { useCallback, useEffect, useMemo, useState, type ChangeEvent, type FormEvent } from 'react';\nimport { createBrowserClient } from '@ghxstship/auth';\nimport { usePostHog } from 'posthog-js/react';\nimport {\n  Button,\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n  Textarea,\n  UnifiedInput,\n} from '@ghxstship/ui';\nimport { tryCatch, reportError } from '@ghxstship/ui/utils/error-handling';\nimport AppDrawer from '@/app/_components/shared/AppDrawer';\n\ntype EndorsementType = 'skill' | 'performance' | 'leadership' | 'collaboration' | 'general';\n\ninterface EndorsementFormData {\n  personId: string;\n  competencyId: string;\n  rating: string;\n  comment: string;\n  projectId: string;\n  endorsementType: EndorsementType;\n}\n\ninterface Person {\n  id: string;\n  first_name: string;\n  last_name: string;\n  role?: string;\n}\n\ninterface Competency {\n  id: string;\n  name: string;\n  category?: string;\n}\n\ninterface CreateEndorsementClientProps {\n  orgId: string;\n  onEndorsementCreated?: () => void;\n}\n\nconst endorsementTypeOptions: ReadonlyArray<{ value: EndorsementType; label: string }> = [\n  { value: 'skill', label: 'Skill' },\n  { value: 'performance', label: 'Performance' },\n  { value: 'leadership', label: 'Leadership' },\n  { value: 'collaboration', label: 'Collaboration' },\n  { value: 'general', label: 'General' },\n];\n\nconst ratingOptions: ReadonlyArray<{ value: string; label: string }> = [\n  { value: '1', label: '1 - Needs Improvement' },\n  { value: '2', label: '2 - Below Expectations' },\n  { value: '3', label: '3 - Meets Expectations' },\n  { value: '4', label: '4 - Exceeds Expectations' },\n  { value: '5', label: '5 - Outstanding' },\n];\n\nconst createInitialFormData = (): EndorsementFormData => ({\n  personId: '',\n  competencyId: '',\n  rating: '5',\n  comment: '',\n  projectId: '',\n  endorsementType: 'skill',\n});\n\nexport default function CreateEndorsementClient({ orgId, onEndorsementCreated }: CreateEndorsementClientProps) {\n  const posthog = usePostHog();\n  const sb = createBrowserClient();\n  const [isOpen, setIsOpen] = useState(false);\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [people, setPeople] = useState<Person[]>([]);\n  const [competencies, setCompetencies] = useState<Competency[]>([]);\n  const [formData, setFormData] = useState<EndorsementFormData>(() => createInitialFormData());\n  const [error, setError] = useState<string | null>(null);\n\n  useEffect(() => {\n    if (isOpen) {\n      loadPeople();\n      loadCompetencies();\n    }\n  }, [isOpen, orgId]);\n\n  const loadPeople = async () => {\n    try {\n      const { data: people } = await sb\n        .from('people')\n        .select('id, first_name, last_name, role')\n        .eq('organization_id', orgId)\n        .eq('status', 'active')\n        .order('first_name');\n\n      setPeople(people || []);\n    } catch (error) {\n      console.error('Error loading people:', error);\n    }\n  };\n\n  const loadCompetencies = async () => {\n    try {\n      const { data: competencies } = await sb\n        .from('people_competencies')\n        .select('id, name, category')\n        .eq('organization_id', orgId)\n        .order('name');\n\n      setCompetencies(competencies || []);\n    } catch (error) {\n      console.error('Error loading competencies:', error);\n    }\n  };\n\n  const handleInputChange = useCallback((event: ChangeEvent<HTMLInputElement>) => {\n    const { name, value } = event.target;\n    setFormData(prev => ({ ...prev, [name]: value }));\n  }, []);\n\n  const handleTextareaChange = useCallback((event: ChangeEvent<HTMLTextAreaElement>) => {\n    const { name, value } = event.target;\n    setFormData(prev => ({ ...prev, [name]: value }));\n  }, []);\n\n  const handleSelectChange = useCallback(<Key extends keyof EndorsementFormData>(field: Key) => (value: string) => {\n    setFormData(prev => ({ ...prev, [field]: value as EndorsementFormData[Key] }));\n  }, []);\n\n  const fetchPeopleAndCompetencies = useCallback(async () => {\n    try {\n      const [{ data: peopleData }, { data: competenciesData }] = await Promise.all([\n        sb\n          .from('people')\n          .select('id, first_name, last_name, role')\n          .eq('organization_id', orgId)\n          .eq('status', 'active')\n          .order('first_name'),\n        sb\n          .from('people_competencies')\n          .select('id, name, category')\n          .eq('organization_id', orgId)\n          .order('name'),\n      ]);\n\n      setPeople(peopleData || []);\n      setCompetencies(competenciesData || []);\n    } catch (loadError) {\n      console.error('Error loading endorsements metadata:', loadError);\n    }\n  }, [orgId, sb]);\n\n  const handleOpenDrawer = useCallback(() => {\n    setError(null);\n    setIsOpen(true);\n  }, []);\n\n  useEffect(() => {\n    if (isOpen) {\n      fetchPeopleAndCompetencies();\n    }\n  }, [fetchPeopleAndCompetencies, isOpen]);\n\n  const handleSubmit = useCallback(async (event: FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    if (!formData.personId) {\n      setError('Person selection is required.');\n      return;\n    }\n\n    const ratingValue = Number(formData.rating);\n\n    if (Number.isNaN(ratingValue) || ratingValue < 1 || ratingValue > 5) {\n      setError('Rating must be between 1 and 5.');\n      return;\n    }\n\n    setError(null);\n    try {\n      setIsSubmitting(true);\n\n      // Get current user\n      const { data: { user } } = await sb.auth.getUser();\n      if (!user) throw new Error('User not authenticated');\n\n      const responseResult = await tryCatch(async () =>\n        fetch('/api/v1/people/endorsements', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            'x-org-id': orgId,\n          },\n          body: JSON.stringify({\n            personId: formData.personId,\n            competencyId: formData.competencyId || undefined,\n            rating: ratingValue,\n            comment: formData.comment.trim() || undefined,\n            projectId: formData.projectId.trim() || undefined,\n            endorsementType: formData.endorsementType,\n            endorserId: user.id,\n          }),\n        })\n      );\n      if (!responseResult.success) {\n        reportError(responseResult.error);\n        throw new Error(responseResult.error.message);\n      }\n      const response = responseResult.data;\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.error || 'Failed to create endorsement');\n      }\n\n      const result = await response.json();\n\n      // Track endorsement creation\n      posthog?.capture('people_endorsement_created', {\n        endorsement_id: result.data.id,\n        person_id: formData.personId,\n        competency_id: formData.competencyId || undefined,\n        rating: ratingValue,\n        type: formData.endorsementType,\n        organization_id: orgId,\n      });\n\n      // Log activity\n      await sb.from('activities').insert({\n        organization_id: orgId,\n        user_id: user.id,\n        action: 'create',\n        resource_type: 'endorsement',\n        resource_id: result.data.id,\n        details: {\n          person_id: formData.personId,\n          competency_id: formData.competencyId || undefined,\n          rating: ratingValue,\n          type: formData.endorsementType,\n        },\n      });\n\n      // Reset form and close drawer\n      setFormData(createInitialFormData());\n      setIsOpen(false);\n      onEndorsementCreated?.();\n\n    } catch (error) {\n      const message = error instanceof Error ? error.message : 'Unknown error';\n      console.error('Error creating endorsement:', error);\n      setError(message);\n      posthog?.capture('people_endorsement_creation_failed', {\n        error: message,\n        organization_id: orgId,\n      });\n    } finally {\n      setIsSubmitting(false);\n    }\n  }, [formData, onEndorsementCreated, orgId, posthog, sb]);\n\n  const handleClose = () => {\n    if (!isSubmitting) {\n      setFormData(createInitialFormData());\n      setError(null);\n      setIsOpen(false);\n    }\n  };\n\n  const isSubmitDisabled = useMemo(() => {\n    if (isSubmitting) {\n      return true;\n    }\n\n    if (!formData.personId) {\n      return true;\n    }\n\n    const ratingValue = Number(formData.rating);\n    return Number.isNaN(ratingValue) || ratingValue < 1 || ratingValue > 5;\n  }, [formData.personId, formData.rating, isSubmitting]);\n\n  return (\n    <>\n      <Button\n        onClick={handleOpenDrawer}\n        className=\"flex items-center gap-sm\"\n        \n      >\n        <Plus className=\"h-4 w-4\" />\n        Add Endorsement\n      </Button>\n\n      <AppDrawer\n        open={isOpen}\n        onClose={handleClose}\n        record={null}\n        fields={[]}\n        mode=\"create\"\n        title=\"Add Endorsement\"\n        loading={isSubmitting}\n        tabs={[{\n          key: 'content',\n          label: 'Details',\n          content: (\n        <form id=\"endorsement-form\" onSubmit={handleSubmit} className=\"stack-lg\">\n          <div className=\"flex items-center gap-sm mb-lg\">\n            <div className=\"p-sm bg-warning/10 rounded-lg\">\n              <Star className=\"h-5 w-5 color-warning\" />\n            </div>\n            <div>\n              <h3 className=\"form-label\">Endorsement Information</h3>\n              <p className=\"text-body-sm color-foreground/70\">\n                Provide feedback and recognition for team members\n              </p>\n            </div>\n          </div>\n\n          <div className=\"stack-md\">\n            <div>\n              <label className=\"block text-body-sm form-label mb-sm\">\n                Person *\n              </label>\n              <Select value={formData.personId} onValueChange={handleSelectChange('personId')}>\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Select person...\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {people.map(person => (\n                    <SelectItem key={person.id} value={person.id}>\n                      {person.first_name} {person.last_name}\n                      {person.role ? ` (${person.role})` : ''}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div className=\"grid grid-cols-2 gap-md\">\n              <div>\n                <label className=\"block text-body-sm form-label mb-sm\">\n                  Endorsement Type\n                </label>\n                <Select value={formData.endorsementType} onValueChange={handleSelectChange('endorsementType')}>\n                  <SelectTrigger>\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {endorsementTypeOptions.map(option => (\n                      <SelectItem key={option.value} value={option.value}>\n                        {option.label}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div>\n                <label className=\"block text-body-sm form-label mb-sm\">\n                  Rating *\n                </label>\n                <Select value={formData.rating} onValueChange={handleSelectChange('rating')}>\n                  <SelectTrigger>\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {ratingOptions.map(option => (\n                      <SelectItem key={option.value} value={option.value}>\n                        {option.label}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n\n            <div>\n              <label className=\"block text-body-sm form-label mb-sm\">\n                Specific Competency (Optional)\n              </label>\n              <Select value={formData.competencyId} onValueChange={handleSelectChange('competencyId')}>\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Select competency (optional)...\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"\">None</SelectItem>\n                  {competencies.map(competency => (\n                    <SelectItem key={competency.id} value={competency.id}>\n                      {competency.name}\n                      {competency.category ? ` (${competency.category})` : ''}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div>\n              <label className=\"block text-body-sm form-label mb-sm\">\n                Project (Optional)\n              </label>\n              <UnifiedInput\n                id=\"projectId\"\n                name=\"projectId\"\n                value={formData.projectId}\n                onChange={handleInputChange}\n                placeholder=\"Project ID or name where this was observed\"\n              />\n            </div>\n\n            <div>\n              <label className=\"block text-body-sm form-label mb-sm\">\n                Comments\n              </label>\n              <Textarea\n                id=\"comment\"\n                name=\"comment\"\n                value={formData.comment}\n                onChange={handleTextareaChange}\n                placeholder=\"Specific feedback, examples, and observations\"\n                rows={4}\n              />\n            </div>\n          </div>\n\n          <div className=\"bg-warning/5 p-md rounded-lg\">\n            <h4 className=\"form-label color-warning mb-sm\">Endorsement Guidelines</h4>\n            <ul className=\"text-body-sm color-warning/80 stack-xs\">\n              <li>• Provide specific, constructive feedback with examples</li>\n              <li>• Focus on observable behaviors and outcomes</li>\n              <li>• Be fair and objective in your ratings</li>\n              <li>• Consider the person's role and experience level</li>\n              <li>• Use endorsements to recognize good work and guide development</li>\n            </ul>\n          </div>\n          {error && (\n            <div className=\"flex items-center gap-sm text-body-sm color-destructive\">\n              {error}\n            </div>\n          )}\n          <div className=\"flex justify-end gap-sm mt-lg\">\n            <Button\n              type=\"button\"\n              variant=\"outline\"\n              onClick={handleClose}\n              disabled={isSubmitting}\n            >\n              <X className=\"h-4 w-4 mr-sm\" />\n              Cancel\n            </Button>\n            <Button\n              type=\"submit\"\n              form=\"endorsement-form\"\n              disabled={isSubmitDisabled}\n            >\n              <Save className=\"h-4 w-4 mr-sm\" />\n              {isSubmitting ? 'Creating...' : 'Create Endorsement'}\n            </Button>\n          </div>\n        </form>\n          ),\n        }]} />\n    </>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ghxstship/apps/web/app/(app)/(shell)/people/endorsements/EndorsementsClient.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'loadEndorsementsData' and 'sb'. Either include them or remove the dependency array.","line":75,"column":6,"nodeType":"ArrayExpression","endLine":75,"endColumn":13,"suggestions":[{"desc":"Update the dependencies array to be: [loadEndorsementsData, orgId, sb]","fix":{"range":[2246,2253],"text":"[loadEndorsementsData, orgId, sb]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\nimport { User, FileText, Settings, Award, Calendar, TrendingUp, Activity, Clock, Plus, Search, Play, Trash2 } from \"lucide-react\";\nimport { useEffect, useState, useCallback, useMemo } from 'react';\nimport { type DataRecord } from '@ghxstship/ui';\nimport { DataViewProvider, StateManagerProvider, ViewSwitcher, DataActions, DataGrid, KanbanBoard, CalendarView, ListView, TimelineView, GalleryView } from '@ghxstship/ui/components/DataViews';\nimport { type FieldConfig, type DataViewConfig } from '@ghxstship/ui/components/DataViews/types';\nimport { useTranslations } from 'next-intl';\nimport { createBrowserClient } from '@ghxstship/auth';\nimport AppDrawer from '@/app/_components/shared/AppDrawer';\n\ninterface Endorsement extends DataRecord {\n  id: string;\n  endorsed_person_id: string;\n  endorser_person_id: string;\n  competency_id?: string;\n  rating: number;\n  message?: string;\n  context?: string;\n  organization_id: string;\n  created_at: string;\n  updated_at: string;\n  endorsed_person?: {\n    first_name: string;\n    last_name: string;\n    email?: string;\n    role?: string;\n    department?: string;\n  };\n  endorser_person?: {\n    first_name: string;\n    last_name: string;\n    email?: string;\n    role?: string;\n    department?: string;\n  };\n  competency?: {\n    name: string;\n    category: string;\n  };\n}\n\ninterface EndorsementsClientProps {\n  orgId: string;\n}\n\nexport default function EndorsementsClient({ orgId }: EndorsementsClientProps) {\n  const t = useTranslations('people.endorsements');\n  const sb = createBrowserClient();\n  const [loading, setLoading] = useState(false);\n  const [endorsementsData, setEndorsementsData] = useState<Endorsement[]>([]);\n\n  useEffect(() => {\n    loadEndorsementsData();\n    \n    // Set up real-time subscription\n    const subscription = sb\n      .channel('endorsements-changes')\n      .on('postgres_changes', \n        { \n          event: '*', \n          schema: 'public', \n          table: 'people_endorsements',\n          filter: `organization_id=eq.${orgId}`\n        }, \n        (payload) => {\n          console.log('Real-time update:', payload);\n          loadEndorsementsData();\n        }\n      )\n      .subscribe();\n\n    return () => {\n      subscription.unsubscribe();\n    };\n  }, [orgId]);\n\n  const loadEndorsementsData = useCallback(async () => {\n    setLoading(true);\n    try {\n      const { data, error } = await sb\n        .from('people_endorsements')\n        .select(`\n          *,\n          endorsed_person:people!endorsed_id(first_name, last_name, email, role, department),\n          endorser_person:people!endorser_id(first_name, last_name, email, role, department),\n          competency:people_competencies(name, category)\n        `)\n        .eq('organization_id', orgId)\n        .order('created_at', { ascending: false });\n      \n      if (error) {\n        console.error('Supabase error:', error);\n        throw error;\n      }\n      \n      setEndorsementsData(data || []);\n    } catch (error) {\n      console.error('Error loading endorsements data:', error);\n    } finally {\n      setLoading(false);\n    }\n  }, [orgId, sb]);\n\n  // ATLVS DataViews field configuration - memoized for performance\n  const fields: FieldConfig[] = useMemo(() => [\n    {\n      key: 'endorsed_person.first_name',\n      label: t('endorsedPerson'),\n      type: 'text',\n      sortable: true,\n      filterable: true\n    },\n    {\n      key: 'endorser_person.first_name',\n      label: t('endorser'),\n      type: 'text',\n      sortable: true,\n      filterable: true\n    },\n    {\n      key: 'competency.name',\n      label: t('competency'),\n      type: 'text',\n      sortable: true,\n      filterable: true\n    },\n    {\n      key: 'rating',\n      label: t('rating'),\n      type: 'number',\n      sortable: true,\n      filterable: true\n    },\n    {\n      key: 'message',\n      label: t('message'),\n      type: 'textarea',\n      sortable: false,\n      filterable: true\n    },\n    {\n      key: 'context',\n      label: t('context'),\n      type: 'text',\n      sortable: true,\n      filterable: true\n    },\n    {\n      key: 'created_at',\n      label: t('createdAt'),\n      type: 'date',\n      sortable: true,\n      filterable: true\n    }\n  ], [t]);\n\n  // Advanced search functionality\n  const handleSearch = useCallback(async (query: string) => {\n    if (!query.trim()) {\n      loadEndorsementsData();\n      return;\n    }\n\n    try {\n      const { data, error } = await sb\n        .from('people_endorsements')\n        .select(`\n          *,\n          endorsed_person:people!endorsed_id(first_name, last_name, email, role, department),\n          endorser_person:people!endorser_id(first_name, last_name, email, role, department),\n          competency:people_competencies(name, category)\n        `)\n        .eq('organization_id', orgId)\n        .or(`message.ilike.%${query}%,context.ilike.%${query}%`)\n        .order('created_at', { ascending: false });\n      \n      if (error) throw error;\n      setEndorsementsData(data || []);\n    } catch (error) {\n      console.error('Search error:', error);\n    }\n  }, [orgId, sb, loadEndorsementsData]);\n\n  // Advanced filtering\n  const handleFilter = useCallback(async (filters: unknown) => {\n    try {\n      let query = sb\n        .from('people_endorsements')\n        .select(`\n          *,\n          endorsed_person:people!endorsed_id(first_name, last_name, email, role, department),\n          endorser_person:people!endorser_id(first_name, last_name, email, role, department),\n          competency:people_competencies(name, category)\n        `)\n        .eq('organization_id', orgId);\n\n      filters.forEach((filter: unknown) => {\n        if (filter.value) {\n          query = query.eq(filter.field, filter.value);\n        }\n      });\n\n      const { data, error } = await query.order('created_at', { ascending: false });\n      if (error) throw error;\n      setEndorsementsData(data || []);\n    } catch (error) {\n      console.error('Filter error:', error);\n    }\n  }, [orgId, sb]);\n\n  // Advanced sorting\n  const handleSort = useCallback(async (sorts: unknown) => {\n    try {\n      let query = sb\n        .from('people_endorsements')\n        .select(`\n          *,\n          endorsed_person:people!endorsed_id(first_name, last_name, email, role, department),\n          endorser_person:people!endorser_id(first_name, last_name, email, role, department),\n          competency:people_competencies(name, category)\n        `)\n        .eq('organization_id', orgId);\n\n      if (sorts.length > 0) {\n        const sort = sorts[0];\n        query = query.order(sort.field, { ascending: sort.direction === 'asc' });\n      }\n\n      const { data, error } = await query;\n      if (error) throw error;\n      setEndorsementsData(data || []);\n    } catch (error) {\n      console.error('Sort error:', error);\n    }\n  }, [orgId, sb]);\n\n  // Export functionality\n  const handleExport = useCallback((format: string, data: DataRecord[], config?: unknown) => {\n    const exportData = data.map(endorsement => ({\n      'Endorsed Person': endorsement.endorsed_person ? `${endorsement.endorsed_person.first_name} ${endorsement.endorsed_person.last_name}` : 'N/A',\n      'Endorser': endorsement.endorser_person ? `${endorsement.endorser_person.first_name} ${endorsement.endorser_person.last_name}` : 'N/A',\n      'Competency': endorsement.competency?.name || 'N/A',\n      'Rating': endorsement.rating,\n      'Message': endorsement.message || 'N/A',\n      'Context': endorsement.context || 'N/A',\n      'Created At': endorsement.created_at\n    }));\n\n    if (format === 'csv') {\n      const csv = [\n        Object.keys(exportData[0]).join(','),\n        ...exportData.map(row => Object.values(row).join(','))\n      ].join('\\n');\n      \n      const blob = new Blob([csv], { type: 'text/csv' });\n      const url = URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.href = url;\n      a.download = `endorsements-${new Date().toISOString().split('T')[0]}.csv`;\n      a.click();\n    } else if (format === 'json') {\n      const json = JSON.stringify(exportData, null, 2);\n      const blob = new Blob([json], { type: 'application/json' });\n      const url = URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.href = url;\n      a.download = `endorsements-${new Date().toISOString().split('T')[0]}.json`;\n      a.click();\n    }\n  }, []);\n\n  // Import functionality\n  const handleImport = useCallback(async (data: DataRecord[]) => {\n    try {\n      const importData = data.map(endorsement => ({\n        ...endorsement,\n        organization_id: orgId,\n        created_at: new Date().toISOString(),\n        updated_at: new Date().toISOString()\n      }));\n\n      const { error } = await sb\n        .from('people_endorsements')\n        .insert(importData);\n\n      if (error) throw error;\n      \n      loadEndorsementsData();\n    } catch (error) {\n      console.error('Import error:', error);\n    }\n  }, [orgId, sb, loadEndorsementsData]);\n\n  // ATLVS DataViews configuration\n  const endorsementsConfig: DataViewConfig = useMemo(() => ({\n    id: 'endorsements-dataviews',\n    name: t('title'),\n    viewType: 'grid',\n    fields,\n    data: endorsementsData,\n    defaultView: 'grid',\n    bulkActions: [\n      {\n        key: 'delete',\n        label: 'Delete Selected',\n        variant: 'destructive',\n        onClick: async (selectedIds: string[]) => {\n          console.log('Delete action:', selectedIds);\n          // Implement delete functionality\n        },\n        requiresSelection: true,\n        confirmMessage: 'Are you sure you want to delete the selected endorsements?'\n      },\n      {\n        key: 'export',\n        label: 'Export Selected',\n        variant: 'secondary',\n        onClick: async (selectedIds: string[]) => {\n          const selectedData = endorsementsData.filter(e => selectedIds.includes(e.id));\n          handleExport('csv', selectedData);\n        },\n        requiresSelection: true\n      }\n    ],\n    exportConfig: {\n      formats: ['csv', 'json', 'excel'],\n      onExport: handleExport\n    },\n    importConfig: {\n      formats: ['csv', 'json'],\n      onImport: handleImport\n    },\n    onSearch: handleSearch,\n    onFilter: handleFilter,\n    onSort: handleSort\n  }), [t, fields, endorsementsData, handleSearch, handleFilter, handleSort, handleExport, handleImport]);\n\n  return (\n    <div className=\"stack-lg\">\n      <DataViewProvider config={endorsementsConfig}>\n        <StateManagerProvider>\n          <div className=\"stack-md\">\n            <ViewSwitcher />\n            <DataActions />\n            \n            <DataGrid />\n            \n            <KanbanBoard \n              columns={[\n                { id: '1', title: '1 Star' },\n                { id: '2', title: '2 Stars' },\n                { id: '3', title: '3 Stars' },\n                { id: '4', title: '4 Stars' },\n                { id: '5', title: '5 Stars' }\n              ]}\n              statusField=\"rating\"\n              titleField=\"endorsed_person.first_name\"\n            />\n            \n            <CalendarView \n              startDateField=\"created_at\"\n              titleField=\"endorsed_person.first_name\"\n            />\n            \n            <ListView \n              titleField=\"endorsed_person.first_name\"\n            />\n            \n            <TimelineView \n              startDateField=\"created_at\"\n              titleField=\"endorsed_person.first_name\"\n            />\n            \n            <GalleryView \n              titleField=\"endorsed_person.first_name\"\n            />\n            \n            <AppDrawer\n              title=\"Endorsement Details\"\n              open={false}\n              onClose={() => {}}\n              record={null}\n              fields={fields}\n              mode=\"view\"\n              tabs={[\n                {\n                  key: 'details',\n                  label: 'Details',\n                  content: (\n                    <div className=\"p-md stack-md\">\n                      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-md\">\n                        <div>\n                          <label className=\"block text-body-sm form-label mb-xs\">Endorsed Person</label>\n                          <div className=\"text-body color-foreground\">Jack Sparrow</div>\n                        </div>\n                        <div>\n                          <label className=\"block text-body-sm form-label mb-xs\">Endorser</label>\n                          <div className=\"text-body color-foreground\">Elizabeth Swann</div>\n                        </div>\n                        <div>\n                          <label className=\"block text-body-sm form-label mb-xs\">Rating</label>\n                          <div className=\"text-body color-foreground\">5 Stars</div>\n                        </div>\n                        <div>\n                          <label className=\"block text-body-sm form-label mb-xs\">Competency</label>\n                          <div className=\"text-body color-foreground\">Leadership</div>\n                        </div>\n                      </div>\n                    </div>\n                  )\n                },\n                {\n                  key: 'message',\n                  label: 'Message',\n                  content: (\n                    <div className=\"p-md\">\n                      <p className=\"color-muted\">Endorsement message and feedback will be shown here.</p>\n                    </div>\n                  )\n                },\n                {\n                  key: 'context',\n                  label: 'Context',\n                  content: (\n                    <div className=\"p-md\">\n                      <p className=\"color-muted\">Project context and collaboration details will be shown here.</p>\n                    </div>\n                  )\n                }\n              ]}\n            />\n          </div>\n        </StateManagerProvider>\n      </DataViewProvider>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ghxstship/apps/web/app/(app)/(shell)/people/network/NetworkClient.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'loadNetworkData' and 'sb'. Either include them or remove the dependency array.","line":70,"column":6,"nodeType":"ArrayExpression","endLine":70,"endColumn":13,"suggestions":[{"desc":"Update the dependencies array to be: [loadNetworkData, orgId, sb]","fix":{"range":[2221,2228],"text":"[loadNetworkData, orgId, sb]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\nimport { User, FileText, Settings, Award, Calendar, TrendingUp, Activity, Clock, Plus, Search, Play, Trash2 } from \"lucide-react\";\nimport { useEffect, useState, useCallback, useMemo } from 'react';\nimport { type DataRecord } from '@ghxstship/ui';\nimport { DataViewProvider, StateManagerProvider, ViewSwitcher, DataActions, DataGrid, KanbanBoard, CalendarView, ListView, TimelineView, GalleryView } from '@ghxstship/ui/components/DataViews';\nimport { type FieldConfig, type DataViewConfig } from '@ghxstship/ui/components/DataViews/types';\nimport { useTranslations } from 'next-intl';\nimport { createBrowserClient } from '@ghxstship/auth';\nimport AppDrawer from '@/app/_components/shared/AppDrawer';\n\ninterface NetworkConnection extends DataRecord {\n  id: string;\n  person_id: string;\n  connected_person_id: string;\n  relationship_type: 'colleague' | 'mentor' | 'mentee' | 'collaborator' | 'friend' | 'professional';\n  strength: 'weak' | 'moderate' | 'strong';\n  notes?: string;\n  organization_id: string;\n  created_at: string;\n  updated_at: string;\n  person?: {\n    first_name: string;\n    last_name: string;\n    email?: string;\n    role?: string;\n    department?: string;\n  };\n  connected_person?: {\n    first_name: string;\n    last_name: string;\n    email?: string;\n    role?: string;\n    department?: string;\n  };\n}\n\ninterface NetworkClientProps {\n  orgId: string;\n}\n\nexport default function NetworkClient({ orgId }: NetworkClientProps) {\n  const t = useTranslations('people.network');\n  const sb = createBrowserClient();\n  const [loading, setLoading] = useState(false);\n  const [networkData, setNetworkData] = useState<NetworkConnection[]>([]);\n\n  useEffect(() => {\n    loadNetworkData();\n    \n    // Set up real-time subscription\n    const subscription = sb\n      .channel('network-changes')\n      .on('postgres_changes', \n        { \n          event: '*', \n          schema: 'public', \n          table: 'people_network_connections',\n          filter: `organization_id=eq.${orgId}`\n        }, \n        (payload) => {\n          console.log('Real-time update:', payload);\n          loadNetworkData();\n        }\n      )\n      .subscribe();\n\n    return () => {\n      subscription.unsubscribe();\n    };\n  }, [orgId]);\n\n  const loadNetworkData = useCallback(async () => {\n    setLoading(true);\n    try {\n      const { data, error } = await sb\n        .from('people_network_connections')\n        .select(`\n          *,\n          person:people!person_id(first_name, last_name, email, role, department),\n          connected_person:people!connected_person_id(first_name, last_name, email, role, department)\n        `)\n        .eq('organization_id', orgId)\n        .order('created_at', { ascending: false });\n      \n      if (error) {\n        console.error('Supabase error:', error);\n        throw error;\n      }\n      \n      setNetworkData(data || []);\n    } catch (error) {\n      console.error('Error loading network data:', error);\n    } finally {\n      setLoading(false);\n    }\n  }, [orgId, sb]);\n\n  // ATLVS DataViews field configuration - memoized for performance\n  const fields: FieldConfig[] = useMemo(() => [\n    {\n      key: 'person.first_name',\n      label: t('person'),\n      type: 'text',\n      sortable: true,\n      filterable: true\n    },\n    {\n      key: 'connected_person.first_name',\n      label: t('connectedPerson'),\n      type: 'text',\n      sortable: true,\n      filterable: true\n    },\n    {\n      key: 'relationship_type',\n      label: t('relationshipType'),\n      type: 'select',\n      options: [\n        { value: 'colleague', label: t('colleague') },\n        { value: 'mentor', label: t('mentor') },\n        { value: 'mentee', label: t('mentee') },\n        { value: 'collaborator', label: t('collaborator') },\n        { value: 'friend', label: t('friend') },\n        { value: 'professional', label: t('professional') }\n      ],\n      sortable: true,\n      filterable: true\n    },\n    {\n      key: 'strength',\n      label: t('strength'),\n      type: 'select',\n      options: [\n        { value: 'weak', label: t('weak') },\n        { value: 'moderate', label: t('moderate') },\n        { value: 'strong', label: t('strong') }\n      ],\n      sortable: true,\n      filterable: true\n    },\n    {\n      key: 'notes',\n      label: t('notes'),\n      type: 'textarea',\n      sortable: false,\n      filterable: true\n    },\n    {\n      key: 'created_at',\n      label: t('createdAt'),\n      type: 'date',\n      sortable: true,\n      filterable: true\n    }\n  ], [t]);\n\n  // Advanced search functionality\n  const handleSearch = useCallback(async (query: string) => {\n    if (!query.trim()) {\n      loadNetworkData();\n      return;\n    }\n\n    try {\n      const { data, error } = await sb\n        .from('people_network_connections')\n        .select(`\n          *,\n          person:people!person_id(first_name, last_name, email, role, department),\n          connected_person:people!connected_person_id(first_name, last_name, email, role, department)\n        `)\n        .eq('organization_id', orgId)\n        .or(`notes.ilike.%${query}%,relationship_type.ilike.%${query}%`)\n        .order('created_at', { ascending: false });\n      \n      if (error) throw error;\n      setNetworkData(data || []);\n    } catch (error) {\n      console.error('Search error:', error);\n    }\n  }, [orgId, sb, loadNetworkData]);\n\n  // Advanced filtering\n  const handleFilter = useCallback(async (filters: unknown) => {\n    try {\n      let query = sb\n        .from('people_network_connections')\n        .select(`\n          *,\n          person:people!person_id(first_name, last_name, email, role, department),\n          connected_person:people!connected_person_id(first_name, last_name, email, role, department)\n        `)\n        .eq('organization_id', orgId);\n\n      filters.forEach((filter: unknown) => {\n        if (filter.value) {\n          query = query.eq(filter.field, filter.value);\n        }\n      });\n\n      const { data, error } = await query.order('created_at', { ascending: false });\n      if (error) throw error;\n      setNetworkData(data || []);\n    } catch (error) {\n      console.error('Filter error:', error);\n    }\n  }, [orgId, sb]);\n\n  // Advanced sorting\n  const handleSort = useCallback(async (sorts: unknown) => {\n    try {\n      let query = sb\n        .from('people_network_connections')\n        .select(`\n          *,\n          person:people!person_id(first_name, last_name, email, role, department),\n          connected_person:people!connected_person_id(first_name, last_name, email, role, department)\n        `)\n        .eq('organization_id', orgId);\n\n      if (sorts.length > 0) {\n        const sort = sorts[0];\n        query = query.order(sort.field, { ascending: sort.direction === 'asc' });\n      }\n\n      const { data, error } = await query;\n      if (error) throw error;\n      setNetworkData(data || []);\n    } catch (error) {\n      console.error('Sort error:', error);\n    }\n  }, [orgId, sb]);\n\n  // Export functionality\n  const handleExport = useCallback((format: string, data: DataRecord[], config?: unknown) => {\n    const exportData = data.map(connection => ({\n      'Person': connection.person ? `${connection.person.first_name} ${connection.person.last_name}` : 'N/A',\n      'Connected Person': connection.connected_person ? `${connection.connected_person.first_name} ${connection.connected_person.last_name}` : 'N/A',\n      'Relationship Type': connection.relationship_type,\n      'Strength': connection.strength,\n      'Notes': connection.notes || 'N/A',\n      'Created At': connection.created_at\n    }));\n\n    if (format === 'csv') {\n      const csv = [\n        Object.keys(exportData[0]).join(','),\n        ...exportData.map(row => Object.values(row).join(','))\n      ].join('\\n');\n      \n      const blob = new Blob([csv], { type: 'text/csv' });\n      const url = URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.href = url;\n      a.download = `network-connections-${new Date().toISOString().split('T')[0]}.csv`;\n      a.click();\n    } else if (format === 'json') {\n      const json = JSON.stringify(exportData, null, 2);\n      const blob = new Blob([json], { type: 'application/json' });\n      const url = URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.href = url;\n      a.download = `network-connections-${new Date().toISOString().split('T')[0]}.json`;\n      a.click();\n    }\n  }, []);\n\n  // Import functionality\n  const handleImport = useCallback(async (data: DataRecord[]) => {\n    try {\n      const importData = data.map(connection => ({\n        ...connection,\n        organization_id: orgId,\n        created_at: new Date().toISOString(),\n        updated_at: new Date().toISOString()\n      }));\n\n      const { error } = await sb\n        .from('people_network_connections')\n        .insert(importData);\n\n      if (error) throw error;\n      \n      loadNetworkData();\n    } catch (error) {\n      console.error('Import error:', error);\n    }\n  }, [orgId, sb, loadNetworkData]);\n\n  // ATLVS DataViews configuration\n  const networkConfig: DataViewConfig = useMemo(() => ({\n    id: 'network-dataviews',\n    name: t('title'),\n    viewType: 'grid',\n    fields,\n    data: networkData,\n    defaultView: 'grid',\n    bulkActions: [\n      {\n        key: 'delete',\n        label: 'Delete Selected',\n        variant: 'destructive',\n        onClick: async (selectedIds: string[]) => {\n          console.log('Delete action:', selectedIds);\n          // Implement delete functionality\n        },\n        requiresSelection: true,\n        confirmMessage: 'Are you sure you want to delete the selected connections?'\n      },\n      {\n        key: 'export',\n        label: 'Export Selected',\n        variant: 'secondary',\n        onClick: async (selectedIds: string[]) => {\n          const selectedData = networkData.filter(n => selectedIds.includes(n.id));\n          handleExport('csv', selectedData);\n        },\n        requiresSelection: true\n      }\n    ],\n    exportConfig: {\n      formats: ['csv', 'json', 'excel'],\n      onExport: handleExport\n    },\n    importConfig: {\n      formats: ['csv', 'json'],\n      onImport: handleImport\n    },\n    onSearch: handleSearch,\n    onFilter: handleFilter,\n    onSort: handleSort\n  }), [t, fields, networkData, handleSearch, handleFilter, handleSort, handleExport, handleImport]);\n\n  return (\n    <div className=\"stack-lg\">\n      <DataViewProvider config={networkConfig}>\n        <StateManagerProvider>\n          <div className=\"stack-md\">\n            <ViewSwitcher />\n            <DataActions />\n            \n            <DataGrid />\n            \n            <KanbanBoard \n              columns={[\n                { id: 'weak', title: 'Weak' },\n                { id: 'moderate', title: 'Moderate' },\n                { id: 'strong', title: 'Strong' }\n              ]}\n              statusField=\"strength\"\n              titleField=\"person.first_name\"\n            />\n            \n            <CalendarView \n              startDateField=\"created_at\"\n              titleField=\"person.first_name\"\n            />\n            \n            <ListView \n              titleField=\"person.first_name\"\n            />\n            \n            <TimelineView \n              startDateField=\"created_at\"\n              titleField=\"person.first_name\"\n            />\n            \n            <GalleryView \n              titleField=\"person.first_name\"\n            />\n            \n            <AppDrawer\n              title=\"Network Connection Details\"\n              open={false}\n              onClose={() => {}}\n              record={null}\n              fields={fields}\n              mode=\"view\"\n              tabs={[\n                {\n                  key: 'details',\n                  label: 'Details',\n                  content: (\n                    <div className=\"p-md stack-md\">\n                      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-md\">\n                        <div>\n                          <label className=\"block text-body-sm form-label mb-xs\">Person</label>\n                          <div className=\"text-body color-foreground\">Jack Sparrow</div>\n                        </div>\n                        <div>\n                          <label className=\"block text-body-sm form-label mb-xs\">Connected Person</label>\n                          <div className=\"text-body color-foreground\">Elizabeth Swann</div>\n                        </div>\n                        <div>\n                          <label className=\"block text-body-sm form-label mb-xs\">Relationship Type</label>\n                          <div className=\"text-body color-foreground\">Colleague</div>\n                        </div>\n                        <div>\n                          <label className=\"block text-body-sm form-label mb-xs\">Strength</label>\n                          <div className=\"text-body color-foreground\">Strong</div>\n                        </div>\n                      </div>\n                    </div>\n                  )\n                },\n                {\n                  key: 'history',\n                  label: 'History',\n                  content: (\n                    <div className=\"p-md\">\n                      <p className=\"color-muted\">Connection history and interaction timeline will be shown here.</p>\n                    </div>\n                  )\n                },\n                {\n                  key: 'projects',\n                  label: 'Shared Projects',\n                  content: (\n                    <div className=\"p-md\">\n                      <p className=\"color-muted\">Projects and collaborations between these people will be shown here.</p>\n                    </div>\n                  )\n                }\n              ]}\n            />\n          </div>\n        </StateManagerProvider>\n      </DataViewProvider>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ghxstship/apps/web/app/(app)/(shell)/people/onboarding/CreateOnboardingWorkflowClient.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadData'. Either include it or remove the dependency array.","line":33,"column":6,"nodeType":"ArrayExpression","endLine":33,"endColumn":13,"suggestions":[{"desc":"Update the dependencies array to be: [loadData, orgId]","fix":{"range":[1039,1046],"text":"[loadData, orgId]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useState, useEffect } from 'react';\nimport { useRouter } from 'next/navigation';\nimport { Card, Button, UnifiedInput } from '@ghxstship/ui';\nimport { useTranslations } from 'next-intl';\nimport { createBrowserClient } from '@ghxstship/auth';\nimport type { CreateOnboardingWorkflowData } from './types';\n\ninterface CreateOnboardingWorkflowClientProps {\n  orgId: string;\n}\n\nexport default function CreateOnboardingWorkflowClient({ orgId }: CreateOnboardingWorkflowClientProps) {\n  const t = useTranslations('people.onboarding');\n  const router = useRouter();\n  const sb = createBrowserClient();\n\n  const [loading, setLoading] = useState(false);\n  const [people, setPeople] = useState<any[]>([]);\n  const [projects, setProjects] = useState<any[]>([]);\n  \n  const [formData, setFormData] = useState<CreateOnboardingWorkflowData>({\n    person_id: '',\n    project_id: '',\n    start_date: new Date().toISOString().split('T')[0],\n    target_completion_date: '',\n    notes: ''\n  });\n\n  useEffect(() => {\n    loadData();\n  }, [orgId]);\n\n  const loadData = async () => {\n    try {\n      // Load people\n      const { data: peopleData } = await sb\n        .from('people')\n        .select('id, first_name, last_name, department')\n        .eq('organization_id', orgId)\n        .eq('status', 'active')\n        .order('first_name');\n\n      setPeople(peopleData || []);\n\n      // Load projects\n      const { data: projectsData } = await sb\n        .from('projects')\n        .select('id, name, status')\n        .eq('organization_id', orgId)\n        .eq('status', 'active')\n        .order('name');\n\n      setProjects(projectsData || []);\n    } catch (error) {\n      console.error('Error loading data:', error);\n    }\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!formData.person_id) return;\n\n    setLoading(true);\n    try {\n      const { error } = await sb\n        .from('onboarding_workflows')\n        .insert({\n          ...formData,\n          organization_id: orgId,\n          status: 'pending',\n          progress_percentage: 0,\n          created_at: new Date().toISOString(),\n          updated_at: new Date().toISOString()\n        });\n\n      if (error) throw error;\n\n      router.push('/people/onboarding');\n    } catch (error) {\n      console.error('Error creating onboarding workflow:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"stack-lg\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-heading-3 font-anton uppercase\">Create Onboarding Workflow</h1>\n          <p className=\"text-body-sm color-muted\">Start onboarding process for a new team member</p>\n        </div>\n        <Button variant=\"outline\" onClick={() => router.back()}>\n          Cancel\n        </Button>\n      </div>\n\n      <Card>\n        <div className=\"p-md\">\n          <form onSubmit={handleSubmit} className=\"stack-md\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-md\">\n              <div>\n                <label className=\"block text-body-sm form-label mb-xs\">Person *</label>\n                <select\n                  value={formData.person_id}\n                  onChange={(e) => setFormData(prev => ({ ...prev, person_id: e.target.value }))}\n                  className=\"w-full px-md py-sm border border-border rounded-md focus:outline-none focus:ring-2 focus:ring-primary bg-background\"\n                  required\n                >\n                  <option value=\"\">Select person...</option>\n                  {people.map(person => (\n                    <option key={person.id} value={person.id}>\n                      {person.first_name} {person.last_name} - {person.department}\n                    </option>\n                  ))}\n                </select>\n              </div>\n\n              <div>\n                <label className=\"block text-body-sm form-label mb-xs\">Project (Optional)</label>\n                <select\n                  value={formData.project_id}\n                  onChange={(e) => setFormData(prev => ({ ...prev, project_id: e.target.value }))}\n                  className=\"w-full px-md py-sm border border-border rounded-md focus:outline-none focus:ring-2 focus:ring-primary bg-background\"\n                >\n                  <option value=\"\">No specific project</option>\n                  {projects.map(project => (\n                    <option key={project.id} value={project.id}>\n                      {project.name}\n                    </option>\n                  ))}\n                </select>\n              </div>\n\n              <div>\n                <label className=\"block text-body-sm form-label mb-xs\">Start Date *</label>\n                <UnifiedInput\n                  type=\"date\"\n                  value={formData.start_date}\n                  onChange={(e) => setFormData(prev => ({ ...prev, start_date: e.target.value }))}\n                  required\n                />\n              </div>\n\n              <div>\n                <label className=\"block text-body-sm form-label mb-xs\">Target Completion Date</label>\n                <UnifiedInput\n                  type=\"date\"\n                  value={formData.target_completion_date}\n                  onChange={(e) => setFormData(prev => ({ ...prev, target_completion_date: e.target.value }))}\n                />\n              </div>\n            </div>\n\n            <div>\n              <label className=\"block text-body-sm form-label mb-xs\">Notes</label>\n              <textarea\n                value={formData.notes}\n                onChange={(e) => setFormData(prev => ({ ...prev, notes: e.target.value }))}\n                placeholder=\"Additional notes about this onboarding process...\"\n                className=\"w-full px-md py-sm border border-border rounded-md focus:outline-none focus:ring-2 focus:ring-primary bg-background min-h-[100px]\"\n              />\n            </div>\n\n            <div className=\"flex gap-sm\">\n              <Button type=\"submit\" loading={loading}>\n                Create Onboarding Workflow\n              </Button>\n              <Button type=\"button\" variant=\"outline\" onClick={() => router.back()}>\n                Cancel\n              </Button>\n            </div>\n          </form>\n        </div>\n      </Card>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ghxstship/apps/web/app/(app)/(shell)/people/onboarding/OnboardingClient.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'loadOnboardingData' and 'sb'. Either include them or remove the dependency array.","line":71,"column":6,"nodeType":"ArrayExpression","endLine":71,"endColumn":13,"suggestions":[{"desc":"Update the dependencies array to be: [loadOnboardingData, orgId, sb]","fix":{"range":[2228,2235],"text":"[loadOnboardingData, orgId, sb]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\nimport { User, FileText, Settings, Award, Calendar, TrendingUp, Activity, Clock, Plus, Search, Play, Trash2 } from \"lucide-react\";\nimport { useEffect, useState, useCallback, useMemo } from 'react';\nimport { type DataRecord } from '@ghxstship/ui';\nimport { DataViewProvider, StateManagerProvider, ViewSwitcher, DataActions, DataGrid, KanbanBoard, CalendarView, ListView, TimelineView, GalleryView } from '@ghxstship/ui/components/DataViews';\nimport { type FieldConfig, type DataViewConfig } from '@ghxstship/ui/components/DataViews/types';\nimport { useTranslations } from 'next-intl';\nimport { createBrowserClient } from '@ghxstship/auth';\nimport AppDrawer from '@/app/_components/shared/AppDrawer';\n\ninterface OnboardingWorkflow extends DataRecord {\n  id: string;\n  person_id: string;\n  project_id?: string;\n  status: 'pending' | 'in_progress' | 'completed' | 'on_hold';\n  start_date: string;\n  target_completion_date?: string;\n  actual_completion_date?: string;\n  progress_percentage: number;\n  notes?: string;\n  organization_id: string;\n  created_at: string;\n  updated_at: string;\n  person?: {\n    first_name: string;\n    last_name: string;\n    email?: string;\n    department?: string;\n  };\n  project?: {\n    name: string;\n    status: string;\n  };\n  tasks_completed?: number;\n  tasks_total?: number;\n}\n\ninterface OnboardingClientProps {\n  orgId: string;\n}\n\nexport default function OnboardingClient({ orgId }: OnboardingClientProps) {\n  const t = useTranslations('people.onboarding');\n  const sb = createBrowserClient();\n  const [loading, setLoading] = useState(false);\n  const [onboardingData, setOnboardingData] = useState<OnboardingWorkflow[]>([]);\n\n  useEffect(() => {\n    loadOnboardingData();\n    \n    // Set up real-time subscription\n    const subscription = sb\n      .channel('onboarding-changes')\n      .on('postgres_changes', \n        { \n          event: '*', \n          schema: 'public', \n          table: 'onboarding_workflows',\n          filter: `organization_id=eq.${orgId}`\n        }, \n        (payload) => {\n          console.log('Real-time update:', payload);\n          loadOnboardingData();\n        }\n      )\n      .subscribe();\n\n    return () => {\n      subscription.unsubscribe();\n    };\n  }, [orgId]);\n\n  const loadOnboardingData = useCallback(async () => {\n    setLoading(true);\n    try {\n      const { data, error } = await sb\n        .from('onboarding_workflows')\n        .select(`\n          *,\n          person:people(first_name, last_name, email, department),\n          project:projects(name, status),\n          tasks_completed:onboarding_tasks!workflow_id(count),\n          tasks_total:onboarding_tasks!workflow_id(count)\n        `)\n        .eq('organization_id', orgId)\n        .order('created_at', { ascending: false });\n      \n      if (error) {\n        console.error('Supabase error:', error);\n        throw error;\n      }\n      \n      setOnboardingData(data || []);\n    } catch (error) {\n      console.error('Error loading onboarding data:', error);\n    } finally {\n      setLoading(false);\n    }\n  }, [orgId, sb]);\n\n  // ATLVS DataViews field configuration - memoized for performance\n  const fields: FieldConfig[] = useMemo(() => [\n    {\n      key: 'person.first_name',\n      label: t('person'),\n      type: 'text',\n      sortable: true,\n      filterable: true\n    },\n    {\n      key: 'project.name',\n      label: t('project'),\n      type: 'text',\n      sortable: true,\n      filterable: true\n    },\n    {\n      key: 'status',\n      label: t('status'),\n      type: 'select',\n      options: [\n        { value: 'pending', label: t('pending') },\n        { value: 'in_progress', label: t('inProgress') },\n        { value: 'completed', label: t('completed') },\n        { value: 'on_hold', label: t('onHold') }\n      ],\n      sortable: true,\n      filterable: true\n    },\n    {\n      key: 'progress_percentage',\n      label: t('progress'),\n      type: 'number',\n      sortable: true,\n      filterable: true\n    },\n    {\n      key: 'start_date',\n      label: t('startDate'),\n      type: 'date',\n      sortable: true,\n      filterable: true\n    },\n    {\n      key: 'target_completion_date',\n      label: t('targetDate'),\n      type: 'date',\n      sortable: true,\n      filterable: true\n    },\n    {\n      key: 'actual_completion_date',\n      label: t('completionDate'),\n      type: 'date',\n      sortable: true,\n      filterable: true\n    },\n    {\n      key: 'tasks_completed',\n      label: t('tasksCompleted'),\n      type: 'number',\n      sortable: true,\n      filterable: false\n    },\n    {\n      key: 'created_at',\n      label: t('createdAt'),\n      type: 'date',\n      sortable: true,\n      filterable: true\n    }\n  ], [t]);\n\n  // Advanced search functionality\n  const handleSearch = useCallback(async (query: string) => {\n    if (!query.trim()) {\n      loadOnboardingData();\n      return;\n    }\n\n    try {\n      const { data, error } = await sb\n        .from('onboarding_workflows')\n        .select(`\n          *,\n          person:people(first_name, last_name, email, department),\n          project:projects(name, status),\n          tasks_completed:onboarding_tasks!workflow_id(count),\n          tasks_total:onboarding_tasks!workflow_id(count)\n        `)\n        .eq('organization_id', orgId)\n        .or(`notes.ilike.%${query}%`)\n        .order('created_at', { ascending: false });\n      \n      if (error) throw error;\n      setOnboardingData(data || []);\n    } catch (error) {\n      console.error('Search error:', error);\n    }\n  }, [orgId, sb, loadOnboardingData]);\n\n  // Advanced filtering\n  const handleFilter = useCallback(async (filters: unknown) => {\n    try {\n      let query = sb\n        .from('onboarding_workflows')\n        .select(`\n          *,\n          person:people(first_name, last_name, email, department),\n          project:projects(name, status),\n          tasks_completed:onboarding_tasks!workflow_id(count),\n          tasks_total:onboarding_tasks!workflow_id(count)\n        `)\n        .eq('organization_id', orgId);\n\n      filters.forEach((filter: unknown) => {\n        if (filter.value) {\n          query = query.eq(filter.field, filter.value);\n        }\n      });\n\n      const { data, error } = await query.order('created_at', { ascending: false });\n      if (error) throw error;\n      setOnboardingData(data || []);\n    } catch (error) {\n      console.error('Filter error:', error);\n    }\n  }, [orgId, sb]);\n\n  // Advanced sorting\n  const handleSort = useCallback(async (sorts: unknown) => {\n    try {\n      let query = sb\n        .from('onboarding_workflows')\n        .select(`\n          *,\n          person:people(first_name, last_name, email, department),\n          project:projects(name, status),\n          tasks_completed:onboarding_tasks!workflow_id(count),\n          tasks_total:onboarding_tasks!workflow_id(count)\n        `)\n        .eq('organization_id', orgId);\n\n      if (sorts.length > 0) {\n        const sort = sorts[0];\n        query = query.order(sort.field, { ascending: sort.direction === 'asc' });\n      }\n\n      const { data, error } = await query;\n      if (error) throw error;\n      setOnboardingData(data || []);\n    } catch (error) {\n      console.error('Sort error:', error);\n    }\n  }, [orgId, sb]);\n\n  // Export functionality\n  const handleExport = useCallback((format: string, data: DataRecord[], config?: unknown) => {\n    const exportData = data.map(workflow => ({\n      'Person': workflow.person ? `${workflow.person.first_name} ${workflow.person.last_name}` : 'N/A',\n      'Project': workflow.project?.name || 'N/A',\n      'Status': workflow.status,\n      'Progress': `${workflow.progress_percentage}%`,\n      'Start Date': workflow.start_date,\n      'Target Date': workflow.target_completion_date || 'N/A',\n      'Completion Date': workflow.actual_completion_date || 'N/A',\n      'Tasks Completed': workflow.tasks_completed || 0,\n      'Tasks Total': workflow.tasks_total || 0,\n      'Created At': workflow.created_at\n    }));\n\n    if (format === 'csv') {\n      const csv = [\n        Object.keys(exportData[0]).join(','),\n        ...exportData.map(row => Object.values(row).join(','))\n      ].join('\\n');\n      \n      const blob = new Blob([csv], { type: 'text/csv' });\n      const url = URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.href = url;\n      a.download = `onboarding-workflows-${new Date().toISOString().split('T')[0]}.csv`;\n      a.click();\n    } else if (format === 'json') {\n      const json = JSON.stringify(exportData, null, 2);\n      const blob = new Blob([json], { type: 'application/json' });\n      const url = URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.href = url;\n      a.download = `onboarding-workflows-${new Date().toISOString().split('T')[0]}.json`;\n      a.click();\n    }\n  }, []);\n\n  // Import functionality\n  const handleImport = useCallback(async (data: DataRecord[]) => {\n    try {\n      const importData = data.map(workflow => ({\n        ...workflow,\n        organization_id: orgId,\n        created_at: new Date().toISOString(),\n        updated_at: new Date().toISOString()\n      }));\n\n      const { error } = await sb\n        .from('onboarding_workflows')\n        .insert(importData);\n\n      if (error) throw error;\n      \n      loadOnboardingData();\n    } catch (error) {\n      console.error('Import error:', error);\n    }\n  }, [orgId, sb, loadOnboardingData]);\n\n  // ATLVS DataViews configuration\n  const onboardingConfig: DataViewConfig = useMemo(() => ({\n    id: 'onboarding-dataviews',\n    name: t('title'),\n    viewType: 'grid',\n    fields,\n    data: onboardingData,\n    defaultView: 'grid',\n    bulkActions: [\n      {\n        key: 'delete',\n        label: 'Delete Selected',\n        variant: 'destructive',\n        onClick: async (selectedIds: string[]) => {\n          console.log('Delete action:', selectedIds);\n          // Implement delete functionality\n        },\n        requiresSelection: true,\n        confirmMessage: 'Are you sure you want to delete the selected onboarding workflows?'\n      },\n      {\n        key: 'export',\n        label: 'Export Selected',\n        variant: 'secondary',\n        onClick: async (selectedIds: string[]) => {\n          const selectedData = onboardingData.filter(o => selectedIds.includes(o.id));\n          handleExport('csv', selectedData);\n        },\n        requiresSelection: true\n      },\n      {\n        key: 'complete',\n        label: 'Mark as Completed',\n        variant: 'secondary',\n        onClick: async (selectedIds: string[]) => {\n          console.log('Complete action:', selectedIds);\n          // Implement completion functionality\n        },\n        requiresSelection: true\n      }\n    ],\n    exportConfig: {\n      formats: ['csv', 'json', 'excel'],\n      onExport: handleExport\n    },\n    importConfig: {\n      formats: ['csv', 'json'],\n      onImport: handleImport\n    },\n    onSearch: handleSearch,\n    onFilter: handleFilter,\n    onSort: handleSort\n  }), [t, fields, onboardingData, handleSearch, handleFilter, handleSort, handleExport, handleImport]);\n\n  return (\n    <div className=\"stack-lg\">\n      <DataViewProvider config={onboardingConfig}>\n        <StateManagerProvider>\n          <div className=\"stack-md\">\n            <ViewSwitcher />\n            <DataActions />\n            \n            <DataGrid />\n            \n            <KanbanBoard \n              columns={[\n                { id: 'pending', title: 'Pending' },\n                { id: 'in_progress', title: 'In Progress' },\n                { id: 'completed', title: 'Completed' },\n                { id: 'on_hold', title: 'On Hold' }\n              ]}\n              statusField=\"status\"\n              titleField=\"person.first_name\"\n            />\n            \n            <CalendarView \n              startDateField=\"start_date\"\n              endDateField=\"target_completion_date\"\n              titleField=\"person.first_name\"\n            />\n            \n            <ListView \n              titleField=\"person.first_name\"\n            />\n            \n            <TimelineView \n              startDateField=\"start_date\"\n              titleField=\"person.first_name\"\n            />\n            \n            <GalleryView \n              titleField=\"person.first_name\"\n            />\n            \n            <AppDrawer\n              title=\"Onboarding Workflow Details\"\n              open={false}\n              onClose={() => {}}\n              record={null}\n              fields={fields}\n              mode=\"view\"\n              tabs={[\n                {\n                  key: 'details',\n                  label: 'Details',\n                  content: (\n                    <div className=\"p-md stack-md\">\n                      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-md\">\n                        <div>\n                          <label className=\"block text-body-sm form-label mb-xs\">Person</label>\n                          <div className=\"text-body color-foreground\">Jack Sparrow</div>\n                        </div>\n                        <div>\n                          <label className=\"block text-body-sm form-label mb-xs\">Project</label>\n                          <div className=\"text-body color-foreground\">Blackwater Reverb</div>\n                        </div>\n                        <div>\n                          <label className=\"block text-body-sm form-label mb-xs\">Status</label>\n                          <div className=\"text-body color-foreground\">In Progress</div>\n                        </div>\n                        <div>\n                          <label className=\"block text-body-sm form-label mb-xs\">Progress</label>\n                          <div className=\"text-body color-foreground\">75%</div>\n                        </div>\n                      </div>\n                    </div>\n                  )\n                },\n                {\n                  key: 'tasks',\n                  label: 'Tasks',\n                  content: (\n                    <div className=\"p-md\">\n                      <p className=\"color-muted\">Onboarding tasks and checklist will be shown here.</p>\n                    </div>\n                  )\n                },\n                {\n                  key: 'timeline',\n                  label: 'Timeline',\n                  content: (\n                    <div className=\"p-md\">\n                      <p className=\"color-muted\">Onboarding timeline and milestones will be shown here.</p>\n                    </div>\n                  )\n                }\n              ]}\n            />\n          </div>\n        </StateManagerProvider>\n      </DataViewProvider>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ghxstship/apps/web/app/(app)/(shell)/people/roles/RolesClient.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'loadRolesData' and 'sb'. Either include them or remove the dependency array.","line":60,"column":6,"nodeType":"ArrayExpression","endLine":60,"endColumn":13,"suggestions":[{"desc":"Update the dependencies array to be: [loadRolesData, orgId, sb]","fix":{"range":[1939,1946],"text":"[loadRolesData, orgId, sb]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\nimport { User, FileText, Settings, Award, Calendar, TrendingUp, Activity, Clock, Plus, Search, Play, Trash2 } from \"lucide-react\";\nimport { useEffect, useState, useCallback, useMemo } from 'react';\nimport { type DataRecord } from '@ghxstship/ui';\nimport { DataViewProvider, StateManagerProvider, ViewSwitcher, DataActions, DataGrid, KanbanBoard, CalendarView, ListView, TimelineView, GalleryView } from '@ghxstship/ui/components/DataViews';\nimport { type FieldConfig, type DataViewConfig } from '@ghxstship/ui/components/DataViews/types';\nimport { useTranslations } from 'next-intl';\nimport { createBrowserClient } from '@ghxstship/auth';\nimport AppDrawer from '@/app/_components/shared/AppDrawer';\n\ninterface Role extends DataRecord {\n  id: string;\n  name: string;\n  description?: string;\n  permissions?: string[];\n  level: 'entry' | 'mid' | 'senior' | 'lead' | 'executive';\n  department?: string;\n  salary_range_min?: number;\n  salary_range_max?: number;\n  requirements?: string[];\n  organization_id: string;\n  created_at: string;\n  updated_at: string;\n  people_count?: number;\n}\n\ninterface RolesClientProps {\n  orgId: string;\n}\n\nexport default function RolesClient({ orgId }: RolesClientProps) {\n  const t = useTranslations('people.roles');\n  const sb = createBrowserClient();\n  const [loading, setLoading] = useState(false);\n  const [rolesData, setRolesData] = useState<Role[]>([]);\n\n  useEffect(() => {\n    loadRolesData();\n    \n    // Set up real-time subscription\n    const subscription = sb\n      .channel('roles-changes')\n      .on('postgres_changes', \n        { \n          event: '*', \n          schema: 'public', \n          table: 'people_roles',\n          filter: `organization_id=eq.${orgId}`\n        }, \n        (payload) => {\n          console.log('Real-time update:', payload);\n          loadRolesData();\n        }\n      )\n      .subscribe();\n\n    return () => {\n      subscription.unsubscribe();\n    };\n  }, [orgId]);\n\n  const loadRolesData = useCallback(async () => {\n    setLoading(true);\n    try {\n      const { data, error } = await sb\n        .from('people_roles')\n        .select(`\n          *,\n          people_count:people(count)\n        `)\n        .eq('organization_id', orgId)\n        .order('name', { ascending: true });\n      \n      if (error) {\n        console.error('Supabase error:', error);\n        throw error;\n      }\n      \n      setRolesData(data || []);\n    } catch (error) {\n      console.error('Error loading roles data:', error);\n    } finally {\n      setLoading(false);\n    }\n  }, [orgId, sb]);\n\n  // ATLVS DataViews field configuration - memoized for performance\n  const fields: FieldConfig[] = useMemo(() => [\n    {\n      key: 'name',\n      label: t('name'),\n      type: 'text',\n      required: true,\n      sortable: true,\n      filterable: true\n    },\n    {\n      key: 'description',\n      label: t('description'),\n      type: 'textarea',\n      sortable: false,\n      filterable: true\n    },\n    {\n      key: 'level',\n      label: t('level'),\n      type: 'select',\n      options: [\n        { value: 'entry', label: t('entry') },\n        { value: 'mid', label: t('mid') },\n        { value: 'senior', label: t('senior') },\n        { value: 'lead', label: t('lead') },\n        { value: 'executive', label: t('executive') }\n      ],\n      sortable: true,\n      filterable: true\n    },\n    {\n      key: 'department',\n      label: t('department'),\n      type: 'text',\n      sortable: true,\n      filterable: true\n    },\n    {\n      key: 'salary_range_min',\n      label: t('salaryMin'),\n      type: 'currency',\n      sortable: true,\n      filterable: true\n    },\n    {\n      key: 'salary_range_max',\n      label: t('salaryMax'),\n      type: 'currency',\n      sortable: true,\n      filterable: true\n    },\n    {\n      key: 'people_count',\n      label: t('peopleCount'),\n      type: 'number',\n      sortable: true,\n      filterable: false\n    },\n    {\n      key: 'created_at',\n      label: t('createdAt'),\n      type: 'date',\n      sortable: true,\n      filterable: true\n    }\n  ], [t]);\n\n  // Advanced search functionality\n  const handleSearch = useCallback(async (query: string) => {\n    if (!query.trim()) {\n      loadRolesData();\n      return;\n    }\n\n    try {\n      const { data, error } = await sb\n        .from('people_roles')\n        .select(`\n          *,\n          people_count:people(count)\n        `)\n        .eq('organization_id', orgId)\n        .or(`name.ilike.%${query}%,description.ilike.%${query}%,department.ilike.%${query}%`)\n        .order('name', { ascending: true });\n      \n      if (error) throw error;\n      setRolesData(data || []);\n    } catch (error) {\n      console.error('Search error:', error);\n    }\n  }, [orgId, sb, loadRolesData]);\n\n  // Advanced filtering\n  const handleFilter = useCallback(async (filters: unknown) => {\n    try {\n      let query = sb\n        .from('people_roles')\n        .select(`\n          *,\n          people_count:people(count)\n        `)\n        .eq('organization_id', orgId);\n\n      filters.forEach((filter: unknown) => {\n        if (filter.value) {\n          query = query.eq(filter.field, filter.value);\n        }\n      });\n\n      const { data, error } = await query.order('name', { ascending: true });\n      if (error) throw error;\n      setRolesData(data || []);\n    } catch (error) {\n      console.error('Filter error:', error);\n    }\n  }, [orgId, sb]);\n\n  // Advanced sorting\n  const handleSort = useCallback(async (sorts: unknown) => {\n    try {\n      let query = sb\n        .from('people_roles')\n        .select(`\n          *,\n          people_count:people(count)\n        `)\n        .eq('organization_id', orgId);\n\n      if (sorts.length > 0) {\n        const sort = sorts[0];\n        query = query.order(sort.field, { ascending: sort.direction === 'asc' });\n      }\n\n      const { data, error } = await query;\n      if (error) throw error;\n      setRolesData(data || []);\n    } catch (error) {\n      console.error('Sort error:', error);\n    }\n  }, [orgId, sb]);\n\n  // Export functionality\n  const handleExport = useCallback((format: string, data: DataRecord[], config?: unknown) => {\n    const exportData = data.map(role => ({\n      'Name': role.name,\n      'Description': role.description || 'N/A',\n      'Level': role.level,\n      'Department': role.department || 'N/A',\n      'Salary Min': role.salary_range_min || 'N/A',\n      'Salary Max': role.salary_range_max || 'N/A',\n      'People Count': role.people_count || 0,\n      'Created At': role.created_at\n    }));\n\n    if (format === 'csv') {\n      const csv = [\n        Object.keys(exportData[0]).join(','),\n        ...exportData.map(row => Object.values(row).join(','))\n      ].join('\\n');\n      \n      const blob = new Blob([csv], { type: 'text/csv' });\n      const url = URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.href = url;\n      a.download = `roles-${new Date().toISOString().split('T')[0]}.csv`;\n      a.click();\n    } else if (format === 'json') {\n      const json = JSON.stringify(exportData, null, 2);\n      const blob = new Blob([json], { type: 'application/json' });\n      const url = URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.href = url;\n      a.download = `roles-${new Date().toISOString().split('T')[0]}.json`;\n      a.click();\n    }\n  }, []);\n\n  // Import functionality\n  const handleImport = useCallback(async (data: DataRecord[]) => {\n    try {\n      const importData = data.map(role => ({\n        ...role,\n        organization_id: orgId,\n        created_at: new Date().toISOString(),\n        updated_at: new Date().toISOString()\n      }));\n\n      const { error } = await sb\n        .from('people_roles')\n        .insert(importData);\n\n      if (error) throw error;\n      \n      loadRolesData();\n    } catch (error) {\n      console.error('Import error:', error);\n    }\n  }, [orgId, sb, loadRolesData]);\n\n  // ATLVS DataViews configuration\n  const rolesConfig: DataViewConfig = useMemo(() => ({\n    id: 'roles-dataviews',\n    name: t('title'),\n    viewType: 'grid',\n    fields,\n    data: rolesData,\n    defaultView: 'grid',\n    bulkActions: [\n      {\n        key: 'delete',\n        label: 'Delete Selected',\n        variant: 'destructive',\n        onClick: async (selectedIds: string[]) => {\n          console.log('Delete action:', selectedIds);\n          // Implement delete functionality\n        },\n        requiresSelection: true,\n        confirmMessage: 'Are you sure you want to delete the selected roles?'\n      },\n      {\n        key: 'export',\n        label: 'Export Selected',\n        variant: 'secondary',\n        onClick: async (selectedIds: string[]) => {\n          const selectedData = rolesData.filter(r => selectedIds.includes(r.id));\n          handleExport('csv', selectedData);\n        },\n        requiresSelection: true\n      }\n    ],\n    exportConfig: {\n      formats: ['csv', 'json', 'excel'],\n      onExport: handleExport\n    },\n    importConfig: {\n      formats: ['csv', 'json'],\n      onImport: handleImport\n    },\n    onSearch: handleSearch,\n    onFilter: handleFilter,\n    onSort: handleSort\n  }), [t, fields, rolesData, handleSearch, handleFilter, handleSort, handleExport, handleImport]);\n\n  return (\n    <div className=\"stack-lg\">\n      <DataViewProvider config={rolesConfig}>\n        <StateManagerProvider>\n          <div className=\"stack-md\">\n            <ViewSwitcher />\n            <DataActions />\n            \n            <DataGrid />\n            \n            <KanbanBoard \n              columns={[\n                { id: 'entry', title: 'Entry Level' },\n                { id: 'mid', title: 'Mid Level' },\n                { id: 'senior', title: 'Senior Level' },\n                { id: 'lead', title: 'Lead Level' },\n                { id: 'executive', title: 'Executive' }\n              ]}\n              statusField=\"level\"\n              titleField=\"name\"\n            />\n            \n            <CalendarView \n              startDateField=\"created_at\"\n              titleField=\"name\"\n            />\n            \n            <ListView \n              titleField=\"name\"\n            />\n            \n            <TimelineView \n              startDateField=\"created_at\"\n              titleField=\"name\"\n            />\n            \n            <GalleryView \n              titleField=\"name\"\n            />\n            \n            <AppDrawer\n              title=\"Role Details\"\n              open={false}\n              onClose={() => {}}\n              record={null}\n              fields={fields}\n              mode=\"view\"\n              tabs={[\n                {\n                  key: 'details',\n                  label: 'Details',\n                  content: (\n                    <div className=\"p-md stack-md\">\n                      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-md\">\n                        <div>\n                          <label className=\"block text-body-sm form-label mb-xs\">Name</label>\n                          <div className=\"text-body color-foreground\">Senior Camera Operator</div>\n                        </div>\n                        <div>\n                          <label className=\"block text-body-sm form-label mb-xs\">Level</label>\n                          <div className=\"text-body color-foreground\">Senior</div>\n                        </div>\n                        <div>\n                          <label className=\"block text-body-sm form-label mb-xs\">Department</label>\n                          <div className=\"text-body color-foreground\">Production</div>\n                        </div>\n                        <div>\n                          <label className=\"block text-body-sm form-label mb-xs\">People Count</label>\n                          <div className=\"text-body color-foreground\">5</div>\n                        </div>\n                      </div>\n                    </div>\n                  )\n                },\n                {\n                  key: 'requirements',\n                  label: 'Requirements',\n                  content: (\n                    <div className=\"p-md\">\n                      <p className=\"color-muted\">Role requirements and qualifications will be shown here.</p>\n                    </div>\n                  )\n                },\n                {\n                  key: 'people',\n                  label: 'People',\n                  content: (\n                    <div className=\"p-md\">\n                      <p className=\"color-muted\">People assigned to this role will be shown here.</p>\n                    </div>\n                  )\n                }\n              ]}\n            />\n          </div>\n        </StateManagerProvider>\n      </DataViewProvider>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ghxstship/apps/web/app/(app)/(shell)/people/shortlists/ShortlistsClient.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'loadShortlistsData' and 'sb'. Either include them or remove the dependency array.","line":62,"column":6,"nodeType":"ArrayExpression","endLine":62,"endColumn":13,"suggestions":[{"desc":"Update the dependencies array to be: [loadShortlistsData, orgId, sb]","fix":{"range":[2001,2008],"text":"[loadShortlistsData, orgId, sb]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\nimport { User, FileText, Settings, Award, Calendar, TrendingUp, Activity, Clock, Plus, Search, Play, Trash2 } from \"lucide-react\";\nimport { useEffect, useState, useCallback, useMemo } from 'react';\nimport { type DataRecord } from '@ghxstship/ui';\nimport { DataViewProvider, StateManagerProvider, ViewSwitcher, DataActions, DataGrid, KanbanBoard, CalendarView, ListView, TimelineView, GalleryView } from '@ghxstship/ui/components/DataViews';\nimport { type FieldConfig, type DataViewConfig } from '@ghxstship/ui/components/DataViews/types';\nimport { useTranslations } from 'next-intl';\nimport { createBrowserClient } from '@ghxstship/auth';\nimport AppDrawer from '@/app/_components/shared/AppDrawer';\n\ninterface Shortlist extends DataRecord {\n  id: string;\n  name: string;\n  description?: string;\n  purpose: 'hiring' | 'project' | 'event' | 'general';\n  status: 'active' | 'archived';\n  created_by: string;\n  organization_id: string;\n  created_at: string;\n  updated_at: string;\n  member_count?: number;\n  creator?: {\n    first_name: string;\n    last_name: string;\n    email?: string;\n  };\n}\n\ninterface ShortlistsClientProps {\n  orgId: string;\n}\n\nexport default function ShortlistsClient({ orgId }: ShortlistsClientProps) {\n  const t = useTranslations('people.shortlists');\n  const sb = createBrowserClient();\n  const [loading, setLoading] = useState(false);\n  const [shortlistsData, setShortlistsData] = useState<Shortlist[]>([]);\n\n  useEffect(() => {\n    loadShortlistsData();\n    \n    // Set up real-time subscription\n    const subscription = sb\n      .channel('shortlists-changes')\n      .on('postgres_changes', \n        { \n          event: '*', \n          schema: 'public', \n          table: 'people_shortlists',\n          filter: `organization_id=eq.${orgId}`\n        }, \n        (payload) => {\n          console.log('Real-time update:', payload);\n          loadShortlistsData();\n        }\n      )\n      .subscribe();\n\n    return () => {\n      subscription.unsubscribe();\n    };\n  }, [orgId]);\n\n  const loadShortlistsData = useCallback(async () => {\n    setLoading(true);\n    try {\n      const { data, error } = await sb\n        .from('people_shortlists')\n        .select(`\n          *,\n          creator:people!created_by(first_name, last_name, email),\n          member_count:shortlist_members(count)\n        `)\n        .eq('organization_id', orgId)\n        .order('created_at', { ascending: false });\n      \n      if (error) {\n        console.error('Supabase error:', error);\n        throw error;\n      }\n      \n      setShortlistsData(data || []);\n    } catch (error) {\n      console.error('Error loading shortlists data:', error);\n    } finally {\n      setLoading(false);\n    }\n  }, [orgId, sb]);\n\n  // ATLVS DataViews field configuration - memoized for performance\n  const fields: FieldConfig[] = useMemo(() => [\n    {\n      key: 'name',\n      label: t('name'),\n      type: 'text',\n      required: true,\n      sortable: true,\n      filterable: true\n    },\n    {\n      key: 'description',\n      label: t('description'),\n      type: 'textarea',\n      sortable: false,\n      filterable: true\n    },\n    {\n      key: 'purpose',\n      label: t('purpose'),\n      type: 'select',\n      options: [\n        { value: 'hiring', label: t('hiring') },\n        { value: 'project', label: t('project') },\n        { value: 'event', label: t('event') },\n        { value: 'general', label: t('general') }\n      ],\n      sortable: true,\n      filterable: true\n    },\n    {\n      key: 'status',\n      label: t('status'),\n      type: 'select',\n      options: [\n        { value: 'active', label: t('active') },\n        { value: 'archived', label: t('archived') }\n      ],\n      sortable: true,\n      filterable: true,\n      defaultValue: 'active'\n    },\n    {\n      key: 'creator.first_name',\n      label: t('creator'),\n      type: 'text',\n      sortable: true,\n      filterable: true\n    },\n    {\n      key: 'member_count',\n      label: t('memberCount'),\n      type: 'number',\n      sortable: true,\n      filterable: false\n    },\n    {\n      key: 'created_at',\n      label: t('createdAt'),\n      type: 'date',\n      sortable: true,\n      filterable: true\n    }\n  ], [t]);\n\n  // Advanced search functionality\n  const handleSearch = useCallback(async (query: string) => {\n    if (!query.trim()) {\n      loadShortlistsData();\n      return;\n    }\n\n    try {\n      const { data, error } = await sb\n        .from('people_shortlists')\n        .select(`\n          *,\n          creator:people!created_by(first_name, last_name, email),\n          member_count:shortlist_members(count)\n        `)\n        .eq('organization_id', orgId)\n        .or(`name.ilike.%${query}%,description.ilike.%${query}%`)\n        .order('created_at', { ascending: false });\n      \n      if (error) throw error;\n      setShortlistsData(data || []);\n    } catch (error) {\n      console.error('Search error:', error);\n    }\n  }, [orgId, sb, loadShortlistsData]);\n\n  // Advanced filtering\n  const handleFilter = useCallback(async (filters: unknown) => {\n    try {\n      let query = sb\n        .from('people_shortlists')\n        .select(`\n          *,\n          creator:people!created_by(first_name, last_name, email),\n          member_count:shortlist_members(count)\n        `)\n        .eq('organization_id', orgId);\n\n      filters.forEach((filter: unknown) => {\n        if (filter.value) {\n          query = query.eq(filter.field, filter.value);\n        }\n      });\n\n      const { data, error } = await query.order('created_at', { ascending: false });\n      if (error) throw error;\n      setShortlistsData(data || []);\n    } catch (error) {\n      console.error('Filter error:', error);\n    }\n  }, [orgId, sb]);\n\n  // Advanced sorting\n  const handleSort = useCallback(async (sorts: unknown) => {\n    try {\n      let query = sb\n        .from('people_shortlists')\n        .select(`\n          *,\n          creator:people!created_by(first_name, last_name, email),\n          member_count:shortlist_members(count)\n        `)\n        .eq('organization_id', orgId);\n\n      if (sorts.length > 0) {\n        const sort = sorts[0];\n        query = query.order(sort.field, { ascending: sort.direction === 'asc' });\n      }\n\n      const { data, error } = await query;\n      if (error) throw error;\n      setShortlistsData(data || []);\n    } catch (error) {\n      console.error('Sort error:', error);\n    }\n  }, [orgId, sb]);\n\n  // Export functionality\n  const handleExport = useCallback((format: string, data: DataRecord[], config?: unknown) => {\n    const exportData = data.map(shortlist => ({\n      'Name': shortlist.name,\n      'Description': shortlist.description || 'N/A',\n      'Purpose': shortlist.purpose,\n      'Status': shortlist.status,\n      'Creator': shortlist.creator ? `${shortlist.creator.first_name} ${shortlist.creator.last_name}` : 'N/A',\n      'Member Count': shortlist.member_count || 0,\n      'Created At': shortlist.created_at\n    }));\n\n    if (format === 'csv') {\n      const csv = [\n        Object.keys(exportData[0]).join(','),\n        ...exportData.map(row => Object.values(row).join(','))\n      ].join('\\n');\n      \n      const blob = new Blob([csv], { type: 'text/csv' });\n      const url = URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.href = url;\n      a.download = `shortlists-${new Date().toISOString().split('T')[0]}.csv`;\n      a.click();\n    } else if (format === 'json') {\n      const json = JSON.stringify(exportData, null, 2);\n      const blob = new Blob([json], { type: 'application/json' });\n      const url = URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.href = url;\n      a.download = `shortlists-${new Date().toISOString().split('T')[0]}.json`;\n      a.click();\n    }\n  }, []);\n\n  // Import functionality\n  const handleImport = useCallback(async (data: DataRecord[]) => {\n    try {\n      const importData = data.map(shortlist => ({\n        ...shortlist,\n        organization_id: orgId,\n        created_at: new Date().toISOString(),\n        updated_at: new Date().toISOString()\n      }));\n\n      const { error } = await sb\n        .from('people_shortlists')\n        .insert(importData);\n\n      if (error) throw error;\n      \n      loadShortlistsData();\n    } catch (error) {\n      console.error('Import error:', error);\n    }\n  }, [orgId, sb, loadShortlistsData]);\n\n  // ATLVS DataViews configuration\n  const shortlistsConfig: DataViewConfig = useMemo(() => ({\n    id: 'shortlists-dataviews',\n    name: t('title'),\n    viewType: 'grid',\n    fields,\n    data: shortlistsData,\n    defaultView: 'grid',\n    bulkActions: [\n      {\n        key: 'delete',\n        label: 'Delete Selected',\n        variant: 'destructive',\n        onClick: async (selectedIds: string[]) => {\n          console.log('Delete action:', selectedIds);\n          // Implement delete functionality\n        },\n        requiresSelection: true,\n        confirmMessage: 'Are you sure you want to delete the selected shortlists?'\n      },\n      {\n        key: 'export',\n        label: 'Export Selected',\n        variant: 'secondary',\n        onClick: async (selectedIds: string[]) => {\n          const selectedData = shortlistsData.filter(s => selectedIds.includes(s.id));\n          handleExport('csv', selectedData);\n        },\n        requiresSelection: true\n      },\n      {\n        key: 'archive',\n        label: 'Archive Selected',\n        variant: 'secondary',\n        onClick: async (selectedIds: string[]) => {\n          console.log('Archive action:', selectedIds);\n          // Implement archive functionality\n        },\n        requiresSelection: true\n      }\n    ],\n    exportConfig: {\n      formats: ['csv', 'json', 'excel'],\n      onExport: handleExport\n    },\n    importConfig: {\n      formats: ['csv', 'json'],\n      onImport: handleImport\n    },\n    onSearch: handleSearch,\n    onFilter: handleFilter,\n    onSort: handleSort\n  }), [t, fields, shortlistsData, handleSearch, handleFilter, handleSort, handleExport, handleImport]);\n\n  return (\n    <div className=\"stack-lg\">\n      <DataViewProvider config={shortlistsConfig}>\n        <StateManagerProvider>\n          <div className=\"stack-md\">\n            <ViewSwitcher />\n            <DataActions />\n            \n            <DataGrid />\n            \n            <KanbanBoard \n              columns={[\n                { id: 'active', title: 'Active' },\n                { id: 'archived', title: 'Archived' }\n              ]}\n              statusField=\"status\"\n              titleField=\"name\"\n            />\n            \n            <CalendarView \n              startDateField=\"created_at\"\n              titleField=\"name\"\n            />\n            \n            <ListView \n              titleField=\"name\"\n            />\n            \n            <TimelineView \n              startDateField=\"created_at\"\n              titleField=\"name\"\n            />\n            \n            <GalleryView \n              titleField=\"name\"\n            />\n            \n            <AppDrawer\n              title=\"Shortlist Details\"\n              open={false}\n              onClose={() => {}}\n              record={null}\n              fields={fields}\n              mode=\"view\"\n              tabs={[\n                {\n                  key: 'details',\n                  label: 'Details',\n                  content: (\n                    <div className=\"p-md stack-md\">\n                      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-md\">\n                        <div>\n                          <label className=\"block text-body-sm form-label mb-xs\">Name</label>\n                          <div className=\"text-body color-foreground\">Camera Crew Shortlist</div>\n                        </div>\n                        <div>\n                          <label className=\"block text-body-sm form-label mb-xs\">Purpose</label>\n                          <div className=\"text-body color-foreground\">Project</div>\n                        </div>\n                        <div>\n                          <label className=\"block text-body-sm form-label mb-xs\">Status</label>\n                          <div className=\"text-body color-foreground\">Active</div>\n                        </div>\n                        <div>\n                          <label className=\"block text-body-sm form-label mb-xs\">Member Count</label>\n                          <div className=\"text-body color-foreground\">8</div>\n                        </div>\n                      </div>\n                    </div>\n                  )\n                },\n                {\n                  key: 'members',\n                  label: 'Members',\n                  content: (\n                    <div className=\"p-md\">\n                      <p className=\"color-muted\">Shortlist members and their details will be shown here.</p>\n                    </div>\n                  )\n                },\n                {\n                  key: 'activity',\n                  label: 'Activity',\n                  content: (\n                    <div className=\"p-md\">\n                      <p className=\"color-muted\">Recent activity and changes to this shortlist will be shown here.</p>\n                    </div>\n                  )\n                }\n              ]}\n            />\n          </div>\n        </StateManagerProvider>\n      </DataViewProvider>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ghxstship/apps/web/app/(app)/(shell)/people/training/CreateTrainingRecordClient.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadData'. Either include it or remove the dependency array.","line":31,"column":6,"nodeType":"ArrayExpression","endLine":31,"endColumn":13,"suggestions":[{"desc":"Update the dependencies array to be: [loadData, orgId]","fix":{"range":[929,936],"text":"[loadData, orgId]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useState, useEffect } from 'react';\nimport { useRouter } from 'next/navigation';\nimport { Card, Button, UnifiedInput } from '@ghxstship/ui';\nimport { useTranslations } from 'next-intl';\nimport { createBrowserClient } from '@ghxstship/auth';\nimport type { CreateTrainingRecordData } from './types';\n\ninterface CreateTrainingRecordClientProps {\n  orgId: string;\n}\n\nexport default function CreateTrainingRecordClient({ orgId }: CreateTrainingRecordClientProps) {\n  const t = useTranslations('people.training');\n  const router = useRouter();\n  const sb = createBrowserClient();\n\n  const [loading, setLoading] = useState(false);\n  const [people, setPeople] = useState<any[]>([]);\n  const [programs, setPrograms] = useState<any[]>([]);\n  \n  const [formData, setFormData] = useState<CreateTrainingRecordData>({\n    person_id: '',\n    program_id: '',\n    notes: ''\n  });\n\n  useEffect(() => {\n    loadData();\n  }, [orgId]);\n\n  const loadData = async () => {\n    try {\n      // Load people\n      const { data: peopleData } = await sb\n        .from('people')\n        .select('id, first_name, last_name, department')\n        .eq('organization_id', orgId)\n        .eq('status', 'active')\n        .order('first_name');\n\n      setPeople(peopleData || []);\n\n      // Load training programs\n      const { data: programsData } = await sb\n        .from('training_programs')\n        .select('id, name, category, duration, required')\n        .eq('organization_id', orgId)\n        .order('name');\n\n      setPrograms(programsData || []);\n    } catch (error) {\n      console.error('Error loading data:', error);\n    }\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!formData.person_id || !formData.program_id) return;\n\n    setLoading(true);\n    try {\n      const { error } = await sb\n        .from('training_records')\n        .insert({\n          ...formData,\n          organization_id: orgId,\n          status: 'enrolled',\n          created_at: new Date().toISOString(),\n          updated_at: new Date().toISOString()\n        });\n\n      if (error) throw error;\n\n      router.push('/people/training');\n    } catch (error) {\n      console.error('Error creating training record:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"stack-lg\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-heading-3 font-anton uppercase\">Enroll in Training</h1>\n          <p className=\"text-body-sm color-muted\">Enroll a person in a training program</p>\n        </div>\n        <Button variant=\"outline\" onClick={() => router.back()}>\n          Cancel\n        </Button>\n      </div>\n\n      <Card>\n        <div className=\"p-md\">\n          <form onSubmit={handleSubmit} className=\"stack-md\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-md\">\n              <div>\n                <label className=\"block text-body-sm form-label mb-xs\">Person *</label>\n                <select\n                  value={formData.person_id}\n                  onChange={(e) => setFormData(prev => ({ ...prev, person_id: e.target.value }))}\n                  className=\"w-full px-md py-sm border border-border rounded-md focus:outline-none focus:ring-2 focus:ring-primary bg-background\"\n                  required\n                >\n                  <option value=\"\">Select person...</option>\n                  {people.map(person => (\n                    <option key={person.id} value={person.id}>\n                      {person.first_name} {person.last_name} - {person.department}\n                    </option>\n                  ))}\n                </select>\n              </div>\n\n              <div>\n                <label className=\"block text-body-sm form-label mb-xs\">Training Program *</label>\n                <select\n                  value={formData.program_id}\n                  onChange={(e) => setFormData(prev => ({ ...prev, program_id: e.target.value }))}\n                  className=\"w-full px-md py-sm border border-border rounded-md focus:outline-none focus:ring-2 focus:ring-primary bg-background\"\n                  required\n                >\n                  <option value=\"\">Select program...</option>\n                  {programs.map(program => (\n                    <option key={program.id} value={program.id}>\n                      {program.name} ({program.duration}h) - {program.category}\n                    </option>\n                  ))}\n                </select>\n              </div>\n            </div>\n\n            <div>\n              <label className=\"block text-body-sm form-label mb-xs\">Notes</label>\n              <textarea\n                value={formData.notes}\n                onChange={(e) => setFormData(prev => ({ ...prev, notes: e.target.value }))}\n                placeholder=\"Additional notes about this enrollment...\"\n                className=\"w-full px-md py-sm border border-border rounded-md focus:outline-none focus:ring-2 focus:ring-primary bg-background min-h-[100px]\"\n              />\n            </div>\n\n            <div className=\"flex gap-sm\">\n              <Button type=\"submit\" loading={loading}>\n                Enroll in Training\n              </Button>\n              <Button type=\"button\" variant=\"outline\" onClick={() => router.back()}>\n                Cancel\n              </Button>\n            </div>\n          </form>\n        </div>\n      </Card>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ghxstship/apps/web/app/(app)/(shell)/people/training/TrainingClient.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'loadTrainingData' and 'sb'. Either include them or remove the dependency array.","line":70,"column":6,"nodeType":"ArrayExpression","endLine":70,"endColumn":13,"suggestions":[{"desc":"Update the dependencies array to be: [loadTrainingData, orgId, sb]","fix":{"range":[2151,2158],"text":"[loadTrainingData, orgId, sb]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\nimport { User, FileText, Settings, Award, Calendar, TrendingUp, Activity, Clock, Plus, Search, Play, Trash2 } from \"lucide-react\";\nimport { useEffect, useState, useCallback, useMemo } from 'react';\nimport { type DataRecord } from '@ghxstship/ui';\nimport { DataViewProvider, StateManagerProvider, ViewSwitcher, DataActions, DataGrid, KanbanBoard, CalendarView, ListView, TimelineView, GalleryView } from '@ghxstship/ui/components/DataViews';\nimport { type FieldConfig, type DataViewConfig } from '@ghxstship/ui/components/DataViews/types';\nimport { useTranslations } from 'next-intl';\nimport { createBrowserClient } from '@ghxstship/auth';\nimport AppDrawer from '@/app/_components/shared/AppDrawer';\n\ninterface TrainingRecord extends DataRecord {\n  id: string;\n  person_id: string;\n  program_id: string;\n  status: 'enrolled' | 'in_progress' | 'completed' | 'expired' | 'failed';\n  completion_date?: string;\n  expiry_date?: string;\n  score?: number;\n  notes?: string;\n  organization_id: string;\n  created_at: string;\n  updated_at: string;\n  person?: {\n    first_name: string;\n    last_name: string;\n    email?: string;\n    department?: string;\n  };\n  program?: {\n    name: string;\n    category: string;\n    duration: number;\n    required: boolean;\n  };\n}\n\ninterface TrainingClientProps {\n  orgId: string;\n}\n\nexport default function TrainingClient({ orgId }: TrainingClientProps) {\n  const t = useTranslations('people.training');\n  const sb = createBrowserClient();\n  const [loading, setLoading] = useState(false);\n  const [trainingData, setTrainingData] = useState<TrainingRecord[]>([]);\n\n  useEffect(() => {\n    loadTrainingData();\n    \n    // Set up real-time subscription\n    const subscription = sb\n      .channel('training-changes')\n      .on('postgres_changes', \n        { \n          event: '*', \n          schema: 'public', \n          table: 'training_records',\n          filter: `organization_id=eq.${orgId}`\n        }, \n        (payload) => {\n          console.log('Real-time update:', payload);\n          loadTrainingData();\n        }\n      )\n      .subscribe();\n\n    return () => {\n      subscription.unsubscribe();\n    };\n  }, [orgId]);\n\n  const loadTrainingData = useCallback(async () => {\n    setLoading(true);\n    try {\n      const { data, error } = await sb\n        .from('training_records')\n        .select(`\n          *,\n          person:people(first_name, last_name, email, department),\n          program:training_programs(name, category, duration, required)\n        `)\n        .eq('organization_id', orgId)\n        .order('created_at', { ascending: false });\n      \n      if (error) {\n        console.error('Supabase error:', error);\n        throw error;\n      }\n      \n      setTrainingData(data || []);\n    } catch (error) {\n      console.error('Error loading training data:', error);\n    } finally {\n      setLoading(false);\n    }\n  }, [orgId, sb]);\n\n  // ATLVS DataViews field configuration - memoized for performance\n  const fields: FieldConfig[] = useMemo(() => [\n    {\n      key: 'person.first_name',\n      label: t('person'),\n      type: 'text',\n      sortable: true,\n      filterable: true\n    },\n    {\n      key: 'program.name',\n      label: t('program'),\n      type: 'text',\n      sortable: true,\n      filterable: true\n    },\n    {\n      key: 'program.category',\n      label: t('category'),\n      type: 'select',\n      options: [\n        { value: 'safety', label: t('safety') },\n        { value: 'technical', label: t('technical') },\n        { value: 'compliance', label: t('compliance') },\n        { value: 'leadership', label: t('leadership') },\n        { value: 'certification', label: t('certification') }\n      ],\n      sortable: true,\n      filterable: true\n    },\n    {\n      key: 'status',\n      label: t('status'),\n      type: 'select',\n      options: [\n        { value: 'enrolled', label: t('enrolled') },\n        { value: 'in_progress', label: t('inProgress') },\n        { value: 'completed', label: t('completed') },\n        { value: 'expired', label: t('expired') },\n        { value: 'failed', label: t('failed') }\n      ],\n      sortable: true,\n      filterable: true\n    },\n    {\n      key: 'completion_date',\n      label: t('completionDate'),\n      type: 'date',\n      sortable: true,\n      filterable: true\n    },\n    {\n      key: 'expiry_date',\n      label: t('expiryDate'),\n      type: 'date',\n      sortable: true,\n      filterable: true\n    },\n    {\n      key: 'score',\n      label: t('score'),\n      type: 'number',\n      sortable: true,\n      filterable: true\n    },\n    {\n      key: 'program.duration',\n      label: t('duration'),\n      type: 'number',\n      sortable: true,\n      filterable: true\n    },\n    {\n      key: 'created_at',\n      label: t('enrolledAt'),\n      type: 'date',\n      sortable: true,\n      filterable: true\n    }\n  ], [t]);\n\n  // Advanced search functionality\n  const handleSearch = useCallback(async (query: string) => {\n    if (!query.trim()) {\n      loadTrainingData();\n      return;\n    }\n\n    try {\n      const { data, error } = await sb\n        .from('training_records')\n        .select(`\n          *,\n          person:people(first_name, last_name, email, department),\n          program:training_programs(name, category, duration, required)\n        `)\n        .eq('organization_id', orgId)\n        .or(`notes.ilike.%${query}%`)\n        .order('created_at', { ascending: false });\n      \n      if (error) throw error;\n      setTrainingData(data || []);\n    } catch (error) {\n      console.error('Search error:', error);\n    }\n  }, [orgId, sb, loadTrainingData]);\n\n  // Advanced filtering\n  const handleFilter = useCallback(async (filters: unknown) => {\n    try {\n      let query = sb\n        .from('training_records')\n        .select(`\n          *,\n          person:people(first_name, last_name, email, department),\n          program:training_programs(name, category, duration, required)\n        `)\n        .eq('organization_id', orgId);\n\n      filters.forEach((filter: unknown) => {\n        if (filter.value) {\n          query = query.eq(filter.field, filter.value);\n        }\n      });\n\n      const { data, error } = await query.order('created_at', { ascending: false });\n      if (error) throw error;\n      setTrainingData(data || []);\n    } catch (error) {\n      console.error('Filter error:', error);\n    }\n  }, [orgId, sb]);\n\n  // Advanced sorting\n  const handleSort = useCallback(async (sorts: unknown) => {\n    try {\n      let query = sb\n        .from('training_records')\n        .select(`\n          *,\n          person:people(first_name, last_name, email, department),\n          program:training_programs(name, category, duration, required)\n        `)\n        .eq('organization_id', orgId);\n\n      if (sorts.length > 0) {\n        const sort = sorts[0];\n        query = query.order(sort.field, { ascending: sort.direction === 'asc' });\n      }\n\n      const { data, error } = await query;\n      if (error) throw error;\n      setTrainingData(data || []);\n    } catch (error) {\n      console.error('Sort error:', error);\n    }\n  }, [orgId, sb]);\n\n  // Export functionality\n  const handleExport = useCallback((format: string, data: DataRecord[], config?: unknown) => {\n    const exportData = data.map(record => ({\n      'Person': record.person ? `${record.person.first_name} ${record.person.last_name}` : 'N/A',\n      'Program': record.program?.name || 'N/A',\n      'Category': record.program?.category || 'N/A',\n      'Status': record.status,\n      'Completion Date': record.completion_date || 'N/A',\n      'Expiry Date': record.expiry_date || 'N/A',\n      'Score': record.score || 'N/A',\n      'Duration (hours)': record.program?.duration || 'N/A',\n      'Enrolled At': record.created_at\n    }));\n\n    if (format === 'csv') {\n      const csv = [\n        Object.keys(exportData[0]).join(','),\n        ...exportData.map(row => Object.values(row).join(','))\n      ].join('\\n');\n      \n      const blob = new Blob([csv], { type: 'text/csv' });\n      const url = URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.href = url;\n      a.download = `training-records-${new Date().toISOString().split('T')[0]}.csv`;\n      a.click();\n    } else if (format === 'json') {\n      const json = JSON.stringify(exportData, null, 2);\n      const blob = new Blob([json], { type: 'application/json' });\n      const url = URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.href = url;\n      a.download = `training-records-${new Date().toISOString().split('T')[0]}.json`;\n      a.click();\n    }\n  }, []);\n\n  // Import functionality\n  const handleImport = useCallback(async (data: DataRecord[]) => {\n    try {\n      const importData = data.map(record => ({\n        ...record,\n        organization_id: orgId,\n        created_at: new Date().toISOString(),\n        updated_at: new Date().toISOString()\n      }));\n\n      const { error } = await sb\n        .from('training_records')\n        .insert(importData);\n\n      if (error) throw error;\n      \n      loadTrainingData();\n    } catch (error) {\n      console.error('Import error:', error);\n    }\n  }, [orgId, sb, loadTrainingData]);\n\n  // ATLVS DataViews configuration\n  const trainingConfig: DataViewConfig = useMemo(() => ({\n    id: 'training-dataviews',\n    name: t('title'),\n    viewType: 'grid',\n    fields,\n    data: trainingData,\n    defaultView: 'grid',\n    bulkActions: [\n      {\n        key: 'delete',\n        label: 'Delete Selected',\n        variant: 'destructive',\n        onClick: async (selectedIds: string[]) => {\n          console.log('Delete action:', selectedIds);\n          // Implement delete functionality\n        },\n        requiresSelection: true,\n        confirmMessage: 'Are you sure you want to delete the selected training records?'\n      },\n      {\n        key: 'export',\n        label: 'Export Selected',\n        variant: 'secondary',\n        onClick: async (selectedIds: string[]) => {\n          const selectedData = trainingData.filter(t => selectedIds.includes(t.id));\n          handleExport('csv', selectedData);\n        },\n        requiresSelection: true\n      },\n      {\n        key: 'complete',\n        label: 'Mark as Completed',\n        variant: 'secondary',\n        onClick: async (selectedIds: string[]) => {\n          console.log('Complete action:', selectedIds);\n          // Implement completion functionality\n        },\n        requiresSelection: true\n      }\n    ],\n    exportConfig: {\n      formats: ['csv', 'json', 'excel'],\n      onExport: handleExport\n    },\n    importConfig: {\n      formats: ['csv', 'json'],\n      onImport: handleImport\n    },\n    onSearch: handleSearch,\n    onFilter: handleFilter,\n    onSort: handleSort\n  }), [t, fields, trainingData, handleSearch, handleFilter, handleSort, handleExport, handleImport]);\n\n  return (\n    <div className=\"stack-lg\">\n      <DataViewProvider config={trainingConfig}>\n        <StateManagerProvider>\n          <div className=\"stack-md\">\n            <ViewSwitcher />\n            <DataActions />\n            \n            <DataGrid />\n            \n            <KanbanBoard \n              columns={[\n                { id: 'enrolled', title: 'Enrolled' },\n                { id: 'in_progress', title: 'In Progress' },\n                { id: 'completed', title: 'Completed' },\n                { id: 'expired', title: 'Expired' }\n              ]}\n              statusField=\"status\"\n              titleField=\"person.first_name\"\n            />\n            \n            <CalendarView \n              startDateField=\"created_at\"\n              endDateField=\"expiry_date\"\n              titleField=\"person.first_name\"\n            />\n            \n            <ListView \n              titleField=\"person.first_name\"\n            />\n            \n            <TimelineView \n              startDateField=\"created_at\"\n              titleField=\"person.first_name\"\n            />\n            \n            <GalleryView \n              titleField=\"person.first_name\"\n            />\n            \n            <AppDrawer\n              title=\"Training Record Details\"\n              open={false}\n              onClose={() => {}}\n              record={null}\n              fields={fields}\n              mode=\"view\"\n              tabs={[\n                {\n                  key: 'details',\n                  label: 'Details',\n                  content: (\n                    <div className=\"p-md stack-md\">\n                      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-md\">\n                        <div>\n                          <label className=\"block text-body-sm form-label mb-xs\">Person</label>\n                          <div className=\"text-body color-foreground\">Jack Sparrow</div>\n                        </div>\n                        <div>\n                          <label className=\"block text-body-sm form-label mb-xs\">Program</label>\n                          <div className=\"text-body color-foreground\">Safety Training</div>\n                        </div>\n                        <div>\n                          <label className=\"block text-body-sm form-label mb-xs\">Status</label>\n                          <div className=\"text-body color-foreground\">Completed</div>\n                        </div>\n                        <div>\n                          <label className=\"block text-body-sm form-label mb-xs\">Score</label>\n                          <div className=\"text-body color-foreground\">95%</div>\n                        </div>\n                      </div>\n                    </div>\n                  )\n                },\n                {\n                  key: 'progress',\n                  label: 'Progress',\n                  content: (\n                    <div className=\"p-md\">\n                      <p className=\"color-muted\">Training progress and milestones will be shown here.</p>\n                    </div>\n                  )\n                },\n                {\n                  key: 'certificates',\n                  label: 'Certificates',\n                  content: (\n                    <div className=\"p-md\">\n                      <p className=\"color-muted\">Training certificates and credentials will be shown here.</p>\n                    </div>\n                  )\n                }\n              ]}\n            />\n          </div>\n        </StateManagerProvider>\n      </DataViewProvider>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ghxstship/apps/web/app/(app)/(shell)/procurement/approvals/ApprovalsClient.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'approvalsService'. Either include it or remove the dependency array.","line":143,"column":6,"nodeType":"ArrayExpression","endLine":143,"endColumn":45,"suggestions":[{"desc":"Update the dependencies array to be: [approvalsService, organizationId, filters, sort, userId]","fix":{"range":[4261,4300],"text":"[approvalsService, organizationId, filters, sort, userId]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { CheckCircle, XCircle, Clock, AlertTriangle, Users, TrendingUp, Filter, Settings, Plus, Search, Download, Upload, RefreshCw, Eye, Edit, Trash2, MoreHorizontal, Grid3X3, List, LayoutDashboard, Calendar, BarChart3 } from \"lucide-react\";\nimport { useState, useEffect, useCallback } from 'react';\nimport { useTranslations } from 'next-intl';\nimport { createBrowserClient } from '@ghxstship/auth';\nimport { \n  Button, \n  Badge, \n  Card, \n  Input,\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n  Tabs,\n  TabsContent,\n  TabsList,\n  TabsTrigger,\n  Checkbox\n} from '@ghxstship/ui';\nimport AppDrawer from '@/app/_components/shared/AppDrawer';\nimport { ApprovalsService } from './lib/approvalsService';\nimport { CreatePolicyClient } from './CreatePolicyClient';\nimport type { \n  ApprovalStep, \n  ApprovalSortOptions,\n  ApprovalDashboardData\n} from './types';\n\n// View Types\ntype ApprovalViewMode = 'dashboard' | 'grid' | 'list' | 'kanban' | 'calendar';\n\n// Filters Interface\ninterface ApprovalFilters {\n  search: string;\n  status: string;\n  priority: string;\n  approver_id?: string;\n}\n\ninterface ApprovalsClientProps {\n  className?: string;\n  organizationId?: string;\n  userId?: string;\n}\n\nexport default function ApprovalsClient({ \n  className, \n  organizationId = 'default-org',\n  userId = 'current-user-id'\n}: ApprovalsClientProps) {\n  const t = useTranslations();\n  const supabase = createBrowserClient();\n  \n  // State management\n  const [loading, setLoading] = useState(false);\n  const [approvals, setApprovals] = useState<ApprovalStep[]>([]);\n  const [dashboardData, setDashboardData] = useState<ApprovalDashboardData | null>(null);\n  const [selectedApprovals, setSelectedApprovals] = useState<string[]>([]);\n  const [viewMode, setViewMode] = useState<ApprovalViewMode>('dashboard');\n  const [showCreatePolicy, setShowCreatePolicy] = useState(false);\n  const [showApprovalDrawer, setShowApprovalDrawer] = useState(false);\n  const [selectedApproval, setSelectedApproval] = useState<ApprovalStep | null>(null);\n  \n  // Filters and sorting\n  const [filters, setFilters] = useState<ApprovalFilters>({\n    search: '',\n    status: 'all',\n    priority: 'all'\n  });\n  const [sort, setSort] = useState<ApprovalSortOptions>({\n    field: 'created_at',\n    direction: 'desc'\n  });\n\n  const approvalsService = new ApprovalsService();\n\n  // Load approvals data\n  const loadApprovals = useCallback(async () => {\n    try {\n      setLoading(true);\n      \n      // Load approval steps\n      const { data: approvalSteps, error } = await approvalsService.getApprovalSteps(\n        organizationId,\n        filters,\n        sort\n      );\n\n      if (error) {\n        console.error('Error loading approvals:', error);\n        // Fallback to demo data\n        const demoApprovals: ApprovalStep[] = [\n          {\n            id: 'demo-approval-1',\n            request_id: 'demo-request-1',\n            approver_id: userId,\n            step_order: 1,\n            status: 'pending',\n            created_at: new Date().toISOString(),\n            updated_at: new Date().toISOString(),\n            request: {\n              id: 'demo-request-1',\n              title: 'Camera Equipment Purchase',\n              status: 'submitted',\n              estimated_total: 25000\n            }\n          },\n          {\n            id: 'demo-approval-2',\n            request_id: 'demo-request-2',\n            approver_id: userId,\n            step_order: 1,\n            status: 'pending',\n            created_at: new Date().toISOString(),\n            updated_at: new Date().toISOString(),\n            request: {\n              id: 'demo-request-2',\n              title: 'Catering Services Contract',\n              status: 'submitted',\n              estimated_total: 8500\n            }\n          }\n        ];\n        setApprovals(demoApprovals);\n      } else {\n        setApprovals(approvalSteps || []);\n      }\n\n      // Load dashboard data\n      const { data: dashboard } = await approvalsService.getDashboardData(organizationId, userId);\n      setDashboardData(dashboard);\n\n    } catch (error) {\n      console.error('Error loading approvals:', error);\n      // Set demo data on error\n      setApprovals([]);\n    } finally {\n      setLoading(false);\n    }\n  }, [organizationId, userId, filters, sort]);\n\n  // Load data on mount and when dependencies change\n  useEffect(() => {\n    loadApprovals();\n  }, [loadApprovals]);\n\n  // Handle filter changes\n  const handleFilterChange = useCallback((newFilters: Partial<ApprovalFilters>) => {\n    setFilters(prev => ({ ...prev, ...newFilters }));\n  }, []);\n\n  // Handle sort changes\n  const handleSortChange = useCallback((newSort: ApprovalSortOptions) => {\n    setSort(newSort);\n  }, []);\n\n  // Handle approval actions\n  const handleApprovalAction = useCallback(async (\n    approvalId: string, \n    action: 'approve' | 'reject' | 'skip',\n    notes?: string\n  ) => {\n    try {\n      setLoading(true);\n      \n      // Mock approval action for demo\n      console.log(`Processing approval ${approvalId} with action ${action}`, notes);\n      \n      // Update local state\n      setApprovals(prev => prev.map(approval => \n        approval.id === approvalId \n          ? { ...approval, status: action === 'approve' ? 'approved' : action === 'reject' ? 'rejected' : 'skipped' }\n          : approval\n      ));\n      \n    } catch (error) {\n      console.error('Error processing approval:', error);\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  // Handle record selection\n  const handleRecordSelect = useCallback((recordIds: string[]) => {\n    setSelectedApprovals(recordIds);\n  }, []);\n\n  // Handle record actions\n  const handleRecordAction = useCallback((action: string, approval: ApprovalStep) => {\n    switch (action) {\n      case 'view':\n        setSelectedApproval(approval);\n        setShowApprovalDrawer(true);\n        break;\n      case 'approve':\n        handleApprovalAction(approval.id!, 'approve');\n        break;\n      case 'reject':\n        handleApprovalAction(approval.id!, 'reject');\n        break;\n      case 'skip':\n        handleApprovalAction(approval.id!, 'skip');\n        break;\n    }\n  }, [handleApprovalAction]);\n\n  // Handle bulk actions\n  const handleBulkAction = useCallback(async (action: string) => {\n    try {\n      setLoading(true);\n      \n      for (const approvalId of selectedApprovals) {\n        await handleApprovalAction(approvalId, action as unknown);\n      }\n      \n      setSelectedApprovals([]);\n      \n    } catch (error) {\n      console.error('Error processing bulk action:', error);\n    } finally {\n      setLoading(false);\n    }\n  }, [selectedApprovals, handleApprovalAction]);\n\n  // Render dashboard cards\n  const renderDashboardCards = () => {\n    const pendingCount = approvals.filter(a => a.status === 'pending').length;\n    const approvedToday = approvals.filter(a => \n      a.status === 'approved' && \n      a.approved_at && \n      new Date(a.approved_at).toDateString() === new Date().toDateString()\n    ).length;\n    const totalValue = approvals.reduce((sum, a) => sum + (a.request?.estimated_total || 0), 0);\n\n    return (\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-md mb-lg\">\n        <Card className=\"p-md\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm text-muted-foreground\">Pending Approvals</p>\n              <p className=\"text-2xl font-bold\">{pendingCount}</p>\n            </div>\n            <Clock className=\"h-8 w-8 text-warning\" />\n          </div>\n        </Card>\n        \n        <Card className=\"p-md\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm text-muted-foreground\">Approved Today</p>\n              <p className=\"text-2xl font-bold\">{approvedToday}</p>\n            </div>\n            <CheckCircle className=\"h-8 w-8 text-success\" />\n          </div>\n        </Card>\n        \n        <Card className=\"p-md\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm text-muted-foreground\">Overdue</p>\n              <p className=\"text-2xl font-bold\">0</p>\n            </div>\n            <AlertTriangle className=\"h-8 w-8 text-destructive\" />\n          </div>\n        </Card>\n        \n        <Card className=\"p-md\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm text-muted-foreground\">Total Value</p>\n              <p className=\"text-2xl font-bold\">\n                {new Intl.NumberFormat('en-US', {\n                  style: 'currency',\n                  currency: 'USD'\n                }).format(totalValue)}\n              </p>\n            </div>\n            <TrendingUp className=\"h-8 w-8 text-info\" />\n          </div>\n        </Card>\n      </div>\n    );\n  };\n\n  // Render approval list\n  const renderApprovalList = () => {\n    const filteredApprovals = approvals.filter(approval => {\n      if (filters.search && !approval.request?.title?.toLowerCase().includes(filters.search.toLowerCase())) {\n        return false;\n      }\n      if (filters.status !== 'all' && approval.status !== filters.status) {\n        return false;\n      }\n      return true;\n    });\n\n    return (\n      <div className=\"space-y-sm\">\n        {filteredApprovals.map((approval) => (\n          <Card key={approval.id} className=\"p-md\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex-1\">\n                <div className=\"flex items-center gap-sm mb-sm\">\n                  <h4 className=\"font-medium\">{approval.request?.title || 'Unknown Request'}</h4>\n                  <Badge variant={\n                    approval.status === 'approved' ? 'success' :\n                    approval.status === 'rejected' ? 'destructive' :\n                    approval.status === 'pending' ? 'warning' : 'secondary'\n                  }>\n                    {approval.status}\n                  </Badge>\n                </div>\n                <p className=\"text-sm text-muted-foreground\">\n                  Amount: {new Intl.NumberFormat('en-US', {\n                    style: 'currency',\n                    currency: 'USD'\n                  }).format(approval.request?.estimated_total || 0)}\n                </p>\n              </div>\n              <div className=\"flex gap-sm\">\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={() => handleRecordAction('view', approval)}\n                >\n                  <Eye className=\"h-4 w-4 mr-sm\" />\n                  View\n                </Button>\n                {approval.status === 'pending' && (\n                  <>\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => handleRecordAction('approve', approval)}\n                    >\n                      <CheckCircle className=\"h-4 w-4 mr-sm\" />\n                      Approve\n                    </Button>\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => handleRecordAction('reject', approval)}\n                    >\n                      <XCircle className=\"h-4 w-4 mr-sm\" />\n                      Reject\n                    </Button>\n                  </>\n                )}\n              </div>\n            </div>\n          </Card>\n        ))}\n        {filteredApprovals.length === 0 && (\n          <Card className=\"p-xl text-center\">\n            <Users className=\"h-12 w-12 mx-auto mb-md text-muted-foreground\" />\n            <h3 className=\"text-lg font-medium mb-sm\">No approvals found</h3>\n            <p className=\"text-sm text-muted-foreground\">\n              {filters.search || filters.status !== 'all' \n                ? 'Try adjusting your filters to see more results.'\n                : 'There are no pending approvals at this time.'\n              }\n            </p>\n          </Card>\n        )}\n      </div>\n    );\n  };\n\n  // Render view content based on current view mode\n  const renderViewContent = () => {\n    switch (viewMode) {\n      case 'dashboard':\n        return (\n          <div className=\"space-y-lg\">\n            {renderDashboardCards()}\n            <Card className=\"p-md\">\n              <h3 className=\"text-lg font-semibold mb-md\">Recent Approvals</h3>\n              {renderApprovalList()}\n            </Card>\n          </div>\n        );\n      case 'list':\n        return renderApprovalList();\n      case 'grid':\n        return (\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-md\">\n            {approvals.map((approval) => (\n              <Card key={approval.id} className=\"p-md\">\n                <div className=\"space-y-sm\">\n                  <div className=\"flex items-center justify-between\">\n                    <h4 className=\"font-medium\">{approval.request?.title || 'Unknown Request'}</h4>\n                    <Badge variant={\n                      approval.status === 'approved' ? 'success' :\n                      approval.status === 'rejected' ? 'destructive' :\n                      approval.status === 'pending' ? 'warning' : 'secondary'\n                    }>\n                      {approval.status}\n                    </Badge>\n                  </div>\n                  <p className=\"text-sm text-muted-foreground\">\n                    {new Intl.NumberFormat('en-US', {\n                      style: 'currency',\n                      currency: 'USD'\n                    }).format(approval.request?.estimated_total || 0)}\n                  </p>\n                  <div className=\"flex gap-sm pt-sm\">\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => handleRecordAction('view', approval)}\n                    >\n                      <Eye className=\"h-4 w-4\" />\n                    </Button>\n                    {approval.status === 'pending' && (\n                      <>\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => handleRecordAction('approve', approval)}\n                        >\n                          <CheckCircle className=\"h-4 w-4\" />\n                        </Button>\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => handleRecordAction('reject', approval)}\n                        >\n                          <XCircle className=\"h-4 w-4\" />\n                        </Button>\n                      </>\n                    )}\n                  </div>\n                </div>\n              </Card>\n            ))}\n          </div>\n        );\n      default:\n        return renderApprovalList();\n    }\n  };\n\n  return (\n    <div className={`space-y-lg ${className || ''}`}>\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center gap-sm\">\n          <Users className=\"h-5 w-5\" />\n          <h3 className=\"text-lg font-semibold\">Procurement Approvals</h3>\n          <Badge variant=\"secondary\">\n            {approvals.length} approval{approvals.length !== 1 ? 's' : ''}\n          </Badge>\n        </div>\n        <div className=\"flex items-center gap-sm\">\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={() => setShowCreatePolicy(true)}\n          >\n            <Settings className=\"h-4 w-4 mr-sm\" />\n            Policies\n          </Button>\n          <Button variant=\"outline\" size=\"sm\">\n            <Upload className=\"h-4 w-4 mr-sm\" />\n            Import\n          </Button>\n          <Button variant=\"outline\" size=\"sm\">\n            <Download className=\"h-4 w-4 mr-sm\" />\n            Export\n          </Button>\n          <Button size=\"sm\" onClick={loadApprovals}>\n            <RefreshCw className=\"h-4 w-4 mr-sm\" />\n            Refresh\n          </Button>\n        </div>\n      </div>\n\n      {/* Filters */}\n      <Card className=\"p-md\">\n        <div className=\"flex flex-col lg:flex-row gap-md\">\n          {/* Search */}\n          <div className=\"relative flex-1\">\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n            <Input\n              placeholder=\"Search approvals...\"\n              value={filters.search}\n              onChange={(e) => handleFilterChange({ search: e.target.value })}\n              className=\"pl-10\"\n            />\n          </div>\n\n          {/* Status Filter */}\n          <Select\n            value={filters.status}\n            onValueChange={(value) => handleFilterChange({ status: value })}\n          >\n            <SelectTrigger className=\"w-[140px]\">\n              <SelectValue placeholder=\"All Status\" />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"all\">All Status</SelectItem>\n              <SelectItem value=\"pending\">Pending</SelectItem>\n              <SelectItem value=\"approved\">Approved</SelectItem>\n              <SelectItem value=\"rejected\">Rejected</SelectItem>\n              <SelectItem value=\"skipped\">Skipped</SelectItem>\n            </SelectContent>\n          </Select>\n\n          {/* Priority Filter */}\n          <Select\n            value={filters.priority}\n            onValueChange={(value) => handleFilterChange({ priority: value })}\n          >\n            <SelectTrigger className=\"w-[140px]\">\n              <SelectValue placeholder=\"All Priorities\" />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"all\">All Priorities</SelectItem>\n              <SelectItem value=\"low\">Low</SelectItem>\n              <SelectItem value=\"medium\">Medium</SelectItem>\n              <SelectItem value=\"high\">High</SelectItem>\n              <SelectItem value=\"urgent\">Urgent</SelectItem>\n            </SelectContent>\n          </Select>\n        </div>\n      </Card>\n\n      {/* View Mode Tabs */}\n      <Tabs value={viewMode} onValueChange={(value) => setViewMode(value as ApprovalViewMode)}>\n        <div className=\"flex items-center justify-between\">\n          <TabsList>\n            <TabsTrigger value=\"dashboard\">\n              <LayoutDashboard className=\"h-4 w-4 mr-sm\" />\n              Dashboard\n            </TabsTrigger>\n            <TabsTrigger value=\"grid\">\n              <Grid3X3 className=\"h-4 w-4 mr-sm\" />\n              Grid\n            </TabsTrigger>\n            <TabsTrigger value=\"list\">\n              <List className=\"h-4 w-4 mr-sm\" />\n              List\n            </TabsTrigger>\n            <TabsTrigger value=\"kanban\">\n              <BarChart3 className=\"h-4 w-4 mr-sm\" />\n              Kanban\n            </TabsTrigger>\n            <TabsTrigger value=\"calendar\">\n              <Calendar className=\"h-4 w-4 mr-sm\" />\n              Calendar\n            </TabsTrigger>\n          </TabsList>\n\n          {/* Bulk Actions */}\n          {selectedApprovals.length > 0 && (\n            <div className=\"flex items-center gap-sm\">\n              <span className=\"text-sm text-muted-foreground\">\n                {selectedApprovals.length} selected\n              </span>\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => handleBulkAction('approve')}\n              >\n                <CheckCircle className=\"h-4 w-4 mr-sm\" />\n                Approve All\n              </Button>\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => handleBulkAction('reject')}\n              >\n                <XCircle className=\"h-4 w-4 mr-sm\" />\n                Reject All\n              </Button>\n            </div>\n          )}\n        </div>\n\n        <TabsContent value={viewMode} className=\"mt-md\">\n          {loading ? (\n            <Card className=\"p-xl text-center\">\n              <RefreshCw className=\"h-8 w-8 mx-auto mb-md animate-spin\" />\n              <p className=\"text-muted-foreground\">Loading approvals...</p>\n            </Card>\n          ) : (\n            renderViewContent()\n          )}\n        </TabsContent>\n      </Tabs>\n\n      {/* Approval Details Drawer */}\n      <AppDrawer\n        open={showApprovalDrawer}\n        onClose={() => setShowApprovalDrawer(false)}\n        title=\"Approval Details\"\n      >\n        {selectedApproval && (\n          <div className=\"space-y-md\">\n            <div>\n              <h4 className=\"font-medium mb-sm\">Request Information</h4>\n              <p className=\"text-sm text-muted-foreground\">\n                {selectedApproval.request?.title || 'No title'}\n              </p>\n            </div>\n            \n            <div>\n              <h4 className=\"font-medium mb-sm\">Status</h4>\n              <Badge variant={\n                selectedApproval.status === 'approved' ? 'success' :\n                selectedApproval.status === 'rejected' ? 'destructive' :\n                selectedApproval.status === 'pending' ? 'warning' : 'secondary'\n              }>\n                {selectedApproval.status}\n              </Badge>\n            </div>\n\n            <div>\n              <h4 className=\"font-medium mb-sm\">Amount</h4>\n              <p className=\"text-lg font-semibold\">\n                {new Intl.NumberFormat('en-US', {\n                  style: 'currency',\n                  currency: 'USD'\n                }).format(selectedApproval.request?.estimated_total || 0)}\n              </p>\n            </div>\n\n            {selectedApproval.status === 'pending' && (\n              <div className=\"flex gap-sm pt-md border-t\">\n                <Button\n                  onClick={() => {\n                    handleApprovalAction(selectedApproval.id!, 'approve');\n                    setShowApprovalDrawer(false);\n                  }}\n                >\n                  <CheckCircle className=\"h-4 w-4 mr-sm\" />\n                  Approve\n                </Button>\n                <Button\n                  variant=\"outline\"\n                  onClick={() => {\n                    handleApprovalAction(selectedApproval.id!, 'reject');\n                    setShowApprovalDrawer(false);\n                  }}\n                >\n                  <XCircle className=\"h-4 w-4 mr-sm\" />\n                  Reject\n                </Button>\n              </div>\n            )}\n          </div>\n        )}\n      </AppDrawer>\n\n      {/* Create Policy Drawer */}\n      <CreatePolicyClient\n        open={showCreatePolicy}\n        onClose={() => setShowCreatePolicy(false)}\n        onSuccess={() => {\n          setShowCreatePolicy(false);\n          loadApprovals();\n        }}\n        organizationId={organizationId}\n      />\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ghxstship/apps/web/app/(app)/(shell)/procurement/approvals/ApprovalsClient_Broken.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'approvalsService'. Either include it or remove the dependency array.","line":254,"column":6,"nodeType":"ArrayExpression","endLine":254,"endColumn":45,"suggestions":[{"desc":"Update the dependencies array to be: [approvalsService, organizationId, filters, sort, userId]","fix":{"range":[6833,6872],"text":"[approvalsService, organizationId, filters, sort, userId]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'approvalsService'. Either include it or remove the dependency array.","line":301,"column":6,"nodeType":"ArrayExpression","endLine":301,"endColumn":45,"suggestions":[{"desc":"Update the dependencies array to be: [approvalsService, organizationId, userId, loadApprovals]","fix":{"range":[7978,8017],"text":"[approvalsService, organizationId, userId, loadApprovals]"}}]},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'DataViewProvider' is not defined.","line":438,"column":8,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":438,"endColumn":24},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'DataActions' is not defined.","line":441,"column":12,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":441,"endColumn":23},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'ViewSwitcher' is not defined.","line":451,"column":12,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":451,"endColumn":24}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { CheckCircle, XCircle, Clock, AlertTriangle, Users, TrendingUp, Filter, Settings, Plus, Search, Download, Upload, RefreshCw, Eye, Edit, Trash2, MoreHorizontal, Grid3X3, List, LayoutDashboard, Calendar, BarChart3 } from \"lucide-react\";\nimport { useState, useEffect, useCallback } from 'react';\nimport { useTranslations } from 'next-intl';\nimport { createBrowserClient } from '@ghxstship/auth';\nimport { \n  Button, \n  Badge, \n  Card, \n  Input,\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n  Tabs,\n  TabsContent,\n  TabsList,\n  TabsTrigger\n} from '@ghxstship/ui';\nimport AppDrawer from '@/app/_components/shared/AppDrawer';\nimport { approvalsService } from './lib/approvalsService';\nimport { CreatePolicyClient } from './CreatePolicyClient';\nimport type { \n  ApprovalStep, \n  ApprovalSortOptions,\n  ApprovalDashboardData\n} from './types';\n\ninterface ApprovalsClientProps {\n  className?: string;\n  organizationId?: string;\n  userId?: string;\n}\n\nexport default function ApprovalsClient({ \n  className, \n  organizationId = 'default-org',\n  userId = 'current-user-id'\n}: ApprovalsClientProps) {\n  const t = useTranslations();\n  const supabase = createBrowserClient();\n  \n  // State management\n  const [loading, setLoading] = useState(false);\n  const [data, setData] = useState<DataRecord[]>([]);\n  const [dashboardData, setDashboardData] = useState<ApprovalDashboardData | null>(null);\n  const [selectedApprovals, setSelectedApprovals] = useState<string[]>([]);\n  const [showCreatePolicy, setShowCreatePolicy] = useState(false);\n  const [showApprovalDrawer, setShowApprovalDrawer] = useState(false);\n  const [selectedApproval, setSelectedApproval] = useState<ApprovalStep | null>(null);\n  \n  // Filters and sorting\n  const [filters, setFilters] = useState({\n    status: 'all' as string,\n    priority: 'all' as string,\n    search: ''\n  });\n  const [sort, setSort] = useState<ApprovalSortOptions>({\n    field: 'created_at',\n    direction: 'desc'\n  });\n\n  const approvalsService = new ApprovalsService();\n\n  // Field configuration for ATLVS DataViews\n  const fieldConfig: FieldConfig[] = [\n    {\n      key: 'request_title',\n      label: 'Request',\n      type: 'text',\n      sortable: true,\n      filterable: true,\n      width: 200\n    },\n    {\n      key: 'requester_name',\n      label: 'Requester',\n      type: 'text',\n      sortable: true,\n      filterable: true,\n      width: 150\n    },\n    {\n      key: 'status',\n      label: 'Status',\n      type: 'select',\n      sortable: true,\n      filterable: true,\n      width: 120\n    },\n    {\n      key: 'priority',\n      label: 'Priority',\n      type: 'select',\n      sortable: true,\n      filterable: true,\n      width: 100\n    },\n    {\n      key: 'amount',\n      label: 'Amount',\n      type: 'currency',\n      sortable: true,\n      filterable: true,\n      width: 120\n    },\n    {\n      key: 'due_date',\n      label: 'Due Date',\n      type: 'date',\n      sortable: true,\n      filterable: true,\n      width: 120\n    },\n    {\n      key: 'created_at',\n      label: 'Created',\n      type: 'date',\n      sortable: true,\n      filterable: true,\n      width: 120\n    }\n  ];\n\n  // Filter configuration for ATLVS\n  const filterConfig: FilterConfig[] = [\n    {\n      key: 'status',\n      label: 'Status',\n      type: 'select',\n      options: [\n        { value: 'all', label: 'All Status' },\n        { value: 'pending', label: 'Pending' },\n        { value: 'approved', label: 'Approved' },\n        { value: 'rejected', label: 'Rejected' },\n        { value: 'skipped', label: 'Skipped' }\n      ]\n    },\n    {\n      key: 'priority',\n      label: 'Priority',\n      type: 'select',\n      options: [\n        { value: 'all', label: 'All Priorities' },\n        { value: 'low', label: 'Low' },\n        { value: 'medium', label: 'Medium' },\n        { value: 'high', label: 'High' },\n        { value: 'urgent', label: 'Urgent' }\n      ]\n    },\n    {\n      key: 'search',\n      label: 'Search',\n      type: 'text',\n      placeholder: 'Search approvals...'\n    }\n  ];\n\n  // Sort configuration for ATLVS\n  const sortConfig: SortConfig[] = [\n    { key: 'created_at', label: 'Created Date' },\n    { key: 'due_date', label: 'Due Date' },\n    { key: 'amount', label: 'Amount' },\n    { key: 'status', label: 'Status' },\n    { key: 'priority', label: 'Priority' }\n  ];\n\n  // Field visibility state\n  const [visibleFields, setVisibleFields] = useState<string[]>(\n    fieldConfig.map(field => field.key)\n  );\n  const [fieldOrder, setFieldOrder] = useState<string[]>(\n    fieldConfig.map(field => field.key)\n  );\n\n  // DataView configuration for ATLVS\n  const dataViewConfig: DataViewConfig = {\n    id: 'procurement-approvals',\n    name: 'Procurement Approvals',\n    viewType: 'grid',\n    defaultView: 'grid',\n    fields: fieldConfig.filter(field => visibleFields.includes(field.key)),\n    filters: filterConfig,\n    sorts: sortConfig,\n    actions: {\n      create: true,\n      edit: true,\n      delete: true,\n      export: true,\n      import: true,\n      bulkActions: true,\n      fieldVisibility: true,\n      fieldReordering: true\n    },\n    views: {\n      grid: { enabled: true, default: true },\n      list: { enabled: true },\n      kanban: { enabled: true, groupBy: 'status' },\n      calendar: { enabled: true, dateField: 'due_date' },\n      dashboard: { enabled: true }\n    },\n    preferences: {\n      visibleFields,\n      fieldOrder,\n      pageSize: 25,\n      defaultSort: { field: 'created_at', direction: 'desc' }\n    }\n  };\n\n  // Load approvals data\n  const loadApprovals = useCallback(async () => {\n    try {\n      setLoading(true);\n      \n      // Load approval steps\n      const { data: approvals, error } = await approvalsService.getApprovalSteps(\n        organizationId,\n        filters,\n        sort\n      );\n\n      if (error) {\n        console.error('Error loading approvals:', error);\n        return;\n      }\n\n      // Transform to DataRecord format for ATLVS\n      const transformedData: DataRecord[] = (approvals || []).map((approval: ApprovalStep) => ({\n        id: approval.id,\n        request_title: approval.request?.title || 'Unknown Request',\n        requester_name: (approval.request as unknown)?.requester?.name || 'Unknown',\n        status: approval.status,\n        priority: approval.priority || 'medium',\n        amount: approval.request?.estimated_total || 0,\n        due_date: approval.due_date,\n        created_at: approval.created_at,\n        updated_at: approval.updated_at,\n        record_type: 'approval'\n      }));\n\n      setData(transformedData);\n\n      // Load dashboard data\n      const { data: dashboard } = await approvalsService.getDashboardData(organizationId, userId);\n      setDashboardData(dashboard);\n\n    } catch (error) {\n      console.error('Error loading approvals:', error);\n    } finally {\n      setLoading(false);\n    }\n  }, [organizationId, userId, filters, sort]);\n\n  // Load data on mount and when dependencies change\n  useEffect(() => {\n    loadApprovals();\n  }, [loadApprovals]);\n\n  // Handle filter changes\n  const handleFilterChange = useCallback((newFilters: Partial<ApprovalFilters>) => {\n    setFilters(prev => ({ ...prev, ...newFilters }));\n  }, []);\n\n  // Handle sort changes\n  const handleSortChange = useCallback((newSort: ApprovalSortOptions) => {\n    setSort(newSort);\n  }, []);\n\n  // Handle approval actions\n  const handleApprovalAction = useCallback(async (\n    approvalId: string, \n    action: 'approve' | 'reject' | 'skip',\n    notes?: string\n  ) => {\n    try {\n      setLoading(true);\n      \n      const { error } = await approvalsService.processApproval(\n        organizationId,\n        approvalId,\n        action,\n        userId,\n        notes\n      );\n\n      if (error) {\n        console.error('Error processing approval:', error);\n        return;\n      }\n\n      // Reload data\n      await loadApprovals();\n      \n    } catch (error) {\n      console.error('Error processing approval:', error);\n    } finally {\n      setLoading(false);\n    }\n  }, [organizationId, userId, loadApprovals]);\n\n  // Handle record selection\n  const handleRecordSelect = useCallback((recordIds: string[]) => {\n    setSelectedApprovals(recordIds);\n  }, []);\n\n  // Handle record actions\n  const handleRecordAction = useCallback((action: string, record: DataRecord) => {\n    switch (action) {\n      case 'view':\n        setSelectedApproval(record as unknown);\n        setShowApprovalDrawer(true);\n        break;\n      case 'approve':\n        handleApprovalAction(record.id, 'approve');\n        break;\n      case 'reject':\n        handleApprovalAction(record.id, 'reject');\n        break;\n      case 'skip':\n        handleApprovalAction(record.id, 'skip');\n        break;\n    }\n  }, [handleApprovalAction]);\n\n  // Handle bulk actions\n  const handleBulkAction = useCallback(async (action: string, recordIds: string[]) => {\n    try {\n      setLoading(true);\n      \n      for (const recordId of recordIds) {\n        await handleApprovalAction(recordId, action as unknown);\n      }\n      \n      setSelectedApprovals([]);\n      \n    } catch (error) {\n      console.error('Error processing bulk action:', error);\n    } finally {\n      setLoading(false);\n    }\n  }, [handleApprovalAction]);\n\n  // Render dashboard cards\n  const renderDashboardCards = () => {\n    if (!dashboardData) return null;\n\n    return (\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-md mb-lg\">\n        <Card className=\"p-md\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm text-muted-foreground\">Pending Approvals</p>\n              <p className=\"text-2xl font-bold\">{dashboardData.pending_count}</p>\n            </div>\n            <Clock className=\"h-8 w-8 text-warning\" />\n          </div>\n        </Card>\n        \n        <Card className=\"p-md\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm text-muted-foreground\">Approved Today</p>\n              <p className=\"text-2xl font-bold\">{dashboardData.approved_today}</p>\n            </div>\n            <CheckCircle className=\"h-8 w-8 text-success\" />\n          </div>\n        </Card>\n        \n        <Card className=\"p-md\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm text-muted-foreground\">Overdue</p>\n              <p className=\"text-2xl font-bold\">{dashboardData.overdue_count}</p>\n            </div>\n            <AlertTriangle className=\"h-8 w-8 text-destructive\" />\n          </div>\n        </Card>\n        \n        <Card className=\"p-md\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm text-muted-foreground\">Total Value</p>\n              <p className=\"text-2xl font-bold\">\n                {new Intl.NumberFormat('en-US', {\n                  style: 'currency',\n                  currency: 'USD'\n                }).format(dashboardData.total_value || 0)}\n              </p>\n            </div>\n            <TrendingUp className=\"h-8 w-8 text-info\" />\n          </div>\n        </Card>\n      </div>\n    );\n  };\n\n  return (\n    <div className={`space-y-lg ${className || ''}`}>\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center gap-sm\">\n          <Users className=\"h-5 w-5\" />\n          <h3 className=\"text-lg font-semibold\">Procurement Approvals</h3>\n          <Badge variant=\"secondary\">\n            {data.length} approval{data.length !== 1 ? 's' : ''}\n          </Badge>\n        </div>\n        <div className=\"flex items-center gap-sm\">\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={() => setShowCreatePolicy(true)}\n          >\n            <Settings className=\"h-4 w-4 mr-sm\" />\n            Policies\n          </Button>\n          <Button variant=\"outline\" size=\"sm\">\n            <Upload className=\"h-4 w-4 mr-sm\" />\n            Import\n          </Button>\n          <Button variant=\"outline\" size=\"sm\">\n            <Download className=\"h-4 w-4 mr-sm\" />\n            Export\n          </Button>\n          <Button size=\"sm\" onClick={loadApprovals}>\n            <RefreshCw className=\"h-4 w-4 mr-sm\" />\n            Refresh\n          </Button>\n        </div>\n      </div>\n\n      {/* Dashboard Cards */}\n      {renderDashboardCards()}\n\n      {/* ATLVS DataViews */}\n      <DataViewProvider config={dataViewConfig}>\n        <div className=\"space-y-md\">\n          {/* Data Actions */}\n          <DataActions\n            selectedCount={selectedApprovals.length}\n            onBulkAction={handleBulkAction}\n            onFilterChange={handleFilterChange}\n            onSortChange={handleSortChange}\n            filters={filters}\n            sort={sort}\n          />\n\n          {/* View Switcher and Data Display */}\n          <ViewSwitcher\n            data={data}\n            loading={loading}\n            selectedRecords={selectedApprovals}\n            onRecordSelect={handleRecordSelect}\n            onRecordAction={handleRecordAction}\n            fieldConfig={fieldConfig}\n          />\n        </div>\n      </DataViewProvider>\n\n      {/* Approval Details Drawer */}\n      <AppDrawer\n        open={showApprovalDrawer}\n        onClose={() => setShowApprovalDrawer(false)}\n        title=\"Approval Details\"\n        size=\"md\"\n      >\n        {selectedApproval && (\n          <div className=\"space-y-md\">\n            <div>\n              <h4 className=\"font-medium mb-sm\">Request Information</h4>\n              <p className=\"text-sm text-muted-foreground\">\n                {selectedApproval.request?.title || 'No title'}\n              </p>\n            </div>\n            \n            <div>\n              <h4 className=\"font-medium mb-sm\">Status</h4>\n              <Badge variant={\n                selectedApproval.status === 'approved' ? 'success' :\n                selectedApproval.status === 'rejected' ? 'destructive' :\n                selectedApproval.status === 'pending' ? 'warning' : 'secondary'\n              }>\n                {selectedApproval.status}\n              </Badge>\n            </div>\n\n            <div className=\"flex gap-sm pt-md border-t\">\n              <Button\n                variant=\"outline\"\n                onClick={() => handleApprovalAction(selectedApproval.id, 'approve')}\n                disabled={selectedApproval.status !== 'pending'}\n              >\n                <CheckCircle className=\"h-4 w-4 mr-sm\" />\n                Approve\n              </Button>\n              <Button\n                variant=\"outline\"\n                onClick={() => handleApprovalAction(selectedApproval.id, 'reject')}\n                disabled={selectedApproval.status !== 'pending'}\n              >\n                <XCircle className=\"h-4 w-4 mr-sm\" />\n                Reject\n              </Button>\n            </div>\n          </div>\n        )}\n      </AppDrawer>\n\n      {/* Create Policy Drawer */}\n      <CreatePolicyClient\n        open={showCreatePolicy}\n        onClose={() => setShowCreatePolicy(false)}\n        onSuccess={() => {\n          setShowCreatePolicy(false);\n          loadApprovals();\n        }}\n        organizationId={organizationId}\n      />\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ghxstship/apps/web/app/(app)/(shell)/procurement/approvals/ApprovalsClient_Old.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'approvalsService'. Either include it or remove the dependency array.","line":208,"column":6,"nodeType":"ArrayExpression","endLine":208,"endColumn":30,"suggestions":[{"desc":"Update the dependencies array to be: [approvalsService, organizationId, userId]","fix":{"range":[6133,6157],"text":"[approvalsService, organizationId, userId]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'approvalsService'. Either include it or remove the dependency array. Outer scope values like 'activeTab' aren't valid dependencies because mutating them doesn't re-render the component.","line":251,"column":6,"nodeType":"ArrayExpression","endLine":251,"endColumn":62,"suggestions":[{"desc":"Update the dependencies array to be: [approvalsService, organizationId, userId, filters, sortConfig]","fix":{"range":[7281,7337],"text":"[approvalsService, organizationId, userId, filters, sortConfig]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has an unnecessary dependency: 'activeTab'. Either exclude it or remove the dependency array. Outer scope values like 'activeTab' aren't valid dependencies because mutating them doesn't re-render the component.","line":260,"column":6,"nodeType":"ArrayExpression","endLine":260,"endColumn":55,"suggestions":[{"desc":"Update the dependencies array to be: [loadDashboardData, loadApprovalSteps]","fix":{"range":[7563,7612],"text":"[loadDashboardData, loadApprovalSteps]"}}]},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'DataViewProvider' is not defined.","line":547,"column":12,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":547,"endColumn":28},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'DataViews' is not defined.","line":548,"column":14,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":548,"endColumn":23},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'UniversalDrawer' is not defined.","line":566,"column":10,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":566,"endColumn":25},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'CreatePolicyClient' is not defined.","line":625,"column":10,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":625,"endColumn":28}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { CheckCircle, XCircle, Clock, AlertTriangle, Users, TrendingUp, Filter, Settings, Plus, Search, Download, Upload, RefreshCw, Eye, Edit, Trash2, MoreHorizontal, Grid3X3, List, LayoutDashboard, Calendar, BarChart3 } from \"lucide-react\";\nimport { useState, useEffect, useCallback, useMemo } from 'react';\nimport { useTranslations } from 'next-intl';\nimport { createBrowserClient } from '@ghxstship/auth';\nimport { \n  Button, \n  Badge, \n  Card, \n  Tabs,\n  TabsContent,\n  TabsList,\n  TabsTrigger,\n  Input,\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n  Checkbox\n} from '@ghxstship/ui';\nimport { \n  DataGrid,\n  KanbanBoard,\n  ListView,\n  CalendarView,\n  DashboardView,\n  ViewSwitcher,\n  DataActions\n} from '@ghxstship/ui/components/DataViews';\nimport AppDrawer from '@/app/_components/shared/AppDrawer';\nimport { ApprovalsService } from './lib/approvalsService';\nimport type { \n  ApprovalStep, \n  ApprovalFilters, \n  ApprovalSortOptions,\n  ApprovalStatistics,\n  ApprovalDashboardData\n} from './types';\n\n// ATLVS View Types\ntype ApprovalViewType = 'dashboard' | 'grid' | 'list' | 'kanban' | 'calendar';\n\n// ATLVS Data Record\ninterface ApprovalRecord extends ApprovalStep {\n  record_type: 'approval';\n}\n\ninterface ApprovalsClientProps {\n  className?: string;\n  organizationId?: string;\n  userId?: string;\n}\n\nexport default function ApprovalsClient({ \n  className, \n  organizationId = 'default-org',\n  userId = 'current-user-id'\n}: ApprovalsClientProps) {\n  const t = useTranslations();\n  const supabase = createBrowserClient();\n  const [loading, setLoading] = useState(false);\n  const [data, setData] = useState<ApprovalRecord[]>([]);\n  const [dashboardData, setDashboardData] = useState<ApprovalDashboardData | null>(null);\n  const [selectedApprovals, setSelectedApprovals] = useState<string[]>([]);\n  const [viewMode, setViewMode] = useState<ApprovalViewType>('dashboard');\n  const [showCreatePolicy, setShowCreatePolicy] = useState(false);\n  const [showApprovalDrawer, setShowApprovalDrawer] = useState(false);\n  const [selectedApproval, setSelectedApproval] = useState<ApprovalStep | null>(null);\n  \n  // Filters and sorting\n  const [filters, setFilters] = useState<ApprovalFilters>({\n    status: 'all',\n    priority: 'all',\n    search: ''\n  });\n  const [sortConfig, setSortConfig] = useState<ApprovalSortOptions>({\n    field: 'created_at',\n    direction: 'desc'\n  });\n\n  const approvalsService = new ApprovalsService();\n\n  // Field configuration for approval steps\n  const fieldConfig: FieldConfig[] = [\n    {\n      key: 'request',\n      label: 'Request',\n      type: 'text',\n      sortable: true,\n      searchable: true,\n      render: (value: unknown) => (\n        <div>\n          <p className=\"font-medium\">{value?.title || 'Unknown Request'}</p>\n          <p className=\"text-sm text-muted-foreground\">\n            by {value?.requester?.name || 'Unknown'}\n          </p>\n        </div>\n      )\n    },\n    {\n      key: 'status',\n      label: 'Status',\n      type: 'select',\n      options: [\n        { value: 'pending', label: 'Pending' },\n        { value: 'approved', label: 'Approved' },\n        { value: 'rejected', label: 'Rejected' },\n        { value: 'skipped', label: 'Skipped' }\n      ],\n      filterable: true,\n      sortable: true,\n      render: (value: string) => {\n        const statusConfig = {\n          pending: { color: 'warning' as const, icon: Clock },\n          approved: { color: 'success' as const, icon: CheckCircle },\n          rejected: { color: 'destructive' as const, icon: XCircle },\n          skipped: { color: 'secondary' as const, icon: AlertTriangle }\n        };\n        const config = statusConfig[value as keyof typeof statusConfig] || statusConfig.pending;\n        const Icon = config.icon;\n        return (\n          <Badge variant={config.color} className=\"flex items-center gap-1\">\n            <Icon className=\"h-3 w-3\" />\n            {value.charAt(0).toUpperCase() + value.slice(1)}\n          </Badge>\n        );\n      }\n    },\n    {\n      key: 'step_order',\n      label: 'Step',\n      type: 'number',\n      sortable: true,\n      render: (value: number) => (\n        <Badge variant=\"outline\">Step {value}</Badge>\n      )\n    },\n    {\n      key: 'approver',\n      label: 'Approver',\n      type: 'text',\n      sortable: true,\n      render: (value: unknown) => (\n        <div className=\"flex items-center gap-2\">\n          <div className=\"h-8 w-8 rounded-full bg-primary/10 flex items-center justify-center\">\n            <span className=\"text-xs font-medium\">\n              {value?.name?.charAt(0)?.toUpperCase() || '?'}\n            </span>\n          </div>\n          <div>\n            <p className=\"font-medium\">{value?.name || 'Unknown'}</p>\n            <p className=\"text-xs text-muted-foreground\">{value?.email}</p>\n          </div>\n        </div>\n      )\n    },\n    {\n      key: 'estimated_total',\n      label: 'Amount',\n      type: 'currency',\n      sortable: true,\n      render: (value: number, record: DataRecord) => {\n        const currency = record.request?.currency || 'USD';\n        return new Intl.NumberFormat('en-US', {\n          style: 'currency',\n          currency: currency\n        }).format(record.request?.estimated_total || 0);\n      }\n    },\n    {\n      key: 'created_at',\n      label: 'Requested',\n      type: 'date',\n      sortable: true\n    },\n    {\n      key: 'approved_at',\n      label: 'Decided',\n      type: 'date',\n      sortable: true,\n      render: (value: string) => value ? new Date(value).toLocaleDateString() : '-'\n    }\n  ];\n\n  // Load dashboard data\n  const loadDashboardData = useCallback(async () => {\n    setLoading(true);\n    try {\n      const { data: dashboard, error } = await approvalsService.getDashboardData(\n        organizationId,\n        userId\n      );\n\n      if (error) {\n        toast.error('Failed to load dashboard data', { description: error });\n        return;\n      }\n\n      setDashboardData(dashboard);\n    } catch (error) {\n      console.error('Error loading dashboard data:', error);\n      toast.error('Failed to load dashboard data');\n    } finally {\n      setLoading(false);\n    }\n  }, [organizationId, userId]);\n\n  // Load approval steps data\n  const loadApprovalSteps = useCallback(async () => {\n    setLoading(true);\n    try {\n      let approvals;\n      \n      if (activeTab === 'pending') {\n        approvals = await approvalsService.getPendingApprovals(\n          organizationId,\n          userId,\n          filters,\n          sortConfig\n        );\n      } else {\n        approvals = await approvalsService.getApprovalSteps(\n          organizationId,\n          filters,\n          sortConfig\n        );\n      }\n\n      if (approvals.error) {\n        toast.error('Failed to load approvals', { description: approvals.error });\n        return;\n      }\n\n      // Transform data for DataViews\n      const transformedData: DataRecord[] = approvals.data.map(approval => ({\n        id: approval.id!,\n        ...approval,\n        record_type: 'approval',\n        estimated_total: approval.request?.estimated_total || 0\n      }));\n\n      setData(transformedData);\n    } catch (error) {\n      console.error('Error loading approvals:', error);\n      toast.error('Failed to load approvals');\n    } finally {\n      setLoading(false);\n    }\n  }, [organizationId, userId, activeTab, filters, sortConfig]);\n\n  // Load data based on active tab\n  useEffect(() => {\n    if (activeTab === 'dashboard') {\n      loadDashboardData();\n    } else if (activeTab === 'pending' || activeTab === 'all') {\n      loadApprovalSteps();\n    }\n  }, [activeTab, loadDashboardData, loadApprovalSteps]);\n\n  // Handle record selection\n  const handleRecordSelect = (record: DataRecord) => {\n    setSelectedRecord(record);\n    setDrawerOpen(true);\n  };\n\n  // Handle approval actions\n  const handleRecordAction = async (action: string, record: DataRecord) => {\n    try {\n      switch (action) {\n        case 'approve':\n          if (record.status === 'pending') {\n            const { error } = await approvalsService.makeDecision(record.id, {\n              step_id: record.id,\n              action: 'approve',\n              notes: 'Approved via UI'\n            });\n            if (error) {\n              toast.error('Failed to approve', { description: error });\n            } else {\n              toast.success('Request approved');\n              loadApprovalSteps();\n            }\n          }\n          break;\n        case 'reject':\n          if (record.status === 'pending') {\n            const { error } = await approvalsService.makeDecision(record.id, {\n              step_id: record.id,\n              action: 'reject',\n              notes: 'Rejected via UI'\n            });\n            if (error) {\n              toast.error('Failed to reject', { description: error });\n            } else {\n              toast.success('Request rejected');\n              loadApprovalSteps();\n            }\n          }\n          break;\n      }\n    } catch (error) {\n      console.error('Error performing action:', error);\n      toast.error(`Failed to ${action} request`);\n    }\n  };\n\n  // Handle search\n  const handleSearch = (query: string) => {\n    console.log('Search:', query);\n  };\n\n  // Handle filter changes\n  const handleFilter = (newFilters: FilterConfig[]) => {\n    const approvalFilters: ApprovalFilters = {};\n    \n    newFilters.forEach(filter => {\n      switch (filter.field) {\n        case 'status':\n          approvalFilters.status = filter.value as unknown[];\n          break;\n      }\n    });\n\n    setFilters(approvalFilters);\n  };\n\n  // Handle sort changes\n  const handleSort = (sorts: SortConfig[]) => {\n    if (sorts.length > 0) {\n      const sort = sorts[0];\n      setSortConfig({\n        field: sort.field as unknown,\n        direction: sort.direction\n      });\n    }\n  };\n\n  // DataView configuration\n  const dataViewConfig: DataViewConfig = {\n    id: 'procurement-approvals',\n    name: 'Procurement Approvals',\n    viewType: 'grid',\n    defaultView: 'grid',\n    fields: fieldConfig,\n    data: data,\n    loading: loading,\n    onRecordSelect: handleRecordSelect,\n    onRecordAction: handleRecordAction,\n    onSearch: handleSearch,\n    onFilter: handleFilter,\n    onSort: handleSort,\n    onRefresh: activeTab === 'dashboard' ? loadDashboardData : loadApprovalSteps,\n    actions: [\n      {\n        id: 'approve',\n        label: 'Approve',\n        icon: 'check',\n        variant: 'success',\n        condition: (record) => record.status === 'pending'\n      },\n      {\n        id: 'reject',\n        label: 'Reject',\n        icon: 'x',\n        variant: 'destructive',\n        condition: (record) => record.status === 'pending'\n      }\n    ]\n  };\n\n  // Render dashboard view\n  const renderDashboard = () => {\n    if (!dashboardData) return null;\n\n    return (\n      <div className=\"space-y-6\">\n        {/* Statistics Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n          <Card className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Pending Approvals</p>\n                <p className=\"text-2xl font-semibold\">{dashboardData.statistics.total_pending}</p>\n              </div>\n              <Clock className=\"h-8 w-8 text-yellow-500\" />\n            </div>\n          </Card>\n          \n          <Card className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Approved</p>\n                <p className=\"text-2xl font-semibold\">{dashboardData.statistics.total_approved}</p>\n              </div>\n              <CheckCircle className=\"h-8 w-8 text-green-500\" />\n            </div>\n          </Card>\n          \n          <Card className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Approval Rate</p>\n                <p className=\"text-2xl font-semibold\">{dashboardData.statistics.approval_rate.toFixed(1)}%</p>\n              </div>\n              <TrendingUp className=\"h-8 w-8 text-blue-500\" />\n            </div>\n          </Card>\n          \n          <Card className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Avg. Time</p>\n                <p className=\"text-2xl font-semibold\">{dashboardData.statistics.average_approval_time.toFixed(1)}h</p>\n              </div>\n              <Users className=\"h-8 w-8 text-purple-500\" />\n            </div>\n          </Card>\n        </div>\n\n        {/* Pending Approvals */}\n        <Card className=\"p-6\">\n          <h3 className=\"text-lg font-semibold mb-4\">Pending Your Approval</h3>\n          {dashboardData.pending_approvals.length > 0 ? (\n            <div className=\"space-y-3\">\n              {dashboardData.pending_approvals.map((approval) => (\n                <div key={approval.id} className=\"flex items-center justify-between p-3 border rounded-lg\">\n                  <div className=\"flex-1\">\n                    <p className=\"font-medium\">{approval.request?.title}</p>\n                    <p className=\"text-sm text-muted-foreground\">\n                      Requested by {(approval.request as unknown)?.requester?.name || 'Unknown'} • \n                      {new Intl.NumberFormat('en-US', {\n                        style: 'currency',\n                        currency: 'USD'\n                      }).format(approval.request?.estimated_total || 0)}\n                    </p>\n                  </div>\n                  <div className=\"flex gap-2\">\n                    <Button \n                      size=\"sm\" \n                      variant=\"outline\"\n                      onClick={() => handleRecordAction('approve', approval as unknown)}\n                    >\n                      <CheckCircle className=\"h-4 w-4 mr-1\" />\n                      Approve\n                    </Button>\n                    <Button \n                      size=\"sm\" \n                      variant=\"outline\"\n                      onClick={() => handleRecordAction('reject', approval as unknown)}\n                    >\n                      <XCircle className=\"h-4 w-4 mr-1\" />\n                      Reject\n                    </Button>\n                  </div>\n                </div>\n              ))}\n            </div>\n          ) : (\n            <p className=\"text-muted-foreground\">No pending approvals</p>\n          )}\n        </Card>\n\n        {/* Overdue Approvals */}\n        {dashboardData.overdue_approvals.length > 0 && (\n          <Card className=\"p-6\">\n            <h3 className=\"text-lg font-semibold mb-4 text-red-600\">Overdue Approvals</h3>\n            <div className=\"space-y-3\">\n              {dashboardData.overdue_approvals.map((approval) => (\n                <div key={approval.id} className=\"flex items-center justify-between p-3 border border-red-200 rounded-lg bg-red-50\">\n                  <div className=\"flex-1\">\n                    <p className=\"font-medium\">{approval.request?.title}</p>\n                    <p className=\"text-sm text-muted-foreground\">\n                      Pending for {Math.floor((Date.now() - new Date(approval.created_at!).getTime()) / (1000 * 60 * 60))} hours\n                    </p>\n                  </div>\n                  <AlertTriangle className=\"h-5 w-5 text-red-500\" />\n                </div>\n              ))}\n            </div>\n          </Card>\n        )}\n      </div>\n    );\n  };\n\n  return (\n    <div className={className}>\n      <div className=\"space-y-6\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-2xl font-semibold text-foreground\">Procurement Approvals</h1>\n            <p className=\"text-sm text-muted-foreground\">\n              Manage approval workflows and make approval decisions\n            </p>\n          </div>\n          <div className=\"flex gap-2\">\n            <Button \n              variant=\"outline\"\n              onClick={() => setCreatePolicyOpen(true)}\n              className=\"flex items-center gap-2\"\n            >\n              <Settings className=\"h-4 w-4\" />\n              Policies\n            </Button>\n            <Button \n              onClick={() => setCreatePolicyOpen(true)}\n              className=\"flex items-center gap-2\"\n            >\n              <Plus className=\"h-4 w-4\" />\n              New Policy\n            </Button>\n          </div>\n        </div>\n\n        {/* Tab Navigation */}\n        <div className=\"border-b\">\n          <nav className=\"flex space-x-8\">\n            {[\n              { key: 'dashboard', label: 'Dashboard', icon: TrendingUp },\n              { key: 'pending', label: 'Pending', icon: Clock },\n              { key: 'all', label: 'All Approvals', icon: CheckCircle },\n              { key: 'policies', label: 'Policies', icon: Settings }\n            ].map(({ key, label, icon: Icon }) => (\n              <button\n                key={key}\n                onClick={() => setActiveTab(key as unknown)}\n                className={`flex items-center gap-2 py-2 px-1 border-b-2 font-medium text-sm ${\n                  activeTab === key\n                    ? 'border-primary text-primary'\n                    : 'border-transparent text-muted-foreground hover:text-foreground'\n                }`}\n              >\n                <Icon className=\"h-4 w-4\" />\n                {label}\n              </button>\n            ))}\n          </nav>\n        </div>\n\n        {/* Content */}\n        {activeTab === 'dashboard' && renderDashboard()}\n        \n        {(activeTab === 'pending' || activeTab === 'all') && (\n          <DataViewProvider config={dataViewConfig}>\n            <DataViews />\n          </DataViewProvider>\n        )}\n\n        {activeTab === 'policies' && (\n          <div className=\"text-center py-12\">\n            <Settings className=\"h-12 w-12 mx-auto text-muted-foreground mb-4\" />\n            <h3 className=\"text-lg font-medium mb-2\">Approval Policies</h3>\n            <p className=\"text-muted-foreground mb-4\">\n              Configure approval workflows and policies for your organization\n            </p>\n            <Button onClick={() => setCreatePolicyOpen(true)}>\n              Create First Policy\n            </Button>\n          </div>\n        )}\n\n        {/* Approval Details Drawer */}\n        <UniversalDrawer\n          open={drawerOpen}\n          onClose={() => setDrawerOpen(false)}\n          record={selectedRecord}\n          fields={fieldConfig}\n          mode=\"view\"\n          title=\"Approval Details\"\n          tabs={[\n            {\n              key: 'details',\n              label: 'Details',\n              content: selectedRecord ? (\n                <div className=\"space-y-4\">\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <div>\n                      <label className=\"text-sm font-medium text-muted-foreground\">Request</label>\n                      <p className=\"text-sm\">{selectedRecord.request?.title}</p>\n                    </div>\n                    <div>\n                      <label className=\"text-sm font-medium text-muted-foreground\">Status</label>\n                      <div className=\"mt-1\">\n                        {fieldConfig.find(f => f.key === 'status')?.render?.(selectedRecord.status, selectedRecord)}\n                      </div>\n                    </div>\n                    <div>\n                      <label className=\"text-sm font-medium text-muted-foreground\">Approver</label>\n                      <p className=\"text-sm\">{selectedRecord.approver?.name}</p>\n                    </div>\n                    <div>\n                      <label className=\"text-sm font-medium text-muted-foreground\">Step</label>\n                      <p className=\"text-sm\">Step {selectedRecord.step_order}</p>\n                    </div>\n                    <div>\n                      <label className=\"text-sm font-medium text-muted-foreground\">Amount</label>\n                      <p className=\"text-sm\">\n                        {new Intl.NumberFormat('en-US', {\n                          style: 'currency',\n                          currency: selectedRecord.request?.currency || 'USD'\n                        }).format(selectedRecord.request?.estimated_total || 0)}\n                      </p>\n                    </div>\n                    <div>\n                      <label className=\"text-sm font-medium text-muted-foreground\">Requester</label>\n                      <p className=\"text-sm\">{selectedRecord.request?.requester?.name}</p>\n                    </div>\n                  </div>\n                  {selectedRecord.notes && (\n                    <div>\n                      <label className=\"text-sm font-medium text-muted-foreground\">Notes</label>\n                      <p className=\"text-sm mt-1\">{selectedRecord.notes}</p>\n                    </div>\n                  )}\n                </div>\n              ) : null\n            }\n          ]}\n        />\n\n        {/* Create Policy Drawer */}\n        <CreatePolicyClient\n          open={createPolicyOpen}\n          onClose={() => setCreatePolicyOpen(false)}\n          onSuccess={() => {\n            setCreatePolicyOpen(false);\n            toast.success('Policy created successfully');\n          }}\n          organizationId={organizationId}\n        />\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ghxstship/apps/web/app/(app)/(shell)/procurement/approvals/CreatePolicyClient.tsx","messages":[{"ruleId":"react/jsx-no-undef","severity":2,"message":"'X' is not defined.","line":122,"column":16,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":122,"endColumn":17},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Save' is not defined.","line":481,"column":22,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":481,"endColumn":26}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\nimport { User, FileText, Settings, Award, Calendar, TrendingUp, Activity, Clock, Plus, Search, Play, Trash2 } from \"lucide-react\";\nimport React, { useState } from 'react';\nimport { useForm, useFieldArray } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { Button } from '@ghxstship/ui/components/Button';\nimport { Input } from '@ghxstship/ui/components/Input';\nimport { Textarea } from '@ghxstship/ui/components/Textarea';\nimport { Select } from '@ghxstship/ui/components/Select';\nimport { Badge } from '@ghxstship/ui/components/Badge';\nimport { Card } from '@ghxstship/ui/components/Card';\nimport { useToastContext } from '@ghxstship/ui/components/Toast';\nimport { ApprovalsService } from './lib/approvalsService';\nimport { CreateApprovalPolicySchema, type CreateApprovalPolicy } from './types';\n\ninterface CreatePolicyClientProps {\n  open: boolean;\n  onClose: () => void;\n  onSuccess: () => void;\n  organizationId: string;\n  initialData?: Partial<CreateApprovalPolicy>;\n}\n\nexport function CreatePolicyClient({\n  open,\n  onClose,\n  onSuccess,\n  organizationId,\n  initialData\n}: CreatePolicyClientProps) {\n  const [loading, setLoading] = useState(false);\n  const [currentStep, setCurrentStep] = useState(1);\n  const { toast } = useToastContext();\n  const approvalsService = new ApprovalsService();\n\n  const form = useForm<CreateApprovalPolicy>({\n    resolver: zodResolver(CreateApprovalPolicySchema),\n    defaultValues: {\n      organization_id: organizationId,\n      name: '',\n      description: '',\n      conditions: {},\n      approval_steps: [\n        {\n          step: 1,\n          role: 'manager',\n          description: 'Manager approval',\n          conditions: {}\n        }\n      ],\n      is_active: true,\n      ...initialData\n    }\n  });\n\n  const { fields, append, remove } = useFieldArray({\n    control: form.control,\n    name: 'approval_steps'\n  });\n\n  // Add new approval step\n  const addApprovalStep = () => {\n    const nextStep = fields.length + 1;\n    append({\n      step: nextStep,\n      role: 'admin',\n      description: `Step ${nextStep} approval`,\n      conditions: {}\n    });\n  };\n\n  // Remove approval step\n  const removeApprovalStep = (index: number) => {\n    if (fields.length > 1) {\n      remove(index);\n      // Reorder remaining steps\n      const currentSteps = form.getValues('approval_steps');\n      currentSteps.forEach((step, idx) => {\n        form.setValue(`approval_steps.${idx}.step`, idx + 1);\n      });\n    }\n  };\n\n  // Handle form submission\n  const onSubmit = async (data: CreateApprovalPolicy) => {\n    setLoading(true);\n    try {\n      const { data: newPolicy, error } = await approvalsService.createPolicy(data);\n\n      if (error) {\n        toast.error('Failed to create policy', error);\n        return;\n      }\n\n      toast.success('Approval policy created successfully');\n      form.reset();\n      onSuccess();\n    } catch (error) {\n      console.error('Error creating policy:', error);\n      toast.error('Failed to create policy');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  if (!open) return null;\n\n  return (\n    <div className=\"fixed inset-0 z-50 overflow-hidden\">\n      <div className=\"absolute inset-0 bg-black/50\" onClick={onClose} />\n      <div className=\"absolute right-0 top-0 h-full w-full max-w-4xl bg-background shadow-xl\">\n        <div className=\"flex h-full flex-col\">\n          {/* Header */}\n          <div className=\"flex items-center justify-between border-b p-6\">\n            <div>\n              <h2 className=\"text-lg font-semibold\">Create Approval Policy</h2>\n              <p className=\"text-sm text-muted-foreground\">\n                Configure approval workflows for procurement requests\n              </p>\n            </div>\n            <Button variant=\"ghost\" size=\"sm\" onClick={onClose}>\n              <X className=\"h-4 w-4\" />\n            </Button>\n          </div>\n\n          {/* Progress Steps */}\n          <div className=\"border-b p-6\">\n            <div className=\"flex items-center space-x-4\">\n              {[\n                { step: 1, title: 'Basic Info' },\n                { step: 2, title: 'Conditions' },\n                { step: 3, title: 'Approval Steps' },\n                { step: 4, title: 'Review' }\n              ].map(({ step, title }) => (\n                <div key={step} className=\"flex items-center\">\n                  <div\n                    className={`flex h-8 w-8 items-center justify-center rounded-full text-sm font-medium ${\n                      currentStep >= step\n                        ? 'bg-primary text-primary-foreground'\n                        : 'bg-muted text-muted-foreground'\n                    }`}\n                  >\n                    {step}\n                  </div>\n                  <span className=\"ml-2 text-sm font-medium\">{title}</span>\n                  {step < 4 && <div className=\"ml-4 h-px w-8 bg-border\" />}\n                </div>\n              ))}\n            </div>\n          </div>\n\n          {/* Content */}\n          <div className=\"flex-1 overflow-y-auto p-6\">\n            <form className=\"space-y-6\">\n              {/* Step 1: Basic Information */}\n              {currentStep === 1 && (\n                <div className=\"space-y-6\">\n                  <div>\n                    <label className=\"text-sm font-medium\">Policy Name *</label>\n                    <Input\n                      {...form.register('name')}\n                      placeholder=\"Enter policy name\"\n                      error={form.formState.errors.name?.message}\n                    />\n                  </div>\n\n                  <div>\n                    <label className=\"text-sm font-medium\">Description</label>\n                    <Textarea\n                      {...form.register('description')}\n                      placeholder=\"Describe when this policy applies\"\n                      rows={3}\n                    />\n                  </div>\n\n                  <div className=\"flex items-center space-x-2\">\n                    <input\n                      type=\"checkbox\"\n                      {...form.register('is_active')}\n                      className=\"rounded border-border\"\n                    />\n                    <label className=\"text-sm font-medium\">Active Policy</label>\n                  </div>\n                </div>\n              )}\n\n              {/* Step 2: Conditions */}\n              {currentStep === 2 && (\n                <div className=\"space-y-6\">\n                  <div>\n                    <h3 className=\"text-lg font-medium mb-4\">Policy Conditions</h3>\n                    <p className=\"text-sm text-muted-foreground mb-6\">\n                      Define when this approval policy should be applied to procurement requests.\n                    </p>\n                  </div>\n\n                  <Card className=\"p-4\">\n                    <h4 className=\"font-medium mb-4\">Amount Threshold</h4>\n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <div>\n                        <label className=\"text-sm font-medium\">Minimum Amount</label>\n                        <Input\n                          type=\"number\"\n                          min=\"0\"\n                          step=\"0.01\"\n                          placeholder=\"0.00\"\n                          onChange={(e) => {\n                            const conditions = form.getValues('conditions') || {};\n                            conditions.min_amount = parseFloat(e.target.value) || 0;\n                            form.setValue('conditions', conditions);\n                          }}\n                        />\n                      </div>\n                      <div>\n                        <label className=\"text-sm font-medium\">Maximum Amount</label>\n                        <Input\n                          type=\"number\"\n                          min=\"0\"\n                          step=\"0.01\"\n                          placeholder=\"No limit\"\n                          onChange={(e) => {\n                            const conditions = form.getValues('conditions') || {};\n                            conditions.max_amount = parseFloat(e.target.value) || undefined;\n                            form.setValue('conditions', conditions);\n                          }}\n                        />\n                      </div>\n                    </div>\n                  </Card>\n\n                  <Card className=\"p-4\">\n                    <h4 className=\"font-medium mb-4\">Categories</h4>\n                    <div className=\"space-y-2\">\n                      {['equipment', 'supplies', 'services', 'materials', 'software', 'maintenance'].map(category => (\n                        <div key={category} className=\"flex items-center space-x-2\">\n                          <input\n                            type=\"checkbox\"\n                            className=\"rounded border-border\"\n                            onChange={(e) => {\n                              const conditions = form.getValues('conditions') || {};\n                              const categories = conditions.categories || [];\n                              if (e.target.checked) {\n                                categories.push(category);\n                              } else {\n                                const index = categories.indexOf(category);\n                                if (index > -1) categories.splice(index, 1);\n                              }\n                              conditions.categories = categories;\n                              form.setValue('conditions', conditions);\n                            }}\n                          />\n                          <label className=\"text-sm capitalize\">{category}</label>\n                        </div>\n                      ))}\n                    </div>\n                  </Card>\n\n                  <Card className=\"p-4\">\n                    <h4 className=\"font-medium mb-4\">Departments</h4>\n                    <Input\n                      placeholder=\"Enter departments (comma-separated)\"\n                      onChange={(e) => {\n                        const conditions = form.getValues('conditions') || {};\n                        conditions.departments = e.target.value.split(',').map(d => d.trim()).filter(Boolean);\n                        form.setValue('conditions', conditions);\n                      }}\n                    />\n                  </Card>\n                </div>\n              )}\n\n              {/* Step 3: Approval Steps */}\n              {currentStep === 3 && (\n                <div className=\"space-y-6\">\n                  <div className=\"flex items-center justify-between\">\n                    <h3 className=\"text-lg font-medium\">Approval Steps</h3>\n                    <Button type=\"button\" variant=\"outline\" onClick={addApprovalStep}>\n                      <Plus className=\"h-4 w-4 mr-2\" />\n                      Add Step\n                    </Button>\n                  </div>\n\n                  {fields.map((field, index) => (\n                    <Card key={field.id} className=\"p-4\">\n                      <div className=\"flex items-center justify-between mb-4\">\n                        <h4 className=\"font-medium\">Step {index + 1}</h4>\n                        {fields.length > 1 && (\n                          <Button\n                            type=\"button\"\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            onClick={() => removeApprovalStep(index)}\n                          >\n                            <Trash2 className=\"h-4 w-4\" />\n                          </Button>\n                        )}\n                      </div>\n\n                      <div className=\"grid grid-cols-1 gap-4 md:grid-cols-2\">\n                        <div>\n                          <label className=\"text-sm font-medium\">Approver Role *</label>\n                          <Select {...form.register(`approval_steps.${index}.role`)}>\n                            <option value=\"manager\">Manager</option>\n                            <option value=\"admin\">Admin</option>\n                            <option value=\"owner\">Owner</option>\n                            <option value=\"finance\">Finance Team</option>\n                            <option value=\"procurement\">Procurement Team</option>\n                          </Select>\n                        </div>\n\n                        <div>\n                          <label className=\"text-sm font-medium\">Step Order</label>\n                          <Input\n                            type=\"number\"\n                            min=\"1\"\n                            value={index + 1}\n                            disabled\n                            className=\"bg-muted\"\n                          />\n                        </div>\n\n                        <div className=\"md:col-span-2\">\n                          <label className=\"text-sm font-medium\">Description *</label>\n                          <Input\n                            {...form.register(`approval_steps.${index}.description`)}\n                            placeholder=\"Describe this approval step\"\n                          />\n                        </div>\n                      </div>\n\n                      {/* Step-specific conditions */}\n                      <div className=\"mt-4 p-3 bg-muted rounded\">\n                        <h5 className=\"text-sm font-medium mb-2\">Step Conditions (Optional)</h5>\n                        <div className=\"grid grid-cols-2 gap-4\">\n                          <div>\n                            <label className=\"text-xs text-muted-foreground\">Min Amount for this step</label>\n                            <Input\n                              type=\"number\"\n                              min=\"0\"\n                              step=\"0.01\"\n                              placeholder=\"0.00\"\n                              onChange={(e) => {\n                                const currentSteps = form.getValues('approval_steps');\n                                currentSteps[index].conditions = {\n                                  ...currentSteps[index].conditions,\n                                  min_amount: parseFloat(e.target.value) || 0\n                                };\n                                form.setValue('approval_steps', currentSteps);\n                              }}\n                            />\n                          </div>\n                          <div>\n                            <label className=\"text-xs text-muted-foreground\">Required</label>\n                            <div className=\"flex items-center mt-2\">\n                              <input\n                                type=\"checkbox\"\n                                defaultChecked={true}\n                                className=\"rounded border-border\"\n                                onChange={(e) => {\n                                  const currentSteps = form.getValues('approval_steps');\n                                  currentSteps[index].conditions = {\n                                    ...currentSteps[index].conditions,\n                                    required: e.target.checked\n                                  };\n                                  form.setValue('approval_steps', currentSteps);\n                                }}\n                              />\n                              <span className=\"ml-2 text-xs\">Required step</span>\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n                    </Card>\n                  ))}\n                </div>\n              )}\n\n              {/* Step 4: Review */}\n              {currentStep === 4 && (\n                <div className=\"space-y-6\">\n                  <h3 className=\"text-lg font-medium\">Review Policy</h3>\n                  \n                  {/* Basic Info Summary */}\n                  <Card className=\"p-4\">\n                    <h4 className=\"font-medium mb-4\">Basic Information</h4>\n                    <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                      <div>\n                        <span className=\"text-muted-foreground\">Name:</span>\n                        <p className=\"font-medium\">{form.watch('name')}</p>\n                      </div>\n                      <div>\n                        <span className=\"text-muted-foreground\">Status:</span>\n                        <Badge variant={form.watch('is_active') ? 'success' : 'secondary'}>\n                          {form.watch('is_active') ? 'Active' : 'Inactive'}\n                        </Badge>\n                      </div>\n                    </div>\n                    {form.watch('description') && (\n                      <div className=\"mt-4\">\n                        <span className=\"text-muted-foreground\">Description:</span>\n                        <p className=\"text-sm mt-1\">{form.watch('description')}</p>\n                      </div>\n                    )}\n                  </Card>\n\n                  {/* Conditions Summary */}\n                  <Card className=\"p-4\">\n                    <h4 className=\"font-medium mb-4\">Conditions</h4>\n                    <div className=\"space-y-2 text-sm\">\n                      {form.watch('conditions.min_amount') && (\n                        <p>• Minimum amount: ${form.watch('conditions.min_amount')}</p>\n                      )}\n                      {form.watch('conditions.max_amount') && (\n                        <p>• Maximum amount: ${form.watch('conditions.max_amount')}</p>\n                      )}\n                      {form.watch('conditions.categories')?.length > 0 && (\n                        <p>• Categories: {form.watch('conditions.categories').join(', ')}</p>\n                      )}\n                      {form.watch('conditions.departments')?.length > 0 && (\n                        <p>• Departments: {form.watch('conditions.departments').join(', ')}</p>\n                      )}\n                    </div>\n                  </Card>\n\n                  {/* Approval Steps Summary */}\n                  <Card className=\"p-4\">\n                    <h4 className=\"font-medium mb-4\">Approval Workflow ({fields.length} steps)</h4>\n                    <div className=\"space-y-3\">\n                      {form.watch('approval_steps')?.map((step, index) => (\n                        <div key={index} className=\"flex items-center justify-between p-3 bg-muted rounded\">\n                          <div>\n                            <p className=\"font-medium\">Step {step.step}: {step.description}</p>\n                            <p className=\"text-sm text-muted-foreground\">\n                              Role: {step.role} • \n                              {step.conditions?.min_amount && ` Min: $${step.conditions.min_amount} •`}\n                              {step.conditions?.required !== false ? ' Required' : ' Optional'}\n                            </p>\n                          </div>\n                          <Badge variant=\"outline\">\n                            {step.role}\n                          </Badge>\n                        </div>\n                      ))}\n                    </div>\n                  </Card>\n                </div>\n              )}\n            </form>\n          </div>\n\n          {/* Footer */}\n          <div className=\"border-t p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex space-x-2\">\n                {currentStep > 1 && (\n                  <Button\n                    type=\"button\"\n                    variant=\"outline\"\n                    onClick={() => setCurrentStep(currentStep - 1)}\n                  >\n                    Previous\n                  </Button>\n                )}\n              </div>\n              \n              <div className=\"flex space-x-2\">\n                {currentStep < 4 ? (\n                  <Button\n                    type=\"button\"\n                    onClick={() => setCurrentStep(currentStep + 1)}\n                  >\n                    Next\n                  </Button>\n                ) : (\n                  <Button\n                    type=\"button\"\n                    onClick={form.handleSubmit(onSubmit)}\n                    disabled={loading}\n                    className=\"flex items-center gap-2\"\n                  >\n                    <Save className=\"h-4 w-4\" />\n                    Create Policy\n                  </Button>\n                )}\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ghxstship/apps/web/app/(app)/(shell)/procurement/catalog/CatalogClient.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'catalogService'. Either include it or remove the dependency array.","line":107,"column":6,"nodeType":"ArrayExpression","endLine":107,"endColumn":73,"suggestions":[{"desc":"Update the dependencies array to be: [catalogService, orgId, filters, sort, pagination.page, pagination.limit, viewMode]","fix":{"range":[3074,3141],"text":"[catalogService, orgId, filters, sort, pagination.page, pagination.limit, viewMode]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'catalogService'. Either include it or remove the dependency array.","line":171,"column":6,"nodeType":"ArrayExpression","endLine":171,"endColumn":31,"suggestions":[{"desc":"Update the dependencies array to be: [catalogService, orgId, loadCatalogItems]","fix":{"range":[5191,5216],"text":"[catalogService, orgId, loadCatalogItems]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'catalogService'. Either include it or remove the dependency array.","line":188,"column":6,"nodeType":"ArrayExpression","endLine":188,"endColumn":31,"suggestions":[{"desc":"Update the dependencies array to be: [catalogService, orgId, loadCatalogItems]","fix":{"range":[5753,5778],"text":"[catalogService, orgId, loadCatalogItems]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { Plus, BookOpen, Search, Filter, Grid, List, Columns, Calendar, BarChart3, Download, Upload, Trash2, Edit, Eye, RefreshCw, Settings, X } from \"lucide-react\";\nimport { useState, useEffect, useCallback } from 'react';\nimport { useTranslations } from 'next-intl';\nimport { createBrowserClient } from '@ghxstship/auth';\nimport { \n  Button, \n  UnifiedInput, \n  Card, \n  Badge, \n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n  Checkbox,\n  Tabs,\n  TabsContent,\n  TabsList,\n  TabsTrigger,\n} from '@ghxstship/ui';\n\n// Import types and views\nimport type { \n  CatalogItem, \n  CatalogFilters, \n  CatalogSort, \n  CatalogViewMode, \n  CatalogStats,\n  BulkAction \n} from './types';\nimport { CatalogService } from './lib/catalogService';\nimport CatalogGridView from './views/CatalogGridView';\nimport CatalogListView from './views/CatalogListView';\nimport CatalogTableView from './views/CatalogTableView';\nimport CatalogKanbanView from './views/CatalogKanbanView';\nimport CatalogDashboardView from './views/CatalogDashboardView';\nimport CreateCatalogItemClient from './CreateCatalogItemClient';\n\nexport default function CatalogClient({ orgId }: { orgId: string }) {\n  const t = useTranslations('procurement');\n  const sb = createBrowserClient();\n  \n  // State management\n  const [catalogItems, setCatalogItems] = useState<CatalogItem[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [selectedItems, setSelectedItems] = useState<string[]>([]);\n  const [viewMode, setViewMode] = useState<CatalogViewMode>('grid');\n  const [showFilters, setShowFilters] = useState(false);\n  const [stats, setStats] = useState<CatalogStats | null>(null);\n  \n  // Filters and sorting\n  const [filters, setFilters] = useState<CatalogFilters>({\n    search: '',\n    type: 'all',\n    status: 'all',\n  });\n  const [sort, setSort] = useState<CatalogSort>({\n    field: 'created_at',\n    direction: 'desc',\n  });\n  \n  // Pagination\n  const [pagination, setPagination] = useState({\n    page: 1,\n    limit: 50,\n    total: 0,\n    hasMore: false,\n  });\n\n  const catalogService = new CatalogService();\n\n  // Load catalog items with filters and pagination\n  const loadCatalogItems = useCallback(async () => {\n    try {\n      setLoading(true);\n      setError(null);\n\n      const result = await catalogService.getCatalogItems(\n        orgId,\n        filters,\n        sort,\n        pagination.page,\n        pagination.limit\n      );\n\n      setCatalogItems(result.items);\n      setPagination(prev => ({\n        ...prev,\n        total: result.total,\n        hasMore: result.hasMore,\n      }));\n\n      // Load stats if on dashboard view\n      if (viewMode === 'dashboard') {\n        const statsResult = await catalogService.getCatalogStats(orgId);\n        setStats(statsResult);\n      }\n    } catch (error) {\n      console.error('Error loading catalog items:', error);\n      setError(error instanceof Error ? error.message : 'Failed to load catalog items');\n    } finally {\n      setLoading(false);\n    }\n  }, [orgId, filters, sort, pagination.page, pagination.limit, viewMode]);\n\n  // Load data on mount and when dependencies change\n  useEffect(() => {\n    loadCatalogItems();\n  }, [loadCatalogItems]);\n\n  // Handle filter changes\n  const handleFilterChange = useCallback((newFilters: Partial<CatalogFilters>) => {\n    setFilters(prev => ({ ...prev, ...newFilters }));\n    setPagination(prev => ({ ...prev, page: 1 })); // Reset to first page\n  }, []);\n\n  // Handle sort changes\n  const handleSortChange = useCallback((newSort: CatalogSort) => {\n    setSort(newSort);\n    setPagination(prev => ({ ...prev, page: 1 })); // Reset to first page\n  }, []);\n\n  // Handle view mode changes\n  const handleViewModeChange = useCallback((mode: CatalogViewMode) => {\n    setViewMode(mode);\n    setSelectedItems([]); // Clear selection when changing views\n  }, []);\n\n  // Handle item selection\n  const handleSelectionChange = useCallback((itemIds: string[]) => {\n    setSelectedItems(itemIds);\n  }, []);\n\n  // Handle individual item actions\n  const handleItemClick = useCallback((item: CatalogItem) => {\n    // Navigate to item detail or open drawer\n    console.log('Item clicked:', item);\n  }, []);\n\n  const handleEditItem = useCallback((item: CatalogItem) => {\n    // Open edit drawer\n    console.log('Edit item:', item);\n  }, []);\n\n  const handleDeleteItem = useCallback((item: CatalogItem) => {\n    // Show confirmation dialog and delete\n    console.log('Delete item:', item);\n  }, []);\n\n  const handleViewItem = useCallback((item: CatalogItem) => {\n    // Open view drawer\n    console.log('View item:', item);\n  }, []);\n\n  // Handle bulk actions\n  const handleBulkAction = useCallback(async (action: BulkAction) => {\n    try {\n      setLoading(true);\n      await catalogService.bulkUpdateCatalogItems(orgId, action, 'current-user-id');\n      await loadCatalogItems(); // Reload data\n      setSelectedItems([]); // Clear selection\n    } catch (error) {\n      console.error('Bulk action failed:', error);\n      setError(error instanceof Error ? error.message : 'Bulk action failed');\n    } finally {\n      setLoading(false);\n    }\n  }, [orgId, loadCatalogItems]);\n\n  // Handle status change (for Kanban view)\n  const handleStatusChange = useCallback(async (item: CatalogItem, newStatus: string) => {\n    try {\n      await catalogService.updateCatalogItem(\n        orgId,\n        item.id,\n        item.type,\n        { status: newStatus as unknown },\n        'current-user-id'\n      );\n      await loadCatalogItems(); // Reload data\n    } catch (error) {\n      console.error('Status change failed:', error);\n      setError(error instanceof Error ? error.message : 'Status change failed');\n    }\n  }, [orgId, loadCatalogItems]);\n\n  // Render view based on current mode\n  const renderView = () => {\n    const commonProps = {\n      items: catalogItems,\n      loading,\n      selectedItems,\n      onSelectionChange: handleSelectionChange,\n      onItemClick: handleItemClick,\n      onEditItem: handleEditItem,\n      onDeleteItem: handleDeleteItem,\n      onViewItem: handleViewItem,\n    };\n\n    switch (viewMode) {\n      case 'grid':\n        return <CatalogGridView {...commonProps} />;\n      case 'list':\n        return <CatalogListView {...commonProps} />;\n      case 'table':\n        return (\n          <CatalogTableView\n            {...commonProps}\n            sort={sort}\n            onSortChange={handleSortChange}\n          />\n        );\n      case 'kanban':\n        return (\n          <CatalogKanbanView\n            {...commonProps}\n            onStatusChange={handleStatusChange}\n          />\n        );\n      case 'dashboard':\n        return (\n          <CatalogDashboardView\n            items={catalogItems}\n            loading={loading}\n            stats={stats || undefined}\n            onItemClick={handleItemClick}\n          />\n        );\n      default:\n        return <CatalogGridView {...commonProps} />;\n    }\n  };\n\n  if (error) {\n    return (\n      <Card className=\"p-xl text-center\">\n        <div className=\"text-destructive mb-md\">\n          <BookOpen className=\"h-12 w-12 mx-auto mb-md opacity-50\" />\n          <h3 className=\"text-lg font-medium mb-sm\">Error Loading Catalog</h3>\n          <p className=\"text-sm\">{error}</p>\n        </div>\n        <Button onClick={loadCatalogItems} variant=\"outline\">\n          <RefreshCw className=\"h-4 w-4 mr-sm\" />\n          Try Again\n        </Button>\n      </Card>\n    );\n  }\n\n  return (\n    <div className=\"space-y-lg\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center gap-sm\">\n          <BookOpen className=\"h-5 w-5\" />\n          <h3 className=\"text-lg font-semibold\">Procurement Catalog</h3>\n          <Badge variant=\"secondary\">\n            {catalogItems.length} item{catalogItems.length !== 1 ? 's' : ''}\n          </Badge>\n        </div>\n        <div className=\"flex items-center gap-sm\">\n          <CreateCatalogItemClient orgId={orgId} onItemCreated={loadCatalogItems} />\n          <Button variant=\"outline\" size=\"sm\">\n            <Upload className=\"h-4 w-4 mr-sm\" />\n            Import\n          </Button>\n          <Button variant=\"outline\" size=\"sm\">\n            <Download className=\"h-4 w-4 mr-sm\" />\n            Export\n          </Button>\n        </div>\n      </div>\n\n      {/* Filters and Search */}\n      <Card className=\"p-md\">\n        <div className=\"flex flex-col lg:flex-row gap-md\">\n          {/* Search */}\n          <div className=\"relative flex-1\">\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n            <UnifiedInput\n              placeholder=\"Search catalog items...\"\n              value={filters.search || ''}\n              onChange={(e) => handleFilterChange({ search: e.target.value })}\n              className=\"pl-10\"\n            />\n          </div>\n\n          {/* Type Filter */}\n          <Select\n            value={filters.type || 'all'}\n            onValueChange={(value) => handleFilterChange({ type: value as unknown })}\n          >\n            <SelectTrigger className=\"w-[140px]\">\n              <SelectValue placeholder=\"All Types\" />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"all\">All Types</SelectItem>\n              <SelectItem value=\"product\">Products</SelectItem>\n              <SelectItem value=\"service\">Services</SelectItem>\n            </SelectContent>\n          </Select>\n\n          {/* Status Filter */}\n          <Select\n            value={filters.status || 'all'}\n            onValueChange={(value) => handleFilterChange({ status: value as unknown })}\n          >\n            <SelectTrigger className=\"w-[140px]\">\n              <SelectValue placeholder=\"All Status\" />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"all\">All Status</SelectItem>\n              <SelectItem value=\"active\">Active</SelectItem>\n              <SelectItem value=\"inactive\">Inactive</SelectItem>\n              <SelectItem value=\"discontinued\">Discontinued</SelectItem>\n            </SelectContent>\n          </Select>\n\n          {/* Advanced Filters Toggle */}\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={() => setShowFilters(!showFilters)}\n          >\n            <Filter className=\"h-4 w-4 mr-sm\" />\n            Filters\n          </Button>\n        </div>\n\n        {/* Advanced Filters */}\n        {showFilters && (\n          <div className=\"mt-md pt-md border-t border-border\">\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-md\">\n              {/* Category Filter */}\n              <div>\n                <label className=\"text-sm font-medium mb-sm block\">Category</label>\n                <UnifiedInput\n                  placeholder=\"Filter by category\"\n                  value={filters.category || ''}\n                  onChange={(e) => handleFilterChange({ category: e.target.value })}\n                />\n              </div>\n\n              {/* Supplier Filter */}\n              <div>\n                <label className=\"text-sm font-medium mb-sm block\">Supplier</label>\n                <UnifiedInput\n                  placeholder=\"Filter by supplier\"\n                  value={filters.supplier || ''}\n                  onChange={(e) => handleFilterChange({ supplier: e.target.value })}\n                />\n              </div>\n\n              {/* Price Range */}\n              <div>\n                <label className=\"text-sm font-medium mb-sm block\">Price Range</label>\n                <div className=\"flex gap-sm\">\n                  <UnifiedInput\n                    type=\"number\"\n                    placeholder=\"Min\"\n                    value={filters.priceRange?.min || ''}\n                    onChange={(e) => handleFilterChange({ \n                      priceRange: { \n                        ...filters.priceRange, \n                        min: e.target.value ? Number(e.target.value) : undefined \n                      } \n                    })}\n                  />\n                  <UnifiedInput\n                    type=\"number\"\n                    placeholder=\"Max\"\n                    value={filters.priceRange?.max || ''}\n                    onChange={(e) => handleFilterChange({ \n                      priceRange: { \n                        ...filters.priceRange, \n                        max: e.target.value ? Number(e.target.value) : undefined \n                      } \n                    })}\n                  />\n                </div>\n              </div>\n            </div>\n          </div>\n        )}\n      </Card>\n\n      {/* View Mode Tabs */}\n      <Tabs value={viewMode} onValueChange={(value) => handleViewModeChange(value as CatalogViewMode)}>\n        <div className=\"flex items-center justify-between\">\n          <TabsList>\n            <TabsTrigger value=\"grid\">\n              <Grid className=\"h-4 w-4 mr-sm\" />\n              Grid\n            </TabsTrigger>\n            <TabsTrigger value=\"list\">\n              <List className=\"h-4 w-4 mr-sm\" />\n              List\n            </TabsTrigger>\n            <TabsTrigger value=\"table\">\n              <Columns className=\"h-4 w-4 mr-sm\" />\n              Table\n            </TabsTrigger>\n            <TabsTrigger value=\"kanban\">\n              <Columns className=\"h-4 w-4 mr-sm\" />\n              Kanban\n            </TabsTrigger>\n            <TabsTrigger value=\"dashboard\">\n              <BarChart3 className=\"h-4 w-4 mr-sm\" />\n              Dashboard\n            </TabsTrigger>\n          </TabsList>\n\n          {/* Bulk Actions */}\n          {selectedItems.length > 0 && (\n            <div className=\"flex items-center gap-sm\">\n              <span className=\"text-sm text-muted-foreground\">\n                {selectedItems.length} selected\n              </span>\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => handleBulkAction({ type: 'delete', itemIds: selectedItems })}\n              >\n                <Trash2 className=\"h-4 w-4 mr-sm\" />\n                Delete\n              </Button>\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => setSelectedItems([])}\n              >\n                <X className=\"h-4 w-4 mr-sm\" />\n                Clear\n              </Button>\n            </div>\n          )}\n        </div>\n\n        <TabsContent value={viewMode} className=\"mt-md\">\n          {renderView()}\n        </TabsContent>\n      </Tabs>\n\n      {/* Pagination */}\n      {pagination.total > pagination.limit && (\n        <div className=\"flex items-center justify-between\">\n          <div className=\"text-sm text-muted-foreground\">\n            Showing {((pagination.page - 1) * pagination.limit) + 1} to{' '}\n            {Math.min(pagination.page * pagination.limit, pagination.total)} of{' '}\n            {pagination.total} items\n          </div>\n          <div className=\"flex items-center gap-sm\">\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              disabled={pagination.page === 1}\n              onClick={() => setPagination(prev => ({ ...prev, page: prev.page - 1 }))}\n            >\n              Previous\n            </Button>\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              disabled={!pagination.hasMore}\n              onClick={() => setPagination(prev => ({ ...prev, page: prev.page + 1 }))}\n            >\n              Next\n            </Button>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ghxstship/apps/web/app/(app)/(shell)/procurement/catalog/views/CatalogGridView.tsx","messages":[{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Package2' is not defined.","line":81,"column":10,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":81,"endColumn":18},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Eye' is not defined.","line":150,"column":24,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":150,"endColumn":27},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Edit' is not defined.","line":162,"column":24,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":162,"endColumn":28},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'MoreHorizontal' is not defined.","line":273,"column":22,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":273,"endColumn":36}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\nimport { User, FileText, Settings, Award, Calendar, TrendingUp, Activity, Clock, Plus, Search, Play, Trash2 } from \"lucide-react\";\nimport { useState } from 'react';\nimport { Card, Badge, Button, Checkbox } from '@ghxstship/ui';\nimport type { CatalogItem } from '../types';\nimport { formatCurrency, formatDate, getStatusColor, getTypeColor } from '../types';\n\ninterface CatalogGridViewProps {\n  items: CatalogItem[];\n  loading?: boolean;\n  selectedItems: string[];\n  onSelectionChange: (itemIds: string[]) => void;\n  onItemClick?: (item: CatalogItem) => void;\n  onEditItem?: (item: CatalogItem) => void;\n  onDeleteItem?: (item: CatalogItem) => void;\n  onViewItem?: (item: CatalogItem) => void;\n}\n\nexport default function CatalogGridView({\n  items,\n  loading = false,\n  selectedItems,\n  onSelectionChange,\n  onItemClick,\n  onEditItem,\n  onDeleteItem,\n  onViewItem,\n}: CatalogGridViewProps) {\n  const [hoveredItem, setHoveredItem] = useState<string | null>(null);\n\n  const handleItemSelection = (itemId: string, checked: boolean) => {\n    if (checked) {\n      onSelectionChange([...selectedItems, itemId]);\n    } else {\n      onSelectionChange(selectedItems.filter(id => id !== itemId));\n    }\n  };\n\n  const handleSelectAll = (checked: boolean) => {\n    if (checked) {\n      onSelectionChange(items.map(item => item.id));\n    } else {\n      onSelectionChange([]);\n    }\n  };\n\n  const getTypeIcon = (type: string) => {\n    return type === 'product' ? Package2 : Wrench;\n  };\n\n  if (loading) {\n    return (\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-md\">\n        {Array.from({ length: 8 }).map((_, index) => (\n          <Card key={index} className=\"p-md\">\n            <div className=\"animate-pulse\">\n              <div className=\"flex items-center justify-between mb-sm\">\n                <div className=\"h-4 bg-muted rounded w-3/4\"></div>\n                <div className=\"h-6 bg-muted rounded-full w-16\"></div>\n              </div>\n              <div className=\"h-3 bg-muted rounded w-1/2 mb-sm\"></div>\n              <div className=\"h-3 bg-muted rounded w-full mb-sm\"></div>\n              <div className=\"h-3 bg-muted rounded w-2/3 mb-md\"></div>\n              <div className=\"flex justify-between items-center\">\n                <div className=\"h-5 bg-muted rounded w-20\"></div>\n                <div className=\"flex gap-xs\">\n                  <div className=\"h-8 w-8 bg-muted rounded\"></div>\n                  <div className=\"h-8 w-8 bg-muted rounded\"></div>\n                </div>\n              </div>\n            </div>\n          </Card>\n        ))}\n      </div>\n    );\n  }\n\n  if (items.length === 0) {\n    return (\n      <Card className=\"p-xl text-center\">\n        <Package2 className=\"h-12 w-12 mx-auto mb-md text-muted-foreground opacity-50\" />\n        <h3 className=\"text-lg font-medium mb-sm\">No catalog items found</h3>\n        <p className=\"text-muted-foreground\">\n          No items match your current filters. Try adjusting your search criteria.\n        </p>\n      </Card>\n    );\n  }\n\n  const allSelected = items.length > 0 && selectedItems.length === items.length;\n  const someSelected = selectedItems.length > 0 && selectedItems.length < items.length;\n\n  return (\n    <div className=\"space-y-md\">\n      {/* Selection header */}\n      {items.length > 0 && (\n        <div className=\"flex items-center gap-sm p-sm bg-muted/30 rounded-lg\">\n          <Checkbox\n            checked={allSelected}\n            indeterminate={someSelected}\n            onCheckedChange={handleSelectAll}\n          />\n          <span className=\"text-sm text-muted-foreground\">\n            {selectedItems.length > 0 \n              ? `${selectedItems.length} of ${items.length} items selected`\n              : `Select all ${items.length} items`\n            }\n          </span>\n        </div>\n      )}\n\n      {/* Grid */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-md\">\n        {items.map((item) => {\n          const TypeIcon = getTypeIcon(item.type);\n          const isSelected = selectedItems.includes(item.id);\n          const isHovered = hoveredItem === item.id;\n\n          return (\n            <Card\n              key={item.id}\n              className={`relative transition-all duration-200 cursor-pointer hover:shadow-md ${\n                isSelected ? 'ring-2 ring-primary' : ''\n              }`}\n              onMouseEnter={() => setHoveredItem(item.id)}\n              onMouseLeave={() => setHoveredItem(null)}\n              onClick={() => onItemClick?.(item)}\n            >\n              {/* Selection checkbox */}\n              <div className=\"absolute top-sm left-sm z-10\">\n                <Checkbox\n                  checked={isSelected}\n                  onCheckedChange={(checked) => handleItemSelection(item.id, checked as boolean)}\n                  onClick={(e) => e.stopPropagation()}\n                />\n              </div>\n\n              {/* Action buttons */}\n              {isHovered && (\n                <div className=\"absolute top-sm right-sm z-10 flex gap-xs\">\n                  {onViewItem && (\n                    <Button\n                      size=\"sm\"\n                      variant=\"secondary\"\n                      onClick={(e) => {\n                        e.stopPropagation();\n                        onViewItem(item);\n                      }}\n                    >\n                      <Eye className=\"h-3 w-3\" />\n                    </Button>\n                  )}\n                  {onEditItem && (\n                    <Button\n                      size=\"sm\"\n                      variant=\"secondary\"\n                      onClick={(e) => {\n                        e.stopPropagation();\n                        onEditItem(item);\n                      }}\n                    >\n                      <Edit className=\"h-3 w-3\" />\n                    </Button>\n                  )}\n                  {onDeleteItem && (\n                    <Button\n                      size=\"sm\"\n                      variant=\"destructive\"\n                      onClick={(e) => {\n                        e.stopPropagation();\n                        onDeleteItem(item);\n                      }}\n                    >\n                      <Trash2 className=\"h-3 w-3\" />\n                    </Button>\n                  )}\n                </div>\n              )}\n\n              <div className=\"p-md pt-lg\">\n                {/* Header */}\n                <div className=\"flex items-start justify-between mb-sm\">\n                  <div className=\"flex items-center gap-sm min-w-0 flex-1\">\n                    <TypeIcon className=\"h-4 w-4 text-muted-foreground flex-shrink-0\" />\n                    <h4 className=\"font-medium truncate\">{item.name}</h4>\n                  </div>\n                  <Badge variant={getStatusColor(item.status)} className=\"ml-sm\">\n                    {item.status}\n                  </Badge>\n                </div>\n\n                {/* Type and category */}\n                <div className=\"flex items-center gap-sm mb-sm\">\n                  <span className={`px-sm py-xs rounded-full text-xs font-medium ${\n                    item.type === 'product' \n                      ? 'bg-primary/10 text-primary' \n                      : 'bg-success/10 text-success'\n                  }`}>\n                    {item.type}\n                  </span>\n                  {item.category && (\n                    <span className=\"text-xs text-muted-foreground uppercase tracking-wide\">\n                      {item.category}\n                    </span>\n                  )}\n                </div>\n\n                {/* Description */}\n                {item.description && (\n                  <p className=\"text-sm text-muted-foreground line-clamp-2 mb-sm\">\n                    {item.description}\n                  </p>\n                )}\n\n                {/* Price */}\n                <div className=\"flex items-center justify-between mb-sm\">\n                  <div className=\"text-lg font-semibold\">\n                    {formatCurrency(item.price || item.rate || 0, item.currency)}\n                    {item.type === 'service' && item.unit && (\n                      <span className=\"text-sm text-muted-foreground font-normal\">\n                        /{item.unit}\n                      </span>\n                    )}\n                  </div>\n                </div>\n\n                {/* Supplier and SKU */}\n                <div className=\"space-y-xs text-xs text-muted-foreground\">\n                  {item.supplier && (\n                    <div>\n                      <strong>Supplier:</strong> {item.supplier}\n                    </div>\n                  )}\n                  {item.sku && (\n                    <div>\n                      <strong>SKU:</strong> {item.sku}\n                    </div>\n                  )}\n                </div>\n\n                {/* Tags */}\n                {item.tags && item.tags.length > 0 && (\n                  <div className=\"flex flex-wrap gap-xs mt-sm\">\n                    {item.tags.slice(0, 3).map((tag, index) => (\n                      <span\n                        key={index}\n                        className=\"px-xs py-xs bg-muted rounded text-xs\"\n                      >\n                        {tag}\n                      </span>\n                    ))}\n                    {item.tags.length > 3 && (\n                      <span className=\"px-xs py-xs bg-muted rounded text-xs\">\n                        +{item.tags.length - 3} more\n                      </span>\n                    )}\n                  </div>\n                )}\n\n                {/* Footer */}\n                <div className=\"flex items-center justify-between mt-md pt-sm border-t border-border\">\n                  <span className=\"text-xs text-muted-foreground\">\n                    {formatDate(item.created_at)}\n                  </span>\n                  <Button\n                    size=\"sm\"\n                    variant=\"ghost\"\n                    onClick={(e) => {\n                      e.stopPropagation();\n                      // Show more options menu\n                    }}\n                  >\n                    <MoreHorizontal className=\"h-3 w-3\" />\n                  </Button>\n                </div>\n              </div>\n            </Card>\n          );\n        })}\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ghxstship/apps/web/app/(app)/(shell)/procurement/catalog/views/CatalogKanbanView.tsx","messages":[{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Eye' is not defined.","line":163,"column":36,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":163,"endColumn":39},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Edit' is not defined.","line":176,"column":36,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":176,"endColumn":40}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\nimport { User, FileText, Settings, Award, Calendar, TrendingUp, Activity, Clock, Plus, Search, Play, Trash2 } from \"lucide-react\";\nimport { useState } from 'react';\nimport { Card, Badge, Button } from '@ghxstship/ui';\nimport type { CatalogItem } from '../types';\nimport { formatCurrency, formatDate, getStatusColor } from '../types';\n\ninterface CatalogKanbanViewProps {\n  items: CatalogItem[];\n  loading?: boolean;\n  selectedItems: string[];\n  onSelectionChange: (itemIds: string[]) => void;\n  onItemClick?: (item: CatalogItem) => void;\n  onEditItem?: (item: CatalogItem) => void;\n  onDeleteItem?: (item: CatalogItem) => void;\n  onViewItem?: (item: CatalogItem) => void;\n  onStatusChange?: (item: CatalogItem, newStatus: string) => void;\n}\n\nconst statusColumns = [\n  { key: 'active', label: 'Active', color: 'bg-success/10 border-success/20' },\n  { key: 'inactive', label: 'Inactive', color: 'bg-warning/10 border-warning/20' },\n  { key: 'discontinued', label: 'Discontinued', color: 'bg-destructive/10 border-destructive/20' },\n];\n\nexport default function CatalogKanbanView({\n  items,\n  loading = false,\n  selectedItems,\n  onSelectionChange,\n  onItemClick,\n  onEditItem,\n  onDeleteItem,\n  onViewItem,\n  onStatusChange,\n}: CatalogKanbanViewProps) {\n  const [draggedItem, setDraggedItem] = useState<CatalogItem | null>(null);\n\n  const getTypeIcon = (type: string) => {\n    return type === 'product' ? Package2 : Wrench;\n  };\n\n  const handleDragStart = (e: React.DragEvent, item: CatalogItem) => {\n    setDraggedItem(item);\n    e.dataTransfer.effectAllowed = 'move';\n  };\n\n  const handleDragEnd = () => {\n    setDraggedItem(null);\n  };\n\n  const handleDragOver = (e: React.DragEvent) => {\n    e.preventDefault();\n    e.dataTransfer.dropEffect = 'move';\n  };\n\n  const handleDrop = (e: React.DragEvent, status: string) => {\n    e.preventDefault();\n    if (draggedItem && draggedItem.status !== status) {\n      onStatusChange?.(draggedItem, status);\n    }\n    setDraggedItem(null);\n  };\n\n  const getItemsByStatus = (status: string) => {\n    return items.filter(item => item.status === status);\n  };\n\n  if (loading) {\n    return (\n      <div className=\"flex gap-md h-[600px]\">\n        {statusColumns.map((column) => (\n          <div key={column.key} className=\"flex-1\">\n            <Card className={`h-full ${column.color}`}>\n              <div className=\"p-md border-b border-border\">\n                <div className=\"h-6 bg-muted rounded w-20 animate-pulse\"></div>\n              </div>\n              <div className=\"p-md space-y-md\">\n                {Array.from({ length: 3 }).map((_, index) => (\n                  <Card key={index} className=\"p-md\">\n                    <div className=\"animate-pulse space-y-sm\">\n                      <div className=\"flex items-center gap-sm\">\n                        <div className=\"h-4 w-4 bg-muted rounded\"></div>\n                        <div className=\"h-4 bg-muted rounded w-3/4\"></div>\n                      </div>\n                      <div className=\"h-3 bg-muted rounded w-1/2\"></div>\n                      <div className=\"h-3 bg-muted rounded w-full\"></div>\n                      <div className=\"h-5 bg-muted rounded w-16\"></div>\n                    </div>\n                  </Card>\n                ))}\n              </div>\n            </Card>\n          </div>\n        ))}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"flex gap-md h-[600px] overflow-x-auto\">\n      {statusColumns.map((column) => {\n        const columnItems = getItemsByStatus(column.key);\n        \n        return (\n          <div key={column.key} className=\"flex-1 min-w-[300px]\">\n            <Card \n              className={`h-full ${column.color} flex flex-col`}\n              onDragOver={handleDragOver}\n              onDrop={(e) => handleDrop(e, column.key)}\n            >\n              {/* Column header */}\n              <div className=\"p-md border-b border-border flex-shrink-0\">\n                <div className=\"flex items-center justify-between\">\n                  <h3 className=\"font-medium\">{column.label}</h3>\n                  <Badge variant=\"secondary\">\n                    {columnItems.length}\n                  </Badge>\n                </div>\n              </div>\n\n              {/* Column content */}\n              <div className=\"flex-1 p-md space-y-md overflow-y-auto\">\n                {columnItems.length === 0 ? (\n                  <div className=\"text-center py-lg text-muted-foreground\">\n                    <div className=\"text-sm\">No {column.label.toLowerCase()} items</div>\n                  </div>\n                ) : (\n                  columnItems.map((item) => {\n                    const TypeIcon = getTypeIcon(item.type);\n                    const isSelected = selectedItems.includes(item.id);\n                    const isDragging = draggedItem?.id === item.id;\n\n                    return (\n                      <Card\n                        key={item.id}\n                        className={`cursor-pointer transition-all duration-200 hover:shadow-md ${\n                          isSelected ? 'ring-2 ring-primary' : ''\n                        } ${isDragging ? 'opacity-50 rotate-2' : ''}`}\n                        draggable\n                        onDragStart={(e) => handleDragStart(e, item)}\n                        onDragEnd={handleDragEnd}\n                        onClick={() => onItemClick?.(item)}\n                      >\n                        <div className=\"p-md\">\n                          {/* Header */}\n                          <div className=\"flex items-start justify-between mb-sm\">\n                            <div className=\"flex items-center gap-sm min-w-0 flex-1\">\n                              <TypeIcon className=\"h-4 w-4 text-muted-foreground flex-shrink-0\" />\n                              <h4 className=\"font-medium text-sm truncate\">{item.name}</h4>\n                            </div>\n                            <div className=\"flex items-center gap-xs ml-sm\">\n                              {onViewItem && (\n                                <Button\n                                  size=\"sm\"\n                                  variant=\"ghost\"\n                                  onClick={(e) => {\n                                    e.stopPropagation();\n                                    onViewItem(item);\n                                  }}\n                                  className=\"h-6 w-6 p-0\"\n                                >\n                                  <Eye className=\"h-3 w-3\" />\n                                </Button>\n                              )}\n                              {onEditItem && (\n                                <Button\n                                  size=\"sm\"\n                                  variant=\"ghost\"\n                                  onClick={(e) => {\n                                    e.stopPropagation();\n                                    onEditItem(item);\n                                  }}\n                                  className=\"h-6 w-6 p-0\"\n                                >\n                                  <Edit className=\"h-3 w-3\" />\n                                </Button>\n                              )}\n                              {onDeleteItem && (\n                                <Button\n                                  size=\"sm\"\n                                  variant=\"ghost\"\n                                  onClick={(e) => {\n                                    e.stopPropagation();\n                                    onDeleteItem(item);\n                                  }}\n                                  className=\"h-6 w-6 p-0\"\n                                >\n                                  <Trash2 className=\"h-3 w-3\" />\n                                </Button>\n                              )}\n                            </div>\n                          </div>\n\n                          {/* Type and category */}\n                          <div className=\"flex items-center gap-sm mb-sm\">\n                            <span className={`px-sm py-xs rounded-full text-xs font-medium ${\n                              item.type === 'product' \n                                ? 'bg-primary/10 text-primary' \n                                : 'bg-success/10 text-success'\n                            }`}>\n                              {item.type}\n                            </span>\n                            {item.category && (\n                              <span className=\"text-xs text-muted-foreground\">\n                                {item.category}\n                              </span>\n                            )}\n                          </div>\n\n                          {/* Description */}\n                          {item.description && (\n                            <p className=\"text-xs text-muted-foreground line-clamp-2 mb-sm\">\n                              {item.description}\n                            </p>\n                          )}\n\n                          {/* Price */}\n                          <div className=\"flex items-center justify-between mb-sm\">\n                            <div className=\"font-semibold text-sm\">\n                              {formatCurrency(item.price || item.rate || 0, item.currency)}\n                              {item.type === 'service' && item.unit && (\n                                <span className=\"text-xs text-muted-foreground font-normal\">\n                                  /{item.unit}\n                                </span>\n                              )}\n                            </div>\n                          </div>\n\n                          {/* Supplier */}\n                          {item.supplier && (\n                            <div className=\"text-xs text-muted-foreground mb-sm\">\n                              <strong>Supplier:</strong> {item.supplier}\n                            </div>\n                          )}\n\n                          {/* SKU */}\n                          {item.sku && (\n                            <div className=\"text-xs text-muted-foreground mb-sm\">\n                              <strong>SKU:</strong> {item.sku}\n                            </div>\n                          )}\n\n                          {/* Tags */}\n                          {item.tags && item.tags.length > 0 && (\n                            <div className=\"flex flex-wrap gap-xs mb-sm\">\n                              {item.tags.slice(0, 2).map((tag, index) => (\n                                <span\n                                  key={index}\n                                  className=\"px-xs py-xs bg-muted rounded text-xs\"\n                                >\n                                  {tag}\n                                </span>\n                              ))}\n                              {item.tags.length > 2 && (\n                                <span className=\"px-xs py-xs bg-muted rounded text-xs\">\n                                  +{item.tags.length - 2}\n                                </span>\n                              )}\n                            </div>\n                          )}\n\n                          {/* Footer */}\n                          <div className=\"flex items-center justify-between pt-sm border-t border-border text-xs text-muted-foreground\">\n                            <span>{formatDate(item.created_at)}</span>\n                            <div className=\"flex items-center gap-xs\">\n                              <div className=\"w-2 h-2 rounded-full bg-current opacity-50\"></div>\n                              <span>{item.id.slice(-6)}</span>\n                            </div>\n                          </div>\n                        </div>\n                      </Card>\n                    );\n                  })\n                )}\n              </div>\n            </Card>\n          </div>\n        );\n      })}\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ghxstship/apps/web/app/(app)/(shell)/procurement/catalog/views/CatalogListView.tsx","messages":[{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Package2' is not defined.","line":87,"column":10,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":87,"endColumn":18},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'ChevronDown' is not defined.","line":145,"column":26,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":145,"endColumn":37},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'ChevronRight' is not defined.","line":147,"column":26,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":147,"endColumn":38},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Eye' is not defined.","line":204,"column":28,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":204,"endColumn":31},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Edit' is not defined.","line":216,"column":28,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":216,"endColumn":32},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'MoreHorizontal' is not defined.","line":239,"column":26,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":239,"endColumn":40}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\nimport { User, FileText, Settings, Award, Calendar, TrendingUp, Activity, Clock, Plus, Search, Play, Trash2 } from \"lucide-react\";\nimport { useState } from 'react';\nimport { Card, Badge, Button, Checkbox } from '@ghxstship/ui';\nimport type { CatalogItem } from '../types';\nimport { formatCurrency, formatDate, getStatusColor } from '../types';\n\ninterface CatalogListViewProps {\n  items: CatalogItem[];\n  loading?: boolean;\n  selectedItems: string[];\n  onSelectionChange: (itemIds: string[]) => void;\n  onItemClick?: (item: CatalogItem) => void;\n  onEditItem?: (item: CatalogItem) => void;\n  onDeleteItem?: (item: CatalogItem) => void;\n  onViewItem?: (item: CatalogItem) => void;\n}\n\nexport default function CatalogListView({\n  items,\n  loading = false,\n  selectedItems,\n  onSelectionChange,\n  onItemClick,\n  onEditItem,\n  onDeleteItem,\n  onViewItem,\n}: CatalogListViewProps) {\n  const [expandedItems, setExpandedItems] = useState<Set<string>>(new Set());\n\n  const handleItemSelection = (itemId: string, checked: boolean) => {\n    if (checked) {\n      onSelectionChange([...selectedItems, itemId]);\n    } else {\n      onSelectionChange(selectedItems.filter(id => id !== itemId));\n    }\n  };\n\n  const handleSelectAll = (checked: boolean) => {\n    if (checked) {\n      onSelectionChange(items.map(item => item.id));\n    } else {\n      onSelectionChange([]);\n    }\n  };\n\n  const toggleExpanded = (itemId: string) => {\n    const newExpanded = new Set(expandedItems);\n    if (newExpanded.has(itemId)) {\n      newExpanded.delete(itemId);\n    } else {\n      newExpanded.add(itemId);\n    }\n    setExpandedItems(newExpanded);\n  };\n\n  const getTypeIcon = (type: string) => {\n    return type === 'product' ? Package2 : Wrench;\n  };\n\n  if (loading) {\n    return (\n      <Card>\n        <div className=\"divide-y divide-border\">\n          {Array.from({ length: 6 }).map((_, index) => (\n            <div key={index} className=\"p-md\">\n              <div className=\"animate-pulse flex items-center gap-md\">\n                <div className=\"h-4 w-4 bg-muted rounded\"></div>\n                <div className=\"h-4 w-4 bg-muted rounded\"></div>\n                <div className=\"flex-1 space-y-sm\">\n                  <div className=\"h-4 bg-muted rounded w-1/3\"></div>\n                  <div className=\"h-3 bg-muted rounded w-2/3\"></div>\n                </div>\n                <div className=\"h-6 bg-muted rounded-full w-16\"></div>\n                <div className=\"h-4 bg-muted rounded w-20\"></div>\n              </div>\n            </div>\n          ))}\n        </div>\n      </Card>\n    );\n  }\n\n  if (items.length === 0) {\n    return (\n      <Card className=\"p-xl text-center\">\n        <Package2 className=\"h-12 w-12 mx-auto mb-md text-muted-foreground opacity-50\" />\n        <h3 className=\"text-lg font-medium mb-sm\">No catalog items found</h3>\n        <p className=\"text-muted-foreground\">\n          No items match your current filters. Try adjusting your search criteria.\n        </p>\n      </Card>\n    );\n  }\n\n  const allSelected = items.length > 0 && selectedItems.length === items.length;\n  const someSelected = selectedItems.length > 0 && selectedItems.length < items.length;\n\n  return (\n    <div className=\"space-y-md\">\n      {/* Selection header */}\n      {items.length > 0 && (\n        <div className=\"flex items-center gap-sm p-sm bg-muted/30 rounded-lg\">\n          <Checkbox\n            checked={allSelected}\n            indeterminate={someSelected}\n            onCheckedChange={handleSelectAll}\n          />\n          <span className=\"text-sm text-muted-foreground\">\n            {selectedItems.length > 0 \n              ? `${selectedItems.length} of ${items.length} items selected`\n              : `Select all ${items.length} items`\n            }\n          </span>\n        </div>\n      )}\n\n      {/* List */}\n      <Card>\n        <div className=\"divide-y divide-border\">\n          {items.map((item) => {\n            const TypeIcon = getTypeIcon(item.type);\n            const isSelected = selectedItems.includes(item.id);\n            const isExpanded = expandedItems.has(item.id);\n\n            return (\n              <div key={item.id} className={`transition-colors ${isSelected ? 'bg-primary/5' : ''}`}>\n                {/* Main row */}\n                <div className=\"p-md hover:bg-muted/30 transition-colors\">\n                  <div className=\"flex items-center gap-md\">\n                    {/* Selection checkbox */}\n                    <Checkbox\n                      checked={isSelected}\n                      onCheckedChange={(checked) => handleItemSelection(item.id, checked as boolean)}\n                    />\n\n                    {/* Expand/collapse button */}\n                    <Button\n                      size=\"sm\"\n                      variant=\"ghost\"\n                      onClick={() => toggleExpanded(item.id)}\n                      className=\"p-0 h-auto\"\n                    >\n                      {isExpanded ? (\n                        <ChevronDown className=\"h-4 w-4\" />\n                      ) : (\n                        <ChevronRight className=\"h-4 w-4\" />\n                      )}\n                    </Button>\n\n                    {/* Type icon */}\n                    <TypeIcon className=\"h-5 w-5 text-muted-foreground flex-shrink-0\" />\n\n                    {/* Main content */}\n                    <div \n                      className=\"flex-1 min-w-0 cursor-pointer\"\n                      onClick={() => onItemClick?.(item)}\n                    >\n                      <div className=\"flex items-center gap-sm mb-xs\">\n                        <h4 className=\"font-medium truncate\">{item.name}</h4>\n                        <span className={`px-sm py-xs rounded-full text-xs font-medium ${\n                          item.type === 'product' \n                            ? 'bg-primary/10 text-primary' \n                            : 'bg-success/10 text-success'\n                        }`}>\n                          {item.type}\n                        </span>\n                        <Badge variant={getStatusColor(item.status)}>\n                          {item.status}\n                        </Badge>\n                      </div>\n                      \n                      <div className=\"flex items-center gap-md text-sm text-muted-foreground\">\n                        {item.category && <span>Category: {item.category}</span>}\n                        {item.supplier && <span>Supplier: {item.supplier}</span>}\n                        {item.sku && <span>SKU: {item.sku}</span>}\n                        <span>Created: {formatDate(item.created_at)}</span>\n                      </div>\n                    </div>\n\n                    {/* Price */}\n                    <div className=\"text-right\">\n                      <div className=\"font-semibold\">\n                        {formatCurrency(item.price || item.rate || 0, item.currency)}\n                        {item.type === 'service' && item.unit && (\n                          <span className=\"text-sm text-muted-foreground font-normal\">\n                            /{item.unit}\n                          </span>\n                        )}\n                      </div>\n                    </div>\n\n                    {/* Actions */}\n                    <div className=\"flex items-center gap-xs\">\n                      {onViewItem && (\n                        <Button\n                          size=\"sm\"\n                          variant=\"ghost\"\n                          onClick={(e) => {\n                            e.stopPropagation();\n                            onViewItem(item);\n                          }}\n                        >\n                          <Eye className=\"h-4 w-4\" />\n                        </Button>\n                      )}\n                      {onEditItem && (\n                        <Button\n                          size=\"sm\"\n                          variant=\"ghost\"\n                          onClick={(e) => {\n                            e.stopPropagation();\n                            onEditItem(item);\n                          }}\n                        >\n                          <Edit className=\"h-4 w-4\" />\n                        </Button>\n                      )}\n                      {onDeleteItem && (\n                        <Button\n                          size=\"sm\"\n                          variant=\"ghost\"\n                          onClick={(e) => {\n                            e.stopPropagation();\n                            onDeleteItem(item);\n                          }}\n                        >\n                          <Trash2 className=\"h-4 w-4\" />\n                        </Button>\n                      )}\n                      <Button\n                        size=\"sm\"\n                        variant=\"ghost\"\n                        onClick={(e) => {\n                          e.stopPropagation();\n                          // Show more options menu\n                        }}\n                      >\n                        <MoreHorizontal className=\"h-4 w-4\" />\n                      </Button>\n                    </div>\n                  </div>\n                </div>\n\n                {/* Expanded details */}\n                {isExpanded && (\n                  <div className=\"px-md pb-md ml-[4.5rem] border-l-2 border-muted\">\n                    <div className=\"bg-muted/30 rounded-lg p-md space-y-md\">\n                      {/* Description */}\n                      {item.description && (\n                        <div>\n                          <h5 className=\"font-medium mb-xs\">Description</h5>\n                          <p className=\"text-sm text-muted-foreground\">{item.description}</p>\n                        </div>\n                      )}\n\n                      {/* Specifications */}\n                      {item.specifications && (\n                        <div>\n                          <h5 className=\"font-medium mb-xs\">Specifications</h5>\n                          <p className=\"text-sm text-muted-foreground whitespace-pre-wrap\">\n                            {item.specifications}\n                          </p>\n                        </div>\n                      )}\n\n                      {/* Tags */}\n                      {item.tags && item.tags.length > 0 && (\n                        <div>\n                          <h5 className=\"font-medium mb-xs\">Tags</h5>\n                          <div className=\"flex flex-wrap gap-xs\">\n                            {item.tags.map((tag, index) => (\n                              <span\n                                key={index}\n                                className=\"px-sm py-xs bg-background border rounded text-xs\"\n                              >\n                                {tag}\n                              </span>\n                            ))}\n                          </div>\n                        </div>\n                      )}\n\n                      {/* Additional details */}\n                      <div className=\"grid grid-cols-2 gap-md text-sm\">\n                        <div>\n                          <h5 className=\"font-medium mb-xs\">Details</h5>\n                          <div className=\"space-y-xs text-muted-foreground\">\n                            <div>Type: {item.type}</div>\n                            <div>Status: {item.status}</div>\n                            {item.category && <div>Category: {item.category}</div>}\n                            {item.supplier && <div>Supplier: {item.supplier}</div>}\n                            {item.sku && <div>SKU: {item.sku}</div>}\n                            {item.unit && <div>Unit: {item.unit}</div>}\n                          </div>\n                        </div>\n                        <div>\n                          <h5 className=\"font-medium mb-xs\">Pricing</h5>\n                          <div className=\"space-y-xs text-muted-foreground\">\n                            <div>\n                              {item.type === 'product' ? 'Price' : 'Rate'}: {' '}\n                              {formatCurrency(item.price || item.rate || 0, item.currency)}\n                            </div>\n                            <div>Currency: {item.currency}</div>\n                            {item.type === 'service' && item.unit && (\n                              <div>Unit: {item.unit}</div>\n                            )}\n                          </div>\n                        </div>\n                      </div>\n\n                      {/* Timestamps */}\n                      <div className=\"flex justify-between text-xs text-muted-foreground pt-sm border-t border-border\">\n                        <span>Created: {formatDate(item.created_at)}</span>\n                        <span>Updated: {formatDate(item.updated_at)}</span>\n                      </div>\n                    </div>\n                  </div>\n                )}\n              </div>\n            );\n          })}\n        </div>\n      </Card>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ghxstship/apps/web/app/(app)/(shell)/procurement/orders/OrdersClient.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'orderService'. Either include it or remove the dependency array.","line":106,"column":6,"nodeType":"ArrayExpression","endLine":106,"endColumn":73,"suggestions":[{"desc":"Update the dependencies array to be: [orderService, orgId, filters, sort, pagination.page, pagination.limit, viewMode]","fix":{"range":[2929,2996],"text":"[orderService, orgId, filters, sort, pagination.page, pagination.limit, viewMode]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'orderService'. Either include it or remove the dependency array.","line":170,"column":6,"nodeType":"ArrayExpression","endLine":170,"endColumn":25,"suggestions":[{"desc":"Update the dependencies array to be: [orderService, orgId, loadOrders]","fix":{"range":[5063,5082],"text":"[orderService, orgId, loadOrders]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'orderService'. Either include it or remove the dependency array.","line":186,"column":6,"nodeType":"ArrayExpression","endLine":186,"endColumn":25,"suggestions":[{"desc":"Update the dependencies array to be: [orderService, orgId, loadOrders]","fix":{"range":[5593,5612],"text":"[orderService, orgId, loadOrders]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { Package, Search, Filter, Grid, List, Columns, BarChart3, Calendar, Download, Upload, Trash2, Edit, Eye, RefreshCw, Settings, X, Plus } from \"lucide-react\";\nimport { useState, useEffect, useCallback } from 'react';\nimport { useTranslations } from 'next-intl';\nimport { createBrowserClient } from '@ghxstship/auth';\nimport { \n  Button, \n  UnifiedInput, \n  Card, \n  Badge,\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n  Checkbox,\n  Tabs,\n  TabsContent,\n  TabsList,\n  TabsTrigger,\n} from '@ghxstship/ui';\n\n// Import types and views\nimport type { \n  ProcurementOrder, \n  OrderFilters, \n  OrderSort, \n  OrderViewMode, \n  OrderStats,\n  OrderBulkAction \n} from './types';\nimport { OrderService } from './lib/orderService';\nimport OrderGridView from './views/OrderGridView';\nimport OrderTableView from './views/OrderTableView';\nimport OrderKanbanView from './views/OrderKanbanView';\nimport OrderDashboardView from './views/OrderDashboardView';\nimport CreateOrderClient from './CreateOrderClient';\n\nexport default function OrdersClient({ orgId }: { orgId: string }) {\n  const t = useTranslations('procurement');\n  const sb = createBrowserClient();\n  \n  // State management\n  const [orders, setOrders] = useState<ProcurementOrder[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [selectedOrders, setSelectedOrders] = useState<string[]>([]);\n  const [viewMode, setViewMode] = useState<OrderViewMode>('grid');\n  const [showFilters, setShowFilters] = useState(false);\n  const [stats, setStats] = useState<OrderStats | null>(null);\n  \n  // Filters and sorting\n  const [filters, setFilters] = useState<OrderFilters>({\n    search: '',\n    status: 'all',\n    priority: 'all',\n  });\n  const [sort, setSort] = useState<OrderSort>({\n    field: 'created_at',\n    direction: 'desc',\n  });\n  \n  // Pagination\n  const [pagination, setPagination] = useState({\n    page: 1,\n    limit: 50,\n    total: 0,\n    hasMore: false,\n  });\n\n  const orderService = new OrderService();\n\n  // Load orders with filters and pagination\n  const loadOrders = useCallback(async () => {\n    try {\n      setLoading(true);\n      setError(null);\n\n      const result = await orderService.getOrders(\n        orgId,\n        filters,\n        sort,\n        pagination.page,\n        pagination.limit\n      );\n\n      setOrders(result.orders);\n      setPagination(prev => ({\n        ...prev,\n        total: result.total,\n        hasMore: result.hasMore,\n      }));\n\n      // Load stats if on dashboard view\n      if (viewMode === 'dashboard') {\n        const statsResult = await orderService.getOrderStats(orgId);\n        setStats(statsResult);\n      }\n    } catch (error) {\n      console.error('Error loading orders:', error);\n      setError(error instanceof Error ? error.message : 'Failed to load orders');\n    } finally {\n      setLoading(false);\n    }\n  }, [orgId, filters, sort, pagination.page, pagination.limit, viewMode]);\n\n  // Load data on mount and when dependencies change\n  useEffect(() => {\n    loadOrders();\n  }, [loadOrders]);\n\n  // Handle filter changes\n  const handleFilterChange = useCallback((newFilters: Partial<OrderFilters>) => {\n    setFilters(prev => ({ ...prev, ...newFilters }));\n    setPagination(prev => ({ ...prev, page: 1 })); // Reset to first page\n  }, []);\n\n  // Handle sort changes\n  const handleSortChange = useCallback((newSort: OrderSort) => {\n    setSort(newSort);\n    setPagination(prev => ({ ...prev, page: 1 })); // Reset to first page\n  }, []);\n\n  // Handle view mode changes\n  const handleViewModeChange = useCallback((mode: OrderViewMode) => {\n    setViewMode(mode);\n    setSelectedOrders([]); // Clear selection when changing views\n  }, []);\n\n  // Handle order selection\n  const handleSelectionChange = useCallback((orderIds: string[]) => {\n    setSelectedOrders(orderIds);\n  }, []);\n\n  // Handle individual order actions\n  const handleOrderClick = useCallback((order: ProcurementOrder) => {\n    // Navigate to order detail or open drawer\n    console.log('Order clicked:', order);\n  }, []);\n\n  const handleEditOrder = useCallback((order: ProcurementOrder) => {\n    // Open edit drawer\n    console.log('Edit order:', order);\n  }, []);\n\n  const handleDeleteOrder = useCallback((order: ProcurementOrder) => {\n    // Show confirmation dialog and delete\n    console.log('Delete order:', order);\n  }, []);\n\n  const handleViewOrder = useCallback((order: ProcurementOrder) => {\n    // Open view drawer\n    console.log('View order:', order);\n  }, []);\n\n  // Handle bulk actions\n  const handleBulkAction = useCallback(async (action: OrderBulkAction) => {\n    try {\n      setLoading(true);\n      await orderService.bulkUpdateOrders(orgId, action, 'current-user-id');\n      await loadOrders(); // Reload data\n      setSelectedOrders([]); // Clear selection\n    } catch (error) {\n      console.error('Bulk action failed:', error);\n      setError(error instanceof Error ? error.message : 'Bulk action failed');\n    } finally {\n      setLoading(false);\n    }\n  }, [orgId, loadOrders]);\n\n  // Handle status change (for Kanban view)\n  const handleStatusChange = useCallback(async (order: ProcurementOrder, newStatus: string) => {\n    try {\n      await orderService.updateOrder(\n        orgId,\n        order.id,\n        { status: newStatus as unknown },\n        'current-user-id'\n      );\n      await loadOrders(); // Reload data\n    } catch (error) {\n      console.error('Status change failed:', error);\n      setError(error instanceof Error ? error.message : 'Status change failed');\n    }\n  }, [orgId, loadOrders]);\n\n  // Render view based on current mode\n  const renderView = () => {\n    const commonProps = {\n      orders,\n      loading,\n      selectedOrders,\n      onSelectionChange: handleSelectionChange,\n      onOrderClick: handleOrderClick,\n      onEditOrder: handleEditOrder,\n      onDeleteOrder: handleDeleteOrder,\n      onViewOrder: handleViewOrder,\n    };\n\n    switch (viewMode) {\n      case 'grid':\n        return <OrderGridView {...commonProps} />;\n      case 'table':\n        return (\n          <OrderTableView\n            {...commonProps}\n            sort={sort}\n            onSortChange={handleSortChange}\n          />\n        );\n      case 'kanban':\n        return (\n          <OrderKanbanView\n            {...commonProps}\n            onStatusChange={handleStatusChange}\n          />\n        );\n      case 'dashboard':\n        return (\n          <OrderDashboardView\n            orders={orders}\n            loading={loading}\n            stats={stats || undefined}\n            onOrderClick={handleOrderClick}\n          />\n        );\n      default:\n        return <OrderGridView {...commonProps} />;\n    }\n  };\n\n  if (error) {\n    return (\n      <Card className=\"p-xl text-center\">\n        <div className=\"text-destructive mb-md\">\n          <Package className=\"h-12 w-12 mx-auto mb-md opacity-50\" />\n          <h3 className=\"text-lg font-medium mb-sm\">Error Loading Orders</h3>\n          <p className=\"text-sm\">{error}</p>\n        </div>\n        <Button onClick={loadOrders} variant=\"outline\">\n          <RefreshCw className=\"h-4 w-4 mr-sm\" />\n          Try Again\n        </Button>\n      </Card>\n    );\n  }\n\n  return (\n    <div className=\"space-y-lg\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center gap-sm\">\n          <Package className=\"h-5 w-5\" />\n          <h3 className=\"text-lg font-semibold\">Purchase Orders</h3>\n          <Badge variant=\"secondary\">\n            {orders.length} order{orders.length !== 1 ? 's' : ''}\n          </Badge>\n        </div>\n        <div className=\"flex items-center gap-sm\">\n          <CreateOrderClient orgId={orgId} onOrderCreated={loadOrders} />\n          <Button variant=\"outline\" size=\"sm\">\n            <Upload className=\"h-4 w-4 mr-sm\" />\n            Import\n          </Button>\n          <Button variant=\"outline\" size=\"sm\">\n            <Download className=\"h-4 w-4 mr-sm\" />\n            Export\n          </Button>\n        </div>\n      </div>\n\n      {/* Filters and Search */}\n      <Card className=\"p-md\">\n        <div className=\"flex flex-col lg:flex-row gap-md\">\n          {/* Search */}\n          <div className=\"relative flex-1\">\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n            <UnifiedInput\n              placeholder=\"Search orders...\"\n              value={filters.search || ''}\n              onChange={(e) => handleFilterChange({ search: e.target.value })}\n              className=\"pl-10\"\n            />\n          </div>\n\n          {/* Status Filter */}\n          <Select\n            value={filters.status || 'all'}\n            onValueChange={(value) => handleFilterChange({ status: value as unknown })}\n          >\n            <SelectTrigger className=\"w-[140px]\">\n              <SelectValue placeholder=\"All Status\" />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"all\">All Status</SelectItem>\n              <SelectItem value=\"draft\">Draft</SelectItem>\n              <SelectItem value=\"pending\">Pending</SelectItem>\n              <SelectItem value=\"approved\">Approved</SelectItem>\n              <SelectItem value=\"ordered\">Ordered</SelectItem>\n              <SelectItem value=\"delivered\">Delivered</SelectItem>\n              <SelectItem value=\"cancelled\">Cancelled</SelectItem>\n            </SelectContent>\n          </Select>\n\n          {/* Priority Filter */}\n          <Select\n            value={filters.priority || 'all'}\n            onValueChange={(value) => handleFilterChange({ priority: value as unknown })}\n          >\n            <SelectTrigger className=\"w-[140px]\">\n              <SelectValue placeholder=\"All Priority\" />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"all\">All Priority</SelectItem>\n              <SelectItem value=\"low\">Low</SelectItem>\n              <SelectItem value=\"medium\">Medium</SelectItem>\n              <SelectItem value=\"high\">High</SelectItem>\n              <SelectItem value=\"urgent\">Urgent</SelectItem>\n            </SelectContent>\n          </Select>\n\n          {/* Advanced Filters Toggle */}\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={() => setShowFilters(!showFilters)}\n          >\n            <Filter className=\"h-4 w-4 mr-sm\" />\n            Filters\n          </Button>\n        </div>\n\n        {/* Advanced Filters */}\n        {showFilters && (\n          <div className=\"mt-md pt-md border-t border-border\">\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-md\">\n              {/* Vendor Filter */}\n              <div>\n                <label className=\"text-sm font-medium mb-sm block\">Vendor</label>\n                <UnifiedInput\n                  placeholder=\"Filter by vendor\"\n                  value={filters.vendor_name || ''}\n                  onChange={(e) => handleFilterChange({ vendor_name: e.target.value })}\n                />\n              </div>\n\n              {/* Amount Range */}\n              <div>\n                <label className=\"text-sm font-medium mb-sm block\">Amount Range</label>\n                <div className=\"flex gap-sm\">\n                  <UnifiedInput\n                    type=\"number\"\n                    placeholder=\"Min\"\n                    value={filters.amount_range?.min || ''}\n                    onChange={(e) => handleFilterChange({ \n                      amount_range: { \n                        ...filters.amount_range, \n                        min: e.target.value ? Number(e.target.value) : undefined \n                      } \n                    })}\n                  />\n                  <UnifiedInput\n                    type=\"number\"\n                    placeholder=\"Max\"\n                    value={filters.amount_range?.max || ''}\n                    onChange={(e) => handleFilterChange({ \n                      amount_range: { \n                        ...filters.amount_range, \n                        max: e.target.value ? Number(e.target.value) : undefined \n                      } \n                    })}\n                  />\n                </div>\n              </div>\n\n              {/* Date Range */}\n              <div>\n                <label className=\"text-sm font-medium mb-sm block\">Order Date Range</label>\n                <div className=\"flex gap-sm\">\n                  <UnifiedInput\n                    type=\"date\"\n                    value={filters.date_range?.start || ''}\n                    onChange={(e) => handleFilterChange({ \n                      date_range: { \n                        ...filters.date_range, \n                        start: e.target.value || undefined \n                      } \n                    })}\n                  />\n                  <UnifiedInput\n                    type=\"date\"\n                    value={filters.date_range?.end || ''}\n                    onChange={(e) => handleFilterChange({ \n                      date_range: { \n                        ...filters.date_range, \n                        end: e.target.value || undefined \n                      } \n                    })}\n                  />\n                </div>\n              </div>\n            </div>\n          </div>\n        )}\n      </Card>\n\n      {/* View Mode Tabs */}\n      <Tabs value={viewMode} onValueChange={(value) => handleViewModeChange(value as OrderViewMode)}>\n        <div className=\"flex items-center justify-between\">\n          <TabsList>\n            <TabsTrigger value=\"grid\">\n              <Grid className=\"h-4 w-4 mr-sm\" />\n              Grid\n            </TabsTrigger>\n            <TabsTrigger value=\"table\">\n              <Columns className=\"h-4 w-4 mr-sm\" />\n              Table\n            </TabsTrigger>\n            <TabsTrigger value=\"kanban\">\n              <Columns className=\"h-4 w-4 mr-sm\" />\n              Kanban\n            </TabsTrigger>\n            <TabsTrigger value=\"dashboard\">\n              <BarChart3 className=\"h-4 w-4 mr-sm\" />\n              Dashboard\n            </TabsTrigger>\n          </TabsList>\n\n          {/* Bulk Actions */}\n          {selectedOrders.length > 0 && (\n            <div className=\"flex items-center gap-sm\">\n              <span className=\"text-sm text-muted-foreground\">\n                {selectedOrders.length} selected\n              </span>\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => handleBulkAction({ type: 'delete', orderIds: selectedOrders })}\n              >\n                <Trash2 className=\"h-4 w-4 mr-sm\" />\n                Delete\n              </Button>\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => setSelectedOrders([])}\n              >\n                <X className=\"h-4 w-4 mr-sm\" />\n                Clear\n              </Button>\n            </div>\n          )}\n        </div>\n\n        <TabsContent value={viewMode} className=\"mt-md\">\n          {renderView()}\n        </TabsContent>\n      </Tabs>\n\n      {/* Pagination */}\n      {pagination.total > pagination.limit && (\n        <div className=\"flex items-center justify-between\">\n          <div className=\"text-sm text-muted-foreground\">\n            Showing {((pagination.page - 1) * pagination.limit) + 1} to{' '}\n            {Math.min(pagination.page * pagination.limit, pagination.total)} of{' '}\n            {pagination.total} orders\n          </div>\n          <div className=\"flex items-center gap-sm\">\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              disabled={pagination.page === 1}\n              onClick={() => setPagination(prev => ({ ...prev, page: prev.page - 1 }))}\n            >\n              Previous\n            </Button>\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              disabled={!pagination.hasMore}\n              onClick={() => setPagination(prev => ({ ...prev, page: prev.page + 1 }))}\n            >\n              Next\n            </Button>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ghxstship/apps/web/app/(app)/(shell)/procurement/orders/views/OrderGridView.tsx","messages":[{"ruleId":"react/jsx-no-undef","severity":2,"message":"'CheckCircle' is not defined.","line":51,"column":17,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":51,"endColumn":28},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Truck' is not defined.","line":53,"column":17,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":53,"endColumn":22},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'AlertCircle' is not defined.","line":56,"column":17,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":56,"endColumn":28},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Package' is not defined.","line":58,"column":17,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":58,"endColumn":24},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Package' is not defined.","line":114,"column":10,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":114,"endColumn":17},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Eye' is not defined.","line":192,"column":24,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":192,"endColumn":27},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Edit' is not defined.","line":204,"column":24,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":204,"endColumn":28},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Package' is not defined.","line":227,"column":24,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":227,"endColumn":31},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Truck' is not defined.","line":277,"column":24,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":277,"endColumn":29},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'CheckCircle' is not defined.","line":285,"column":24,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":285,"endColumn":35},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'CheckCircle' is not defined.","line":315,"column":26,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":315,"endColumn":37},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'AlertCircle' is not defined.","line":320,"column":26,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":320,"endColumn":37},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'MoreHorizontal' is not defined.","line":348,"column":22,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":348,"endColumn":36}],"suppressedMessages":[],"errorCount":13,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\nimport { User, FileText, Settings, Award, Calendar, TrendingUp, Activity, Clock, Plus, Search, Play, Trash2 } from \"lucide-react\";\nimport { useState } from 'react';\nimport { Card, Badge, Button, Checkbox } from '@ghxstship/ui';\nimport type { ProcurementOrder } from '../types';\nimport { formatCurrency, formatDate, getStatusColor, getPriorityColor, getPaymentStatusColor } from '../types';\n\ninterface OrderGridViewProps {\n  orders: ProcurementOrder[];\n  loading?: boolean;\n  selectedOrders: string[];\n  onSelectionChange: (orderIds: string[]) => void;\n  onOrderClick?: (order: ProcurementOrder) => void;\n  onEditOrder?: (order: ProcurementOrder) => void;\n  onDeleteOrder?: (order: ProcurementOrder) => void;\n  onViewOrder?: (order: ProcurementOrder) => void;\n}\n\nexport default function OrderGridView({\n  orders,\n  loading = false,\n  selectedOrders,\n  onSelectionChange,\n  onOrderClick,\n  onEditOrder,\n  onDeleteOrder,\n  onViewOrder,\n}: OrderGridViewProps) {\n  const [hoveredOrder, setHoveredOrder] = useState<string | null>(null);\n\n  const handleOrderSelection = (orderId: string, checked: boolean) => {\n    if (checked) {\n      onSelectionChange([...selectedOrders, orderId]);\n    } else {\n      onSelectionChange(selectedOrders.filter(id => id !== orderId));\n    }\n  };\n\n  const handleSelectAll = (checked: boolean) => {\n    if (checked) {\n      onSelectionChange(orders.map(order => order.id));\n    } else {\n      onSelectionChange([]);\n    }\n  };\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case 'delivered':\n      case 'received':\n        return <CheckCircle className=\"h-3 w-3\" />;\n      case 'ordered':\n        return <Truck className=\"h-3 w-3\" />;\n      case 'cancelled':\n      case 'rejected':\n        return <AlertCircle className=\"h-3 w-3\" />;\n      default:\n        return <Package className=\"h-3 w-3\" />;\n    }\n  };\n\n  const getPriorityIcon = (priority: string) => {\n    switch (priority) {\n      case 'urgent':\n        return '🔴';\n      case 'high':\n        return '🟡';\n      case 'medium':\n        return '🟢';\n      case 'low':\n        return '🔵';\n      default:\n        return '⚪';\n    }\n  };\n\n  const isOverdue = (order: ProcurementOrder) => {\n    if (!order.expected_delivery) return false;\n    const now = new Date();\n    const expectedDate = new Date(order.expected_delivery);\n    return expectedDate < now && !['delivered', 'received', 'cancelled'].includes(order.status);\n  };\n\n  if (loading) {\n    return (\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-md\">\n        {Array.from({ length: 8 }).map((_, index) => (\n          <Card key={index} className=\"p-md\">\n            <div className=\"animate-pulse\">\n              <div className=\"flex items-center justify-between mb-sm\">\n                <div className=\"h-4 bg-muted rounded w-3/4\"></div>\n                <div className=\"h-6 bg-muted rounded-full w-16\"></div>\n              </div>\n              <div className=\"h-3 bg-muted rounded w-1/2 mb-sm\"></div>\n              <div className=\"h-3 bg-muted rounded w-full mb-sm\"></div>\n              <div className=\"h-3 bg-muted rounded w-2/3 mb-md\"></div>\n              <div className=\"flex justify-between items-center\">\n                <div className=\"h-5 bg-muted rounded w-20\"></div>\n                <div className=\"flex gap-xs\">\n                  <div className=\"h-8 w-8 bg-muted rounded\"></div>\n                  <div className=\"h-8 w-8 bg-muted rounded\"></div>\n                </div>\n              </div>\n            </div>\n          </Card>\n        ))}\n      </div>\n    );\n  }\n\n  if (orders.length === 0) {\n    return (\n      <Card className=\"p-xl text-center\">\n        <Package className=\"h-12 w-12 mx-auto mb-md text-muted-foreground opacity-50\" />\n        <h3 className=\"text-lg font-medium mb-sm\">No orders found</h3>\n        <p className=\"text-muted-foreground\">\n          No orders match your current filters. Try adjusting your search criteria.\n        </p>\n      </Card>\n    );\n  }\n\n  const allSelected = orders.length > 0 && selectedOrders.length === orders.length;\n  const someSelected = selectedOrders.length > 0 && selectedOrders.length < orders.length;\n\n  return (\n    <div className=\"space-y-md\">\n      {/* Selection header */}\n      {orders.length > 0 && (\n        <div className=\"flex items-center gap-sm p-sm bg-muted/30 rounded-lg\">\n          <Checkbox\n            checked={allSelected}\n            indeterminate={someSelected}\n            onCheckedChange={handleSelectAll}\n          />\n          <span className=\"text-sm text-muted-foreground\">\n            {selectedOrders.length > 0 \n              ? `${selectedOrders.length} of ${orders.length} orders selected`\n              : `Select all ${orders.length} orders`\n            }\n          </span>\n        </div>\n      )}\n\n      {/* Grid */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-md\">\n        {orders.map((order) => {\n          const isSelected = selectedOrders.includes(order.id);\n          const isHovered = hoveredOrder === order.id;\n          const overdue = isOverdue(order);\n\n          return (\n            <Card\n              key={order.id}\n              className={`relative transition-all duration-200 cursor-pointer hover:shadow-md ${\n                isSelected ? 'ring-2 ring-primary' : ''\n              } ${overdue ? 'border-destructive/50' : ''}`}\n              onMouseEnter={() => setHoveredOrder(order.id)}\n              onMouseLeave={() => setHoveredOrder(null)}\n              onClick={() => onOrderClick?.(order)}\n            >\n              {/* Selection checkbox */}\n              <div className=\"absolute top-sm left-sm z-10\">\n                <Checkbox\n                  checked={isSelected}\n                  onCheckedChange={(checked) => handleOrderSelection(order.id, checked as boolean)}\n                  onClick={(e) => e.stopPropagation()}\n                />\n              </div>\n\n              {/* Overdue indicator */}\n              {overdue && (\n                <div className=\"absolute top-sm right-sm z-10\">\n                  <Badge variant=\"destructive\" className=\"text-xs\">\n                    Overdue\n                  </Badge>\n                </div>\n              )}\n\n              {/* Action buttons */}\n              {isHovered && !overdue && (\n                <div className=\"absolute top-sm right-sm z-10 flex gap-xs\">\n                  {onViewOrder && (\n                    <Button\n                      size=\"sm\"\n                      variant=\"secondary\"\n                      onClick={(e) => {\n                        e.stopPropagation();\n                        onViewOrder(order);\n                      }}\n                    >\n                      <Eye className=\"h-3 w-3\" />\n                    </Button>\n                  )}\n                  {onEditOrder && (\n                    <Button\n                      size=\"sm\"\n                      variant=\"secondary\"\n                      onClick={(e) => {\n                        e.stopPropagation();\n                        onEditOrder(order);\n                      }}\n                    >\n                      <Edit className=\"h-3 w-3\" />\n                    </Button>\n                  )}\n                  {onDeleteOrder && (\n                    <Button\n                      size=\"sm\"\n                      variant=\"destructive\"\n                      onClick={(e) => {\n                        e.stopPropagation();\n                        onDeleteOrder(order);\n                      }}\n                    >\n                      <Trash2 className=\"h-3 w-3\" />\n                    </Button>\n                  )}\n                </div>\n              )}\n\n              <div className=\"p-md pt-lg\">\n                {/* Header */}\n                <div className=\"flex items-start justify-between mb-sm\">\n                  <div className=\"flex items-center gap-sm min-w-0 flex-1\">\n                    <div className=\"p-sm bg-primary/10 rounded-lg\">\n                      <Package className=\"h-4 w-4 text-primary flex-shrink-0\" />\n                    </div>\n                    <div className=\"min-w-0 flex-1\">\n                      <h4 className=\"font-medium truncate\">{order.order_number}</h4>\n                      <p className=\"text-sm text-muted-foreground truncate\">{order.vendor_name}</p>\n                    </div>\n                  </div>\n                  {!overdue && (\n                    <Badge variant={getStatusColor(order.status)} className=\"ml-sm\">\n                      {getStatusIcon(order.status)}\n                      <span className=\"ml-xs capitalize\">{order.status}</span>\n                    </Badge>\n                  )}\n                </div>\n\n                {/* Priority and Payment Status */}\n                <div className=\"flex items-center gap-sm mb-sm\">\n                  <div className=\"flex items-center gap-xs\">\n                    <span className=\"text-sm\">{getPriorityIcon(order.priority)}</span>\n                    <Badge variant={getPriorityColor(order.priority)} className=\"text-xs\">\n                      {order.priority}\n                    </Badge>\n                  </div>\n                  <Badge variant={getPaymentStatusColor(order.payment_status)} className=\"text-xs\">\n                    {order.payment_status.replace('_', ' ')}\n                  </Badge>\n                </div>\n\n                {/* Description */}\n                {order.description && (\n                  <p className=\"text-sm text-muted-foreground line-clamp-2 mb-sm\">\n                    {order.description}\n                  </p>\n                )}\n\n                {/* Amount */}\n                <div className=\"flex items-center justify-between mb-sm\">\n                  <div className=\"text-lg font-semibold\">\n                    {formatCurrency(order.total_amount, order.currency)}\n                  </div>\n                </div>\n\n                {/* Dates */}\n                <div className=\"space-y-xs text-xs text-muted-foreground mb-sm\">\n                  <div className=\"flex items-center gap-xs\">\n                    <Calendar className=\"h-3 w-3 flex-shrink-0\" />\n                    <span>Ordered: {formatDate(order.order_date)}</span>\n                  </div>\n                  {order.expected_delivery && (\n                    <div className=\"flex items-center gap-xs\">\n                      <Truck className=\"h-3 w-3 flex-shrink-0\" />\n                      <span className={overdue ? 'text-destructive' : ''}>\n                        Expected: {formatDate(order.expected_delivery)}\n                      </span>\n                    </div>\n                  )}\n                  {order.actual_delivery && (\n                    <div className=\"flex items-center gap-xs\">\n                      <CheckCircle className=\"h-3 w-3 flex-shrink-0 text-success\" />\n                      <span>Delivered: {formatDate(order.actual_delivery)}</span>\n                    </div>\n                  )}\n                </div>\n\n                {/* Tags */}\n                {order.tags && order.tags.length > 0 && (\n                  <div className=\"flex flex-wrap gap-xs mb-sm\">\n                    {order.tags.slice(0, 3).map((tag, index) => (\n                      <span\n                        key={index}\n                        className=\"px-xs py-xs bg-muted rounded text-xs\"\n                      >\n                        {tag}\n                      </span>\n                    ))}\n                    {order.tags.length > 3 && (\n                      <span className=\"px-xs py-xs bg-muted rounded text-xs\">\n                        +{order.tags.length - 3} more\n                      </span>\n                    )}\n                  </div>\n                )}\n\n                {/* Approval status */}\n                {order.approval_required && (\n                  <div className=\"mb-sm\">\n                    {order.approved_by ? (\n                      <div className=\"flex items-center gap-xs text-xs text-success\">\n                        <CheckCircle className=\"h-3 w-3\" />\n                        <span>Approved</span>\n                      </div>\n                    ) : (\n                      <div className=\"flex items-center gap-xs text-xs text-warning\">\n                        <AlertCircle className=\"h-3 w-3\" />\n                        <span>Approval Required</span>\n                      </div>\n                    )}\n                  </div>\n                )}\n\n                {/* Tracking */}\n                {order.tracking_number && (\n                  <div className=\"text-xs text-muted-foreground mb-sm\">\n                    <strong>Tracking:</strong> {order.tracking_number}\n                    {order.carrier && <span> ({order.carrier})</span>}\n                  </div>\n                )}\n\n                {/* Footer */}\n                <div className=\"flex items-center justify-between mt-md pt-sm border-t border-border\">\n                  <span className=\"text-xs text-muted-foreground\">\n                    {formatDate(order.created_at)}\n                  </span>\n                  <Button\n                    size=\"sm\"\n                    variant=\"ghost\"\n                    onClick={(e) => {\n                      e.stopPropagation();\n                      // Show more options menu\n                    }}\n                  >\n                    <MoreHorizontal className=\"h-3 w-3\" />\n                  </Button>\n                </div>\n              </div>\n            </Card>\n          );\n        })}\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ghxstship/apps/web/app/(app)/(shell)/procurement/orders/views/OrderKanbanView.tsx","messages":[{"ruleId":"react/jsx-no-undef","severity":2,"message":"'CheckCircle' is not defined.","line":72,"column":17,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":72,"endColumn":28},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Truck' is not defined.","line":74,"column":17,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":74,"endColumn":22},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'AlertCircle' is not defined.","line":77,"column":17,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":77,"endColumn":28},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Package' is not defined.","line":79,"column":17,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":79,"endColumn":24},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Package' is not defined.","line":187,"column":32,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":187,"endColumn":39},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Eye' is not defined.","line":209,"column":36,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":209,"endColumn":39},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Edit' is not defined.","line":222,"column":36,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":222,"endColumn":40},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Truck' is not defined.","line":260,"column":34,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":260,"endColumn":39},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'CheckCircle' is not defined.","line":273,"column":36,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":273,"endColumn":47},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'AlertCircle' is not defined.","line":278,"column":36,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":278,"endColumn":47}],"suppressedMessages":[],"errorCount":10,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\nimport { User, FileText, Settings, Award, Calendar, TrendingUp, Activity, Clock, Plus, Search, Play, Trash2 } from \"lucide-react\";\nimport { useState } from 'react';\nimport { Card, Badge, Button } from '@ghxstship/ui';\nimport type { ProcurementOrder } from '../types';\nimport { formatCurrency, formatDate, getStatusColor, getPriorityColor } from '../types';\n\ninterface OrderKanbanViewProps {\n  orders: ProcurementOrder[];\n  loading?: boolean;\n  selectedOrders: string[];\n  onSelectionChange: (orderIds: string[]) => void;\n  onOrderClick?: (order: ProcurementOrder) => void;\n  onEditOrder?: (order: ProcurementOrder) => void;\n  onDeleteOrder?: (order: ProcurementOrder) => void;\n  onViewOrder?: (order: ProcurementOrder) => void;\n  onStatusChange?: (order: ProcurementOrder, newStatus: string) => void;\n}\n\nconst statusColumns = [\n  { key: 'draft', label: 'Draft', color: 'bg-secondary/10 border-secondary/20' },\n  { key: 'pending', label: 'Pending', color: 'bg-warning/10 border-warning/20' },\n  { key: 'approved', label: 'Approved', color: 'bg-success/10 border-success/20' },\n  { key: 'ordered', label: 'Ordered', color: 'bg-primary/10 border-primary/20' },\n  { key: 'delivered', label: 'Delivered', color: 'bg-success/10 border-success/20' },\n  { key: 'cancelled', label: 'Cancelled', color: 'bg-destructive/10 border-destructive/20' },\n];\n\nexport default function OrderKanbanView({\n  orders,\n  loading = false,\n  selectedOrders,\n  onSelectionChange,\n  onOrderClick,\n  onEditOrder,\n  onDeleteOrder,\n  onViewOrder,\n  onStatusChange,\n}: OrderKanbanViewProps) {\n  const [draggedOrder, setDraggedOrder] = useState<ProcurementOrder | null>(null);\n\n  const handleDragStart = (e: React.DragEvent, order: ProcurementOrder) => {\n    setDraggedOrder(order);\n    e.dataTransfer.effectAllowed = 'move';\n  };\n\n  const handleDragEnd = () => {\n    setDraggedOrder(null);\n  };\n\n  const handleDragOver = (e: React.DragEvent) => {\n    e.preventDefault();\n    e.dataTransfer.dropEffect = 'move';\n  };\n\n  const handleDrop = (e: React.DragEvent, status: string) => {\n    e.preventDefault();\n    if (draggedOrder && draggedOrder.status !== status) {\n      onStatusChange?.(draggedOrder, status);\n    }\n    setDraggedOrder(null);\n  };\n\n  const getOrdersByStatus = (status: string) => {\n    return orders.filter(order => order.status === status);\n  };\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case 'delivered':\n      case 'received':\n        return <CheckCircle className=\"h-3 w-3\" />;\n      case 'ordered':\n        return <Truck className=\"h-3 w-3\" />;\n      case 'cancelled':\n      case 'rejected':\n        return <AlertCircle className=\"h-3 w-3\" />;\n      default:\n        return <Package className=\"h-3 w-3\" />;\n    }\n  };\n\n  const getPriorityIcon = (priority: string) => {\n    switch (priority) {\n      case 'urgent':\n        return '🔴';\n      case 'high':\n        return '🟡';\n      case 'medium':\n        return '🟢';\n      case 'low':\n        return '🔵';\n      default:\n        return '⚪';\n    }\n  };\n\n  const isOverdue = (order: ProcurementOrder) => {\n    if (!order.expected_delivery) return false;\n    const now = new Date();\n    const expectedDate = new Date(order.expected_delivery);\n    return expectedDate < now && !['delivered', 'received', 'cancelled'].includes(order.status);\n  };\n\n  if (loading) {\n    return (\n      <div className=\"flex gap-md h-[600px]\">\n        {statusColumns.map((column) => (\n          <div key={column.key} className=\"flex-1\">\n            <Card className={`h-full ${column.color}`}>\n              <div className=\"p-md border-b border-border\">\n                <div className=\"h-6 bg-muted rounded w-20 animate-pulse\"></div>\n              </div>\n              <div className=\"p-md space-y-md\">\n                {Array.from({ length: 3 }).map((_, index) => (\n                  <Card key={index} className=\"p-md\">\n                    <div className=\"animate-pulse space-y-sm\">\n                      <div className=\"flex items-center gap-sm\">\n                        <div className=\"h-4 w-4 bg-muted rounded\"></div>\n                        <div className=\"h-4 bg-muted rounded w-3/4\"></div>\n                      </div>\n                      <div className=\"h-3 bg-muted rounded w-1/2\"></div>\n                      <div className=\"h-3 bg-muted rounded w-full\"></div>\n                      <div className=\"h-5 bg-muted rounded w-16\"></div>\n                    </div>\n                  </Card>\n                ))}\n              </div>\n            </Card>\n          </div>\n        ))}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"flex gap-md h-[600px] overflow-x-auto\">\n      {statusColumns.map((column) => {\n        const columnOrders = getOrdersByStatus(column.key);\n        \n        return (\n          <div key={column.key} className=\"flex-1 min-w-[320px]\">\n            <Card \n              className={`h-full ${column.color} flex flex-col`}\n              onDragOver={handleDragOver}\n              onDrop={(e) => handleDrop(e, column.key)}\n            >\n              {/* Column header */}\n              <div className=\"p-md border-b border-border flex-shrink-0\">\n                <div className=\"flex items-center justify-between\">\n                  <h3 className=\"font-medium\">{column.label}</h3>\n                  <Badge variant=\"secondary\">\n                    {columnOrders.length}\n                  </Badge>\n                </div>\n              </div>\n\n              {/* Column content */}\n              <div className=\"flex-1 p-md space-y-md overflow-y-auto\">\n                {columnOrders.length === 0 ? (\n                  <div className=\"text-center py-lg text-muted-foreground\">\n                    <div className=\"text-sm\">No {column.label.toLowerCase()} orders</div>\n                  </div>\n                ) : (\n                  columnOrders.map((order) => {\n                    const isSelected = selectedOrders.includes(order.id);\n                    const isDragging = draggedOrder?.id === order.id;\n                    const overdue = isOverdue(order);\n\n                    return (\n                      <Card\n                        key={order.id}\n                        className={`cursor-pointer transition-all duration-200 hover:shadow-md ${\n                          isSelected ? 'ring-2 ring-primary' : ''\n                        } ${isDragging ? 'opacity-50 rotate-2' : ''} ${\n                          overdue ? 'border-destructive/50' : ''\n                        }`}\n                        draggable\n                        onDragStart={(e) => handleDragStart(e, order)}\n                        onDragEnd={handleDragEnd}\n                        onClick={() => onOrderClick?.(order)}\n                      >\n                        <div className=\"p-md\">\n                          {/* Header */}\n                          <div className=\"flex items-start justify-between mb-sm\">\n                            <div className=\"flex items-center gap-sm min-w-0 flex-1\">\n                              <Package className=\"h-4 w-4 text-muted-foreground flex-shrink-0\" />\n                              <div className=\"min-w-0 flex-1\">\n                                <h4 className=\"font-medium text-sm truncate\">{order.order_number}</h4>\n                                <p className=\"text-xs text-muted-foreground truncate\">{order.vendor_name}</p>\n                              </div>\n                            </div>\n                            <div className=\"flex items-center gap-xs ml-sm\">\n                              {overdue && (\n                                <Badge variant=\"destructive\" className=\"text-xs\">\n                                  Overdue\n                                </Badge>\n                              )}\n                              {onViewOrder && (\n                                <Button\n                                  size=\"sm\"\n                                  variant=\"ghost\"\n                                  onClick={(e) => {\n                                    e.stopPropagation();\n                                    onViewOrder(order);\n                                  }}\n                                  className=\"h-6 w-6 p-0\"\n                                >\n                                  <Eye className=\"h-3 w-3\" />\n                                </Button>\n                              )}\n                              {onEditOrder && (\n                                <Button\n                                  size=\"sm\"\n                                  variant=\"ghost\"\n                                  onClick={(e) => {\n                                    e.stopPropagation();\n                                    onEditOrder(order);\n                                  }}\n                                  className=\"h-6 w-6 p-0\"\n                                >\n                                  <Edit className=\"h-3 w-3\" />\n                                </Button>\n                              )}\n                            </div>\n                          </div>\n\n                          {/* Priority and Payment */}\n                          <div className=\"flex items-center gap-sm mb-sm\">\n                            <div className=\"flex items-center gap-xs\">\n                              <span className=\"text-xs\">{getPriorityIcon(order.priority)}</span>\n                              <Badge variant={getPriorityColor(order.priority)} className=\"text-xs\">\n                                {order.priority}\n                              </Badge>\n                            </div>\n                          </div>\n\n                          {/* Description */}\n                          {order.description && (\n                            <p className=\"text-xs text-muted-foreground line-clamp-2 mb-sm\">\n                              {order.description}\n                            </p>\n                          )}\n\n                          {/* Amount */}\n                          <div className=\"flex items-center justify-between mb-sm\">\n                            <div className=\"font-semibold text-sm\">\n                              {formatCurrency(order.total_amount, order.currency)}\n                            </div>\n                          </div>\n\n                          {/* Dates */}\n                          <div className=\"space-y-xs text-xs text-muted-foreground mb-sm\">\n                            <div className=\"flex items-center gap-xs\">\n                              <Calendar className=\"h-3 w-3 flex-shrink-0\" />\n                              <span>{formatDate(order.order_date)}</span>\n                            </div>\n                            {order.expected_delivery && (\n                              <div className=\"flex items-center gap-xs\">\n                                <Truck className=\"h-3 w-3 flex-shrink-0\" />\n                                <span className={overdue ? 'text-destructive' : ''}>\n                                  {formatDate(order.expected_delivery)}\n                                </span>\n                              </div>\n                            )}\n                          </div>\n\n                          {/* Approval status */}\n                          {order.approval_required && (\n                            <div className=\"mb-sm\">\n                              {order.approved_by ? (\n                                <div className=\"flex items-center gap-xs text-xs text-success\">\n                                  <CheckCircle className=\"h-3 w-3\" />\n                                  <span>Approved</span>\n                                </div>\n                              ) : (\n                                <div className=\"flex items-center gap-xs text-xs text-warning\">\n                                  <AlertCircle className=\"h-3 w-3\" />\n                                  <span>Needs Approval</span>\n                                </div>\n                              )}\n                            </div>\n                          )}\n\n                          {/* Footer */}\n                          <div className=\"flex items-center justify-between pt-sm border-t border-border text-xs text-muted-foreground\">\n                            <span>{formatDate(order.created_at)}</span>\n                            <div className=\"flex items-center gap-xs\">\n                              <div className=\"w-2 h-2 rounded-full bg-current opacity-50\"></div>\n                              <span>{order.id.slice(-6)}</span>\n                            </div>\n                          </div>\n                        </div>\n                      </Card>\n                    );\n                  })\n                )}\n              </div>\n            </Card>\n          </div>\n        );\n      })}\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ghxstship/apps/web/app/(app)/(shell)/procurement/requests/RequestsClient.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'requestsService'. Either include it or remove the dependency array. Outer scope values like 'sortConfig' aren't valid dependencies because mutating them doesn't re-render the component.","line":223,"column":6,"nodeType":"ArrayExpression","endLine":223,"endColumn":43,"suggestions":[{"desc":"Update the dependencies array to be: [requestsService, organizationId, filters]","fix":{"range":[6760,6797],"text":"[requestsService, organizationId, filters]"}}]},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'DataViewProvider' is not defined.","line":394,"column":8,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":394,"endColumn":24},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'DataViews' is not defined.","line":414,"column":12,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":414,"endColumn":21},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'UniversalDrawer' is not defined.","line":417,"column":12,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":417,"endColumn":27}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { Plus, FileText, CheckCircle, XCircle, Clock, AlertTriangle, Search, Download, Upload, RefreshCw, Eye, Edit, Trash2, Grid3X3, List, LayoutDashboard, Calendar, BarChart3, Filter } from \"lucide-react\";\nimport { useState, useEffect, useCallback } from 'react';\nimport { useTranslations } from 'next-intl';\nimport { createBrowserClient } from '@ghxstship/auth';\nimport { \n  Button, \n  Badge, \n  Card,\n  Input,\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n  Tabs,\n  TabsContent,\n  TabsList,\n  TabsTrigger,\n  Checkbox\n} from '@ghxstship/ui';\nimport AppDrawer from '@/app/_components/shared/AppDrawer';\nimport { RequestsService } from './lib/requestsService';\nimport { CreateRequestClient } from './CreateRequestClient';\nimport type { ProcurementRequest, RequestFilters, RequestSortOptions } from './types';\n\ninterface RequestsClientProps {\n  className?: string;\n  organizationId?: string;\n}\n\n// View Types\ntype RequestViewMode = 'dashboard' | 'grid' | 'list' | 'kanban' | 'calendar';\n\nexport default function RequestsClient({ className, organizationId = 'default-org' }: RequestsClientProps) {\n  const t = useTranslations();\n  const supabase = createBrowserClient();\n  \n  // State management\n  const [loading, setLoading] = useState(false);\n  const [requests, setRequests] = useState<ProcurementRequest[]>([]);\n  const [selectedRequest, setSelectedRequest] = useState<ProcurementRequest | null>(null);\n  const [selectedRequests, setSelectedRequests] = useState<string[]>([]);\n  const [viewMode, setViewMode] = useState<RequestViewMode>('dashboard');\n  const [showCreateDrawer, setShowCreateDrawer] = useState(false);\n  const [showRequestDrawer, setShowRequestDrawer] = useState(false);\n  \n  // Filters and sorting\n  const [filters, setFilters] = useState({\n    search: '',\n    status: 'all',\n    priority: 'all',\n    category: 'all'\n  });\n  const [sort, setSort] = useState<RequestSortOptions>({ field: 'created_at', direction: 'desc' });\n\n  const requestsService = new RequestsService();\n\n  // Field configuration for procurement requests\n  const fieldConfig: FieldConfig[] = [\n    {\n      key: 'title',\n      label: 'Request Title',\n      type: 'text',\n      required: true,\n      sortable: true,\n      searchable: true\n    },\n    {\n      key: 'requester',\n      label: 'Requester',\n      type: 'text',\n      sortable: true,\n      render: (value: unknown) => value?.name || 'Unknown'\n    },\n    {\n      key: 'status',\n      label: 'Status',\n      type: 'select',\n      options: [\n        { value: 'draft', label: 'Draft' },\n        { value: 'submitted', label: 'Submitted' },\n        { value: 'under_review', label: 'Under Review' },\n        { value: 'approved', label: 'Approved' },\n        { value: 'rejected', label: 'Rejected' },\n        { value: 'cancelled', label: 'Cancelled' },\n        { value: 'converted', label: 'Converted' }\n      ],\n      filterable: true,\n      sortable: true,\n      render: (value: string) => {\n        const statusConfig = {\n          draft: { color: 'gray' as const, icon: FileText },\n          submitted: { color: 'blue' as const, icon: Clock },\n          under_review: { color: 'yellow' as const, icon: AlertTriangle },\n          approved: { color: 'green' as const, icon: CheckCircle },\n          rejected: { color: 'red' as const, icon: XCircle },\n          cancelled: { color: 'gray' as const, icon: XCircle },\n          converted: { color: 'purple' as const, icon: CheckCircle }\n        };\n        const config = statusConfig[value as keyof typeof statusConfig] || statusConfig.draft;\n        const Icon = config.icon;\n        return (\n          <Badge variant={config.color} className=\"flex items-center gap-1\">\n            <Icon className=\"h-3 w-3\" />\n            {value.charAt(0).toUpperCase() + value.slice(1).replace('_', ' ')}\n          </Badge>\n        );\n      }\n    },\n    {\n      key: 'priority',\n      label: 'Priority',\n      type: 'select',\n      options: [\n        { value: 'low', label: 'Low' },\n        { value: 'medium', label: 'Medium' },\n        { value: 'high', label: 'High' },\n        { value: 'urgent', label: 'Urgent' }\n      ],\n      filterable: true,\n      sortable: true,\n      render: (value: string) => {\n        const priorityColors = {\n          low: 'gray' as const,\n          medium: 'blue' as const,\n          high: 'yellow' as const,\n          urgent: 'red' as const\n        };\n        return (\n          <Badge variant={priorityColors[value as keyof typeof priorityColors] || 'gray'}>\n            {value.charAt(0).toUpperCase() + value.slice(1)}\n          </Badge>\n        );\n      }\n    },\n    {\n      key: 'category',\n      label: 'Category',\n      type: 'select',\n      options: [\n        { value: 'equipment', label: 'Equipment' },\n        { value: 'supplies', label: 'Supplies' },\n        { value: 'services', label: 'Services' },\n        { value: 'materials', label: 'Materials' },\n        { value: 'software', label: 'Software' },\n        { value: 'maintenance', label: 'Maintenance' },\n        { value: 'other', label: 'Other' }\n      ],\n      filterable: true,\n      sortable: true\n    },\n    {\n      key: 'estimated_total',\n      label: 'Estimated Total',\n      type: 'currency',\n      sortable: true,\n      render: (value: number, record: DataRecord) => {\n        const currency = record.currency || 'USD';\n        return new Intl.NumberFormat('en-US', {\n          style: 'currency',\n          currency: currency\n        }).format(value || 0);\n      }\n    },\n    {\n      key: 'project',\n      label: 'Project',\n      type: 'text',\n      sortable: true,\n      render: (value: unknown) => value?.name || 'No Project'\n    },\n    {\n      key: 'requested_delivery_date',\n      label: 'Requested Delivery',\n      type: 'date',\n      sortable: true\n    },\n    {\n      key: 'created_at',\n      label: 'Created',\n      type: 'date',\n      sortable: true\n    },\n    {\n      key: 'updated_at',\n      label: 'Updated',\n      type: 'date',\n      sortable: true\n    }\n  ];\n\n  // Load data function\n  const loadData = useCallback(async () => {\n    setLoading(true);\n    try {\n      const { data: requests, error } = await requestsService.getRequests(\n        organizationId,\n        filters,\n        sortConfig\n      );\n\n      if (error) {\n        toast.error('Failed to load requests', { description: error });\n        return;\n      }\n\n      // Transform data for DataViews\n      const transformedData: DataRecord[] = requests.map(request => ({\n        id: request.id!,\n        ...request,\n        record_type: 'request'\n      }));\n\n      setData(transformedData);\n    } catch (error) {\n      console.error('Error loading requests:', error);\n      toast.error('Failed to load requests');\n    } finally {\n      setLoading(false);\n    }\n  }, [organizationId, filters, sortConfig]);\n\n  // Load data on mount and when dependencies change\n  useEffect(() => {\n    loadData();\n  }, [loadData]);\n\n  // Handle record selection\n  const handleRecordSelect = (record: DataRecord) => {\n    setSelectedRecord(record);\n    setDrawerOpen(true);\n  };\n\n  // Handle record actions\n  const handleRecordAction = async (action: string, record: DataRecord) => {\n    try {\n      switch (action) {\n        case 'submit':\n          if (record.status === 'draft') {\n            await requestsService.submitRequest(record.id);\n            toast.success('Request submitted for approval');\n            loadData();\n          }\n          break;\n        case 'approve':\n          if (record.status === 'submitted' || record.status === 'under_review') {\n            // In a real app, this would check permissions\n            await requestsService.approveRequest(record.id, 'current-user-id');\n            toast.success('Request approved');\n            loadData();\n          }\n          break;\n        case 'reject':\n          if (record.status === 'submitted' || record.status === 'under_review') {\n            await requestsService.rejectRequest(record.id, 'current-user-id', 'Rejected by user');\n            toast.success('Request rejected');\n            loadData();\n          }\n          break;\n        case 'convert':\n          if (record.status === 'approved') {\n            const { data: result, error } = await requestsService.convertToPurchaseOrder(record.id);\n            if (error) {\n              toast.error('Failed to convert to purchase order', { description: error });\n            } else {\n              toast.success(`Converted to purchase order: ${result?.orderId}`);\n              loadData();\n            }\n          }\n          break;\n        case 'delete':\n          await requestsService.deleteRequest(record.id);\n          toast.success('Request deleted');\n          loadData();\n          break;\n      }\n    } catch (error) {\n      console.error('Error performing action:', error);\n      toast.error(`Failed to ${action} request`);\n    }\n  };\n\n  // Handle search\n  const handleSearch = (query: string) => {\n    // In a real implementation, this would update filters\n    console.log('Search:', query);\n  };\n\n  // Handle filter changes\n  const handleFilter = (newFilters: FilterConfig[]) => {\n    const requestFilters: RequestFilters = {};\n    \n    newFilters.forEach(filter => {\n      switch (filter.field) {\n        case 'status':\n          requestFilters.status = filter.value as unknown[];\n          break;\n        case 'priority':\n          requestFilters.priority = filter.value as unknown[];\n          break;\n        case 'category':\n          requestFilters.category = filter.value as unknown[];\n          break;\n      }\n    });\n\n    setFilters(requestFilters);\n  };\n\n  // Handle sort changes\n  const handleSort = (sorts: SortConfig[]) => {\n    if (sorts.length > 0) {\n      const sort = sorts[0];\n      setSortConfig({\n        field: sort.field as unknown,\n        direction: sort.direction\n      });\n    }\n  };\n\n  // Handle export\n  const handleExport = (data: DataRecord[], format: string) => {\n    console.log('Export:', data.length, 'records in', format, 'format');\n    toast.success(`Exported ${data.length} requests as ${format.toUpperCase()}`);\n  };\n\n  // Handle import\n  const handleImport = (data: unknown[]) => {\n    console.log('Import:', data.length, 'records');\n    toast.success(`Imported ${data.length} requests`);\n    loadData();\n  };\n\n  // DataView configuration\n  const dataViewConfig: DataViewConfig = {\n    id: 'procurement-requests',\n    name: 'Procurement Requests',\n    viewType: 'grid',\n    defaultView: 'grid',\n    fields: fieldConfig,\n    data: data,\n    loading: loading,\n    onRecordSelect: handleRecordSelect,\n    onRecordAction: handleRecordAction,\n    onSearch: handleSearch,\n    onFilter: handleFilter,\n    onSort: handleSort,\n    onRefresh: loadData,\n    onExport: handleExport,\n    onImport: handleImport,\n    actions: [\n      {\n        id: 'submit',\n        label: 'Submit',\n        icon: 'send',\n        variant: 'primary',\n        condition: (record) => record.status === 'draft'\n      },\n      {\n        id: 'approve',\n        label: 'Approve',\n        icon: 'check',\n        variant: 'success',\n        condition: (record) => ['submitted', 'under_review'].includes(record.status)\n      },\n      {\n        id: 'reject',\n        label: 'Reject',\n        icon: 'x',\n        variant: 'destructive',\n        condition: (record) => ['submitted', 'under_review'].includes(record.status)\n      },\n      {\n        id: 'convert',\n        label: 'Convert to PO',\n        icon: 'arrow-right',\n        variant: 'secondary',\n        condition: (record) => record.status === 'approved'\n      },\n      {\n        id: 'delete',\n        label: 'Delete',\n        icon: 'trash',\n        variant: 'destructive',\n        condition: (record) => ['draft', 'cancelled'].includes(record.status)\n      }\n    ]\n  };\n\n  return (\n    <div className={className}>\n      <DataViewProvider config={dataViewConfig}>\n        <div className=\"space-y-6\">\n          {/* Header */}\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h1 className=\"text-2xl font-semibold text-foreground\">Procurement Requests</h1>\n              <p className=\"text-sm text-muted-foreground\">\n                Manage purchase requisitions and approval workflows\n              </p>\n            </div>\n            <Button \n              onClick={() => setCreateDrawerOpen(true)}\n              className=\"flex items-center gap-2\"\n            >\n              <Plus className=\"h-4 w-4\" />\n              New Request\n            </Button>\n          </div>\n\n          {/* Data Views */}\n          <DataViews />\n\n          {/* Request Details Drawer */}\n          <UniversalDrawer\n            open={drawerOpen}\n            onClose={() => setDrawerOpen(false)}\n            record={selectedRecord}\n            fields={fieldConfig}\n            mode=\"view\"\n            title=\"Request Details\"\n            tabs={[\n              {\n                key: 'details',\n                label: 'Details',\n                content: selectedRecord ? (\n                  <div className=\"space-y-4\">\n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <div>\n                        <label className=\"text-sm font-medium text-muted-foreground\">Title</label>\n                        <p className=\"text-sm\">{selectedRecord.title}</p>\n                      </div>\n                      <div>\n                        <label className=\"text-sm font-medium text-muted-foreground\">Status</label>\n                        <div className=\"mt-1\">\n                          {fieldConfig.find(f => f.key === 'status')?.render?.(selectedRecord.status, selectedRecord)}\n                        </div>\n                      </div>\n                      <div>\n                        <label className=\"text-sm font-medium text-muted-foreground\">Priority</label>\n                        <div className=\"mt-1\">\n                          {fieldConfig.find(f => f.key === 'priority')?.render?.(selectedRecord.priority, selectedRecord)}\n                        </div>\n                      </div>\n                      <div>\n                        <label className=\"text-sm font-medium text-muted-foreground\">Category</label>\n                        <p className=\"text-sm\">{selectedRecord.category}</p>\n                      </div>\n                      <div>\n                        <label className=\"text-sm font-medium text-muted-foreground\">Estimated Total</label>\n                        <p className=\"text-sm\">\n                          {fieldConfig.find(f => f.key === 'estimated_total')?.render?.(selectedRecord.estimated_total, selectedRecord)}\n                        </p>\n                      </div>\n                      <div>\n                        <label className=\"text-sm font-medium text-muted-foreground\">Requester</label>\n                        <p className=\"text-sm\">{selectedRecord.requester?.name}</p>\n                      </div>\n                    </div>\n                    {selectedRecord.description && (\n                      <div>\n                        <label className=\"text-sm font-medium text-muted-foreground\">Description</label>\n                        <p className=\"text-sm mt-1\">{selectedRecord.description}</p>\n                      </div>\n                    )}\n                    {selectedRecord.business_justification && (\n                      <div>\n                        <label className=\"text-sm font-medium text-muted-foreground\">Business Justification</label>\n                        <p className=\"text-sm mt-1\">{selectedRecord.business_justification}</p>\n                      </div>\n                    )}\n                  </div>\n                ) : null\n              },\n              {\n                key: 'items',\n                label: 'Items',\n                content: selectedRecord?.items ? (\n                  <div className=\"space-y-4\">\n                    {selectedRecord.items.map((item: any, index: number) => (\n                      <div key={index} className=\"border rounded-lg p-4\">\n                        <div className=\"grid grid-cols-2 gap-4\">\n                          <div>\n                            <label className=\"text-sm font-medium text-muted-foreground\">Item Name</label>\n                            <p className=\"text-sm\">{item.name}</p>\n                          </div>\n                          <div>\n                            <label className=\"text-sm font-medium text-muted-foreground\">Category</label>\n                            <p className=\"text-sm\">{item.category}</p>\n                          </div>\n                          <div>\n                            <label className=\"text-sm font-medium text-muted-foreground\">Quantity</label>\n                            <p className=\"text-sm\">{item.quantity} {item.unit}</p>\n                          </div>\n                          <div>\n                            <label className=\"text-sm font-medium text-muted-foreground\">Estimated Price</label>\n                            <p className=\"text-sm\">\n                              {new Intl.NumberFormat('en-US', {\n                                style: 'currency',\n                                currency: selectedRecord.currency || 'USD'\n                              }).format(item.estimated_total_price || 0)}\n                            </p>\n                          </div>\n                        </div>\n                        {item.description && (\n                          <div className=\"mt-2\">\n                            <label className=\"text-sm font-medium text-muted-foreground\">Description</label>\n                            <p className=\"text-sm mt-1\">{item.description}</p>\n                          </div>\n                        )}\n                      </div>\n                    ))}\n                  </div>\n                ) : (\n                  <p className=\"text-sm text-muted-foreground\">No items found</p>\n                )\n              },\n              {\n                key: 'activity',\n                label: 'Activity',\n                content: (\n                  <div className=\"space-y-4\">\n                    <p className=\"text-sm text-muted-foreground\">Activity log will be implemented here</p>\n                  </div>\n                )\n              }\n            ]}\n          />\n\n          {/* Create Request Drawer */}\n          <CreateRequestClient\n            open={createDrawerOpen}\n            onClose={() => setCreateDrawerOpen(false)}\n            onSuccess={() => {\n              setCreateDrawerOpen(false);\n              loadData();\n            }}\n            organizationId={organizationId}\n          />\n        </div>\n      </DataViewProvider>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ghxstship/apps/web/app/(app)/(shell)/procurement/tracking/views/TrackingGridView.tsx","messages":[{"ruleId":"react/jsx-no-undef","severity":2,"message":"'CheckCircle' is not defined.","line":51,"column":17,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":51,"endColumn":28},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Truck' is not defined.","line":55,"column":17,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":55,"endColumn":22},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'AlertCircle' is not defined.","line":58,"column":17,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":58,"endColumn":28},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Package' is not defined.","line":60,"column":17,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":60,"endColumn":24},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Package' is not defined.","line":125,"column":10,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":125,"endColumn":17},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'MapPin' is not defined.","line":206,"column":24,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":206,"endColumn":30},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Eye' is not defined.","line":219,"column":24,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":219,"endColumn":27},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Edit' is not defined.","line":232,"column":24,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":232,"endColumn":28},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Truck' is not defined.","line":290,"column":24,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":290,"endColumn":29},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'CheckCircle' is not defined.","line":320,"column":24,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":320,"endColumn":35},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'ExternalLink' is not defined.","line":360,"column":24,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":360,"endColumn":36}],"suppressedMessages":[],"errorCount":11,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\nimport { User, FileText, Settings, Award, Calendar, TrendingUp, Activity, Clock, Plus, Search, Play, Trash2 } from \"lucide-react\";\nimport { useState } from 'react';\nimport { Card, Badge, Button, Checkbox } from '@ghxstship/ui';\nimport Link from 'next/link';\nimport type { TrackingItem } from '../types';\nimport { formatCurrency, formatDate, getStatusColor, getPriorityColor, getPerformanceColor, calculateDeliveryPerformance } from '../types';\n\ninterface TrackingGridViewProps {\n  items: TrackingItem[];\n  loading?: boolean;\n  selectedItems: string[];\n  onSelectionChange: (itemIds: string[]) => void;\n  onItemClick?: (item: TrackingItem) => void;\n  onEditItem?: (item: TrackingItem) => void;\n  onViewItem?: (item: TrackingItem) => void;\n  onTrackPackage?: (item: TrackingItem) => void;\n}\n\nexport default function TrackingGridView({\n  items,\n  loading = false,\n  selectedItems,\n  onSelectionChange,\n  onItemClick,\n  onEditItem,\n  onViewItem,\n  onTrackPackage,\n}: TrackingGridViewProps) {\n  const [hoveredItem, setHoveredItem] = useState<string | null>(null);\n\n  const handleItemSelection = (itemId: string, checked: boolean) => {\n    if (checked) {\n      onSelectionChange([...selectedItems, itemId]);\n    } else {\n      onSelectionChange(selectedItems.filter(id => id !== itemId));\n    }\n  };\n\n  const handleSelectAll = (checked: boolean) => {\n    if (checked) {\n      onSelectionChange(items.map(item => item.id));\n    } else {\n      onSelectionChange([]);\n    }\n  };\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case 'delivered':\n        return <CheckCircle className=\"h-4 w-4 text-success\" />;\n      case 'shipped':\n      case 'in_transit':\n      case 'out_for_delivery':\n        return <Truck className=\"h-4 w-4 text-primary\" />;\n      case 'cancelled':\n      case 'returned':\n        return <AlertCircle className=\"h-4 w-4 text-destructive\" />;\n      default:\n        return <Package className=\"h-4 w-4 text-muted-foreground\" />;\n    }\n  };\n\n  const getPriorityIcon = (priority: string) => {\n    switch (priority) {\n      case 'urgent':\n        return '🔴';\n      case 'high':\n        return '🟡';\n      case 'medium':\n        return '🟢';\n      case 'low':\n        return '🔵';\n      default:\n        return '⚪';\n    }\n  };\n\n  const isOverdue = (item: TrackingItem) => {\n    if (!item.expected_delivery) return false;\n    const now = new Date();\n    const expectedDate = new Date(item.expected_delivery);\n    return expectedDate < now && !['delivered', 'cancelled'].includes(item.status);\n  };\n\n  const getDaysUntilDelivery = (item: TrackingItem) => {\n    if (!item.expected_delivery) return null;\n    const now = new Date();\n    const expectedDate = new Date(item.expected_delivery);\n    const diffTime = expectedDate.getTime() - now.getTime();\n    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n    return diffDays;\n  };\n\n  if (loading) {\n    return (\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-md\">\n        {Array.from({ length: 8 }).map((_, index) => (\n          <Card key={index} className=\"p-md\">\n            <div className=\"animate-pulse\">\n              <div className=\"flex items-center justify-between mb-sm\">\n                <div className=\"h-4 bg-muted rounded w-3/4\"></div>\n                <div className=\"h-6 bg-muted rounded-full w-16\"></div>\n              </div>\n              <div className=\"h-3 bg-muted rounded w-1/2 mb-sm\"></div>\n              <div className=\"h-3 bg-muted rounded w-full mb-sm\"></div>\n              <div className=\"h-3 bg-muted rounded w-2/3 mb-md\"></div>\n              <div className=\"flex justify-between items-center\">\n                <div className=\"h-5 bg-muted rounded w-20\"></div>\n                <div className=\"flex gap-xs\">\n                  <div className=\"h-8 w-8 bg-muted rounded\"></div>\n                  <div className=\"h-8 w-8 bg-muted rounded\"></div>\n                </div>\n              </div>\n            </div>\n          </Card>\n        ))}\n      </div>\n    );\n  }\n\n  if (items.length === 0) {\n    return (\n      <Card className=\"p-xl text-center\">\n        <Package className=\"h-12 w-12 mx-auto mb-md text-muted-foreground opacity-50\" />\n        <h3 className=\"text-lg font-medium mb-sm\">No tracking items found</h3>\n        <p className=\"text-muted-foreground\">\n          No items match your current filters. Try adjusting your search criteria.\n        </p>\n      </Card>\n    );\n  }\n\n  const allSelected = items.length > 0 && selectedItems.length === items.length;\n  const someSelected = selectedItems.length > 0 && selectedItems.length < items.length;\n\n  return (\n    <div className=\"space-y-md\">\n      {/* Selection header */}\n      {items.length > 0 && (\n        <div className=\"flex items-center gap-sm p-sm bg-muted/30 rounded-lg\">\n          <Checkbox\n            checked={allSelected}\n            indeterminate={someSelected}\n            onCheckedChange={handleSelectAll}\n          />\n          <span className=\"text-sm text-muted-foreground\">\n            {selectedItems.length > 0 \n              ? `${selectedItems.length} of ${items.length} items selected`\n              : `Select all ${items.length} items`\n            }\n          </span>\n        </div>\n      )}\n\n      {/* Grid */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-md\">\n        {items.map((item) => {\n          const isSelected = selectedItems.includes(item.id);\n          const isHovered = hoveredItem === item.id;\n          const overdue = isOverdue(item);\n          const daysUntilDelivery = getDaysUntilDelivery(item);\n          const performance = calculateDeliveryPerformance(item.expected_delivery, item.actual_delivery);\n\n          return (\n            <Card\n              key={item.id}\n              className={`relative transition-all duration-200 cursor-pointer hover:shadow-md ${\n                isSelected ? 'ring-2 ring-primary' : ''\n              } ${overdue ? 'border-destructive/50' : ''}`}\n              onMouseEnter={() => setHoveredItem(item.id)}\n              onMouseLeave={() => setHoveredItem(null)}\n              onClick={() => onItemClick?.(item)}\n            >\n              {/* Selection checkbox */}\n              <div className=\"absolute top-sm left-sm z-10\">\n                <Checkbox\n                  checked={isSelected}\n                  onCheckedChange={(checked) => handleItemSelection(item.id, checked as boolean)}\n                  onClick={(e) => e.stopPropagation()}\n                />\n              </div>\n\n              {/* Overdue indicator */}\n              {overdue && (\n                <div className=\"absolute top-sm right-sm z-10\">\n                  <Badge variant=\"destructive\" className=\"text-xs\">\n                    Overdue\n                  </Badge>\n                </div>\n              )}\n\n              {/* Action buttons */}\n              {isHovered && !overdue && (\n                <div className=\"absolute top-sm right-sm z-10 flex gap-xs\">\n                  {item.tracking_number && onTrackPackage && (\n                    <Button\n                      size=\"sm\"\n                      variant=\"secondary\"\n                      onClick={(e) => {\n                        e.stopPropagation();\n                        onTrackPackage(item);\n                      }}\n                      title=\"Track package\"\n                    >\n                      <MapPin className=\"h-3 w-3\" />\n                    </Button>\n                  )}\n                  {onViewItem && (\n                    <Button\n                      size=\"sm\"\n                      variant=\"secondary\"\n                      onClick={(e) => {\n                        e.stopPropagation();\n                        onViewItem(item);\n                      }}\n                      title=\"View details\"\n                    >\n                      <Eye className=\"h-3 w-3\" />\n                    </Button>\n                  )}\n                  {onEditItem && (\n                    <Button\n                      size=\"sm\"\n                      variant=\"secondary\"\n                      onClick={(e) => {\n                        e.stopPropagation();\n                        onEditItem(item);\n                      }}\n                      title=\"Edit item\"\n                    >\n                      <Edit className=\"h-3 w-3\" />\n                    </Button>\n                  )}\n                </div>\n              )}\n\n              <div className=\"p-md pt-lg\">\n                {/* Header */}\n                <div className=\"flex items-start justify-between mb-sm\">\n                  <div className=\"flex items-center gap-sm min-w-0 flex-1\">\n                    <div className=\"p-sm bg-primary/10 rounded-lg\">\n                      {getStatusIcon(item.status)}\n                    </div>\n                    <div className=\"min-w-0 flex-1\">\n                      <h4 className=\"font-medium truncate\">{item.order_number}</h4>\n                      <p className=\"text-sm text-muted-foreground truncate\">{item.vendor_name}</p>\n                    </div>\n                  </div>\n                  {!overdue && (\n                    <Badge variant={getStatusColor(item.status)} className=\"ml-sm\">\n                      <span className=\"capitalize\">{item.status.replace('_', ' ')}</span>\n                    </Badge>\n                  )}\n                </div>\n\n                {/* Priority and Performance */}\n                <div className=\"flex items-center gap-sm mb-sm\">\n                  <div className=\"flex items-center gap-xs\">\n                    <span className=\"text-sm\">{getPriorityIcon(item.priority)}</span>\n                    <Badge variant={getPriorityColor(item.priority)} className=\"text-xs\">\n                      {item.priority}\n                    </Badge>\n                  </div>\n                  {item.actual_delivery && (\n                    <Badge variant={getPerformanceColor(performance)} className=\"text-xs\">\n                      {performance.replace('_', ' ')}\n                    </Badge>\n                  )}\n                </div>\n\n                {/* Description */}\n                {item.description && (\n                  <p className=\"text-sm text-muted-foreground line-clamp-2 mb-sm\">\n                    {item.description}\n                  </p>\n                )}\n\n                {/* Amount */}\n                <div className=\"flex items-center justify-between mb-sm\">\n                  <div className=\"text-lg font-semibold\">\n                    {formatCurrency(item.total_amount, item.currency)}\n                  </div>\n                </div>\n\n                {/* Tracking Information */}\n                {item.tracking_number && (\n                  <div className=\"mb-sm p-xs bg-muted/30 rounded text-xs\">\n                    <div className=\"flex items-center gap-xs\">\n                      <Truck className=\"h-3 w-3\" />\n                      <span className=\"font-medium\">{item.tracking_number}</span>\n                    </div>\n                    {item.shipping_carrier && (\n                      <div className=\"text-muted-foreground mt-xs\">\n                        via {item.shipping_carrier}\n                      </div>\n                    )}\n                  </div>\n                )}\n\n                {/* Dates */}\n                <div className=\"space-y-xs text-xs text-muted-foreground mb-sm\">\n                  <div className=\"flex items-center gap-xs\">\n                    <Calendar className=\"h-3 w-3 flex-shrink-0\" />\n                    <span>Ordered: {formatDate(item.order_date)}</span>\n                  </div>\n                  {item.expected_delivery && (\n                    <div className=\"flex items-center gap-xs\">\n                      <Clock className=\"h-3 w-3 flex-shrink-0\" />\n                      <span className={overdue ? 'text-destructive' : ''}>\n                        Expected: {formatDate(item.expected_delivery)}\n                        {daysUntilDelivery !== null && daysUntilDelivery > 0 && (\n                          <span className=\"ml-xs\">({daysUntilDelivery} days)</span>\n                        )}\n                      </span>\n                    </div>\n                  )}\n                  {item.actual_delivery && (\n                    <div className=\"flex items-center gap-xs\">\n                      <CheckCircle className=\"h-3 w-3 flex-shrink-0 text-success\" />\n                      <span>Delivered: {formatDate(item.actual_delivery)}</span>\n                    </div>\n                  )}\n                </div>\n\n                {/* Tags */}\n                {item.tags && item.tags.length > 0 && (\n                  <div className=\"flex flex-wrap gap-xs mb-sm\">\n                    {item.tags.slice(0, 3).map((tag, index) => (\n                      <span\n                        key={index}\n                        className=\"px-xs py-xs bg-muted rounded text-xs\"\n                      >\n                        {tag}\n                      </span>\n                    ))}\n                    {item.tags.length > 3 && (\n                      <span className=\"px-xs py-xs bg-muted rounded text-xs\">\n                        +{item.tags.length - 3} more\n                      </span>\n                    )}\n                  </div>\n                )}\n\n                {/* Footer */}\n                <div className=\"flex items-center justify-between mt-md pt-sm border-t border-border\">\n                  <span className=\"text-xs text-muted-foreground\">\n                    {formatDate(item.created_at)}\n                  </span>\n                  {item.tracking_number && (\n                    <Button\n                      size=\"sm\"\n                      variant=\"ghost\"\n                      onClick={(e) => {\n                        e.stopPropagation();\n                        onTrackPackage?.(item);\n                      }}\n                      className=\"text-xs\"\n                    >\n                      <ExternalLink className=\"h-3 w-3 mr-xs\" />\n                      Track\n                    </Button>\n                  )}\n                </div>\n              </div>\n            </Card>\n          );\n        })}\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ghxstship/apps/web/app/(app)/(shell)/procurement/tracking/views/TrackingKanbanView.tsx","messages":[{"ruleId":"react/jsx-no-undef","severity":2,"message":"'CheckCircle' is not defined.","line":68,"column":17,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":68,"endColumn":28},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Truck' is not defined.","line":72,"column":17,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":72,"endColumn":22},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Package' is not defined.","line":74,"column":17,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":74,"endColumn":24},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Eye' is not defined.","line":204,"column":36,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":204,"endColumn":39},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Edit' is not defined.","line":217,"column":36,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":217,"endColumn":40},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Truck' is not defined.","line":251,"column":34,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":251,"endColumn":39},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'CheckCircle' is not defined.","line":278,"column":34,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":278,"endColumn":45}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\nimport { User, FileText, Settings, Award, Calendar, TrendingUp, Activity, Clock, Plus, Search, Play, Trash2 } from \"lucide-react\";\nimport { useState } from 'react';\nimport { Card, Badge, Button } from '@ghxstship/ui';\nimport type { TrackingItem } from '../types';\nimport { formatCurrency, formatDate, getStatusColor, getPriorityColor } from '../types';\n\ninterface TrackingKanbanViewProps {\n  items: TrackingItem[];\n  loading?: boolean;\n  selectedItems: string[];\n  onSelectionChange: (itemIds: string[]) => void;\n  onItemClick?: (item: TrackingItem) => void;\n  onEditItem?: (item: TrackingItem) => void;\n  onViewItem?: (item: TrackingItem) => void;\n  onStatusChange?: (item: TrackingItem, newStatus: string) => void;\n}\n\nconst statusColumns = [\n  { key: 'ordered', label: 'Ordered', color: 'bg-secondary/10 border-secondary/20' },\n  { key: 'shipped', label: 'Shipped', color: 'bg-primary/10 border-primary/20' },\n  { key: 'in_transit', label: 'In Transit', color: 'bg-primary/10 border-primary/20' },\n  { key: 'out_for_delivery', label: 'Out for Delivery', color: 'bg-warning/10 border-warning/20' },\n  { key: 'delivered', label: 'Delivered', color: 'bg-success/10 border-success/20' },\n];\n\nexport default function TrackingKanbanView({\n  items,\n  loading = false,\n  selectedItems,\n  onSelectionChange,\n  onItemClick,\n  onEditItem,\n  onViewItem,\n  onStatusChange,\n}: TrackingKanbanViewProps) {\n  const [draggedItem, setDraggedItem] = useState<TrackingItem | null>(null);\n\n  const handleDragStart = (e: React.DragEvent, item: TrackingItem) => {\n    setDraggedItem(item);\n    e.dataTransfer.effectAllowed = 'move';\n  };\n\n  const handleDragEnd = () => {\n    setDraggedItem(null);\n  };\n\n  const handleDragOver = (e: React.DragEvent) => {\n    e.preventDefault();\n    e.dataTransfer.dropEffect = 'move';\n  };\n\n  const handleDrop = (e: React.DragEvent, status: string) => {\n    e.preventDefault();\n    if (draggedItem && draggedItem.status !== status) {\n      onStatusChange?.(draggedItem, status);\n    }\n    setDraggedItem(null);\n  };\n\n  const getItemsByStatus = (status: string) => {\n    return items.filter(item => item.status === status);\n  };\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case 'delivered':\n        return <CheckCircle className=\"h-3 w-3 text-success\" />;\n      case 'shipped':\n      case 'in_transit':\n      case 'out_for_delivery':\n        return <Truck className=\"h-3 w-3 text-primary\" />;\n      default:\n        return <Package className=\"h-3 w-3 text-muted-foreground\" />;\n    }\n  };\n\n  const getPriorityIcon = (priority: string) => {\n    switch (priority) {\n      case 'urgent':\n        return '🔴';\n      case 'high':\n        return '🟡';\n      case 'medium':\n        return '🟢';\n      case 'low':\n        return '🔵';\n      default:\n        return '⚪';\n    }\n  };\n\n  const isOverdue = (item: TrackingItem) => {\n    if (!item.expected_delivery) return false;\n    const now = new Date();\n    const expectedDate = new Date(item.expected_delivery);\n    return expectedDate < now && !['delivered', 'cancelled'].includes(item.status);\n  };\n\n  if (loading) {\n    return (\n      <div className=\"flex gap-md h-[600px]\">\n        {statusColumns.map((column) => (\n          <div key={column.key} className=\"flex-1\">\n            <Card className={`h-full ${column.color}`}>\n              <div className=\"p-md border-b border-border\">\n                <div className=\"h-6 bg-muted rounded w-20 animate-pulse\"></div>\n              </div>\n              <div className=\"p-md space-y-md\">\n                {Array.from({ length: 3 }).map((_, index) => (\n                  <Card key={index} className=\"p-md\">\n                    <div className=\"animate-pulse space-y-sm\">\n                      <div className=\"flex items-center gap-sm\">\n                        <div className=\"h-4 w-4 bg-muted rounded\"></div>\n                        <div className=\"h-4 bg-muted rounded w-3/4\"></div>\n                      </div>\n                      <div className=\"h-3 bg-muted rounded w-1/2\"></div>\n                      <div className=\"h-3 bg-muted rounded w-full\"></div>\n                      <div className=\"h-5 bg-muted rounded w-16\"></div>\n                    </div>\n                  </Card>\n                ))}\n              </div>\n            </Card>\n          </div>\n        ))}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"flex gap-md h-[600px] overflow-x-auto\">\n      {statusColumns.map((column) => {\n        const columnItems = getItemsByStatus(column.key);\n        \n        return (\n          <div key={column.key} className=\"flex-1 min-w-[320px]\">\n            <Card \n              className={`h-full ${column.color} flex flex-col`}\n              onDragOver={handleDragOver}\n              onDrop={(e) => handleDrop(e, column.key)}\n            >\n              {/* Column header */}\n              <div className=\"p-md border-b border-border flex-shrink-0\">\n                <div className=\"flex items-center justify-between\">\n                  <h3 className=\"font-medium\">{column.label}</h3>\n                  <Badge variant=\"secondary\">\n                    {columnItems.length}\n                  </Badge>\n                </div>\n              </div>\n\n              {/* Column content */}\n              <div className=\"flex-1 p-md space-y-md overflow-y-auto\">\n                {columnItems.length === 0 ? (\n                  <div className=\"text-center py-lg text-muted-foreground\">\n                    <div className=\"text-sm\">No {column.label.toLowerCase()} items</div>\n                  </div>\n                ) : (\n                  columnItems.map((item) => {\n                    const isSelected = selectedItems.includes(item.id);\n                    const isDragging = draggedItem?.id === item.id;\n                    const overdue = isOverdue(item);\n\n                    return (\n                      <Card\n                        key={item.id}\n                        className={`cursor-pointer transition-all duration-200 hover:shadow-md ${\n                          isSelected ? 'ring-2 ring-primary' : ''\n                        } ${isDragging ? 'opacity-50 rotate-2' : ''} ${\n                          overdue ? 'border-destructive/50' : ''\n                        }`}\n                        draggable\n                        onDragStart={(e) => handleDragStart(e, item)}\n                        onDragEnd={handleDragEnd}\n                        onClick={() => onItemClick?.(item)}\n                      >\n                        <div className=\"p-md\">\n                          {/* Header */}\n                          <div className=\"flex items-start justify-between mb-sm\">\n                            <div className=\"flex items-center gap-sm min-w-0 flex-1\">\n                              {getStatusIcon(item.status)}\n                              <div className=\"min-w-0 flex-1\">\n                                <h4 className=\"font-medium text-sm truncate\">{item.order_number}</h4>\n                                <p className=\"text-xs text-muted-foreground truncate\">{item.vendor_name}</p>\n                              </div>\n                            </div>\n                            <div className=\"flex items-center gap-xs ml-sm\">\n                              {overdue && (\n                                <Badge variant=\"destructive\" className=\"text-xs\">\n                                  Overdue\n                                </Badge>\n                              )}\n                              {onViewItem && (\n                                <Button\n                                  size=\"sm\"\n                                  variant=\"ghost\"\n                                  onClick={(e) => {\n                                    e.stopPropagation();\n                                    onViewItem(item);\n                                  }}\n                                  className=\"h-6 w-6 p-0\"\n                                >\n                                  <Eye className=\"h-3 w-3\" />\n                                </Button>\n                              )}\n                              {onEditItem && (\n                                <Button\n                                  size=\"sm\"\n                                  variant=\"ghost\"\n                                  onClick={(e) => {\n                                    e.stopPropagation();\n                                    onEditItem(item);\n                                  }}\n                                  className=\"h-6 w-6 p-0\"\n                                >\n                                  <Edit className=\"h-3 w-3\" />\n                                </Button>\n                              )}\n                            </div>\n                          </div>\n\n                          {/* Priority */}\n                          <div className=\"flex items-center gap-sm mb-sm\">\n                            <div className=\"flex items-center gap-xs\">\n                              <span className=\"text-xs\">{getPriorityIcon(item.priority)}</span>\n                              <Badge variant={getPriorityColor(item.priority)} className=\"text-xs\">\n                                {item.priority}\n                              </Badge>\n                            </div>\n                          </div>\n\n                          {/* Description */}\n                          {item.description && (\n                            <p className=\"text-xs text-muted-foreground line-clamp-2 mb-sm\">\n                              {item.description}\n                            </p>\n                          )}\n\n                          {/* Amount */}\n                          <div className=\"flex items-center justify-between mb-sm\">\n                            <div className=\"font-semibold text-sm\">\n                              {formatCurrency(item.total_amount, item.currency)}\n                            </div>\n                          </div>\n\n                          {/* Tracking Info */}\n                          {item.tracking_number && (\n                            <div className=\"mb-sm p-xs bg-muted/30 rounded text-xs\">\n                              <div className=\"flex items-center gap-xs\">\n                                <Truck className=\"h-3 w-3\" />\n                                <span className=\"font-medium truncate\">{item.tracking_number}</span>\n                              </div>\n                              {item.shipping_carrier && (\n                                <div className=\"text-muted-foreground mt-xs truncate\">\n                                  {item.shipping_carrier}\n                                </div>\n                              )}\n                            </div>\n                          )}\n\n                          {/* Dates */}\n                          <div className=\"space-y-xs text-xs text-muted-foreground mb-sm\">\n                            <div className=\"flex items-center gap-xs\">\n                              <Calendar className=\"h-3 w-3 flex-shrink-0\" />\n                              <span>{formatDate(item.order_date)}</span>\n                            </div>\n                            {item.expected_delivery && (\n                              <div className=\"flex items-center gap-xs\">\n                                <Clock className=\"h-3 w-3 flex-shrink-0\" />\n                                <span className={overdue ? 'text-destructive' : ''}>\n                                  {formatDate(item.expected_delivery)}\n                                </span>\n                              </div>\n                            )}\n                            {item.actual_delivery && (\n                              <div className=\"flex items-center gap-xs\">\n                                <CheckCircle className=\"h-3 w-3 flex-shrink-0 text-success\" />\n                                <span>{formatDate(item.actual_delivery)}</span>\n                              </div>\n                            )}\n                          </div>\n\n                          {/* Tags */}\n                          {item.tags && item.tags.length > 0 && (\n                            <div className=\"flex flex-wrap gap-xs mb-sm\">\n                              {item.tags.slice(0, 2).map((tag, index) => (\n                                <span\n                                  key={index}\n                                  className=\"px-xs py-xs bg-muted rounded text-xs truncate\"\n                                >\n                                  {tag}\n                                </span>\n                              ))}\n                              {item.tags.length > 2 && (\n                                <span className=\"px-xs py-xs bg-muted rounded text-xs\">\n                                  +{item.tags.length - 2}\n                                </span>\n                              )}\n                            </div>\n                          )}\n\n                          {/* Footer */}\n                          <div className=\"flex items-center justify-between pt-sm border-t border-border text-xs text-muted-foreground\">\n                            <span>{formatDate(item.created_at)}</span>\n                            <div className=\"flex items-center gap-xs\">\n                              <div className=\"w-2 h-2 rounded-full bg-current opacity-50\"></div>\n                              <span>{item.id.slice(-6)}</span>\n                            </div>\n                          </div>\n                        </div>\n                      </Card>\n                    );\n                  })\n                )}\n              </div>\n            </Card>\n          </div>\n        );\n      })}\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ghxstship/apps/web/app/(app)/(shell)/procurement/tracking/views/TrackingMapView.tsx","messages":[{"ruleId":"react/jsx-no-undef","severity":2,"message":"'MapPin' is not defined.","line":148,"column":12,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":148,"endColumn":18},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Filter' is not defined.","line":177,"column":14,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":177,"endColumn":20},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Minimize2' is not defined.","line":186,"column":29,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":186,"endColumn":38},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Maximize2' is not defined.","line":186,"column":65,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":186,"endColumn":74},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Navigation' is not defined.","line":287,"column":18,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":287,"endColumn":28},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Eye' is not defined.","line":356,"column":24,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":356,"endColumn":27},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Edit' is not defined.","line":367,"column":24,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":367,"endColumn":28},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Truck' is not defined.","line":408,"column":28,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":408,"endColumn":33},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'MapPin' is not defined.","line":413,"column":30,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":413,"endColumn":36},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'MapPin' is not defined.","line":437,"column":12,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":437,"endColumn":18}],"suppressedMessages":[],"errorCount":10,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useState, useEffect, useRef } from 'react';\nimport { Card, Badge, Button, Checkbox } from '@ghxstship/ui';\nimport type { TrackingItem } from '../types';\nimport { formatCurrency, formatDate, getStatusColor, getPriorityColor } from '../types';\n\ninterface TrackingMapViewProps {\n  items: TrackingItem[];\n  loading?: boolean;\n  selectedItems: string[];\n  onSelectionChange: (itemIds: string[]) => void;\n  onItemClick?: (item: TrackingItem) => void;\n  onEditItem?: (item: TrackingItem) => void;\n  onViewItem?: (item: TrackingItem) => void;\n}\n\ninterface MapMarker {\n  id: string;\n  lat: number;\n  lng: number;\n  type: 'origin' | 'destination' | 'current';\n  item: TrackingItem;\n  title: string;\n  description: string;\n}\n\nexport default function TrackingMapView({\n  items,\n  loading = false,\n  selectedItems,\n  onSelectionChange,\n  onItemClick,\n  onEditItem,\n  onViewItem,\n}: TrackingMapViewProps) {\n  const [selectedMarker, setSelectedMarker] = useState<MapMarker | null>(null);\n  const [mapExpanded, setMapExpanded] = useState(false);\n  const [showFilters, setShowFilters] = useState(false);\n  const [statusFilter, setStatusFilter] = useState<string>('all');\n  const mapRef = useRef<HTMLDivElement>(null);\n\n  // Mock coordinates for demonstration - in real implementation, you'd geocode addresses\n  const generateMockCoordinates = (address: any, type: 'origin' | 'destination'): { lat: number; lng: number } => {\n    if (!address) return { lat: 0, lng: 0 };\n    \n    // Mock coordinates based on state (simplified for demo)\n    const stateCoords: Record<string, { lat: number; lng: number }> = {\n      'CA': { lat: 36.7783, lng: -119.4179 },\n      'NY': { lat: 42.1657, lng: -74.9481 },\n      'TX': { lat: 31.9686, lng: -99.9018 },\n      'FL': { lat: 27.8333, lng: -81.7170 },\n      'IL': { lat: 40.3363, lng: -89.0022 },\n      'PA': { lat: 41.2033, lng: -77.1945 },\n      'OH': { lat: 40.3736, lng: -82.7755 },\n      'GA': { lat: 33.76, lng: -84.39 },\n      'NC': { lat: 35.771, lng: -78.638 },\n      'MI': { lat: 43.3266, lng: -84.5361 },\n    };\n\n    const baseCoord = stateCoords[address.state] || { lat: 39.8283, lng: -98.5795 };\n    \n    // Add some random offset to simulate different cities\n    const offset = type === 'origin' ? -0.5 : 0.5;\n    return {\n      lat: baseCoord.lat + (Math.random() - 0.5) * 2 + offset,\n      lng: baseCoord.lng + (Math.random() - 0.5) * 4 + offset,\n    };\n  };\n\n  const markers: MapMarker[] = items.flatMap(item => {\n    const markers: MapMarker[] = [];\n    \n    if (item.origin_address) {\n      const coords = generateMockCoordinates(item.origin_address, 'origin');\n      markers.push({\n        id: `${item.id}-origin`,\n        lat: coords.lat,\n        lng: coords.lng,\n        type: 'origin',\n        item,\n        title: `Origin: ${item.order_number}`,\n        description: `${item.origin_address.city}, ${item.origin_address.state}`,\n      });\n    }\n\n    if (item.destination_address) {\n      const coords = generateMockCoordinates(item.destination_address, 'destination');\n      markers.push({\n        id: `${item.id}-destination`,\n        lat: coords.lat,\n        lng: coords.lng,\n        type: 'destination',\n        item,\n        title: `Destination: ${item.order_number}`,\n        description: `${item.destination_address.city}, ${item.destination_address.state}`,\n      });\n    }\n\n    return markers;\n  });\n\n  const filteredMarkers = statusFilter === 'all' \n    ? markers \n    : markers.filter(marker => marker.item.status === statusFilter);\n\n  const handleItemSelection = (itemId: string, checked: boolean) => {\n    if (checked) {\n      onSelectionChange([...selectedItems, itemId]);\n    } else {\n      onSelectionChange(selectedItems.filter(id => id !== itemId));\n    }\n  };\n\n  const handleSelectAll = (checked: boolean) => {\n    if (checked) {\n      onSelectionChange(items.map(item => item.id));\n    } else {\n      onSelectionChange([]);\n    }\n  };\n\n  const getMarkerColor = (marker: MapMarker) => {\n    if (marker.type === 'origin') return '#10b981'; // green\n    if (marker.type === 'destination') return '#3b82f6'; // blue\n    return '#f59e0b'; // amber for current location\n  };\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case 'delivered':\n        return '✓';\n      case 'in_transit':\n        return '🚛';\n      case 'shipped':\n        return '📦';\n      case 'delayed':\n        return '⚠️';\n      default:\n        return '⏱️';\n    }\n  };\n\n  if (loading) {\n    return (\n      <div className=\"h-96 bg-gray-100 animate-pulse rounded-lg flex items-center justify-center\">\n        <div className=\"text-center\">\n          <MapPin className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n          <p className=\"text-gray-500\">Loading map...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className={`space-y-4 ${mapExpanded ? 'fixed inset-0 z-50 bg-white p-4' : ''}`}>\n      {/* Controls */}\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center gap-4\">\n          <Checkbox\n            checked={selectedItems.length === items.length && items.length > 0}\n            onCheckedChange={handleSelectAll}\n            aria-label=\"Select all items\"\n          />\n          <span className=\"text-sm text-gray-600\">\n            {selectedItems.length > 0 ? `${selectedItems.length} selected` : `${filteredMarkers.length} locations`}\n          </span>\n        </div>\n\n        <div className=\"flex items-center gap-2\">\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={() => setShowFilters(!showFilters)}\n            className=\"flex items-center gap-2\"\n          >\n            <Filter className=\"h-4 w-4\" />\n            Filters\n          </Button>\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={() => setMapExpanded(!mapExpanded)}\n            className=\"flex items-center gap-2\"\n          >\n            {mapExpanded ? <Minimize2 className=\"h-4 w-4\" /> : <Maximize2 className=\"h-4 w-4\" />}\n            {mapExpanded ? 'Exit Fullscreen' : 'Fullscreen'}\n          </Button>\n        </div>\n      </div>\n\n      {/* Filters */}\n      {showFilters && (\n        <Card className=\"p-4\">\n          <div className=\"flex items-center gap-4\">\n            <label className=\"text-sm font-medium\">Status:</label>\n            <select\n              value={statusFilter}\n              onChange={(e) => setStatusFilter(e.target.value)}\n              className=\"px-3 py-1 border rounded-md text-sm\"\n            >\n              <option value=\"all\">All Statuses</option>\n              <option value=\"ordered\">Ordered</option>\n              <option value=\"shipped\">Shipped</option>\n              <option value=\"in_transit\">In Transit</option>\n              <option value=\"out_for_delivery\">Out for Delivery</option>\n              <option value=\"delivered\">Delivered</option>\n              <option value=\"delayed\">Delayed</option>\n            </select>\n          </div>\n        </Card>\n      )}\n\n      <div className=\"flex gap-4 h-full\">\n        {/* Map Container */}\n        <div className={`relative bg-gray-100 rounded-lg overflow-hidden ${mapExpanded ? 'flex-1' : 'flex-1 h-96'}`}>\n          {/* Mock Map Interface */}\n          <div className=\"absolute inset-0 bg-gradient-to-br from-blue-50 to-green-50\">\n            {/* Map Grid */}\n            <div className=\"absolute inset-0 opacity-10\">\n              <div className=\"grid grid-cols-12 grid-rows-8 h-full\">\n                {Array.from({ length: 96 }).map((_, i) => (\n                  <div key={i} className=\"border border-gray-300\" />\n                ))}\n              </div>\n            </div>\n\n            {/* Markers */}\n            {filteredMarkers.map((marker) => (\n              <div\n                key={marker.id}\n                className=\"absolute transform -translate-x-1/2 -translate-y-1/2 cursor-pointer hover:scale-110 transition-transform\"\n                style={{\n                  left: `${((marker.lng + 180) / 360) * 100}%`,\n                  top: `${((90 - marker.lat) / 180) * 100}%`,\n                }}\n                onClick={() => setSelectedMarker(marker)}\n              >\n                <div\n                  className=\"w-6 h-6 rounded-full border-2 border-white shadow-lg flex items-center justify-center text-white text-xs font-bold\"\n                  style={{ backgroundColor: getMarkerColor(marker) }}\n                >\n                  {marker.type === 'origin' ? 'O' : marker.type === 'destination' ? 'D' : 'C'}\n                </div>\n              </div>\n            ))}\n\n            {/* Routes (simplified lines between origin and destination) */}\n            {items.map((item) => {\n              const originMarker = markers.find(m => m.id === `${item.id}-origin`);\n              const destMarker = markers.find(m => m.id === `${item.id}-destination`);\n              \n              if (!originMarker || !destMarker) return null;\n\n              const x1 = ((originMarker.lng + 180) / 360) * 100;\n              const y1 = ((90 - originMarker.lat) / 180) * 100;\n              const x2 = ((destMarker.lng + 180) / 360) * 100;\n              const y2 = ((90 - destMarker.lat) / 180) * 100;\n\n              const length = Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2));\n              const angle = Math.atan2(y2 - y1, x2 - x1) * 180 / Math.PI;\n\n              return (\n                <div\n                  key={`route-${item.id}`}\n                  className=\"absolute border-t-2 border-dashed border-gray-400 opacity-50\"\n                  style={{\n                    left: `${x1}%`,\n                    top: `${y1}%`,\n                    width: `${length}%`,\n                    transformOrigin: '0 0',\n                    transform: `rotate(${angle}deg)`,\n                  }}\n                />\n              );\n            })}\n\n            {/* Map Controls */}\n            <div className=\"absolute top-4 right-4 flex flex-col gap-2\">\n              <Button variant=\"outline\" size=\"sm\" className=\"w-10 h-10 p-0\">\n                +\n              </Button>\n              <Button variant=\"outline\" size=\"sm\" className=\"w-10 h-10 p-0\">\n                −\n              </Button>\n              <Button variant=\"outline\" size=\"sm\" className=\"w-10 h-10 p-0\">\n                <Navigation className=\"h-4 w-4\" />\n              </Button>\n            </div>\n\n            {/* Legend */}\n            <div className=\"absolute bottom-4 left-4 bg-white p-3 rounded-lg shadow-lg\">\n              <h4 className=\"font-medium text-sm mb-2\">Legend</h4>\n              <div className=\"space-y-1 text-xs\">\n                <div className=\"flex items-center gap-2\">\n                  <div className=\"w-4 h-4 rounded-full bg-green-500 flex items-center justify-center text-white text-xs font-bold\">O</div>\n                  <span>Origin</span>\n                </div>\n                <div className=\"flex items-center gap-2\">\n                  <div className=\"w-4 h-4 rounded-full bg-blue-500 flex items-center justify-center text-white text-xs font-bold\">D</div>\n                  <span>Destination</span>\n                </div>\n                <div className=\"flex items-center gap-2\">\n                  <div className=\"border-t-2 border-dashed border-gray-400 w-4\"></div>\n                  <span>Route</span>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          {/* Selected Marker Popup */}\n          {selectedMarker && (\n            <div className=\"absolute top-4 left-4 bg-white p-4 rounded-lg shadow-lg max-w-sm\">\n              <div className=\"flex items-start justify-between mb-3\">\n                <div>\n                  <h3 className=\"font-medium\">{selectedMarker.title}</h3>\n                  <p className=\"text-sm text-gray-600\">{selectedMarker.description}</p>\n                </div>\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={() => setSelectedMarker(null)}\n                  className=\"h-6 w-6 p-0\"\n                >\n                  ×\n                </Button>\n              </div>\n\n              <div className=\"space-y-2\">\n                <div className=\"flex items-center gap-2\">\n                  <Badge variant={getStatusColor(selectedMarker.item.status)}>\n                    {selectedMarker.item.status.replace('_', ' ').toUpperCase()}\n                  </Badge>\n                  <Badge variant={getPriorityColor(selectedMarker.item.priority)}>\n                    {selectedMarker.item.priority.toUpperCase()}\n                  </Badge>\n                </div>\n\n                <div className=\"text-sm space-y-1\">\n                  <p><strong>Carrier:</strong> {selectedMarker.item.carrier}</p>\n                  <p><strong>Tracking:</strong> <code className=\"text-xs\">{selectedMarker.item.tracking_number}</code></p>\n                  <p><strong>Value:</strong> {formatCurrency(selectedMarker.item.total_value)}</p>\n                  {selectedMarker.item.expected_delivery && (\n                    <p><strong>Expected:</strong> {formatDate(selectedMarker.item.expected_delivery)}</p>\n                  )}\n                </div>\n\n                <div className=\"flex gap-2 pt-2\">\n                  {onViewItem && (\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => onViewItem(selectedMarker.item)}\n                      className=\"flex items-center gap-1\"\n                    >\n                      <Eye className=\"h-3 w-3\" />\n                      View\n                    </Button>\n                  )}\n                  {onEditItem && (\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => onEditItem(selectedMarker.item)}\n                      className=\"flex items-center gap-1\"\n                    >\n                      <Edit className=\"h-3 w-3\" />\n                      Edit\n                    </Button>\n                  )}\n                </div>\n              </div>\n            </div>\n          )}\n        </div>\n\n        {/* Sidebar - Item List */}\n        {!mapExpanded && (\n          <div className=\"w-80 space-y-4\">\n            <h3 className=\"font-medium\">Tracking Items</h3>\n            <div className=\"space-y-2 max-h-96 overflow-y-auto\">\n              {items.map((item) => (\n                <Card\n                  key={item.id}\n                  className={`p-3 cursor-pointer hover:shadow-md transition-shadow ${\n                    selectedItems.includes(item.id) ? 'ring-2 ring-blue-500 bg-blue-50' : ''\n                  }`}\n                  onClick={() => onItemClick?.(item)}\n                >\n                  <div className=\"flex items-start gap-3\">\n                    <Checkbox\n                      checked={selectedItems.includes(item.id)}\n                      onCheckedChange={(checked) => handleItemSelection(item.id, checked as boolean)}\n                      aria-label={`Select ${item.order_number}`}\n                      onClick={(e) => e.stopPropagation()}\n                    />\n\n                    <div className=\"flex-1 min-w-0\">\n                      <div className=\"flex items-center gap-2 mb-1\">\n                        <span className=\"font-medium text-sm\">{item.order_number}</span>\n                        <span className=\"text-lg\">{getStatusIcon(item.status)}</span>\n                      </div>\n                      \n                      <p className=\"text-xs text-gray-600 mb-2\">{item.vendor_name}</p>\n                      \n                      <div className=\"space-y-1 text-xs\">\n                        <div className=\"flex items-center gap-1\">\n                          <Truck className=\"h-3 w-3 text-gray-400\" />\n                          <span>{item.carrier}</span>\n                        </div>\n                        {item.destination_address && (\n                          <div className=\"flex items-center gap-1\">\n                            <MapPin className=\"h-3 w-3 text-gray-400\" />\n                            <span className=\"truncate\">\n                              {item.destination_address.city}, {item.destination_address.state}\n                            </span>\n                          </div>\n                        )}\n                      </div>\n\n                      <div className=\"flex gap-1 mt-2\">\n                        <Badge variant={getStatusColor(item.status)} className=\"text-xs\">\n                          {item.status.replace('_', ' ').toUpperCase()}\n                        </Badge>\n                      </div>\n                    </div>\n                  </div>\n                </Card>\n              ))}\n            </div>\n          </div>\n        )}\n      </div>\n\n      {items.length === 0 && (\n        <div className=\"text-center py-12\">\n          <MapPin className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n          <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No tracking locations found</h3>\n          <p className=\"text-gray-500\">Items with address information will appear on the map.</p>\n        </div>\n      )}\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ghxstship/apps/web/app/(app)/(shell)/procurement/tracking/views/TrackingTableView.tsx","messages":[{"ruleId":"react/jsx-no-undef","severity":2,"message":"'ArrowUpDown' is not defined.","line":76,"column":40,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":76,"endColumn":51},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'ArrowUpDown' is not defined.","line":77,"column":13,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":77,"endColumn":24},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'CheckCircle' is not defined.","line":83,"column":17,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":83,"endColumn":28},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Truck' is not defined.","line":85,"column":17,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":85,"endColumn":22},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Package' is not defined.","line":87,"column":17,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":87,"endColumn":24},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'AlertCircle' is not defined.","line":89,"column":17,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":89,"endColumn":28},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Package' is not defined.","line":100,"column":14,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":100,"endColumn":21},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'ExternalLink' is not defined.","line":118,"column":18,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":118,"endColumn":30},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Truck' is not defined.","line":127,"column":14,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":127,"endColumn":19},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'CheckCircle' is not defined.","line":155,"column":14,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":155,"endColumn":25},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'MapPin' is not defined.","line":165,"column":14,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":165,"endColumn":20},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'MapPin' is not defined.","line":177,"column":14,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":177,"endColumn":20},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Eye' is not defined.","line":298,"column":24,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":298,"endColumn":27},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Edit' is not defined.","line":308,"column":24,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":308,"endColumn":28},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'ExternalLink' is not defined.","line":318,"column":24,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":318,"endColumn":36},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Package' is not defined.","line":330,"column":12,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":330,"endColumn":19}],"suppressedMessages":[],"errorCount":16,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\nimport { User, FileText, Settings, Award, Calendar, TrendingUp, Activity, Clock, Plus, Search, Play, Trash2 } from \"lucide-react\";\nimport { useState, useMemo } from 'react';\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow, Badge, Button, Checkbox } from '@ghxstship/ui';\nimport Link from 'next/link';\nimport type { TrackingItem, TrackingSort } from '../types';\nimport { formatCurrency, formatDate, getStatusColor, getPriorityColor, getPerformanceColor, calculateDeliveryPerformance } from '../types';\n\ninterface TrackingTableViewProps {\n  items: TrackingItem[];\n  loading?: boolean;\n  selectedItems: string[];\n  onSelectionChange: (itemIds: string[]) => void;\n  onItemClick?: (item: TrackingItem) => void;\n  onEditItem?: (item: TrackingItem) => void;\n  onViewItem?: (item: TrackingItem) => void;\n  onTrackPackage?: (item: TrackingItem) => void;\n  sort?: TrackingSort;\n  onSortChange?: (sort: TrackingSort) => void;\n  visibleFields?: string[];\n}\n\nconst defaultVisibleFields = [\n  'order_number',\n  'tracking_number',\n  'carrier',\n  'status',\n  'expected_delivery',\n  'actual_delivery',\n  'origin',\n  'destination',\n  'priority',\n  'total_value',\n  'performance'\n];\n\nexport default function TrackingTableView({\n  items,\n  loading = false,\n  selectedItems,\n  onSelectionChange,\n  onItemClick,\n  onEditItem,\n  onViewItem,\n  onTrackPackage,\n  sort,\n  onSortChange,\n  visibleFields = defaultVisibleFields,\n}: TrackingTableViewProps) {\n  const [hoveredRow, setHoveredRow] = useState<string | null>(null);\n\n  const handleItemSelection = (itemId: string, checked: boolean) => {\n    if (checked) {\n      onSelectionChange([...selectedItems, itemId]);\n    } else {\n      onSelectionChange(selectedItems.filter(id => id !== itemId));\n    }\n  };\n\n  const handleSelectAll = (checked: boolean) => {\n    if (checked) {\n      onSelectionChange(items.map(item => item.id));\n    } else {\n      onSelectionChange([]);\n    }\n  };\n\n  const handleSort = (field: string) => {\n    if (!onSortChange) return;\n    \n    const newDirection = sort?.field === field && sort?.direction === 'asc' ? 'desc' : 'asc';\n    onSortChange({ field, direction: newDirection });\n  };\n\n  const getSortIcon = (field: string) => {\n    if (sort?.field !== field) return <ArrowUpDown className=\"h-4 w-4 opacity-50\" />;\n    return <ArrowUpDown className={`h-4 w-4 ${sort.direction === 'asc' ? 'rotate-180' : ''}`} />;\n  };\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case 'delivered':\n        return <CheckCircle className=\"h-4 w-4 text-green-500\" />;\n      case 'in_transit':\n        return <Truck className=\"h-4 w-4 text-blue-500\" />;\n      case 'shipped':\n        return <Package className=\"h-4 w-4 text-orange-500\" />;\n      case 'delayed':\n        return <AlertCircle className=\"h-4 w-4 text-red-500\" />;\n      default:\n        return <Clock className=\"h-4 w-4 text-gray-500\" />;\n    }\n  };\n\n  const renderCell = (item: TrackingItem, field: string) => {\n    switch (field) {\n      case 'order_number':\n        return (\n          <div className=\"flex items-center gap-2\">\n            <Package className=\"h-4 w-4 text-gray-500\" />\n            <Link href={`/procurement/orders/${item.order_id}`} className=\"font-medium text-blue-600 hover:underline\">\n              {item.order_number}\n            </Link>\n          </div>\n        );\n\n      case 'tracking_number':\n        return (\n          <div className=\"flex items-center gap-2\">\n            <span className=\"font-mono text-sm\">{item.tracking_number}</span>\n            {onTrackPackage && (\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={() => onTrackPackage(item)}\n                className=\"h-6 w-6 p-0\"\n              >\n                <ExternalLink className=\"h-3 w-3\" />\n              </Button>\n            )}\n          </div>\n        );\n\n      case 'carrier':\n        return (\n          <div className=\"flex items-center gap-2\">\n            <Truck className=\"h-4 w-4 text-gray-500\" />\n            <span>{item.carrier}</span>\n          </div>\n        );\n\n      case 'status':\n        return (\n          <div className=\"flex items-center gap-2\">\n            {getStatusIcon(item.status)}\n            <Badge variant={getStatusColor(item.status)}>\n              {item.status.replace('_', ' ').toUpperCase()}\n            </Badge>\n          </div>\n        );\n\n      case 'expected_delivery':\n        return item.expected_delivery ? (\n          <div className=\"flex items-center gap-2\">\n            <Calendar className=\"h-4 w-4 text-gray-500\" />\n            <span>{formatDate(item.expected_delivery)}</span>\n          </div>\n        ) : (\n          <span className=\"text-gray-400\">—</span>\n        );\n\n      case 'actual_delivery':\n        return item.actual_delivery ? (\n          <div className=\"flex items-center gap-2\">\n            <CheckCircle className=\"h-4 w-4 text-green-500\" />\n            <span>{formatDate(item.actual_delivery)}</span>\n          </div>\n        ) : (\n          <span className=\"text-gray-400\">—</span>\n        );\n\n      case 'origin':\n        return item.origin_address ? (\n          <div className=\"flex items-center gap-2\">\n            <MapPin className=\"h-4 w-4 text-gray-500\" />\n            <span className=\"truncate max-w-32\" title={`${item.origin_address.city}, ${item.origin_address.state}`}>\n              {item.origin_address.city}, {item.origin_address.state}\n            </span>\n          </div>\n        ) : (\n          <span className=\"text-gray-400\">—</span>\n        );\n\n      case 'destination':\n        return item.destination_address ? (\n          <div className=\"flex items-center gap-2\">\n            <MapPin className=\"h-4 w-4 text-blue-500\" />\n            <span className=\"truncate max-w-32\" title={`${item.destination_address.city}, ${item.destination_address.state}`}>\n              {item.destination_address.city}, {item.destination_address.state}\n            </span>\n          </div>\n        ) : (\n          <span className=\"text-gray-400\">—</span>\n        );\n\n      case 'priority':\n        return (\n          <Badge variant={getPriorityColor(item.priority)}>\n            {item.priority.toUpperCase()}\n          </Badge>\n        );\n\n      case 'total_value':\n        return (\n          <span className=\"font-medium\">\n            {formatCurrency(item.total_value)}\n          </span>\n        );\n\n      case 'performance':\n        const performance = calculateDeliveryPerformance(item);\n        return performance ? (\n          <Badge variant={getPerformanceColor(performance.status)}>\n            {performance.status === 'on_time' ? 'On Time' : \n             performance.status === 'early' ? `${performance.days_difference}d Early` :\n             `${Math.abs(performance.days_difference)}d Late`}\n          </Badge>\n        ) : (\n          <span className=\"text-gray-400\">—</span>\n        );\n\n      default:\n        return <span className=\"text-gray-400\">—</span>;\n    }\n  };\n\n  const fieldLabels: Record<string, string> = {\n    order_number: 'Order',\n    tracking_number: 'Tracking',\n    carrier: 'Carrier',\n    status: 'Status',\n    expected_delivery: 'Expected',\n    actual_delivery: 'Delivered',\n    origin: 'Origin',\n    destination: 'Destination',\n    priority: 'Priority',\n    total_value: 'Value',\n    performance: 'Performance',\n  };\n\n  if (loading) {\n    return (\n      <div className=\"space-y-4\">\n        {Array.from({ length: 5 }).map((_, i) => (\n          <div key={i} className=\"h-16 bg-gray-100 animate-pulse rounded-lg\" />\n        ))}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"border rounded-lg overflow-hidden\">\n      <Table>\n        <TableHeader>\n          <TableRow>\n            <TableHead className=\"w-12\">\n              <Checkbox\n                checked={selectedItems.length === items.length && items.length > 0}\n                onCheckedChange={handleSelectAll}\n                aria-label=\"Select all items\"\n              />\n            </TableHead>\n            {visibleFields.map((field) => (\n              <TableHead \n                key={field}\n                className=\"cursor-pointer hover:bg-gray-50\"\n                onClick={() => handleSort(field)}\n              >\n                <div className=\"flex items-center gap-2\">\n                  {fieldLabels[field] || field}\n                  {getSortIcon(field)}\n                </div>\n              </TableHead>\n            ))}\n            <TableHead className=\"w-24\">Actions</TableHead>\n          </TableRow>\n        </TableHeader>\n        <TableBody>\n          {items.map((item) => (\n            <TableRow\n              key={item.id}\n              className={`cursor-pointer hover:bg-gray-50 ${selectedItems.includes(item.id) ? 'bg-blue-50' : ''}`}\n              onMouseEnter={() => setHoveredRow(item.id)}\n              onMouseLeave={() => setHoveredRow(null)}\n              onClick={() => onItemClick?.(item)}\n            >\n              <TableCell onClick={(e) => e.stopPropagation()}>\n                <Checkbox\n                  checked={selectedItems.includes(item.id)}\n                  onCheckedChange={(checked) => handleItemSelection(item.id, checked as boolean)}\n                  aria-label={`Select ${item.order_number}`}\n                />\n              </TableCell>\n              {visibleFields.map((field) => (\n                <TableCell key={field}>\n                  {renderCell(item, field)}\n                </TableCell>\n              ))}\n              <TableCell onClick={(e) => e.stopPropagation()}>\n                <div className={`flex items-center gap-1 transition-opacity ${hoveredRow === item.id ? 'opacity-100' : 'opacity-0'}`}>\n                  {onViewItem && (\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={() => onViewItem(item)}\n                      className=\"h-8 w-8 p-0\"\n                    >\n                      <Eye className=\"h-4 w-4\" />\n                    </Button>\n                  )}\n                  {onEditItem && (\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={() => onEditItem(item)}\n                      className=\"h-8 w-8 p-0\"\n                    >\n                      <Edit className=\"h-4 w-4\" />\n                    </Button>\n                  )}\n                  {onTrackPackage && (\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={() => onTrackPackage(item)}\n                      className=\"h-8 w-8 p-0\"\n                    >\n                      <ExternalLink className=\"h-4 w-4\" />\n                    </Button>\n                  )}\n                </div>\n              </TableCell>\n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n      \n      {items.length === 0 && (\n        <div className=\"text-center py-12\">\n          <Package className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n          <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No tracking items found</h3>\n          <p className=\"text-gray-500\">Try adjusting your filters or search criteria.</p>\n        </div>\n      )}\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ghxstship/apps/web/app/(app)/(shell)/procurement/tracking/views/TrackingTimelineView.tsx","messages":[{"ruleId":"react/jsx-no-undef","severity":2,"message":"'CheckCircle' is not defined.","line":61,"column":17,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":61,"endColumn":28},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Truck' is not defined.","line":63,"column":17,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":63,"endColumn":22},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Package' is not defined.","line":65,"column":17,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":65,"endColumn":24},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'AlertCircle' is not defined.","line":67,"column":17,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":67,"endColumn":28},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Package' is not defined.","line":76,"column":17,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":76,"endColumn":24},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Truck' is not defined.","line":78,"column":17,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":78,"endColumn":22},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Truck' is not defined.","line":80,"column":17,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":80,"endColumn":22},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'CheckCircle' is not defined.","line":82,"column":17,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":82,"endColumn":28},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'AlertCircle' is not defined.","line":84,"column":17,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":84,"endColumn":28},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Truck' is not defined.","line":186,"column":30,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":186,"endColumn":35},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'CheckCircle' is not defined.","line":205,"column":32,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":205,"endColumn":43},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'MapPin' is not defined.","line":239,"column":34,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":239,"endColumn":40},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'ChevronRight' is not defined.","line":254,"column":30,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":254,"endColumn":42},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'MapPin' is not defined.","line":278,"column":40,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":278,"endColumn":46},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'MapPin' is not defined.","line":293,"column":34,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":293,"endColumn":40},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'ChevronRight' is not defined.","line":298,"column":32,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":298,"endColumn":44},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'MapPin' is not defined.","line":302,"column":34,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":302,"endColumn":40},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Eye' is not defined.","line":320,"column":28,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":320,"endColumn":31},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Edit' is not defined.","line":330,"column":28,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":330,"endColumn":32},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'ExternalLink' is not defined.","line":340,"column":28,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":340,"endColumn":40}],"suppressedMessages":[],"errorCount":20,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\nimport { User, FileText, Settings, Award, Calendar, TrendingUp, Activity, Clock, Plus, Search, Play, Trash2 } from \"lucide-react\";\nimport { useState } from 'react';\nimport { Card, Badge, Button, Checkbox } from '@ghxstship/ui';\nimport Link from 'next/link';\nimport type { TrackingItem, TrackingEvent } from '../types';\nimport { formatCurrency, formatDate, formatDateTime, getStatusColor, getPriorityColor, getPerformanceColor, calculateDeliveryPerformance } from '../types';\n\ninterface TrackingTimelineViewProps {\n  items: TrackingItem[];\n  loading?: boolean;\n  selectedItems: string[];\n  onSelectionChange: (itemIds: string[]) => void;\n  onItemClick?: (item: TrackingItem) => void;\n  onEditItem?: (item: TrackingItem) => void;\n  onViewItem?: (item: TrackingItem) => void;\n  onTrackPackage?: (item: TrackingItem) => void;\n}\n\nexport default function TrackingTimelineView({\n  items,\n  loading = false,\n  selectedItems,\n  onSelectionChange,\n  onItemClick,\n  onEditItem,\n  onViewItem,\n  onTrackPackage,\n}: TrackingTimelineViewProps) {\n  const [expandedItems, setExpandedItems] = useState<Set<string>>(new Set());\n\n  const handleItemSelection = (itemId: string, checked: boolean) => {\n    if (checked) {\n      onSelectionChange([...selectedItems, itemId]);\n    } else {\n      onSelectionChange(selectedItems.filter(id => id !== itemId));\n    }\n  };\n\n  const handleSelectAll = (checked: boolean) => {\n    if (checked) {\n      onSelectionChange(items.map(item => item.id));\n    } else {\n      onSelectionChange([]);\n    }\n  };\n\n  const toggleExpanded = (itemId: string) => {\n    const newExpanded = new Set(expandedItems);\n    if (newExpanded.has(itemId)) {\n      newExpanded.delete(itemId);\n    } else {\n      newExpanded.add(itemId);\n    }\n    setExpandedItems(newExpanded);\n  };\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case 'delivered':\n        return <CheckCircle className=\"h-5 w-5 text-green-500\" />;\n      case 'in_transit':\n        return <Truck className=\"h-5 w-5 text-blue-500\" />;\n      case 'shipped':\n        return <Package className=\"h-5 w-5 text-orange-500\" />;\n      case 'delayed':\n        return <AlertCircle className=\"h-5 w-5 text-red-500\" />;\n      default:\n        return <Clock className=\"h-5 w-5 text-gray-500\" />;\n    }\n  };\n\n  const getEventIcon = (eventType: string) => {\n    switch (eventType) {\n      case 'shipped':\n        return <Package className=\"h-4 w-4 text-orange-500\" />;\n      case 'in_transit':\n        return <Truck className=\"h-4 w-4 text-blue-500\" />;\n      case 'out_for_delivery':\n        return <Truck className=\"h-4 w-4 text-green-500\" />;\n      case 'delivered':\n        return <CheckCircle className=\"h-4 w-4 text-green-500\" />;\n      case 'exception':\n        return <AlertCircle className=\"h-4 w-4 text-red-500\" />;\n      default:\n        return <Clock className=\"h-4 w-4 text-gray-500\" />;\n    }\n  };\n\n  const sortedItems = [...items].sort((a, b) => {\n    // Sort by most recent activity first\n    const aLatest = a.events?.[0]?.timestamp || a.updated_at;\n    const bLatest = b.events?.[0]?.timestamp || b.updated_at;\n    return new Date(bLatest).getTime() - new Date(aLatest).getTime();\n  });\n\n  if (loading) {\n    return (\n      <div className=\"space-y-6\">\n        {Array.from({ length: 3 }).map((_, i) => (\n          <Card key={i} className=\"p-6\">\n            <div className=\"animate-pulse\">\n              <div className=\"h-6 bg-gray-200 rounded w-1/3 mb-4\" />\n              <div className=\"h-4 bg-gray-200 rounded w-1/2 mb-2\" />\n              <div className=\"h-4 bg-gray-200 rounded w-2/3\" />\n            </div>\n          </Card>\n        ))}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header Controls */}\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center gap-4\">\n          <Checkbox\n            checked={selectedItems.length === items.length && items.length > 0}\n            onCheckedChange={handleSelectAll}\n            aria-label=\"Select all items\"\n          />\n          <span className=\"text-sm text-gray-600\">\n            {selectedItems.length > 0 ? `${selectedItems.length} selected` : `${items.length} items`}\n          </span>\n        </div>\n      </div>\n\n      {/* Timeline Items */}\n      <div className=\"relative\">\n        {/* Timeline Line */}\n        <div className=\"absolute left-8 top-0 bottom-0 w-0.5 bg-gray-200\" />\n\n        <div className=\"space-y-8\">\n          {sortedItems.map((item, index) => {\n            const isExpanded = expandedItems.has(item.id);\n            const isSelected = selectedItems.includes(item.id);\n            const performance = calculateDeliveryPerformance(item);\n            const latestEvent = item.events?.[0];\n\n            return (\n              <div key={item.id} className=\"relative\">\n                {/* Timeline Node */}\n                <div className=\"absolute left-6 w-4 h-4 bg-white border-2 border-gray-300 rounded-full z-10\">\n                  <div className=\"absolute inset-0.5 rounded-full bg-blue-500\" />\n                </div>\n\n                <Card className={`ml-16 p-6 transition-all ${isSelected ? 'ring-2 ring-blue-500 bg-blue-50' : 'hover:shadow-md'}`}>\n                  <div className=\"flex items-start justify-between\">\n                    <div className=\"flex items-start gap-4 flex-1\">\n                      <Checkbox\n                        checked={isSelected}\n                        onCheckedChange={(checked) => handleItemSelection(item.id, checked as boolean)}\n                        aria-label={`Select ${item.order_number}`}\n                        onClick={(e) => e.stopPropagation()}\n                      />\n\n                      <div className=\"flex-1 min-w-0\">\n                        {/* Header */}\n                        <div className=\"flex items-center gap-3 mb-3\">\n                          {getStatusIcon(item.status)}\n                          <div>\n                            <div className=\"flex items-center gap-2\">\n                              <Link \n                                href={`/procurement/orders/${item.order_id}`}\n                                className=\"font-semibold text-lg text-blue-600 hover:underline\"\n                              >\n                                {item.order_number}\n                              </Link>\n                              <Badge variant={getStatusColor(item.status)}>\n                                {item.status.replace('_', ' ').toUpperCase()}\n                              </Badge>\n                              <Badge variant={getPriorityColor(item.priority)}>\n                                {item.priority.toUpperCase()}\n                              </Badge>\n                            </div>\n                            <p className=\"text-sm text-gray-600 mt-1\">\n                              {item.vendor_name} • {formatCurrency(item.total_value)}\n                            </p>\n                          </div>\n                        </div>\n\n                        {/* Tracking Info */}\n                        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 mb-4\">\n                          <div className=\"flex items-center gap-2\">\n                            <Truck className=\"h-4 w-4 text-gray-500\" />\n                            <div>\n                              <p className=\"text-sm font-medium\">{item.carrier}</p>\n                              <p className=\"text-xs text-gray-500 font-mono\">{item.tracking_number}</p>\n                            </div>\n                          </div>\n\n                          {item.expected_delivery && (\n                            <div className=\"flex items-center gap-2\">\n                              <Calendar className=\"h-4 w-4 text-gray-500\" />\n                              <div>\n                                <p className=\"text-sm font-medium\">Expected</p>\n                                <p className=\"text-xs text-gray-500\">{formatDate(item.expected_delivery)}</p>\n                              </div>\n                            </div>\n                          )}\n\n                          {item.actual_delivery && (\n                            <div className=\"flex items-center gap-2\">\n                              <CheckCircle className=\"h-4 w-4 text-green-500\" />\n                              <div>\n                                <p className=\"text-sm font-medium\">Delivered</p>\n                                <p className=\"text-xs text-gray-500\">{formatDate(item.actual_delivery)}</p>\n                              </div>\n                            </div>\n                          )}\n\n                          {performance && (\n                            <div className=\"flex items-center gap-2\">\n                              <Clock className=\"h-4 w-4 text-gray-500\" />\n                              <div>\n                                <p className=\"text-sm font-medium\">Performance</p>\n                                <Badge variant={getPerformanceColor(performance.status)} className=\"text-xs\">\n                                  {performance.status === 'on_time' ? 'On Time' : \n                                   performance.status === 'early' ? `${performance.days_difference}d Early` :\n                                   `${Math.abs(performance.days_difference)}d Late`}\n                                </Badge>\n                              </div>\n                            </div>\n                          )}\n                        </div>\n\n                        {/* Latest Event */}\n                        {latestEvent && (\n                          <div className=\"bg-gray-50 rounded-lg p-3 mb-4\">\n                            <div className=\"flex items-center gap-2 mb-1\">\n                              {getEventIcon(latestEvent.event_type)}\n                              <span className=\"font-medium text-sm\">Latest Update</span>\n                              <span className=\"text-xs text-gray-500\">{formatDateTime(latestEvent.timestamp)}</span>\n                            </div>\n                            <p className=\"text-sm text-gray-700\">{latestEvent.description}</p>\n                            {latestEvent.location && (\n                              <div className=\"flex items-center gap-1 mt-1\">\n                                <MapPin className=\"h-3 w-3 text-gray-400\" />\n                                <span className=\"text-xs text-gray-500\">{latestEvent.location}</span>\n                              </div>\n                            )}\n                          </div>\n                        )}\n\n                        {/* Expandable Events */}\n                        {item.events && item.events.length > 1 && (\n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            onClick={() => toggleExpanded(item.id)}\n                            className=\"mb-4\"\n                          >\n                            <ChevronRight className={`h-4 w-4 transition-transform ${isExpanded ? 'rotate-90' : ''}`} />\n                            {isExpanded ? 'Hide' : 'Show'} tracking history ({item.events.length - 1} more events)\n                          </Button>\n                        )}\n\n                        {isExpanded && item.events && (\n                          <div className=\"space-y-3 mb-4 pl-4 border-l-2 border-gray-200\">\n                            {item.events.slice(1).map((event, eventIndex) => (\n                              <div key={eventIndex} className=\"flex items-start gap-3\">\n                                <div className=\"mt-0.5\">\n                                  {getEventIcon(event.event_type)}\n                                </div>\n                                <div className=\"flex-1\">\n                                  <div className=\"flex items-center gap-2 mb-1\">\n                                    <span className=\"font-medium text-sm capitalize\">\n                                      {event.event_type.replace('_', ' ')}\n                                    </span>\n                                    <span className=\"text-xs text-gray-500\">\n                                      {formatDateTime(event.timestamp)}\n                                    </span>\n                                  </div>\n                                  <p className=\"text-sm text-gray-700\">{event.description}</p>\n                                  {event.location && (\n                                    <div className=\"flex items-center gap-1 mt-1\">\n                                      <MapPin className=\"h-3 w-3 text-gray-400\" />\n                                      <span className=\"text-xs text-gray-500\">{event.location}</span>\n                                    </div>\n                                  )}\n                                </div>\n                              </div>\n                            ))}\n                          </div>\n                        )}\n\n                        {/* Route Info */}\n                        {(item.origin_address || item.destination_address) && (\n                          <div className=\"flex items-center gap-4 text-sm text-gray-600\">\n                            {item.origin_address && (\n                              <div className=\"flex items-center gap-1\">\n                                <MapPin className=\"h-4 w-4 text-gray-400\" />\n                                <span>From: {item.origin_address.city}, {item.origin_address.state}</span>\n                              </div>\n                            )}\n                            {item.origin_address && item.destination_address && (\n                              <ChevronRight className=\"h-4 w-4 text-gray-400\" />\n                            )}\n                            {item.destination_address && (\n                              <div className=\"flex items-center gap-1\">\n                                <MapPin className=\"h-4 w-4 text-blue-500\" />\n                                <span>To: {item.destination_address.city}, {item.destination_address.state}</span>\n                              </div>\n                            )}\n                          </div>\n                        )}\n                      </div>\n                    </div>\n\n                    {/* Actions */}\n                    <div className=\"flex items-center gap-2 ml-4\">\n                      {onViewItem && (\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => onViewItem(item)}\n                          className=\"h-8 w-8 p-0\"\n                        >\n                          <Eye className=\"h-4 w-4\" />\n                        </Button>\n                      )}\n                      {onEditItem && (\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => onEditItem(item)}\n                          className=\"h-8 w-8 p-0\"\n                        >\n                          <Edit className=\"h-4 w-4\" />\n                        </Button>\n                      )}\n                      {onTrackPackage && (\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => onTrackPackage(item)}\n                          className=\"h-8 w-8 p-0\"\n                        >\n                          <ExternalLink className=\"h-4 w-4\" />\n                        </Button>\n                      )}\n                    </div>\n                  </div>\n                </Card>\n              </div>\n            );\n          })}\n        </div>\n      </div>\n\n      {items.length === 0 && (\n        <div className=\"text-center py-12\">\n          <Clock className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n          <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No tracking timeline available</h3>\n          <p className=\"text-gray-500\">Tracking events will appear here as they occur.</p>\n        </div>\n      )}\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ghxstship/apps/web/app/(app)/(shell)/procurement/vendors/VendorsClient.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'vendorService'. Either include it or remove the dependency array.","line":106,"column":6,"nodeType":"ArrayExpression","endLine":106,"endColumn":73,"suggestions":[{"desc":"Update the dependencies array to be: [vendorService, orgId, filters, sort, pagination.page, pagination.limit, viewMode]","fix":{"range":[2943,3010],"text":"[vendorService, orgId, filters, sort, pagination.page, pagination.limit, viewMode]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'vendorService'. Either include it or remove the dependency array.","line":170,"column":6,"nodeType":"ArrayExpression","endLine":170,"endColumn":26,"suggestions":[{"desc":"Update the dependencies array to be: [vendorService, orgId, loadVendors]","fix":{"range":[5070,5090],"text":"[vendorService, orgId, loadVendors]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'vendorService'. Either include it or remove the dependency array.","line":186,"column":6,"nodeType":"ArrayExpression","endLine":186,"endColumn":26,"suggestions":[{"desc":"Update the dependencies array to be: [vendorService, orgId, loadVendors]","fix":{"range":[5596,5616],"text":"[vendorService, orgId, loadVendors]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { Building, Search, Filter, Grid, List, Columns, BarChart3, Download, Upload, Trash2, Edit, Eye, RefreshCw, Settings, X, Plus } from \"lucide-react\";\nimport { useState, useEffect, useCallback } from 'react';\nimport { useTranslations } from 'next-intl';\nimport { createBrowserClient } from '@ghxstship/auth';\nimport { \n  Button, \n  UnifiedInput, \n  Badge, \n  Card,\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n  Checkbox,\n  Tabs,\n  TabsContent,\n  TabsList,\n  TabsTrigger,\n} from '@ghxstship/ui';\n\n// Import types and views\nimport type { \n  Vendor, \n  VendorFilters, \n  VendorSort, \n  VendorViewMode, \n  VendorStats,\n  VendorBulkAction \n} from './types';\nimport { VendorService } from './lib/vendorService';\nimport VendorGridView from './views/VendorGridView';\nimport VendorTableView from './views/VendorTableView';\nimport VendorKanbanView from './views/VendorKanbanView';\nimport VendorDashboardView from './views/VendorDashboardView';\nimport CreateVendorClient from './CreateVendorClient';\n\nexport default function VendorsClient({ orgId }: { orgId: string }) {\n  const t = useTranslations('procurement');\n  const sb = createBrowserClient();\n  \n  // State management\n  const [vendors, setVendors] = useState<Vendor[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [selectedVendors, setSelectedVendors] = useState<string[]>([]);\n  const [viewMode, setViewMode] = useState<VendorViewMode>('grid');\n  const [showFilters, setShowFilters] = useState(false);\n  const [stats, setStats] = useState<VendorStats | null>(null);\n  \n  // Filters and sorting\n  const [filters, setFilters] = useState<VendorFilters>({\n    search: '',\n    status: 'all',\n    business_type: 'all',\n  });\n  const [sort, setSort] = useState<VendorSort>({\n    field: 'created_at',\n    direction: 'desc',\n  });\n  \n  // Pagination\n  const [pagination, setPagination] = useState({\n    page: 1,\n    limit: 50,\n    total: 0,\n    hasMore: false,\n  });\n\n  const vendorService = new VendorService();\n\n  // Load vendors with filters and pagination\n  const loadVendors = useCallback(async () => {\n    try {\n      setLoading(true);\n      setError(null);\n\n      const result = await vendorService.getVendors(\n        orgId,\n        filters,\n        sort,\n        pagination.page,\n        pagination.limit\n      );\n\n      setVendors(result.vendors);\n      setPagination(prev => ({\n        ...prev,\n        total: result.total,\n        hasMore: result.hasMore,\n      }));\n\n      // Load stats if on dashboard view\n      if (viewMode === 'dashboard') {\n        const statsResult = await vendorService.getVendorStats(orgId);\n        setStats(statsResult);\n      }\n    } catch (error) {\n      console.error('Error loading vendors:', error);\n      setError(error instanceof Error ? error.message : 'Failed to load vendors');\n    } finally {\n      setLoading(false);\n    }\n  }, [orgId, filters, sort, pagination.page, pagination.limit, viewMode]);\n\n  // Load data on mount and when dependencies change\n  useEffect(() => {\n    loadVendors();\n  }, [loadVendors]);\n\n  // Handle filter changes\n  const handleFilterChange = useCallback((newFilters: Partial<VendorFilters>) => {\n    setFilters(prev => ({ ...prev, ...newFilters }));\n    setPagination(prev => ({ ...prev, page: 1 })); // Reset to first page\n  }, []);\n\n  // Handle sort changes\n  const handleSortChange = useCallback((newSort: VendorSort) => {\n    setSort(newSort);\n    setPagination(prev => ({ ...prev, page: 1 })); // Reset to first page\n  }, []);\n\n  // Handle view mode changes\n  const handleViewModeChange = useCallback((mode: VendorViewMode) => {\n    setViewMode(mode);\n    setSelectedVendors([]); // Clear selection when changing views\n  }, []);\n\n  // Handle vendor selection\n  const handleSelectionChange = useCallback((vendorIds: string[]) => {\n    setSelectedVendors(vendorIds);\n  }, []);\n\n  // Handle individual vendor actions\n  const handleVendorClick = useCallback((vendor: Vendor) => {\n    // Navigate to vendor detail or open drawer\n    console.log('Vendor clicked:', vendor);\n  }, []);\n\n  const handleEditVendor = useCallback((vendor: Vendor) => {\n    // Open edit drawer\n    console.log('Edit vendor:', vendor);\n  }, []);\n\n  const handleDeleteVendor = useCallback((vendor: Vendor) => {\n    // Show confirmation dialog and delete\n    console.log('Delete vendor:', vendor);\n  }, []);\n\n  const handleViewVendor = useCallback((vendor: Vendor) => {\n    // Open view drawer\n    console.log('View vendor:', vendor);\n  }, []);\n\n  // Handle bulk actions\n  const handleBulkAction = useCallback(async (action: VendorBulkAction) => {\n    try {\n      setLoading(true);\n      await vendorService.bulkUpdateVendors(orgId, action, 'current-user-id');\n      await loadVendors(); // Reload data\n      setSelectedVendors([]); // Clear selection\n    } catch (error) {\n      console.error('Bulk action failed:', error);\n      setError(error instanceof Error ? error.message : 'Bulk action failed');\n    } finally {\n      setLoading(false);\n    }\n  }, [orgId, loadVendors]);\n\n  // Handle status change (for Kanban view)\n  const handleStatusChange = useCallback(async (vendor: Vendor, newStatus: string) => {\n    try {\n      await vendorService.updateVendor(\n        orgId,\n        vendor.id,\n        { status: newStatus as unknown },\n        'current-user-id'\n      );\n      await loadVendors(); // Reload data\n    } catch (error) {\n      console.error('Status change failed:', error);\n      setError(error instanceof Error ? error.message : 'Status change failed');\n    }\n  }, [orgId, loadVendors]);\n\n  // Render view based on current mode\n  const renderView = () => {\n    const commonProps = {\n      vendors,\n      loading,\n      selectedVendors,\n      onSelectionChange: handleSelectionChange,\n      onVendorClick: handleVendorClick,\n      onEditVendor: handleEditVendor,\n      onDeleteVendor: handleDeleteVendor,\n      onViewVendor: handleViewVendor,\n    };\n\n    switch (viewMode) {\n      case 'grid':\n        return <VendorGridView {...commonProps} />;\n      case 'table':\n        return (\n          <VendorTableView\n            {...commonProps}\n            sort={sort}\n            onSortChange={handleSortChange}\n          />\n        );\n      case 'kanban':\n        return (\n          <VendorKanbanView\n            {...commonProps}\n            onStatusChange={handleStatusChange}\n          />\n        );\n      case 'dashboard':\n        return (\n          <VendorDashboardView\n            vendors={vendors}\n            loading={loading}\n            stats={stats || undefined}\n            onVendorClick={handleVendorClick}\n          />\n        );\n      default:\n        return <VendorGridView {...commonProps} />;\n    }\n  };\n\n  if (error) {\n    return (\n      <Card className=\"p-xl text-center\">\n        <div className=\"text-destructive mb-md\">\n          <Building className=\"h-12 w-12 mx-auto mb-md opacity-50\" />\n          <h3 className=\"text-lg font-medium mb-sm\">Error Loading Vendors</h3>\n          <p className=\"text-sm\">{error}</p>\n        </div>\n        <Button onClick={loadVendors} variant=\"outline\">\n          <RefreshCw className=\"h-4 w-4 mr-sm\" />\n          Try Again\n        </Button>\n      </Card>\n    );\n  }\n\n  return (\n    <div className=\"space-y-lg\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center gap-sm\">\n          <Building className=\"h-5 w-5\" />\n          <h3 className=\"text-lg font-semibold\">Procurement Vendors</h3>\n          <Badge variant=\"secondary\">\n            {vendors.length} vendor{vendors.length !== 1 ? 's' : ''}\n          </Badge>\n        </div>\n        <div className=\"flex items-center gap-sm\">\n          <CreateVendorClient orgId={orgId} onVendorCreated={loadVendors} />\n          <Button variant=\"outline\" size=\"sm\">\n            <Upload className=\"h-4 w-4 mr-sm\" />\n            Import\n          </Button>\n          <Button variant=\"outline\" size=\"sm\">\n            <Download className=\"h-4 w-4 mr-sm\" />\n            Export\n          </Button>\n        </div>\n      </div>\n\n      {/* Filters and Search */}\n      <Card className=\"p-md\">\n        <div className=\"flex flex-col lg:flex-row gap-md\">\n          {/* Search */}\n          <div className=\"relative flex-1\">\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n            <UnifiedInput\n              placeholder=\"Search vendors...\"\n              value={filters.search || ''}\n              onChange={(e) => handleFilterChange({ search: e.target.value })}\n              className=\"pl-10\"\n            />\n          </div>\n\n          {/* Status Filter */}\n          <Select\n            value={filters.status || 'all'}\n            onValueChange={(value) => handleFilterChange({ status: value as unknown })}\n          >\n            <SelectTrigger className=\"w-[140px]\">\n              <SelectValue placeholder=\"All Status\" />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"all\">All Status</SelectItem>\n              <SelectItem value=\"active\">Active</SelectItem>\n              <SelectItem value=\"inactive\">Inactive</SelectItem>\n              <SelectItem value=\"pending\">Pending</SelectItem>\n              <SelectItem value=\"suspended\">Suspended</SelectItem>\n            </SelectContent>\n          </Select>\n\n          {/* Business Type Filter */}\n          <Select\n            value={filters.business_type || 'all'}\n            onValueChange={(value) => handleFilterChange({ business_type: value as unknown })}\n          >\n            <SelectTrigger className=\"w-[140px]\">\n              <SelectValue placeholder=\"All Types\" />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"all\">All Types</SelectItem>\n              <SelectItem value=\"individual\">Individual</SelectItem>\n              <SelectItem value=\"company\">Company</SelectItem>\n              <SelectItem value=\"agency\">Agency</SelectItem>\n            </SelectContent>\n          </Select>\n\n          {/* Advanced Filters Toggle */}\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={() => setShowFilters(!showFilters)}\n          >\n            <Filter className=\"h-4 w-4 mr-sm\" />\n            Filters\n          </Button>\n        </div>\n\n        {/* Advanced Filters */}\n        {showFilters && (\n          <div className=\"mt-md pt-md border-t border-border\">\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-md\">\n              {/* Category Filter */}\n              <div>\n                <label className=\"text-sm font-medium mb-sm block\">Category</label>\n                <UnifiedInput\n                  placeholder=\"Filter by category\"\n                  value={filters.primary_category || ''}\n                  onChange={(e) => handleFilterChange({ primary_category: e.target.value })}\n                />\n              </div>\n\n              {/* Rating Filter */}\n              <div>\n                <label className=\"text-sm font-medium mb-sm block\">Min Rating</label>\n                <UnifiedInput\n                  type=\"number\"\n                  min=\"1\"\n                  max=\"5\"\n                  step=\"0.1\"\n                  placeholder=\"Min rating\"\n                  value={filters.rating_min || ''}\n                  onChange={(e) => handleFilterChange({ \n                    rating_min: e.target.value ? Number(e.target.value) : undefined \n                  })}\n                />\n              </div>\n\n              {/* Rate Range */}\n              <div>\n                <label className=\"text-sm font-medium mb-sm block\">Hourly Rate Range</label>\n                <div className=\"flex gap-sm\">\n                  <UnifiedInput\n                    type=\"number\"\n                    placeholder=\"Min\"\n                    value={filters.hourly_rate_min || ''}\n                    onChange={(e) => handleFilterChange({ \n                      hourly_rate_min: e.target.value ? Number(e.target.value) : undefined \n                    })}\n                  />\n                  <UnifiedInput\n                    type=\"number\"\n                    placeholder=\"Max\"\n                    value={filters.hourly_rate_max || ''}\n                    onChange={(e) => handleFilterChange({ \n                      hourly_rate_max: e.target.value ? Number(e.target.value) : undefined \n                    })}\n                  />\n                </div>\n              </div>\n            </div>\n          </div>\n        )}\n      </Card>\n\n      {/* View Mode Tabs */}\n      <Tabs value={viewMode} onValueChange={(value) => handleViewModeChange(value as VendorViewMode)}>\n        <div className=\"flex items-center justify-between\">\n          <TabsList>\n            <TabsTrigger value=\"grid\">\n              <Grid className=\"h-4 w-4 mr-sm\" />\n              Grid\n            </TabsTrigger>\n            <TabsTrigger value=\"table\">\n              <Columns className=\"h-4 w-4 mr-sm\" />\n              Table\n            </TabsTrigger>\n            <TabsTrigger value=\"kanban\">\n              <Columns className=\"h-4 w-4 mr-sm\" />\n              Kanban\n            </TabsTrigger>\n            <TabsTrigger value=\"dashboard\">\n              <BarChart3 className=\"h-4 w-4 mr-sm\" />\n              Dashboard\n            </TabsTrigger>\n          </TabsList>\n\n          {/* Bulk Actions */}\n          {selectedVendors.length > 0 && (\n            <div className=\"flex items-center gap-sm\">\n              <span className=\"text-sm text-muted-foreground\">\n                {selectedVendors.length} selected\n              </span>\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => handleBulkAction({ type: 'delete', vendorIds: selectedVendors })}\n              >\n                <Trash2 className=\"h-4 w-4 mr-sm\" />\n                Delete\n              </Button>\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => setSelectedVendors([])}\n              >\n                <X className=\"h-4 w-4 mr-sm\" />\n                Clear\n              </Button>\n            </div>\n          )}\n        </div>\n\n        <TabsContent value={viewMode} className=\"mt-md\">\n          {renderView()}\n        </TabsContent>\n      </Tabs>\n\n      {/* Pagination */}\n      {pagination.total > pagination.limit && (\n        <div className=\"flex items-center justify-between\">\n          <div className=\"text-sm text-muted-foreground\">\n            Showing {((pagination.page - 1) * pagination.limit) + 1} to{' '}\n            {Math.min(pagination.page * pagination.limit, pagination.total)} of{' '}\n            {pagination.total} vendors\n          </div>\n          <div className=\"flex items-center gap-sm\">\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              disabled={pagination.page === 1}\n              onClick={() => setPagination(prev => ({ ...prev, page: prev.page - 1 }))}\n            >\n              Previous\n            </Button>\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              disabled={!pagination.hasMore}\n              onClick={() => setPagination(prev => ({ ...prev, page: prev.page + 1 }))}\n            >\n              Next\n            </Button>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ghxstship/apps/web/app/(app)/(shell)/procurement/vendors/views/VendorGridView.tsx","messages":[{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Star' is not defined.","line":53,"column":12,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":53,"endColumn":16},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Building' is not defined.","line":95,"column":10,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":95,"endColumn":18},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Eye' is not defined.","line":163,"column":24,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":163,"endColumn":27},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Edit' is not defined.","line":175,"column":24,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":175,"endColumn":28},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Building' is not defined.","line":198,"column":24,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":198,"endColumn":32},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Mail' is not defined.","line":249,"column":24,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":249,"endColumn":28},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Phone' is not defined.","line":255,"column":24,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":255,"endColumn":29},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Globe' is not defined.","line":261,"column":24,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":261,"endColumn":29},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'MapPin' is not defined.","line":267,"column":24,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":267,"endColumn":30},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'MoreHorizontal' is not defined.","line":317,"column":22,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":317,"endColumn":36}],"suppressedMessages":[],"errorCount":10,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\nimport { User, FileText, Settings, Award, Calendar, TrendingUp, Activity, Clock, Plus, Search, Play, Trash2 } from \"lucide-react\";\nimport { useState } from 'react';\nimport { Card, Badge, Button, Checkbox } from '@ghxstship/ui';\nimport type { Vendor } from '../types';\nimport { formatCurrency, formatDate, getStatusColor, getBusinessTypeColor, formatAddress } from '../types';\n\ninterface VendorGridViewProps {\n  vendors: Vendor[];\n  loading?: boolean;\n  selectedVendors: string[];\n  onSelectionChange: (vendorIds: string[]) => void;\n  onVendorClick?: (vendor: Vendor) => void;\n  onEditVendor?: (vendor: Vendor) => void;\n  onDeleteVendor?: (vendor: Vendor) => void;\n  onViewVendor?: (vendor: Vendor) => void;\n}\n\nexport default function VendorGridView({\n  vendors,\n  loading = false,\n  selectedVendors,\n  onSelectionChange,\n  onVendorClick,\n  onEditVendor,\n  onDeleteVendor,\n  onViewVendor,\n}: VendorGridViewProps) {\n  const [hoveredVendor, setHoveredVendor] = useState<string | null>(null);\n\n  const handleVendorSelection = (vendorId: string, checked: boolean) => {\n    if (checked) {\n      onSelectionChange([...selectedVendors, vendorId]);\n    } else {\n      onSelectionChange(selectedVendors.filter(id => id !== vendorId));\n    }\n  };\n\n  const handleSelectAll = (checked: boolean) => {\n    if (checked) {\n      onSelectionChange(vendors.map(vendor => vendor.id));\n    } else {\n      onSelectionChange([]);\n    }\n  };\n\n  const renderStars = (rating?: number) => {\n    if (!rating) return null;\n    \n    return (\n      <div className=\"flex items-center gap-xs\">\n        {[1, 2, 3, 4, 5].map((star) => (\n          <Star\n            key={star}\n            className={`h-3 w-3 ${\n              star <= rating ? 'text-warning fill-current' : 'text-muted-foreground'\n            }`}\n          />\n        ))}\n        <span className=\"text-xs text-muted-foreground ml-xs\">({rating.toFixed(1)})</span>\n      </div>\n    );\n  };\n\n  if (loading) {\n    return (\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-md\">\n        {Array.from({ length: 8 }).map((_, index) => (\n          <Card key={index} className=\"p-md\">\n            <div className=\"animate-pulse\">\n              <div className=\"flex items-center justify-between mb-sm\">\n                <div className=\"h-4 bg-muted rounded w-3/4\"></div>\n                <div className=\"h-6 bg-muted rounded-full w-16\"></div>\n              </div>\n              <div className=\"h-3 bg-muted rounded w-1/2 mb-sm\"></div>\n              <div className=\"h-3 bg-muted rounded w-full mb-sm\"></div>\n              <div className=\"h-3 bg-muted rounded w-2/3 mb-md\"></div>\n              <div className=\"flex justify-between items-center\">\n                <div className=\"h-5 bg-muted rounded w-20\"></div>\n                <div className=\"flex gap-xs\">\n                  <div className=\"h-8 w-8 bg-muted rounded\"></div>\n                  <div className=\"h-8 w-8 bg-muted rounded\"></div>\n                </div>\n              </div>\n            </div>\n          </Card>\n        ))}\n      </div>\n    );\n  }\n\n  if (vendors.length === 0) {\n    return (\n      <Card className=\"p-xl text-center\">\n        <Building className=\"h-12 w-12 mx-auto mb-md text-muted-foreground opacity-50\" />\n        <h3 className=\"text-lg font-medium mb-sm\">No vendors found</h3>\n        <p className=\"text-muted-foreground\">\n          No vendors match your current filters. Try adjusting your search criteria.\n        </p>\n      </Card>\n    );\n  }\n\n  const allSelected = vendors.length > 0 && selectedVendors.length === vendors.length;\n  const someSelected = selectedVendors.length > 0 && selectedVendors.length < vendors.length;\n\n  return (\n    <div className=\"space-y-md\">\n      {/* Selection header */}\n      {vendors.length > 0 && (\n        <div className=\"flex items-center gap-sm p-sm bg-muted/30 rounded-lg\">\n          <Checkbox\n            checked={allSelected}\n            indeterminate={someSelected}\n            onCheckedChange={handleSelectAll}\n          />\n          <span className=\"text-sm text-muted-foreground\">\n            {selectedVendors.length > 0 \n              ? `${selectedVendors.length} of ${vendors.length} vendors selected`\n              : `Select all ${vendors.length} vendors`\n            }\n          </span>\n        </div>\n      )}\n\n      {/* Grid */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-md\">\n        {vendors.map((vendor) => {\n          const isSelected = selectedVendors.includes(vendor.id);\n          const isHovered = hoveredVendor === vendor.id;\n\n          return (\n            <Card\n              key={vendor.id}\n              className={`relative transition-all duration-200 cursor-pointer hover:shadow-md ${\n                isSelected ? 'ring-2 ring-primary' : ''\n              }`}\n              onMouseEnter={() => setHoveredVendor(vendor.id)}\n              onMouseLeave={() => setHoveredVendor(null)}\n              onClick={() => onVendorClick?.(vendor)}\n            >\n              {/* Selection checkbox */}\n              <div className=\"absolute top-sm left-sm z-10\">\n                <Checkbox\n                  checked={isSelected}\n                  onCheckedChange={(checked) => handleVendorSelection(vendor.id, checked as boolean)}\n                  onClick={(e) => e.stopPropagation()}\n                />\n              </div>\n\n              {/* Action buttons */}\n              {isHovered && (\n                <div className=\"absolute top-sm right-sm z-10 flex gap-xs\">\n                  {onViewVendor && (\n                    <Button\n                      size=\"sm\"\n                      variant=\"secondary\"\n                      onClick={(e) => {\n                        e.stopPropagation();\n                        onViewVendor(vendor);\n                      }}\n                    >\n                      <Eye className=\"h-3 w-3\" />\n                    </Button>\n                  )}\n                  {onEditVendor && (\n                    <Button\n                      size=\"sm\"\n                      variant=\"secondary\"\n                      onClick={(e) => {\n                        e.stopPropagation();\n                        onEditVendor(vendor);\n                      }}\n                    >\n                      <Edit className=\"h-3 w-3\" />\n                    </Button>\n                  )}\n                  {onDeleteVendor && (\n                    <Button\n                      size=\"sm\"\n                      variant=\"destructive\"\n                      onClick={(e) => {\n                        e.stopPropagation();\n                        onDeleteVendor(vendor);\n                      }}\n                    >\n                      <Trash2 className=\"h-3 w-3\" />\n                    </Button>\n                  )}\n                </div>\n              )}\n\n              <div className=\"p-md pt-lg\">\n                {/* Header */}\n                <div className=\"flex items-start justify-between mb-sm\">\n                  <div className=\"flex items-center gap-sm min-w-0 flex-1\">\n                    <div className=\"p-sm bg-primary/10 rounded-lg\">\n                      <Building className=\"h-4 w-4 text-primary flex-shrink-0\" />\n                    </div>\n                    <div className=\"min-w-0 flex-1\">\n                      <h4 className=\"font-medium truncate\">{vendor.display_name}</h4>\n                      <p className=\"text-sm text-muted-foreground truncate\">{vendor.business_name}</p>\n                    </div>\n                  </div>\n                  <Badge variant={getStatusColor(vendor.status)} className=\"ml-sm\">\n                    {vendor.status}\n                  </Badge>\n                </div>\n\n                {/* Business type and category */}\n                <div className=\"flex items-center gap-sm mb-sm\">\n                  <span className={`px-sm py-xs rounded-full text-xs font-medium ${getBusinessTypeColor(vendor.business_type)}`}>\n                    {vendor.business_type}\n                  </span>\n                  {vendor.primary_category && (\n                    <span className=\"text-xs text-muted-foreground uppercase tracking-wide truncate\">\n                      {vendor.primary_category}\n                    </span>\n                  )}\n                </div>\n\n                {/* Rating */}\n                {vendor.rating && (\n                  <div className=\"mb-sm\">\n                    {renderStars(vendor.rating)}\n                  </div>\n                )}\n\n                {/* Bio/Description */}\n                {vendor.bio && (\n                  <p className=\"text-sm text-muted-foreground line-clamp-2 mb-sm\">\n                    {vendor.bio}\n                  </p>\n                )}\n\n                {/* Hourly rate */}\n                {vendor.hourly_rate && (\n                  <div className=\"flex items-center justify-between mb-sm\">\n                    <div className=\"text-lg font-semibold\">\n                      {formatCurrency(vendor.hourly_rate, vendor.currency)}/hr\n                    </div>\n                  </div>\n                )}\n\n                {/* Contact info */}\n                <div className=\"space-y-xs text-xs text-muted-foreground mb-sm\">\n                  {vendor.email && (\n                    <div className=\"flex items-center gap-xs\">\n                      <Mail className=\"h-3 w-3 flex-shrink-0\" />\n                      <span className=\"truncate\">{vendor.email}</span>\n                    </div>\n                  )}\n                  {vendor.phone && (\n                    <div className=\"flex items-center gap-xs\">\n                      <Phone className=\"h-3 w-3 flex-shrink-0\" />\n                      <span className=\"truncate\">{vendor.phone}</span>\n                    </div>\n                  )}\n                  {vendor.website && (\n                    <div className=\"flex items-center gap-xs\">\n                      <Globe className=\"h-3 w-3 flex-shrink-0\" />\n                      <span className=\"truncate\">Website</span>\n                    </div>\n                  )}\n                  {vendor.address && (\n                    <div className=\"flex items-center gap-xs\">\n                      <MapPin className=\"h-3 w-3 flex-shrink-0\" />\n                      <span className=\"truncate\">{formatAddress(vendor.address)}</span>\n                    </div>\n                  )}\n                </div>\n\n                {/* Skills */}\n                {vendor.skills && vendor.skills.length > 0 && (\n                  <div className=\"flex flex-wrap gap-xs mb-sm\">\n                    {vendor.skills.slice(0, 3).map((skill, index) => (\n                      <span\n                        key={index}\n                        className=\"px-xs py-xs bg-muted rounded text-xs\"\n                      >\n                        {skill}\n                      </span>\n                    ))}\n                    {vendor.skills.length > 3 && (\n                      <span className=\"px-xs py-xs bg-muted rounded text-xs\">\n                        +{vendor.skills.length - 3} more\n                      </span>\n                    )}\n                  </div>\n                )}\n\n                {/* Stats */}\n                {(vendor.total_projects || vendor.total_reviews) && (\n                  <div className=\"flex items-center justify-between text-xs text-muted-foreground mb-sm\">\n                    {vendor.total_projects && (\n                      <span>{vendor.total_projects} projects</span>\n                    )}\n                    {vendor.total_reviews && (\n                      <span>{vendor.total_reviews} reviews</span>\n                    )}\n                  </div>\n                )}\n\n                {/* Footer */}\n                <div className=\"flex items-center justify-between mt-md pt-sm border-t border-border\">\n                  <span className=\"text-xs text-muted-foreground\">\n                    {formatDate(vendor.created_at)}\n                  </span>\n                  <Button\n                    size=\"sm\"\n                    variant=\"ghost\"\n                    onClick={(e) => {\n                      e.stopPropagation();\n                      // Show more options menu\n                    }}\n                  >\n                    <MoreHorizontal className=\"h-3 w-3\" />\n                  </Button>\n                </div>\n              </div>\n            </Card>\n          );\n        })}\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ghxstship/apps/web/app/(app)/(shell)/procurement/vendors/views/VendorKanbanView.tsx","messages":[{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Star' is not defined.","line":72,"column":12,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":72,"endColumn":16},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Building' is not defined.","line":163,"column":32,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":163,"endColumn":40},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Eye' is not defined.","line":180,"column":36,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":180,"endColumn":39},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Edit' is not defined.","line":193,"column":36,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":193,"endColumn":40},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Mail' is not defined.","line":251,"column":34,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":251,"endColumn":38},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Phone' is not defined.","line":257,"column":34,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":257,"endColumn":39}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\nimport { User, FileText, Settings, Award, Calendar, TrendingUp, Activity, Clock, Plus, Search, Play, Trash2 } from \"lucide-react\";\nimport { useState } from 'react';\nimport { Card, Badge, Button } from '@ghxstship/ui';\nimport type { Vendor } from '../types';\nimport { formatCurrency, formatDate, getStatusColor, getBusinessTypeColor } from '../types';\n\ninterface VendorKanbanViewProps {\n  vendors: Vendor[];\n  loading?: boolean;\n  selectedVendors: string[];\n  onSelectionChange: (vendorIds: string[]) => void;\n  onVendorClick?: (vendor: Vendor) => void;\n  onEditVendor?: (vendor: Vendor) => void;\n  onDeleteVendor?: (vendor: Vendor) => void;\n  onViewVendor?: (vendor: Vendor) => void;\n  onStatusChange?: (vendor: Vendor, newStatus: string) => void;\n}\n\nconst statusColumns = [\n  { key: 'active', label: 'Active', color: 'bg-success/10 border-success/20' },\n  { key: 'pending', label: 'Pending', color: 'bg-warning/10 border-warning/20' },\n  { key: 'inactive', label: 'Inactive', color: 'bg-secondary/10 border-secondary/20' },\n  { key: 'suspended', label: 'Suspended', color: 'bg-destructive/10 border-destructive/20' },\n];\n\nexport default function VendorKanbanView({\n  vendors,\n  loading = false,\n  selectedVendors,\n  onSelectionChange,\n  onVendorClick,\n  onEditVendor,\n  onDeleteVendor,\n  onViewVendor,\n  onStatusChange,\n}: VendorKanbanViewProps) {\n  const [draggedVendor, setDraggedVendor] = useState<Vendor | null>(null);\n\n  const handleDragStart = (e: React.DragEvent, vendor: Vendor) => {\n    setDraggedVendor(vendor);\n    e.dataTransfer.effectAllowed = 'move';\n  };\n\n  const handleDragEnd = () => {\n    setDraggedVendor(null);\n  };\n\n  const handleDragOver = (e: React.DragEvent) => {\n    e.preventDefault();\n    e.dataTransfer.dropEffect = 'move';\n  };\n\n  const handleDrop = (e: React.DragEvent, status: string) => {\n    e.preventDefault();\n    if (draggedVendor && draggedVendor.status !== status) {\n      onStatusChange?.(draggedVendor, status);\n    }\n    setDraggedVendor(null);\n  };\n\n  const getVendorsByStatus = (status: string) => {\n    return vendors.filter(vendor => vendor.status === status);\n  };\n\n  const renderStars = (rating?: number) => {\n    if (!rating) return null;\n    \n    return (\n      <div className=\"flex items-center gap-xs\">\n        {[1, 2, 3, 4, 5].map((star) => (\n          <Star\n            key={star}\n            className={`h-3 w-3 ${\n              star <= rating ? 'text-warning fill-current' : 'text-muted-foreground'\n            }`}\n          />\n        ))}\n        <span className=\"text-xs text-muted-foreground ml-xs\">({rating.toFixed(1)})</span>\n      </div>\n    );\n  };\n\n  if (loading) {\n    return (\n      <div className=\"flex gap-md h-[600px]\">\n        {statusColumns.map((column) => (\n          <div key={column.key} className=\"flex-1\">\n            <Card className={`h-full ${column.color}`}>\n              <div className=\"p-md border-b border-border\">\n                <div className=\"h-6 bg-muted rounded w-20 animate-pulse\"></div>\n              </div>\n              <div className=\"p-md space-y-md\">\n                {Array.from({ length: 3 }).map((_, index) => (\n                  <Card key={index} className=\"p-md\">\n                    <div className=\"animate-pulse space-y-sm\">\n                      <div className=\"flex items-center gap-sm\">\n                        <div className=\"h-4 w-4 bg-muted rounded\"></div>\n                        <div className=\"h-4 bg-muted rounded w-3/4\"></div>\n                      </div>\n                      <div className=\"h-3 bg-muted rounded w-1/2\"></div>\n                      <div className=\"h-3 bg-muted rounded w-full\"></div>\n                      <div className=\"h-5 bg-muted rounded w-16\"></div>\n                    </div>\n                  </Card>\n                ))}\n              </div>\n            </Card>\n          </div>\n        ))}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"flex gap-md h-[600px] overflow-x-auto\">\n      {statusColumns.map((column) => {\n        const columnVendors = getVendorsByStatus(column.key);\n        \n        return (\n          <div key={column.key} className=\"flex-1 min-w-[300px]\">\n            <Card \n              className={`h-full ${column.color} flex flex-col`}\n              onDragOver={handleDragOver}\n              onDrop={(e) => handleDrop(e, column.key)}\n            >\n              {/* Column header */}\n              <div className=\"p-md border-b border-border flex-shrink-0\">\n                <div className=\"flex items-center justify-between\">\n                  <h3 className=\"font-medium\">{column.label}</h3>\n                  <Badge variant=\"secondary\">\n                    {columnVendors.length}\n                  </Badge>\n                </div>\n              </div>\n\n              {/* Column content */}\n              <div className=\"flex-1 p-md space-y-md overflow-y-auto\">\n                {columnVendors.length === 0 ? (\n                  <div className=\"text-center py-lg text-muted-foreground\">\n                    <div className=\"text-sm\">No {column.label.toLowerCase()} vendors</div>\n                  </div>\n                ) : (\n                  columnVendors.map((vendor) => {\n                    const isSelected = selectedVendors.includes(vendor.id);\n                    const isDragging = draggedVendor?.id === vendor.id;\n\n                    return (\n                      <Card\n                        key={vendor.id}\n                        className={`cursor-pointer transition-all duration-200 hover:shadow-md ${\n                          isSelected ? 'ring-2 ring-primary' : ''\n                        } ${isDragging ? 'opacity-50 rotate-2' : ''}`}\n                        draggable\n                        onDragStart={(e) => handleDragStart(e, vendor)}\n                        onDragEnd={handleDragEnd}\n                        onClick={() => onVendorClick?.(vendor)}\n                      >\n                        <div className=\"p-md\">\n                          {/* Header */}\n                          <div className=\"flex items-start justify-between mb-sm\">\n                            <div className=\"flex items-center gap-sm min-w-0 flex-1\">\n                              <Building className=\"h-4 w-4 text-muted-foreground flex-shrink-0\" />\n                              <div className=\"min-w-0 flex-1\">\n                                <h4 className=\"font-medium text-sm truncate\">{vendor.display_name}</h4>\n                                <p className=\"text-xs text-muted-foreground truncate\">{vendor.business_name}</p>\n                              </div>\n                            </div>\n                            <div className=\"flex items-center gap-xs ml-sm\">\n                              {onViewVendor && (\n                                <Button\n                                  size=\"sm\"\n                                  variant=\"ghost\"\n                                  onClick={(e) => {\n                                    e.stopPropagation();\n                                    onViewVendor(vendor);\n                                  }}\n                                  className=\"h-6 w-6 p-0\"\n                                >\n                                  <Eye className=\"h-3 w-3\" />\n                                </Button>\n                              )}\n                              {onEditVendor && (\n                                <Button\n                                  size=\"sm\"\n                                  variant=\"ghost\"\n                                  onClick={(e) => {\n                                    e.stopPropagation();\n                                    onEditVendor(vendor);\n                                  }}\n                                  className=\"h-6 w-6 p-0\"\n                                >\n                                  <Edit className=\"h-3 w-3\" />\n                                </Button>\n                              )}\n                              {onDeleteVendor && (\n                                <Button\n                                  size=\"sm\"\n                                  variant=\"ghost\"\n                                  onClick={(e) => {\n                                    e.stopPropagation();\n                                    onDeleteVendor(vendor);\n                                  }}\n                                  className=\"h-6 w-6 p-0\"\n                                >\n                                  <Trash2 className=\"h-3 w-3\" />\n                                </Button>\n                              )}\n                            </div>\n                          </div>\n\n                          {/* Business type and category */}\n                          <div className=\"flex items-center gap-sm mb-sm\">\n                            <span className={`px-sm py-xs rounded-full text-xs font-medium ${getBusinessTypeColor(vendor.business_type)}`}>\n                              {vendor.business_type}\n                            </span>\n                            {vendor.primary_category && (\n                              <span className=\"text-xs text-muted-foreground truncate\">\n                                {vendor.primary_category}\n                              </span>\n                            )}\n                          </div>\n\n                          {/* Rating */}\n                          {vendor.rating && (\n                            <div className=\"mb-sm\">\n                              {renderStars(vendor.rating)}\n                            </div>\n                          )}\n\n                          {/* Bio */}\n                          {vendor.bio && (\n                            <p className=\"text-xs text-muted-foreground line-clamp-2 mb-sm\">\n                              {vendor.bio}\n                            </p>\n                          )}\n\n                          {/* Hourly rate */}\n                          {vendor.hourly_rate && (\n                            <div className=\"flex items-center justify-between mb-sm\">\n                              <div className=\"font-semibold text-sm\">\n                                {formatCurrency(vendor.hourly_rate, vendor.currency)}/hr\n                              </div>\n                            </div>\n                          )}\n\n                          {/* Contact info */}\n                          <div className=\"space-y-xs text-xs text-muted-foreground mb-sm\">\n                            {vendor.email && (\n                              <div className=\"flex items-center gap-xs\">\n                                <Mail className=\"h-3 w-3 flex-shrink-0\" />\n                                <span className=\"truncate\">{vendor.email}</span>\n                              </div>\n                            )}\n                            {vendor.phone && (\n                              <div className=\"flex items-center gap-xs\">\n                                <Phone className=\"h-3 w-3 flex-shrink-0\" />\n                                <span className=\"truncate\">{vendor.phone}</span>\n                              </div>\n                            )}\n                          </div>\n\n                          {/* Skills */}\n                          {vendor.skills && vendor.skills.length > 0 && (\n                            <div className=\"flex flex-wrap gap-xs mb-sm\">\n                              {vendor.skills.slice(0, 2).map((skill, index) => (\n                                <span\n                                  key={index}\n                                  className=\"px-xs py-xs bg-muted rounded text-xs\"\n                                >\n                                  {skill}\n                                </span>\n                              ))}\n                              {vendor.skills.length > 2 && (\n                                <span className=\"px-xs py-xs bg-muted rounded text-xs\">\n                                  +{vendor.skills.length - 2}\n                                </span>\n                              )}\n                            </div>\n                          )}\n\n                          {/* Stats */}\n                          {(vendor.total_projects || vendor.total_reviews) && (\n                            <div className=\"flex items-center justify-between text-xs text-muted-foreground mb-sm\">\n                              {vendor.total_projects && (\n                                <span>{vendor.total_projects} projects</span>\n                              )}\n                              {vendor.total_reviews && (\n                                <span>{vendor.total_reviews} reviews</span>\n                              )}\n                            </div>\n                          )}\n\n                          {/* Footer */}\n                          <div className=\"flex items-center justify-between pt-sm border-t border-border text-xs text-muted-foreground\">\n                            <span>{formatDate(vendor.created_at)}</span>\n                            <div className=\"flex items-center gap-xs\">\n                              <div className=\"w-2 h-2 rounded-full bg-current opacity-50\"></div>\n                              <span>{vendor.id.slice(-6)}</span>\n                            </div>\n                          </div>\n                        </div>\n                      </Card>\n                    );\n                  })\n                )}\n              </div>\n            </Card>\n          </div>\n        );\n      })}\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ghxstship/apps/web/app/(app)/(shell)/profile/ProfileOptimizedClient.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'virtualizer'. Either include it or remove the dependency array.","line":70,"column":6,"nodeType":"ArrayExpression","endLine":70,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [virtualizer]","fix":{"range":[2424,2426],"text":"[virtualizer]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { User, Briefcase, Award, Heart, Globe, Shield, Activity, Clock, FileText, Phone } from \"lucide-react\";\nimport { useState, useEffect, useMemo, useCallback } from 'react';\nimport { useVirtualizer } from '@tanstack/react-virtual';\nimport { createBrowserClient } from '@/lib/supabase/client';\nimport { ModuleTemplate } from '@ghxstship/ui/core/templates/ModuleTemplate';\nimport { DataViewProvider } from '@ghxstship/ui/providers/DataViewProvider';\nimport { StateManagerProvider } from '@ghxstship/ui/providers/StateManagerProvider';\nimport { ViewSwitcher } from '@ghxstship/ui/components/DataViews/ViewSwitcher';\nimport { DataActions } from '@ghxstship/ui/components/DataViews/DataActions';\nimport { UnifiedDrawer } from '@ghxstship/ui/unified/drawers/UnifiedDrawer';\nimport { useToast } from '@ghxstship/ui/hooks/useToast';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@ghxstship/ui/components/Tabs';\nimport { Card } from '@ghxstship/ui/components/Card';\nimport { Badge } from '@ghxstship/ui/components/Badge';\nimport { Button } from '@ghxstship/ui/components/Button';\nimport { Skeleton } from '@ghxstship/ui/components/Skeleton';\nimport type { ProfileData, ProfileSection } from './types';\n\n// Optimized configuration with consolidated sections\nconst PROFILE_SECTIONS: ProfileSection[] = [\n  {\n    id: 'overview',\n    label: 'Overview',\n    icon: User,\n    component: 'OverviewSection',\n    priority: 1\n  },\n  {\n    id: 'professional',\n    label: 'Professional',\n    icon: Briefcase,\n    component: 'ProfessionalSection',\n    priority: 2,\n    subsections: ['job-history', 'certifications', 'endorsements']\n  },\n  {\n    id: 'personal',\n    label: 'Personal',\n    icon: Heart,\n    component: 'PersonalSection',\n    priority: 3,\n    subsections: ['basic', 'contact', 'emergency']\n  },\n  {\n    id: 'compliance',\n    label: 'Compliance',\n    icon: Shield,\n    component: 'ComplianceSection',\n    priority: 4,\n    subsections: ['health', 'travel', 'uniform']\n  },\n  {\n    id: 'activity',\n    label: 'Activity',\n    icon: Activity,\n    component: 'ActivitySection',\n    priority: 5,\n    subsections: ['history', 'performance']\n  }\n];\n\n// Virtual list component for performance\nconst VirtualProfileList = ({ items, height = 600 }: { items: unknown[], height?: number }) => {\n  const parentRef = useCallback((node: HTMLDivElement | null) => {\n    if (node) {\n      virtualizer.measure();\n    }\n  }, []);\n\n  const virtualizer = useVirtualizer({\n    count: items.length,\n    getScrollElement: () => parentRef.current,\n    estimateSize: () => 80,\n    overscan: 5,\n  });\n\n  return (\n    <div\n      ref={parentRef}\n      style={{ height, overflow: 'auto' }}\n      className=\"relative\"\n    >\n      <div\n        style={{\n          height: `${virtualizer.getTotalSize()}px`,\n          width: '100%',\n          position: 'relative',\n        }}\n      >\n        {virtualizer.getVirtualItems().map((virtualItem) => (\n          <div\n            key={virtualItem.key}\n            style={{\n              position: 'absolute',\n              top: 0,\n              left: 0,\n              width: '100%',\n              height: `${virtualItem.size}px`,\n              transform: `translateY(${virtualItem.start}px)`,\n            }}\n          >\n            <ProfileItemRow item={items[virtualItem.index]} />\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\n// Memoized profile item row\nconst ProfileItemRow = React.memo(({ item }: { item: any }) => (\n  <Card className=\"p-4 mb-2 hover:shadow-md transition-shadow\">\n    <div className=\"flex items-center justify-between\">\n      <div className=\"flex items-center gap-3\">\n        <div className=\"w-10 h-10 rounded-full bg-primary/10 flex items-center justify-center\">\n          {item.icon && <item.icon className=\"w-5 h-5 text-primary\" />}\n        </div>\n        <div>\n          <p className=\"font-medium\">{item.label}</p>\n          <p className=\"text-sm text-muted-foreground\">{item.value}</p>\n        </div>\n      </div>\n      {item.status && (\n        <Badge variant={item.status === 'complete' ? 'success' : 'warning'}>\n          {item.status}\n        </Badge>\n      )}\n    </div>\n  </Card>\n));\n\nProfileItemRow.displayName = 'ProfileItemRow';\n\ninterface ProfileOptimizedClientProps {\n  orgId: string;\n  userId: string;\n}\n\nexport default function ProfileOptimizedClient({ orgId, userId }: ProfileOptimizedClientProps) {\n  const [loading, setLoading] = useState(true);\n  const [profileData, setProfileData] = useState<ProfileData | null>(null);\n  const [activeSection, setActiveSection] = useState('overview');\n  const [searchQuery, setSearchQuery] = useState('');\n  const [drawerOpen, setDrawerOpen] = useState(false);\n  const [drawerMode, setDrawerMode] = useState<'view' | 'edit'>('view');\n  const { toast } = useToast();\n  const supabase = createBrowserClient();\n\n  // Optimized data fetching with pagination\n  const fetchProfileData = useCallback(async (section?: string) => {\n    try {\n      setLoading(true);\n      \n      // Use pagination for large datasets\n      const PAGE_SIZE = 50;\n      const query = supabase\n        .from('users')\n        .select(`\n          *,\n          memberships!inner(\n            organization_id,\n            role,\n            status\n          )\n        `)\n        .eq('auth_id', userId)\n        .range(0, PAGE_SIZE - 1);\n\n      if (section && section !== 'overview') {\n        // Fetch only specific section data\n        query.select(`${section}_data`);\n      }\n\n      const { data, error } = await query.single();\n\n      if (error) throw error;\n\n      setProfileData(data);\n    } catch (error) {\n      console.error('Error fetching profile:', error);\n      toast({\n        title: 'Error',\n        description: 'Failed to load profile data',\n        variant: 'destructive',\n      });\n    } finally {\n      setLoading(false);\n    }\n  }, [userId, supabase, toast]);\n\n  // Lazy load sections\n  useEffect(() => {\n    fetchProfileData(activeSection);\n  }, [activeSection, fetchProfileData]);\n\n  // Memoized filtered items\n  const filteredItems = useMemo(() => {\n    if (!profileData) return [];\n    \n    const items = Object.entries(profileData)\n      .filter(([key, value]) => {\n        if (!searchQuery) return true;\n        return key.toLowerCase().includes(searchQuery.toLowerCase()) ||\n               String(value).toLowerCase().includes(searchQuery.toLowerCase());\n      })\n      .map(([key, value]) => ({\n        id: key,\n        label: key.replace(/_/g, ' ').replace(/\\b\\w/g, l => l.toUpperCase()),\n        value: String(value),\n        icon: User,\n        status: value ? 'complete' : 'incomplete'\n      }));\n    \n    return items;\n  }, [profileData, searchQuery]);\n\n  // Module configuration for template\n  const moduleConfig = useMemo(() => ({\n    id: 'profile',\n    name: 'Profile',\n    description: 'User profile management',\n    icon: User,\n    baseRoute: '/profile',\n    tabs: PROFILE_SECTIONS.map(section => ({\n      id: section.id,\n      label: section.label,\n      icon: section.icon,\n      route: `/profile/${section.id}`,\n      component: section.component,\n    })),\n    permissions: {\n      view: ['profile:view'],\n      create: ['profile:create'],\n      update: ['profile:update'],\n      delete: ['profile:delete'],\n    },\n    features: {\n      search: true,\n      filter: true,\n      sort: true,\n      export: true,\n      import: false,\n      bulkActions: false,\n      realtime: true,\n    },\n    views: ['grid', 'list', 'kanban'],\n    defaultView: 'list',\n  }), []);\n\n  if (loading && !profileData) {\n    return (\n      <div className=\"space-y-4\">\n        {[...Array(5)].map((_, i) => (\n          <Skeleton key={i} className=\"h-20 w-full\" />\n        ))}\n      </div>\n    );\n  }\n\n  return (\n    <StateManagerProvider>\n      <DataViewProvider\n        config={{\n          module: 'profile',\n          defaultView: 'list',\n          features: moduleConfig.features,\n        }}\n      >\n        <div className=\"space-y-6\">\n          {/* Header with optimized actions */}\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h1 className=\"text-3xl font-bold\">Profile Management</h1>\n              <p className=\"text-muted-foreground\">\n                Manage your profile information and settings\n              </p>\n            </div>\n            <div className=\"flex items-center gap-2\">\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => fetchProfileData(activeSection)}\n              >\n                Refresh\n              </Button>\n              <Button\n                size=\"sm\"\n                onClick={() => {\n                  setDrawerMode('edit');\n                  setDrawerOpen(true);\n                }}\n              >\n                Edit Profile\n              </Button>\n            </div>\n          </div>\n\n          {/* Optimized tabs with lazy loading */}\n          <Tabs value={activeSection} onValueChange={setActiveSection}>\n            <TabsList className=\"grid grid-cols-5 w-full\">\n              {PROFILE_SECTIONS.map((section) => (\n                <TabsTrigger key={section.id} value={section.id}>\n                  <section.icon className=\"w-4 h-4 mr-2\" />\n                  {section.label}\n                </TabsTrigger>\n              ))}\n            </TabsList>\n\n            {PROFILE_SECTIONS.map((section) => (\n              <TabsContent key={section.id} value={section.id} className=\"mt-6\">\n                <Card className=\"p-6\">\n                  <div className=\"space-y-4\">\n                    {/* Search and filters */}\n                    <DataActions\n                      onSearch={setSearchQuery}\n                      searchPlaceholder={`Search ${section.label.toLowerCase()}...`}\n                      showViewSwitcher={false}\n                      showExport={true}\n                      showFilter={true}\n                    />\n\n                    {/* Virtual list for performance */}\n                    <VirtualProfileList \n                      items={filteredItems} \n                      height={600}\n                    />\n                  </div>\n                </Card>\n              </TabsContent>\n            ))}\n          </Tabs>\n\n          {/* Optimized drawer */}\n          <UnifiedDrawer\n            open={drawerOpen}\n            onOpenChange={setDrawerOpen}\n            title={drawerMode === 'edit' ? 'Edit Profile' : 'View Profile'}\n            size=\"lg\"\n          >\n            <div className=\"space-y-6\">\n              {/* Drawer content with lazy loading */}\n              {drawerMode === 'edit' ? (\n                <ProfileEditForm \n                  data={profileData} \n                  onSave={async (data) => {\n                    // Save logic\n                    setDrawerOpen(false);\n                    await fetchProfileData(activeSection);\n                  }}\n                />\n              ) : (\n                <ProfileViewDetails data={profileData} />\n              )}\n            </div>\n          </UnifiedDrawer>\n        </div>\n      </DataViewProvider>\n    </StateManagerProvider>\n  );\n}\n\n// Lazy loaded edit form component\nconst ProfileEditForm = React.lazy(() => import('./components/ProfileEditForm'));\n\n// Lazy loaded view details component  \nconst ProfileViewDetails = React.lazy(() => import('./components/ProfileViewDetails'));\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ghxstship/apps/web/app/(app)/(shell)/profile/basic/views/ProfileCardView.tsx","messages":[{"ruleId":"@next/next/no-img-element","severity":1,"message":"Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` or a custom image loader to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","line":74,"column":15,"nodeType":"JSXOpeningElement","endLine":78,"endColumn":17}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { User, Mail, Phone, MapPin, Briefcase, Calendar, Globe, Edit, Eye, Download } from \"lucide-react\";\nimport { \n  Card, \n  Avatar, \n  Badge, \n  Button,\n  Skeleton,\n} from '@ghxstship/ui';\nimport type { UserProfile } from '../types';\n\ninterface ProfileCardViewProps {\n  profile: UserProfile | null;\n  loading: boolean;\n  onEdit?: () => void;\n  onView?: () => void;\n  onExport?: () => void;\n  compact?: boolean;\n}\n\nexport default function ProfileCardView({\n  profile,\n  loading,\n  onEdit,\n  onView,\n  onExport,\n  compact = false,\n}: ProfileCardViewProps) {\n  if (loading) {\n    return (\n      <Card className=\"p-6\">\n        <div className=\"flex items-start gap-4\">\n          <Skeleton className=\"h-16 w-16 rounded-full\" />\n          <div className=\"flex-1 space-y-2\">\n            <Skeleton className=\"h-4 w-48\" />\n            <Skeleton className=\"h-3 w-32\" />\n            <Skeleton className=\"h-3 w-40\" />\n          </div>\n        </div>\n      </Card>\n    );\n  }\n\n  if (!profile) {\n    return (\n      <Card className=\"p-6 text-center\">\n        <User className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n        <h3 className=\"text-lg font-semibold mb-2\">No Profile Found</h3>\n        <p className=\"text-muted-foreground\">\n          Profile information is not available.\n        </p>\n      </Card>\n    );\n  }\n\n  const formatDate = (dateString?: string) => {\n    if (!dateString) return 'Not specified';\n    return new Date(dateString).toLocaleDateString();\n  };\n\n  const getCompletionColor = (percentage: number) => {\n    if (percentage >= 80) return 'text-green-600';\n    if (percentage >= 60) return 'text-yellow-600';\n    return 'text-red-600';\n  };\n\n  return (\n    <Card className=\"p-6\">\n      <div className=\"flex items-start justify-between mb-6\">\n        <div className=\"flex items-start gap-4\">\n          <Avatar className=\"h-16 w-16\">\n            {profile.avatar_url ? (\n              <img \n                src={profile.avatar_url} \n                alt=\"Profile\" \n                className=\"h-full w-full object-cover\" \n              />\n            ) : (\n              <User className=\"h-8 w-8\" />\n            )}\n          </Avatar>\n          \n          <div className=\"space-y-2\">\n            <div className=\"flex items-center gap-2\">\n              <h3 className=\"text-lg font-semibold\">\n                {profile.job_title || 'No Title'}\n              </h3>\n              <Badge variant={profile.status === 'active' ? 'default' : 'secondary'}>\n                {profile.status}\n              </Badge>\n            </div>\n            \n            <div className=\"flex items-center gap-4 text-sm text-muted-foreground\">\n              {profile.department && (\n                <div className=\"flex items-center gap-1\">\n                  <Briefcase className=\"h-4 w-4\" />\n                  <span>{profile.department}</span>\n                </div>\n              )}\n              \n              {profile.employment_type && (\n                <Badge variant=\"outline\" className=\"text-xs\">\n                  {profile.employment_type}\n                </Badge>\n              )}\n            </div>\n\n            <div className={`text-sm font-medium ${getCompletionColor(profile.profile_completion_percentage)}`}>\n              Profile {profile.profile_completion_percentage}% complete\n            </div>\n          </div>\n        </div>\n\n        <div className=\"flex items-center gap-2\">\n          {onView && (\n            <Button variant=\"ghost\" size=\"sm\" onClick={onView}>\n              <Eye className=\"h-4 w-4\" />\n            </Button>\n          )}\n          {onEdit && (\n            <Button variant=\"ghost\" size=\"sm\" onClick={onEdit}>\n              <Edit className=\"h-4 w-4\" />\n            </Button>\n          )}\n          {onExport && (\n            <Button variant=\"ghost\" size=\"sm\" onClick={onExport}>\n              <Download className=\"h-4 w-4\" />\n            </Button>\n          )}\n        </div>\n      </div>\n\n      {!compact && (\n        <div className=\"space-y-4\">\n          {/* Contact Information */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            {profile.phone_primary && (\n              <div className=\"flex items-center gap-2 text-sm\">\n                <Phone className=\"h-4 w-4 text-muted-foreground\" />\n                <span>{profile.phone_primary}</span>\n              </div>\n            )}\n            \n            {(profile.city || profile.country) && (\n              <div className=\"flex items-center gap-2 text-sm\">\n                <MapPin className=\"h-4 w-4 text-muted-foreground\" />\n                <span>\n                  {[profile.city, profile.country].filter(Boolean).join(', ')}\n                </span>\n              </div>\n            )}\n            \n            {profile.hire_date && (\n              <div className=\"flex items-center gap-2 text-sm\">\n                <Calendar className=\"h-4 w-4 text-muted-foreground\" />\n                <span>Hired {formatDate(profile.hire_date)}</span>\n              </div>\n            )}\n            \n            {profile.nationality && (\n              <div className=\"flex items-center gap-2 text-sm\">\n                <Globe className=\"h-4 w-4 text-muted-foreground\" />\n                <span>{profile.nationality}</span>\n              </div>\n            )}\n          </div>\n\n          {/* Bio */}\n          {profile.bio && (\n            <div className=\"pt-4 border-t\">\n              <p className=\"text-sm text-muted-foreground leading-relaxed\">\n                {profile.bio}\n              </p>\n            </div>\n          )}\n\n          {/* Skills and Languages */}\n          <div className=\"pt-4 border-t space-y-3\">\n            {profile.skills && profile.skills.length > 0 && (\n              <div>\n                <h4 className=\"text-sm font-medium mb-2\">Skills</h4>\n                <div className=\"flex flex-wrap gap-1\">\n                  {profile.skills.slice(0, 6).map(skill => (\n                    <Badge key={skill} variant=\"secondary\" className=\"text-xs\">\n                      {skill}\n                    </Badge>\n                  ))}\n                  {profile.skills.length > 6 && (\n                    <Badge variant=\"outline\" className=\"text-xs\">\n                      +{profile.skills.length - 6} more\n                    </Badge>\n                  )}\n                </div>\n              </div>\n            )}\n\n            {profile.languages && profile.languages.length > 0 && (\n              <div>\n                <h4 className=\"text-sm font-medium mb-2\">Languages</h4>\n                <div className=\"flex flex-wrap gap-1\">\n                  {profile.languages.map(language => (\n                    <Badge key={language} variant=\"outline\" className=\"text-xs\">\n                      {language}\n                    </Badge>\n                  ))}\n                </div>\n              </div>\n            )}\n          </div>\n\n          {/* Links */}\n          {(profile.linkedin_url || profile.website_url) && (\n            <div className=\"pt-4 border-t\">\n              <div className=\"flex gap-4\">\n                {profile.linkedin_url && (\n                  <a\n                    href={profile.linkedin_url}\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                    className=\"text-sm text-blue-600 hover:underline\"\n                  >\n                    LinkedIn\n                  </a>\n                )}\n                {profile.website_url && (\n                  <a\n                    href={profile.website_url}\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                    className=\"text-sm text-blue-600 hover:underline\"\n                  >\n                    Website\n                  </a>\n                )}\n              </div>\n            </div>\n          )}\n\n          {/* Metadata */}\n          <div className=\"pt-4 border-t text-xs text-muted-foreground\">\n            <div className=\"flex justify-between\">\n              <span>Updated: {formatDate(profile.updated_at)}</span>\n              <span>ID: {profile.employee_id || 'Not assigned'}</span>\n            </div>\n          </div>\n        </div>\n      )}\n    </Card>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ghxstship/apps/web/app/(app)/(shell)/profile/basic/views/ProfileFormView.tsx","messages":[{"ruleId":"@next/next/no-img-element","severity":1,"message":"Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` or a custom image loader to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","line":248,"column":15,"nodeType":"JSXOpeningElement","endLine":252,"endColumn":17}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { Camera, Save, User, Plus, X, Eye, EyeOff } from \"lucide-react\";\nimport { useState } from 'react';\nimport { \n  Button, \n  Input, \n  Textarea, \n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n  Card, \n  Avatar, \n  Badge,\n  Skeleton,\n} from '@ghxstship/ui';\nimport type { UserProfile, FieldConfig } from '../types';\nimport { PROFILE_FIELD_CONFIG } from '../types';\n\ninterface ProfileFormViewProps {\n  profile: UserProfile | null;\n  loading: boolean;\n  saving: boolean;\n  onSave: (data: Partial<UserProfile>) => Promise<void>;\n  onFieldVisibilityChange?: (fieldKey: string, visible: boolean) => void;\n  visibleFields?: Set<string>;\n  editableFields?: Set<string>;\n}\n\nexport default function ProfileFormView({\n  profile,\n  loading,\n  saving,\n  onSave,\n  onFieldVisibilityChange,\n  visibleFields = new Set(PROFILE_FIELD_CONFIG.map(f => f.key)),\n  editableFields = new Set(PROFILE_FIELD_CONFIG.map(f => f.key)),\n}: ProfileFormViewProps) {\n  const [formData, setFormData] = useState<Partial<UserProfile>>(profile || {});\n  const [newTag, setNewTag] = useState('');\n  const [activeTagField, setActiveTagField] = useState<string | null>(null);\n\n  const handleInputChange = (field: keyof UserProfile, value: unknown) => {\n    setFormData(prev => ({ ...prev, [field]: value }));\n  };\n\n  const handleTagAdd = (field: 'languages' | 'skills', tag: string) => {\n    if (!tag.trim()) return;\n    \n    const currentTags = (formData[field] as string[]) || [];\n    if (!currentTags.includes(tag.trim())) {\n      handleInputChange(field, [...currentTags, tag.trim()]);\n    }\n    setNewTag('');\n    setActiveTagField(null);\n  };\n\n  const handleTagRemove = (field: 'languages' | 'skills', tag: string) => {\n    const currentTags = (formData[field] as string[]) || [];\n    handleInputChange(field, currentTags.filter(t => t !== tag));\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    await onSave(formData);\n  };\n\n  const renderField = (fieldConfig: FieldConfig) => {\n    if (!visibleFields.has(fieldConfig.key)) return null;\n    \n    const isEditable = editableFields.has(fieldConfig.key);\n    const value = formData[fieldConfig.key];\n\n    const fieldWrapper = (content: React.ReactNode) => (\n      <div key={fieldConfig.key} className=\"space-y-2\">\n        <div className=\"flex items-center justify-between\">\n          <label className=\"text-sm font-medium\">\n            {fieldConfig.label}\n            {fieldConfig.required && <span className=\"text-red-500 ml-1\">*</span>}\n          </label>\n          {onFieldVisibilityChange && (\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={() => onFieldVisibilityChange(fieldConfig.key, false)}\n              className=\"h-6 w-6 p-0\"\n            >\n              <EyeOff className=\"h-3 w-3\" />\n            </Button>\n          )}\n        </div>\n        {content}\n      </div>\n    );\n\n    if (!isEditable) {\n      return fieldWrapper(\n        <div className=\"px-3 py-2 bg-muted/50 rounded-md text-sm\">\n          {Array.isArray(value) ? value.join(', ') : value || 'Not specified'}\n        </div>\n      );\n    }\n\n    switch (fieldConfig.type) {\n      case 'select':\n        return fieldWrapper(\n          <Select\n            value={value as string || ''}\n            onValueChange={(newValue) => handleInputChange(fieldConfig.key, newValue)}\n          >\n            <SelectTrigger>\n              <SelectValue placeholder={`Select ${fieldConfig.label.toLowerCase()}`} />\n            </SelectTrigger>\n            <SelectContent>\n              {fieldConfig.options?.map(option => (\n                <SelectItem key={option.value} value={option.value}>\n                  {option.label}\n                </SelectItem>\n              ))}\n            </SelectContent>\n          </Select>\n        );\n\n      case 'textarea':\n        return fieldWrapper(\n          <Textarea\n            value={value as string || ''}\n            onChange={(e) => handleInputChange(fieldConfig.key, e.target.value)}\n            placeholder={fieldConfig.placeholder}\n            maxLength={fieldConfig.validation?.maxLength}\n            rows={3}\n          />\n        );\n\n      case 'tags':\n        const tags = (value as string[]) || [];\n        return fieldWrapper(\n          <div className=\"space-y-2\">\n            <div className=\"flex flex-wrap gap-2\">\n              {tags.map(tag => (\n                <Badge\n                  key={tag}\n                  variant=\"secondary\"\n                  className=\"cursor-pointer hover:bg-destructive hover:text-destructive-foreground\"\n                  onClick={() => handleTagRemove(fieldConfig.key as 'languages' | 'skills', tag)}\n                >\n                  {tag}\n                  <X className=\"ml-1 h-3 w-3\" />\n                </Badge>\n              ))}\n            </div>\n            {activeTagField === fieldConfig.key ? (\n              <div className=\"flex gap-2\">\n                <Input\n                  value={newTag}\n                  onChange={(e) => setNewTag(e.target.value)}\n                  placeholder={`Add ${fieldConfig.label.toLowerCase()}`}\n                  onKeyPress={(e) => {\n                    if (e.key === 'Enter') {\n                      e.preventDefault();\n                      handleTagAdd(fieldConfig.key as 'languages' | 'skills', newTag);\n                    }\n                  }}\n                  autoFocus\n                />\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  onClick={() => handleTagAdd(fieldConfig.key as 'languages' | 'skills', newTag)}\n                >\n                  Add\n                </Button>\n                <Button\n                  type=\"button\"\n                  variant=\"ghost\"\n                  onClick={() => {\n                    setActiveTagField(null);\n                    setNewTag('');\n                  }}\n                >\n                  Cancel\n                </Button>\n              </div>\n            ) : (\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => setActiveTagField(fieldConfig.key)}\n                className=\"w-fit\"\n              >\n                <Plus className=\"mr-1 h-3 w-3\" />\n                Add {fieldConfig.label.slice(0, -1)}\n              </Button>\n            )}\n          </div>\n        );\n\n      default:\n        return fieldWrapper(\n          <Input\n            type={fieldConfig.type}\n            value={value as string || ''}\n            onChange={(e) => handleInputChange(fieldConfig.key, e.target.value)}\n            placeholder={fieldConfig.placeholder}\n            minLength={fieldConfig.validation?.minLength}\n            maxLength={fieldConfig.validation?.maxLength}\n            pattern={fieldConfig.validation?.pattern}\n          />\n        );\n    }\n  };\n\n  if (loading) {\n    return (\n      <div className=\"space-y-6\">\n        <div className=\"flex flex-col items-center space-y-4\">\n          <Skeleton className=\"h-24 w-24 rounded-full\" />\n          <Skeleton className=\"h-4 w-32\" />\n        </div>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n          {Array.from({ length: 8 }).map((_, i) => (\n            <div key={i} className=\"space-y-2\">\n              <Skeleton className=\"h-4 w-24\" />\n              <Skeleton className=\"h-10 w-full\" />\n            </div>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  const groupedFields = PROFILE_FIELD_CONFIG.reduce((acc, field) => {\n    if (!acc[field.section]) acc[field.section] = [];\n    acc[field.section].push(field);\n    return acc;\n  }, {} as Record<string, FieldConfig[]>);\n\n  return (\n    <form onSubmit={handleSubmit} className=\"space-y-8\">\n      {/* Avatar Section */}\n      <div className=\"flex flex-col items-center space-y-4\">\n        <div className=\"relative\">\n          <Avatar className=\"h-24 w-24\">\n            {formData.avatar_url ? (\n              <img \n                src={formData.avatar_url} \n                alt=\"Profile\" \n                className=\"h-full w-full object-cover\" \n              />\n            ) : (\n              <User className=\"h-12 w-12\" />\n            )}\n          </Avatar>\n          <Button\n            type=\"button\"\n            variant=\"outline\"\n            size=\"sm\"\n            className=\"absolute -bottom-2 -right-2 rounded-full h-8 w-8 p-0\"\n          >\n            <Camera className=\"h-4 w-4\" />\n          </Button>\n        </div>\n        \n        {profile && (\n          <div className=\"text-center space-y-2\">\n            <Badge variant={profile.status === 'active' ? 'default' : 'secondary'}>\n              {profile.status}\n            </Badge>\n            <div className=\"text-sm text-muted-foreground\">\n              Profile {profile.profile_completion_percentage}% complete\n            </div>\n          </div>\n        )}\n      </div>\n\n      {/* Form Sections */}\n      {Object.entries(groupedFields).map(([section, fields]) => (\n        <Card key={section} className=\"p-6\">\n          <h3 className=\"text-lg font-semibold mb-4 capitalize\">\n            {section === 'basic' ? 'Basic Information' : \n             section === 'contact' ? 'Contact Information' : \n             section === 'professional' ? 'Professional Information' : \n             'Metadata'}\n          </h3>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            {fields.map(renderField)}\n          </div>\n        </Card>\n      ))}\n\n      {/* Hidden Fields */}\n      {onFieldVisibilityChange && (\n        <Card className=\"p-6\">\n          <h3 className=\"text-lg font-semibold mb-4\">Hidden Fields</h3>\n          <div className=\"flex flex-wrap gap-2\">\n            {PROFILE_FIELD_CONFIG\n              .filter(field => !visibleFields.has(field.key))\n              .map(field => (\n                <Button\n                  key={field.key}\n                  type=\"button\"\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={() => onFieldVisibilityChange(field.key, true)}\n                  className=\"h-8\"\n                >\n                  <Eye className=\"mr-1 h-3 w-3\" />\n                  {field.label}\n                </Button>\n              ))}\n          </div>\n        </Card>\n      )}\n\n      {/* Save Button */}\n      <div className=\"flex justify-end\">\n        <Button type=\"submit\" disabled={saving}>\n          <Save className=\"mr-2 h-4 w-4\" />\n          {saving ? 'Saving...' : 'Save Changes'}\n        </Button>\n      </div>\n    </form>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ghxstship/apps/web/app/(app)/(shell)/profile/basic/views/ProfileTableView.tsx","messages":[{"ruleId":"@next/next/no-img-element","severity":1,"message":"Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` or a custom image loader to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","line":212,"column":27,"nodeType":"JSXOpeningElement","endLine":216,"endColumn":29}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { User, Edit, Eye, Download, ArrowUpDown, MoreHorizontal } from \"lucide-react\";\nimport { useMemo } from 'react';\nimport { \n  Card, \n  Avatar, \n  Badge, \n  Button,\n  Skeleton,\n} from '@ghxstship/ui';\nimport type { UserProfile, ProfileSort } from '../types';\n\ninterface ProfileTableViewProps {\n  profiles: UserProfile[];\n  loading: boolean;\n  selectedItems: string[];\n  onSelectItem: (id: string, selected: boolean) => void;\n  onSelectAll: (ids: string[], selected: boolean) => void;\n  onSort?: (sort: ProfileSort) => void;\n  onEdit?: (profile: UserProfile) => void;\n  onView?: (profile: UserProfile) => void;\n  onExport?: (profile: UserProfile) => void;\n  currentSort?: ProfileSort;\n}\n\nexport default function ProfileTableView({\n  profiles,\n  loading,\n  selectedItems,\n  onSelectItem,\n  onSelectAll,\n  onSort,\n  onEdit,\n  onView,\n  onExport,\n  currentSort,\n}: ProfileTableViewProps) {\n  const allSelected = profiles.length > 0 && profiles.every(profile => selectedItems.includes(profile.id));\n  const someSelected = profiles.some(profile => selectedItems.includes(profile.id));\n\n  const handleSelectAll = () => {\n    const profileIds = profiles.map(profile => profile.id);\n    onSelectAll(profileIds, !allSelected);\n  };\n\n  const handleSort = (field: keyof UserProfile) => {\n    if (!onSort) return;\n    \n    const direction = currentSort?.field === field && currentSort?.direction === 'asc' ? 'desc' : 'asc';\n    onSort({ field, direction });\n  };\n\n  const getSortIcon = (field: keyof UserProfile) => {\n    if (currentSort?.field !== field) return <ArrowUpDown className=\"h-3 w-3 opacity-50\" />;\n    return <ArrowUpDown className={`h-3 w-3 ${currentSort.direction === 'desc' ? 'rotate-180' : ''}`} />;\n  };\n\n  const formatDate = (dateString?: string) => {\n    if (!dateString) return 'Not specified';\n    return new Date(dateString).toLocaleDateString();\n  };\n\n  const getCompletionColor = (percentage: number) => {\n    if (percentage >= 80) return 'text-green-600';\n    if (percentage >= 60) return 'text-yellow-600';\n    return 'text-red-600';\n  };\n\n  if (loading) {\n    return (\n      <Card className=\"p-6\">\n        <div className=\"space-y-4\">\n          <Skeleton className=\"h-8 w-full\" />\n          {Array.from({ length: 5 }).map((_, i) => (\n            <div key={i} className=\"flex items-center gap-4\">\n              <Skeleton className=\"h-4 w-4\" />\n              <Skeleton className=\"h-8 w-8 rounded-full\" />\n              <Skeleton className=\"h-4 flex-1\" />\n              <Skeleton className=\"h-4 w-20\" />\n              <Skeleton className=\"h-4 w-16\" />\n            </div>\n          ))}\n        </div>\n      </Card>\n    );\n  }\n\n  if (profiles.length === 0) {\n    return (\n      <Card className=\"p-12 text-center\">\n        <User className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n        <h3 className=\"text-lg font-semibold mb-2\">No Profiles Found</h3>\n        <p className=\"text-muted-foreground\">\n          No profiles match the current filters.\n        </p>\n      </Card>\n    );\n  }\n\n  return (\n    <Card className=\"p-6\">\n      <div className=\"overflow-x-auto\">\n        <table className=\"w-full\">\n          <thead>\n            <tr className=\"border-b\">\n              <th className=\"text-left p-2\">\n                <input\n                  type=\"checkbox\"\n                  checked={allSelected}\n                  ref={(input) => {\n                    if (input) input.indeterminate = someSelected && !allSelected;\n                  }}\n                  onChange={handleSelectAll}\n                  className=\"h-4 w-4 rounded border-border\"\n                />\n              </th>\n              <th className=\"text-left p-2\">Profile</th>\n              <th className=\"text-left p-2\">\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={() => handleSort('job_title')}\n                  className=\"h-auto p-0 font-semibold\"\n                >\n                  Position\n                  {getSortIcon('job_title')}\n                </Button>\n              </th>\n              <th className=\"text-left p-2\">\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={() => handleSort('department')}\n                  className=\"h-auto p-0 font-semibold\"\n                >\n                  Department\n                  {getSortIcon('department')}\n                </Button>\n              </th>\n              <th className=\"text-left p-2\">\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={() => handleSort('employment_type')}\n                  className=\"h-auto p-0 font-semibold\"\n                >\n                  Type\n                  {getSortIcon('employment_type')}\n                </Button>\n              </th>\n              <th className=\"text-left p-2\">\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={() => handleSort('profile_completion_percentage')}\n                  className=\"h-auto p-0 font-semibold\"\n                >\n                  Completion\n                  {getSortIcon('profile_completion_percentage')}\n                </Button>\n              </th>\n              <th className=\"text-left p-2\">\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={() => handleSort('status')}\n                  className=\"h-auto p-0 font-semibold\"\n                >\n                  Status\n                  {getSortIcon('status')}\n                </Button>\n              </th>\n              <th className=\"text-left p-2\">\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={() => handleSort('updated_at')}\n                  className=\"h-auto p-0 font-semibold\"\n                >\n                  Updated\n                  {getSortIcon('updated_at')}\n                </Button>\n              </th>\n              <th className=\"text-left p-2\">Actions</th>\n            </tr>\n          </thead>\n          <tbody>\n            {profiles.map((profile) => {\n              const isSelected = selectedItems.includes(profile.id);\n              \n              return (\n                <tr \n                  key={profile.id} \n                  className={`border-b hover:bg-muted/50 ${\n                    isSelected ? 'bg-muted/30' : ''\n                  }`}\n                >\n                  <td className=\"p-2\">\n                    <input\n                      type=\"checkbox\"\n                      checked={isSelected}\n                      onChange={(e) => onSelectItem(profile.id, e.target.checked)}\n                      className=\"h-4 w-4 rounded border-border\"\n                    />\n                  </td>\n                  \n                  <td className=\"p-2\">\n                    <div className=\"flex items-center gap-3\">\n                      <Avatar className=\"h-8 w-8\">\n                        {profile.avatar_url ? (\n                          <img \n                            src={profile.avatar_url} \n                            alt=\"Profile\" \n                            className=\"h-full w-full object-cover\" \n                          />\n                        ) : (\n                          <User className=\"h-4 w-4\" />\n                        )}\n                      </Avatar>\n                      <div>\n                        <div className=\"font-medium text-sm\">\n                          {profile.employee_id || 'No ID'}\n                        </div>\n                        <div className=\"text-xs text-muted-foreground\">\n                          {profile.nationality || 'Not specified'}\n                        </div>\n                      </div>\n                    </div>\n                  </td>\n                  \n                  <td className=\"p-2\">\n                    <div className=\"text-sm\">\n                      {profile.job_title || 'No Title'}\n                    </div>\n                  </td>\n                  \n                  <td className=\"p-2\">\n                    <div className=\"text-sm\">\n                      {profile.department || 'Unassigned'}\n                    </div>\n                  </td>\n                  \n                  <td className=\"p-2\">\n                    {profile.employment_type && (\n                      <Badge variant=\"outline\" className=\"text-xs\">\n                        {profile.employment_type}\n                      </Badge>\n                    )}\n                  </td>\n                  \n                  <td className=\"p-2\">\n                    <div className={`text-sm font-medium ${getCompletionColor(profile.profile_completion_percentage)}`}>\n                      {profile.profile_completion_percentage}%\n                    </div>\n                    <div className=\"w-16 bg-muted rounded-full h-1 mt-1\">\n                      <div\n                        className=\"bg-primary h-1 rounded-full transition-all\"\n                        style={{ width: `${profile.profile_completion_percentage}%` }}\n                      />\n                    </div>\n                  </td>\n                  \n                  <td className=\"p-2\">\n                    <Badge variant={profile.status === 'active' ? 'default' : 'secondary'}>\n                      {profile.status}\n                    </Badge>\n                  </td>\n                  \n                  <td className=\"p-2\">\n                    <div className=\"text-sm text-muted-foreground\">\n                      {formatDate(profile.updated_at)}\n                    </div>\n                  </td>\n                  \n                  <td className=\"p-2\">\n                    <div className=\"flex items-center gap-1\">\n                      {onView && (\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => onView(profile)}\n                          className=\"h-6 w-6 p-0\"\n                        >\n                          <Eye className=\"h-3 w-3\" />\n                        </Button>\n                      )}\n                      {onEdit && (\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => onEdit(profile)}\n                          className=\"h-6 w-6 p-0\"\n                        >\n                          <Edit className=\"h-3 w-3\" />\n                        </Button>\n                      )}\n                      {onExport && (\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => onExport(profile)}\n                          className=\"h-6 w-6 p-0\"\n                        >\n                          <Download className=\"h-3 w-3\" />\n                        </Button>\n                      )}\n                    </div>\n                  </td>\n                </tr>\n              );\n            })}\n          </tbody>\n        </table>\n      </div>\n    </Card>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ghxstship/apps/web/app/(app)/(shell)/profile/certifications/CertificationsClient-backup.tsx","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: '}' expected.","line":540,"column":9,"nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { Award, Plus, Search, Filter, Download, RefreshCw, Settings, List, Grid3X3, Table, BarChart3, Save, X, Calendar, ExternalLink, Trash2 } from \"lucide-react\";\nimport { useState, useEffect, useCallback, useMemo, type ChangeEvent, type FormEvent } from 'react';\nimport { useTranslations } from 'next-intl';\nimport { createBrowserClient } from '@ghxstship/auth';\nimport { \n  Button, \n  Input,\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n  Card, \n  Badge,\n  Textarea,\n  UnifiedInput,\n} from '@ghxstship/ui';\n\nimport type { \n  Certification as CertificationType, \n  CertificationFilters, \n  CertificationStats, \n  CertificationAnalytics, \n  ViewType,\n  CertificationSort,\n  CertificationFormData as FormDataType,\n} from './types';\nimport { \n  VIEW_CONFIG, \n  QUICK_FILTERS, \n  createEmptyCertification,\n  createEmptyCertificationStats, \n  createEmptyCertificationAnalytics,\n  validateCertificationForm,\n} from './types';\n\nimport CertificationListView from './views/CertificationListView';\nimport CertificationGridView from './views/CertificationGridView';\nimport CertificationTableView from './views/CertificationTableView';\nimport CertificationAnalyticsView from './views/CertificationAnalyticsView';\n\ninterface CertificationsClientProps {\n  orgId: string;\n  userId: string;\n}\n\nconst viewIcons: Record<ViewType, React.ComponentType<{ className?: string }>> = {\n  list: List,\n  grid: Grid3X3,\n  table: Table,\n  analytics: BarChart3,\n};\n\nexport default function CertificationsClient({ orgId, userId }: CertificationsClientProps) {\n  const t = useTranslations('profile');\n  const supabase = useMemo(() => createBrowserClient(), []);\n  \n  const [certifications, setCertifications] = useState<CertificationType[]>([]);\n  const [stats, setStats] = useState<CertificationStats>(createEmptyCertificationStats());\n  const [analytics, setAnalytics] = useState<CertificationAnalytics>(createEmptyCertificationAnalytics());\n  const [loading, setLoading] = useState(true);\n  const [saving, setSaving] = useState(false);\n  const [analyticsLoading, setAnalyticsLoading] = useState(false);\n  const [view, setView] = useState<ViewType>('list');\n  const [filters, setFilters] = useState<CertificationFilters>({});\n  const [searchQuery, setSearchQuery] = useState('');\n  const [selectedItems, setSelectedItems] = useState<string[]>([]);\n  const [sort, setSort] = useState<CertificationSort>({ field: 'created_at', direction: 'desc' });\n  const [total, setTotal] = useState(0);\n  const [showAddForm, setShowAddForm] = useState(false);\n  const [editingCertification, setEditingCertification] = useState<CertificationType | null>(null);\n  const [formData, setFormData] = useState<FormDataType>(() => createEmptyCertification() as FormDataType);\n  const [formErrors, setFormErrors] = useState<Record<string, string>>({});\n\n  const fetchCertifications = useCallback(async () => {\n    try {\n      setLoading(true);\n      const params = new URLSearchParams();\n      \n      params.append('user_id', userId);\n      if (filters.status && filters.status !== 'all') {\n        params.append('status', filters.status);\n      }\n      if (filters.issuing_organization) params.append('issuing_organization', filters.issuing_organization);\n      if (filters.expiry_status && filters.expiry_status !== 'all') {\n        params.append('expiry_status', filters.expiry_status);\n      }\n      if (filters.search || searchQuery) params.append('search', filters.search || searchQuery);\n      if (filters.date_from) params.append('date_from', filters.date_from);\n      if (filters.date_to) params.append('date_to', filters.date_to);\n\n      const response = await fetch(`/api/v1/profile/certifications?${params.toString()}`);\n      if (!response.ok) throw new Error('Failed to fetch certifications');\n\n      const data = await response.json();\n      setCertifications(data.certifications || []);\n      setStats(data.stats || createEmptyCertificationStats());\n      setTotal(data.total || 0);\n    } catch (error) {\n      console.error('Error fetching certifications:', error);\n      setCertifications([]);\n      setStats(createEmptyCertificationStats());\n    } finally {\n      setLoading(false);\n    }\n  }, [userId, filters, searchQuery]);\n\n  const fetchAnalytics = useCallback(async () => {\n    try {\n      setAnalyticsLoading(true);\n      const params = new URLSearchParams();\n      params.append('user_id', userId);\n      params.append('period', '30d');\n      params.append('granularity', 'day');\n\n      const response = await fetch(`/api/v1/profile/certifications/analytics?${params.toString()}`);\n      if (!response.ok) throw new Error('Failed to fetch analytics');\n\n      const data = await response.json();\n      setAnalytics(data);\n    } catch (error) {\n      console.error('Error fetching analytics:', error);\n      setAnalytics(createEmptyCertificationAnalytics());\n    } finally {\n      setAnalyticsLoading(false);\n    }\n  }, [userId]);\n\n  useEffect(() => {\n    fetchCertifications();\n  }, [fetchCertifications]);\n\n  useEffect(() => {\n    if (view === 'analytics') {\n      fetchAnalytics();\n    }\n  }, [view, fetchAnalytics]);\n\n  const handleSave = async (certificationData: FormDataType) => {\n    const errors = validateCertificationForm(certificationData);\n    if (Object.keys(errors).length > 0) {\n      setFormErrors(errors);\n      return;\n    }\n\n    try {\n      setSaving(true);\n      const url = editingCertification \n        ? `/api/v1/profile/certifications?user_id=${userId}&certification_id=${editingCertification.id}`\n        : `/api/v1/profile/certifications?user_id=${userId}`;\n      \n      const method = editingCertification ? 'PUT' : 'POST';\n      \n      const response = await fetch(url, {\n        method,\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(certificationData),\n      });\n\n      if (!response.ok) throw new Error('Failed to save certification');\n\n      setShowAddForm(false);\n      setEditingCertification(null);\n      setFormData(createEmptyCertification());\n      setFormErrors({});\n      await fetchCertifications();\n    } catch (error) {\n      console.error('Error saving certification:', error);\n    } finally {\n      setSaving(false);\n    }\n  };\n\n  const handleDelete = async (certification: CertificationType) => {\n    if (!confirm('Are you sure you want to delete this certification?')) return;\n\n    try {\n      const response = await fetch(`/api/v1/profile/certifications?user_id=${userId}&certification_id=${certification.id}`, {\n        method: 'DELETE',\n      });\n\n      if (!response.ok) throw new Error('Failed to delete certification');\n\n      await fetchCertifications();\n    } catch (error) {\n      console.error('Error deleting certification:', error);\n    }\n  };\n\n  const handleSelectItem = (id: string, selected: boolean) => {\n    setSelectedItems(prev => {\n      if (selected) {\n        return prev.includes(id) ? prev : [...prev, id];\n      }\n      return prev.filter(itemId => itemId !== id);\n    });\n  };\n\n  const handleSelectAll = (ids: string[], selected: boolean) => {\n    setSelectedItems(selected ? Array.from(new Set([...selectedItems, ...ids])) : []);\n  };\n\n  const handleExport = (certification?: CertificationType) => {\n    const certsToExport = certification ? [certification] : \n      selectedItems.length > 0 ? certifications.filter(c => selectedItems.includes(c.id)) : certifications;\n\n    const csvRows = [\n      ['Name', 'Organization', 'Number', 'Issue Date', 'Expiry Date', 'Status', 'Verification URL'],\n      ...certsToExport.map(c => [\n        c.name,\n        c.issuing_organization,\n        c.certification_number || '',\n        c.issue_date || '',\n        c.expiry_date || '',\n        c.status,\n        c.verification_url || '',\n      ])\n    ];\n\n    const csvContent = csvRows.map(row => row.map(cell => `\"${cell}\"`).join(',')).join('\\n');\n    const blob = new Blob([csvContent], { type: 'text/csv' });\n    const url = URL.createObjectURL(blob);\n    const link = document.createElement('a');\n    link.href = url;\n    link.download = `certifications-${new Date().toISOString().split('T')[0]}.csv`;\n    link.click();\n    URL.revokeObjectURL(url);\n  };\n\n  const handleRefresh = () => {\n    fetchCertifications();\n    if (view === 'analytics') {\n      fetchAnalytics();\n    }\n  };\n\n  const handleEdit = (certification: CertificationType) => {\n    setEditingCertification(certification);\n    setFormData({\n      name: certification.name || '',\n      issuing_organization: certification.issuing_organization || '',\n      certification_number: certification.certification_number || '',\n      issue_date: certification.issue_date || '',\n      expiry_date: certification.expiry_date || '',\n      verification_url: certification.verification_url || '',\n      attachment_url: certification.attachment_url || '',\n      notes: certification.notes || '',\n      status: certification.status,\n    });\n    setShowAddForm(true);\n  };\n\n  const filterValue = filters.status ?? 'all';\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex flex-col gap-4 lg:flex-row lg:items-center lg:justify-between\">\n        <div>\n          <h1 className=\"text-2xl font-bold\">Certifications</h1>\n          <p className=\"text-muted-foreground\">\n            Manage your professional certifications and track expiry dates\n          </p>\n        </div>\n        <div className=\"flex items-center gap-2\">\n          <Button variant=\"outline\" size=\"sm\" onClick={handleRefresh}>\n            <RefreshCw className=\"mr-2 h-4 w-4\" />\n            Refresh\n          </Button>\n          <Button variant=\"outline\" size=\"sm\" onClick={() => handleExport()}>\n            <Download className=\"mr-2 h-4 w-4\" />\n            Export\n          </Button>\n          <Button onClick={() => setShowAddForm(true)}>\n            <Plus className=\"mr-2 h-4 w-4\" />\n            Add Certification\n          </Button>\n          <div className=\"flex items-center rounded-lg border p-1\">\n            {(Object.keys(VIEW_CONFIG) as ViewType[]).map(option => {\n              const Icon = viewIcons[option];\n              return (\n                <Button\n                  key={option}\n                  variant={view === option ? 'default' : 'ghost'}\n                  size=\"sm\"\n                  onClick={() => setView(option)}\n                  className=\"h-8 w-8 p-0\"\n                >\n                  <Icon className=\"h-4 w-4\" />\n                </Button>\n              );\n            })}\n          </div>\n        </div>\n      </div>\n\n      {/* Filters */}\n      <Card className=\"p-4\">\n        <div className=\"flex flex-col gap-4 lg:flex-row lg:items-center lg:justify-between\">\n          <div className=\"flex flex-1 items-center gap-4\">\n            <div className=\"relative flex-1 max-w-sm\">\n              <Search className=\"absolute left-3 top-1/2 h-4 w-4 -translate-y-1/2 text-muted-foreground\" />\n              <Input\n                placeholder=\"Search certifications...\"\n                value={searchQuery}\n                onChange={event => setSearchQuery(event.target.value)}\n                className=\"pl-9\"\n              />\n            </div>\n\n            <Select\n              value={filterValue}\n              onValueChange={value =>\n                setFilters(prev => ({ ...prev, status: value === 'all' ? undefined : value as unknown }))\n              }\n            >\n              <SelectTrigger className=\"w-48\">\n                <SelectValue placeholder=\"Filter by status\" />\n              </SelectTrigger>\n              <SelectContent>\n                {QUICK_FILTERS.map(option => (\n                  <SelectItem key={option.value} value={option.value}>\n                    {option.label}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n\n          <div className=\"flex items-center gap-2\">\n            {selectedItems.length > 0 && (\n              <div className=\"flex items-center gap-2 rounded-lg border bg-muted/50 px-3 py-2 text-sm\">\n                <span>{selectedItems.length} selected</span>\n                <div className=\"flex items-center gap-1\">\n                  <Button\n                    size=\"sm\"\n                    variant=\"outline\"\n                    onClick={() => handleExport()}\n                  >\n                    Export\n                  </Button>\n                  <Button\n                    size=\"sm\"\n                    variant=\"ghost\"\n                    onClick={() => setSelectedItems([])}\n                  >\n                    Clear\n                  </Button>\n                </div>\n              </div>\n            )}\n            \n            <Badge variant=\"secondary\">\n              {total} total certifications\n            </Badge>\n          </div>\n        </div>\n      </Card>\n\n      {/* Add/Edit Form Modal */}\n      {showAddForm && (\n        <Card className=\"p-6\">\n          <div className=\"flex items-center justify-between mb-4\">\n            <h3 className=\"text-lg font-semibold\">\n              {editingCertification ? 'Edit Certification' : 'Add New Certification'}\n            </h3>\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={() => {\n                setShowAddForm(false);\n                setEditingCertification(null);\n                setFormData(createEmptyCertification());\n                setFormErrors({});\n              }}\n            >\n              <X className=\"h-4 w-4\" />\n            </Button>\n          </div>\n\n          <form\n            onSubmit={(e) => {\n              e.preventDefault();\n              handleSave(formData);\n            }}\n            className=\"space-y-4\"\n          >\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <UnifiedInput\n                label=\"Certification Name *\"\n                value={formData.name || ''}\n                onChange={(e: ChangeEvent<HTMLInputElement>) => \n                  setFormData(prev => ({ ...prev, name: e.target.value }))\n                }\n                error={formErrors.name}\n                placeholder=\"AWS Solutions Architect\"\n              />\n\n              <UnifiedInput\n                label=\"Issuing Organization *\"\n                value={formData.issuing_organization || ''}\n                onChange={(e: ChangeEvent<HTMLInputElement>) => \n                  setFormData(prev => ({ ...prev, issuing_organization: e.target.value }))\n                }\n                error={formErrors.issuing_organization}\n                placeholder=\"Amazon Web Services\"\n              />\n\n              <UnifiedInput\n                label=\"Certification Number\"\n                value={formData.certification_number || ''}\n                onChange={(e: ChangeEvent<HTMLInputElement>) => \n                  setFormData(prev => ({ ...prev, certification_number: e.target.value }))\n                }\n                placeholder=\"AWS-SAA-123456\"\n              />\n\n              <UnifiedInput\n                label=\"Issue Date\"\n                type=\"date\"\n                value={formData.issue_date || ''}\n                onChange={(e: ChangeEvent<HTMLInputElement>) => \n                  setFormData(prev => ({ ...prev, issue_date: e.target.value }))\n                }\n              />\n\n              <UnifiedInput\n                label=\"Expiry Date\"\n                type=\"date\"\n                value={formData.expiry_date || ''}\n                onChange={(e: ChangeEvent<HTMLInputElement>) => \n                  setFormData(prev => ({ ...prev, expiry_date: e.target.value }))\n                }\n                error={formErrors.expiry_date}\n              />\n\n              <UnifiedInput\n                label=\"Verification URL\"\n                value={formData.verification_url || ''}\n                onChange={(e: ChangeEvent<HTMLInputElement>) => \n                  setFormData(prev => ({ ...prev, verification_url: e.target.value }))\n                }\n                error={formErrors.verification_url}\n                placeholder=\"https://verify.aws.com/...\"\n              />\n\n              <UnifiedInput\n                label=\"Attachment URL\"\n                value={formData.attachment_url || ''}\n                onChange={(e: ChangeEvent<HTMLInputElement>) => \n                  setFormData(prev => ({ ...prev, attachment_url: e.target.value }))\n                }\n                error={formErrors.attachment_url}\n                placeholder=\"https://example.com/cert.pdf\"\n              />\n            </div>\n\n            <Textarea\n              placeholder=\"Additional notes about this certification...\"\n              value={formData.notes || ''}\n              onChange={(e: ChangeEvent<HTMLTextAreaElement>) => \n                setFormData(prev => ({ ...prev, notes: e.target.value }))\n              }\n              rows={3}\n            />\n\n            <div className=\"flex gap-2\">\n              <Button type=\"submit\" disabled={saving}>\n                <Save className=\"mr-2 h-4 w-4\" />\n                {saving ? 'Saving...' : editingCertification ? 'Update' : 'Add'} Certification\n              </Button>\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={() => {\n                  setShowAddForm(false);\n                  setEditingCertification(null);\n                  setFormData(createEmptyCertification() as FormDataType);\n                  setFormErrors({});\n                }}\n              >\n                Cancel\n              </Button>\n            </div>\n          </form>\n        </Card>\n      )}\n\n      {/* Content */}\n      <div className=\"min-h-[400px]\">\n        {view === 'list' && (\n          <CertificationListView\n            certifications={certifications}\n            loading={loading}\n            selectedItems={selectedItems}\n            onSelectItem={handleSelectItem}\n            onSelectAll={handleSelectAll}\n            onEdit={handleEdit}\n            onDelete={handleDelete}\n            onExport={handleExport}\n          />\n        )}\n\n        {view === 'grid' && (\n          <CertificationGridView\n            certifications={certifications}\n            loading={loading}\n            selectedItems={selectedItems}\n            onSelectItem={handleSelectItem}\n            onEdit={handleEdit}\n            onDelete={handleDelete}\n            onExport={handleExport}\n          />\n        )}\n\n        {view === 'table' && (\n          <CertificationTableView\n            certifications={certifications}\n            loading={loading}\n            selectedItems={selectedItems}\n            onSelectItem={handleSelectItem}\n            onSelectAll={handleSelectAll}\n            onSort={setSort}\n            onEdit={handleEdit}\n            onDelete={handleDelete}\n            onExport={handleExport}\n            currentSort={sort}\n          />\n        )}\n\n        {view === 'analytics' && (\n          <CertificationAnalyticsView\n            stats={stats}\n            analytics={analytics}\n            loading={loading}\n            analyticsLoading={analyticsLoading}\n          />\n        );\n    }\n\n    setError(null);\n    return true;\n  }, [formData, analytics, analyticsLoading, loading, stats]);\n\n  const handleAdd = useCallback(\n    async (event: FormEvent<HTMLFormElement>) => {\n      event.preventDefault();\n\n      if (!validateForm()) {\n        return;\n      }\n\n      const trimmedName = formData.name.trim();\n      const trimmedIssuer = formData.issuingOrganization.trim();\n      const trimmedNumber = formData.certificationNumber.trim();\n      const trimmedVerificationUrl = formData.verificationUrl.trim();\n      const trimmedAttachmentUrl = formData.attachmentUrl.trim();\n      const trimmedNotes = formData.notes.trim();\n\n      try {\n        setIsSubmitting(true);\n\n        const { data: userData, error: userError } = await supabase\n          .from('users')\n          .select('id')\n          .eq('auth_id', userId)\n          .single();\n\n        if (userError) {\n          throw userError;\n        }\n\n        if (!userData) {\n          throw new Error('User not found');\n        }\n\n        const { error: insertError } = await supabase.from('user_certifications').insert({\n          user_id: userData.id,\n          organization_id: orgId,\n          name: trimmedName,\n          issuing_organization: trimmedIssuer,\n          certification_number: trimmedNumber || undefined,\n          issue_date: formData.issueDate || undefined,\n          expiry_date: formData.expiryDate || undefined,\n          verification_url: trimmedVerificationUrl || undefined,\n          attachment_url: trimmedAttachmentUrl || undefined,\n          notes: trimmedNotes || undefined,\n          status: 'active',\n        });\n\n        if (insertError) {\n          throw insertError;\n        }\n\n        resetFormState();\n        setShowAddForm(false);\n        await loadCertifications();\n      } catch (submitError) {\n        const message = submitError instanceof Error ? submitError.message : 'Unknown error';\n        console.error('Error adding certification:', submitError);\n        setError(message);\n      } finally {\n        setIsSubmitting(false);\n      }\n    },\n    [formData, loadCertifications, orgId, resetFormState, supabase, userId, validateForm]\n  );\n\n  const isSubmitDisabled = useMemo(() => {\n    if (isSubmitting) {\n      return true;\n    }\n\n    if (!formData.name.trim() || !formData.issuingOrganization.trim()) {\n      return true;\n    }\n\n    const trimmedVerificationUrl = formData.verificationUrl.trim();\n    if (trimmedVerificationUrl) {\n      try {\n        new URL(trimmedVerificationUrl);\n      } catch {\n        return true;\n      }\n    }\n\n    const trimmedAttachmentUrl = formData.attachmentUrl.trim();\n    if (trimmedAttachmentUrl) {\n      try {\n        new URL(trimmedAttachmentUrl);\n      } catch {\n        return true;\n      }\n    }\n\n    if (formData.issueDate.trim() && formData.expiryDate.trim() && formData.expiryDate < formData.issueDate) {\n      return true;\n    }\n\n    return false;\n  }, [formData.attachmentUrl, formData.expiryDate, formData.issuingOrganization, formData.issueDate, formData.name, formData.verificationUrl, isSubmitting]);\n\n  const getStatusColor = (status: string, expiryDate?: string) => {\n    if (status === 'expired') return 'destructive';\n    if (expiryDate) {\n      const expiry = new Date(expiryDate);\n      const now = new Date();\n      const thirtyDaysFromNow = new Date();\n      thirtyDaysFromNow.setDate(now.getDate() + 30);\n      \n      if (expiry < now) return 'destructive';\n      if (expiry <= thirtyDaysFromNow) return 'warning';\n    }\n    return 'default';\n  };\n\n  const getStatusText = (status: string, expiryDate?: string) => {\n    if (status === 'expired') return 'Expired';\n    if (expiryDate) {\n      const expiry = new Date(expiryDate);\n      const now = new Date();\n      const thirtyDaysFromNow = new Date();\n      thirtyDaysFromNow.setDate(now.getDate() + 30);\n      \n      if (expiry < now) return 'Expired';\n      if (expiry <= thirtyDaysFromNow) return 'Expiring Soon';\n    }\n    return 'Active';\n  };\n\n  if (loading) {\n    return (\n      <div className=\"stack-md\">\n        <div className=\"animate-pulse stack-md\">\n          <div className=\"h-4 bg-secondary rounded w-3/4\"></div>\n          <div className=\"h-4 bg-secondary rounded w-1/2\"></div>\n          <div className=\"h-4 bg-secondary rounded w-2/3\"></div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"stack-lg\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center gap-sm\">\n          <Award className=\"h-5 w-5\" />\n          <h3 className=\"text-body text-heading-4\">Certifications</h3>\n        </div>\n        <Button onClick={() => setShowAddForm(true)}>\n          <Plus className=\"h-4 w-4 mr-sm\" />\n          Add Certification\n        </Button>\n      </div>\n\n      {/* Add Form */}\n      {showAddForm && (\n        <Card>\n          <div className=\"p-md\">\n            <h4 className=\"form-label mb-md\">Add New Certification</h4>\n            <form className=\"stack-md\" onSubmit={handleAdd}>\n              {error ? <div className=\"text-body-sm color-destructive\">{error}</div> : null}\n\n              <div className=\"grid grid-cols-1 gap-md md:grid-cols-2\">\n                <UnifiedInput\n                  id=\"name\"\n                  name=\"name\"\n                  label=\"Certification Name *\"\n                  placeholder=\"AWS Solutions Architect\"\n                  value={formData.name}\n                  onChange={handleInputChange}\n                  error={fieldErrors.name}\n                  required\n                />\n\n                <UnifiedInput\n                  id=\"issuingOrganization\"\n                  name=\"issuingOrganization\"\n                  label=\"Issuing Organization *\"\n                  placeholder=\"Amazon Web Services\"\n                  value={formData.issuingOrganization}\n                  onChange={handleInputChange}\n                  error={fieldErrors.issuingOrganization}\n                  required\n                />\n\n                <UnifiedInput\n                  id=\"certificationNumber\"\n                  name=\"certificationNumber\"\n                  label=\"Certification Number\"\n                  placeholder=\"AWS-SAA-123456\"\n                  value={formData.certificationNumber}\n                  onChange={handleInputChange}\n                />\n\n                <UnifiedInput\n                  id=\"issueDate\"\n                  name=\"issueDate\"\n                  label=\"Issue Date\"\n                  type=\"date\"\n                  value={formData.issueDate}\n                  onChange={handleInputChange}\n                />\n\n                <UnifiedInput\n                  id=\"expiryDate\"\n                  name=\"expiryDate\"\n                  label=\"Expiry Date\"\n                  type=\"date\"\n                  value={formData.expiryDate}\n                  onChange={handleInputChange}\n                  error={fieldErrors.expiryDate}\n                />\n\n                <UnifiedInput\n                  id=\"verificationUrl\"\n                  name=\"verificationUrl\"\n                  label=\"Verification URL\"\n                  placeholder=\"https://verify.aws.com/...\"\n                  value={formData.verificationUrl}\n                  onChange={handleInputChange}\n                  error={fieldErrors.verificationUrl}\n                />\n\n                <UnifiedInput\n                  id=\"attachmentUrl\"\n                  name=\"attachmentUrl\"\n                  label=\"Attachment URL\"\n                  placeholder=\"https://example.com/cert.pdf\"\n                  value={formData.attachmentUrl}\n                  onChange={handleInputChange}\n                  error={fieldErrors.attachmentUrl}\n                />\n              </div>\n\n              <Textarea\n                id=\"notes\"\n                name=\"notes\"\n                label=\"Notes\"\n                placeholder=\"Additional notes about this certification...\"\n                value={formData.notes}\n                onChange={handleTextareaChange}\n                rows={3}\n              />\n\n              <div className=\"flex gap-sm\">\n                <Button type=\"submit\" disabled={isSubmitDisabled}>\n                  <Save className=\"h-4 w-4 mr-sm\" />\n                  {isSubmitting ? 'Adding...' : 'Add Certification'}\n                </Button>\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  onClick={() => {\n                    resetFormState();\n                    setShowAddForm(false);\n                  }}\n                  disabled={isSubmitting}\n                >\n                  Cancel\n                </Button>\n              </div>\n            </form>\n          </div>\n        </Card>\n      )}\n\n      {/* Certifications List */}\n      <div className=\"stack-md\">\n        {certifications.length === 0 ? (\n          <Card>\n            <div className=\"p-xl text-center color-muted\">\n              <Award className=\"h-12 w-12 mx-auto mb-md opacity-50\" />\n              <p>No certifications added yet.</p>\n              <p className=\"text-body-sm\">Add your professional certifications to showcase your expertise.</p>\n            </div>\n          </Card>\n        ) : (\n          certifications.map((cert: unknown) => (\n            <Card key={cert.id}>\n              <div className=\"p-md\">\n                <div className=\"flex items-start justify-between\">\n                  <div className=\"flex-1\">\n                    <div className=\"flex items-center gap-sm mb-sm\">\n                      <h4 className=\"form-label\">{cert.name}</h4>\n                      <Badge variant={getStatusColor(cert.status, cert.expiry_date)}>\n                        {getStatusText(cert.status, cert.expiry_date)}\n                      </Badge>\n                    </div>\n                    \n                    <p className=\"text-body-sm color-muted mb-sm\">\n                      Issued by {cert.issuing_organization}\n                    </p>\n                    \n                    {cert.certification_number && (\n                      <p className=\"text-body-sm\">\n                        <span className=\"form-label\">Number:</span> {cert.certification_number}\n                      </p>\n                    )}\n                    \n                    <div className=\"flex items-center gap-md text-body-sm color-muted mt-sm\">\n                      {cert.issue_date && (\n                        <div className=\"flex items-center gap-xs\">\n                          <Calendar className=\"h-3 w-3\" />\n                          Issued: {new Date(cert.issue_date).toLocaleDateString()}\n                        </div>\n                      )}\n                      {cert.expiry_date && (\n                        <div className=\"flex items-center gap-xs\">\n                          <Calendar className=\"h-3 w-3\" />\n                          Expires: {new Date(cert.expiry_date).toLocaleDateString()}\n                        </div>\n                      )}\n                    </div>\n                    \n                    {cert.notes && (\n                      <p className=\"text-body-sm mt-sm color-muted\">{cert.notes}</p>\n                    )}\n                  </div>\n                  \n                  <div className=\"flex items-center gap-sm\">\n                    {cert.verification_url && (\n                      <Button\n                       \n                        variant=\"outline\"\n                        onClick={() => window.open(cert.verification_url, '_blank')}\n                      >\n                        <ExternalLink className=\"h-3 w-3\" />\n                      </Button>\n                    )}\n                    <Button\n                     \n                      variant=\"outline\"\n                      onClick={() => handleDelete(cert.id)}\n                    >\n                      <Trash2 className=\"h-3 w-3\" />\n                    </Button>\n                  </div>\n                </div>\n              </div>\n            </Card>\n          ))\n        )}\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ghxstship/apps/web/app/(app)/(shell)/profile/contact/ContactInfoClient.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadProfile'. Either include it or remove the dependency array.","line":56,"column":6,"nodeType":"ArrayExpression","endLine":56,"endColumn":21,"suggestions":[{"desc":"Update the dependencies array to be: [loadProfile, orgId, userId]","fix":{"range":[1679,1694],"text":"[loadProfile, orgId, userId]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\n\nimport { Save, Phone, MapPin } from \"lucide-react\";\nimport { useCallback, useEffect, useMemo, useState, type ChangeEvent, type FormEvent } from 'react';\nimport { createBrowserClient } from '@ghxstship/auth';\nimport { Button, UnifiedInput, Card } from '@ghxstship/ui';\n\ninterface UserProfile {\n  id: string;\n  phone_primary?: string;\n  phone_secondary?: string;\n  address_line1?: string;\n  address_line2?: string;\n  city?: string;\n  state_province?: string;\n  postal_code?: string;\n  country?: string;\n}\n\ninterface ContactFormData {\n  phonePrimary: string;\n  phoneSecondary: string;\n  addressLine1: string;\n  addressLine2: string;\n  city: string;\n  stateProvince: string;\n  postalCode: string;\n  country: string;\n}\n\nconst createInitialFormData = (): ContactFormData => ({\n  phonePrimary: '',\n  phoneSecondary: '',\n  addressLine1: '',\n  addressLine2: '',\n  city: '',\n  stateProvince: '',\n  postalCode: '',\n  country: '',\n});\n\nexport default function ContactInfoClient({ orgId, userId }: { orgId: string; userId: string }) {\n  const supabase = useMemo(() => createBrowserClient(), []);\n\n  const [profile, setProfile] = useState<UserProfile | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [formData, setFormData] = useState<ContactFormData>(() => createInitialFormData());\n  const [initialFormData, setInitialFormData] = useState<ContactFormData>(() => createInitialFormData());\n  const [fieldErrors, setFieldErrors] = useState<Partial<Record<keyof ContactFormData, string>>>({});\n  const [error, setError] = useState<string | null>(null);\n\n  useEffect(() => {\n    loadProfile();\n  }, [orgId, userId]);\n\n  const loadProfile = async () => {\n    try {\n      setLoading(true);\n      \n      const { data: userData } = await supabase\n        .from('users')\n        .select('id')\n        .eq('auth_id', userId)\n        .single();\n\n      if (userData) {\n        const { data: profileData } = await supabase\n          .from('user_profiles')\n          .select('*')\n          .eq('user_id', userData.id)\n          .eq('organization_id', orgId)\n          .single();\n\n        if (profileData) {\n          setProfile(profileData);\n          const mappedData: ContactFormData = {\n            phonePrimary: profileData.phone_primary || '',\n            phoneSecondary: profileData.phone_secondary || '',\n            addressLine1: profileData.address_line1 || '',\n            addressLine2: profileData.address_line2 || '',\n            city: profileData.city || '',\n            stateProvince: profileData.state_province || '',\n            postalCode: profileData.postal_code || '',\n            country: profileData.country || '',\n          };\n          setFormData(mappedData);\n          setInitialFormData(mappedData);\n        }\n      }\n    } catch (error) {\n      console.error('Error loading profile:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const updateForm = useCallback(\n    <Key extends keyof ContactFormData>(field: Key, value: ContactFormData[Key]) => {\n      setFormData(prev => ({ ...prev, [field]: value }));\n      setFieldErrors(prev => {\n        if (!prev[field]) {\n          return prev;\n        }\n        const next = { ...prev };\n        delete next[field];\n        return next;\n      });\n    },\n    []\n  );\n\n  const handleInputChange = useCallback(\n    (event: ChangeEvent<HTMLInputElement>) => {\n      const { name, value } = event.target;\n      updateForm(name as keyof ContactFormData, value as ContactFormData[keyof ContactFormData]);\n    },\n    [updateForm]\n  );\n\n  const validateForm = useCallback(() => {\n    const errors: Partial<Record<keyof ContactFormData, string>> = {};\n\n    const trimmedPrimary = formData.phonePrimary.trim();\n    if (!trimmedPrimary) {\n      errors.phonePrimary = 'Primary phone is required.';\n    }\n\n    if (formData.postalCode.trim() && formData.postalCode.trim().length < 3) {\n      errors.postalCode = 'Postal code looks too short.';\n    }\n\n    setFieldErrors(errors);\n\n    if (Object.keys(errors).length > 0) {\n      setError('Please resolve the highlighted fields.');\n      return false;\n    }\n\n    setError(null);\n    return true;\n  }, [formData]);\n\n  const isDirty = useMemo(() => {\n    return JSON.stringify(formData) !== JSON.stringify(initialFormData);\n  }, [formData, initialFormData]);\n\n  const handleSave = useCallback(\n    async (event: FormEvent<HTMLFormElement>) => {\n      event.preventDefault();\n\n      if (!profile) {\n        return;\n      }\n\n      if (!validateForm()) {\n        return;\n      }\n\n      const trimmedForm: ContactFormData = {\n        phonePrimary: formData.phonePrimary.trim(),\n        phoneSecondary: formData.phoneSecondary.trim(),\n        addressLine1: formData.addressLine1.trim(),\n        addressLine2: formData.addressLine2.trim(),\n        city: formData.city.trim(),\n        stateProvince: formData.stateProvince.trim(),\n        postalCode: formData.postalCode.trim(),\n        country: formData.country.trim(),\n      };\n\n      try {\n        setIsSubmitting(true);\n\n        const { error: updateError } = await supabase\n          .from('user_profiles')\n          .update({\n            phone_primary: trimmedForm.phonePrimary || null,\n            phone_secondary: trimmedForm.phoneSecondary || null,\n            address_line1: trimmedForm.addressLine1 || null,\n            address_line2: trimmedForm.addressLine2 || null,\n            city: trimmedForm.city || null,\n            state_province: trimmedForm.stateProvince || null,\n            postal_code: trimmedForm.postalCode || null,\n            country: trimmedForm.country || null,\n            updated_at: new Date().toISOString(),\n          })\n          .eq('id', profile.id);\n\n        if (updateError) {\n          throw updateError;\n        }\n\n        setInitialFormData(trimmedForm);\n        setFormData(trimmedForm);\n        setError(null);\n      } catch (submitError) {\n        const message = submitError instanceof Error ? submitError.message : 'Unknown error';\n        console.error('Error saving contact info:', submitError);\n        setError(message);\n      } finally {\n        setIsSubmitting(false);\n      }\n    },\n    [formData, profile, supabase, validateForm]\n  );\n\n  const isSubmitDisabled = useMemo(() => {\n    if (isSubmitting) {\n      return true;\n    }\n\n    if (!isDirty) {\n      return true;\n    }\n\n    if (!formData.phonePrimary.trim()) {\n      return true;\n    }\n\n    if (formData.postalCode.trim() && formData.postalCode.trim().length < 3) {\n      return true;\n    }\n\n    return false;\n  }, [formData.phonePrimary, formData.postalCode, isDirty, isSubmitting]);\n\n  if (loading) {\n    return (\n      <div className=\"stack-lg\">\n        <div className=\"animate-pulse stack-md\">\n          <div className=\"h-4 bg-secondary rounded w-3/4\"></div>\n          <div className=\"h-4 bg-secondary rounded w-1/2\"></div>\n          <div className=\"h-4 bg-secondary rounded w-2/3\"></div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <form className=\"stack-lg\" onSubmit={handleSave}>\n      {error ? <div className=\"text-body-sm color-destructive\">{error}</div> : null}\n\n      {/* Phone Numbers */}\n      <Card>\n        <div className=\"p-md\">\n          <div className=\"flex items-center gap-sm mb-md\">\n            <Phone className=\"h-5 w-5\" />\n            <h3 className=\"text-body text-heading-4\">Phone Numbers</h3>\n          </div>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-md\">\n            <div className=\"stack-sm\">\n              <label className=\"text-body-sm form-label\">Primary Phone</label>\n              <UnifiedInput\n                id=\"phonePrimary\"\n                name=\"phonePrimary\"\n                value={formData.phonePrimary}\n                onChange={handleInputChange}\n                placeholder=\"+1 (555) 123-4567\"\n                error={fieldErrors.phonePrimary}\n                required\n              />\n            </div>\n            \n            <div className=\"stack-sm\">\n              <label className=\"text-body-sm form-label\">Secondary Phone</label>\n              <UnifiedInput\n                id=\"phoneSecondary\"\n                name=\"phoneSecondary\"\n                value={formData.phoneSecondary}\n                onChange={handleInputChange}\n                placeholder=\"+1 (555) 987-6543\"\n              />\n            </div>\n          </div>\n        </div>\n      </Card>\n\n      {/* Address */}\n      <Card>\n        <div className=\"p-md\">\n          <div className=\"flex items-center gap-sm mb-md\">\n            <MapPin className=\"h-5 w-5\" />\n            <h3 className=\"text-body text-heading-4\">Address</h3>\n          </div>\n          \n          <div className=\"stack-md\">\n            <div className=\"stack-sm\">\n              <label className=\"text-body-sm form-label\">Address Line 1</label>\n              <UnifiedInput\n                id=\"addressLine1\"\n                name=\"addressLine1\"\n                value={formData.addressLine1}\n                onChange={handleInputChange}\n                placeholder=\"123 Main Street\"\n              />\n            </div>\n            \n            <div className=\"stack-sm\">\n              <label className=\"text-body-sm form-label\">Address Line 2</label>\n              <UnifiedInput\n                id=\"addressLine2\"\n                name=\"addressLine2\"\n                value={formData.addressLine2}\n                onChange={handleInputChange}\n                placeholder=\"Apt 4B, Suite 200\"\n              />\n            </div>\n            \n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-md\">\n              <div className=\"stack-sm\">\n                <label className=\"text-body-sm form-label\">City</label>\n                <UnifiedInput\n                  id=\"city\"\n                  name=\"city\"\n                  value={formData.city}\n                  onChange={handleInputChange}\n                  placeholder=\"San Francisco\"\n                />\n              </div>\n              \n              <div className=\"stack-sm\">\n                <label className=\"text-body-sm form-label\">State/Province</label>\n                <UnifiedInput\n                  id=\"stateProvince\"\n                  name=\"stateProvince\"\n                  value={formData.stateProvince}\n                  onChange={handleInputChange}\n                  placeholder=\"California\"\n                />\n              </div>\n              \n              <div className=\"stack-sm\">\n                <label className=\"text-body-sm form-label\">Postal Code</label>\n                <UnifiedInput\n                  id=\"postalCode\"\n                  name=\"postalCode\"\n                  value={formData.postalCode}\n                  onChange={handleInputChange}\n                  placeholder=\"94102\"\n                  error={fieldErrors.postalCode}\n                />\n              </div>\n            </div>\n            \n            <div className=\"stack-sm\">\n              <label className=\"text-body-sm form-label\">Country</label>\n              <UnifiedInput\n                id=\"country\"\n                name=\"country\"\n                value={formData.country}\n                onChange={handleInputChange}\n                placeholder=\"United States\"\n              />\n            </div>\n          </div>\n        </div>\n      </Card>\n\n      {/* Save Button */}\n      <div className=\"flex justify-end\">\n        <Button type=\"submit\" disabled={isSubmitDisabled}>\n          <Save className=\"h-4 w-4 mr-sm\" />\n          {isSubmitting ? 'Saving...' : 'Save Changes'}\n        </Button>\n      </div>\n    </form>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ghxstship/apps/web/app/(app)/(shell)/profile/contact/views/ContactListView.tsx","messages":[{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Filter' is not defined.","line":97,"column":16,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":97,"endColumn":22},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Download' is not defined.","line":105,"column":18,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":105,"endColumn":26},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Phone' is not defined.","line":214,"column":26,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":214,"endColumn":31},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'MapPin' is not defined.","line":220,"column":26,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":220,"endColumn":32},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'ShieldCheck' is not defined.","line":231,"column":28,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":231,"endColumn":39}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\nimport { User, FileText, Settings, Award, Calendar, TrendingUp, Activity, Clock, Plus, Search, Play, Trash2 } from \"lucide-react\";\nimport { useMemo, type ChangeEvent } from 'react';\nimport { Card, Badge, Button, Checkbox, Input, Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@ghxstship/ui';\nimport type { ContactInfo, ContactFilters, ContactSort } from '../types';\nimport { formatPhoneNumber } from '../types';\n\ninterface ContactListViewProps {\n  contacts: ContactInfo[];\n  loading: boolean;\n  selectedItems: string[];\n  filters: ContactFilters;\n  sort: ContactSort;\n  onSelectItem: (id: string, selected: boolean) => void;\n  onSelectAll: (ids: string[], selected: boolean) => void;\n  onChangeFilters: (filters: Partial<ContactFilters>) => void;\n  onChangeSort: (sort: ContactSort) => void;\n  onExport: (contact?: ContactInfo) => void;\n  onViewContact?: (contact: ContactInfo) => void;\n}\n\nconst verificationBadges: Record<string, { label: string; variant: 'default' | 'outline' | 'destructive' | 'secondary' }> = {\n  verified: { label: 'Verified', variant: 'default' },\n  pending: { label: 'Pending Verification', variant: 'secondary' },\n  unverified: { label: 'Unverified', variant: 'destructive' },\n};\n\nexport default function ContactListView({\n  contacts,\n  loading,\n  selectedItems,\n  filters,\n  sort,\n  onSelectItem,\n  onSelectAll,\n  onChangeFilters,\n  onChangeSort,\n  onExport,\n  onViewContact,\n}: ContactListViewProps) {\n  const allSelected = contacts.length > 0 && contacts.every(contact => selectedItems.includes(contact.id));\n  const someSelected = contacts.some(contact => selectedItems.includes(contact.id));\n\n  const sortedContacts = useMemo(() => {\n    const sorted = [...contacts];\n    sorted.sort((a, b) => {\n      const aValue = (a[sort.field] || '').toString().toLowerCase();\n      const bValue = (b[sort.field] || '').toString().toLowerCase();\n      if (aValue < bValue) return sort.direction === 'asc' ? -1 : 1;\n      if (aValue > bValue) return sort.direction === 'asc' ? 1 : -1;\n      return 0;\n    });\n    return sorted;\n  }, [contacts, sort]);\n\n  const handleSelectAll = (event: ChangeEvent<HTMLInputElement>) => {\n    const checked = event.target.checked;\n    onSelectAll(contacts.map(contact => contact.id), checked);\n  };\n\n  const handleSort = (field: keyof ContactInfo) => {\n    const direction = sort.field === field && sort.direction === 'asc' ? 'desc' : 'asc';\n    onChangeSort({ field, direction });\n  };\n\n  if (loading) {\n    return (\n      <Card className=\"p-6 space-y-4\">\n        <div className=\"animate-pulse space-y-2\">\n          <div className=\"h-4 bg-muted rounded w-1/3\"></div>\n          <div className=\"h-4 bg-muted rounded w-1/2\"></div>\n        </div>\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n          {Array.from({ length: 6 }).map((_, i) => (\n            <div key={i} className=\"h-16 bg-muted rounded animate-pulse\"></div>\n          ))}\n        </div>\n      </Card>\n    );\n  }\n\n  return (\n    <div className=\"space-y-4\">\n      <Card className=\"p-4 space-y-4\">\n        <div className=\"flex flex-col lg:flex-row lg:items-center lg:justify-between gap-4\">\n          <div className=\"flex flex-1 items-center gap-4\">\n            <div className=\"relative flex-1 max-w-lg\">\n              <Search className=\"absolute left-3 top-1/2 h-4 w-4 -translate-y-1/2 text-muted-foreground\" />\n              <Input\n                placeholder=\"Search contacts by phone, address, or emergency contact...\"\n                value={filters.search || ''}\n                onChange={(event) => onChangeFilters({ search: event.target.value })}\n                className=\"pl-9\"\n              />\n            </div>\n            <Button variant=\"outline\" size=\"sm\" className=\"flex items-center gap-2\">\n              <Filter className=\"h-4 w-4\" />\n              Filters\n            </Button>\n          </div>\n\n          <div className=\"flex items-center gap-2\">\n            {selectedItems.length > 0 && (\n              <Button variant=\"outline\" size=\"sm\" onClick={() => onExport()}>\n                <Download className=\"mr-2 h-4 w-4\" />\n                Export Selected\n              </Button>\n            )}\n            <Badge variant=\"secondary\">\n              {selectedItems.length > 0\n                ? `${selectedItems.length} selected`\n                : `${contacts.length} contacts`}\n            </Badge>\n          </div>\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n          <Select\n            value={filters.verification_status || 'all'}\n            onValueChange={(value) => onChangeFilters({ verification_status: value as ContactFilters['verification_status'] })}\n          >\n            <SelectTrigger>\n              <SelectValue placeholder=\"Verification status\" />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"all\">All Verification Status</SelectItem>\n              <SelectItem value=\"verified\">Verified</SelectItem>\n              <SelectItem value=\"pending\">Pending</SelectItem>\n              <SelectItem value=\"unverified\">Unverified</SelectItem>\n            </SelectContent>\n          </Select>\n\n          <Select\n            value={filters.preferred_contact_method || 'all'}\n            onValueChange={(value) => onChangeFilters({ preferred_contact_method: value as ContactFilters['preferred_contact_method'] })}\n          >\n            <SelectTrigger>\n              <SelectValue placeholder=\"Preferred contact method\" />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"all\">All Contact Methods</SelectItem>\n              <SelectItem value=\"email\">Email</SelectItem>\n              <SelectItem value=\"phone\">Phone</SelectItem>\n              <SelectItem value=\"sms\">SMS</SelectItem>\n              <SelectItem value=\"mail\">Mail</SelectItem>\n            </SelectContent>\n          </Select>\n\n          <Select\n            value={filters.has_emergency_contact ? 'true' : 'false'}\n            onValueChange={(value) => onChangeFilters({ has_emergency_contact: value === 'true' })}\n          >\n            <SelectTrigger>\n              <SelectValue placeholder=\"Emergency contact filter\" />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"false\">All Contacts</SelectItem>\n              <SelectItem value=\"true\">With Emergency Contact</SelectItem>\n            </SelectContent>\n          </Select>\n        </div>\n      </Card>\n\n      <Card className=\"overflow-hidden\">\n        <table className=\"w-full text-sm\">\n          <thead className=\"bg-muted/50\">\n            <tr className=\"text-left text-xs uppercase tracking-wide text-muted-foreground\">\n              <th className=\"p-3 w-10\">\n                <Checkbox\n                  checked={allSelected}\n                  indeterminate={someSelected && !allSelected}\n                  onChange={handleSelectAll}\n                />\n              </th>\n              <th className=\"p-3 cursor-pointer\" onClick={() => handleSort('phone_primary')}>\n                Primary Phone\n              </th>\n              <th className=\"p-3 cursor-pointer\" onClick={() => handleSort('address_line1')}>\n                Address\n              </th>\n              <th className=\"p-3 cursor-pointer\" onClick={() => handleSort('verification_status')}>\n                Verification\n              </th>\n              <th className=\"p-3\">Emergency Contact</th>\n              <th className=\"p-3 cursor-pointer\" onClick={() => handleSort('preferred_contact_method')}>\n                Preferred Method\n              </th>\n              <th className=\"p-3\">Actions</th>\n            </tr>\n          </thead>\n          <tbody>\n            {sortedContacts.length === 0 ? (\n              <tr>\n                <td colSpan={7} className=\"p-8 text-center text-muted-foreground\">\n                  No contacts match the current filters.\n                </td>\n              </tr>\n            ) : (\n              sortedContacts.map(contact => {\n                const isSelected = selectedItems.includes(contact.id);\n                const verificationBadge = verificationBadges[contact.verification_status || 'unverified'];\n                return (\n                  <tr key={contact.id} className=\"border-t border-border/60 hover:bg-muted/40\">\n                    <td className=\"p-3\">\n                      <Checkbox\n                        checked={isSelected}\n                        onChange={(event) =>\n                          onSelectItem(contact.id, event.target.checked)\n                        }\n                      />\n                    </td>\n                    <td className=\"p-3\">\n                      <div className=\"flex items-center gap-2\">\n                        <Phone className=\"h-4 w-4 text-muted-foreground\" />\n                        <span>{contact.phone_primary ? formatPhoneNumber(contact.phone_primary) : '—'}</span>\n                      </div>\n                    </td>\n                    <td className=\"p-3\">\n                      <div className=\"flex items-center gap-2 text-muted-foreground\">\n                        <MapPin className=\"h-4 w-4\" />\n                        <span>\n                          {contact.address_line1\n                            ? `${contact.address_line1}, ${contact.city || ''} ${contact.state_province || ''}`\n                            : 'No address'}\n                        </span>\n                      </div>\n                    </td>\n                    <td className=\"p-3\">\n                      <Badge variant={verificationBadge.variant}>\n                        <div className=\"flex items-center gap-1\">\n                          <ShieldCheck className=\"h-4 w-4\" />\n                          {verificationBadge.label}\n                        </div>\n                      </Badge>\n                    </td>\n                    <td className=\"p-3 text-muted-foreground\">\n                      {contact.emergency_contact_name || '—'}\n                    </td>\n                    <td className=\"p-3 capitalize text-muted-foreground\">\n                      {contact.preferred_contact_method || 'email'}\n                    </td>\n                    <td className=\"p-3\">\n                      <div className=\"flex items-center gap-2\">\n                        {onViewContact && (\n                          <Button variant=\"ghost\" size=\"sm\" onClick={() => onViewContact(contact)}>\n                            View\n                          </Button>\n                        )}\n                        <Button variant=\"outline\" size=\"sm\" onClick={() => onExport(contact)}>\n                          Export\n                        </Button>\n                      </div>\n                    </td>\n                  </tr>\n                );\n              })\n            )}\n          </tbody>\n        </table>\n      </Card>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ghxstship/apps/web/app/(app)/(shell)/profile/drawers/BulkActionsDrawer.tsx","messages":[{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":246,"column":84,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[7835,7973],"text":"\n                        Deactivated profiles will lose access to the system and won&apos;t appear in active user lists.\n                      "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[7835,7973],"text":"\n                        Deactivated profiles will lose access to the system and won&lsquo;t appear in active user lists.\n                      "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[7835,7973],"text":"\n                        Deactivated profiles will lose access to the system and won&#39;t appear in active user lists.\n                      "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[7835,7973],"text":"\n                        Deactivated profiles will lose access to the system and won&rsquo;t appear in active user lists.\n                      "},"desc":"Replace with `&rsquo;`."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { Users, UserCheck, UserX, Trash2, AlertTriangle, CheckCircle, XCircle } from \"lucide-react\";\nimport { useState } from 'react';\nimport {\n  UniversalDrawer,\n  Button,\n  Card,\n  Badge,\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n  Label,\n  Checkbox,\n  useToast,\n  Alert,\n  AlertDescription,\n} from '@ghxstship/ui';\n\nimport type { UserProfile, BulkActionConfig } from '../types';\n\nconst BULK_ACTIONS: BulkActionConfig[] = [\n  {\n    action: 'activate',\n    label: 'Activate Profiles',\n    description: 'Set selected profiles to active status',\n    confirmationRequired: false,\n    variant: 'default',\n  },\n  {\n    action: 'deactivate',\n    label: 'Deactivate Profiles',\n    description: 'Set selected profiles to inactive status',\n    confirmationRequired: true,\n    variant: 'warning',\n  },\n  {\n    action: 'suspend',\n    label: 'Suspend Profiles',\n    description: 'Suspend selected profiles temporarily',\n    confirmationRequired: true,\n    variant: 'warning',\n  },\n  {\n    action: 'delete',\n    label: 'Delete Profiles',\n    description: 'Permanently delete selected profiles and all associated data',\n    confirmationRequired: true,\n    variant: 'destructive',\n  },\n  {\n    action: 'export',\n    label: 'Export Profiles',\n    description: 'Export selected profiles to CSV or JSON format',\n    confirmationRequired: false,\n    variant: 'default',\n  },\n  {\n    action: 'send_notification',\n    label: 'Send Notification',\n    description: 'Send email notification to selected profiles',\n    confirmationRequired: false,\n    variant: 'default',\n  },\n];\n\ninterface BulkActionsDrawerProps {\n  isOpen: boolean;\n  onClose: () => void;\n  selectedProfiles: UserProfile[];\n  onExecute: (action: string, profileIds: string[]) => Promise<void>;\n}\n\nexport default function BulkActionsDrawer({\n  isOpen,\n  onClose,\n  selectedProfiles,\n  onExecute\n}: BulkActionsDrawerProps) {\n  const { toast } = useToast();\n  const [selectedAction, setSelectedAction] = useState<string>('');\n  const [confirmationChecked, setConfirmationChecked] = useState(false);\n  const [loading, setLoading] = useState(false);\n\n  const selectedActionConfig = BULK_ACTIONS.find(action => action.action === selectedAction);\n  const profileIds = selectedProfiles.map(p => p.id);\n\n  const handleExecute = async () => {\n    if (!selectedAction || !selectedActionConfig) {\n      toast({\n        title: 'Error',\n        description: 'Please select an action to perform',\n        variant: 'destructive',\n      });\n      return;\n    }\n\n    if (selectedActionConfig.confirmationRequired && !confirmationChecked) {\n      toast({\n        title: 'Confirmation Required',\n        description: 'Please confirm that you want to perform this action',\n        variant: 'destructive',\n      });\n      return;\n    }\n\n    try {\n      setLoading(true);\n      await onExecute(selectedAction, profileIds);\n      toast({\n        title: 'Success',\n        description: `${selectedActionConfig.label} completed successfully`,\n      });\n      onClose();\n    } catch (error) {\n      toast({\n        title: 'Error',\n        description: `Failed to ${selectedActionConfig.label.toLowerCase()}`,\n        variant: 'destructive',\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleClose = () => {\n    setSelectedAction('');\n    setConfirmationChecked(false);\n    onClose();\n  };\n\n  const getActionIcon = (action: string) => {\n    switch (action) {\n      case 'activate':\n        return <UserCheck className=\"h-4 w-4 text-green-600\" />;\n      case 'deactivate':\n        return <UserX className=\"h-4 w-4 text-yellow-600\" />;\n      case 'suspend':\n        return <XCircle className=\"h-4 w-4 text-orange-600\" />;\n      case 'delete':\n        return <Trash2 className=\"h-4 w-4 text-red-600\" />;\n      default:\n        return <CheckCircle className=\"h-4 w-4 text-blue-600\" />;\n    }\n  };\n\n  const getStatusCounts = () => {\n    const counts = selectedProfiles.reduce((acc, profile) => {\n      acc[profile.status] = (acc[profile.status] || 0) + 1;\n      return acc;\n    }, {} as Record<string, number>);\n\n    return counts;\n  };\n\n  const statusCounts = getStatusCounts();\n\n  return (\n    <UniversalDrawer\n      isOpen={isOpen}\n      onClose={handleClose}\n      title=\"Bulk Actions\"\n      description={`Perform actions on ${selectedProfiles.length} selected profile${selectedProfiles.length !== 1 ? 's' : ''}`}\n      size=\"md\"\n    >\n      <div className=\"space-y-lg\">\n        {/* Selected Profiles Summary */}\n        <Card className=\"p-md\">\n          <div className=\"flex items-center gap-sm mb-md\">\n            <Users className=\"h-5 w-5 text-primary\" />\n            <h3 className=\"font-semibold\">Selected Profiles ({selectedProfiles.length})</h3>\n          </div>\n          \n          <div className=\"space-y-sm\">\n            <div className=\"flex flex-wrap gap-sm\">\n              {Object.entries(statusCounts).map(([status, count]) => (\n                <Badge \n                  key={status}\n                  variant={status === 'active' ? 'success' : status === 'inactive' ? 'destructive' : 'warning'}\n                >\n                  {count} {status}\n                </Badge>\n              ))}\n            </div>\n            \n            <div className=\"text-sm text-muted-foreground\">\n              <p>Profiles: {selectedProfiles.slice(0, 3).map(p => p.full_name).join(', ')}\n                {selectedProfiles.length > 3 && ` and ${selectedProfiles.length - 3} more`}\n              </p>\n            </div>\n          </div>\n        </Card>\n\n        {/* Action Selection */}\n        <div className=\"space-y-md\">\n          <div className=\"space-y-sm\">\n            <Label htmlFor=\"action\">Select Action</Label>\n            <Select value={selectedAction} onValueChange={setSelectedAction}>\n              <SelectTrigger>\n                <SelectValue placeholder=\"Choose an action to perform\" />\n              </SelectTrigger>\n              <SelectContent>\n                {BULK_ACTIONS.map((action) => (\n                  <SelectItem key={action.action} value={action.action}>\n                    <div className=\"flex items-center gap-sm\">\n                      {getActionIcon(action.action)}\n                      <div>\n                        <p className=\"font-medium\">{action.label}</p>\n                        <p className=\"text-xs text-muted-foreground\">{action.description}</p>\n                      </div>\n                    </div>\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n\n          {/* Action Details */}\n          {selectedActionConfig && (\n            <Card className=\"p-md\">\n              <div className=\"flex items-start gap-sm\">\n                {getActionIcon(selectedAction)}\n                <div className=\"flex-1\">\n                  <h4 className=\"font-semibold\">{selectedActionConfig.label}</h4>\n                  <p className=\"text-sm text-muted-foreground mb-sm\">\n                    {selectedActionConfig.description}\n                  </p>\n                  \n                  {/* Action-specific warnings */}\n                  {selectedAction === 'delete' && (\n                    <Alert className=\"mt-sm\">\n                      <AlertTriangle className=\"h-4 w-4\" />\n                      <AlertDescription>\n                        <strong>Warning:</strong> This action cannot be undone. All profile data, \n                        including certifications, endorsements, and activity history will be permanently deleted.\n                      </AlertDescription>\n                    </Alert>\n                  )}\n                  \n                  {selectedAction === 'deactivate' && (\n                    <Alert className=\"mt-sm\">\n                      <AlertTriangle className=\"h-4 w-4\" />\n                      <AlertDescription>\n                        Deactivated profiles will lose access to the system and won't appear in active user lists.\n                      </AlertDescription>\n                    </Alert>\n                  )}\n                  \n                  {selectedAction === 'suspend' && (\n                    <Alert className=\"mt-sm\">\n                      <AlertTriangle className=\"h-4 w-4\" />\n                      <AlertDescription>\n                        Suspended profiles will be temporarily blocked from accessing the system.\n                      </AlertDescription>\n                    </Alert>\n                  )}\n                </div>\n              </div>\n            </Card>\n          )}\n\n          {/* Confirmation Checkbox */}\n          {selectedActionConfig?.confirmationRequired && (\n            <div className=\"flex items-start gap-sm p-md bg-muted/50 rounded-lg\">\n              <Checkbox\n                id=\"confirmation\"\n                checked={confirmationChecked}\n                onCheckedChange={setConfirmationChecked}\n              />\n              <div className=\"flex-1\">\n                <Label htmlFor=\"confirmation\" className=\"text-sm font-medium cursor-pointer\">\n                  I understand the consequences of this action\n                </Label>\n                <p className=\"text-xs text-muted-foreground mt-xs\">\n                  {selectedAction === 'delete' \n                    ? 'I confirm that I want to permanently delete the selected profiles and all associated data.'\n                    : `I confirm that I want to ${selectedActionConfig.label.toLowerCase()}.`\n                  }\n                </p>\n              </div>\n            </div>\n          )}\n        </div>\n\n        {/* Action Buttons */}\n        <div className=\"flex justify-end gap-sm pt-md border-t border-border\">\n          <Button\n            variant=\"outline\"\n            onClick={handleClose}\n            disabled={loading}\n          >\n            Cancel\n          </Button>\n          <Button\n            onClick={handleExecute}\n            loading={loading}\n            disabled={!selectedAction || (selectedActionConfig?.confirmationRequired && !confirmationChecked)}\n            variant={selectedActionConfig?.variant === 'destructive' ? 'destructive' : 'default'}\n          >\n            {selectedActionConfig ? selectedActionConfig.label : 'Execute Action'}\n          </Button>\n        </div>\n      </div>\n    </UniversalDrawer>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ghxstship/apps/web/app/(app)/(shell)/profile/emergency/views/EmergencyTableView.tsx","messages":[{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Download' is not defined.","line":139,"column":18,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":139,"endColumn":26},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'ArrowUpDown' is not defined.","line":163,"column":21,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":163,"endColumn":32},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'ArrowUpDown' is not defined.","line":166,"column":29,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":166,"endColumn":40},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'ArrowUpDown' is not defined.","line":170,"column":25,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":170,"endColumn":36},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'ShieldCheck' is not defined.","line":210,"column":26,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":210,"endColumn":37},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'ShieldAlert' is not defined.","line":212,"column":26,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":212,"endColumn":37}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\nimport { User, FileText, Settings, Award, Calendar, TrendingUp, Activity, Clock, Plus, Search, Play, Trash2 } from \"lucide-react\";\nimport { useMemo } from 'react';\nimport {\n  Card,\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n  Checkbox,\n  Button,\n  Badge,\n  Input,\n  Select,\n  SelectTrigger,\n  SelectValue,\n  SelectContent,\n  SelectItem,\n} from '@ghxstship/ui';\nimport type { EmergencyContact, EmergencyContactFilters, EmergencyContactSort } from '../types';\nimport { formatPhone, formatAddress } from '../types';\n\ninterface EmergencyTableViewProps {\n  contacts: EmergencyContact[];\n  loading: boolean;\n  selectedIds: string[];\n  filters: EmergencyContactFilters;\n  sort: EmergencyContactSort;\n  onToggleSelect: (id: string, selected: boolean) => void;\n  onToggleAll: (selected: boolean) => void;\n  onFiltersChange: (filters: Partial<EmergencyContactFilters>) => void;\n  onSortChange: (sort: EmergencyContactSort) => void;\n  onExport: (contacts: EmergencyContact[]) => void;\n  onEdit: (contact: EmergencyContact) => void;\n  onVerify: (contact: EmergencyContact) => void;\n}\n\nconst verificationBadges: Record<string, { label: string; variant: 'default' | 'secondary' | 'destructive' }> = {\n  verified: { label: 'Verified', variant: 'default' },\n  pending: { label: 'Pending', variant: 'secondary' },\n  unverified: { label: 'Unverified', variant: 'destructive' },\n};\n\nexport default function EmergencyTableView({\n  contacts,\n  loading,\n  selectedIds,\n  filters,\n  sort,\n  onToggleSelect,\n  onToggleAll,\n  onFiltersChange,\n  onSortChange,\n  onExport,\n  onEdit,\n  onVerify,\n}: EmergencyTableViewProps) {\n  const allSelected = contacts.length > 0 && contacts.every(contact => selectedIds.includes(contact.id));\n  const someSelected = contacts.some(contact => selectedIds.includes(contact.id));\n\n  const sortedContacts = useMemo(() => {\n    const copy = [...contacts];\n    copy.sort((a, b) => {\n      const aValue = (a[sort.field] ?? '').toString().toLowerCase();\n      const bValue = (b[sort.field] ?? '').toString().toLowerCase();\n      if (aValue < bValue) return sort.direction === 'asc' ? -1 : 1;\n      if (aValue > bValue) return sort.direction === 'asc' ? 1 : -1;\n      return 0;\n    });\n    return copy;\n  }, [contacts, sort]);\n\n  const handleSort = (field: EmergencyContactSort['field']) => {\n    onSortChange({\n      field,\n      direction: sort.field === field && sort.direction === 'asc' ? 'desc' : 'asc',\n    });\n  };\n\n  if (loading) {\n    return (\n      <Card className=\"p-6 space-y-4\">\n        <div className=\"h-5 w-1/3 bg-muted rounded animate-pulse\" />\n        <div className=\"h-5 w-full bg-muted rounded animate-pulse\" />\n        <div className=\"h-5 w-2/3 bg-muted rounded animate-pulse\" />\n      </Card>\n    );\n  }\n\n  return (\n    <Card className=\"overflow-hidden\">\n      <div className=\"p-4 space-y-3\">\n        <div className=\"flex flex-col lg:flex-row lg:items-center lg:justify-between gap-3\">\n          <div className=\"flex-1 flex items-center gap-3\">\n            <Input\n              placeholder=\"Search emergency contacts...\"\n              value={filters.search ?? ''}\n              onChange={(event) => onFiltersChange({ search: event.target.value })}\n            />\n            <Select\n              value={filters.priority ?? 'all'}\n              onValueChange={(value) => onFiltersChange({ priority: value as EmergencyContactFilters['priority'] })}\n            >\n              <SelectTrigger className=\"w-40\">\n                <SelectValue placeholder=\"Priority\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All priorities</SelectItem>\n                <SelectItem value=\"critical\">Critical</SelectItem>\n                <SelectItem value=\"high\">High</SelectItem>\n                <SelectItem value=\"medium\">Medium</SelectItem>\n                <SelectItem value=\"low\">Low</SelectItem>\n              </SelectContent>\n            </Select>\n            <Select\n              value={filters.verification_status ?? 'all'}\n              onValueChange={(value) => onFiltersChange({ verification_status: value as EmergencyContactFilters['verification_status'] })}\n            >\n              <SelectTrigger className=\"w-40\">\n                <SelectValue placeholder=\"Verification\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All statuses</SelectItem>\n                <SelectItem value=\"verified\">Verified</SelectItem>\n                <SelectItem value=\"pending\">Pending</SelectItem>\n                <SelectItem value=\"unverified\">Unverified</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n          <div className=\"flex items-center gap-3\">\n            {selectedIds.length > 0 ? (\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => onExport(contacts.filter(contact => selectedIds.includes(contact.id)))}\n              >\n                <Download className=\"mr-2 h-4 w-4\" />\n                Export ({selectedIds.length})\n              </Button>\n            ) : null}\n            <Checkbox\n              checked={allSelected}\n              indeterminate={someSelected && !allSelected}\n              onChange={(event) => onToggleAll(event.target.checked)}\n            />\n          </div>\n        </div>\n      </div>\n\n      <Table>\n        <TableHeader>\n          <TableRow>\n            <TableHead className=\"w-12\">\n              <Checkbox\n                checked={allSelected}\n                indeterminate={someSelected && !allSelected}\n                onChange={(event) => onToggleAll(event.target.checked)}\n              />\n            </TableHead>\n            <TableHead className=\"cursor-pointer\" onClick={() => handleSort('name')}>\n              Name <ArrowUpDown className=\"inline h-4 w-4 ml-1 text-muted-foreground\" />\n            </TableHead>\n            <TableHead onClick={() => handleSort('relationship')} className=\"cursor-pointer\">\n              Relationship <ArrowUpDown className=\"inline h-4 w-4 ml-1 text-muted-foreground\" />\n            </TableHead>\n            <TableHead>Contact Info</TableHead>\n            <TableHead onClick={() => handleSort('priority_level')} className=\"cursor-pointer\">\n              Priority <ArrowUpDown className=\"inline h-4 w-4 ml-1 text-muted-foreground\" />\n            </TableHead>\n            <TableHead>Status</TableHead>\n            <TableHead>Actions</TableHead>\n          </TableRow>\n        </TableHeader>\n        <TableBody>\n          {sortedContacts.length === 0 ? (\n            <TableRow>\n              <TableCell colSpan={7} className=\"py-10 text-center text-muted-foreground\">\n                No emergency contacts found.\n              </TableCell>\n            </TableRow>\n          ) : (\n            sortedContacts.map(contact => {\n              const selected = selectedIds.includes(contact.id);\n              const verificationBadge = verificationBadges[contact.verification_status] ?? verificationBadges.pending;\n              return (\n                <TableRow key={contact.id} className={selected ? 'bg-muted/30' : undefined}>\n                  <TableCell>\n                    <Checkbox\n                      checked={selected}\n                      onChange={(event) => onToggleSelect(contact.id, event.target.checked)}\n                    />\n                  </TableCell>\n                  <TableCell className=\"font-medium\">{contact.name}</TableCell>\n                  <TableCell>{contact.relationship}</TableCell>\n                  <TableCell className=\"space-y-1 text-sm text-muted-foreground\">\n                    <div>{formatPhone(contact.phone_primary)}</div>\n                    {contact.email ? <div>{contact.email}</div> : null}\n                    {formatAddress(contact) ? <div>{formatAddress(contact)}</div> : null}\n                  </TableCell>\n                  <TableCell>\n                    <Badge variant={contact.priority_level === 'critical' ? 'destructive' : 'secondary'}>\n                      {contact.priority_level.toUpperCase()}\n                    </Badge>\n                  </TableCell>\n                  <TableCell>\n                    <Badge variant={verificationBadge.variant} className=\"flex items-center gap-1\">\n                      {contact.verification_status === 'verified' ? (\n                        <ShieldCheck className=\"h-4 w-4\" />\n                      ) : (\n                        <ShieldAlert className=\"h-4 w-4\" />\n                      )}\n                      {verificationBadge.label}\n                    </Badge>\n                  </TableCell>\n                  <TableCell className=\"space-x-2\">\n                    <Button variant=\"outline\" size=\"sm\" onClick={() => onEdit(contact)}>\n                      Edit\n                    </Button>\n                    {contact.verification_status !== 'verified' ? (\n                      <Button size=\"sm\" onClick={() => onVerify(contact)}>\n                        Verify\n                      </Button>\n                    ) : null}\n                  </TableCell>\n                </TableRow>\n              );\n            })\n          )}\n        </TableBody>\n      </Table>\n    </Card>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ghxstship/apps/web/app/(app)/(shell)/profile/endorsements/EndorsementsClient-old.tsx","messages":[{"ruleId":"react-hooks/rules-of-hooks","severity":2,"message":"React Hook \"useCallback\" is called conditionally. React Hooks must be called in the exact same order in every component render.","line":371,"column":29,"nodeType":"Identifier","endLine":371,"endColumn":40},{"ruleId":"react-hooks/rules-of-hooks","severity":2,"message":"React Hook \"useMemo\" is called conditionally. React Hooks must be called in the exact same order in every component render.","line":379,"column":28,"nodeType":"Identifier","endLine":379,"endColumn":35},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":507,"column":19,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[16416,16436],"text":"\n                  &quot;"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[16416,16436],"text":"\n                  &ldquo;"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[16416,16436],"text":"\n                  &#34;"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[16416,16436],"text":"\n                  &rdquo;"},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":507,"column":50,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[16466,16484],"text":"&quot;\n                "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[16466,16484],"text":"&ldquo;\n                "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[16466,16484],"text":"&#34;\n                "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[16466,16484],"text":"&rdquo;\n                "},"desc":"Replace with `&rdquo;`."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\n\nimport { ThumbsUp, Edit, Plus, Star, User, Calendar, Trash2 } from \"lucide-react\";\nimport { useCallback, useEffect, useMemo, useState, type ChangeEvent, type FormEvent } from 'react';\nimport { createBrowserClient } from '@ghxstship/auth';\nimport {\n  Badge,\n  Button,\n  Card,\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n  Textarea,\n  UnifiedInput,\n} from '@ghxstship/ui';\nimport AppDrawer from '@/app/_components/shared/AppDrawer';\n\ninterface Endorsement {\n  id: string;\n  endorser_name: string;\n  endorser_title?: string;\n  endorser_company?: string;\n  relationship: string;\n  endorsement_text: string;\n  skills_endorsed: string[];\n  rating: number;\n  date_received: string;\n  is_public: boolean;\n  created_at: string;\n}\n\ntype RelationshipOption = 'colleague' | 'supervisor' | 'client' | 'subordinate' | 'other';\n\ninterface EndorsementFormData {\n  endorserName: string;\n  endorserTitle: string;\n  endorserCompany: string;\n  relationship: RelationshipOption;\n  endorsementText: string;\n  skills: string[];\n  rating: string;\n  dateReceived: string;\n  isPublic: boolean;\n}\n\nconst relationshipOptions: ReadonlyArray<{ value: RelationshipOption; label: string }> = [\n  { value: 'colleague', label: 'Colleague' },\n  { value: 'supervisor', label: 'Supervisor' },\n  { value: 'client', label: 'Client' },\n  { value: 'subordinate', label: 'Subordinate' },\n  { value: 'other', label: 'Other' },\n];\n\nconst ratingOptions: ReadonlyArray<{ value: string; label: string }> = [\n  { value: '5', label: '5 Stars - Excellent' },\n  { value: '4', label: '4 Stars - Very Good' },\n  { value: '3', label: '3 Stars - Good' },\n  { value: '2', label: '2 Stars - Fair' },\n  { value: '1', label: '1 Star - Poor' },\n];\n\nconst createInitialFormData = (): EndorsementFormData => ({\n  endorserName: '',\n  endorserTitle: '',\n  endorserCompany: '',\n  relationship: 'colleague',\n  endorsementText: '',\n  skills: [],\n  rating: '5',\n  dateReceived: new Date().toISOString().split('T')[0],\n  isPublic: true,\n});\n\nexport default function EndorsementsClient({ orgId, userId }: { orgId: string; userId: string }) {\n  const supabase = useMemo(() => createBrowserClient(), []);\n\n  const [endorsements, setEndorsements] = useState<Endorsement[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [drawerOpen, setDrawerOpen] = useState(false);\n  const [editingEndorsement, setEditingEndorsement] = useState<Endorsement | null>(null);\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [skillInput, setSkillInput] = useState('');\n  const [formData, setFormData] = useState<EndorsementFormData>(() => createInitialFormData());\n  const [fieldErrors, setFieldErrors] = useState<Partial<Record<keyof EndorsementFormData, string>>>({});\n  const [error, setError] = useState<string | null>(null);\n\n  useEffect(() => {\n    loadEndorsements();\n  }, [orgId, userId]);\n\n  const loadEndorsements = async () => {\n    try {\n      setLoading(true);\n      \n      // For now, we'll use mock data since endorsements table doesn't exist\n      // In a real implementation, this would query the endorsements table\n      const mockEndorsements: Endorsement[] = [\n        {\n          id: '1',\n          endorser_name: 'Captain Jack Sparrow',\n          endorser_title: 'Senior Captain',\n          endorser_company: 'Black Pearl Shipping',\n          relationship: 'supervisor',\n          endorsement_text: 'An exceptional crew member with outstanding leadership skills and dedication to maritime excellence.',\n          skills_endorsed: ['Leadership', 'Navigation', 'Team Management'],\n          rating: 5,\n          date_received: '2024-01-15',\n          is_public: true,\n          created_at: '2024-01-15T10:00:00Z'\n        },\n        {\n          id: '2',\n          endorser_name: 'Anne Bonny',\n          endorser_title: 'First Mate',\n          endorser_company: 'Revenge Maritime',\n          relationship: 'colleague',\n          endorsement_text: 'Reliable and skilled professional with excellent problem-solving abilities.',\n          skills_endorsed: ['Problem Solving', 'Communication', 'Reliability'],\n          rating: 4,\n          date_received: '2024-02-20',\n          is_public: true,\n          created_at: '2024-02-20T14:30:00Z'\n        }\n      ];\n      \n      setEndorsements(mockEndorsements);\n    } catch (error) {\n      console.error('Error loading endorsements:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const updateForm = useCallback(\n    <Key extends keyof EndorsementFormData>(field: Key, value: EndorsementFormData[Key]) => {\n      setFormData(prev => ({ ...prev, [field]: value }));\n      setFieldErrors(prev => {\n        if (!prev[field]) {\n          return prev;\n        }\n        const next = { ...prev };\n        delete next[field];\n        return next;\n      });\n    },\n    []\n  );\n\n  const resetFormState = useCallback(() => {\n    setFormData(createInitialFormData());\n    setFieldErrors({});\n    setSkillInput('');\n    setError(null);\n  }, []);\n\n  const validateForm = useCallback(() => {\n    const errors: Partial<Record<keyof EndorsementFormData, string>> = {};\n\n    if (!formData.endorserName.trim()) {\n      errors.endorserName = 'Endorser name is required.';\n    }\n\n    if (!formData.endorserTitle.trim()) {\n      errors.endorserTitle = 'Endorser title is required.';\n    }\n\n    if (!formData.endorserCompany.trim()) {\n      errors.endorserCompany = 'Company is required.';\n    }\n\n    if (!formData.relationship) {\n      errors.relationship = 'Relationship is required.';\n    }\n\n    if (formData.skills.length === 0) {\n      errors.skills = 'Please add at least one skill.';\n    }\n\n    if (!formData.endorsementText.trim() || formData.endorsementText.trim().length < 10) {\n      errors.endorsementText = 'Endorsement text must be at least 10 characters.';\n    }\n\n    if (!formData.rating.trim()) {\n      errors.rating = 'Rating is required.';\n    } else {\n      const ratingValue = Number(formData.rating);\n      if (Number.isNaN(ratingValue) || ratingValue < 1 || ratingValue > 5) {\n        errors.rating = 'Rating must be between 1 and 5.';\n      }\n    }\n\n    setFieldErrors(errors);\n\n    if (Object.keys(errors).length > 0) {\n      setError('Please correct the highlighted fields.');\n      return false;\n    }\n\n    setError(null);\n    return true;\n  }, [formData]);\n\n  const handleSubmit = async (event: FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    if (!validateForm()) {\n      return;\n    }\n\n    const trimmedName = formData.endorserName.trim();\n    const trimmedTitle = formData.endorserTitle.trim();\n    const trimmedCompany = formData.endorserCompany.trim();\n    const trimmedText = formData.endorsementText.trim();\n    const trimmedDate = formData.dateReceived.trim();\n    const ratingValue = Number(formData.rating);\n    const skills = formData.skills.map(skill => skill.trim()).filter(Boolean);\n\n    setIsSubmitting(true);\n    try {\n      if (editingEndorsement) {\n        // Update existing endorsement\n        const updatedEndorsements = endorsements.map(endorsement =>\n          endorsement.id === editingEndorsement.id\n            ? {\n                ...endorsement,\n                endorser_name: trimmedName,\n                endorser_title: trimmedTitle || undefined,\n                endorser_company: trimmedCompany || undefined,\n                relationship: formData.relationship,\n                endorsement_text: trimmedText,\n                skills_endorsed: skills,\n                rating: ratingValue,\n                date_received: trimmedDate || new Date().toISOString().split('T')[0],\n                is_public: formData.isPublic,\n              }\n            : endorsement\n        );\n        setEndorsements(updatedEndorsements);\n      } else {\n        // Create new endorsement\n        const newEndorsement: Endorsement = {\n          id: Date.now().toString(),\n          endorser_name: trimmedName,\n          endorser_title: trimmedTitle || undefined,\n          endorser_company: trimmedCompany || undefined,\n          relationship: formData.relationship,\n          endorsement_text: trimmedText,\n          skills_endorsed: skills,\n          rating: ratingValue,\n          date_received: trimmedDate || new Date().toISOString().split('T')[0],\n          is_public: formData.isPublic,\n          created_at: new Date().toISOString(),\n        };\n        setEndorsements([newEndorsement, ...endorsements]);\n      }\n\n      // Log activity\n      await supabase\n        .from('user_profile_activity')\n        .insert({\n          user_id: userId,\n          organization_id: orgId,\n          activity_type: editingEndorsement ? 'endorsement_updated' : 'endorsement_added',\n          activity_description: editingEndorsement\n            ? `Updated endorsement from ${trimmedName}`\n            : `Added new endorsement from ${trimmedName}`,\n          performed_by: userId,\n        });\n\n      setDrawerOpen(false);\n      setEditingEndorsement(null);\n      resetFormState();\n    } catch (error) {\n      console.error('Error saving endorsement:', error);\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  const handleEdit = (endorsement: Endorsement) => {\n    setEditingEndorsement(endorsement);\n    setFormData({\n      endorserName: endorsement.endorser_name,\n      endorserTitle: endorsement.endorser_title || '',\n      endorserCompany: endorsement.endorser_company || '',\n      relationship: endorsement.relationship as RelationshipOption,\n      endorsementText: endorsement.endorsement_text,\n      skills: endorsement.skills_endorsed ?? [],\n      rating: String(endorsement.rating),\n      dateReceived: endorsement.date_received || new Date().toISOString().split('T')[0],\n      isPublic: endorsement.is_public,\n    });\n    setFieldErrors({});\n    setError(null);\n    setSkillInput('');\n    setDrawerOpen(true);\n  };\n\n  const handleDelete = async (endorsementId: string) => {\n    if (confirm('Are you sure you want to delete this endorsement?')) {\n      const endorsement = endorsements.find(e => e.id === endorsementId);\n      setEndorsements(endorsements.filter(e => e.id !== endorsementId));\n      \n      // Log activity\n      if (endorsement) {\n        await supabase\n          .from('user_profile_activity')\n          .insert({\n            user_id: userId,\n            organization_id: orgId,\n            activity_type: 'endorsement_deleted',\n            activity_description: `Deleted endorsement from ${endorsement.endorser_name}`,\n            performed_by: userId\n          });\n      }\n    }\n  };\n\n  const addSkill = () => {\n    if (skillInput.trim()) {\n      const newSkill = skillInput.trim();\n      if (!formData.skills.includes(newSkill)) {\n        setFormData(prev => ({ ...prev, skills: [...prev.skills, newSkill] }));\n        setFieldErrors(prev => {\n          if (!prev.skills) {\n            return prev;\n          }\n          const next = { ...prev };\n          delete next.skills;\n          return next;\n        });\n      }\n      setSkillInput('');\n    }\n  };\n\n  const removeSkill = (skillToRemove: string) => {\n    setFormData(prev => ({ ...prev, skills: prev.skills.filter(skill => skill !== skillToRemove) }));\n  };\n\n  const renderStars = (rating: number) => {\n    return Array.from({ length: 5 }, (_, i) => (\n      <Star\n        key={i}\n        className={`h-4 w-4 ${i < rating ? 'color-warning fill-current' : 'color-muted'}`}\n      />\n    ));\n  };\n\n  const formatRelationship = (relationship: string) => {\n    return relationship.charAt(0).toUpperCase() + relationship.slice(1);\n  };\n\n  if (loading) {\n    return (\n      <div className=\"stack-lg\">\n        <div className=\"animate-pulse\">\n          <div className=\"h-8 bg-secondary rounded mb-md\"></div>\n          <div className=\"stack-md\">\n            <div className=\"h-32 bg-secondary rounded\"></div>\n            <div className=\"h-32 bg-secondary rounded\"></div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  const handleCloseDrawer = useCallback(() => {\n    if (!isSubmitting) {\n      setDrawerOpen(false);\n      resetFormState();\n      setEditingEndorsement(null);\n    }\n  }, [isSubmitting, resetFormState]);\n\n  const isSubmitDisabled = useMemo(() => {\n    if (isSubmitting) {\n      return true;\n    }\n\n    if (!formData.endorserName.trim()) {\n      return true;\n    }\n\n    if (!formData.endorserTitle.trim()) {\n      return true;\n    }\n\n    if (!formData.endorserCompany.trim()) {\n      return true;\n    }\n\n    if (!formData.relationship) {\n      return true;\n    }\n\n    if (formData.skills.length === 0) {\n      return true;\n    }\n\n    const trimmedText = formData.endorsementText.trim();\n    if (!trimmedText || trimmedText.length < 10) {\n      return true;\n    }\n\n    if (!formData.rating.trim()) {\n      return true;\n    }\n\n    const ratingValue = Number(formData.rating);\n    if (Number.isNaN(ratingValue) || ratingValue < 1 || ratingValue > 5) {\n      return true;\n    }\n\n    return false;\n  }, [formData, isSubmitting]);\n\n  return (\n    <div className=\"stack-lg\">\n      <div className=\"flex items-center justify-between\">\n        <h2 className=\"text-heading-4 text-heading-4\">Endorsements</h2>\n        <Button \n          onClick={() => {\n            setEditingEndorsement(null);\n            resetFormState();\n            setDrawerOpen(true);\n          }}\n          className=\"flex items-center gap-sm\"\n        >\n          <Plus className=\"h-4 w-4\" />\n          Add Endorsement\n        </Button>\n      </div>\n\n      {endorsements.length === 0 ? (\n        <Card>\n          <div className=\"p-xl text-center\">\n            <ThumbsUp className=\"h-12 w-12 color-muted mx-auto mb-md\" />\n            <h3 className=\"text-body text-heading-4 mb-sm\">No Endorsements Yet</h3>\n            <p className=\"color-muted mb-md\">\n              Start building your professional reputation by adding endorsements from colleagues and clients.\n            </p>\n            <Button \n              onClick={() => {\n                setEditingEndorsement(null);\n                resetFormState();\n                setDrawerOpen(true);\n              }}\n              variant=\"default\"\n              className=\"flex items-center gap-sm\"\n            >\n              <Plus className=\"h-4 w-4\" />\n              Add Your First Endorsement\n            </Button>\n          </div>\n        </Card>\n      ) : (\n        <div className=\"stack-md\">\n          {endorsements.map((endorsement: Endorsement) => (\n            <Card key={endorsement.id}>\n              <div className=\"p-lg\">\n                <div className=\"flex items-start justify-between mb-md\">\n                  <div className=\"flex items-center gap-sm\">\n                    <div className=\"h-10 w-10 bg-accent/10 rounded-full flex items-center justify-center\">\n                      <User className=\"h-5 w-5 color-accent\" />\n                    </div>\n                    <div>\n                      <h3 className=\"text-body text-heading-4\">{endorsement.endorser_name}</h3>\n                      {endorsement.endorser_title && (\n                        <p className=\"text-body-sm color-muted\">\n                          {endorsement.endorser_title}\n                          {endorsement.endorser_company && ` at ${endorsement.endorser_company}`}\n                        </p>\n                      )}\n                      <div className=\"flex items-center gap-sm mt-xs\">\n                        <Badge variant=\"outline\">\n                          {formatRelationship(endorsement.relationship)}\n                        </Badge>\n                        <div className=\"flex items-center gap-xs\">\n                          {renderStars(endorsement.rating)}\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                  <div className=\"flex items-center gap-sm\">\n                    <Button\n                      variant=\"outline\"\n                     \n                      onClick={() => handleEdit(endorsement)}\n                    >\n                      <Edit className=\"h-4 w-4\" />\n                    </Button>\n                    <Button\n                      variant=\"outline\"\n                     \n                      onClick={() => handleDelete(endorsement.id)}\n                    >\n                      <Trash2 className=\"h-4 w-4\" />\n                    </Button>\n                  </div>\n                </div>\n\n                <blockquote className=\"color-muted italic mb-md border-l-4 border-primary/20 pl-md\">\n                  \"{endorsement.endorsement_text}\"\n                </blockquote>\n\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex flex-wrap gap-sm\">\n                    {endorsement.skills_endorsed.map((skill: string, index: number) => (\n                      <Badge key={index} variant=\"secondary\">\n                        {skill}\n                      </Badge>\n                    ))}\n                  </div>\n                  <div className=\"flex items-center gap-sm text-body-sm color-muted\">\n                    <Calendar className=\"h-4 w-4\" />\n                    {new Date(endorsement.date_received).toLocaleDateString()}\n                  </div>\n                </div>\n              </div>\n            </Card>\n          ))}\n        </div>\n      )}\n\n      <AppDrawer\n        open={drawerOpen}\n        onClose={handleCloseDrawer}\n        record={editingEndorsement}\n        fields={[]}\n        mode={editingEndorsement ? 'edit' : 'create'}\n        title={editingEndorsement ? 'Edit Endorsement' : 'Add New Endorsement'}\n        loading={isSubmitting}\n        tabs={[{\n          key: 'content',\n          label: 'Details',\n          content: (\n        <form onSubmit={handleSubmit} className=\"stack-md\">\n          {error ? <div className=\"text-body-sm color-destructive\">{error}</div> : null}\n\n          <UnifiedInput\n            label=\"Endorser Name\"\n            placeholder=\"Enter endorser's full name\"\n            value={formData.endorserName}\n            onChange={(event: ChangeEvent<HTMLInputElement>) =>\n              updateForm('endorserName', event.target.value)\n            }\n            error={fieldErrors.endorserName}\n            required\n          />\n\n          <div className=\"grid grid-cols-2 gap-md\">\n            <UnifiedInput\n              label=\"Title\"\n              placeholder=\"Job title\"\n              value={formData.endorserTitle}\n              onChange={(event: ChangeEvent<HTMLInputElement>) =>\n                updateForm('endorserTitle', event.target.value)\n              }\n              error={fieldErrors.endorserTitle}\n            />\n\n            <UnifiedInput\n              label=\"Company\"\n              placeholder=\"Company name\"\n              value={formData.endorserCompany}\n              onChange={(event: ChangeEvent<HTMLInputElement>) =>\n                updateForm('endorserCompany', event.target.value)\n              }\n              error={fieldErrors.endorserCompany}\n            />\n          </div>\n\n          <div className=\"grid grid-cols-2 gap-md\">\n            <div className=\"stack-sm\">\n              <label className=\"text-body-sm form-label\">Relationship *</label>\n              <Select\n                value={formData.relationship}\n                onValueChange={value => updateForm('relationship', value as RelationshipOption)}\n              >\n                <SelectTrigger>\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  {relationshipOptions.map(option => (\n                    <SelectItem key={option.value} value={option.value}>\n                      {option.label}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n              {fieldErrors.relationship ? (\n                <p className=\"text-body-sm color-destructive\">{fieldErrors.relationship}</p>\n              ) : null}\n            </div>\n\n            <UnifiedInput\n              label=\"Date Received\"\n              type=\"date\"\n              value={formData.dateReceived}\n              onChange={(event: ChangeEvent<HTMLInputElement>) =>\n                updateForm('dateReceived', event.target.value)\n              }\n            />\n          </div>\n\n          <Textarea\n            label=\"Endorsement Text\"\n            placeholder=\"Enter the endorsement text\"\n            value={formData.endorsementText}\n            onChange={(event: ChangeEvent<HTMLTextAreaElement>) =>\n              updateForm('endorsementText', event.target.value)\n            }\n            error={fieldErrors.endorsementText}\n            rows={4}\n          />\n\n          <div>\n            <label className=\"block text-body-sm form-label mb-sm\">Skills Endorsed</label>\n            <div className=\"flex gap-sm mb-sm\">\n              <UnifiedInput\n                placeholder=\"Add a skill\"\n                value={skillInput}\n                onChange={(event: ChangeEvent<HTMLInputElement>) => setSkillInput(event.target.value)}\n                onKeyDown={event => {\n                  if (event.key === 'Enter') {\n                    event.preventDefault();\n                    addSkill();\n                  }\n                }}\n              />\n              <Button type=\"button\" onClick={addSkill}>\n                Add\n              </Button>\n            </div>\n            <div className=\"flex flex-wrap gap-sm\">\n              {formData.skills.map(skill => (\n                <Badge key={skill} variant=\"outline\" className=\"flex items-center gap-xs\">\n                  {skill}\n                  <button\n                    type=\"button\"\n                    onClick={() => removeSkill(skill)}\n                    className=\"ml-xs color-destructive hover:color-destructive/80\"\n                  >\n                    ×\n                  </button>\n                </Badge>\n              ))}\n            </div>\n            {fieldErrors.skills ? (\n              <p className=\"text-body-sm color-destructive mt-xs\">{fieldErrors.skills}</p>\n            ) : null}\n          </div>\n\n          <div className=\"grid grid-cols-2 gap-md\">\n            <div className=\"stack-sm\">\n              <label className=\"text-body-sm form-label\">Rating *</label>\n              <Select\n                value={formData.rating}\n                onValueChange={value => updateForm('rating', value)}\n              >\n                <SelectTrigger>\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  {ratingOptions.map(option => (\n                    <SelectItem key={option.value} value={option.value}>\n                      {option.label}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n              {fieldErrors.rating ? (\n                <p className=\"text-body-sm color-destructive\">{fieldErrors.rating}</p>\n              ) : null}\n            </div>\n\n            <div className=\"flex items-center gap-sm\">\n              <input\n                type=\"checkbox\"\n                id=\"isPublic\"\n                checked={formData.isPublic}\n                onChange={(event: ChangeEvent<HTMLInputElement>) =>\n                  updateForm('isPublic', event.target.checked)\n                }\n                className=\"rounded border-border\"\n              />\n              <label htmlFor=\"isPublic\" className=\"text-body-sm form-label\">\n                Make this endorsement public\n              </label>\n            </div>\n          </div>\n\n          <div className=\"flex justify-end gap-sm pt-md\">\n            <Button type=\"button\" variant=\"outline\" onClick={handleCloseDrawer} disabled={isSubmitting}>\n              Cancel\n            </Button>\n            <Button type=\"submit\" disabled={isSubmitDisabled}>\n              {isSubmitting ? 'Saving…' : editingEndorsement ? 'Update Endorsement' : 'Save Endorsement'}\n            </Button>\n          </div>\n        </form>\n          ),\n        }]}\n      />\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ghxstship/apps/web/app/(app)/(shell)/profile/health/HealthClient-old.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadHealthRecords'. Either include it or remove the dependency array.","line":107,"column":6,"nodeType":"ArrayExpression","endLine":107,"endColumn":21,"suggestions":[{"desc":"Update the dependencies array to be: [loadHealthRecords, orgId, userId]","fix":{"range":[3121,3136],"text":"[loadHealthRecords, orgId, userId]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\n\nimport { Activity, AlertTriangle, Calendar, Heart, Plus, Shield, Trash2, Edit } from \"lucide-react\";\nimport { useCallback, useEffect, useMemo, useState, type ChangeEvent, type FormEvent } from 'react';\nimport { createBrowserClient } from '@ghxstship/auth';\nimport {\n  Badge,\n  Button,\n  Card,\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n  Textarea,\n  UnifiedInput,\n} from '@ghxstship/ui';\nimport AppDrawer from '@/app/_components/shared/AppDrawer';\n\ntype RecordType = 'medical' | 'vaccination' | 'allergy' | 'medication' | 'condition' | 'emergency';\ntype SeverityLevel = 'low' | 'medium' | 'high' | 'critical';\n\ninterface HealthRecord {\n  id: string;\n  record_type: RecordType;\n  title: string;\n  description?: string;\n  date_recorded: string;\n  expiry_date?: string;\n  provider?: string;\n  document_url?: string;\n  is_active: boolean;\n  severity?: SeverityLevel;\n  notes?: string;\n  created_at: string;\n}\n\ninterface HealthRecordFormData {\n  recordType: RecordType;\n  title: string;\n  description: string;\n  dateRecorded: string;\n  expiryDate: string;\n  provider: string;\n  documentUrl: string;\n  isActive: boolean;\n  severity: SeverityLevel;\n  notes: string;\n}\n\nconst recordTypeOptions: ReadonlyArray<{ value: RecordType; label: string }> = [\n  { value: 'medical', label: 'Medical' },\n  { value: 'vaccination', label: 'Vaccination' },\n  { value: 'allergy', label: 'Allergy' },\n  { value: 'medication', label: 'Medication' },\n  { value: 'condition', label: 'Condition' },\n  { value: 'emergency', label: 'Emergency' },\n];\n\nconst severityOptions: ReadonlyArray<{ value: SeverityLevel; label: string }> = [\n  { value: 'low', label: 'Low' },\n  { value: 'medium', label: 'Medium' },\n  { value: 'high', label: 'High' },\n  { value: 'critical', label: 'Critical' },\n];\n\nconst filterOptions: ReadonlyArray<RecordType | 'all'> = [\n  'all',\n  'medical',\n  'vaccination',\n  'allergy',\n  'medication',\n  'condition',\n  'emergency',\n];\n\nconst createInitialFormData = (): HealthRecordFormData => ({\n  recordType: 'medical',\n  title: '',\n  description: '',\n  dateRecorded: new Date().toISOString().split('T')[0],\n  expiryDate: '',\n  provider: '',\n  documentUrl: '',\n  isActive: true,\n  severity: 'low',\n  notes: '',\n});\n\nexport default function HealthClient({ orgId, userId }: { orgId: string; userId: string }) {\n  const supabase = useMemo(() => createBrowserClient(), []);\n\n  const [healthRecords, setHealthRecords] = useState<HealthRecord[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [filterType, setFilterType] = useState<RecordType | 'all'>('all');\n\n  const [isDrawerOpen, setIsDrawerOpen] = useState(false);\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [editingRecord, setEditingRecord] = useState<HealthRecord | null>(null);\n  const [formData, setFormData] = useState<HealthRecordFormData>(() => createInitialFormData());\n  const [fieldErrors, setFieldErrors] = useState<Partial<Record<keyof HealthRecordFormData, string>>>({});\n  const [error, setError] = useState<string | null>(null);\n\n  useEffect(() => {\n    void loadHealthRecords();\n  }, [orgId, userId]);\n\n  const loadHealthRecords = useCallback(async () => {\n    try {\n      setLoading(true);\n\n      const mockRecords: HealthRecord[] = [\n        {\n          id: '1',\n          record_type: 'vaccination',\n          title: 'COVID-19 Vaccination',\n          description: 'Pfizer-BioNTech COVID-19 Vaccine',\n          date_recorded: '2024-01-15',\n          expiry_date: '2025-01-15',\n          provider: 'Maritime Health Services',\n          is_active: true,\n          severity: 'low',\n          notes: 'Booster shot completed',\n          created_at: '2024-01-15T10:00:00Z',\n        },\n        {\n          id: '2',\n          record_type: 'allergy',\n          title: 'Shellfish Allergy',\n          description: 'Severe allergic reaction to shellfish',\n          date_recorded: '2023-06-10',\n          provider: 'Dr. Maritime',\n          is_active: true,\n          severity: 'high',\n          notes: 'Carry EpiPen at all times',\n          created_at: '2023-06-10T14:30:00Z',\n        },\n        {\n          id: '3',\n          record_type: 'condition',\n          title: 'Hypertension',\n          description: 'High blood pressure - controlled',\n          date_recorded: '2023-03-20',\n          provider: 'Blackwater Medical Center',\n          is_active: true,\n          severity: 'medium',\n          notes: 'Regular monitoring required',\n          created_at: '2023-03-20T09:15:00Z',\n        },\n      ];\n\n      setHealthRecords(mockRecords);\n    } catch (loadError) {\n      console.error('Error loading health records:', loadError);\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  const updateForm = useCallback(\n    <Key extends keyof HealthRecordFormData>(field: Key, value: HealthRecordFormData[Key]) => {\n      setFormData(prev => ({ ...prev, [field]: value }));\n      setFieldErrors(prev => {\n        if (!prev[field]) {\n          return prev;\n        }\n        const next = { ...prev };\n        delete next[field];\n        return next;\n      });\n    },\n    []\n  );\n\n  const handleInputChange = useCallback(\n    (event: ChangeEvent<HTMLInputElement>) => {\n      const { name, value, type, checked } = event.target;\n      if (type === 'checkbox') {\n        updateForm(name as keyof HealthRecordFormData, checked as unknown as HealthRecordFormData[keyof HealthRecordFormData]);\n        return;\n      }\n      updateForm(name as keyof HealthRecordFormData, value as HealthRecordFormData[keyof HealthRecordFormData]);\n    },\n    [updateForm]\n  );\n\n  const handleTextareaChange = useCallback(\n    (event: ChangeEvent<HTMLTextAreaElement>) => {\n      const { name, value } = event.target;\n      updateForm(name as keyof HealthRecordFormData, value as HealthRecordFormData[keyof HealthRecordFormData]);\n    },\n    [updateForm]\n  );\n\n  const handleSelectChange = useCallback(\n    (field: keyof HealthRecordFormData) => (value: string) => {\n      updateForm(field, value as HealthRecordFormData[typeof field]);\n    },\n    [updateForm]\n  );\n\n  const resetFormState = useCallback(() => {\n    setFormData(createInitialFormData());\n    setFieldErrors({});\n    setError(null);\n    setEditingRecord(null);\n  }, []);\n\n  const validateForm = useCallback(() => {\n    const errors: Partial<Record<keyof HealthRecordFormData, string>> = {};\n\n    if (!formData.title.trim()) {\n      errors.title = 'Title is required.';\n    }\n\n    const trimmedDocumentUrl = formData.documentUrl.trim();\n    if (trimmedDocumentUrl) {\n      try {\n        new URL(trimmedDocumentUrl);\n      } catch {\n        errors.documentUrl = 'Document URL must be a valid URL.';\n      }\n    }\n\n    if (formData.expiryDate.trim() && formData.dateRecorded.trim() && formData.expiryDate < formData.dateRecorded) {\n      errors.expiryDate = 'Expiry date cannot be earlier than recorded date.';\n    }\n\n    setFieldErrors(errors);\n\n    if (Object.keys(errors).length > 0) {\n      setError('Please correct the highlighted fields.');\n      return false;\n    }\n\n    setError(null);\n    return true;\n  }, [formData]);\n\n  const handleOpen = useCallback(() => {\n    resetFormState();\n    setIsDrawerOpen(true);\n  }, [resetFormState]);\n\n  const handleClose = useCallback(() => {\n    if (!isSubmitting) {\n      resetFormState();\n      setIsDrawerOpen(false);\n    }\n  }, [isSubmitting, resetFormState]);\n\n  const handleSubmit = useCallback(\n    async (event: FormEvent<HTMLFormElement>) => {\n      event.preventDefault();\n\n      if (!validateForm()) {\n        return;\n      }\n\n      const trimmedTitle = formData.title.trim();\n      const trimmedDescription = formData.description.trim();\n      const trimmedProvider = formData.provider.trim();\n      const trimmedDocumentUrl = formData.documentUrl.trim();\n      const trimmedNotes = formData.notes.trim();\n\n      const payload: HealthRecord = {\n        id: editingRecord?.id ?? Date.now().toString(),\n        record_type: formData.recordType,\n        title: trimmedTitle,\n        description: trimmedDescription || undefined,\n        date_recorded: formData.dateRecorded,\n        expiry_date: formData.expiryDate || undefined,\n        provider: trimmedProvider || undefined,\n        document_url: trimmedDocumentUrl || undefined,\n        is_active: formData.isActive,\n        severity: formData.severity,\n        notes: trimmedNotes || undefined,\n        created_at: editingRecord?.created_at ?? new Date().toISOString(),\n      };\n\n      try {\n        setIsSubmitting(true);\n\n        if (editingRecord) {\n          setHealthRecords(prev => prev.map(record => (record.id === editingRecord.id ? payload : record)));\n        } else {\n          setHealthRecords(prev => [payload, ...prev]);\n        }\n\n        await supabase\n          .from('user_profile_activity')\n          .insert({\n            user_id: userId,\n            organization_id: orgId,\n            activity_type: editingRecord ? 'health_record_updated' : 'health_record_added',\n            activity_description: editingRecord\n              ? `Updated health record: ${trimmedTitle}`\n              : `Added new health record: ${trimmedTitle}`,\n            performed_by: userId,\n          });\n\n        resetFormState();\n        setIsDrawerOpen(false);\n      } catch (submitError) {\n        const message = submitError instanceof Error ? submitError.message : 'Unknown error';\n        console.error('Error saving health record:', submitError);\n        setError(message);\n      } finally {\n        setIsSubmitting(false);\n      }\n    },\n    [editingRecord, formData, orgId, resetFormState, supabase, userId, validateForm]\n  );\n\n  const handleEdit = useCallback(\n    (record: HealthRecord) => {\n      setEditingRecord(record);\n      setFormData({\n        recordType: record.record_type,\n        title: record.title,\n        description: record.description || '',\n        dateRecorded: record.date_recorded,\n        expiryDate: record.expiry_date || '',\n        provider: record.provider || '',\n        documentUrl: record.document_url || '',\n        isActive: record.is_active,\n        severity: record.severity ?? 'low',\n        notes: record.notes || '',\n      });\n      setFieldErrors({});\n      setError(null);\n      setIsDrawerOpen(true);\n    },\n    []\n  );\n\n  const handleDelete = useCallback(\n    async (recordId: string) => {\n      if (!confirm('Are you sure you want to delete this health record?')) {\n        return;\n      }\n\n      const record = healthRecords.find(r => r.id === recordId);\n      setHealthRecords(prev => prev.filter(r => r.id !== recordId));\n\n      if (record) {\n        await supabase\n          .from('user_profile_activity')\n          .insert({\n            user_id: userId,\n            organization_id: orgId,\n            activity_type: 'health_record_deleted',\n            activity_description: `Deleted health record: ${record.title}`,\n            performed_by: userId,\n          });\n      }\n    },\n    [healthRecords, orgId, supabase, userId]\n  );\n\n  const getRecordTypeIcon = useCallback((type: RecordType) => {\n    const icons: Record<RecordType, typeof Heart> = {\n      medical: Heart,\n      vaccination: Shield,\n      allergy: AlertTriangle,\n      medication: Activity,\n      condition: Heart,\n      emergency: AlertTriangle,\n    };\n    return icons[type] || Heart;\n  }, []);\n\n  const getRecordTypeColor = useCallback((type: RecordType) => {\n    const colors: Record<RecordType, string> = {\n      medical: 'blue',\n      vaccination: 'green',\n      allergy: 'red',\n      medication: 'purple',\n      condition: 'orange',\n      emergency: 'red',\n    };\n    return colors[type] || 'blue';\n  }, []);\n\n  const getSeverityBadgeVariant = useCallback((severity?: SeverityLevel) => {\n    const variants: Record<SeverityLevel, 'success' | 'warning' | 'destructive' | 'secondary'> = {\n      low: 'success',\n      medium: 'warning',\n      high: 'destructive',\n      critical: 'destructive',\n    };\n    return severity ? variants[severity] : 'secondary';\n  }, []);\n\n  const filteredRecords = useMemo(() => {\n    if (filterType === 'all') {\n      return healthRecords;\n    }\n    return healthRecords.filter(record => record.record_type === filterType);\n  }, [filterType, healthRecords]);\n\n  const isSubmitDisabled = useMemo(() => {\n    if (isSubmitting) {\n      return true;\n    }\n\n    if (!formData.title.trim()) {\n      return true;\n    }\n\n    const trimmedDocumentUrl = formData.documentUrl.trim();\n    if (trimmedDocumentUrl) {\n      try {\n        new URL(trimmedDocumentUrl);\n      } catch {\n        return true;\n      }\n    }\n\n    if (formData.expiryDate.trim() && formData.dateRecorded.trim() && formData.expiryDate < formData.dateRecorded) {\n      return true;\n    }\n\n    return false;\n  }, [formData.dateRecorded, formData.documentUrl, formData.expiryDate, formData.title, isSubmitting]);\n\n  if (loading) {\n    return (\n      <div className=\"stack-lg\">\n        <div className=\"animate-pulse\">\n          <div className=\"h-8 bg-secondary rounded mb-md\" />\n          <div className=\"stack-md\">\n            <div className=\"h-32 bg-secondary rounded\" />\n            <div className=\"h-32 bg-secondary rounded\" />\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"stack-lg\">\n      <div className=\"flex items-center justify-between\">\n        <h2 className=\"text-heading-4 text-heading-4\">Health Records</h2>\n        <Button onClick={handleOpen} className=\"flex items-center gap-sm\">\n          <Plus className=\"h-4 w-4\" />\n          Add Health Record\n        </Button>\n      </div>\n\n      <div className=\"flex gap-sm flex-wrap\">\n        {filterOptions.map(option => (\n          <Button\n            key={option}\n            variant={filterType === option ? 'default' : 'outline'}\n            onClick={() => setFilterType(option)}\n          >\n            {option === 'all' ? 'All Records' : option.charAt(0).toUpperCase() + option.slice(1)}\n          </Button>\n        ))}\n      </div>\n\n      {filteredRecords.length === 0 ? (\n        <Card>\n          <div className=\"p-xl text-center\">\n            <Heart className=\"h-12 w-12 color-muted mx-auto mb-md\" />\n            <h3 className=\"text-body text-heading-4 mb-sm\">No Health Records</h3>\n            <p className=\"color-muted mb-md\">\n              Keep track of your medical history, vaccinations, allergies, and health conditions.\n            </p>\n            <Button onClick={handleOpen}>Add Your First Health Record</Button>\n          </div>\n        </Card>\n      ) : (\n        <div className=\"stack-md\">\n          {filteredRecords.map(record => {\n            const IconComponent = getRecordTypeIcon(record.record_type);\n            const color = getRecordTypeColor(record.record_type);\n            const isExpiring = Boolean(\n              record.expiry_date &&\n                new Date(record.expiry_date) <= new Date(Date.now() + 30 * 24 * 60 * 60 * 1000)\n            );\n\n            return (\n              <Card key={record.id}>\n                <div className=\"p-lg\">\n                  <div className=\"flex items-start justify-between mb-md\">\n                    <div className=\"flex items-center gap-sm\">\n                      <div className={`h-10 w-10 rounded-full flex items-center justify-center bg-${color}-100`}>\n                        <IconComponent className={`h-5 w-5 text-${color}-600`} />\n                      </div>\n                      <div>\n                        <h3 className=\"text-body text-heading-4\">{record.title}</h3>\n                        {record.description ? (\n                          <p className=\"text-body-sm color-muted\">{record.description}</p>\n                        ) : null}\n                        <div className=\"flex items-center gap-sm mt-xs\">\n                          <Badge variant=\"outline\">\n                            {record.record_type.charAt(0).toUpperCase() + record.record_type.slice(1)}\n                          </Badge>\n                          {record.severity ? (\n                            <Badge variant={getSeverityBadgeVariant(record.severity)}>\n                              {record.severity.charAt(0).toUpperCase() + record.severity.slice(1)}\n                            </Badge>\n                          ) : null}\n                          {!record.is_active ? <Badge variant=\"secondary\">Inactive</Badge> : null}\n                          {isExpiring ? <Badge variant=\"destructive\">Expiring Soon</Badge> : null}\n                        </div>\n                      </div>\n                    </div>\n                    <div className=\"flex items-center gap-sm\">\n                      <Button variant=\"outline\" onClick={() => handleEdit(record)}>\n                        <Edit className=\"h-4 w-4\" />\n                      </Button>\n                      <Button variant=\"outline\" onClick={() => void handleDelete(record.id)}>\n                        <Trash2 className=\"h-4 w-4\" />\n                      </Button>\n                    </div>\n                  </div>\n\n                  {record.notes ? (\n                    <div className=\"mb-md p-sm bg-secondary rounded-lg\">\n                      <p className=\"text-body-sm\">{record.notes}</p>\n                    </div>\n                  ) : null}\n\n                  <div className=\"flex items-center justify-between text-body-sm color-muted\">\n                    <div className=\"flex items-center gap-md\">\n                      {record.provider ? <span>Provider: {record.provider}</span> : null}\n                      <div className=\"flex items-center gap-xs\">\n                        <Calendar className=\"h-4 w-4\" />\n                        {new Date(record.date_recorded).toLocaleDateString()}\n                      </div>\n                    </div>\n                    {record.expiry_date ? (\n                      <div className=\"flex items-center gap-xs\">\n                        <span>Expires: {new Date(record.expiry_date).toLocaleDateString()}</span>\n                      </div>\n                    ) : null}\n                  </div>\n                </div>\n              </Card>\n            );\n          })}\n        </div>\n      )}\n\n      <AppDrawer\n        open={isDrawerOpen}\n        onClose={handleClose}\n        record={editingRecord}\n        fields={[]}\n        mode={editingRecord ? 'edit' : 'create'}\n        title={editingRecord ? 'Edit Health Record' : 'Add New Health Record'}\n        loading={isSubmitting}\n        tabs={[\n          {\n            key: 'content',\n            label: 'Details',\n            content: (\n              <form onSubmit={handleSubmit} className=\"stack-md\">\n                {error ? <div className=\"text-body-sm color-destructive\">{error}</div> : null}\n\n                <div className=\"grid grid-cols-1 gap-md md:grid-cols-2\">\n                  <div className=\"stack-sm\">\n                    <label className=\"text-body-sm form-label\">Record Type *</label>\n                    <Select value={formData.recordType} onValueChange={handleSelectChange('recordType')}>\n                      <SelectTrigger>\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        {recordTypeOptions.map(option => (\n                          <SelectItem key={option.value} value={option.value}>\n                            {option.label}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                  </div>\n\n                  <div className=\"stack-sm\">\n                    <label className=\"text-body-sm form-label\">Severity</label>\n                    <Select value={formData.severity} onValueChange={handleSelectChange('severity')}>\n                      <SelectTrigger>\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        {severityOptions.map(option => (\n                          <SelectItem key={option.value} value={option.value}>\n                            {option.label}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                  </div>\n                </div>\n\n                <UnifiedInput\n                  id=\"title\"\n                  name=\"title\"\n                  label=\"Title *\"\n                  placeholder=\"Enter record title\"\n                  value={formData.title}\n                  onChange={handleInputChange}\n                  error={fieldErrors.title}\n                  required\n                />\n\n                <Textarea\n                  id=\"description\"\n                  name=\"description\"\n                  label=\"Description\"\n                  placeholder=\"Enter detailed description\"\n                  value={formData.description}\n                  onChange={handleTextareaChange}\n                  rows={3}\n                />\n\n                <div className=\"grid grid-cols-1 gap-md md:grid-cols-2\">\n                  <UnifiedInput\n                    id=\"dateRecorded\"\n                    name=\"dateRecorded\"\n                    label=\"Date Recorded\"\n                    type=\"date\"\n                    value={formData.dateRecorded}\n                    onChange={handleInputChange}\n                  />\n\n                  <UnifiedInput\n                    id=\"expiryDate\"\n                    name=\"expiryDate\"\n                    label=\"Expiry Date (Optional)\"\n                    type=\"date\"\n                    value={formData.expiryDate}\n                    onChange={handleInputChange}\n                    error={fieldErrors.expiryDate}\n                  />\n                </div>\n\n                <UnifiedInput\n                  id=\"provider\"\n                  name=\"provider\"\n                  label=\"Healthcare Provider\"\n                  placeholder=\"Doctor, clinic, or hospital name\"\n                  value={formData.provider}\n                  onChange={handleInputChange}\n                />\n\n                <UnifiedInput\n                  id=\"documentUrl\"\n                  name=\"documentUrl\"\n                  label=\"Document URL (Optional)\"\n                  placeholder=\"Link to medical document or report\"\n                  type=\"url\"\n                  value={formData.documentUrl}\n                  onChange={handleInputChange}\n                  error={fieldErrors.documentUrl}\n                />\n\n                <Textarea\n                  id=\"notes\"\n                  name=\"notes\"\n                  label=\"Notes\"\n                  placeholder=\"Additional notes or instructions\"\n                  value={formData.notes}\n                  onChange={handleTextareaChange}\n                  rows={3}\n                />\n\n                <div className=\"flex items-center gap-sm\">\n                  <input\n                    type=\"checkbox\"\n                    id=\"isActive\"\n                    name=\"isActive\"\n                    checked={formData.isActive}\n                    onChange={handleInputChange}\n                    className=\"rounded border-border\"\n                  />\n                  <label htmlFor=\"isActive\" className=\"text-body-sm form-label\">\n                    This record is currently active\n                  </label>\n                </div>\n\n                <div className=\"flex justify-end gap-sm pt-md\">\n                  <Button type=\"button\" variant=\"outline\" onClick={handleClose} disabled={isSubmitting}>\n                    Cancel\n                  </Button>\n                  <Button type=\"submit\" disabled={isSubmitDisabled}>\n                    {isSubmitting ? 'Saving…' : editingRecord ? 'Update Record' : 'Save Record'}\n                  </Button>\n                </div>\n              </form>\n            ),\n          },\n        ]}\n      />\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ghxstship/apps/web/app/(app)/(shell)/profile/health/HealthInfoClient.tsx","messages":[{"ruleId":"jsx-a11y/aria-props","severity":1,"message":"aria-: This attribute is an invalid ARIA attribute.","line":78,"column":161,"nodeType":"JSXAttribute","endLine":78,"endColumn":166}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { User, FileText, Settings, Award, Calendar, TrendingUp, Activity, Clock, Plus, Search, Play, Trash2 } from \"lucide-react\";\nimport React from \"react\";\n\nimport { Badge, Button, Card, UnifiedInput, cn } from '@ghxstship/ui';\nimport { useState, useEffect } from 'react'\nimport { createClient } from \"../../../../../lib/supabase/client\"\n\ninterface ClientProps {\n  className?: string\n}\n\nexport default function Client({ className }: ClientProps) {\n  const [data, setData] = useState<any[]>([])\n  const [loading, setLoading] = useState(true)\n\n  useEffect(() => {\n    let isMounted = true\n    const supabase = createClient()\n    async function fetchRecords() {\n      try {\n        setLoading(true)\n        const { data: auth } = await supabase.auth.getUser()\n        let items: unknown[] = []\n        if (auth?.user) {\n          const { data: profiles, error } = await supabase\n            .from('user_profiles')\n            .select('id, full_name, status')\n            .eq('id', auth.user.id)\n            .limit(1)\n          if (!error && profiles) {\n            const mockData: Array<{ id: string; full_name: string; status: string }> = [\n              { id: '1', full_name: 'John Doe', status: 'Active' },\n              { id: '2', full_name: 'Jane Smith', status: 'Active' },\n            ]\n            items = profiles.map((p: unknown) => ({\n              id: p.id,\n              name: p.full_name || 'Profile',\n              status: p.status || 'active'\n            }))\n          }\n        }\n        if (isMounted) setData(items)\n      } catch (err) {\n        // console.error('HealthInfoClient fetch error:', err)\n        if (isMounted) setData([])\n      } finally {\n        if (isMounted) setLoading(false)\n      }\n    }\n    fetchRecords()\n    return () => { isMounted = false }\n  }, [])\n\n  if (loading) {\n    return (\n      <div className={className}>\n        <Card className=\"p-md\">\n          <div className=\"animate-pulse space-y-md\">\n            <div className=\"h-4 bg-secondary rounded w-1/4\"></div>\n            <div className=\"h-4 bg-secondary rounded w-1/2\"></div>\n            <div className=\"h-4 bg-secondary rounded w-3/4\"></div>\n          </div>\n        </Card>\n      </div>\n    )\n  }\n\n  return (\n    <div className={className}>\n      <div className=\"mb-md\">\n        <h1 className=\"text-heading-lg text-heading-3 mb-sm\">Health Information</h1>\n        <p className=\"color-foreground-subtle\">View and manage your health-related profile information</p>\n      </div>\n\n      <div className=\"mb-md\">\n        <UnifiedInput onChange={(e: React.ChangeEvent<HTMLInputElement>) => {}} placeholder=\"Search health records...\" className=\"w-full sm:w-auto sm:max-w-sm\" aria- />\n      </div>\n\n      <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-md\">\n        {data.map((item: unknown) => (\n          <Card key={item.id} className=\"p-md\">\n            <div className=\"flex flex-col sm:flex-row items-center justify-between\">\n              <div>\n                <h2 className=\"text-body text-heading-3\">{item.name}</h2>\n                <p className=\"text-body-sm color-foreground-subtle\">ID: {item.id}</p>\n              </div>\n              <div className=\"flex flex-col sm:flex-row items-center gap-sm\">\n                <Badge variant={item.status === 'active' ? 'default' : 'secondary'}>\n                  {item.status}\n                </Badge>\n                <Button variant=\"default\" size=\"sm\" onClick={() => console.log(\"Edit clicked\")}>Edit</Button>\n              </div>\n            </div>\n          </Card>\n        ))}\n      </div>\n    </div>\n  )\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ghxstship/apps/web/app/(app)/(shell)/profile/health/views/HealthCalendarView.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useMemo has unnecessary dependencies: 'currentMonth' and 'currentYear'. Either exclude them or remove the dependency array.","line":52,"column":6,"nodeType":"ArrayExpression","endLine":52,"endColumn":65,"suggestions":[{"desc":"Update the dependencies array to be: [daysInMonth, startingDayOfWeek]","fix":{"range":[1454,1513],"text":"[daysInMonth, startingDayOfWeek]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { ChevronLeft, ChevronRight, Calendar, Clock, AlertTriangle, Bell, Activity } from \"lucide-react\";\nimport { useState, useMemo } from 'react';\nimport { Card, Button, Badge } from '@ghxstship/ui';\nimport type { HealthRecord } from '../types';\nimport {\n  RECORD_TYPE_LABELS,\n  formatDateShort,\n  getDaysUntilExpiry,\n  getExpiryUrgency,\n  getRecordTypeIcon,\n} from '../types';\n\ninterface HealthCalendarViewProps {\n  records: HealthRecord[];\n  loading: boolean;\n  onEdit: (record: HealthRecord) => void;\n}\n\nexport default function HealthCalendarView({\n  records,\n  loading,\n  onEdit,\n}: HealthCalendarViewProps) {\n  const [currentDate, setCurrentDate] = useState(new Date());\n\n  const currentYear = currentDate.getFullYear();\n  const currentMonth = currentDate.getMonth();\n\n  // Get first day of month and number of days\n  const firstDayOfMonth = new Date(currentYear, currentMonth, 1);\n  const lastDayOfMonth = new Date(currentYear, currentMonth + 1, 0);\n  const daysInMonth = lastDayOfMonth.getDate();\n  const startingDayOfWeek = firstDayOfMonth.getDay();\n\n  // Generate calendar days\n  const calendarDays = useMemo(() => {\n    const days = [];\n    \n    // Add empty cells for days before the first day of the month\n    for (let i = 0; i < startingDayOfWeek; i++) {\n      days.push(null);\n    }\n    \n    // Add days of the month\n    for (let day = 1; day <= daysInMonth; day++) {\n      days.push(day);\n    }\n    \n    return days;\n  }, [currentYear, currentMonth, daysInMonth, startingDayOfWeek]);\n\n  // Group records by date\n  const recordsByDate = useMemo(() => {\n    const grouped: Record<string, HealthRecord[]> = {};\n    \n    records.forEach(record => {\n      // Add to recorded date\n      const recordedDate = new Date(record.date_recorded);\n      if (recordedDate.getFullYear() === currentYear && recordedDate.getMonth() === currentMonth) {\n        const day = recordedDate.getDate();\n        const key = `recorded-${day}`;\n        if (!grouped[key]) grouped[key] = [];\n        grouped[key].push(record);\n      }\n      \n      // Add to expiry date if exists\n      if (record.expiry_date) {\n        const expiryDate = new Date(record.expiry_date);\n        if (expiryDate.getFullYear() === currentYear && expiryDate.getMonth() === currentMonth) {\n          const day = expiryDate.getDate();\n          const key = `expiry-${day}`;\n          if (!grouped[key]) grouped[key] = [];\n          grouped[key].push(record);\n        }\n      }\n    });\n    \n    return grouped;\n  }, [records, currentYear, currentMonth]);\n\n  const navigateMonth = (direction: 'prev' | 'next') => {\n    setCurrentDate(prev => {\n      const newDate = new Date(prev);\n      if (direction === 'prev') {\n        newDate.setMonth(prev.getMonth() - 1);\n      } else {\n        newDate.setMonth(prev.getMonth() + 1);\n      }\n      return newDate;\n    });\n  };\n\n  const goToToday = () => {\n    setCurrentDate(new Date());\n  };\n\n  const monthName = firstDayOfMonth.toLocaleDateString('en-US', { \n    month: 'long', \n    year: 'numeric' \n  });\n\n  if (loading) {\n    return (\n      <Card className=\"p-6\">\n        <div className=\"space-y-4\">\n          <div className=\"h-8 w-48 bg-muted animate-pulse rounded\" />\n          <div className=\"grid grid-cols-7 gap-2\">\n            {[...Array(35)].map((_, i) => (\n              <div key={i} className=\"h-24 bg-muted animate-pulse rounded\" />\n            ))}\n          </div>\n        </div>\n      </Card>\n    );\n  }\n\n  return (\n    <div className=\"space-y-4\">\n      {/* Header */}\n      <Card className=\"p-4\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center gap-4\">\n            <h2 className=\"text-xl font-semibold flex items-center gap-2\">\n              <Calendar className=\"h-5 w-5\" />\n              {monthName}\n            </h2>\n            <Button variant=\"outline\" size=\"sm\" onClick={goToToday}>\n              Today\n            </Button>\n          </div>\n          <div className=\"flex items-center gap-2\">\n            <Button variant=\"outline\" size=\"sm\" onClick={() => navigateMonth('prev')}>\n              <ChevronLeft className=\"h-4 w-4\" />\n            </Button>\n            <Button variant=\"outline\" size=\"sm\" onClick={() => navigateMonth('next')}>\n              <ChevronRight className=\"h-4 w-4\" />\n            </Button>\n          </div>\n        </div>\n      </Card>\n\n      {/* Legend */}\n      <Card className=\"p-4\">\n        <div className=\"flex items-center gap-6 text-sm\">\n          <div className=\"flex items-center gap-2\">\n            <div className=\"w-3 h-3 bg-blue-500 rounded-full\" />\n            <span>Recorded</span>\n          </div>\n          <div className=\"flex items-center gap-2\">\n            <div className=\"w-3 h-3 bg-orange-500 rounded-full\" />\n            <span>Expires</span>\n          </div>\n          <div className=\"flex items-center gap-2\">\n            <div className=\"w-3 h-3 bg-red-500 rounded-full\" />\n            <span>Expired</span>\n          </div>\n          <div className=\"flex items-center gap-2\">\n            <Bell className=\"h-3 w-3\" />\n            <span>Reminder</span>\n          </div>\n        </div>\n      </Card>\n\n      {/* Calendar */}\n      <Card className=\"p-4\">\n        <div className=\"space-y-4\">\n          {/* Day headers */}\n          <div className=\"grid grid-cols-7 gap-2\">\n            {['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'].map(day => (\n              <div key={day} className=\"p-2 text-center font-medium text-muted-foreground\">\n                {day}\n              </div>\n            ))}\n          </div>\n\n          {/* Calendar grid */}\n          <div className=\"grid grid-cols-7 gap-2\">\n            {calendarDays.map((day, index) => {\n              if (day === null) {\n                return <div key={index} className=\"h-24\" />;\n              }\n\n              const recordedRecords = recordsByDate[`recorded-${day}`] || [];\n              const expiryRecords = recordsByDate[`expiry-${day}`] || [];\n              const allDayRecords = [...recordedRecords, ...expiryRecords];\n              \n              const isToday = new Date().toDateString() === new Date(currentYear, currentMonth, day).toDateString();\n              \n              return (\n                <div\n                  key={day}\n                  className={`h-24 p-1 border rounded-lg ${\n                    isToday ? 'bg-primary/10 border-primary' : 'border-border'\n                  } ${allDayRecords.length > 0 ? 'hover:bg-muted/50' : ''}`}\n                >\n                  <div className=\"h-full flex flex-col\">\n                    <div className=\"flex items-center justify-between mb-1\">\n                      <span className={`text-sm font-medium ${\n                        isToday ? 'text-primary' : 'text-foreground'\n                      }`}>\n                        {day}\n                      </span>\n                      {allDayRecords.some(r => r.reminder_enabled) && (\n                        <Bell className=\"h-3 w-3 text-muted-foreground\" />\n                      )}\n                    </div>\n                    \n                    <div className=\"flex-1 space-y-1 overflow-hidden\">\n                      {/* Recorded events */}\n                      {recordedRecords.slice(0, 2).map((record, i) => (\n                        <button\n                          key={`recorded-${record.id}-${i}`}\n                          onClick={() => onEdit(record)}\n                          className=\"w-full text-left\"\n                        >\n                          <div className=\"flex items-center gap-1 p-1 bg-blue-100 text-blue-800 rounded text-xs hover:bg-blue-200 transition-colors\">\n                            <span>{getRecordTypeIcon(record.record_type)}</span>\n                            <span className=\"truncate\">{record.title}</span>\n                          </div>\n                        </button>\n                      ))}\n                      \n                      {/* Expiry events */}\n                      {expiryRecords.slice(0, 2 - recordedRecords.length).map((record, i) => {\n                        const daysUntilExpiry = getDaysUntilExpiry(record.expiry_date!);\n                        const isExpired = daysUntilExpiry < 0;\n                        const isExpiringSoon = daysUntilExpiry <= 7 && daysUntilExpiry >= 0;\n                        \n                        return (\n                          <button\n                            key={`expiry-${record.id}-${i}`}\n                            onClick={() => onEdit(record)}\n                            className=\"w-full text-left\"\n                          >\n                            <div className={`flex items-center gap-1 p-1 rounded text-xs hover:opacity-80 transition-colors ${\n                              isExpired \n                                ? 'bg-red-100 text-red-800' \n                                : isExpiringSoon \n                                ? 'bg-orange-100 text-orange-800'\n                                : 'bg-yellow-100 text-yellow-800'\n                            }`}>\n                              {isExpired ? (\n                                <AlertTriangle className=\"h-3 w-3\" />\n                              ) : (\n                                <Clock className=\"h-3 w-3\" />\n                              )}\n                              <span className=\"truncate\">{record.title}</span>\n                            </div>\n                          </button>\n                        );\n                      })}\n                      \n                      {/* Show more indicator */}\n                      {allDayRecords.length > 2 && (\n                        <div className=\"text-xs text-muted-foreground text-center\">\n                          +{allDayRecords.length - 2} more\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                </div>\n              );\n            })}\n          </div>\n        </div>\n      </Card>\n\n      {/* Upcoming Events */}\n      {records.length > 0 && (\n        <Card className=\"p-4\">\n          <h3 className=\"font-semibold mb-4 flex items-center gap-2\">\n            <Clock className=\"h-4 w-4\" />\n            Upcoming Events\n          </h3>\n          <div className=\"space-y-2\">\n            {records\n              .filter(record => {\n                if (!record.expiry_date) return false;\n                const daysUntil = getDaysUntilExpiry(record.expiry_date);\n                return daysUntil >= 0 && daysUntil <= 30;\n              })\n              .sort((a, b) => getDaysUntilExpiry(a.expiry_date!) - getDaysUntilExpiry(b.expiry_date!))\n              .slice(0, 5)\n              .map(record => {\n                const daysUntil = getDaysUntilExpiry(record.expiry_date!);\n                const urgency = getExpiryUrgency(daysUntil);\n                \n                return (\n                  <button\n                    key={record.id}\n                    onClick={() => onEdit(record)}\n                    className=\"w-full text-left p-3 border rounded-lg hover:bg-muted/50 transition-colors\"\n                  >\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center gap-3\">\n                        <span className=\"text-lg\">{getRecordTypeIcon(record.record_type)}</span>\n                        <div>\n                          <p className=\"font-medium\">{record.title}</p>\n                          <p className=\"text-sm text-muted-foreground\">\n                            {RECORD_TYPE_LABELS[record.record_type]}\n                            {record.provider && ` • ${record.provider}`}\n                          </p>\n                        </div>\n                      </div>\n                      <div className=\"text-right\">\n                        <Badge \n                          variant={urgency === 'critical' ? 'destructive' : 'outline'}\n                          className=\"mb-1\"\n                        >\n                          {daysUntil === 0 ? 'Today' : daysUntil === 1 ? 'Tomorrow' : `${daysUntil} days`}\n                        </Badge>\n                        <p className=\"text-xs text-muted-foreground\">\n                          {formatDateShort(record.expiry_date!)}\n                        </p>\n                      </div>\n                    </div>\n                  </button>\n                );\n              })}\n            \n            {records.filter(r => r.expiry_date && getDaysUntilExpiry(r.expiry_date) >= 0 && getDaysUntilExpiry(r.expiry_date) <= 30).length === 0 && (\n              <div className=\"text-center py-8 text-muted-foreground\">\n                <Activity className=\"h-8 w-8 mx-auto mb-2 opacity-50\" />\n                <p>No upcoming events in the next 30 days</p>\n              </div>\n            )}\n          </div>\n        </Card>\n      )}\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ghxstship/apps/web/app/(app)/(shell)/profile/history/views/HistoryFormView.tsx","messages":[{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Building' is not defined.","line":115,"column":16,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":115,"endColumn":24},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'X' is not defined.","line":403,"column":28,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":403,"endColumn":29},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'X' is not defined.","line":451,"column":28,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":451,"endColumn":29},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'X' is not defined.","line":499,"column":28,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":499,"endColumn":29},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Eye' is not defined.","line":522,"column":28,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":522,"endColumn":31},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Save' is not defined.","line":535,"column":16,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":535,"endColumn":20}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\nimport { User, FileText, Settings, Award, Calendar, TrendingUp, Activity, Clock, Plus, Search, Play, Trash2 } from \"lucide-react\";\nimport { useState } from 'react';\nimport {\n  Button,\n  Card,\n  Input,\n  Label,\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n  Textarea,\n  Badge,\n  Switch,\n} from '@ghxstship/ui';\nimport type { HistoryEntry, HistoryEntryFormData } from '../types';\nimport {\n  ENTRY_TYPE_LABELS,\n  EMPLOYMENT_TYPE_LABELS,\n  EDUCATION_LEVEL_LABELS,\n  PROJECT_STATUS_LABELS,\n  VISIBILITY_LABELS,\n  COMMON_SKILLS,\n  formatDate,\n  formatDateRange,\n  calculateDuration,\n  getEntryTypeIcon,\n} from '../types';\n\ninterface HistoryFormViewProps {\n  entry: HistoryEntry | null;\n  formData: HistoryEntryFormData;\n  formErrors: Record<string, string>;\n  loading: boolean;\n  saving: boolean;\n  onFieldChange: (field: keyof HistoryEntryFormData, value: unknown) => void;\n  onSave: () => void;\n}\n\nexport default function HistoryFormView({\n  entry,\n  formData,\n  formErrors,\n  loading,\n  saving,\n  onFieldChange,\n  onSave,\n}: HistoryFormViewProps) {\n  const [skillInput, setSkillInput] = useState('');\n  const [achievementInput, setAchievementInput] = useState('');\n  const [tagInput, setTagInput] = useState('');\n\n  const handleAddSkill = () => {\n    if (skillInput.trim() && !formData.skills_gained.includes(skillInput.trim())) {\n      onFieldChange('skills_gained', [...formData.skills_gained, skillInput.trim()]);\n      setSkillInput('');\n    }\n  };\n\n  const handleRemoveSkill = (skill: string) => {\n    onFieldChange('skills_gained', formData.skills_gained.filter(s => s !== skill));\n  };\n\n  const handleAddAchievement = () => {\n    if (achievementInput.trim() && !formData.achievements.includes(achievementInput.trim())) {\n      onFieldChange('achievements', [...formData.achievements, achievementInput.trim()]);\n      setAchievementInput('');\n    }\n  };\n\n  const handleRemoveAchievement = (achievement: string) => {\n    onFieldChange('achievements', formData.achievements.filter(a => a !== achievement));\n  };\n\n  const handleAddTag = () => {\n    if (tagInput.trim() && !formData.tags.includes(tagInput.trim())) {\n      onFieldChange('tags', [...formData.tags, tagInput.trim()]);\n      setTagInput('');\n    }\n  };\n\n  const handleRemoveTag = (tag: string) => {\n    onFieldChange('tags', formData.tags.filter(t => t !== tag));\n  };\n\n  const handleCommonSkillClick = (skill: string) => {\n    if (!formData.skills_gained.includes(skill)) {\n      onFieldChange('skills_gained', [...formData.skills_gained, skill]);\n    }\n  };\n\n  if (loading) {\n    return (\n      <Card className=\"p-6\">\n        <div className=\"space-y-4\">\n          {[...Array(10)].map((_, i) => (\n            <div key={i} className=\"space-y-2\">\n              <div className=\"h-4 w-24 bg-muted animate-pulse rounded\" />\n              <div className=\"h-10 bg-muted animate-pulse rounded\" />\n            </div>\n          ))}\n        </div>\n      </Card>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <Card className=\"p-6\">\n        <div className=\"space-y-6\">\n          <div>\n            <h3 className=\"text-lg font-semibold mb-4 flex items-center gap-2\">\n              <Building className=\"h-5 w-5\" />\n              Basic Information\n            </h3>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"entry_type\">\n                  Entry Type <span className=\"text-destructive\">*</span>\n                </Label>\n                <Select\n                  value={formData.entry_type}\n                  onValueChange={(value) => onFieldChange('entry_type', value)}\n                >\n                  <SelectTrigger id=\"entry_type\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {Object.entries(ENTRY_TYPE_LABELS).map(([value, label]) => (\n                      <SelectItem key={value} value={value}>\n                        <span className=\"flex items-center gap-2\">\n                          <span>{getEntryTypeIcon(value as unknown)}</span>\n                          {label}\n                        </span>\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"title\">\n                  Title/Position <span className=\"text-destructive\">*</span>\n                </Label>\n                <Input\n                  id=\"title\"\n                  value={formData.title}\n                  onChange={(e) => onFieldChange('title', e.target.value)}\n                  placeholder=\"Software Engineer, Bachelor's Degree, etc.\"\n                  className={formErrors.title ? 'border-destructive' : ''}\n                />\n                {formErrors.title && (\n                  <p className=\"text-sm text-destructive\">{formErrors.title}</p>\n                )}\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"organization\">Organization/Company</Label>\n                <Input\n                  id=\"organization\"\n                  value={formData.organization}\n                  onChange={(e) => onFieldChange('organization', e.target.value)}\n                  placeholder=\"Company name, university, etc.\"\n                />\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"location\">Location</Label>\n                <Input\n                  id=\"location\"\n                  value={formData.location}\n                  onChange={(e) => onFieldChange('location', e.target.value)}\n                  placeholder=\"City, State/Country\"\n                />\n              </div>\n\n              <div className=\"space-y-2 md:col-span-2\">\n                <Label htmlFor=\"description\">Description</Label>\n                <Textarea\n                  id=\"description\"\n                  value={formData.description}\n                  onChange={(e) => onFieldChange('description', e.target.value)}\n                  placeholder=\"Describe your role, responsibilities, coursework, project details...\"\n                  rows={4}\n                />\n              </div>\n            </div>\n          </div>\n\n          <div>\n            <h3 className=\"text-lg font-semibold mb-4 flex items-center gap-2\">\n              <Calendar className=\"h-5 w-5\" />\n              Timeline\n            </h3>\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"start_date\">\n                  Start Date <span className=\"text-destructive\">*</span>\n                </Label>\n                <Input\n                  id=\"start_date\"\n                  type=\"date\"\n                  value={formData.start_date}\n                  onChange={(e) => onFieldChange('start_date', e.target.value)}\n                  className={formErrors.start_date ? 'border-destructive' : ''}\n                />\n                {formErrors.start_date && (\n                  <p className=\"text-sm text-destructive\">{formErrors.start_date}</p>\n                )}\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"end_date\">End Date</Label>\n                <Input\n                  id=\"end_date\"\n                  type=\"date\"\n                  value={formData.end_date}\n                  onChange={(e) => onFieldChange('end_date', e.target.value)}\n                  disabled={formData.is_current}\n                  className={formErrors.end_date ? 'border-destructive' : ''}\n                />\n                {formErrors.end_date && (\n                  <p className=\"text-sm text-destructive\">{formErrors.end_date}</p>\n                )}\n              </div>\n\n              <div className=\"flex items-center justify-center\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"is_current\">Current Position</Label>\n                  <div className=\"flex items-center space-x-2\">\n                    <Switch\n                      id=\"is_current\"\n                      checked={formData.is_current}\n                      onCheckedChange={(checked) => {\n                        onFieldChange('is_current', checked);\n                        if (checked) {\n                          onFieldChange('end_date', '');\n                        }\n                      }}\n                    />\n                    <Label htmlFor=\"is_current\" className=\"text-sm\">\n                      I currently work/study here\n                    </Label>\n                  </div>\n                </div>\n              </div>\n            </div>\n\n            {formData.start_date && (\n              <div className=\"mt-4 p-3 bg-muted/50 rounded-lg\">\n                <p className=\"text-sm text-muted-foreground\">\n                  Duration: {calculateDuration(formData.start_date, formData.end_date, formData.is_current)}\n                  {' • '}\n                  {formatDateRange(formData.start_date, formData.end_date, formData.is_current)}\n                </p>\n              </div>\n            )}\n          </div>\n\n          {/* Type-specific fields */}\n          {formData.entry_type === 'employment' && (\n            <div>\n              <h3 className=\"text-lg font-semibold mb-4\">Employment Details</h3>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"employment_type\">Employment Type</Label>\n                  <Select\n                    value={formData.employment_type}\n                    onValueChange={(value) => onFieldChange('employment_type', value)}\n                  >\n                    <SelectTrigger id=\"employment_type\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {Object.entries(EMPLOYMENT_TYPE_LABELS).map(([value, label]) => (\n                        <SelectItem key={value} value={value}>\n                          {label}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"salary_range\">Salary Range (Optional)</Label>\n                  <Input\n                    id=\"salary_range\"\n                    value={formData.salary_range}\n                    onChange={(e) => onFieldChange('salary_range', e.target.value)}\n                    placeholder=\"$50,000 - $70,000\"\n                  />\n                </div>\n              </div>\n            </div>\n          )}\n\n          {formData.entry_type === 'education' && (\n            <div>\n              <h3 className=\"text-lg font-semibold mb-4\">Education Details</h3>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"education_level\">Education Level</Label>\n                  <Select\n                    value={formData.education_level}\n                    onValueChange={(value) => onFieldChange('education_level', value)}\n                  >\n                    <SelectTrigger id=\"education_level\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {Object.entries(EDUCATION_LEVEL_LABELS).map(([value, label]) => (\n                        <SelectItem key={value} value={value}>\n                          {label}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"grade_gpa\">Grade/GPA (Optional)</Label>\n                  <Input\n                    id=\"grade_gpa\"\n                    value={formData.grade_gpa}\n                    onChange={(e) => onFieldChange('grade_gpa', e.target.value)}\n                    placeholder=\"3.8 GPA, First Class Honours, etc.\"\n                  />\n                </div>\n              </div>\n            </div>\n          )}\n\n          {formData.entry_type === 'project' && (\n            <div>\n              <h3 className=\"text-lg font-semibold mb-4\">Project Details</h3>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"project_status\">Project Status</Label>\n                  <Select\n                    value={formData.project_status}\n                    onValueChange={(value) => onFieldChange('project_status', value)}\n                  >\n                    <SelectTrigger id=\"project_status\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {Object.entries(PROJECT_STATUS_LABELS).map(([value, label]) => (\n                        <SelectItem key={value} value={value}>\n                          {label}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"website_url\">Project URL (Optional)</Label>\n                  <Input\n                    id=\"website_url\"\n                    type=\"url\"\n                    value={formData.website_url}\n                    onChange={(e) => onFieldChange('website_url', e.target.value)}\n                    placeholder=\"https://github.com/user/project\"\n                    className={formErrors.website_url ? 'border-destructive' : ''}\n                  />\n                  {formErrors.website_url && (\n                    <p className=\"text-sm text-destructive\">{formErrors.website_url}</p>\n                  )}\n                </div>\n              </div>\n            </div>\n          )}\n\n          <div>\n            <h3 className=\"text-lg font-semibold mb-4\">Skills & Achievements</h3>\n            <div className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <Label>Skills Gained</Label>\n                <div className=\"flex gap-2\">\n                  <Input\n                    value={skillInput}\n                    onChange={(e) => setSkillInput(e.target.value)}\n                    placeholder=\"Add a skill...\"\n                    onKeyPress={(e) => e.key === 'Enter' && (e.preventDefault(), handleAddSkill())}\n                  />\n                  <Button type=\"button\" onClick={handleAddSkill} size=\"sm\">\n                    <Plus className=\"h-4 w-4\" />\n                  </Button>\n                </div>\n                \n                {formData.skills_gained.length > 0 && (\n                  <div className=\"flex flex-wrap gap-2 mt-2\">\n                    {formData.skills_gained.map((skill) => (\n                      <Badge key={skill} variant=\"secondary\" className=\"gap-1\">\n                        {skill}\n                        <button\n                          type=\"button\"\n                          onClick={() => handleRemoveSkill(skill)}\n                          className=\"ml-1 hover:text-destructive\"\n                        >\n                          <X className=\"h-3 w-3\" />\n                        </button>\n                      </Badge>\n                    ))}\n                  </div>\n                )}\n\n                <div className=\"mt-2\">\n                  <p className=\"text-sm text-muted-foreground mb-2\">Common skills:</p>\n                  <div className=\"flex flex-wrap gap-1\">\n                    {COMMON_SKILLS.slice(0, 10).map((skill) => (\n                      <Badge\n                        key={skill}\n                        variant=\"outline\"\n                        className=\"cursor-pointer hover:bg-primary hover:text-primary-foreground\"\n                        onClick={() => handleCommonSkillClick(skill)}\n                      >\n                        {skill}\n                      </Badge>\n                    ))}\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label>Achievements & Accomplishments</Label>\n                <div className=\"flex gap-2\">\n                  <Input\n                    value={achievementInput}\n                    onChange={(e) => setAchievementInput(e.target.value)}\n                    placeholder=\"Add an achievement...\"\n                    onKeyPress={(e) => e.key === 'Enter' && (e.preventDefault(), handleAddAchievement())}\n                  />\n                  <Button type=\"button\" onClick={handleAddAchievement} size=\"sm\">\n                    <Plus className=\"h-4 w-4\" />\n                  </Button>\n                </div>\n                \n                {formData.achievements.length > 0 && (\n                  <div className=\"space-y-2 mt-2\">\n                    {formData.achievements.map((achievement, index) => (\n                      <div key={index} className=\"flex items-start gap-2 p-2 border rounded\">\n                        <span className=\"text-sm flex-1\">{achievement}</span>\n                        <button\n                          type=\"button\"\n                          onClick={() => handleRemoveAchievement(achievement)}\n                          className=\"text-muted-foreground hover:text-destructive\"\n                        >\n                          <X className=\"h-4 w-4\" />\n                        </button>\n                      </div>\n                    ))}\n                  </div>\n                )}\n              </div>\n            </div>\n          </div>\n\n          <div>\n            <h3 className=\"text-lg font-semibold mb-4\">Additional Information</h3>\n            <div className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"references\">References (Optional)</Label>\n                <Textarea\n                  id=\"references\"\n                  value={formData.references}\n                  onChange={(e) => onFieldChange('references', e.target.value)}\n                  placeholder=\"Contact information for references...\"\n                  rows={3}\n                />\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label>Tags</Label>\n                <div className=\"flex gap-2\">\n                  <Input\n                    value={tagInput}\n                    onChange={(e) => setTagInput(e.target.value)}\n                    placeholder=\"Add a tag...\"\n                    onKeyPress={(e) => e.key === 'Enter' && (e.preventDefault(), handleAddTag())}\n                  />\n                  <Button type=\"button\" onClick={handleAddTag} size=\"sm\">\n                    <Plus className=\"h-4 w-4\" />\n                  </Button>\n                </div>\n                \n                {formData.tags.length > 0 && (\n                  <div className=\"flex flex-wrap gap-2 mt-2\">\n                    {formData.tags.map((tag) => (\n                      <Badge key={tag} variant=\"outline\" className=\"gap-1\">\n                        {tag}\n                        <button\n                          type=\"button\"\n                          onClick={() => handleRemoveTag(tag)}\n                          className=\"ml-1 hover:text-destructive\"\n                        >\n                          <X className=\"h-3 w-3\" />\n                        </button>\n                      </Badge>\n                    ))}\n                  </div>\n                )}\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"visibility\">\n                  Visibility <span className=\"text-destructive\">*</span>\n                </Label>\n                <Select\n                  value={formData.visibility}\n                  onValueChange={(value) => onFieldChange('visibility', value)}\n                >\n                  <SelectTrigger id=\"visibility\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {Object.entries(VISIBILITY_LABELS).map(([value, label]) => (\n                      <SelectItem key={value} value={value}>\n                        <span className=\"flex items-center gap-2\">\n                          <Eye className=\"h-4 w-4\" />\n                          {label}\n                        </span>\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"flex justify-end pt-4 border-t\">\n            <Button onClick={onSave} disabled={saving}>\n              <Save className=\"mr-2 h-4 w-4\" />\n              {saving ? 'Saving...' : entry ? 'Update Entry' : 'Create Entry'}\n            </Button>\n          </div>\n        </div>\n      </Card>\n\n      {entry && (\n        <Card className=\"p-4 bg-muted/50\">\n          <div className=\"flex items-center justify-between text-sm\">\n            <span className=\"text-muted-foreground\">\n              Created: {formatDate(entry.created_at)}\n            </span>\n            {entry.updated_at !== entry.created_at && (\n              <span className=\"text-muted-foreground\">\n                Updated: {formatDate(entry.updated_at)}\n              </span>\n            )}\n          </div>\n        </Card>\n      )}\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ghxstship/apps/web/app/(app)/(shell)/profile/overview/ProfileClient.tsx","messages":[{"ruleId":"@next/next/no-assign-module-variable","severity":2,"message":"Do not assign to the variable `module`. See: https://nextjs.org/docs/messages/no-assign-module-variable","line":175,"column":5,"nodeType":"VariableDeclaration","endLine":175,"endColumn":66}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { User, Briefcase, Award, Phone, Shield, Heart, Clock, Plane, Shirt, Activity, FileText, Star, AlertTriangle, RefreshCw } from \"lucide-react\";\nimport { useState, useMemo, useCallback } from 'react';\nimport { createBrowserClient } from '@ghxstship/auth';\nimport {\n  Tabs,\n  TabsList,\n  TabsTrigger,\n  TabsContent,\n  Card,\n  Badge,\n  Button,\n  useToast\n} from '@ghxstship/ui';\n\n// Import all Profile module clients\nimport ProfileOverviewClient from './ProfileOverviewClient';\nimport BasicInfoClient from '../basic/BasicInfoClient';\nimport ContactClient from '../contact/ContactClient';\nimport ProfessionalClient from '../professional/ProfessionalClient';\nimport PerformanceClient from '../performance/PerformanceClient';\nimport TravelClient from '../travel/TravelClient';\nimport UniformClient from '../uniform/UniformClient';\nimport CertificationsClient from '../certifications/CertificationsClient';\nimport EndorsementsClient from '../endorsements/EndorsementsClient';\nimport HealthClient from '../health/HealthClient';\nimport EmergencyClient from '../emergency/EmergencyClient';\nimport ActivityClient from '../activity/ActivityClient';\nimport HistoryClient from '../history/HistoryClient';\nimport JobHistoryClient from '../job-history/JobHistoryClient';\n\n// Profile module configuration\nconst PROFILE_MODULES = [\n  {\n    id: 'overview',\n    label: 'Overview',\n    icon: User,\n    description: 'Profile summary and key information',\n    component: ProfileOverviewClient,\n    color: 'blue'\n  },\n  {\n    id: 'basic',\n    label: 'Basic Info',\n    icon: FileText,\n    description: 'Personal information and demographics',\n    component: BasicInfoClient,\n    color: 'green'\n  },\n  {\n    id: 'contact',\n    label: 'Contact',\n    icon: Phone,\n    description: 'Contact information and addresses',\n    component: ContactClient,\n    color: 'purple'\n  },\n  {\n    id: 'professional',\n    label: 'Professional',\n    icon: Briefcase,\n    description: 'Career and professional information',\n    component: ProfessionalClient,\n    color: 'indigo'\n  },\n  {\n    id: 'performance',\n    label: 'Performance',\n    icon: Star,\n    description: 'Performance reviews and goals',\n    component: PerformanceClient,\n    color: 'yellow'\n  },\n  {\n    id: 'travel',\n    label: 'Travel',\n    icon: Plane,\n    description: 'Travel history and preferences',\n    component: TravelClient,\n    color: 'cyan'\n  },\n  {\n    id: 'uniform',\n    label: 'Uniform',\n    icon: Shirt,\n    description: 'Uniform sizing and equipment',\n    component: UniformClient,\n    color: 'orange'\n  },\n  {\n    id: 'certifications',\n    label: 'Certifications',\n    icon: Award,\n    description: 'Certifications and qualifications',\n    component: CertificationsClient,\n    color: 'emerald'\n  },\n  {\n    id: 'endorsements',\n    label: 'Endorsements',\n    icon: Star,\n    description: 'Peer endorsements and recommendations',\n    component: EndorsementsClient,\n    color: 'pink'\n  },\n  {\n    id: 'health',\n    label: 'Health',\n    icon: Heart,\n    description: 'Health information and medical records',\n    component: HealthClient,\n    color: 'red'\n  },\n  {\n    id: 'emergency',\n    label: 'Emergency',\n    icon: AlertTriangle,\n    description: 'Emergency contacts and information',\n    component: EmergencyClient,\n    color: 'red'\n  },\n  {\n    id: 'activity',\n    label: 'Activity',\n    icon: Activity,\n    description: 'Activity log and recent actions',\n    component: ActivityClient,\n    color: 'gray'\n  },\n  {\n    id: 'history',\n    label: 'History',\n    icon: Clock,\n    description: 'Profile change history',\n    component: HistoryClient,\n    color: 'slate'\n  },\n  {\n    id: 'job-history',\n    label: 'Job History',\n    icon: Briefcase,\n    description: 'Employment history and positions',\n    component: JobHistoryClient,\n    color: 'teal'\n  }\n] as const;\n\nexport default function ProfileClient({ orgId, userId, userEmail }: { orgId: string; userId: string; userEmail: string }) {\n  const supabase = useMemo(() => createBrowserClient(), []);\n  const { addToast } = useToast();\n  const [activeTab, setActiveTab] = useState('overview');\n  const [refreshing, setRefreshing] = useState(false);\n\n  const handleRefresh = useCallback(async () => {\n    setRefreshing(true);\n    addToast({\n      title: 'Refreshing Profile Data',\n      description: 'Updating all profile modules...',\n      type: 'info',\n    });\n    \n    // Simulate refresh delay\n    await new Promise(resolve => setTimeout(resolve, 1000));\n    \n    setRefreshing(false);\n    addToast({\n      title: 'Profile Data Refreshed',\n      description: 'All profile modules have been updated successfully.',\n      type: 'success',\n    });\n  }, [addToast]);\n\n  const renderActiveModule = () => {\n    const module = PROFILE_MODULES.find(m => m.id === activeTab);\n    if (!module) return null;\n\n    const Component = module.component;\n    return <Component orgId={orgId} userId={userId} />;\n  };\n\n  return (\n    <div className=\"h-full flex flex-col\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between mb-lg\">\n        <div>\n          <h1 className=\"text-2xl font-bold\">Profile Management</h1>\n          <p className=\"text-muted-foreground\">\n            Comprehensive profile information and settings\n          </p>\n        </div>\n        <div className=\"flex items-center gap-sm\">\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={handleRefresh}\n            disabled={refreshing}\n          >\n            <RefreshCw className={`h-4 w-4 mr-sm ${refreshing ? 'animate-spin' : ''}`} />\n            Refresh All\n          </Button>\n        </div>\n      </div>\n\n      {/* Tab Navigation */}\n      <Tabs value={activeTab} onValueChange={setActiveTab} className=\"flex-1 flex flex-col\">\n        <TabsList className=\"grid grid-cols-7 lg:grid-cols-14 gap-1 h-auto p-1 bg-muted\">\n          {PROFILE_MODULES.map((module) => {\n            const Icon = module.icon;\n            return (\n              <TabsTrigger\n                key={module.id}\n                value={module.id}\n                className=\"flex flex-col items-center gap-1 p-2 h-auto data-[state=active]:bg-background\"\n              >\n                <Icon className=\"h-4 w-4\" />\n                <span className=\"text-xs font-medium\">{module.label}</span>\n              </TabsTrigger>\n            );\n          })}\n        </TabsList>\n\n        {/* Tab Content */}\n        <div className=\"flex-1 mt-lg\">\n          {PROFILE_MODULES.map((module) => (\n            <TabsContent\n              key={module.id}\n              value={module.id}\n              className=\"h-full m-0 data-[state=inactive]:hidden\"\n            >\n              <Card className=\"h-full\">\n                <div className=\"p-lg h-full\">\n                  <div className=\"flex items-center gap-sm mb-md\">\n                    <module.icon className=\"h-5 w-5 text-primary\" />\n                    <div>\n                      <h2 className=\"text-lg font-semibold\">{module.label}</h2>\n                      <p className=\"text-sm text-muted-foreground\">{module.description}</p>\n                    </div>\n                  </div>\n                  \n                  <div className=\"h-full\">\n                    {renderActiveModule()}\n                  </div>\n                </div>\n              </Card>\n            </TabsContent>\n          ))}\n        </div>\n      </Tabs>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ghxstship/apps/web/app/(app)/(shell)/profile/performance/CreatePerformanceReviewClient-old.tsx","messages":[{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Button' is not defined.","line":131,"column":8,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":131,"endColumn":14},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Button' is not defined.","line":396,"column":14,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":396,"endColumn":20},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Button' is not defined.","line":397,"column":14,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":397,"endColumn":20}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\n\nimport { Plus } from \"lucide-react\";\nimport { useMemo, useState } from 'react';\nimport { createBrowserClient } from '@ghxstship/auth';\nimport { useRouter } from 'next/navigation';\nimport { useForm } from 'react-hook-form';\n// import { z } from 'zod';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport AppDrawer from '@/app/_components/shared/AppDrawer';\nconst schema = z.object({\n  review_period: z.string().min(2, 'Review period is required'),\n  reviewer_name: z.string().min(2, 'Reviewer name is required'),\n  reviewer_title: z.string().min(2, 'Reviewer title is required'),\n  overall_rating: z.number().min(1).max(5),\n  technical_skills: z.number().min(1).max(5),\n  communication: z.number().min(1).max(5),\n  teamwork: z.number().min(1).max(5),\n  leadership: z.number().min(1).max(5),\n  problem_solving: z.number().min(1).max(5),\n  adaptability: z.number().min(1).max(5),\n  strengths: z.string().min(10, 'Strengths are required'),\n  improvement_areas: z.string().min(10, 'Improvement areas are required'),\n  goals_achieved: z.string().optional(),\n  future_goals: z.string().optional(),\n  review_date: z.string().min(1, 'Review date is required'),\n  next_review_date: z.string().optional(),\n});\n\ntype Values = z.infer<typeof schema>;\n\nexport default function CreatePerformanceReviewClient({ orgId, userId }: { orgId: string; userId: string }) {\n  const router = useRouter();\n  const sb = useMemo(() => createBrowserClient(), []);\n  const [open, setOpen] = useState(false);\n  const [submitting, setSubmitting] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n\n  const form = useForm<Values>({\n    resolver: zodResolver(schema),\n    defaultValues: {\n      review_period: '',\n      reviewer_name: '',\n      reviewer_title: '',\n      overall_rating: 3,\n      technical_skills: 3,\n      communication: 3,\n      teamwork: 3,\n      leadership: 3,\n      problem_solving: 3,\n      adaptability: 3,\n      strengths: '',\n      improvement_areas: '',\n      goals_achieved: '',\n      future_goals: '',\n      review_date: new Date().toISOString().split('T')[0],\n      next_review_date: '',\n    },\n    mode: 'onChange',\n  });\n\n  async function onSubmit(values: Values) {\n    setSubmitting(true);\n    setError(null);\n    try {\n      // Create mock performance review data structure\n      const performanceReviewData = {\n        id: crypto.randomUUID(),\n        user_id: userId,\n        organization_id: orgId,\n        review_period: values.review_period,\n        reviewer_name: values.reviewer_name,\n        reviewer_title: values.reviewer_title,\n        overall_rating: values.overall_rating,\n        performance_areas: {\n          technical_skills: values.technical_skills,\n          communication: values.communication,\n          teamwork: values.teamwork,\n          leadership: values.leadership,\n          problem_solving: values.problem_solving,\n          adaptability: values.adaptability,\n        },\n        strengths: values.strengths.split(',').map(s => s.trim()),\n        improvement_areas: values.improvement_areas.split(',').map(s => s.trim()),\n        goals_achieved: values.goals_achieved ? values.goals_achieved.split(',').map(s => s.trim()) : [],\n        future_goals: values.future_goals ? values.future_goals.split(',').map(s => s.trim()) : [],\n        review_date: values.review_date,\n        next_review_date: values.next_review_date || null,\n        created_at: new Date().toISOString(),\n      };\n\n      // Log activity\n      await sb.from('user_profile_activity').insert({\n        user_id: userId,\n        organization_id: orgId,\n        activity_type: 'performance_review_added',\n        description: `Added performance review for ${values.review_period}`,\n        metadata: { \n          review_period: values.review_period, \n          overall_rating: values.overall_rating,\n          reviewer: values.reviewer_name \n        }\n      });\n\n      // Telemetry\n      if (typeof window !== 'undefined' && (window as unknown).posthog) {\n        (window as unknown).posthog.capture('profile.performance.created', { \n          organization_id: orgId, \n          user_id: userId,\n          overall_rating: values.overall_rating\n        });\n      }\n\n      setOpen(false);\n      form.reset();\n      router.refresh();\n    } catch (e) {\n      if (e instanceof Error) {\n        setError(e.message);\n      } else {\n        setError('Create failed');\n      }\n    } finally {\n      setSubmitting(false);\n    }\n  }\n\n  return (\n    <>\n      <Button \n        variant=\"default\" \n        \n        onClick={() => setOpen(true)} \n        aria-label=\"Add Performance Review\" \n        title=\"Add Performance Review\"\n      >\n        <Plus className=\"mr-xs h-4 w-4\" /> Add Performance Review\n      </Button>\n      <AppDrawer\n        open={open}\n        onClose={() => setOpen(false)}\n        record={null}\n        fields={[]}\n        mode=\"create\"\n        title=\"Add Performance Review\"\n        tabs={[{\n          key: 'content',\n          label: 'Details',\n          content: (\n        <>\n        {error ? <div role=\"alert\" className=\"mb-sm text-body-sm color-destructive\">{error}</div> : null}\n        <form \n          className=\"stack-sm\" \n          onSubmit={(e: unknown) => { e.preventDefault(); onSubmit(form.getValues()); }} \n          aria-live=\"polite\"\n        >\n          <div className=\"grid gap-xs\">\n            <label htmlFor=\"review_period\" className=\"text-body-sm form-label\">Review Period *</label>\n            <input \n              id=\"review_period\" \n              className=\"rounded border  px-md py-xs\" \n              value={form.getValues('review_period') || ''} \n              onChange={(e: React.ChangeEvent<HTMLInputElement>) => form.setValue('review_period', e.target.value, { shouldDirty: true })} \n              placeholder=\"e.g. Q1 2024, Annual 2023\"\n              aria-invalid={!!form.formState.errors.review_period} \n            />\n            {form.formState.errors.review_period ? \n              <div className=\"text-body-sm color-destructive\">{String(form.formState.errors.review_period.message)}</div> : null}\n          </div>\n\n          <div className=\"grid grid-cols-2 gap-sm\">\n            <div className=\"grid gap-xs\">\n              <label htmlFor=\"reviewer_name\" className=\"text-body-sm form-label\">Reviewer Name *</label>\n              <input \n                id=\"reviewer_name\" \n                className=\"rounded border  px-md py-xs\" \n                value={form.getValues('reviewer_name') || ''} \n                onChange={(e: React.ChangeEvent<HTMLInputElement>) => form.setValue('reviewer_name', e.target.value, { shouldDirty: true })} \n                aria-invalid={!!form.formState.errors.reviewer_name} \n              />\n              {form.formState.errors.reviewer_name ? \n                <div className=\"text-body-sm color-destructive\">{String(form.formState.errors.reviewer_name.message)}</div> : null}\n            </div>\n\n            <div className=\"grid gap-xs\">\n              <label htmlFor=\"reviewer_title\" className=\"text-body-sm form-label\">Reviewer Title *</label>\n              <input \n                id=\"reviewer_title\" \n                className=\"rounded border  px-md py-xs\" \n                value={form.getValues('reviewer_title') || ''} \n                onChange={(e: React.ChangeEvent<HTMLInputElement>) => form.setValue('reviewer_title', e.target.value, { shouldDirty: true })} \n                aria-invalid={!!form.formState.errors.reviewer_title} \n              />\n              {form.formState.errors.reviewer_title ? \n                <div className=\"text-body-sm color-destructive\">{String(form.formState.errors.reviewer_title.message)}</div> : null}\n            </div>\n          </div>\n\n          <div className=\"grid gap-xs\">\n            <label htmlFor=\"overall_rating\" className=\"text-body-sm form-label\">Overall Rating (1-5) *</label>\n            <select \n              id=\"overall_rating\" \n              className=\"rounded border  px-md py-xs\" \n              value={form.getValues('overall_rating') || 3} \n              onChange={(e: React.ChangeEvent<HTMLSelectElement>) => form.setValue('overall_rating', Number(e.target.value), { shouldDirty: true })}\n            >\n              <option value=\"1\">1 - Needs Improvement</option>\n              <option value=\"2\">2 - Below Expectations</option>\n              <option value=\"3\">3 - Meets Expectations</option>\n              <option value=\"4\">4 - Exceeds Expectations</option>\n              <option value=\"5\">5 - Outstanding</option>\n            </select>\n          </div>\n\n          <div className=\"stack-sm\">\n            <h4 className=\"text-body-sm form-label\">Performance Areas (1-5 rating each)</h4>\n            \n            <div className=\"grid grid-cols-2 gap-sm\">\n              <div className=\"grid gap-xs\">\n                <label htmlFor=\"technical_skills\" className=\"text-body-sm\">Technical Skills</label>\n                <select \n                  id=\"technical_skills\" \n                  className=\"rounded border  px-md py-xs text-body-sm\" \n                  value={form.getValues('technical_skills') || 3} \n                  onChange={(e: React.ChangeEvent<HTMLSelectElement>) => form.setValue('technical_skills', Number(e.target.value), { shouldDirty: true })}\n                >\n                  <option value=\"1\">1</option>\n                  <option value=\"2\">2</option>\n                  <option value=\"3\">3</option>\n                  <option value=\"4\">4</option>\n                  <option value=\"5\">5</option>\n                </select>\n              </div>\n\n              <div className=\"grid gap-xs\">\n                <label htmlFor=\"communication\" className=\"text-body-sm\">Communication</label>\n                <select \n                  id=\"communication\" \n                  className=\"rounded border  px-md py-xs text-body-sm\" \n                  value={form.getValues('communication') || 3} \n                  onChange={(e: React.ChangeEvent<HTMLSelectElement>) => form.setValue('communication', Number(e.target.value), { shouldDirty: true })}\n                >\n                  <option value=\"1\">1</option>\n                  <option value=\"2\">2</option>\n                  <option value=\"3\">3</option>\n                  <option value=\"4\">4</option>\n                  <option value=\"5\">5</option>\n                </select>\n              </div>\n\n              <div className=\"grid gap-xs\">\n                <label htmlFor=\"teamwork\" className=\"text-body-sm\">Teamwork</label>\n                <select \n                  id=\"teamwork\" \n                  className=\"rounded border  px-md py-xs text-body-sm\" \n                  value={form.getValues('teamwork') || 3} \n                  onChange={(e: React.ChangeEvent<HTMLSelectElement>) => form.setValue('teamwork', Number(e.target.value), { shouldDirty: true })}\n                >\n                  <option value=\"1\">1</option>\n                  <option value=\"2\">2</option>\n                  <option value=\"3\">3</option>\n                  <option value=\"4\">4</option>\n                  <option value=\"5\">5</option>\n                </select>\n              </div>\n\n              <div className=\"grid gap-xs\">\n                <label htmlFor=\"leadership\" className=\"text-body-sm\">Leadership</label>\n                <select \n                  id=\"leadership\" \n                  className=\"rounded border  px-md py-xs text-body-sm\" \n                  value={form.getValues('leadership') || 3} \n                  onChange={(e: React.ChangeEvent<HTMLSelectElement>) => form.setValue('leadership', Number(e.target.value), { shouldDirty: true })}\n                >\n                  <option value=\"1\">1</option>\n                  <option value=\"2\">2</option>\n                  <option value=\"3\">3</option>\n                  <option value=\"4\">4</option>\n                  <option value=\"5\">5</option>\n                </select>\n              </div>\n\n              <div className=\"grid gap-xs\">\n                <label htmlFor=\"problem_solving\" className=\"text-body-sm\">Problem Solving</label>\n                <select \n                  id=\"problem_solving\" \n                  className=\"rounded border  px-md py-xs text-body-sm\" \n                  value={form.getValues('problem_solving') || 3} \n                  onChange={(e: React.ChangeEvent<HTMLSelectElement>) => form.setValue('problem_solving', Number(e.target.value), { shouldDirty: true })}\n                >\n                  <option value=\"1\">1</option>\n                  <option value=\"2\">2</option>\n                  <option value=\"3\">3</option>\n                  <option value=\"4\">4</option>\n                  <option value=\"5\">5</option>\n                </select>\n              </div>\n\n              <div className=\"grid gap-xs\">\n                <label htmlFor=\"adaptability\" className=\"text-body-sm\">Adaptability</label>\n                <select \n                  id=\"adaptability\" \n                  className=\"rounded border  px-md py-xs text-body-sm\" \n                  value={form.getValues('adaptability') || 3} \n                  onChange={(e: React.ChangeEvent<HTMLSelectElement>) => form.setValue('adaptability', Number(e.target.value), { shouldDirty: true })}\n                >\n                  <option value=\"1\">1</option>\n                  <option value=\"2\">2</option>\n                  <option value=\"3\">3</option>\n                  <option value=\"4\">4</option>\n                  <option value=\"5\">5</option>\n                </select>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"grid gap-xs\">\n            <label htmlFor=\"strengths\" className=\"text-body-sm form-label\">Key Strengths *</label>\n            <textarea \n              id=\"strengths\" \n              className=\"rounded border  px-md py-xs min-h-[var(--spacing-20)]\" \n              value={form.getValues('strengths') || ''} \n              onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) => form.setValue('strengths', e.target.value, { shouldDirty: true })} \n              placeholder=\"List key strengths and positive contributions...\"\n              aria-invalid={!!form.formState.errors.strengths} \n            />\n            {form.formState.errors.strengths ? \n              <div className=\"text-body-sm color-destructive\">{String(form.formState.errors.strengths.message)}</div> : null}\n          </div>\n\n          <div className=\"grid gap-xs\">\n            <label htmlFor=\"improvement_areas\" className=\"text-body-sm form-label\">Areas for Improvement *</label>\n            <textarea \n              id=\"improvement_areas\" \n              className=\"rounded border  px-md py-xs min-h-[var(--spacing-20)]\" \n              value={form.getValues('improvement_areas') || ''} \n              onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) => form.setValue('improvement_areas', e.target.value, { shouldDirty: true })} \n              placeholder=\"Areas where growth and development are needed...\"\n              aria-invalid={!!form.formState.errors.improvement_areas} \n            />\n            {form.formState.errors.improvement_areas ? \n              <div className=\"text-body-sm color-destructive\">{String(form.formState.errors.improvement_areas.message)}</div> : null}\n          </div>\n\n          <div className=\"grid gap-xs\">\n            <label htmlFor=\"goals_achieved\" className=\"text-body-sm form-label\">Goals Achieved</label>\n            <textarea \n              id=\"goals_achieved\" \n              className=\"rounded border  px-md py-xs min-h-[60px]\" \n              value={form.getValues('goals_achieved') || ''} \n              onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) => form.setValue('goals_achieved', e.target.value, { shouldDirty: true })} \n              placeholder=\"Goals that were successfully completed...\"\n            />\n          </div>\n\n          <div className=\"grid gap-xs\">\n            <label htmlFor=\"future_goals\" className=\"text-body-sm form-label\">Future Goals</label>\n            <textarea \n              id=\"future_goals\" \n              className=\"rounded border  px-md py-xs min-h-[60px]\" \n              value={form.getValues('future_goals') || ''} \n              onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) => form.setValue('future_goals', e.target.value, { shouldDirty: true })} \n              placeholder=\"Goals for the next review period...\"\n            />\n          </div>\n\n          <div className=\"grid grid-cols-2 gap-sm\">\n            <div className=\"grid gap-xs\">\n              <label htmlFor=\"review_date\" className=\"text-body-sm form-label\">Review Date *</label>\n              <input \n                id=\"review_date\" \n                type=\"date\" \n                className=\"rounded border  px-md py-xs\" \n                value={form.getValues('review_date') || ''} \n                onChange={(e: React.ChangeEvent<HTMLInputElement>) => form.setValue('review_date', e.target.value, { shouldDirty: true })} \n                aria-invalid={!!form.formState.errors.review_date} \n              />\n              {form.formState.errors.review_date ? \n                <div className=\"text-body-sm color-destructive\">{String(form.formState.errors.review_date.message)}</div> : null}\n            </div>\n\n            <div className=\"grid gap-xs\">\n              <label htmlFor=\"next_review_date\" className=\"text-body-sm form-label\">Next Review Date</label>\n              <input \n                id=\"next_review_date\" \n                type=\"date\" \n                className=\"rounded border  px-md py-xs\" \n                value={form.getValues('next_review_date') || ''} \n                onChange={(e: React.ChangeEvent<HTMLInputElement>) => form.setValue('next_review_date', e.target.value, { shouldDirty: true })} \n              />\n            </div>\n          </div>\n\n          <div className=\"flex items-center justify-end gap-sm pt-sm border-t\">\n            <Button type=\"button\" variant=\"ghost\" onClick={() => setOpen(false)}>Cancel</Button>\n            <Button variant=\"default\" disabled={submitting || !form.formState.isDirty}>\n              Create\n            </Button>\n          </div>\n        </form>\n        </>\n          )\n        }]}\n      />\n    </>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ghxstship/apps/web/app/(app)/(shell)/profile/performance/views/PerformanceAnalyticsView.tsx","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: JSX element 'Card' has no corresponding closing tag.","line":191,"column":7,"nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { TrendingUp, Target, Award, Users, BarChart3, PieChart, Calendar, Star } from \"lucide-react\";\nimport {\n  Card,\n  Badge,\n} from '@ghxstship/ui';\nimport type { PerformanceStats, PerformanceAnalytics } from '../types';\nimport { REVIEW_TYPE_LABELS, REVIEW_STATUS_LABELS } from '../types';\n\ninterface PerformanceAnalyticsViewProps {\n  stats: PerformanceStats;\n  analytics: PerformanceAnalytics;\n  loading?: boolean;\n}\n\nexport default function PerformanceAnalyticsView({\n  stats,\n  analytics,\n  loading = false,\n}: PerformanceAnalyticsViewProps) {\n  if (loading) {\n    return (\n      <div className=\"space-y-6\">\n        {[...Array(4)].map((_, i) => (\n          <Card key={i} className=\"p-6\">\n            <div className=\"animate-pulse space-y-4\">\n              <div className=\"h-4 bg-muted rounded w-1/4\"></div>\n              <div className=\"h-32 bg-muted rounded\"></div>\n            </div>\n          </Card>\n        ))}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Key Metrics */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n        <Card className=\"p-6\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm font-medium text-muted-foreground\">Total Reviews</p>\n              <p className=\"text-3xl font-bold\">{stats.totalReviews}</p>\n            </div>\n            <div className=\"h-12 w-12 bg-blue-100 rounded-lg flex items-center justify-center\">\n              <BarChart3 className=\"h-6 w-6 text-blue-600\" />\n            </div>\n          </div>\n          <div className=\"mt-4 flex items-center text-sm\">\n            <span className=\"text-green-600\">\n              {stats.completedReviews} completed\n            </span>\n          </div>\n        </Card>\n\n        <Card className=\"p-6\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm font-medium text-muted-foreground\">Average Rating</p>\n              <p className=\"text-3xl font-bold\">{stats.averageRating.toFixed(1)}</p>\n            </div>\n            <div className=\"h-12 w-12 bg-yellow-100 rounded-lg flex items-center justify-center\">\n              <Star className=\"h-6 w-6 text-yellow-600\" />\n            </div>\n          </div>\n          <div className=\"mt-4 flex items-center gap-1\">\n            {[...Array(5)].map((_, i) => (\n              <Star\n                key={i}\n                className={`h-4 w-4 ${\n                  i < Math.round(stats.averageRating)\n                    ? 'text-yellow-500 fill-yellow-500'\n                    : 'text-gray-300'\n                }`}\n              />\n            ))}\n          </div>\n        </Card>\n\n        <Card className=\"p-6\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm font-medium text-muted-foreground\">Promotion Rate</p>\n              <p className=\"text-3xl font-bold\">{(stats.promotionRate * 100).toFixed(0)}%</p>\n            </div>\n            <div className=\"h-12 w-12 bg-green-100 rounded-lg flex items-center justify-center\">\n              <TrendingUp className=\"h-6 w-6 text-green-600\" />\n            </div>\n          </div>\n          <div className=\"mt-4 text-sm text-muted-foreground\">\n            Based on recommendations\n          </div>\n        </Card>\n\n        <Card className=\"p-6\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm font-medium text-muted-foreground\">Goal Completion</p>\n              <p className=\"text-3xl font-bold\">\n                {stats.goalCompletion.total > 0 \n                  ? Math.round((stats.goalCompletion.completed / stats.goalCompletion.total) * 100)\n                  : 0}%\n              </p>\n            </div>\n            <div className=\"h-12 w-12 bg-purple-100 rounded-lg flex items-center justify-center\">\n              <Target className=\"h-6 w-6 text-purple-600\" />\n            </div>\n          </div>\n          <div className=\"mt-4 text-sm text-muted-foreground\">\n            {stats.goalCompletion.completed} of {stats.goalCompletion.total} goals\n          </div>\n        </Card>\n      </div>\n\n      {/* Performance Trends */}\n      {analytics.performanceTrends.length > 0 && (\n        <Card className=\"p-6\">\n          <div className=\"flex items-center gap-2 mb-6\">\n            <Calendar className=\"h-5 w-5 text-primary\" />\n            <h3 className=\"text-lg font-semibold\">Performance Trends</h3>\n          </div>\n          <div className=\"space-y-4\">\n            {analytics.performanceTrends.map((trend) => (\n              <div key={trend.period} className=\"flex items-center justify-between p-4 bg-muted/50 rounded-lg\">\n                <div>\n                  <div className=\"font-medium\">{trend.period}</div>\n                  <div className=\"text-sm text-muted-foreground\">\n                    {trend.reviewCount} reviews • {trend.promotions} promotions\n                  </div>\n                </div>\n                <div className=\"text-right\">\n                  <div className=\"text-2xl font-bold text-primary\">\n                    {trend.averageRating.toFixed(1)}\n                  </div>\n                  <div className=\"text-sm text-muted-foreground\">avg rating</div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </Card>\n      )}\n\n      {/* Review Distribution */}\n      <div className=\"grid md:grid-cols-2 gap-6\">\n        {/* By Type */}\n        <Card className=\"p-6\">\n          <div className=\"flex items-center gap-2 mb-6\">\n            <PieChart className=\"h-5 w-5 text-primary\" />\n            <h3 className=\"text-lg font-semibold\">Reviews by Type</h3>\n          </div>\n          <div className=\"space-y-3\">\n            {stats.byType.map((item) => (\n              <div key={item.type} className=\"flex items-center justify-between\">\n                <div className=\"flex items-center gap-2\">\n                  <div className=\"w-3 h-3 bg-primary rounded-full\"></div>\n                  <span className=\"font-medium\">{REVIEW_TYPE_LABELS[item.type]}</span>\n                </div>\n                <div className=\"text-right\">\n                  <div className=\"font-semibold\">{item.count}</div>\n                  <div className=\"text-sm text-muted-foreground\">\n                    {item.averageRating.toFixed(1)} avg\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </Card>\n\n        {/* By Status */}\n        <Card className=\"p-6\">\n          <div className=\"flex items-center gap-2 mb-6\">\n            <BarChart3 className=\"h-5 w-5 text-primary\" />\n            <h3 className=\"text-lg font-semibold\">Reviews by Status</h3>\n          </div>\n          <div className=\"space-y-3\">\n            {stats.byStatus.map((item) => (\n              <div key={item.status} className=\"flex items-center justify-between\">\n                <div className=\"flex items-center gap-2\">\n                  <Badge variant=\"outline\">{REVIEW_STATUS_LABELS[item.status]}</Badge>\n                </div>\n                <div className=\"font-semibold\">{item.count}</div>\n              </div>\n            ))}\n          </div>\n        </Card>\n      </div>\n\n      {/* Rating Distribution */}\n      <Card className=\"p-6\">\n        <div className=\"flex items-center gap-2 mb-6\">\n          <Star className=\"h-5 w-5 text-primary\" />\n          <h3 className=\"text-lg font-semibold\">Rating Distribution</h3>\n        </div>\n        <div className=\"space-y-3\">\n          {stats.ratingDistribution.map((item) => (\n            <div key={item.rating} className=\"flex items-center gap-4\">\n              <div className=\"flex items-center gap-1 w-20\">\n                {[...Array(item.rating)].map((_, i) => (\n                  <Star key={i} className=\"h-4 w-4 text-yellow-500 fill-yellow-500\" />\n                ))}\n                <span className=\"ml-2 font-medium\">{item.rating}</span>\n              </div>\n              <div className=\"flex-1 bg-muted rounded-full h-2\">\n                <div \n                  className=\"bg-primary h-2 rounded-full\" \n                  style={{ \n                    width: `${(item.count / stats.totalReviews) * 100}%` \n                  }}\n                ></div>\n              </div>\n              <div className=\"w-12 text-right font-medium\">{item.count}</div>\n            </div>\n          ))}\n        </div>\n      </div>\n\n      {/* Competency Breakdown */}\n      {analytics.competencyBreakdown.length > 0 && (\n        <Card className=\"p-6\">\n          <div className=\"flex items-center gap-2 mb-6\">\n            <Award className=\"h-5 w-5 text-primary\" />\n            <h3 className=\"text-lg font-semibold\">Competency Breakdown</h3>\n          </div>\n          <div className=\"grid md:grid-cols-2 gap-4\">\n            {analytics.competencyBreakdown.map((competency) => (\n              <div key={competency.competency} className=\"p-4 bg-muted/50 rounded-lg\">\n                <div className=\"flex items-center justify-between mb-2\">\n                  <h4 className=\"font-medium\">{competency.competency}</h4>\n                  <div className=\"text-2xl font-bold text-primary\">\n                    {competency.averageRating.toFixed(1)}\n                  </div>\n                </div>\n                <div className=\"flex items-center gap-1\">\n                  {[...Array(5)].map((_, i) => (\n                    <Star\n                      key={i}\n                      className={`h-3 w-3 ${\n                        i < Math.round(competency.averageRating)\n                          ? 'text-yellow-500 fill-yellow-500'\n                          : 'text-gray-300'\n                      }`}\n                    />\n                  ))}\n                </div>\n              </div>\n            ))}\n          </div>\n        </Card>\n      )}\n\n      {/* Top Strengths & Development Areas */}\n      <div className=\"grid md:grid-cols-2 gap-6\">\n        {/* Top Strengths */}\n        <Card className=\"p-6\">\n          <div className=\"flex items-center gap-2 mb-6\">\n            <TrendingUp className=\"h-5 w-5 text-green-600\" />\n            <h3 className=\"text-lg font-semibold\">Top Strengths</h3>\n          </div>\n          <div className=\"space-y-3\">\n            {stats.topStrengths.slice(0, 5).map((strength, index) => (\n              <div key={strength.strength} className=\"flex items-center justify-between\">\n                <div className=\"flex items-center gap-3\">\n                  <div className=\"w-6 h-6 bg-green-100 rounded-full flex items-center justify-center text-xs font-bold text-green-600\">\n                    {index + 1}\n                  </div>\n                  <span className=\"font-medium\">{strength.strength}</span>\n                </div>\n                <Badge variant=\"outline\">{strength.frequency}</Badge>\n              </div>\n            ))}\n          </div>\n        </Card>\n\n        {/* Development Areas */}\n        <Card className=\"p-6\">\n          <div className=\"flex items-center gap-2 mb-6\">\n            <Target className=\"h-5 w-5 text-orange-600\" />\n            <h3 className=\"text-lg font-semibold\">Development Areas</h3>\n          </div>\n          <div className=\"space-y-3\">\n            {stats.developmentAreas.slice(0, 5).map((area, index) => (\n              <div key={area.area} className=\"flex items-center justify-between\">\n                <div className=\"flex items-center gap-3\">\n                  <div className=\"w-6 h-6 bg-orange-100 rounded-full flex items-center justify-center text-xs font-bold text-orange-600\">\n                    {index + 1}\n                  </div>\n                  <span className=\"font-medium\">{area.area}</span>\n                </div>\n                <Badge variant=\"outline\">{area.frequency}</Badge>\n              </div>\n            ))}\n          </div>\n        </Card>\n      </div>\n\n      {/* Benchmark Comparison */}\n      {analytics.benchmarkComparison && (\n        <Card className=\"p-6\">\n          <div className=\"flex items-center gap-2 mb-6\">\n            <Users className=\"h-5 w-5 text-primary\" />\n            <h3 className=\"text-lg font-semibold\">Benchmark Comparison</h3>\n          </div>\n          <div className=\"grid md:grid-cols-3 gap-6\">\n            <div className=\"text-center\">\n              <div className=\"text-3xl font-bold text-primary mb-2\">\n                {analytics.benchmarkComparison.userRating.toFixed(1)}\n              </div>\n              <div className=\"text-sm text-muted-foreground\">Your Average</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-3xl font-bold text-muted-foreground mb-2\">\n                {analytics.benchmarkComparison.organizationAverage.toFixed(1)}\n              </div>\n              <div className=\"text-sm text-muted-foreground\">Organization Average</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-3xl font-bold text-muted-foreground mb-2\">\n                {analytics.benchmarkComparison.industryAverage.toFixed(1)}\n              </div>\n              <div className=\"text-sm text-muted-foreground\">Industry Average</div>\n            </div>\n          </div>\n          <div className=\"mt-6 text-center\">\n            <div className=\"text-2xl font-bold text-primary\">\n              {analytics.benchmarkComparison.percentile}th\n            </div>\n            <div className=\"text-sm text-muted-foreground\">Percentile</div>\n          </div>\n        </Card>\n      )}\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ghxstship/apps/web/app/(app)/(shell)/profile/professional/CreateProfessionalClient.tsx","messages":[{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Button' is not defined.","line":111,"column":8,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":111,"endColumn":14},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Button' is not defined.","line":270,"column":14,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":270,"endColumn":20},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Button' is not defined.","line":271,"column":14,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":271,"endColumn":20}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\n\nimport { Plus } from \"lucide-react\";\nimport { useMemo, useState } from 'react';\nimport { createBrowserClient } from '@ghxstship/auth';\nimport { useRouter } from 'next/navigation';\nimport { useForm } from 'react-hook-form';\n// import { z } from 'zod';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport AppDrawer from '@/app/_components/shared/AppDrawer';\nconst schema = z.object({\n  job_title: z.string().min(2, 'Job title is required'),\n  department: z.string().min(2, 'Department is required'),\n  employee_id: z.string().optional(),\n  hire_date: z.string().optional(),\n  skills: z.string().optional(),\n  bio: z.string().optional(),\n  linkedin_url: z.string().url().optional().or(z.literal('')),\n  website_url: z.string().url().optional().or(z.literal('')),\n  career_goals: z.string().optional(),\n  mentorship_interests: z.string().optional(),\n  performance_rating: z.number().min(1).max(5).optional(),\n});\n\ntype Values = z.infer<typeof schema>;\n\nexport default function CreateProfessionalClient({ orgId, userId }: { orgId: string; userId: string }) {\n  const router = useRouter();\n  const sb = useMemo(() => createBrowserClient(), []);\n  const [open, setOpen] = useState(false);\n  const [submitting, setSubmitting] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n\n  const form = useForm<Values>({\n    resolver: zodResolver(schema),\n    defaultValues: {\n      job_title: '',\n      department: '',\n      employee_id: '',\n      hire_date: '',\n      skills: '',\n      bio: '',\n      linkedin_url: '',\n      website_url: '',\n      career_goals: '',\n      mentorship_interests: '',\n      performance_rating: undefined,\n    },\n    mode: 'onChange',\n  });\n\n  async function onSubmit(values: Values) {\n    setSubmitting(true);\n    setError(null);\n    try {\n      // Insert professional profile data\n      const { error: insErr } = await sb\n        .from('user_profiles')\n        .upsert({\n          user_id: userId,\n          organization_id: orgId,\n          job_title: values.job_title,\n          department: values.department,\n          employee_id: values.employee_id || null,\n          hire_date: values.hire_date || null,\n          skills: values.skills ? values.skills.split(',').map(s => s.trim()) : [],\n          bio: values.bio || null,\n          linkedin_url: values.linkedin_url || null,\n          website_url: values.website_url || null,\n          career_goals: values.career_goals || null,\n          mentorship_interests: values.mentorship_interests || null,\n          performance_rating: values.performance_rating || null,\n        });\n      \n      if (insErr) throw insErr;\n\n      // Log activity\n      await sb.from('user_profile_activity').insert({\n        user_id: userId,\n        organization_id: orgId,\n        activity_type: 'profile_updated',\n        description: 'Professional information created',\n        metadata: { section: 'professional' }\n      });\n\n      // Telemetry\n      if (typeof window !== 'undefined' && (window as unknown).posthog) {\n        (window as unknown).posthog.capture('profile.professional.created', { \n          organization_id: orgId, \n          user_id: userId \n        });\n      }\n\n      setOpen(false);\n      form.reset();\n      router.refresh();\n    } catch (e) {\n      if (e instanceof Error) {\n        setError(e.message);\n      } else {\n        setError('Create failed');\n      }\n    } finally {\n      setSubmitting(false);\n    }\n  }\n\n  return (\n    <>\n      <Button \n        variant=\"default\" \n        \n        onClick={() => setOpen(true)} \n        aria-label=\"Add Professional Info\" \n        title=\"Add Professional Info\"\n      >\n        <Plus className=\"mr-xs h-4 w-4\" /> Add Professional Info\n      </Button>\n      <AppDrawer \n        open={open} \n        onClose={() => setOpen(false)} \n        record={null}\n        fields={[]}\n        mode=\"create\"\n        title=\"Add Professional Information\" \n        tabs={[{\n          key: 'content',\n          label: 'Details',\n          content: (\n        <form \n          className=\"stack-sm\" \n          onSubmit={(e: unknown) => { e.preventDefault(); onSubmit(form.getValues()); }} \n          aria-live=\"polite\"\n        >\n          {error ? <div role=\"alert\" className=\"mb-sm text-body-sm color-destructive\">{error}</div> : null}\n          <div className=\"grid gap-xs\">\n            <label htmlFor=\"job_title\" className=\"text-body-sm form-label\">Job Title *</label>\n            <input \n              id=\"job_title\" \n              className=\"rounded border  px-md py-xs\" \n              value={form.getValues('job_title') || ''} \n              onChange={(e: React.ChangeEvent<HTMLInputElement>) => form.setValue('job_title', e.target.value, { shouldDirty: true })} \n              aria-invalid={!!form.formState.errors.job_title} \n            />\n            {form.formState.errors.job_title ? \n              <div className=\"text-body-sm color-destructive\">{String(form.formState.errors.job_title.message)}</div> : null}\n          </div>\n\n          <div className=\"grid gap-xs\">\n            <label htmlFor=\"department\" className=\"text-body-sm form-label\">Department *</label>\n            <input \n              id=\"department\" \n              className=\"rounded border  px-md py-xs\" \n              value={form.getValues('department') || ''} \n              onChange={(e: React.ChangeEvent<HTMLInputElement>) => form.setValue('department', e.target.value, { shouldDirty: true })} \n              aria-invalid={!!form.formState.errors.department} \n            />\n            {form.formState.errors.department ? \n              <div className=\"text-body-sm color-destructive\">{String(form.formState.errors.department.message)}</div> : null}\n          </div>\n\n          <div className=\"grid gap-xs\">\n            <label htmlFor=\"employee_id\" className=\"text-body-sm form-label\">Employee ID</label>\n            <input \n              id=\"employee_id\" \n              className=\"rounded border  px-md py-xs\" \n              value={form.getValues('employee_id') || ''} \n              onChange={(e: React.ChangeEvent<HTMLInputElement>) => form.setValue('employee_id', e.target.value, { shouldDirty: true })} \n            />\n          </div>\n\n          <div className=\"grid gap-xs\">\n            <label htmlFor=\"hire_date\" className=\"text-body-sm form-label\">Hire Date</label>\n            <input \n              id=\"hire_date\" \n              type=\"date\" \n              className=\"rounded border  px-md py-xs\" \n              value={form.getValues('hire_date') || ''} \n              onChange={(e: React.ChangeEvent<HTMLInputElement>) => form.setValue('hire_date', e.target.value, { shouldDirty: true })} \n            />\n          </div>\n\n          <div className=\"grid gap-xs\">\n            <label htmlFor=\"skills\" className=\"text-body-sm form-label\">Skills (comma-separated)</label>\n            <textarea \n              id=\"skills\" \n              className=\"rounded border  px-md py-xs min-h-[60px]\" \n              value={form.getValues('skills') || ''} \n              onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) => form.setValue('skills', e.target.value, { shouldDirty: true })} \n              placeholder=\"e.g. JavaScript, React, Node.js\"\n            />\n          </div>\n\n          <div className=\"grid gap-xs\">\n            <label htmlFor=\"bio\" className=\"text-body-sm form-label\">Professional Bio</label>\n            <textarea \n              id=\"bio\" \n              className=\"rounded border  px-md py-xs min-h-[var(--spacing-20)]\" \n              value={form.getValues('bio') || ''} \n              onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) => form.setValue('bio', e.target.value, { shouldDirty: true })} \n              placeholder=\"Brief professional summary...\"\n            />\n          </div>\n\n          <div className=\"grid gap-xs\">\n            <label htmlFor=\"linkedin_url\" className=\"text-body-sm form-label\">LinkedIn URL</label>\n            <input \n              id=\"linkedin_url\" \n              type=\"url\" \n              className=\"rounded border  px-md py-xs\" \n              value={form.getValues('linkedin_url') || ''} \n              onChange={(e: React.ChangeEvent<HTMLInputElement>) => form.setValue('linkedin_url', e.target.value, { shouldDirty: true })} \n              placeholder=\"https://linkedin.com/in/username\"\n            />\n          </div>\n\n          <div className=\"grid gap-xs\">\n            <label htmlFor=\"website_url\" className=\"text-body-sm form-label\">Website URL</label>\n            <input \n              id=\"website_url\" \n              type=\"url\" \n              className=\"rounded border  px-md py-xs\" \n              value={form.getValues('website_url') || ''} \n              onChange={(e: React.ChangeEvent<HTMLInputElement>) => form.setValue('website_url', e.target.value, { shouldDirty: true })} \n              placeholder=\"https://yourwebsite.com\"\n            />\n          </div>\n\n          <div className=\"grid gap-xs\">\n            <label htmlFor=\"career_goals\" className=\"text-body-sm form-label\">Career Goals</label>\n            <textarea \n              id=\"career_goals\" \n              className=\"rounded border  px-md py-xs min-h-[60px]\" \n              value={form.getValues('career_goals') || ''} \n              onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) => form.setValue('career_goals', e.target.value, { shouldDirty: true })} \n              placeholder=\"Your professional aspirations...\"\n            />\n          </div>\n\n          <div className=\"grid gap-xs\">\n            <label htmlFor=\"mentorship_interests\" className=\"text-body-sm form-label\">Mentorship Interests</label>\n            <textarea \n              id=\"mentorship_interests\" \n              className=\"rounded border  px-md py-xs min-h-[60px]\" \n              value={form.getValues('mentorship_interests') || ''} \n              onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) => form.setValue('mentorship_interests', e.target.value, { shouldDirty: true })} \n              placeholder=\"Areas where you'd like mentorship or can provide mentorship...\"\n            />\n          </div>\n\n          <div className=\"grid gap-xs\">\n            <label htmlFor=\"performance_rating\" className=\"text-body-sm form-label\">Performance Rating (1-5)</label>\n            <select \n              id=\"performance_rating\" \n              className=\"rounded border  px-md py-xs\" \n              value={form.getValues('performance_rating') || ''} \n              onChange={(e: React.ChangeEvent<HTMLSelectElement>) => form.setValue('performance_rating', e.target.value ? Number(e.target.value) : undefined, { shouldDirty: true })}\n            >\n              <option value=\"\">Select rating...</option>\n              <option value=\"1\">1 - Needs Improvement</option>\n              <option value=\"2\">2 - Below Expectations</option>\n              <option value=\"3\">3 - Meets Expectations</option>\n              <option value=\"4\">4 - Exceeds Expectations</option>\n              <option value=\"5\">5 - Outstanding</option>\n            </select>\n          </div>\n\n          <div className=\"flex items-center justify-end gap-sm pt-sm border-t\">\n            <Button type=\"button\" variant=\"ghost\" onClick={() => setOpen(false)}>Cancel</Button>\n            <Button variant=\"default\" disabled={submitting || !form.formState.isDirty}>\n              Create\n            </Button>\n          </div>\n        </form>\n          )\n        }]}\n      />\n    </>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ghxstship/apps/web/app/(app)/(shell)/profile/travel/CreateTravelRecordClient.tsx","messages":[{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Button' is not defined.","line":117,"column":8,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":117,"endColumn":14},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Button' is not defined.","line":316,"column":14,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":316,"endColumn":20},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Button' is not defined.","line":317,"column":14,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":317,"endColumn":20}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\n\nimport { Plus } from \"lucide-react\";\nimport { useMemo, useState } from 'react';\nimport { createBrowserClient } from '@ghxstship/auth';\nimport { useRouter } from 'next/navigation';\nimport { useForm } from 'react-hook-form';\n// import { z } from 'zod';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport AppDrawer from '@/app/_components/shared/AppDrawer';\nconst schema = z.object({\n  travel_type: z.enum(['business', 'personal', 'training', 'conference', 'relocation']),\n  destination: z.string().min(2, 'Destination is required'),\n  purpose: z.string().min(2, 'Purpose is required'),\n  start_date: z.string().min(1, 'Start date is required'),\n  end_date: z.string().min(1, 'End date is required'),\n  accommodation: z.string().optional(),\n  transportation: z.string().optional(),\n  visa_required: z.boolean().default(false),\n  visa_status: z.enum(['not_required', 'pending', 'approved', 'denied']).optional(),\n  total_expense: z.number().min(0).optional(),\n  currency: z.string().default('USD'),\n  notes: z.string().optional(),\n});\n\ntype Values = z.infer<typeof schema>;\n\nexport default function CreateTravelRecordClient({ orgId, userId }: { orgId: string; userId: string }) {\n  const router = useRouter();\n  const sb = useMemo(() => createBrowserClient(), []);\n  const [open, setOpen] = useState(false);\n  const [submitting, setSubmitting] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n\n  const form = useForm<Values>({\n    resolver: zodResolver(schema),\n    defaultValues: {\n      travel_type: 'business',\n      destination: '',\n      purpose: '',\n      start_date: '',\n      end_date: '',\n      accommodation: '',\n      transportation: '',\n      visa_required: false,\n      visa_status: 'not_required',\n      total_expense: undefined,\n      currency: 'USD',\n      notes: '',\n    },\n    mode: 'onChange',\n  });\n\n  async function onSubmit(values: Values) {\n    setSubmitting(true);\n    setError(null);\n    try {\n      // Create mock travel record data structure\n      const travelRecordData = {\n        id: crypto.randomUUID(),\n        user_id: userId,\n        organization_id: orgId,\n        travel_type: values.travel_type,\n        destination: values.destination,\n        purpose: values.purpose,\n        start_date: values.start_date,\n        end_date: values.end_date,\n        accommodation: values.accommodation || null,\n        transportation: values.transportation || null,\n        visa_required: values.visa_required,\n        visa_status: values.visa_status || 'not_required',\n        total_expense: values.total_expense || null,\n        currency: values.currency,\n        notes: values.notes || null,\n        created_at: new Date().toISOString(),\n      };\n\n      // Log activity\n      await sb.from('user_profile_activity').insert({\n        user_id: userId,\n        organization_id: orgId,\n        activity_type: 'travel_record_added',\n        description: `Added ${values.travel_type} travel to ${values.destination}`,\n        metadata: { \n          travel_type: values.travel_type, \n          destination: values.destination,\n          purpose: values.purpose \n        }\n      });\n\n      // Telemetry\n      if (typeof window !== 'undefined' && (window as unknown).posthog) {\n        (window as unknown).posthog.capture('profile.travel.created', { \n          organization_id: orgId, \n          user_id: userId,\n          travel_type: values.travel_type\n        });\n      }\n\n      setOpen(false);\n      form.reset();\n      router.refresh();\n    } catch (e) {\n      if (e instanceof Error) {\n        setError(e.message);\n      } else {\n        setError('Create failed');\n      }\n    } finally {\n      setSubmitting(false);\n    }\n  }\n\n  return (\n    <>\n      <Button \n        variant=\"default\" \n        \n        onClick={() => setOpen(true)} \n        aria-label=\"Add Travel Record\" \n        title=\"Add Travel Record\"\n      >\n        <Plus className=\"mr-xs h-4 w-4\" /> Add Travel Record\n      </Button>\n      <AppDrawer\n        open={open}\n        onClose={() => setOpen(false)}\n        record={null}\n        fields={[]}\n        mode=\"create\"\n        title=\"Add Travel Record\"\n        tabs={[{\n          key: 'content',\n          label: 'Details',\n          content: (\n        <>\n        {error ? <div role=\"alert\" className=\"mb-sm text-body-sm color-destructive\">{error}</div> : null}\n        <form \n          className=\"stack-sm\" \n          onSubmit={(e: unknown) => { e.preventDefault(); onSubmit(form.getValues()); }} \n          aria-live=\"polite\"\n        >\n          <div className=\"grid gap-xs\">\n            <label htmlFor=\"travel_type\" className=\"text-body-sm form-label\">Travel Type *</label>\n            <select \n              id=\"travel_type\" \n              className=\"rounded border  px-md py-xs\" \n              value={form.getValues('travel_type') || 'business'} \n              onChange={(e: React.ChangeEvent<HTMLSelectElement>) => form.setValue('travel_type', e.target.value as unknown, { shouldDirty: true })}\n            >\n              <option value=\"business\">Business</option>\n              <option value=\"personal\">Personal</option>\n              <option value=\"training\">Training</option>\n              <option value=\"conference\">Conference</option>\n              <option value=\"relocation\">Relocation</option>\n            </select>\n          </div>\n\n          <div className=\"grid gap-xs\">\n            <label htmlFor=\"destination\" className=\"text-body-sm form-label\">Destination *</label>\n            <input \n              id=\"destination\" \n              className=\"rounded border  px-md py-xs\" \n              value={form.getValues('destination') || ''} \n              onChange={(e: React.ChangeEvent<HTMLInputElement>) => form.setValue('destination', e.target.value, { shouldDirty: true })} \n              placeholder=\"City, Country\"\n              aria-invalid={!!form.formState.errors.destination} \n            />\n            {form.formState.errors.destination ? \n              <div className=\"text-body-sm color-destructive\">{String(form.formState.errors.destination.message)}</div> : null}\n          </div>\n\n          <div className=\"grid gap-xs\">\n            <label htmlFor=\"purpose\" className=\"text-body-sm form-label\">Purpose *</label>\n            <input \n              id=\"purpose\" \n              className=\"rounded border  px-md py-xs\" \n              value={form.getValues('purpose') || ''} \n              onChange={(e: React.ChangeEvent<HTMLInputElement>) => form.setValue('purpose', e.target.value, { shouldDirty: true })} \n              placeholder=\"Brief description of travel purpose\"\n              aria-invalid={!!form.formState.errors.purpose} \n            />\n            {form.formState.errors.purpose ? \n              <div className=\"text-body-sm color-destructive\">{String(form.formState.errors.purpose.message)}</div> : null}\n          </div>\n\n          <div className=\"grid grid-cols-2 gap-sm\">\n            <div className=\"grid gap-xs\">\n              <label htmlFor=\"start_date\" className=\"text-body-sm form-label\">Start Date *</label>\n              <input \n                id=\"start_date\" \n                type=\"date\" \n                className=\"rounded border  px-md py-xs\" \n                value={form.getValues('start_date') || ''} \n                onChange={(e: React.ChangeEvent<HTMLInputElement>) => form.setValue('start_date', e.target.value, { shouldDirty: true })} \n                aria-invalid={!!form.formState.errors.start_date} \n              />\n              {form.formState.errors.start_date ? \n                <div className=\"text-body-sm color-destructive\">{String(form.formState.errors.start_date.message)}</div> : null}\n            </div>\n\n            <div className=\"grid gap-xs\">\n              <label htmlFor=\"end_date\" className=\"text-body-sm form-label\">End Date *</label>\n              <input \n                id=\"end_date\" \n                type=\"date\" \n                className=\"rounded border  px-md py-xs\" \n                value={form.getValues('end_date') || ''} \n                onChange={(e: React.ChangeEvent<HTMLInputElement>) => form.setValue('end_date', e.target.value, { shouldDirty: true })} \n                aria-invalid={!!form.formState.errors.end_date} \n              />\n              {form.formState.errors.end_date ? \n                <div className=\"text-body-sm color-destructive\">{String(form.formState.errors.end_date.message)}</div> : null}\n            </div>\n          </div>\n\n          <div className=\"grid gap-xs\">\n            <label htmlFor=\"accommodation\" className=\"text-body-sm form-label\">Accommodation</label>\n            <input \n              id=\"accommodation\" \n              className=\"rounded border  px-md py-xs\" \n              value={form.getValues('accommodation') || ''} \n              onChange={(e: React.ChangeEvent<HTMLInputElement>) => form.setValue('accommodation', e.target.value, { shouldDirty: true })} \n              placeholder=\"Hotel name, address, or other accommodation details\"\n            />\n          </div>\n\n          <div className=\"grid gap-xs\">\n            <label htmlFor=\"transportation\" className=\"text-body-sm form-label\">Transportation</label>\n            <input \n              id=\"transportation\" \n              className=\"rounded border  px-md py-xs\" \n              value={form.getValues('transportation') || ''} \n              onChange={(e: React.ChangeEvent<HTMLInputElement>) => form.setValue('transportation', e.target.value, { shouldDirty: true })} \n              placeholder=\"Flight, train, car rental, etc.\"\n            />\n          </div>\n\n          <div className=\"flex items-center gap-sm\">\n            <input \n              id=\"visa_required\" \n              type=\"checkbox\" \n              checked={form.getValues('visa_required')} \n              onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                form.setValue('visa_required', e.target.checked, { shouldDirty: true });\n                if (!e.target.checked) {\n                  form.setValue('visa_status', 'not_required', { shouldDirty: true });\n                }\n              }} \n            />\n            <label htmlFor=\"visa_required\" className=\"text-body-sm form-label\">Visa required for this travel</label>\n          </div>\n\n          {form.getValues('visa_required') && (\n            <div className=\"grid gap-xs\">\n              <label htmlFor=\"visa_status\" className=\"text-body-sm form-label\">Visa Status</label>\n              <select \n                id=\"visa_status\" \n                className=\"rounded border  px-md py-xs\" \n                value={form.getValues('visa_status') || 'pending'} \n                onChange={(e: React.ChangeEvent<HTMLSelectElement>) => form.setValue('visa_status', e.target.value as unknown, { shouldDirty: true })}\n              >\n                <option value=\"pending\">Pending</option>\n                <option value=\"approved\">Approved</option>\n                <option value=\"denied\">Denied</option>\n              </select>\n            </div>\n          )}\n\n          <div className=\"grid grid-cols-2 gap-sm\">\n            <div className=\"grid gap-xs\">\n              <label htmlFor=\"total_expense\" className=\"text-body-sm form-label\">Total Expense</label>\n              <input \n                id=\"total_expense\" \n                type=\"number\" \n                step=\"0.01\" \n                min=\"0\" \n                className=\"rounded border  px-md py-xs\" \n                value={form.getValues('total_expense') || ''} \n                onChange={(e: React.ChangeEvent<HTMLInputElement>) => form.setValue('total_expense', e.target.value ? Number(e.target.value) : undefined, { shouldDirty: true })} \n                placeholder=\"0.00\"\n              />\n            </div>\n\n            <div className=\"grid gap-xs\">\n              <label htmlFor=\"currency\" className=\"text-body-sm form-label\">Currency</label>\n              <select \n                id=\"currency\" \n                className=\"rounded border  px-md py-xs\" \n                value={form.getValues('currency') || 'USD'} \n                onChange={(e: React.ChangeEvent<HTMLSelectElement>) => form.setValue('currency', e.target.value, { shouldDirty: true })}\n              >\n                <option value=\"USD\">USD</option>\n                <option value=\"EUR\">EUR</option>\n                <option value=\"GBP\">GBP</option>\n                <option value=\"CAD\">CAD</option>\n                <option value=\"AUD\">AUD</option>\n                <option value=\"JPY\">JPY</option>\n              </select>\n            </div>\n          </div>\n\n          <div className=\"grid gap-xs\">\n            <label htmlFor=\"notes\" className=\"text-body-sm form-label\">Notes</label>\n            <textarea \n              id=\"notes\" \n              className=\"rounded border  px-md py-xs min-h-[var(--spacing-20)]\" \n              value={form.getValues('notes') || ''} \n              onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) => form.setValue('notes', e.target.value, { shouldDirty: true })} \n              placeholder=\"Additional notes about this travel...\"\n            />\n          </div>\n\n          <div className=\"flex items-center justify-end gap-sm pt-sm border-t\">\n            <Button type=\"button\" variant=\"ghost\" onClick={() => setOpen(false)}>Cancel</Button>\n            <Button variant=\"default\" disabled={submitting || !form.formState.isDirty}>\n              Create\n            </Button>\n          </div>\n        </form>\n        </>\n          )\n        }]}\n      />\n    </>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ghxstship/apps/web/app/(app)/(shell)/profile/travel/TravelPreferencesClient.tsx","messages":[{"ruleId":"jsx-a11y/aria-props","severity":1,"message":"aria-: This attribute is an invalid ARIA attribute.","line":78,"column":165,"nodeType":"JSXAttribute","endLine":78,"endColumn":170}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { User, FileText, Settings, Award, Calendar, TrendingUp, Activity, Clock, Plus, Search, Play, Trash2 } from \"lucide-react\";\nimport React from \"react\";\n\nimport { Badge, Button, Card, UnifiedInput, cn } from '@ghxstship/ui';\nimport { useState, useEffect } from 'react'\nimport { createClient } from \"../../../../../lib/supabase/client\"\n\ninterface ClientProps {\n  className?: string\n}\n\nexport default function Client({ className }: ClientProps) {\n  const [data, setData] = useState<any[]>([])\n  const [loading, setLoading] = useState(true)\n\n  useEffect(() => {\n    let isMounted = true\n    const supabase = createClient()\n    async function fetchPreferences() {\n      try {\n        setLoading(true)\n        const { data: auth } = await supabase.auth.getUser()\n        let items: unknown[] = []\n        if (auth?.user) {\n          const { data: prefs, error } = await supabase\n            .from('user_travel_preferences')\n            .select('id, preference_name, status')\n            .eq('user_id', auth.user.id)\n            .limit(25)\n          if (!error && prefs) {\n            const mockData: Array<{ id: string; preference_name: string; status: string }> = [\n              { id: '1', preference_name: 'Window Seat', status: 'Active' },\n              { id: '2', preference_name: 'Aisle Seat', status: 'Active' },\n            ]\n            items = prefs.map((p: unknown) => ({\n              id: p.id,\n              name: p.preference_name || 'Preference',\n              status: p.status || 'active'\n            }))\n          }\n        }\n        if (isMounted) setData(items)\n      } catch (err) {\n        // console.error('TravelPreferencesClient fetch error:', err)\n        if (isMounted) setData([])\n      } finally {\n        if (isMounted) setLoading(false)\n      }\n    }\n    fetchPreferences()\n    return () => { isMounted = false }\n  }, [])\n\n  if (loading) {\n    return (\n      <div className={className}>\n        <Card className=\"p-md\">\n          <div className=\"animate-pulse space-y-md\">\n            <div className=\"h-4 bg-secondary rounded w-1/4\"></div>\n            <div className=\"h-4 bg-secondary rounded w-1/2\"></div>\n            <div className=\"h-4 bg-secondary rounded w-3/4\"></div>\n          </div>\n        </Card>\n      </div>\n    )\n  }\n\n  return (\n    <div className={className}>\n      <div className=\"mb-md\">\n        <h1 className=\"text-heading-lg text-heading-3 mb-sm\">Travel Preferences</h1>\n        <p className=\"color-foreground-subtle\">Manage your travel and accommodation preferences</p>\n      </div>\n\n      <div className=\"mb-md\">\n        <UnifiedInput onChange={(e: React.ChangeEvent<HTMLInputElement>) => {}} placeholder=\"Search travel preferences...\" className=\"w-full sm:w-auto sm:max-w-sm\" aria- />\n      </div>\n\n      <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-md\">\n        {data.map((item: unknown) => (\n          <Card key={item.id} className=\"p-md\">\n            <div className=\"flex flex-col sm:flex-row items-center justify-between\">\n              <div>\n                <h2 className=\"text-body text-heading-3\">{item.name}</h2>\n                <p className=\"text-body-sm color-foreground-subtle\">ID: {item.id}</p>\n              </div>\n              <div className=\"flex flex-col sm:flex-row items-center gap-sm\">\n                <Badge variant={item.status === 'active' ? 'default' : 'secondary'}>\n                  {item.status}\n                </Badge>\n                <Button variant=\"default\" size=\"sm\" onClick={() => console.log(\"Edit clicked\")}>Edit</Button>\n              </div>\n            </div>\n          </Card>\n        ))}\n      </div>\n    </div>\n  )\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ghxstship/apps/web/app/(app)/(shell)/profile/uniform/CreateUniformItemClient.tsx","messages":[{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Button' is not defined.","line":117,"column":8,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":117,"endColumn":14},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Button' is not defined.","line":298,"column":14,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":298,"endColumn":20},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Button' is not defined.","line":299,"column":14,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":299,"endColumn":20}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\n\nimport { Plus } from \"lucide-react\";\nimport { useMemo, useState } from 'react';\nimport { createBrowserClient } from '@ghxstship/auth';\nimport { useRouter } from 'next/navigation';\nimport { useForm } from 'react-hook-form';\n// import { z } from 'zod';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport AppDrawer from '@/app/_components/shared/AppDrawer';\nconst schema = z.object({\n  item_type: z.enum(['shirt', 'pants', 'jacket', 'hat', 'shoes', 'safety_gear', 'accessories', 'equipment']),\n  item_name: z.string().min(2, 'Item name is required'),\n  size: z.string().optional(),\n  color: z.string().optional(),\n  condition: z.enum(['new', 'good', 'fair', 'poor', 'needs_replacement']),\n  purchase_date: z.string().optional(),\n  purchase_price: z.number().min(0).optional(),\n  supplier: z.string().optional(),\n  care_instructions: z.string().optional(),\n  replacement_due: z.string().optional(),\n  is_required: z.boolean().default(true),\n  notes: z.string().optional(),\n});\n\ntype Values = z.infer<typeof schema>;\n\nexport default function CreateUniformItemClient({ orgId, userId }: { orgId: string; userId: string }) {\n  const router = useRouter();\n  const sb = useMemo(() => createBrowserClient(), []);\n  const [open, setOpen] = useState(false);\n  const [submitting, setSubmitting] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n\n  const form = useForm<Values>({\n    resolver: zodResolver(schema),\n    defaultValues: {\n      item_type: 'shirt',\n      item_name: '',\n      size: '',\n      color: '',\n      condition: 'new',\n      purchase_date: '',\n      purchase_price: undefined,\n      supplier: '',\n      care_instructions: '',\n      replacement_due: '',\n      is_required: true,\n      notes: '',\n    },\n    mode: 'onChange',\n  });\n\n  async function onSubmit(values: Values) {\n    setSubmitting(true);\n    setError(null);\n    try {\n      // Create mock uniform item data structure\n      const uniformItemData = {\n        id: crypto.randomUUID(),\n        user_id: userId,\n        organization_id: orgId,\n        item_type: values.item_type,\n        item_name: values.item_name,\n        size: values.size || null,\n        color: values.color || null,\n        condition: values.condition,\n        purchase_date: values.purchase_date || null,\n        purchase_price: values.purchase_price || null,\n        supplier: values.supplier || null,\n        care_instructions: values.care_instructions || null,\n        replacement_due: values.replacement_due || null,\n        is_required: values.is_required,\n        notes: values.notes || null,\n        created_at: new Date().toISOString(),\n      };\n\n      // Log activity\n      await sb.from('user_profile_activity').insert({\n        user_id: userId,\n        organization_id: orgId,\n        activity_type: 'uniform_item_added',\n        description: `Added ${values.item_type}: ${values.item_name}`,\n        metadata: { \n          item_type: values.item_type, \n          item_name: values.item_name,\n          condition: values.condition \n        }\n      });\n\n      // Telemetry\n      if (typeof window !== 'undefined' && (window as unknown).posthog) {\n        (window as unknown).posthog.capture('profile.uniform.created', { \n          organization_id: orgId, \n          user_id: userId,\n          item_type: values.item_type\n        });\n      }\n\n      setOpen(false);\n      form.reset();\n      router.refresh();\n    } catch (e) {\n      if (e instanceof Error) {\n        setError(e.message);\n      } else {\n        setError('Create failed');\n      }\n    } finally {\n      setSubmitting(false);\n    }\n  }\n\n  return (\n    <>\n      <Button \n        variant=\"default\" \n        \n        onClick={() => setOpen(true)} \n        aria-label=\"Add Uniform Item\" \n        title=\"Add Uniform Item\"\n      >\n        <Plus className=\"mr-xs h-4 w-4\" /> Add Uniform Item\n      </Button>\n      <AppDrawer\n        open={open}\n        onClose={() => setOpen(false)}\n        record={null}\n        fields={[]}\n        mode=\"create\"\n        title=\"Add Uniform Item\"\n        tabs={[{\n          key: 'content',\n          label: 'Details',\n          content: (\n        <>\n        {error ? <div role=\"alert\" className=\"mb-sm text-body-sm color-destructive\">{error}</div> : null}\n        <form \n          className=\"stack-sm\" \n          onSubmit={(e: unknown) => { e.preventDefault(); onSubmit(form.getValues()); }} \n          aria-live=\"polite\"\n        >\n          <div className=\"grid gap-xs\">\n            <label htmlFor=\"item_type\" className=\"text-body-sm form-label\">Item Type *</label>\n            <select \n              id=\"item_type\" \n              className=\"rounded border  px-md py-xs\" \n              value={form.getValues('item_type') || 'shirt'} \n              onChange={(e: React.ChangeEvent<HTMLSelectElement>) => form.setValue('item_type', e.target.value as unknown, { shouldDirty: true })}\n            >\n              <option value=\"shirt\">Shirt</option>\n              <option value=\"pants\">Pants</option>\n              <option value=\"jacket\">Jacket</option>\n              <option value=\"hat\">Hat</option>\n              <option value=\"shoes\">Shoes</option>\n              <option value=\"safety_gear\">Safety Gear</option>\n              <option value=\"accessories\">Accessories</option>\n              <option value=\"equipment\">Equipment</option>\n            </select>\n          </div>\n\n          <div className=\"grid gap-xs\">\n            <label htmlFor=\"item_name\" className=\"text-body-sm form-label\">Item Name *</label>\n            <input \n              id=\"item_name\" \n              className=\"rounded border  px-md py-xs\" \n              value={form.getValues('item_name') || ''} \n              onChange={(e: React.ChangeEvent<HTMLInputElement>) => form.setValue('item_name', e.target.value, { shouldDirty: true })} \n              placeholder=\"e.g. Navy Blue Polo Shirt, Safety Helmet\"\n              aria-invalid={!!form.formState.errors.item_name} \n            />\n            {form.formState.errors.item_name ? <div className=\"text-body-sm color-destructive\">{String(form.formState.errors.item_name.message)}</div> : null}\n          </div>\n\n          <div className=\"grid grid-cols-2 gap-sm\">\n            <div className=\"grid gap-xs\">\n              <label htmlFor=\"size\" className=\"text-body-sm form-label\">Size</label>\n              <input \n                id=\"size\" \n                className=\"rounded border  px-md py-xs\" \n                value={form.getValues('size') || ''} \n                onChange={(e: React.ChangeEvent<HTMLInputElement>) => form.setValue('size', e.target.value, { shouldDirty: true })} \n                placeholder=\"S, M, L, XL, 32, 10.5, etc.\"\n              />\n            </div>\n\n            <div className=\"grid gap-xs\">\n              <label htmlFor=\"color\" className=\"text-body-sm form-label\">Color</label>\n              <input \n                id=\"color\" \n                className=\"rounded border  px-md py-xs\" \n                value={form.getValues('color') || ''} \n                onChange={(e: React.ChangeEvent<HTMLInputElement>) => form.setValue('color', e.target.value, { shouldDirty: true })} \n                placeholder=\"Navy, Black, White, etc.\"\n              />\n            </div>\n          </div>\n\n          <div className=\"grid gap-xs\">\n            <label htmlFor=\"condition\" className=\"text-body-sm form-label\">Condition *</label>\n            <select \n              id=\"condition\" \n              className=\"rounded border  px-md py-xs\" \n              value={form.getValues('condition') || 'new'} \n              onChange={(e: React.ChangeEvent<HTMLSelectElement>) => form.setValue('condition', e.target.value as unknown, { shouldDirty: true })}\n            >\n              <option value=\"new\">New</option>\n              <option value=\"good\">Good</option>\n              <option value=\"fair\">Fair</option>\n              <option value=\"poor\">Poor</option>\n              <option value=\"needs_replacement\">Needs Replacement</option>\n            </select>\n          </div>\n\n          <div className=\"grid grid-cols-2 gap-sm\">\n            <div className=\"grid gap-xs\">\n              <label htmlFor=\"purchase_date\" className=\"text-body-sm form-label\">Purchase Date</label>\n              <input \n                id=\"purchase_date\" \n                type=\"date\" \n                className=\"rounded border  px-md py-xs\" \n                value={form.getValues('purchase_date') || ''} \n                onChange={(e: React.ChangeEvent<HTMLInputElement>) => form.setValue('purchase_date', e.target.value, { shouldDirty: true })} \n              />\n            </div>\n\n            <div className=\"grid gap-xs\">\n              <label htmlFor=\"purchase_price\" className=\"text-body-sm form-label\">Purchase Price ($)</label>\n              <input \n                id=\"purchase_price\" \n                type=\"number\" \n                step=\"0.01\" \n                min=\"0\" \n                className=\"rounded border  px-md py-xs\" \n                value={form.getValues('purchase_price') || ''} \n                onChange={(e: React.ChangeEvent<HTMLInputElement>) => form.setValue('purchase_price', e.target.value ? Number(e.target.value) : undefined, { shouldDirty: true })} \n                placeholder=\"0.00\"\n              />\n            </div>\n          </div>\n\n          <div className=\"grid gap-xs\">\n            <label htmlFor=\"supplier\" className=\"text-body-sm form-label\">Supplier/Brand</label>\n            <input \n              id=\"supplier\" \n              className=\"rounded border  px-md py-xs\" \n              value={form.getValues('supplier') || ''} \n              onChange={(e: React.ChangeEvent<HTMLInputElement>) => form.setValue('supplier', e.target.value, { shouldDirty: true })} \n              placeholder=\"Company or brand name\"\n            />\n          </div>\n\n          <div className=\"grid gap-xs\">\n            <label htmlFor=\"care_instructions\" className=\"text-body-sm form-label\">Care Instructions</label>\n            <textarea \n              id=\"care_instructions\" \n              className=\"rounded border  px-md py-xs min-h-[60px]\" \n              value={form.getValues('care_instructions') || ''} \n              onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) => form.setValue('care_instructions', e.target.value, { shouldDirty: true })} \n              placeholder=\"Washing, maintenance, or storage instructions...\"\n            />\n          </div>\n\n          <div className=\"grid gap-xs\">\n            <label htmlFor=\"replacement_due\" className=\"text-body-sm form-label\">Replacement Due Date</label>\n            <input \n              id=\"replacement_due\" \n              type=\"date\" \n              className=\"rounded border  px-md py-xs\" \n              value={form.getValues('replacement_due') || ''} \n              onChange={(e: React.ChangeEvent<HTMLInputElement>) => form.setValue('replacement_due', e.target.value, { shouldDirty: true })} \n            />\n          </div>\n\n          <div className=\"flex items-center gap-sm\">\n            <input \n              id=\"is_required\" \n              type=\"checkbox\" \n              checked={form.getValues('is_required')} \n              onChange={(e: React.ChangeEvent<HTMLInputElement>) => form.setValue('is_required', e.target.checked, { shouldDirty: true })} \n            />\n            <label htmlFor=\"is_required\" className=\"text-body-sm form-label\">This is a required uniform item</label>\n          </div>\n\n          <div className=\"grid gap-xs\">\n            <label htmlFor=\"notes\" className=\"text-body-sm form-label\">Notes</label>\n            <textarea \n              id=\"notes\" \n              className=\"rounded border  px-md py-xs min-h-[60px]\" \n              value={form.getValues('notes') || ''} \n              onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) => form.setValue('notes', e.target.value, { shouldDirty: true })} \n              placeholder=\"Additional notes about this item...\"\n            />\n          </div>\n\n          <div className=\"flex items-center justify-end gap-sm pt-sm border-t\">\n            <Button type=\"button\" variant=\"ghost\" onClick={() => setOpen(false)}>Cancel</Button>\n            <Button variant=\"default\" disabled={submitting || !form.formState.isDirty}>\n              Create\n            </Button>\n          </div>\n        </form>\n        </>\n          )\n        }]}\n      />\n    </>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ghxstship/apps/web/app/(app)/(shell)/profile/uniform/drawers/CreateEditUniformSizingDrawer.tsx","messages":[{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":242,"column":53,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[7983,7985],"text":"&apos; "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[7983,7985],"text":"&lsquo; "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[7983,7985],"text":"&#39; "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[7983,7985],"text":"&rsquo; "},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":242,"column":75,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[8005,8025],"text":"&quot;\n                  "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[8005,8025],"text":"&ldquo;\n                  "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[8005,8025],"text":"&#34;\n                  "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[8005,8025],"text":"&rdquo;\n                  "},"desc":"Replace with `&rdquo;`."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { Save, User, Ruler, Shirt } from \"lucide-react\";\nimport { useEffect } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\n// import { z } from 'zod';\nimport {\n  UniversalDrawer,\n  Button,\n  Input,\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n  Textarea,\n  Badge,\n  Card\n} from '@ghxstship/ui';\nimport type { UniformSizing } from '../types';\nimport { SIZE_CATEGORIES, EQUIPMENT_TYPES, formatMeasurement, calculateBMI, getBMICategory } from '../types';\n\n// Form validation schema\nconst uniformSizingSchema = z.object({\n  user_id: z.string().min(1, 'User ID is required'),\n  first_name: z.string().min(1, 'First name is required'),\n  last_name: z.string().min(1, 'Last name is required'),\n  size_category: z.enum(['xs', 'sm', 'md', 'lg', 'xl', 'xxl', 'xxxl'] as const).optional(),\n  \n  // Body measurements\n  height: z.number().min(36).max(96).optional(), // inches\n  weight: z.number().min(50).max(500).optional(), // pounds\n  chest: z.number().min(20).max(60).optional(), // inches\n  waist: z.number().min(20).max(60).optional(), // inches\n  neck: z.number().min(10).max(25).optional(), // inches\n  sleeve_length: z.number().min(20).max(40).optional(), // inches\n  inseam: z.number().min(20).max(40).optional(), // inches\n  \n  // Clothing sizes\n  shirt_size: z.string().optional(),\n  pants_size: z.string().optional(),\n  shoe_size: z.string().optional(),\n  hat_size: z.string().optional(),\n  glove_size: z.string().optional(),\n  \n  // Equipment preferences\n  equipment_preferences: z.record(z.string()).optional(),\n  \n  // Additional info\n  notes: z.string().optional(),\n});\n\ntype UniformSizingFormData = z.infer<typeof uniformSizingSchema>;\n\ninterface CreateEditUniformSizingDrawerProps {\n  isOpen: boolean;\n  onClose: () => void;\n  mode: 'create' | 'edit' | 'view';\n  sizing?: UniformSizing | null;\n  onSave: (data: UniformSizingFormData) => Promise<void>;\n}\n\nexport default function CreateEditUniformSizingDrawer({\n  isOpen,\n  onClose,\n  mode,\n  sizing,\n  onSave,\n}: CreateEditUniformSizingDrawerProps) {\n  const {\n    register,\n    handleSubmit,\n    watch,\n    setValue,\n    reset,\n    formState: { errors, isSubmitting }\n  } = useForm<UniformSizingFormData>({\n    resolver: zodResolver(uniformSizingSchema),\n    defaultValues: {\n      equipment_preferences: {},\n    },\n  });\n\n  const watchedHeight = watch('height');\n  const watchedWeight = watch('weight');\n\n  // Calculate BMI when height and weight change\n  const bmi = watchedHeight && watchedWeight ? calculateBMI(watchedHeight, watchedWeight) : null;\n  const bmiCategory = bmi ? getBMICategory(watchedHeight!, watchedWeight!) : null;\n\n  // Reset form when sizing changes\n  useEffect(() => {\n    if (sizing) {\n      reset({\n        user_id: sizing.user_id,\n        first_name: sizing.first_name || '',\n        last_name: sizing.last_name || '',\n        size_category: sizing.size_category,\n        height: sizing.height || undefined,\n        weight: sizing.weight || undefined,\n        chest: sizing.chest || undefined,\n        waist: sizing.waist || undefined,\n        neck: sizing.neck || undefined,\n        sleeve_length: sizing.sleeve_length || undefined,\n        inseam: sizing.inseam || undefined,\n        shirt_size: sizing.shirt_size || '',\n        pants_size: sizing.pants_size || '',\n        shoe_size: sizing.shoe_size || '',\n        hat_size: sizing.hat_size || '',\n        glove_size: sizing.glove_size || '',\n        equipment_preferences: sizing.equipment_preferences || {},\n        notes: sizing.notes || '',\n      });\n    } else {\n      reset({\n        user_id: '',\n        first_name: '',\n        last_name: '',\n        equipment_preferences: {},\n      });\n    }\n  }, [sizing, reset]);\n\n  const onSubmit = async (data: UniformSizingFormData) => {\n    try {\n      await onSave(data);\n      onClose();\n    } catch (error) {\n      // Error handling is done in the parent component\n      console.error('Error saving uniform sizing:', error);\n    }\n  };\n\n  const title = mode === 'create' ? 'Add Uniform Sizing' : \n                mode === 'edit' ? 'Edit Uniform Sizing' : \n                'View Uniform Sizing';\n\n  const tabs = [\n    {\n      key: 'basic',\n      label: 'Basic Info',\n      icon: User,\n      content: (\n        <div className=\"space-y-lg\">\n          {/* Personal Information */}\n          <div>\n            <h3 className=\"text-lg font-semibold mb-md flex items-center\">\n              <User className=\"h-5 w-5 mr-sm\" />\n              Personal Information\n            </h3>\n            \n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-md\">\n              <div>\n                <label className=\"block text-sm font-medium mb-xs\">First Name</label>\n                <Input\n                  {...register('first_name')}\n                  placeholder=\"Enter first name\"\n                  disabled={mode === 'view'}\n                  error={errors.first_name?.message}\n                />\n              </div>\n              \n              <div>\n                <label className=\"block text-sm font-medium mb-xs\">Last Name</label>\n                <Input\n                  {...register('last_name')}\n                  placeholder=\"Enter last name\"\n                  disabled={mode === 'view'}\n                  error={errors.last_name?.message}\n                />\n              </div>\n            </div>\n\n            <div className=\"mt-md\">\n              <label className=\"block text-sm font-medium mb-xs\">Size Category</label>\n              <Select\n                value={watch('size_category') || ''}\n                onValueChange={(value) => setValue('size_category', value as unknown)}\n                disabled={mode === 'view'}\n              >\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Select size category\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {SIZE_CATEGORIES.map((category) => (\n                    <SelectItem key={category} value={category}>\n                      {category.toUpperCase()}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n        </div>\n      ),\n    },\n    {\n      key: 'measurements',\n      label: 'Measurements',\n      icon: Ruler,\n      content: (\n        <div className=\"space-y-lg\">\n          {/* Body Measurements */}\n          <div>\n            <h3 className=\"text-lg font-semibold mb-md flex items-center\">\n              <Ruler className=\"h-5 w-5 mr-sm\" />\n              Body Measurements\n            </h3>\n            \n            {/* BMI Display */}\n            {bmi && (\n              <Card className=\"p-md mb-md bg-muted/50\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <span className=\"text-sm font-medium\">BMI: {bmi.toFixed(1)}</span>\n                    {bmiCategory && (\n                      <Badge variant=\"outline\" className=\"ml-sm\">\n                        {bmiCategory}\n                      </Badge>\n                    )}\n                  </div>\n                  <span className=\"text-xs text-muted-foreground\">\n                    Calculated from height and weight\n                  </span>\n                </div>\n              </Card>\n            )}\n            \n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-md\">\n              <div>\n                <label className=\"block text-sm font-medium mb-xs\">Height (inches)</label>\n                <Input\n                  type=\"number\"\n                  {...register('height', { valueAsNumber: true })}\n                  placeholder=\"e.g., 70\"\n                  disabled={mode === 'view'}\n                  error={errors.height?.message}\n                />\n                {watchedHeight && (\n                  <p className=\"text-xs text-muted-foreground mt-xs\">\n                    {Math.floor(watchedHeight / 12)}' {watchedHeight % 12}\"\n                  </p>\n                )}\n              </div>\n              \n              <div>\n                <label className=\"block text-sm font-medium mb-xs\">Weight (lbs)</label>\n                <Input\n                  type=\"number\"\n                  {...register('weight', { valueAsNumber: true })}\n                  placeholder=\"e.g., 180\"\n                  disabled={mode === 'view'}\n                  error={errors.weight?.message}\n                />\n              </div>\n              \n              <div>\n                <label className=\"block text-sm font-medium mb-xs\">Chest (inches)</label>\n                <Input\n                  type=\"number\"\n                  {...register('chest', { valueAsNumber: true })}\n                  placeholder=\"e.g., 42\"\n                  disabled={mode === 'view'}\n                  error={errors.chest?.message}\n                />\n              </div>\n              \n              <div>\n                <label className=\"block text-sm font-medium mb-xs\">Waist (inches)</label>\n                <Input\n                  type=\"number\"\n                  {...register('waist', { valueAsNumber: true })}\n                  placeholder=\"e.g., 34\"\n                  disabled={mode === 'view'}\n                  error={errors.waist?.message}\n                />\n              </div>\n              \n              <div>\n                <label className=\"block text-sm font-medium mb-xs\">Neck (inches)</label>\n                <Input\n                  type=\"number\"\n                  {...register('neck', { valueAsNumber: true })}\n                  placeholder=\"e.g., 16\"\n                  disabled={mode === 'view'}\n                  error={errors.neck?.message}\n                />\n              </div>\n              \n              <div>\n                <label className=\"block text-sm font-medium mb-xs\">Sleeve Length (inches)</label>\n                <Input\n                  type=\"number\"\n                  {...register('sleeve_length', { valueAsNumber: true })}\n                  placeholder=\"e.g., 34\"\n                  disabled={mode === 'view'}\n                  error={errors.sleeve_length?.message}\n                />\n              </div>\n              \n              <div>\n                <label className=\"block text-sm font-medium mb-xs\">Inseam (inches)</label>\n                <Input\n                  type=\"number\"\n                  {...register('inseam', { valueAsNumber: true })}\n                  placeholder=\"e.g., 32\"\n                  disabled={mode === 'view'}\n                  error={errors.inseam?.message}\n                />\n              </div>\n            </div>\n          </div>\n        </div>\n      ),\n    },\n    {\n      key: 'clothing',\n      label: 'Clothing Sizes',\n      icon: Shirt,\n      content: (\n        <div className=\"space-y-lg\">\n          {/* Clothing Sizes */}\n          <div>\n            <h3 className=\"text-lg font-semibold mb-md flex items-center\">\n              <Shirt className=\"h-5 w-5 mr-sm\" />\n              Clothing Sizes\n            </h3>\n            \n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-md\">\n              <div>\n                <label className=\"block text-sm font-medium mb-xs\">Shirt Size</label>\n                <Input\n                  {...register('shirt_size')}\n                  placeholder=\"e.g., L, XL, 16.5\"\n                  disabled={mode === 'view'}\n                />\n              </div>\n              \n              <div>\n                <label className=\"block text-sm font-medium mb-xs\">Pants Size</label>\n                <Input\n                  {...register('pants_size')}\n                  placeholder=\"e.g., 34x32, L\"\n                  disabled={mode === 'view'}\n                />\n              </div>\n              \n              <div>\n                <label className=\"block text-sm font-medium mb-xs\">Shoe Size</label>\n                <Input\n                  {...register('shoe_size')}\n                  placeholder=\"e.g., 10.5, 11\"\n                  disabled={mode === 'view'}\n                />\n              </div>\n              \n              <div>\n                <label className=\"block text-sm font-medium mb-xs\">Hat Size</label>\n                <Input\n                  {...register('hat_size')}\n                  placeholder=\"e.g., 7 1/4, L\"\n                  disabled={mode === 'view'}\n                />\n              </div>\n              \n              <div>\n                <label className=\"block text-sm font-medium mb-xs\">Glove Size</label>\n                <Input\n                  {...register('glove_size')}\n                  placeholder=\"e.g., M, L, 9\"\n                  disabled={mode === 'view'}\n                />\n              </div>\n            </div>\n          </div>\n\n          {/* Equipment Preferences */}\n          <div>\n            <h4 className=\"font-medium mb-sm\">Equipment Preferences</h4>\n            <div className=\"space-y-sm\">\n              {EQUIPMENT_TYPES.map((equipment) => (\n                <div key={equipment} className=\"flex items-center space-x-sm\">\n                  <label className=\"text-sm font-medium w-32 capitalize\">\n                    {equipment.replace('_', ' ')}:\n                  </label>\n                  <Input\n                    placeholder={`Preferred ${equipment.replace('_', ' ')}`}\n                    disabled={mode === 'view'}\n                    onChange={(e) => {\n                      const current = watch('equipment_preferences') || {};\n                      setValue('equipment_preferences', {\n                        ...current,\n                        [equipment]: e.target.value,\n                      });\n                    }}\n                    value={watch('equipment_preferences')?.[equipment] || ''}\n                  />\n                </div>\n              ))}\n            </div>\n          </div>\n\n          {/* Notes */}\n          <div>\n            <label className=\"block text-sm font-medium mb-xs\">Notes</label>\n            <Textarea\n              {...register('notes')}\n              placeholder=\"Additional notes about sizing preferences, fit issues, etc.\"\n              rows={3}\n              disabled={mode === 'view'}\n            />\n          </div>\n        </div>\n      ),\n    },\n  ];\n\n  return (\n    <UniversalDrawer\n      isOpen={isOpen}\n      onClose={onClose}\n      title={title}\n      tabs={tabs}\n      actions={\n        mode !== 'view' ? (\n          <div className=\"flex items-center space-x-sm\">\n            <Button variant=\"outline\" onClick={onClose} disabled={isSubmitting}>\n              Cancel\n            </Button>\n            <Button onClick={handleSubmit(onSubmit)} disabled={isSubmitting}>\n              <Save className=\"h-4 w-4 mr-sm\" />\n              {isSubmitting ? 'Saving...' : mode === 'create' ? 'Create' : 'Update'}\n            </Button>\n          </div>\n        ) : undefined\n      }\n    />\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ghxstship/apps/web/app/(app)/(shell)/profile/views/ProfileAnalyticsView.tsx","messages":[{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":66,"column":60,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[2347,2429],"text":"\n            Insights and statistics about your organization&apos;s profiles\n          "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[2347,2429],"text":"\n            Insights and statistics about your organization&lsquo;s profiles\n          "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[2347,2429],"text":"\n            Insights and statistics about your organization&#39;s profiles\n          "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[2347,2429],"text":"\n            Insights and statistics about your organization&rsquo;s profiles\n          "},"desc":"Replace with `&rsquo;`."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { Users, UserCheck, UserX, Clock, TrendingUp, TrendingDown, RefreshCw, BarChart3 } from \"lucide-react\";\nimport { Card, Button } from '@ghxstship/ui';\nimport type { ProfileStats } from '../types';\n\ninterface ProfileAnalyticsViewProps {\n  stats: ProfileStats;\n  loading: boolean;\n  onRefresh: () => void;\n}\n\nexport default function ProfileAnalyticsView({\n  stats,\n  loading,\n  onRefresh\n}: ProfileAnalyticsViewProps) {\n  if (loading) {\n    return (\n      <div className=\"space-y-lg\">\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-md\">\n          {Array.from({ length: 4 }).map((_, i) => (\n            <Card key={i} className=\"p-lg animate-pulse\">\n              <div className=\"flex items-center justify-between mb-sm\">\n                <div className=\"w-24 h-4 bg-muted rounded\" />\n                <div className=\"w-8 h-8 bg-muted rounded\" />\n              </div>\n              <div className=\"w-16 h-8 bg-muted rounded mb-xs\" />\n              <div className=\"w-20 h-3 bg-muted rounded\" />\n            </Card>\n          ))}\n        </div>\n        \n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-lg\">\n          <Card className=\"p-lg animate-pulse\">\n            <div className=\"w-32 h-6 bg-muted rounded mb-md\" />\n            <div className=\"space-y-sm\">\n              {Array.from({ length: 5 }).map((_, i) => (\n                <div key={i} className=\"flex justify-between\">\n                  <div className=\"w-24 h-4 bg-muted rounded\" />\n                  <div className=\"w-12 h-4 bg-muted rounded\" />\n                </div>\n              ))}\n            </div>\n          </Card>\n          \n          <Card className=\"p-lg animate-pulse\">\n            <div className=\"w-32 h-6 bg-muted rounded mb-md\" />\n            <div className=\"w-full h-48 bg-muted rounded\" />\n          </Card>\n        </div>\n      </div>\n    );\n  }\n\n  const completionTrend = stats.completion_average > 75 ? 'up' : stats.completion_average > 50 ? 'stable' : 'down';\n  const activePercentage = stats.total > 0 ? Math.round((stats.active / stats.total) * 100) : 0;\n\n  return (\n    <div className=\"space-y-lg\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h2 className=\"text-2xl font-bold\">Profile Analytics</h2>\n          <p className=\"text-muted-foreground\">\n            Insights and statistics about your organization's profiles\n          </p>\n        </div>\n        <Button variant=\"outline\" onClick={onRefresh}>\n          <RefreshCw className=\"h-4 w-4 mr-sm\" />\n          Refresh\n        </Button>\n      </div>\n\n      {/* Key Metrics */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-md\">\n        <Card className=\"p-lg\">\n          <div className=\"flex items-center justify-between mb-sm\">\n            <p className=\"text-sm font-medium text-muted-foreground\">Total Profiles</p>\n            <Users className=\"h-5 w-5 text-muted-foreground\" />\n          </div>\n          <p className=\"text-3xl font-bold\">{stats.total}</p>\n          <p className=\"text-sm text-muted-foreground\">\n            All registered profiles\n          </p>\n        </Card>\n\n        <Card className=\"p-lg\">\n          <div className=\"flex items-center justify-between mb-sm\">\n            <p className=\"text-sm font-medium text-muted-foreground\">Active Profiles</p>\n            <UserCheck className=\"h-5 w-5 text-green-600\" />\n          </div>\n          <p className=\"text-3xl font-bold text-green-600\">{stats.active}</p>\n          <p className=\"text-sm text-muted-foreground\">\n            {activePercentage}% of total\n          </p>\n        </Card>\n\n        <Card className=\"p-lg\">\n          <div className=\"flex items-center justify-between mb-sm\">\n            <p className=\"text-sm font-medium text-muted-foreground\">Avg Completion</p>\n            {completionTrend === 'up' ? (\n              <TrendingUp className=\"h-5 w-5 text-green-600\" />\n            ) : completionTrend === 'down' ? (\n              <TrendingDown className=\"h-5 w-5 text-red-600\" />\n            ) : (\n              <BarChart3 className=\"h-5 w-5 text-yellow-600\" />\n            )}\n          </div>\n          <p className={`text-3xl font-bold ${\n            completionTrend === 'up' ? 'text-green-600' : \n            completionTrend === 'down' ? 'text-red-600' : \n            'text-yellow-600'\n          }`}>\n            {Math.round(stats.completion_average)}%\n          </p>\n          <p className=\"text-sm text-muted-foreground\">\n            Profile completion rate\n          </p>\n        </Card>\n\n        <Card className=\"p-lg\">\n          <div className=\"flex items-center justify-between mb-sm\">\n            <p className=\"text-sm font-medium text-muted-foreground\">Recent Updates</p>\n            <Clock className=\"h-5 w-5 text-muted-foreground\" />\n          </div>\n          <p className=\"text-3xl font-bold\">{stats.recent_updates}</p>\n          <p className=\"text-sm text-muted-foreground\">\n            Last 7 days\n          </p>\n        </Card>\n      </div>\n\n      {/* Detailed Analytics */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-lg\">\n        {/* Status Breakdown */}\n        <Card className=\"p-lg\">\n          <h3 className=\"text-lg font-semibold mb-md\">Status Breakdown</h3>\n          <div className=\"space-y-md\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center gap-sm\">\n                <div className=\"w-3 h-3 bg-green-500 rounded-full\" />\n                <span className=\"text-sm\">Active</span>\n              </div>\n              <div className=\"text-right\">\n                <span className=\"font-semibold\">{stats.active}</span>\n                <span className=\"text-sm text-muted-foreground ml-sm\">\n                  ({activePercentage}%)\n                </span>\n              </div>\n            </div>\n            \n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center gap-sm\">\n                <div className=\"w-3 h-3 bg-red-500 rounded-full\" />\n                <span className=\"text-sm\">Inactive</span>\n              </div>\n              <div className=\"text-right\">\n                <span className=\"font-semibold\">{stats.inactive}</span>\n                <span className=\"text-sm text-muted-foreground ml-sm\">\n                  ({stats.total > 0 ? Math.round((stats.inactive / stats.total) * 100) : 0}%)\n                </span>\n              </div>\n            </div>\n            \n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center gap-sm\">\n                <div className=\"w-3 h-3 bg-yellow-500 rounded-full\" />\n                <span className=\"text-sm\">Pending</span>\n              </div>\n              <div className=\"text-right\">\n                <span className=\"font-semibold\">{stats.pending}</span>\n                <span className=\"text-sm text-muted-foreground ml-sm\">\n                  ({stats.total > 0 ? Math.round((stats.pending / stats.total) * 100) : 0}%)\n                </span>\n              </div>\n            </div>\n\n            {stats.suspended !== undefined && (\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center gap-sm\">\n                  <div className=\"w-3 h-3 bg-gray-500 rounded-full\" />\n                  <span className=\"text-sm\">Suspended</span>\n                </div>\n                <div className=\"text-right\">\n                  <span className=\"font-semibold\">{stats.suspended}</span>\n                  <span className=\"text-sm text-muted-foreground ml-sm\">\n                    ({stats.total > 0 ? Math.round((stats.suspended / stats.total) * 100) : 0}%)\n                  </span>\n                </div>\n              </div>\n            )}\n          </div>\n        </Card>\n\n        {/* Department Distribution */}\n        <Card className=\"p-lg\">\n          <h3 className=\"text-lg font-semibold mb-md\">Department Distribution</h3>\n          {stats.by_department ? (\n            <div className=\"space-y-md\">\n              {Object.entries(stats.by_department)\n                .sort(([,a], [,b]) => b - a)\n                .slice(0, 6)\n                .map(([department, count]) => (\n                <div key={department} className=\"flex items-center justify-between\">\n                  <span className=\"text-sm capitalize\">{department.replace('_', ' ')}</span>\n                  <div className=\"flex items-center gap-sm\">\n                    <div className=\"w-20 bg-muted rounded-full h-2\">\n                      <div \n                        className=\"bg-primary h-2 rounded-full\" \n                        style={{ \n                          width: `${stats.total > 0 ? (count / stats.total) * 100 : 0}%` \n                        }}\n                      />\n                    </div>\n                    <span className=\"font-semibold w-8 text-right\">{count}</span>\n                  </div>\n                </div>\n              ))}\n            </div>\n          ) : (\n            <div className=\"text-center py-lg text-muted-foreground\">\n              <BarChart3 className=\"h-12 w-12 mx-auto mb-sm opacity-50\" />\n              <p>Department data not available</p>\n            </div>\n          )}\n        </Card>\n      </div>\n\n      {/* Employment Type Distribution */}\n      {stats.by_employment_type && (\n        <Card className=\"p-lg\">\n          <h3 className=\"text-lg font-semibold mb-md\">Employment Type Distribution</h3>\n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-md\">\n            {Object.entries(stats.by_employment_type).map(([type, count]) => (\n              <div key={type} className=\"text-center\">\n                <p className=\"text-2xl font-bold\">{count}</p>\n                <p className=\"text-sm text-muted-foreground capitalize\">\n                  {type.replace('_', ' ')}\n                </p>\n                <p className=\"text-xs text-muted-foreground\">\n                  {stats.total > 0 ? Math.round((count / stats.total) * 100) : 0}%\n                </p>\n              </div>\n            ))}\n          </div>\n        </Card>\n      )}\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ghxstship/apps/web/app/(app)/(shell)/profile/views/ProfileCalendarView.tsx","messages":[{"ruleId":"@next/next/no-img-element","severity":1,"message":"Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` or a custom image loader to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","line":105,"column":27,"nodeType":"JSXOpeningElement","endLine":105,"endColumn":83}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { Calendar, User } from \"lucide-react\";\nimport { Card, Badge, Avatar } from '@ghxstship/ui';\nimport type { UserProfile, FieldConfig } from '../types';\n\ninterface ProfileCalendarViewProps {\n  profiles: UserProfile[];\n  loading: boolean;\n  selectedIds: string[];\n  onSelectionChange: (ids: string[]) => void;\n  onEdit: (profile: UserProfile) => void;\n  fieldConfig: FieldConfig[];\n}\n\nexport default function ProfileCalendarView({\n  profiles,\n  loading,\n  selectedIds,\n  onSelectionChange,\n  onEdit,\n  fieldConfig\n}: ProfileCalendarViewProps) {\n  if (loading) {\n    return (\n      <Card className=\"p-xl text-center\">\n        <div className=\"animate-pulse space-y-md\">\n          <div className=\"w-12 h-12 bg-muted rounded-full mx-auto\" />\n          <div className=\"w-48 h-4 bg-muted rounded mx-auto\" />\n          <div className=\"w-32 h-3 bg-muted rounded mx-auto\" />\n        </div>\n      </Card>\n    );\n  }\n\n  // Group profiles by hire date for calendar view\n  const profilesByDate = profiles.reduce((acc, profile) => {\n    if (profile.hire_date) {\n      const date = new Date(profile.hire_date).toDateString();\n      if (!acc[date]) {\n        acc[date] = [];\n      }\n      acc[date].push(profile);\n    }\n    return acc;\n  }, {} as Record<string, UserProfile[]>);\n\n  const sortedDates = Object.keys(profilesByDate).sort((a, b) => \n    new Date(b).getTime() - new Date(a).getTime()\n  );\n\n  return (\n    <div className=\"space-y-lg\">\n      <div className=\"flex items-center gap-sm mb-lg\">\n        <Calendar className=\"h-5 w-5\" />\n        <h2 className=\"text-lg font-semibold\">Profiles by Hire Date</h2>\n      </div>\n\n      {sortedDates.length === 0 ? (\n        <Card className=\"p-xl text-center\">\n          <Calendar className=\"h-12 w-12 text-muted-foreground mx-auto mb-md\" />\n          <h3 className=\"text-lg font-semibold mb-sm\">No hire dates available</h3>\n          <p className=\"text-muted-foreground\">\n            Profiles with hire dates will appear here in a timeline view.\n          </p>\n        </Card>\n      ) : (\n        <div className=\"space-y-md\">\n          {sortedDates.map((dateString) => {\n            const date = new Date(dateString);\n            const dateProfiles = profilesByDate[dateString];\n            \n            return (\n              <Card key={dateString} className=\"p-md\">\n                <div className=\"flex items-center gap-md mb-md\">\n                  <div className=\"flex-shrink-0\">\n                    <div className=\"w-12 h-12 bg-primary/10 rounded-full flex items-center justify-center\">\n                      <Calendar className=\"h-6 w-6 text-primary\" />\n                    </div>\n                  </div>\n                  <div>\n                    <h3 className=\"font-semibold\">\n                      {date.toLocaleDateString('en-US', { \n                        weekday: 'long',\n                        year: 'numeric',\n                        month: 'long',\n                        day: 'numeric'\n                      })}\n                    </h3>\n                    <p className=\"text-sm text-muted-foreground\">\n                      {dateProfiles.length} profile{dateProfiles.length !== 1 ? 's' : ''} hired\n                    </p>\n                  </div>\n                </div>\n\n                <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-md\">\n                  {dateProfiles.map((profile) => (\n                    <div\n                      key={profile.id}\n                      className=\"flex items-center gap-sm p-sm rounded-lg border cursor-pointer hover:bg-muted/50 transition-colors\"\n                      onClick={() => onEdit(profile)}\n                    >\n                      <Avatar className=\"h-8 w-8\">\n                        {profile.avatar_url ? (\n                          <img src={profile.avatar_url} alt={profile.full_name} />\n                        ) : (\n                          <div className=\"flex items-center justify-center h-full w-full bg-primary/10 text-primary font-semibold text-xs\">\n                            {profile.full_name.split(' ').map(n => n[0]).join('').toUpperCase()}\n                          </div>\n                        )}\n                      </Avatar>\n                      <div className=\"flex-1 min-w-0\">\n                        <p className=\"font-medium text-sm truncate\">{profile.full_name}</p>\n                        <p className=\"text-xs text-muted-foreground truncate\">\n                          {profile.position} • {profile.department}\n                        </p>\n                      </div>\n                      <Badge \n                        variant={profile.status === 'active' ? 'success' : 'secondary'}\n                        size=\"sm\"\n                      >\n                        {profile.status}\n                      </Badge>\n                    </div>\n                  ))}\n                </div>\n              </Card>\n            );\n          })}\n        </div>\n      )}\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ghxstship/apps/web/app/(app)/(shell)/profile/views/ProfileGridView.tsx","messages":[{"ruleId":"@next/next/no-img-element","severity":1,"message":"Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` or a custom image loader to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","line":174,"column":19,"nodeType":"JSXOpeningElement","endLine":174,"endColumn":75}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { User, Mail, Phone, MapPin, Calendar, MoreHorizontal, Edit, Eye, Trash2, UserCheck, Building } from \"lucide-react\";\nimport { useState } from 'react';\nimport {\n  Card,\n  Badge,\n  Button,\n  Avatar,\n  Checkbox,\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from '@ghxstship/ui';\n\nimport type { UserProfile, FieldConfig } from '../types';\n\ninterface ProfileGridViewProps {\n  profiles: UserProfile[];\n  loading: boolean;\n  selectedIds: string[];\n  onSelectionChange: (ids: string[]) => void;\n  onEdit: (profile: UserProfile) => void;\n  fieldConfig: FieldConfig[];\n}\n\nexport default function ProfileGridView({\n  profiles,\n  loading,\n  selectedIds,\n  onSelectionChange,\n  onEdit,\n  fieldConfig\n}: ProfileGridViewProps) {\n  const [hoveredId, setHoveredId] = useState<string | null>(null);\n\n  const handleSelectProfile = (profileId: string, checked: boolean) => {\n    if (checked) {\n      onSelectionChange([...selectedIds, profileId]);\n    } else {\n      onSelectionChange(selectedIds.filter(id => id !== profileId));\n    }\n  };\n\n  const handleSelectAll = (checked: boolean) => {\n    if (checked) {\n      onSelectionChange(profiles.map(p => p.id));\n    } else {\n      onSelectionChange([]);\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'active':\n        return 'success';\n      case 'inactive':\n        return 'destructive';\n      case 'pending':\n        return 'warning';\n      case 'suspended':\n        return 'destructive';\n      default:\n        return 'secondary';\n    }\n  };\n\n  const getCompletionColor = (percentage: number) => {\n    if (percentage >= 90) return 'text-green-600';\n    if (percentage >= 70) return 'text-yellow-600';\n    return 'text-red-600';\n  };\n\n  if (loading) {\n    return (\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-md\">\n        {Array.from({ length: 8 }).map((_, i) => (\n          <Card key={i} className=\"p-lg animate-pulse\">\n            <div className=\"flex items-start gap-md\">\n              <div className=\"w-12 h-12 bg-muted rounded-full\" />\n              <div className=\"flex-1 space-y-sm\">\n                <div className=\"h-4 bg-muted rounded w-3/4\" />\n                <div className=\"h-3 bg-muted rounded w-1/2\" />\n                <div className=\"h-3 bg-muted rounded w-2/3\" />\n              </div>\n            </div>\n          </Card>\n        ))}\n      </div>\n    );\n  }\n\n  if (profiles.length === 0) {\n    return (\n      <Card className=\"p-xl text-center\">\n        <User className=\"h-12 w-12 text-muted-foreground mx-auto mb-md\" />\n        <h3 className=\"text-lg font-semibold mb-sm\">No profiles found</h3>\n        <p className=\"text-muted-foreground mb-lg\">\n          Get started by creating your first profile or adjust your filters.\n        </p>\n        <Button>Create Profile</Button>\n      </Card>\n    );\n  }\n\n  return (\n    <div className=\"space-y-md\">\n      {/* Header with bulk selection */}\n      <div className=\"flex items-center gap-sm\">\n        <Checkbox\n          checked={selectedIds.length === profiles.length}\n          onCheckedChange={handleSelectAll}\n          indeterminate={selectedIds.length > 0 && selectedIds.length < profiles.length}\n        />\n        <span className=\"text-sm text-muted-foreground\">\n          {selectedIds.length > 0 ? `${selectedIds.length} selected` : 'Select all'}\n        </span>\n      </div>\n\n      {/* Grid */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-md\">\n        {profiles.map((profile) => (\n          <Card\n            key={profile.id}\n            className={`p-lg transition-all duration-200 hover:shadow-md cursor-pointer ${\n              selectedIds.includes(profile.id) ? 'ring-2 ring-primary' : ''\n            }`}\n            onMouseEnter={() => setHoveredId(profile.id)}\n            onMouseLeave={() => setHoveredId(null)}\n          >\n            {/* Header with selection and actions */}\n            <div className=\"flex items-start justify-between mb-md\">\n              <Checkbox\n                checked={selectedIds.includes(profile.id)}\n                onCheckedChange={(checked) => handleSelectProfile(profile.id, checked as boolean)}\n                onClick={(e) => e.stopPropagation()}\n              />\n              \n              <DropdownMenu>\n                <DropdownMenuTrigger asChild>\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    className={`h-8 w-8 p-0 transition-opacity ${\n                      hoveredId === profile.id ? 'opacity-100' : 'opacity-0'\n                    }`}\n                    onClick={(e) => e.stopPropagation()}\n                  >\n                    <MoreHorizontal className=\"h-4 w-4\" />\n                  </Button>\n                </DropdownMenuTrigger>\n                <DropdownMenuContent align=\"end\">\n                  <DropdownMenuItem onClick={() => onEdit(profile)}>\n                    <Eye className=\"h-4 w-4 mr-sm\" />\n                    View Details\n                  </DropdownMenuItem>\n                  <DropdownMenuItem onClick={() => onEdit(profile)}>\n                    <Edit className=\"h-4 w-4 mr-sm\" />\n                    Edit Profile\n                  </DropdownMenuItem>\n                  <DropdownMenuItem className=\"text-destructive\">\n                    <Trash2 className=\"h-4 w-4 mr-sm\" />\n                    Delete Profile\n                  </DropdownMenuItem>\n                </DropdownMenuContent>\n              </DropdownMenu>\n            </div>\n\n            {/* Profile Avatar and Basic Info */}\n            <div className=\"flex items-start gap-md mb-md\">\n              <Avatar className=\"h-12 w-12\">\n                {profile.avatar_url ? (\n                  <img src={profile.avatar_url} alt={profile.full_name} />\n                ) : (\n                  <div className=\"flex items-center justify-center h-full w-full bg-primary/10 text-primary font-semibold\">\n                    {profile.full_name.split(' ').map(n => n[0]).join('').toUpperCase()}\n                  </div>\n                )}\n              </Avatar>\n              \n              <div className=\"flex-1 min-w-0\">\n                <h3 className=\"font-semibold text-sm truncate\" title={profile.full_name}>\n                  {profile.full_name}\n                </h3>\n                <p className=\"text-xs text-muted-foreground truncate\" title={profile.position}>\n                  {profile.position || 'No position set'}\n                </p>\n                <Badge \n                  variant={getStatusColor(profile.status) as unknown} \n                  size=\"sm\" \n                  className=\"mt-xs\"\n                >\n                  {profile.status}\n                </Badge>\n              </div>\n            </div>\n\n            {/* Contact Information */}\n            <div className=\"space-y-xs mb-md\">\n              <div className=\"flex items-center gap-xs text-xs text-muted-foreground\">\n                <Mail className=\"h-3 w-3 flex-shrink-0\" />\n                <span className=\"truncate\" title={profile.email}>\n                  {profile.email}\n                </span>\n              </div>\n              \n              {profile.phone && (\n                <div className=\"flex items-center gap-xs text-xs text-muted-foreground\">\n                  <Phone className=\"h-3 w-3 flex-shrink-0\" />\n                  <span>{profile.phone}</span>\n                </div>\n              )}\n              \n              {profile.department && (\n                <div className=\"flex items-center gap-xs text-xs text-muted-foreground\">\n                  <Building className=\"h-3 w-3 flex-shrink-0\" />\n                  <span className=\"truncate\">{profile.department}</span>\n                </div>\n              )}\n            </div>\n\n            {/* Profile Completion */}\n            <div className=\"space-y-xs mb-md\">\n              <div className=\"flex items-center justify-between text-xs\">\n                <span className=\"text-muted-foreground\">Profile Completion</span>\n                <span className={`font-medium ${getCompletionColor(profile.completion_percentage)}`}>\n                  {profile.completion_percentage}%\n                </span>\n              </div>\n              <div className=\"w-full bg-muted rounded-full h-1.5\">\n                <div \n                  className=\"bg-primary h-1.5 rounded-full transition-all duration-300\" \n                  style={{ width: `${profile.completion_percentage}%` }}\n                />\n              </div>\n            </div>\n\n            {/* Additional Stats */}\n            <div className=\"grid grid-cols-2 gap-md text-center\">\n              <div>\n                <p className=\"text-xs font-medium\">{profile.certifications_count || 0}</p>\n                <p className=\"text-xs text-muted-foreground\">Certifications</p>\n              </div>\n              <div>\n                <p className=\"text-xs font-medium\">{profile.endorsements_count || 0}</p>\n                <p className=\"text-xs text-muted-foreground\">Endorsements</p>\n              </div>\n            </div>\n\n            {/* Last Activity */}\n            {profile.last_login && (\n              <div className=\"mt-md pt-md border-t border-border\">\n                <div className=\"flex items-center gap-xs text-xs text-muted-foreground\">\n                  <Calendar className=\"h-3 w-3\" />\n                  <span>\n                    Last login: {new Date(profile.last_login).toLocaleDateString()}\n                  </span>\n                </div>\n              </div>\n            )}\n          </Card>\n        ))}\n      </div>\n\n      {/* Load More / Pagination */}\n      {profiles.length > 0 && (\n        <div className=\"text-center pt-lg\">\n          <Button variant=\"outline\">\n            Load More Profiles\n          </Button>\n        </div>\n      )}\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ghxstship/apps/web/app/(app)/(shell)/profile/views/ProfileKanbanView.tsx","messages":[{"ruleId":"@next/next/no-img-element","severity":1,"message":"Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` or a custom image loader to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","line":79,"column":25,"nodeType":"JSXOpeningElement","endLine":79,"endColumn":81}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { User } from \"lucide-react\";\nimport { Card, Badge, Avatar } from '@ghxstship/ui';\nimport type { UserProfile, FieldConfig } from '../types';\n\ninterface ProfileKanbanViewProps {\n  profiles: UserProfile[];\n  loading: boolean;\n  selectedIds: string[];\n  onSelectionChange: (ids: string[]) => void;\n  onEdit: (profile: UserProfile) => void;\n  fieldConfig: FieldConfig[];\n}\n\nexport default function ProfileKanbanView({\n  profiles,\n  loading,\n  selectedIds,\n  onSelectionChange,\n  onEdit,\n  fieldConfig\n}: ProfileKanbanViewProps) {\n  const columns = [\n    { id: 'pending', title: 'Pending', status: 'pending' },\n    { id: 'active', title: 'Active', status: 'active' },\n    { id: 'inactive', title: 'Inactive', status: 'inactive' },\n  ];\n\n  const getProfilesByStatus = (status: string) => {\n    return profiles.filter(profile => profile.status === status);\n  };\n\n  if (loading) {\n    return (\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-lg\">\n        {columns.map((column) => (\n          <div key={column.id} className=\"space-y-md\">\n            <h3 className=\"font-semibold\">{column.title}</h3>\n            <div className=\"space-y-sm\">\n              {Array.from({ length: 3 }).map((_, i) => (\n                <Card key={i} className=\"p-md animate-pulse\">\n                  <div className=\"flex items-center gap-sm mb-sm\">\n                    <div className=\"w-8 h-8 bg-muted rounded-full\" />\n                    <div className=\"w-24 h-4 bg-muted rounded\" />\n                  </div>\n                  <div className=\"w-full h-3 bg-muted rounded\" />\n                </Card>\n              ))}\n            </div>\n          </div>\n        ))}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"grid grid-cols-1 md:grid-cols-3 gap-lg\">\n      {columns.map((column) => {\n        const columnProfiles = getProfilesByStatus(column.status);\n        \n        return (\n          <div key={column.id} className=\"space-y-md\">\n            <div className=\"flex items-center justify-between\">\n              <h3 className=\"font-semibold\">{column.title}</h3>\n              <Badge variant=\"outline\">{columnProfiles.length}</Badge>\n            </div>\n            \n            <div className=\"space-y-sm\">\n              {columnProfiles.map((profile) => (\n                <Card\n                  key={profile.id}\n                  className=\"p-md cursor-pointer hover:shadow-sm transition-shadow\"\n                  onClick={() => onEdit(profile)}\n                >\n                  <div className=\"flex items-center gap-sm mb-sm\">\n                    <Avatar className=\"h-8 w-8\">\n                      {profile.avatar_url ? (\n                        <img src={profile.avatar_url} alt={profile.full_name} />\n                      ) : (\n                        <div className=\"flex items-center justify-center h-full w-full bg-primary/10 text-primary font-semibold text-xs\">\n                          {profile.full_name.split(' ').map(n => n[0]).join('').toUpperCase()}\n                        </div>\n                      )}\n                    </Avatar>\n                    <div className=\"flex-1 min-w-0\">\n                      <p className=\"font-medium text-sm truncate\">{profile.full_name}</p>\n                      <p className=\"text-xs text-muted-foreground truncate\">{profile.position}</p>\n                    </div>\n                  </div>\n                  \n                  <div className=\"space-y-xs\">\n                    <div className=\"flex items-center justify-between text-xs\">\n                      <span className=\"text-muted-foreground\">Completion</span>\n                      <span className=\"font-medium\">{profile.completion_percentage}%</span>\n                    </div>\n                    <div className=\"w-full bg-muted rounded-full h-1\">\n                      <div \n                        className=\"bg-primary h-1 rounded-full transition-all duration-300\" \n                        style={{ width: `${profile.completion_percentage}%` }}\n                      />\n                    </div>\n                  </div>\n                </Card>\n              ))}\n              \n              {columnProfiles.length === 0 && (\n                <Card className=\"p-md text-center text-muted-foreground\">\n                  <User className=\"h-8 w-8 mx-auto mb-sm opacity-50\" />\n                  <p className=\"text-sm\">No {column.title.toLowerCase()} profiles</p>\n                </Card>\n              )}\n            </div>\n          </div>\n        );\n      })}\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ghxstship/apps/web/app/(app)/(shell)/profile/views/ProfileListView.tsx","messages":[{"ruleId":"@next/next/no-img-element","severity":1,"message":"Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` or a custom image loader to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","line":128,"column":19,"nodeType":"JSXOpeningElement","endLine":128,"endColumn":75}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { User, Mail, Phone, Building, Calendar, Edit, Eye, MoreHorizontal } from \"lucide-react\";\nimport {\n  Card,\n  Badge,\n  Button,\n  Avatar,\n  Checkbox,\n} from '@ghxstship/ui';\n\nimport type { UserProfile, FieldConfig } from '../types';\n\ninterface ProfileListViewProps {\n  profiles: UserProfile[];\n  loading: boolean;\n  selectedIds: string[];\n  onSelectionChange: (ids: string[]) => void;\n  onEdit: (profile: UserProfile) => void;\n  fieldConfig: FieldConfig[];\n}\n\nexport default function ProfileListView({\n  profiles,\n  loading,\n  selectedIds,\n  onSelectionChange,\n  onEdit,\n  fieldConfig\n}: ProfileListViewProps) {\n  const handleSelectProfile = (profileId: string, checked: boolean) => {\n    if (checked) {\n      onSelectionChange([...selectedIds, profileId]);\n    } else {\n      onSelectionChange(selectedIds.filter(id => id !== profileId));\n    }\n  };\n\n  const handleSelectAll = (checked: boolean) => {\n    if (checked) {\n      onSelectionChange(profiles.map(p => p.id));\n    } else {\n      onSelectionChange([]);\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'active':\n        return 'success';\n      case 'inactive':\n        return 'destructive';\n      case 'pending':\n        return 'warning';\n      case 'suspended':\n        return 'destructive';\n      default:\n        return 'secondary';\n    }\n  };\n\n  if (loading) {\n    return (\n      <div className=\"space-y-sm\">\n        {Array.from({ length: 10 }).map((_, i) => (\n          <Card key={i} className=\"p-md animate-pulse\">\n            <div className=\"flex items-center gap-md\">\n              <div className=\"w-10 h-10 bg-muted rounded-full\" />\n              <div className=\"flex-1 space-y-sm\">\n                <div className=\"h-4 bg-muted rounded w-1/4\" />\n                <div className=\"h-3 bg-muted rounded w-1/3\" />\n              </div>\n              <div className=\"w-20 h-6 bg-muted rounded\" />\n            </div>\n          </Card>\n        ))}\n      </div>\n    );\n  }\n\n  if (profiles.length === 0) {\n    return (\n      <Card className=\"p-xl text-center\">\n        <User className=\"h-12 w-12 text-muted-foreground mx-auto mb-md\" />\n        <h3 className=\"text-lg font-semibold mb-sm\">No profiles found</h3>\n        <p className=\"text-muted-foreground mb-lg\">\n          Get started by creating your first profile or adjust your filters.\n        </p>\n        <Button>Create Profile</Button>\n      </Card>\n    );\n  }\n\n  return (\n    <div className=\"space-y-md\">\n      {/* Header with bulk selection */}\n      <div className=\"flex items-center gap-sm\">\n        <Checkbox\n          checked={selectedIds.length === profiles.length}\n          onCheckedChange={handleSelectAll}\n          indeterminate={selectedIds.length > 0 && selectedIds.length < profiles.length}\n        />\n        <span className=\"text-sm text-muted-foreground\">\n          {selectedIds.length > 0 ? `${selectedIds.length} selected` : 'Select all'}\n        </span>\n      </div>\n\n      {/* List */}\n      <div className=\"space-y-sm\">\n        {profiles.map((profile) => (\n          <Card\n            key={profile.id}\n            className={`p-md transition-all duration-200 hover:shadow-sm cursor-pointer ${\n              selectedIds.includes(profile.id) ? 'ring-2 ring-primary' : ''\n            }`}\n          >\n            <div className=\"flex items-center gap-md\">\n              {/* Selection Checkbox */}\n              <Checkbox\n                checked={selectedIds.includes(profile.id)}\n                onCheckedChange={(checked) => handleSelectProfile(profile.id, checked as boolean)}\n                onClick={(e) => e.stopPropagation()}\n              />\n\n              {/* Avatar */}\n              <Avatar className=\"h-10 w-10\">\n                {profile.avatar_url ? (\n                  <img src={profile.avatar_url} alt={profile.full_name} />\n                ) : (\n                  <div className=\"flex items-center justify-center h-full w-full bg-primary/10 text-primary font-semibold\">\n                    {profile.full_name.split(' ').map(n => n[0]).join('').toUpperCase()}\n                  </div>\n                )}\n              </Avatar>\n\n              {/* Basic Info */}\n              <div className=\"flex-1 min-w-0\">\n                <div className=\"flex items-center gap-sm mb-xs\">\n                  <h3 className=\"font-semibold truncate\" title={profile.full_name}>\n                    {profile.full_name}\n                  </h3>\n                  <Badge \n                    variant={getStatusColor(profile.status) as unknown} \n                    size=\"sm\"\n                  >\n                    {profile.status}\n                  </Badge>\n                </div>\n                \n                <div className=\"flex items-center gap-md text-sm text-muted-foreground\">\n                  <div className=\"flex items-center gap-xs\">\n                    <Mail className=\"h-3 w-3\" />\n                    <span className=\"truncate\" title={profile.email}>\n                      {profile.email}\n                    </span>\n                  </div>\n                  \n                  {profile.position && (\n                    <div className=\"flex items-center gap-xs\">\n                      <User className=\"h-3 w-3\" />\n                      <span className=\"truncate\">{profile.position}</span>\n                    </div>\n                  )}\n                  \n                  {profile.department && (\n                    <div className=\"flex items-center gap-xs\">\n                      <Building className=\"h-3 w-3\" />\n                      <span className=\"truncate\">{profile.department}</span>\n                    </div>\n                  )}\n                </div>\n              </div>\n\n              {/* Profile Completion */}\n              <div className=\"hidden md:flex items-center gap-sm\">\n                <div className=\"text-right\">\n                  <p className=\"text-sm font-medium\">{profile.completion_percentage}%</p>\n                  <p className=\"text-xs text-muted-foreground\">Complete</p>\n                </div>\n                <div className=\"w-16 bg-muted rounded-full h-2\">\n                  <div \n                    className=\"bg-primary h-2 rounded-full transition-all duration-300\" \n                    style={{ width: `${profile.completion_percentage}%` }}\n                  />\n                </div>\n              </div>\n\n              {/* Stats */}\n              <div className=\"hidden lg:flex items-center gap-md text-sm\">\n                <div className=\"text-center\">\n                  <p className=\"font-medium\">{profile.certifications_count || 0}</p>\n                  <p className=\"text-xs text-muted-foreground\">Certs</p>\n                </div>\n                <div className=\"text-center\">\n                  <p className=\"font-medium\">{profile.endorsements_count || 0}</p>\n                  <p className=\"text-xs text-muted-foreground\">Endorsements</p>\n                </div>\n              </div>\n\n              {/* Last Login */}\n              {profile.last_login && (\n                <div className=\"hidden xl:block text-sm text-muted-foreground\">\n                  <div className=\"flex items-center gap-xs\">\n                    <Calendar className=\"h-3 w-3\" />\n                    <span>{new Date(profile.last_login).toLocaleDateString()}</span>\n                  </div>\n                </div>\n              )}\n\n              {/* Actions */}\n              <div className=\"flex items-center gap-sm\">\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={() => onEdit(profile)}\n                >\n                  <Eye className=\"h-4 w-4\" />\n                </Button>\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={() => onEdit(profile)}\n                >\n                  <Edit className=\"h-4 w-4\" />\n                </Button>\n              </div>\n            </div>\n          </Card>\n        ))}\n      </div>\n\n      {/* Load More */}\n      {profiles.length > 0 && (\n        <div className=\"text-center pt-lg\">\n          <Button variant=\"outline\">\n            Load More Profiles\n          </Button>\n        </div>\n      )}\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ghxstship/apps/web/app/(app)/(shell)/profile/views/ProfileTableView.tsx","messages":[{"ruleId":"@next/next/no-img-element","severity":1,"message":"Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` or a custom image loader to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","line":268,"column":23,"nodeType":"JSXOpeningElement","endLine":268,"endColumn":79}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { ArrowUpDown, ArrowUp, ArrowDown, Edit, Eye, User } from \"lucide-react\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n  Badge,\n  Button,\n  Avatar,\n  Checkbox,\n} from '@ghxstship/ui';\n\nimport type { UserProfile, FieldConfig, ProfileSort } from '../types';\n\ninterface ProfileTableViewProps {\n  profiles: UserProfile[];\n  loading: boolean;\n  selectedIds: string[];\n  onSelectionChange: (ids: string[]) => void;\n  onEdit: (profile: UserProfile) => void;\n  onSort: (sort: ProfileSort) => void;\n  currentSort: ProfileSort;\n  fieldConfig: FieldConfig[];\n}\n\nexport default function ProfileTableView({\n  profiles,\n  loading,\n  selectedIds,\n  onSelectionChange,\n  onEdit,\n  onSort,\n  currentSort,\n  fieldConfig\n}: ProfileTableViewProps) {\n  const handleSelectProfile = (profileId: string, checked: boolean) => {\n    if (checked) {\n      onSelectionChange([...selectedIds, profileId]);\n    } else {\n      onSelectionChange(selectedIds.filter(id => id !== profileId));\n    }\n  };\n\n  const handleSelectAll = (checked: boolean) => {\n    if (checked) {\n      onSelectionChange(profiles.map(p => p.id));\n    } else {\n      onSelectionChange([]);\n    }\n  };\n\n  const handleSort = (field: keyof UserProfile) => {\n    const direction = currentSort.field === field && currentSort.direction === 'asc' ? 'desc' : 'asc';\n    onSort({ field, direction });\n  };\n\n  const getSortIcon = (field: string) => {\n    if (currentSort.field !== field) {\n      return <ArrowUpDown className=\"h-4 w-4\" />;\n    }\n    return currentSort.direction === 'asc' ? \n      <ArrowUp className=\"h-4 w-4\" /> : \n      <ArrowDown className=\"h-4 w-4\" />;\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'active':\n        return 'success';\n      case 'inactive':\n        return 'destructive';\n      case 'pending':\n        return 'warning';\n      case 'suspended':\n        return 'destructive';\n      default:\n        return 'secondary';\n    }\n  };\n\n  if (loading) {\n    return (\n      <div className=\"border rounded-md\">\n        <Table>\n          <TableHeader>\n            <TableRow>\n              <TableHead className=\"w-12\">\n                <div className=\"w-4 h-4 bg-muted rounded animate-pulse\" />\n              </TableHead>\n              <TableHead>Name</TableHead>\n              <TableHead>Email</TableHead>\n              <TableHead>Department</TableHead>\n              <TableHead>Position</TableHead>\n              <TableHead>Status</TableHead>\n              <TableHead>Completion</TableHead>\n              <TableHead>Actions</TableHead>\n            </TableRow>\n          </TableHeader>\n          <TableBody>\n            {Array.from({ length: 10 }).map((_, i) => (\n              <TableRow key={i}>\n                <TableCell>\n                  <div className=\"w-4 h-4 bg-muted rounded animate-pulse\" />\n                </TableCell>\n                <TableCell>\n                  <div className=\"flex items-center gap-sm\">\n                    <div className=\"w-8 h-8 bg-muted rounded-full animate-pulse\" />\n                    <div className=\"w-32 h-4 bg-muted rounded animate-pulse\" />\n                  </div>\n                </TableCell>\n                <TableCell>\n                  <div className=\"w-40 h-4 bg-muted rounded animate-pulse\" />\n                </TableCell>\n                <TableCell>\n                  <div className=\"w-24 h-4 bg-muted rounded animate-pulse\" />\n                </TableCell>\n                <TableCell>\n                  <div className=\"w-28 h-4 bg-muted rounded animate-pulse\" />\n                </TableCell>\n                <TableCell>\n                  <div className=\"w-16 h-6 bg-muted rounded animate-pulse\" />\n                </TableCell>\n                <TableCell>\n                  <div className=\"w-20 h-4 bg-muted rounded animate-pulse\" />\n                </TableCell>\n                <TableCell>\n                  <div className=\"flex gap-xs\">\n                    <div className=\"w-8 h-8 bg-muted rounded animate-pulse\" />\n                    <div className=\"w-8 h-8 bg-muted rounded animate-pulse\" />\n                  </div>\n                </TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n      </div>\n    );\n  }\n\n  if (profiles.length === 0) {\n    return (\n      <div className=\"border rounded-md p-xl text-center\">\n        <User className=\"h-12 w-12 text-muted-foreground mx-auto mb-md\" />\n        <h3 className=\"text-lg font-semibold mb-sm\">No profiles found</h3>\n        <p className=\"text-muted-foreground mb-lg\">\n          Get started by creating your first profile or adjust your filters.\n        </p>\n        <Button>Create Profile</Button>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"border rounded-md\">\n      <Table>\n        <TableHeader>\n          <TableRow>\n            <TableHead className=\"w-12\">\n              <Checkbox\n                checked={selectedIds.length === profiles.length}\n                onCheckedChange={handleSelectAll}\n                indeterminate={selectedIds.length > 0 && selectedIds.length < profiles.length}\n              />\n            </TableHead>\n            <TableHead>\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                className=\"h-auto p-0 font-semibold\"\n                onClick={() => handleSort('full_name')}\n              >\n                Name\n                {getSortIcon('full_name')}\n              </Button>\n            </TableHead>\n            <TableHead>\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                className=\"h-auto p-0 font-semibold\"\n                onClick={() => handleSort('email')}\n              >\n                Email\n                {getSortIcon('email')}\n              </Button>\n            </TableHead>\n            <TableHead>\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                className=\"h-auto p-0 font-semibold\"\n                onClick={() => handleSort('department')}\n              >\n                Department\n                {getSortIcon('department')}\n              </Button>\n            </TableHead>\n            <TableHead>\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                className=\"h-auto p-0 font-semibold\"\n                onClick={() => handleSort('position')}\n              >\n                Position\n                {getSortIcon('position')}\n              </Button>\n            </TableHead>\n            <TableHead>\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                className=\"h-auto p-0 font-semibold\"\n                onClick={() => handleSort('status')}\n              >\n                Status\n                {getSortIcon('status')}\n              </Button>\n            </TableHead>\n            <TableHead>\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                className=\"h-auto p-0 font-semibold\"\n                onClick={() => handleSort('completion_percentage')}\n              >\n                Completion\n                {getSortIcon('completion_percentage')}\n              </Button>\n            </TableHead>\n            <TableHead>\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                className=\"h-auto p-0 font-semibold\"\n                onClick={() => handleSort('last_login')}\n              >\n                Last Login\n                {getSortIcon('last_login')}\n              </Button>\n            </TableHead>\n            <TableHead className=\"w-24\">Actions</TableHead>\n          </TableRow>\n        </TableHeader>\n        <TableBody>\n          {profiles.map((profile) => (\n            <TableRow\n              key={profile.id}\n              className={`cursor-pointer hover:bg-muted/50 ${\n                selectedIds.includes(profile.id) ? 'bg-muted/30' : ''\n              }`}\n            >\n              <TableCell>\n                <Checkbox\n                  checked={selectedIds.includes(profile.id)}\n                  onCheckedChange={(checked) => handleSelectProfile(profile.id, checked as boolean)}\n                  onClick={(e) => e.stopPropagation()}\n                />\n              </TableCell>\n              <TableCell>\n                <div className=\"flex items-center gap-sm\">\n                  <Avatar className=\"h-8 w-8\">\n                    {profile.avatar_url ? (\n                      <img src={profile.avatar_url} alt={profile.full_name} />\n                    ) : (\n                      <div className=\"flex items-center justify-center h-full w-full bg-primary/10 text-primary font-semibold text-xs\">\n                        {profile.full_name.split(' ').map(n => n[0]).join('').toUpperCase()}\n                      </div>\n                    )}\n                  </Avatar>\n                  <div>\n                    <p className=\"font-medium\">{profile.full_name}</p>\n                    {profile.employee_id && (\n                      <p className=\"text-xs text-muted-foreground\">ID: {profile.employee_id}</p>\n                    )}\n                  </div>\n                </div>\n              </TableCell>\n              <TableCell>\n                <div>\n                  <p className=\"font-medium\">{profile.email}</p>\n                  {profile.phone && (\n                    <p className=\"text-xs text-muted-foreground\">{profile.phone}</p>\n                  )}\n                </div>\n              </TableCell>\n              <TableCell>\n                {profile.department ? (\n                  <Badge variant=\"outline\">{profile.department}</Badge>\n                ) : (\n                  <span className=\"text-muted-foreground\">-</span>\n                )}\n              </TableCell>\n              <TableCell>\n                {profile.position || <span className=\"text-muted-foreground\">-</span>}\n              </TableCell>\n              <TableCell>\n                <Badge variant={getStatusColor(profile.status) as unknown}>\n                  {profile.status}\n                </Badge>\n              </TableCell>\n              <TableCell>\n                <div className=\"flex items-center gap-sm\">\n                  <div className=\"w-16 bg-muted rounded-full h-2\">\n                    <div \n                      className=\"bg-primary h-2 rounded-full transition-all duration-300\" \n                      style={{ width: `${profile.completion_percentage}%` }}\n                    />\n                  </div>\n                  <span className=\"text-sm font-medium w-10\">\n                    {profile.completion_percentage}%\n                  </span>\n                </div>\n              </TableCell>\n              <TableCell>\n                {profile.last_login ? (\n                  <span className=\"text-sm\">\n                    {new Date(profile.last_login).toLocaleDateString()}\n                  </span>\n                ) : (\n                  <span className=\"text-muted-foreground\">Never</span>\n                )}\n              </TableCell>\n              <TableCell>\n                <div className=\"flex items-center gap-xs\">\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={(e) => {\n                      e.stopPropagation();\n                      onEdit(profile);\n                    }}\n                  >\n                    <Eye className=\"h-4 w-4\" />\n                  </Button>\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={(e) => {\n                      e.stopPropagation();\n                      onEdit(profile);\n                    }}\n                  >\n                    <Edit className=\"h-4 w-4\" />\n                  </Button>\n                </div>\n              </TableCell>\n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ghxstship/apps/web/app/(app)/(shell)/programming/calendar/CreateCalendarClient.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'loadProjects' and 'projects.length'. Either include them or remove the dependency array.","line":64,"column":6,"nodeType":"ArrayExpression","endLine":64,"endColumn":14,"suggestions":[{"desc":"Update the dependencies array to be: [isOpen, loadProjects, projects.length]","fix":{"range":[2068,2076],"text":"[isOpen, loadProjects, projects.length]"}}]},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Button' is not defined.","line":140,"column":8,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":140,"endColumn":14},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'UnifiedInput' is not defined.","line":162,"column":14,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":162,"endColumn":26},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Textarea' is not defined.","line":169,"column":14,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":169,"endColumn":22},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Select' is not defined.","line":178,"column":16,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":178,"endColumn":22},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Select' is not defined.","line":189,"column":16,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":189,"endColumn":22},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Select' is not defined.","line":200,"column":14,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":200,"endColumn":20},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'UnifiedInput' is not defined.","line":215,"column":16,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":215,"endColumn":28},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'UnifiedInput' is not defined.","line":222,"column":16,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":222,"endColumn":28},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'UnifiedInput' is not defined.","line":231,"column":16,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":231,"endColumn":28},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'UnifiedInput' is not defined.","line":237,"column":16,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":237,"endColumn":28},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Button' is not defined.","line":248,"column":14,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":248,"endColumn":20},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Button' is not defined.","line":256,"column":14,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":256,"endColumn":20}],"suppressedMessages":[],"errorCount":12,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\n\nimport { Plus, Calendar, Clock, MapPin, Users } from \"lucide-react\";\nimport { useState, useEffect } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\n// import { z } from 'zod';\nimport { useTranslations } from 'next-intl';\nimport { createBrowserClient } from '@ghxstship/auth';\nimport { usePostHog } from 'posthog-js/react';\nimport AppDrawer from '@/app/_components/shared/AppDrawer';\n// Form validation schema\nconst createEventSchema = z.object({\n  name: z.string().min(1, 'Event name is required'),\n  description: z.string().optional(),\n  kind: z.enum(['performance', 'activation', 'workshop', 'meeting', 'rehearsal', 'setup', 'breakdown']),\n  project_id: z.string().uuid('Please select a project'),\n  start_at: z.string().min(1, 'Start time is required'),\n  end_at: z.string().min(1, 'End time is required'),\n  location: z.string().optional(),\n  capacity: z.number().min(0).optional(),\n  status: z.enum(['draft', 'scheduled', 'in_progress', 'completed', 'cancelled']).default('draft')\n});\n\ntype CreateEventForm = z.infer<typeof createEventSchema>;\n\ninterface Project {\n  id: string;\n  name: string;\n  status: string;\n}\n\nexport default function CreateCalendarClient({ orgId }: { orgId: string }) {\n  const t = useTranslations('programming');\n  const sb = createBrowserClient();\n  const posthog = usePostHog();\n  \n  const [isOpen, setIsOpen] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [projects, setProjects] = useState<Project[]>([]);\n  const [loadingProjects, setLoadingProjects] = useState(false);\n\n  const form = useForm<CreateEventForm>({\n    resolver: zodResolver(createEventSchema),\n    defaultValues: {\n      name: '',\n      description: '',\n      kind: 'performance',\n      project_id: '',\n      start_at: '',\n      end_at: '',\n      location: '',\n      capacity: undefined,\n      status: 'draft'\n    }\n  });\n\n  // Load projects when drawer opens\n  useEffect(() => {\n    if (isOpen && projects.length === 0) {\n      loadProjects();\n    }\n  }, [isOpen]);\n\n  const loadProjects = async () => {\n    setLoadingProjects(true);\n    try {\n      const { data, error } = await sb\n        .from('projects')\n        .select('id, name, status')\n        .eq('organization_id', orgId)\n        .eq('status', 'active')\n        .order('name');\n\n      if (error) throw error;\n      setProjects(data || []);\n    } catch (error) {\n      console.error('Error loading projects:', error);\n    } finally {\n      setLoadingProjects(false);\n    }\n  };\n\n  const onSubmit = async (data: CreateEventForm) => {\n    setIsLoading(true);\n    try {\n      const { error } = await sb\n        .from('events')\n        .insert({\n          ...data,\n          organization_id: orgId,\n          capacity: data.capacity || null\n        });\n\n      if (error) throw error;\n\n      // Track event creation\n      posthog?.capture('programming_event_created', {\n        event_kind: data.kind,\n        project_id: data.project_id,\n        organization_id: orgId\n      });\n\n      // Reset form and close drawer\n      form.reset();\n      setIsOpen(false);\n      \n      // Refresh the page to show new event\n      window.location.reload();\n    } catch (error) {\n      console.error('Error creating event:', error);\n      // Error handling implemented\n      alert('An error occurred while creating the event. Please try again.');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const eventKindOptions = [\n    { value: 'performance', label: 'Performance' },\n    { value: 'activation', label: 'Activation' },\n    { value: 'workshop', label: 'Workshop' },\n    { value: 'meeting', label: 'Meeting' },\n    { value: 'rehearsal', label: 'Rehearsal' },\n    { value: 'setup', label: 'Setup' },\n    { value: 'breakdown', label: 'Breakdown' }\n  ];\n\n  const statusOptions = [\n    { value: 'draft', label: 'Draft' },\n    { value: 'scheduled', label: 'Scheduled' },\n    { value: 'in_progress', label: 'In Progress' },\n    { value: 'completed', label: 'Completed' },\n    { value: 'cancelled', label: 'Cancelled' }\n  ];\n\n  return (\n    <>\n      <Button\n        onClick={() => setIsOpen(true)}\n        className=\"flex items-center gap-sm\"\n       \n      >\n        <Plus className=\"h-4 w-4\" />\n        Create Event\n      </Button>\n\n      <AppDrawer\n        open={isOpen}\n        onClose={() => setIsOpen(false)}\n        record={null}\n        fields={[]}\n        mode=\"create\"\n        title=\"Create New Event\"\n        tabs={[{\n          key: 'content',\n          label: 'Details',\n          content: (\n        <form onSubmit={form.handleSubmit(onSubmit)} className=\"stack-lg\">\n          <div className=\"grid grid-cols-1 gap-md\">\n            <UnifiedInput               label=\"Event Name\"\n              placeholder=\"Enter event name\"\n              {...form.register('name')}\n             \n              required\n            />\n\n            <Textarea\n              label=\"Description\"\n              placeholder=\"Enter event description (optional)\"\n              {...form.register('description')}\n             \n              rows={3}\n            />\n\n            <div className=\"grid grid-cols-2 gap-md\">\n              <Select\n                {...form.register('kind')}\n              >\n                <option value=\"\">Select type</option>\n                {eventKindOptions.map(option => (\n                  <option key={option.value} value={option.value}>\n                    {option.label}\n                  </option>\n                ))}\n              </Select>\n\n              <Select\n                {...form.register('status')}\n              >\n                {statusOptions.map(option => (\n                  <option key={option.value} value={option.value}>\n                    {option.label}\n                  </option>\n                ))}\n              </Select>\n            </div>\n\n            <Select\n              {...form.register('project_id')}\n              disabled={loadingProjects}\n            >\n              <option value=\"\">\n                {loadingProjects ? 'Loading projects...' : 'Select project'}\n              </option>\n              {projects.map(project => (\n                <option key={project.id} value={project.id}>\n                  {project.name}\n                </option>\n              ))}\n            </Select>\n\n            <div className=\"grid grid-cols-2 gap-md\">\n              <UnifiedInput                 label=\"Start Time\"\n                type=\"datetime-local\"\n                {...form.register('start_at')}\n               \n                required\n              />\n\n              <UnifiedInput                 label=\"End Time\"\n                type=\"datetime-local\"\n                {...form.register('end_at')}\n               \n                required\n              />\n            </div>\n\n            <div className=\"grid grid-cols-2 gap-md\">\n              <UnifiedInput                 label=\"Location\"\n                placeholder=\"Enter location (optional)\"\n                {...form.register('location')}\n               \n              />\n\n              <UnifiedInput                 label=\"Capacity\"\n                type=\"number\"\n                placeholder=\"Enter capacity (optional)\"\n                {...form.register('capacity', { valueAsNumber: true })}\n               \n                min={0}\n              />\n            </div>\n          </div>\n\n          <div className=\"flex justify-end gap-sm pt-md border-t\">\n            <Button\n              type=\"button\"\n              variant=\"outline\"\n              onClick={() => setIsOpen(false)}\n              disabled={isLoading}\n            >\n              Cancel\n            </Button>\n            <Button\n              type=\"submit\"\n              loading={isLoading}\n              className=\"flex items-center gap-sm\"\n            >\n              <Calendar className=\"h-4 w-4\" />\n              Create Event\n            </Button>\n          </div>\n        </form>\n          )\n        }]}\n      />\n    </>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ghxstship/apps/web/app/(app)/(shell)/programming/calendar/ProgrammingCalendarClient.tsx","messages":[{"ruleId":"react/jsx-no-undef","severity":2,"message":"'DropdownMenu' is not defined.","line":323,"column":16,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":323,"endColumn":28},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'DropdownMenuTrigger' is not defined.","line":324,"column":18,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":324,"endColumn":37},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'DropdownMenuContent' is not defined.","line":329,"column":18,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":329,"endColumn":37},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'DropdownMenuItem' is not defined.","line":330,"column":20,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":330,"endColumn":36},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'DropdownMenuItem' is not defined.","line":334,"column":20,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":334,"endColumn":36}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport { CalendarDays, CalendarRange, Calendar as CalendarIcon, Eye, Filter, LayoutGrid, List, MapPin, Pencil, Plus, RefreshCcw, Share2, Trash2, Users } from \"lucide-react\";\nimport { useCallback, useEffect, useMemo, useState } from \"react\";\nimport { useRouter } from \"next/navigation\";\nimport { createBrowserClient } from \"@ghxstship/auth\";\nimport {\n  Badge,\n  Button,\n  Card,\n  Checkbox,\n  Input,\n  Select,\n  toast,\n} from \"@ghxstship/ui\";\nimport { addMonths, formatISO } from \"date-fns\";\nimport CreateProgrammingEventDrawer from \"./drawers/CreateProgrammingEventDrawer\";\nimport EditProgrammingEventDrawer from \"./drawers/EditProgrammingEventDrawer\";\nimport ViewProgrammingEventDrawer from \"./drawers/ViewProgrammingEventDrawer\";\nimport ProgrammingCalendarBoardView from \"./views/ProgrammingCalendarBoardView\";\nimport ProgrammingCalendarListView from \"./views/ProgrammingCalendarListView\";\nimport ProgrammingCalendarGridView from \"./views/ProgrammingCalendarGridView\";\nimport ProgrammingCalendarTimelineView from \"./views/ProgrammingCalendarTimelineView\";\nimport type { ProgrammingEvent, ProgrammingEventProject } from \"./types\";\n\nconst VIEW_TYPES = [\n  { id: \"board\", label: \"Board\", icon: LayoutGrid },\n  { id: \"list\", label: \"List\", icon: List },\n  { id: \"calendar\", label: \"Calendar\", icon: CalendarRange },\n  { id: \"timeline\", label: \"Timeline\", icon: CalendarDays },\n] as const;\n\ntype ViewType = (typeof VIEW_TYPES)[number][\"id\"];\n\ntype ProgrammingCalendarClientProps = {\n  orgId: string;\n  currentUserId: string;\n  initialEvents: ProgrammingEvent[];\n  projects: ProgrammingEventProject[];\n  users: { id: string; email: string; full_name?: string | null; avatar_url?: string | null }[];\n};\n\nconst STATUS_BADGE: Record<ProgrammingEvent[\"status\"], { label: string; variant: \"secondary\" | \"outline\" | \"warning\" | \"info\" | \"success\" | \"destructive\" }> = {\n  draft: { label: \"Draft\", variant: \"secondary\" },\n  scheduled: { label: \"Scheduled\", variant: \"info\" },\n  in_progress: { label: \"In Progress\", variant: \"warning\" },\n  completed: { label: \"Completed\", variant: \"success\" },\n  cancelled: { label: \"Cancelled\", variant: \"destructive\" },\n};\n\nconst EVENT_TYPE_LABEL: Record<ProgrammingEvent[\"event_type\"], string> = {\n  performance: \"Performance\",\n  activation: \"Activation\",\n  workshop: \"Workshop\",\n  meeting: \"Meeting\",\n  rehearsal: \"Rehearsal\",\n  setup: \"Setup\",\n  breakdown: \"Breakdown\",\n  other: \"Other\",\n};\n\nexport default function ProgrammingCalendarClient({\n  orgId,\n  currentUserId,\n  initialEvents,\n  projects,\n  users,\n}: ProgrammingCalendarClientProps) {\n  const supabase = useMemo(() => createBrowserClient(), []);\n  const router = useRouter();\n\n  const [events, setEvents] = useState<ProgrammingEvent[]>(initialEvents);\n  const [loading, setLoading] = useState(false);\n  const [viewType, setViewType] = useState<ViewType>(\"calendar\");\n  const [selectedEvents, setSelectedEvents] = useState<Set<string>>(new Set());\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [selectedProject, setSelectedProject] = useState<string>(\"all\");\n  const [selectedStatus, setSelectedStatus] = useState<string>(\"all\");\n  const [selectedType, setSelectedType] = useState<string>(\"all\");\n  const [dateRangeStart, setDateRangeStart] = useState<string>(() => formatISO(new Date(), { representation: \"date\" }));\n  const [dateRangeEnd, setDateRangeEnd] = useState<string>(() => formatISO(addMonths(new Date(), 1), { representation: \"date\" }));\n\n  const [createOpen, setCreateOpen] = useState(false);\n  const [editOpen, setEditOpen] = useState(false);\n  const [viewOpen, setViewOpen] = useState(false);\n  const [activeEvent, setActiveEvent] = useState<ProgrammingEvent | null>(null);\n\n  const filteredEvents = useMemo(() => {\n    return events.filter((event) => {\n      if (searchTerm) {\n        const query = searchTerm.toLowerCase();\n        const matchesSearch =\n          event.title.toLowerCase().includes(query) ||\n          (event.description?.toLowerCase().includes(query) ?? false) ||\n          event.tags.some((tag) => tag.toLowerCase().includes(query));\n        if (!matchesSearch) return false;\n      }\n\n      if (selectedProject !== \"all\" && event.project_id !== selectedProject) return false;\n      if (selectedStatus !== \"all\" && event.status !== selectedStatus) return false;\n      if (selectedType !== \"all\" && event.event_type !== selectedType) return false;\n\n      if (dateRangeStart) {\n        if (new Date(event.start_at) < new Date(dateRangeStart)) return false;\n      }\n\n      if (dateRangeEnd) {\n        if (new Date(event.start_at) > new Date(dateRangeEnd)) return false;\n      }\n\n      return true;\n    });\n  }, [events, searchTerm, selectedProject, selectedStatus, selectedType, dateRangeStart, dateRangeEnd]);\n\n  const loadEvents = useCallback(async () => {\n    try {\n      setLoading(true);\n      const params = new URLSearchParams({\n        limit: \"200\",\n        offset: \"0\",\n        start_at: dateRangeStart ? new Date(dateRangeStart).toISOString() : \"\",\n        end_at: dateRangeEnd ? new Date(dateRangeEnd).toISOString() : \"\",\n      });\n      if (selectedProject !== \"all\") params.set(\"project_id\", selectedProject);\n      if (selectedStatus !== \"all\") params.set(\"status\", selectedStatus);\n      if (selectedType !== \"all\") params.set(\"event_type\", selectedType);\n      if (searchTerm) params.set(\"search\", searchTerm);\n\n      const response = await fetch(`/api/v1/programming/events?${params.toString()}`);\n      if (!response.ok) throw new Error(\"Failed to load events\");\n      const json = await response.json();\n      setEvents(json.data ?? []);\n    } catch (error) {\n      console.error(\"Failed to load programming events\", error);\n      toast.error(\"Failed to load programming events\");\n    } finally {\n      setLoading(false);\n    }\n  }, [dateRangeStart, dateRangeEnd, searchTerm, selectedProject, selectedStatus, selectedType]);\n\n  useEffect(() => {\n    loadEvents();\n  }, [loadEvents]);\n\n  useEffect(() => {\n    const channel = supabase\n      .channel(`programming-events-${orgId}`)\n      .on(\n        'postgres_changes',\n        {\n          event: '*',\n          schema: 'public',\n          table: 'programming_events',\n          filter: `organization_id=eq.${orgId}`,\n        },\n        () => {\n          loadEvents();\n        },\n      )\n      .subscribe();\n\n    return () => {\n      supabase.removeChannel(channel);\n    };\n  }, [supabase, orgId, loadEvents]);\n\n  const openCreateDrawer = () => {\n    setActiveEvent(null);\n    setCreateOpen(true);\n  };\n\n  const openEditDrawer = (event: ProgrammingEvent) => {\n    setActiveEvent(event);\n    setEditOpen(true);\n  };\n\n  const openViewDrawer = (event: ProgrammingEvent) => {\n    setActiveEvent(event);\n    setViewOpen(true);\n  };\n\n  const handleDelete = async (event: ProgrammingEvent) => {\n    if (!confirm(`Delete event \"${event.title}\"?`)) return;\n    try {\n      const res = await fetch(`/api/v1/programming/events/${event.id}`, { method: 'DELETE' });\n      if (!res.ok) throw new Error('Delete failed');\n      toast.success('Event deleted');\n      loadEvents();\n    } catch (error) {\n      console.error('Failed to delete event', error);\n      toast.error('Failed to delete event');\n    }\n  };\n\n  const selectedEventsList = useMemo(() => events.filter((event) => selectedEvents.has(event.id)), [events, selectedEvents]);\n\n  const clearSelection = () => setSelectedEvents(new Set());\n\n  const toggleSelection = (id: string) => {\n    setSelectedEvents((prev) => {\n      const next = new Set(prev);\n      if (next.has(id)) {\n        next.delete(id);\n      } else {\n        next.add(id);\n      }\n      return next;\n    });\n  };\n\n  const bulkDelete = async () => {\n    if (selectedEvents.size === 0) return;\n    if (!confirm(`Delete ${selectedEvents.size} selected events?`)) return;\n\n    try {\n      await Promise.all(\n        Array.from(selectedEvents).map((id) => fetch(`/api/v1/programming/events/${id}`, { method: 'DELETE' })),\n      );\n      toast.success('Selected events deleted');\n      clearSelection();\n      loadEvents();\n    } catch (error) {\n      console.error('Bulk delete failed', error);\n      toast.error('Failed to delete selected events');\n    }\n  };\n\n  const renderView = () => {\n    switch (viewType) {\n      case 'board':\n        return (\n          <ProgrammingCalendarBoardView\n            events={filteredEvents}\n            selected={selectedEvents}\n            onSelect={toggleSelection}\n            onView={openViewDrawer}\n            onEdit={openEditDrawer}\n            onDelete={handleDelete}\n          />\n        );\n      case 'list':\n        return (\n          <ProgrammingCalendarListView\n            events={filteredEvents}\n            selected={selectedEvents}\n            onSelect={toggleSelection}\n            onView={openViewDrawer}\n            onEdit={openEditDrawer}\n            onDelete={handleDelete}\n          />\n        );\n      case 'timeline':\n        return <ProgrammingCalendarTimelineView events={filteredEvents} onView={openViewDrawer} onEdit={openEditDrawer} />;\n      case 'calendar':\n      default:\n        return <ProgrammingCalendarGridView events={filteredEvents} onView={openViewDrawer} onEdit={openEditDrawer} />;\n    }\n  };\n\n  return (\n    <div className=\"space-y-lg\">\n      <div className=\"flex flex-col gap-md lg:flex-row lg:items-center lg:justify-between\">\n        <div className=\"flex flex-1 flex-wrap items-center gap-sm\">\n          <div className=\"relative w-full max-w-md\">\n            <Input\n              placeholder=\"Search events...\"\n              value={searchTerm}\n              onChange={(event) => setSearchTerm(event.target.value)}\n              className=\"pl-9\"\n            />\n            <Filter className=\"absolute left-3 top-1/2 h-4 w-4 -translate-y-1/2 text-muted-foreground\" />\n          </div>\n\n          <Select value={selectedProject} onValueChange={setSelectedProject}>\n            <option value=\"all\">All Projects</option>\n            {projects.map((project) => (\n              <option key={project.id} value={project.id}>\n                {project.name}\n              </option>\n            ))}\n          </Select>\n\n          <Select value={selectedStatus} onValueChange={setSelectedStatus}>\n            <option value=\"all\">All Statuses</option>\n            {Object.entries(STATUS_BADGE).map(([key, value]) => (\n              <option key={key} value={key}>\n                {value.label}\n              </option>\n            ))}\n          </Select>\n\n          <Select value={selectedType} onValueChange={setSelectedType}>\n            <option value=\"all\">All Types</option>\n            {Object.entries(EVENT_TYPE_LABEL).map(([key, label]) => (\n              <option key={key} value={key}>\n                {label}\n              </option>\n            ))}\n          </Select>\n\n          <Input\n            type=\"date\"\n            value={dateRangeStart}\n            onChange={(event) => setDateRangeStart(event.target.value)}\n            className=\"w-auto\"\n          />\n          <Input\n            type=\"date\"\n            value={dateRangeEnd}\n            onChange={(event) => setDateRangeEnd(event.target.value)}\n            className=\"w-auto\"\n          />\n\n          <Button variant=\"outline\" size=\"sm\" onClick={loadEvents} disabled={loading}>\n            <RefreshCcw className=\"mr-2 h-4 w-4\" />\n            Refresh\n          </Button>\n        </div>\n\n        <div className=\"flex items-center gap-sm\">\n          {selectedEvents.size > 0 ? (\n            <>\n              <DropdownMenu>\n                <DropdownMenuTrigger asChild>\n                  <Button variant=\"outline\" size=\"sm\">\n                    Bulk actions ({selectedEvents.size})\n                  </Button>\n                </DropdownMenuTrigger>\n                <DropdownMenuContent>\n                  <DropdownMenuItem onClick={bulkDelete}>\n                    <Trash2 className=\"mr-2 h-4 w-4\" />\n                    Delete selected\n                  </DropdownMenuItem>\n                  <DropdownMenuItem onClick={clearSelection}>\n                    Clear selection\n                  </DropdownMenuItem>\n                </DropdownMenuContent>\n              </DropdownMenu>\n            </>\n          ) : null}\n\n          <div className=\"flex rounded-md shadow-sm\">\n            {VIEW_TYPES.map((option) => {\n              const Icon = option.icon;\n              return (\n                <Button\n                  key={option.id}\n                  variant={viewType === option.id ? \"default\" : \"outline\"}\n                  size=\"sm\"\n                  onClick={() => setViewType(option.id)}\n                  className=\"rounded-none first:rounded-l-md last:rounded-r-md\"\n                >\n                  <Icon className=\"h-4 w-4\" />\n                  <span className=\"sr-only\">{option.label}</span>\n                </Button>\n              );\n            })}\n          </div>\n\n          <Button onClick={openCreateDrawer}>\n            <Plus className=\"mr-2 h-4 w-4\" />\n            Create Event\n          </Button>\n        </div>\n      </div>\n\n      <Card className=\"p-lg\">\n        {loading ? (\n          <div className=\"flex min-h-[320px] items-center justify-center text-muted-foreground\">\n            Loading programming events...\n          </div>\n        ) : filteredEvents.length === 0 ? (\n          <div className=\"flex min-h-[320px] flex-col items-center justify-center gap-md text-center\">\n            <CalendarIcon className=\"h-12 w-12 text-muted-foreground\" />\n            <div className=\"space-y-xs\">\n              <h3 className=\"text-heading-5\">No events found</h3>\n              <p className=\"text-body-sm text-muted-foreground\">\n                {searchTerm || selectedStatus !== \"all\" || selectedType !== \"all\"\n                  ? \"Try adjusting your filters or search\"\n                  : \"Create your first programming event to get started\"}\n              </p>\n            </div>\n            <Button onClick={openCreateDrawer}>\n              <Plus className=\"mr-2 h-4 w-4\" />\n              Create Event\n            </Button>\n          </div>\n        ) : (\n          renderView()\n        )}\n      </Card>\n\n      <CreateProgrammingEventDrawer\n        open={createOpen}\n        onOpenChange={setCreateOpen}\n        orgId={orgId}\n        currentUserId={currentUserId}\n        projects={projects}\n        onSuccess={() => {\n          loadEvents();\n          router.refresh();\n        }}\n      />\n\n      {activeEvent ? (\n        <>\n          <EditProgrammingEventDrawer\n            open={editOpen}\n            onOpenChange={setEditOpen}\n            event={activeEvent}\n            orgId={orgId}\n            currentUserId={currentUserId}\n            projects={projects}\n            onSuccess={() => {\n              loadEvents();\n              router.refresh();\n            }}\n          />\n          <ViewProgrammingEventDrawer\n            open={viewOpen}\n            onOpenChange={setViewOpen}\n            event={activeEvent}\n            onEdit={() => {\n              setViewOpen(false);\n              setEditOpen(true);\n            }}\n            onDelete={() => {\n              setViewOpen(false);\n              handleDelete(activeEvent);\n            }}\n            users={users}\n          />\n        </>\n      ) : null}\n    </div>\n  );\n}\n\nexport { STATUS_BADGE, EVENT_TYPE_LABEL };\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ghxstship/apps/web/app/(app)/(shell)/programming/calendar/drawers/ViewProgrammingEventDrawer.tsx","messages":[{"ruleId":"@next/next/no-img-element","severity":1,"message":"Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` or a custom image loader to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","line":266,"column":25,"nodeType":"JSXOpeningElement","endLine":270,"endColumn":27}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport { Calendar, Clock, Edit, MapPin, Users, Activity, Tag, Briefcase, Radio, Settings, FileText } from \"lucide-react\";\nimport { AppDrawer, Badge, Button, Card } from \"@ghxstship/ui\";\nimport { format, parseISO, differenceInHours } from \"date-fns\";\nimport type { ProgrammingEvent } from \"../types\";\nimport { EVENT_TYPE_LABEL, STATUS_BADGE } from \"../ProgrammingCalendarClient\";\n\ntype ViewProgrammingEventDrawerProps = {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  event: ProgrammingEvent;\n  onEdit?: () => void;\n  onDelete?: () => void;\n  users: { id: string; email: string; full_name?: string | null; avatar_url?: string | null }[];\n};\n\nexport default function ViewProgrammingEventDrawer({\n  open,\n  onOpenChange,\n  event,\n  onEdit,\n  onDelete,\n  users,\n}: ViewProgrammingEventDrawerProps) {\n  const statusConfig = STATUS_BADGE[event.status];\n  \n  // Calculate event duration\n  const getDuration = () => {\n    if (!event.end_at) return null;\n    const hours = differenceInHours(parseISO(event.end_at), parseISO(event.start_at));\n    if (hours < 1) return \"< 1 hour\";\n    if (hours === 1) return \"1 hour\";\n    return `${hours} hours`;\n  };\n\n  // Get user by ID\n  const getUserById = (userId?: string) => {\n    if (!userId) return null;\n    return users.find(user => user.id === userId);\n  };\n\n  return (\n    <AppDrawer\n      open={open}\n      onOpenChange={onOpenChange}\n      title={event.title}\n      description={event.project?.name || \"Programming Event\"}\n      icon={<Calendar className=\"h-5 w-5\" />}\n      width=\"md\"\n    >\n      <div className=\"space-y-6\">\n        {/* Header Actions */}\n        <div className=\"flex justify-between items-start\">\n          <div className=\"flex items-center gap-2\">\n            <Badge variant={statusConfig.variant}>{statusConfig.label}</Badge>\n            <Badge variant=\"outline\">{EVENT_TYPE_LABEL[event.event_type]}</Badge>\n          </div>\n          {onEdit && (\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={onEdit}\n            >\n              <Edit className=\"h-4 w-4 mr-2\" />\n              Edit\n            </Button>\n          )}\n        </div>\n\n        {/* Description */}\n        {event.description && (\n          <div>\n            <h3 className=\"font-medium mb-2 flex items-center gap-2\">\n              <FileText className=\"h-4 w-4\" />\n              Description\n            </h3>\n            <p className=\"text-sm text-muted-foreground whitespace-pre-wrap\">\n              {event.description}\n            </p>\n          </div>\n        )}\n\n        {/* Schedule */}\n        <div>\n          <h3 className=\"font-medium mb-3 flex items-center gap-2\">\n            <Clock className=\"h-4 w-4\" />\n            Schedule\n          </h3>\n          <div className=\"space-y-3\">\n            <div className=\"flex items-center justify-between p-3 bg-muted/50 rounded-lg\">\n              <span className=\"text-sm\">Start Time</span>\n              <span className=\"text-sm font-medium\">\n                {format(parseISO(event.start_at), \"MMMM d, yyyy 'at' h:mm a\")}\n              </span>\n            </div>\n            \n            {event.end_at && (\n              <div className=\"flex items-center justify-between p-3 bg-muted/50 rounded-lg\">\n                <span className=\"text-sm\">End Time</span>\n                <span className=\"text-sm font-medium\">\n                  {format(parseISO(event.end_at), \"MMMM d, yyyy 'at' h:mm a\")}\n                </span>\n              </div>\n            )}\n\n            {getDuration() && (\n              <div className=\"flex items-center justify-between p-3 bg-muted/50 rounded-lg\">\n                <span className=\"text-sm\">Duration</span>\n                <span className=\"text-sm font-medium\">{getDuration()}</span>\n              </div>\n            )}\n\n            {event.setup_start && (\n              <div className=\"flex items-center justify-between p-3 bg-info/10 rounded-lg\">\n                <span className=\"text-sm\">Setup Start</span>\n                <span className=\"text-sm font-medium\">\n                  {format(parseISO(event.setup_start), \"MMMM d, yyyy 'at' h:mm a\")}\n                </span>\n              </div>\n            )}\n\n            {event.teardown_end && (\n              <div className=\"flex items-center justify-between p-3 bg-info/10 rounded-lg\">\n                <span className=\"text-sm\">Teardown End</span>\n                <span className=\"text-sm font-medium\">\n                  {format(parseISO(event.teardown_end), \"MMMM d, yyyy 'at' h:mm a\")}\n                </span>\n              </div>\n            )}\n          </div>\n        </div>\n\n        {/* Location & Capacity */}\n        {(event.location || event.capacity) && (\n          <div>\n            <h3 className=\"font-medium mb-3 flex items-center gap-2\">\n              <MapPin className=\"h-4 w-4\" />\n              Venue Details\n            </h3>\n            <div className=\"space-y-3\">\n              {event.location && (\n                <div className=\"flex items-center justify-between p-3 bg-muted/50 rounded-lg\">\n                  <span className=\"text-sm\">Location</span>\n                  <span className=\"text-sm font-medium\">{event.location}</span>\n                </div>\n              )}\n              {event.capacity && (\n                <div className=\"flex items-center justify-between p-3 bg-muted/50 rounded-lg\">\n                  <span className=\"text-sm\">Capacity</span>\n                  <span className=\"text-sm font-medium\">{event.capacity} people</span>\n                </div>\n              )}\n            </div>\n          </div>\n        )}\n\n        {/* Project Info */}\n        {event.project && (\n          <div>\n            <h3 className=\"font-medium mb-2 flex items-center gap-2\">\n              <Briefcase className=\"h-4 w-4\" />\n              Project\n            </h3>\n            <Card className=\"p-3\">\n              <div className=\"flex items-center justify-between\">\n                <span className=\"font-medium\">{event.project.name}</span>\n                <Badge variant={\n                  event.project.status === \"active\" ? \"success\" :\n                  event.project.status === \"planning\" ? \"warning\" :\n                  event.project.status === \"on_hold\" ? \"secondary\" :\n                  \"destructive\"\n                }>\n                  {event.project.status}\n                </Badge>\n              </div>\n            </Card>\n          </div>\n        )}\n\n        {/* Broadcast */}\n        {event.broadcast_url && (\n          <div>\n            <h3 className=\"font-medium mb-2 flex items-center gap-2\">\n              <Radio className=\"h-4 w-4\" />\n              Broadcast\n            </h3>\n            <Card className=\"p-3\">\n              <a\n                href={event.broadcast_url}\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                className=\"text-sm text-primary hover:underline break-all\"\n              >\n                {event.broadcast_url}\n              </a>\n            </Card>\n          </div>\n        )}\n\n        {/* Tags */}\n        {event.tags && event.tags.length > 0 && (\n          <div>\n            <h3 className=\"font-medium mb-3 flex items-center gap-2\">\n              <Tag className=\"h-4 w-4\" />\n              Tags\n            </h3>\n            <div className=\"flex flex-wrap gap-2\">\n              {event.tags.map((tag) => (\n                <Badge key={tag} variant=\"secondary\">\n                  {tag}\n                </Badge>\n              ))}\n            </div>\n          </div>\n        )}\n\n        {/* Resources */}\n        {event.resources && event.resources.length > 0 && (\n          <div>\n            <h3 className=\"font-medium mb-3 flex items-center gap-2\">\n              <Settings className=\"h-4 w-4\" />\n              Resources\n            </h3>\n            <div className=\"space-y-2\">\n              {event.resources.map((resource, index) => (\n                <Card key={index} className=\"p-3\">\n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-sm font-medium\">{resource.name}</span>\n                    <Badge variant=\"outline\">Qty: {resource.quantity}</Badge>\n                  </div>\n                </Card>\n              ))}\n            </div>\n          </div>\n        )}\n\n        {/* Staffing */}\n        {event.staffing && event.staffing.length > 0 && (\n          <div>\n            <h3 className=\"font-medium mb-3 flex items-center gap-2\">\n              <Users className=\"h-4 w-4\" />\n              Staffing\n            </h3>\n            <div className=\"space-y-2\">\n              {event.staffing.map((staff, index) => {\n                const user = getUserById(staff.user_id);\n                \n                return (\n                  <Card key={index} className=\"p-3\">\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <div className=\"text-sm font-medium\">{staff.role}</div>\n                        {user && (\n                          <div className=\"text-xs text-muted-foreground\">\n                            {user.full_name || user.email}\n                          </div>\n                        )}\n                        {staff.notes && (\n                          <div className=\"text-xs text-muted-foreground mt-1\">\n                            {staff.notes}\n                          </div>\n                        )}\n                      </div>\n                      {user && user.avatar_url && (\n                        <img\n                          src={user.avatar_url}\n                          alt={user.full_name || user.email}\n                          className=\"h-8 w-8 rounded-full\"\n                        />\n                      )}\n                    </div>\n                  </Card>\n                );\n              })}\n            </div>\n          </div>\n        )}\n\n        {/* Activity */}\n        <div>\n          <h3 className=\"font-medium mb-3 flex items-center gap-2\">\n            <Activity className=\"h-4 w-4\" />\n            Activity\n          </h3>\n          <div className=\"space-y-2 text-sm text-muted-foreground\">\n            <div className=\"flex items-center justify-between\">\n              <span>Created</span>\n              <span>{format(parseISO(event.created_at || event.start_at), \"MMM d, yyyy 'at' h:mm a\")}</span>\n            </div>\n            <div className=\"flex items-center justify-between\">\n              <span>Last Updated</span>\n              <span>{format(parseISO(event.updated_at || event.start_at), \"MMM d, yyyy 'at' h:mm a\")}</span>\n            </div>\n            <div className=\"flex items-center justify-between\">\n              <span>Timezone</span>\n              <span>{event.timezone || \"UTC\"}</span>\n            </div>\n            {event.is_all_day && (\n              <div className=\"flex items-center justify-between\">\n                <span>All Day Event</span>\n                <Badge variant=\"secondary\">Yes</Badge>\n              </div>\n            )}\n          </div>\n        </div>\n\n        {/* Close Button */}\n        <div className=\"pt-6 border-t\">\n          <Button\n            variant=\"outline\"\n            className=\"w-full\"\n            onClick={() => onOpenChange(false)}\n          >\n            Close\n          </Button>\n        </div>\n      </div>\n    </AppDrawer>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ghxstship/apps/web/app/(app)/(shell)/programming/calendar/views/ProgrammingCalendarBoardView.tsx","messages":[{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Eye' is not defined.","line":66,"column":30,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":66,"endColumn":33},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Pencil' is not defined.","line":69,"column":30,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":69,"endColumn":36},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Trash2' is not defined.","line":72,"column":30,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":72,"endColumn":36}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport { Badge, Button, Card } from \"@ghxstship/ui\";\nimport type { ProgrammingEvent } from \"../types\";\nimport { EVENT_TYPE_LABEL, STATUS_BADGE } from \"../ProgrammingCalendarClient\";\n\ntype ProgrammingCalendarBoardViewProps = {\n  events: ProgrammingEvent[];\n  selected: Set<string>;\n  onSelect: (id: string) => void;\n  onView: (event: ProgrammingEvent) => void;\n  onEdit: (event: ProgrammingEvent) => void;\n  onDelete: (event: ProgrammingEvent) => void;\n};\n\nconst STATUS_COLUMNS: ProgrammingEvent[\"status\"][] = [\n  \"draft\",\n  \"scheduled\",\n  \"in_progress\",\n  \"completed\",\n  \"cancelled\",\n];\n\nexport default function ProgrammingCalendarBoardView({\n  events,\n  selected,\n  onSelect,\n  onView,\n  onEdit,\n  onDelete,\n}: ProgrammingCalendarBoardViewProps) {\n  return (\n    <div className=\"flex gap-md overflow-x-auto pb-md\">\n      {STATUS_COLUMNS.map((status) => {\n        const columnEvents = events.filter((event) => event.status === status);\n        const statusConfig = STATUS_BADGE[status];\n\n        return (\n          <section key={status} className=\"flex w-80 flex-shrink-0 flex-col gap-sm\">\n            <header className=\"flex items-center justify-between\">\n              <h3 className=\"text-sm font-semibold text-muted-foreground\">{statusConfig.label}</h3>\n              <Badge variant={statusConfig.variant} className=\"text-xs\">\n                {columnEvents.length}\n              </Badge>\n            </header>\n\n            <div className=\"space-y-sm\">\n              {columnEvents.length === 0 ? (\n                <Card className=\"p-md text-center text-xs text-muted-foreground\">No events</Card>\n              ) : (\n                columnEvents.map((event) => {\n                  const isSelected = selected.has(event.id);\n\n                  return (\n                    <Card key={event.id} className={`space-y-sm p-sm ${isSelected ? \"ring-2 ring-primary\" : \"\"}`}>\n                      <div className=\"flex items-start justify-between gap-sm\">\n                        <div className=\"space-y-xs\">\n                          <div className=\"text-sm font-medium leading-tight\">{event.title}</div>\n                          <div className=\"text-xs text-muted-foreground\">{EVENT_TYPE_LABEL[event.event_type]}</div>\n                          {event.project ? (\n                            <div className=\"text-xs text-muted-foreground\">{event.project.name}</div>\n                          ) : null}\n                        </div>\n                        <div className=\"flex items-center gap-1\">\n                          <Button size=\"icon\" variant=\"ghost\" onClick={() => onView(event)}>\n                            <Eye className=\"h-4 w-4\" />\n                          </Button>\n                          <Button size=\"icon\" variant=\"ghost\" onClick={() => onEdit(event)}>\n                            <Pencil className=\"h-4 w-4\" />\n                          </Button>\n                          <Button size=\"icon\" variant=\"ghost\" onClick={() => onDelete(event)}>\n                            <Trash2 className=\"h-4 w-4 text-destructive\" />\n                          </Button>\n                        </div>\n                      </div>\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        className=\"w-full\"\n                        onClick={() => onSelect(event.id)}\n                      >\n                        {isSelected ? \"Selected\" : \"Select\"}\n                      </Button>\n                    </Card>\n                  );\n                })\n              )}\n            </div>\n          </section>\n        );\n      })}\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ghxstship/apps/web/app/(app)/(shell)/programming/calendar/views/ProgrammingCalendarGridView.tsx","messages":[{"ruleId":"react/jsx-no-undef","severity":2,"message":"'ChevronLeft' is not defined.","line":65,"column":14,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":65,"endColumn":25},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'ChevronRight' is not defined.","line":71,"column":14,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":71,"endColumn":26},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Clock' is not defined.","line":138,"column":28,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":138,"endColumn":33},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Calendar' is not defined.","line":188,"column":28,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":188,"endColumn":36},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Clock' is not defined.","line":192,"column":28,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":192,"endColumn":33},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'MapPin' is not defined.","line":197,"column":30,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":197,"endColumn":36},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Eye' is not defined.","line":213,"column":24,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":213,"endColumn":27}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport { useState, useMemo } from \"react\";\nimport { Badge, Button, Card } from \"@ghxstship/ui\";\nimport { \n  format, \n  parseISO, \n  startOfMonth, \n  endOfMonth, \n  eachDayOfInterval, \n  isSameDay, \n  isSameMonth, \n  isToday,\n  addMonths,\n  subMonths\n} from \"date-fns\";\nimport type { ProgrammingEvent } from \"../types\";\nimport { EVENT_TYPE_LABEL, STATUS_BADGE } from \"../ProgrammingCalendarClient\";\n\ntype ProgrammingCalendarGridViewProps = {\n  events: ProgrammingEvent[];\n  onView: (event: ProgrammingEvent) => void;\n  onEdit: (event: ProgrammingEvent) => void;\n};\n\nexport default function ProgrammingCalendarGridView({\n  events,\n  onView,\n  onEdit,\n}: ProgrammingCalendarGridViewProps) {\n  const [currentDate, setCurrentDate] = useState(new Date());\n\n  const monthStart = startOfMonth(currentDate);\n  const monthEnd = endOfMonth(currentDate);\n  const calendarDays = eachDayOfInterval({ start: monthStart, end: monthEnd });\n\n  const eventsForMonth = useMemo(() => {\n    return events.filter((event) => {\n      const eventDate = parseISO(event.start_at);\n      return isSameMonth(eventDate, currentDate);\n    });\n  }, [events, currentDate]);\n\n  const getEventsForDay = (day: Date) => {\n    return eventsForMonth.filter((event) => {\n      const eventDate = parseISO(event.start_at);\n      return isSameDay(eventDate, day);\n    });\n  };\n\n  const navigateMonth = (direction: \"prev\" | \"next\") => {\n    setCurrentDate(direction === \"prev\" ? subMonths(currentDate, 1) : addMonths(currentDate, 1));\n  };\n\n  const goToToday = () => {\n    setCurrentDate(new Date());\n  };\n\n  return (\n    <div className=\"space-y-md\">\n      {/* Calendar Header */}\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center gap-sm\">\n          <Button variant=\"outline\" size=\"sm\" onClick={() => navigateMonth(\"prev\")}>\n            <ChevronLeft className=\"h-4 w-4\" />\n          </Button>\n          <h2 className=\"text-xl font-semibold min-w-[200px] text-center\">\n            {format(currentDate, \"MMMM yyyy\")}\n          </h2>\n          <Button variant=\"outline\" size=\"sm\" onClick={() => navigateMonth(\"next\")}>\n            <ChevronRight className=\"h-4 w-4\" />\n          </Button>\n        </div>\n        <Button variant=\"outline\" size=\"sm\" onClick={goToToday}>\n          Today\n        </Button>\n      </div>\n\n      {/* Calendar Grid */}\n      <Card className=\"p-0 overflow-hidden\">\n        <div className=\"grid grid-cols-7\">\n          {/* Day Headers */}\n          {[\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"].map((day) => (\n            <div\n              key={day}\n              className=\"p-sm text-center text-sm font-medium text-muted-foreground border-b border-r last:border-r-0\"\n            >\n              {day}\n            </div>\n          ))}\n\n          {/* Calendar Days */}\n          {calendarDays.map((day, index) => {\n            const dayEvents = getEventsForDay(day);\n            const isCurrentDay = isToday(day);\n\n            return (\n              <div\n                key={day.toISOString()}\n                className={`min-h-[120px] p-sm border-b border-r last:border-r-0 ${\n                  isCurrentDay ? \"bg-accent/10\" : \"hover:bg-muted/50\"\n                }`}\n              >\n                <div className={`text-sm font-medium mb-sm ${\n                  isCurrentDay ? \"text-accent font-bold\" : \"text-foreground\"\n                }`}>\n                  {format(day, \"d\")}\n                </div>\n\n                <div className=\"space-y-1\">\n                  {dayEvents.slice(0, 3).map((event) => {\n                    const statusConfig = STATUS_BADGE[event.status];\n                    \n                    return (\n                      <div\n                        key={event.id}\n                        className=\"text-xs p-1 rounded cursor-pointer hover:opacity-80 transition-opacity\"\n                        style={{ \n                          backgroundColor: `var(--${statusConfig.variant === 'destructive' ? 'destructive' : statusConfig.variant === 'warning' ? 'warning' : statusConfig.variant === 'success' ? 'success' : 'muted'})`,\n                          opacity: 0.1\n                        }}\n                        onClick={() => onView(event)}\n                      >\n                        <div className=\"flex items-center gap-1\">\n                          <div \n                            className={`w-2 h-2 rounded-full ${\n                              statusConfig.variant === 'destructive' ? 'bg-destructive' :\n                              statusConfig.variant === 'warning' ? 'bg-warning' :\n                              statusConfig.variant === 'success' ? 'bg-success' :\n                              'bg-muted-foreground'\n                            }`}\n                          />\n                          <span className=\"truncate font-medium text-foreground\">\n                            {event.title}\n                          </span>\n                        </div>\n                        <div className=\"text-muted-foreground mt-0.5 flex items-center gap-1\">\n                          <Clock className=\"h-2 w-2\" />\n                          <span>\n                            {format(parseISO(event.start_at), \"h:mm a\")}\n                          </span>\n                        </div>\n                      </div>\n                    );\n                  })}\n\n                  {dayEvents.length > 3 && (\n                    <div className=\"text-xs text-muted-foreground p-1\">\n                      +{dayEvents.length - 3} more\n                    </div>\n                  )}\n                </div>\n              </div>\n            );\n          })}\n        </div>\n      </Card>\n\n      {/* Events Summary */}\n      {eventsForMonth.length > 0 && (\n        <Card className=\"p-md\">\n          <h3 className=\"font-semibold mb-sm\">\n            Events in {format(currentDate, \"MMMM yyyy\")} ({eventsForMonth.length})\n          </h3>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-sm\">\n            {eventsForMonth.slice(0, 6).map((event) => {\n              const statusConfig = STATUS_BADGE[event.status];\n              \n              return (\n                <div\n                  key={event.id}\n                  className=\"flex items-center justify-between p-sm rounded-lg border hover:bg-muted/50 cursor-pointer transition-colors\"\n                  onClick={() => onView(event)}\n                >\n                  <div className=\"flex items-center gap-sm min-w-0\">\n                    <div \n                      className={`w-3 h-3 rounded-full ${\n                        statusConfig.variant === 'destructive' ? 'bg-destructive' :\n                        statusConfig.variant === 'warning' ? 'bg-warning' :\n                        statusConfig.variant === 'success' ? 'bg-success' :\n                        'bg-muted-foreground'\n                      }`}\n                    />\n                    <div className=\"min-w-0\">\n                      <div className=\"font-medium text-sm truncate\">{event.title}</div>\n                      <div className=\"text-xs text-muted-foreground flex items-center gap-md\">\n                        <span className=\"flex items-center gap-1\">\n                          <Calendar className=\"h-3 w-3\" />\n                          {format(parseISO(event.start_at), \"MMM d\")}\n                        </span>\n                        <span className=\"flex items-center gap-1\">\n                          <Clock className=\"h-3 w-3\" />\n                          {format(parseISO(event.start_at), \"h:mm a\")}\n                        </span>\n                        {event.location && (\n                          <span className=\"flex items-center gap-1\">\n                            <MapPin className=\"h-3 w-3\" />\n                            {event.location}\n                          </span>\n                        )}\n                      </div>\n                    </div>\n                  </div>\n                  \n                  <div className=\"flex items-center gap-xs\">\n                    <Badge variant={statusConfig.variant} className=\"text-xs\">\n                      {statusConfig.label}\n                    </Badge>\n                    <Button size=\"icon\" variant=\"ghost\" onClick={(e) => {\n                      e.stopPropagation();\n                      onEdit(event);\n                    }}>\n                      <Eye className=\"h-3 w-3\" />\n                    </Button>\n                  </div>\n                </div>\n              );\n            })}\n          </div>\n          \n          {eventsForMonth.length > 6 && (\n            <div className=\"text-center pt-sm\">\n              <Button variant=\"outline\" size=\"sm\">\n                View All {eventsForMonth.length} Events\n              </Button>\n            </div>\n          )}\n        </Card>\n      )}\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ghxstship/apps/web/app/(app)/(shell)/programming/calendar/views/ProgrammingCalendarListView.tsx","messages":[{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Calendar' is not defined.","line":28,"column":10,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":28,"endColumn":18},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Calendar' is not defined.","line":73,"column":22,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":73,"endColumn":30},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Clock' is not defined.","line":81,"column":24,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":81,"endColumn":29},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'MapPin' is not defined.","line":90,"column":24,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":90,"endColumn":30},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Users' is not defined.","line":97,"column":24,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":97,"endColumn":29},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Users' is not defined.","line":104,"column":24,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":104,"endColumn":29},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Eye' is not defined.","line":126,"column":24,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":126,"endColumn":27},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Pencil' is not defined.","line":130,"column":24,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":130,"endColumn":30},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Trash2' is not defined.","line":139,"column":24,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":139,"endColumn":30}],"suppressedMessages":[],"errorCount":9,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport { Badge, Button, Card, Checkbox } from \"@ghxstship/ui\";\nimport { format, parseISO } from \"date-fns\";\nimport type { ProgrammingEvent } from \"../types\";\nimport { EVENT_TYPE_LABEL, STATUS_BADGE } from \"../ProgrammingCalendarClient\";\n\ntype ProgrammingCalendarListViewProps = {\n  events: ProgrammingEvent[];\n  selected: Set<string>;\n  onSelect: (id: string) => void;\n  onView: (event: ProgrammingEvent) => void;\n  onEdit: (event: ProgrammingEvent) => void;\n  onDelete: (event: ProgrammingEvent) => void;\n};\n\nexport default function ProgrammingCalendarListView({\n  events,\n  selected,\n  onSelect,\n  onView,\n  onEdit,\n  onDelete,\n}: ProgrammingCalendarListViewProps) {\n  if (events.length === 0) {\n    return (\n      <Card className=\"p-lg text-center\">\n        <Calendar className=\"mx-auto h-12 w-12 text-muted-foreground mb-md\" />\n        <h3 className=\"text-lg font-semibold mb-sm\">No events found</h3>\n        <p className=\"text-muted-foreground\">Try adjusting your filters or create a new event.</p>\n      </Card>\n    );\n  }\n\n  return (\n    <div className=\"space-y-sm\">\n      {events.map((event) => {\n        const isSelected = selected.has(event.id);\n        const statusConfig = STATUS_BADGE[event.status];\n\n        return (\n          <Card\n            key={event.id}\n            className={`p-md transition-all hover:shadow-md ${\n              isSelected ? \"ring-2 ring-primary\" : \"\"\n            }`}\n          >\n            <div className=\"flex items-start gap-md\">\n              <Checkbox\n                checked={isSelected}\n                onChange={() => onSelect(event.id)}\n                className=\"mt-1\"\n              />\n\n              <div className=\"flex-1 space-y-sm\">\n                <div className=\"flex items-start justify-between\">\n                  <div className=\"space-y-xs\">\n                    <h3 className=\"font-semibold text-lg\">{event.title}</h3>\n                    {event.description && (\n                      <p className=\"text-sm text-muted-foreground line-clamp-2\">\n                        {event.description}\n                      </p>\n                    )}\n                  </div>\n                  <div className=\"flex items-center gap-sm\">\n                    <Badge variant={statusConfig.variant}>{statusConfig.label}</Badge>\n                    <Badge variant=\"outline\">{EVENT_TYPE_LABEL[event.event_type]}</Badge>\n                  </div>\n                </div>\n\n                <div className=\"flex flex-wrap items-center gap-md text-sm text-muted-foreground\">\n                  <div className=\"flex items-center gap-xs\">\n                    <Calendar className=\"h-4 w-4\" />\n                    <span>\n                      {format(parseISO(event.start_at), \"MMM d, yyyy 'at' h:mm a\")}\n                    </span>\n                  </div>\n\n                  {event.end_at && (\n                    <div className=\"flex items-center gap-xs\">\n                      <Clock className=\"h-4 w-4\" />\n                      <span>\n                        Until {format(parseISO(event.end_at), \"MMM d, yyyy 'at' h:mm a\")}\n                      </span>\n                    </div>\n                  )}\n\n                  {event.location && (\n                    <div className=\"flex items-center gap-xs\">\n                      <MapPin className=\"h-4 w-4\" />\n                      <span>{event.location}</span>\n                    </div>\n                  )}\n\n                  {event.project && (\n                    <div className=\"flex items-center gap-xs\">\n                      <Users className=\"h-4 w-4\" />\n                      <span>{event.project.name}</span>\n                    </div>\n                  )}\n\n                  {event.capacity && (\n                    <div className=\"flex items-center gap-xs\">\n                      <Users className=\"h-4 w-4\" />\n                      <span>Capacity: {event.capacity}</span>\n                    </div>\n                  )}\n                </div>\n\n                {event.tags.length > 0 && (\n                  <div className=\"flex flex-wrap gap-xs\">\n                    {event.tags.map((tag) => (\n                      <Badge key={tag} variant=\"secondary\" className=\"text-xs\">\n                        {tag}\n                      </Badge>\n                    ))}\n                  </div>\n                )}\n\n                <div className=\"flex items-center justify-between pt-sm border-t\">\n                  <div className=\"text-xs text-muted-foreground\">\n                    Created {format(parseISO(event.created_at || event.start_at), \"MMM d, yyyy\")}\n                  </div>\n                  <div className=\"flex items-center gap-sm\">\n                    <Button size=\"sm\" variant=\"ghost\" onClick={() => onView(event)}>\n                      <Eye className=\"h-4 w-4 mr-xs\" />\n                      View\n                    </Button>\n                    <Button size=\"sm\" variant=\"ghost\" onClick={() => onEdit(event)}>\n                      <Pencil className=\"h-4 w-4 mr-xs\" />\n                      Edit\n                    </Button>\n                    <Button\n                      size=\"sm\"\n                      variant=\"ghost\"\n                      onClick={() => onDelete(event)}\n                      className=\"text-destructive hover:text-destructive\"\n                    >\n                      <Trash2 className=\"h-4 w-4 mr-xs\" />\n                      Delete\n                    </Button>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </Card>\n        );\n      })}\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ghxstship/apps/web/app/(app)/(shell)/programming/calendar/views/ProgrammingCalendarTimelineView.tsx","messages":[{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Calendar' is not defined.","line":98,"column":18,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":98,"endColumn":26},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Clock' is not defined.","line":103,"column":18,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":103,"endColumn":23},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'MapPin' is not defined.","line":112,"column":20,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":112,"endColumn":26},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Users' is not defined.","line":119,"column":20,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":119,"endColumn":25},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Users' is not defined.","line":126,"column":20,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":126,"endColumn":25},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Eye' is not defined.","line":172,"column":16,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":172,"endColumn":19},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Calendar' is not defined.","line":176,"column":16,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":176,"endColumn":24},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Calendar' is not defined.","line":188,"column":10,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":188,"endColumn":18}],"suppressedMessages":[],"errorCount":8,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport { useMemo } from \"react\";\nimport { Badge, Button, Card } from \"@ghxstship/ui\";\nimport { format, parseISO, isAfter, isBefore, isToday, startOfDay, endOfDay, addDays, startOfWeek, endOfWeek, startOfMonth, endOfMonth } from \"date-fns\";\nimport type { ProgrammingEvent } from \"../types\";\nimport { EVENT_TYPE_LABEL, STATUS_BADGE } from \"../ProgrammingCalendarClient\";\n\ntype ProgrammingCalendarTimelineViewProps = {\n  events: ProgrammingEvent[];\n  onView: (event: ProgrammingEvent) => void;\n  onEdit: (event: ProgrammingEvent) => void;\n};\n\ntype TimeGroup = {\n  id: string;\n  label: string;\n  events: ProgrammingEvent[];\n};\n\nexport default function ProgrammingCalendarTimelineView({\n  events,\n  onView,\n  onEdit,\n}: ProgrammingCalendarTimelineViewProps) {\n  const timeGroups = useMemo(() => {\n    const now = new Date();\n    const today = startOfDay(now);\n    const tomorrow = addDays(today, 1);\n    const weekStart = startOfWeek(now);\n    const weekEnd = endOfWeek(now);\n    const monthStart = startOfMonth(now);\n    const monthEnd = endOfMonth(now);\n\n    const groups: TimeGroup[] = [\n      { id: \"overdue\", label: \"Overdue\", events: [] },\n      { id: \"today\", label: \"Today\", events: [] },\n      { id: \"tomorrow\", label: \"Tomorrow\", events: [] },\n      { id: \"this-week\", label: \"This Week\", events: [] },\n      { id: \"this-month\", label: \"This Month\", events: [] },\n      { id: \"later\", label: \"Later\", events: [] },\n      { id: \"no-date\", label: \"No Due Date\", events: [] },\n    ];\n\n    events.forEach((event) => {\n      const eventDate = parseISO(event.start_at);\n\n      if (isBefore(eventDate, today) && event.status !== \"completed\" && event.status !== \"cancelled\") {\n        groups[0].events.push(event);\n      } else if (isToday(eventDate)) {\n        groups[1].events.push(event);\n      } else if (format(eventDate, \"yyyy-MM-dd\") === format(tomorrow, \"yyyy-MM-dd\")) {\n        groups[2].events.push(event);\n      } else if (isAfter(eventDate, today) && isBefore(eventDate, weekEnd)) {\n        groups[3].events.push(event);\n      } else if (isAfter(eventDate, weekEnd) && isBefore(eventDate, monthEnd)) {\n        groups[4].events.push(event);\n      } else if (isAfter(eventDate, monthEnd)) {\n        groups[5].events.push(event);\n      } else {\n        groups[6].events.push(event);\n      }\n    });\n\n    // Sort events within each group by start time\n    groups.forEach((group) => {\n      group.events.sort((a, b) => a.start_at.localeCompare(b.start_at));\n    });\n\n    return groups.filter((group) => group.events.length > 0);\n  }, [events]);\n\n  const renderEvent = (event: ProgrammingEvent) => {\n    const statusConfig = STATUS_BADGE[event.status];\n    const eventDate = parseISO(event.start_at);\n\n    return (\n      <Card key={event.id} className=\"p-md hover:shadow-md transition-shadow\">\n        <div className=\"flex items-start justify-between gap-md\">\n          <div className=\"flex-1 space-y-sm\">\n            <div className=\"flex items-start justify-between\">\n              <div>\n                <h4 className=\"font-semibold text-lg\">{event.title}</h4>\n                {event.description && (\n                  <p className=\"text-sm text-muted-foreground mt-xs line-clamp-2\">\n                    {event.description}\n                  </p>\n                )}\n              </div>\n              <div className=\"flex items-center gap-xs\">\n                <Badge variant={statusConfig.variant}>{statusConfig.label}</Badge>\n                <Badge variant=\"outline\">{EVENT_TYPE_LABEL[event.event_type]}</Badge>\n              </div>\n            </div>\n\n            <div className=\"flex flex-wrap items-center gap-md text-sm text-muted-foreground\">\n              <div className=\"flex items-center gap-xs\">\n                <Calendar className=\"h-4 w-4\" />\n                <span>{format(eventDate, \"MMM d, yyyy\")}</span>\n              </div>\n\n              <div className=\"flex items-center gap-xs\">\n                <Clock className=\"h-4 w-4\" />\n                <span>\n                  {format(eventDate, \"h:mm a\")}\n                  {event.end_at && ` - ${format(parseISO(event.end_at), \"h:mm a\")}`}\n                </span>\n              </div>\n\n              {event.location && (\n                <div className=\"flex items-center gap-xs\">\n                  <MapPin className=\"h-4 w-4\" />\n                  <span>{event.location}</span>\n                </div>\n              )}\n\n              {event.project && (\n                <div className=\"flex items-center gap-xs\">\n                  <Users className=\"h-4 w-4\" />\n                  <span>{event.project.name}</span>\n                </div>\n              )}\n\n              {event.capacity && (\n                <div className=\"flex items-center gap-xs\">\n                  <Users className=\"h-4 w-4\" />\n                  <span>Capacity: {event.capacity}</span>\n                </div>\n              )}\n            </div>\n\n            {event.tags.length > 0 && (\n              <div className=\"flex flex-wrap gap-xs\">\n                {event.tags.map((tag) => (\n                  <Badge key={tag} variant=\"secondary\" className=\"text-xs\">\n                    {tag}\n                  </Badge>\n                ))}\n              </div>\n            )}\n\n            {event.resources.length > 0 && (\n              <div className=\"space-y-xs\">\n                <div className=\"text-sm font-medium\">Resources:</div>\n                <div className=\"flex flex-wrap gap-xs\">\n                  {event.resources.map((resource, index) => (\n                    <span key={index} className=\"text-xs text-muted-foreground\">\n                      {resource.name} ({resource.quantity})\n                    </span>\n                  ))}\n                </div>\n              </div>\n            )}\n\n            {event.staffing.length > 0 && (\n              <div className=\"space-y-xs\">\n                <div className=\"text-sm font-medium\">Staffing:</div>\n                <div className=\"flex flex-wrap gap-xs\">\n                  {event.staffing.map((staff, index) => (\n                    <span key={index} className=\"text-xs text-muted-foreground\">\n                      {staff.role}\n                      {staff.notes && ` (${staff.notes})`}\n                    </span>\n                  ))}\n                </div>\n              </div>\n            )}\n          </div>\n\n          <div className=\"flex flex-col gap-sm\">\n            <Button size=\"sm\" variant=\"outline\" onClick={() => onView(event)}>\n              <Eye className=\"h-4 w-4 mr-xs\" />\n              View\n            </Button>\n            <Button size=\"sm\" variant=\"outline\" onClick={() => onEdit(event)}>\n              <Calendar className=\"h-4 w-4 mr-xs\" />\n              Edit\n            </Button>\n          </div>\n        </div>\n      </Card>\n    );\n  };\n\n  if (timeGroups.length === 0) {\n    return (\n      <Card className=\"p-lg text-center\">\n        <Calendar className=\"mx-auto h-12 w-12 text-muted-foreground mb-md\" />\n        <h3 className=\"text-lg font-semibold mb-sm\">No events found</h3>\n        <p className=\"text-muted-foreground\">Try adjusting your filters or create a new event.</p>\n      </Card>\n    );\n  }\n\n  return (\n    <div className=\"space-y-lg\">\n      {timeGroups.map((group) => (\n        <section key={group.id} className=\"space-y-md\">\n          <div className=\"flex items-center justify-between\">\n            <h3 className=\"text-xl font-semibold\">{group.label}</h3>\n            <Badge variant=\"secondary\">{group.events.length} events</Badge>\n          </div>\n          \n          <div className=\"space-y-sm\">\n            {group.events.map(renderEvent)}\n          </div>\n        </section>\n      ))}\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ghxstship/apps/web/app/(app)/(shell)/programming/events/views/ProgrammingEventsBoardView.tsx","messages":[{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Calendar' is not defined.","line":62,"column":32,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":62,"endColumn":40},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Clock' is not defined.","line":66,"column":32,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":66,"endColumn":37},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'MapPin' is not defined.","line":71,"column":34,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":71,"endColumn":40},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Users' is not defined.","line":77,"column":34,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":77,"endColumn":39},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Eye' is not defined.","line":102,"column":30,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":102,"endColumn":33},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Pencil' is not defined.","line":105,"column":30,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":105,"endColumn":36},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Trash2' is not defined.","line":108,"column":30,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":108,"endColumn":36}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport { Badge, Button, Card } from \"@ghxstship/ui\";\nimport type { ProgrammingEvent } from \"../types\";\nimport { STATUS_BADGE, EVENT_TYPE_LABEL } from \"../ProgrammingEventsClient\";\n\ntype ProgrammingEventsBoardViewProps = {\n  events: ProgrammingEvent[];\n  selected: Set<string>;\n  onSelect: (id: string) => void;\n  onView: (event: ProgrammingEvent) => void;\n  onEdit: (event: ProgrammingEvent) => void;\n  onDelete: (event: ProgrammingEvent) => void;\n};\n\nconst STATUS_COLUMNS: ProgrammingEvent[\"status\"][] = [\n  \"draft\",\n  \"scheduled\",\n  \"in_progress\",\n  \"completed\",\n  \"cancelled\",\n];\n\nexport default function ProgrammingEventsBoardView({\n  events,\n  selected,\n  onSelect,\n  onView,\n  onEdit,\n  onDelete,\n}: ProgrammingEventsBoardViewProps) {\n  return (\n    <div className=\"flex gap-md overflow-x-auto pb-md\">\n      {STATUS_COLUMNS.map((status) => {\n        const columnEvents = events.filter((event) => event.status === status);\n        const statusConfig = STATUS_BADGE[status];\n\n        return (\n          <section key={status} className=\"flex w-80 flex-shrink-0 flex-col gap-sm\">\n            <header className=\"flex items-center justify-between\">\n              <h3 className=\"text-sm font-semibold text-muted-foreground\">{statusConfig.label}</h3>\n              <Badge variant={statusConfig.variant} className=\"text-xs\">\n                {columnEvents.length}\n              </Badge>\n            </header>\n\n            <div className=\"space-y-sm\">\n              {columnEvents.length === 0 ? (\n                <Card className=\"p-md text-center text-xs text-muted-foreground\">No events</Card>\n              ) : (\n                columnEvents.map((event) => {\n                  const isSelected = selected.has(event.id);\n\n                  return (\n                    <Card key={event.id} className={`space-y-sm p-sm ${isSelected ? \"ring-2 ring-primary\" : \"\"}`}>\n                      <div className=\"flex items-start justify-between gap-sm\">\n                        <div className=\"space-y-xs\">\n                          <div className=\"text-sm font-medium leading-tight\">{event.title}</div>\n                          <div className=\"text-xs text-muted-foreground\">{EVENT_TYPE_LABEL[event.event_type]}</div>\n                          <div className=\"flex flex-col gap-1 text-xs text-muted-foreground\">\n                            <span className=\"flex items-center gap-1\">\n                              <Calendar className=\"h-3 w-3\" />\n                              {new Date(event.start_at).toLocaleDateString()}\n                            </span>\n                            <span className=\"flex items-center gap-1\">\n                              <Clock className=\"h-3 w-3\" />\n                              {new Date(event.start_at).toLocaleTimeString()}\n                            </span>\n                            {event.location ? (\n                              <span className=\"flex items-center gap-1\">\n                                <MapPin className=\"h-3 w-3\" />\n                                {event.location}\n                              </span>\n                            ) : null}\n                            {event.capacity ? (\n                              <span className=\"flex items-center gap-1\">\n                                <Users className=\"h-3 w-3\" />\n                                {event.capacity} capacity\n                              </span>\n                            ) : null}\n                          </div>\n                          {event.project ? (\n                            <div className=\"text-xs text-muted-foreground\">Project: {event.project.name}</div>\n                          ) : null}\n                          {event.tags.length > 0 ? (\n                            <div className=\"flex flex-wrap gap-1\">\n                              {event.tags.slice(0, 2).map((tag) => (\n                                <Badge key={tag} variant=\"outline\" className=\"text-xs\">\n                                  {tag}\n                                </Badge>\n                              ))}\n                              {event.tags.length > 2 ? (\n                                <Badge variant=\"outline\" className=\"text-xs\">\n                                  +{event.tags.length - 2}\n                                </Badge>\n                              ) : null}\n                            </div>\n                          ) : null}\n                        </div>\n                        <div className=\"flex items-center gap-1\">\n                          <Button size=\"icon\" variant=\"ghost\" onClick={() => onView(event)}>\n                            <Eye className=\"h-4 w-4\" />\n                          </Button>\n                          <Button size=\"icon\" variant=\"ghost\" onClick={() => onEdit(event)}>\n                            <Pencil className=\"h-4 w-4\" />\n                          </Button>\n                          <Button size=\"icon\" variant=\"ghost\" onClick={() => onDelete(event)}>\n                            <Trash2 className=\"h-4 w-4 text-destructive\" />\n                          </Button>\n                        </div>\n                      </div>\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        className=\"w-full\"\n                        onClick={() => onSelect(event.id)}\n                      >\n                        {isSelected ? \"Selected\" : \"Select\"}\n                      </Button>\n                    </Card>\n                  );\n                })\n              )}\n            </div>\n          </section>\n        );\n      })}\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ghxstship/apps/web/app/(app)/(shell)/programming/events/views/ProgrammingEventsListView.tsx","messages":[{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Calendar' is not defined.","line":114,"column":20,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":114,"endColumn":28},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Clock' is not defined.","line":118,"column":20,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":118,"endColumn":25},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'MapPin' is not defined.","line":132,"column":22,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":132,"endColumn":28},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Users' is not defined.","line":140,"column":22,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":140,"endColumn":27},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Eye' is not defined.","line":156,"column":20,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":156,"endColumn":23},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Pencil' is not defined.","line":159,"column":20,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":159,"endColumn":26},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Trash2' is not defined.","line":162,"column":20,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":162,"endColumn":26}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport { Badge, Button, Checkbox } from \"@ghxstship/ui\";\nimport type { ProgrammingEvent } from \"../types\";\nimport { STATUS_BADGE, EVENT_TYPE_LABEL } from \"../ProgrammingEventsClient\";\n\ntype ProgrammingEventsListViewProps = {\n  events: ProgrammingEvent[];\n  selected: Set<string>;\n  onSelect: (id: string) => void;\n  onView: (event: ProgrammingEvent) => void;\n  onEdit: (event: ProgrammingEvent) => void;\n  onDelete: (event: ProgrammingEvent) => void;\n};\n\nexport default function ProgrammingEventsListView({\n  events,\n  selected,\n  onSelect,\n  onView,\n  onEdit,\n  onDelete,\n}: ProgrammingEventsListViewProps) {\n  const toggleAll = () => {\n    if (selected.size === events.length) {\n      events.forEach((event) => onSelect(event.id));\n    } else {\n      events.forEach((event) => {\n        if (!selected.has(event.id)) {\n          onSelect(event.id);\n        }\n      });\n    }\n  };\n\n  return (\n    <div className=\"space-y-sm\">\n      {/* Header */}\n      <div className=\"grid grid-cols-12 gap-md border-b border-border pb-sm text-sm font-medium text-muted-foreground\">\n        <div className=\"col-span-1 flex items-center\">\n          <Checkbox\n            checked={selected.size === events.length && events.length > 0}\n            onCheckedChange={toggleAll}\n          />\n        </div>\n        <div className=\"col-span-3\">Event</div>\n        <div className=\"col-span-2\">Type</div>\n        <div className=\"col-span-2\">Date & Time</div>\n        <div className=\"col-span-2\">Location</div>\n        <div className=\"col-span-1\">Status</div>\n        <div className=\"col-span-1\">Actions</div>\n      </div>\n\n      {/* Events List */}\n      <div className=\"space-y-xs\">\n        {events.map((event) => {\n          const isSelected = selected.has(event.id);\n          const statusConfig = STATUS_BADGE[event.status];\n\n          return (\n            <div\n              key={event.id}\n              className={`grid grid-cols-12 gap-md rounded-md border p-sm transition-colors hover:bg-muted/50 ${\n                isSelected ? \"bg-primary/5 border-primary\" : \"border-border\"\n              }`}\n            >\n              {/* Selection */}\n              <div className=\"col-span-1 flex items-center\">\n                <Checkbox\n                  checked={isSelected}\n                  onCheckedChange={() => onSelect(event.id)}\n                />\n              </div>\n\n              {/* Event Info */}\n              <div className=\"col-span-3 space-y-xs\">\n                <div className=\"font-medium\">{event.title}</div>\n                {event.description && (\n                  <div className=\"text-sm text-muted-foreground line-clamp-2\">\n                    {event.description}\n                  </div>\n                )}\n                {event.project && (\n                  <div className=\"text-xs text-muted-foreground\">\n                    Project: {event.project.name}\n                  </div>\n                )}\n                {event.tags.length > 0 && (\n                  <div className=\"flex flex-wrap gap-1\">\n                    {event.tags.slice(0, 3).map((tag) => (\n                      <Badge key={tag} variant=\"outline\" className=\"text-xs\">\n                        {tag}\n                      </Badge>\n                    ))}\n                    {event.tags.length > 3 && (\n                      <Badge variant=\"outline\" className=\"text-xs\">\n                        +{event.tags.length - 3}\n                      </Badge>\n                    )}\n                  </div>\n                )}\n              </div>\n\n              {/* Type */}\n              <div className=\"col-span-2 flex items-center\">\n                <Badge variant=\"secondary\" className=\"text-xs\">\n                  {EVENT_TYPE_LABEL[event.event_type]}\n                </Badge>\n              </div>\n\n              {/* Date & Time */}\n              <div className=\"col-span-2 space-y-xs\">\n                <div className=\"flex items-center gap-1 text-sm\">\n                  <Calendar className=\"h-3 w-3\" />\n                  {new Date(event.start_at).toLocaleDateString()}\n                </div>\n                <div className=\"flex items-center gap-1 text-sm text-muted-foreground\">\n                  <Clock className=\"h-3 w-3\" />\n                  {new Date(event.start_at).toLocaleTimeString()}\n                </div>\n                {event.end_at && (\n                  <div className=\"text-xs text-muted-foreground\">\n                    Until {new Date(event.end_at).toLocaleString()}\n                  </div>\n                )}\n              </div>\n\n              {/* Location */}\n              <div className=\"col-span-2 space-y-xs\">\n                {event.location ? (\n                  <div className=\"flex items-center gap-1 text-sm\">\n                    <MapPin className=\"h-3 w-3\" />\n                    {event.location}\n                  </div>\n                ) : (\n                  <div className=\"text-sm text-muted-foreground\">No location</div>\n                )}\n                {event.capacity && (\n                  <div className=\"flex items-center gap-1 text-xs text-muted-foreground\">\n                    <Users className=\"h-3 w-3\" />\n                    {event.capacity} capacity\n                  </div>\n                )}\n              </div>\n\n              {/* Status */}\n              <div className=\"col-span-1 flex items-center\">\n                <Badge variant={statusConfig.variant} className=\"text-xs\">\n                  {statusConfig.label}\n                </Badge>\n              </div>\n\n              {/* Actions */}\n              <div className=\"col-span-1 flex items-center gap-1\">\n                <Button size=\"icon\" variant=\"ghost\" onClick={() => onView(event)}>\n                  <Eye className=\"h-3 w-3\" />\n                </Button>\n                <Button size=\"icon\" variant=\"ghost\" onClick={() => onEdit(event)}>\n                  <Pencil className=\"h-3 w-3\" />\n                </Button>\n                <Button size=\"icon\" variant=\"ghost\" onClick={() => onDelete(event)}>\n                  <Trash2 className=\"h-3 w-3 text-destructive\" />\n                </Button>\n              </div>\n            </div>\n          );\n        })}\n      </div>\n\n      {events.length === 0 && (\n        <div className=\"py-xl text-center text-muted-foreground\">\n          No events found matching your criteria\n        </div>\n      )}\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ghxstship/apps/web/app/(app)/(shell)/programming/events/views/ProgrammingEventsTimelineView.tsx","messages":[{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Calendar' is not defined.","line":63,"column":16,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":63,"endColumn":24},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Clock' is not defined.","line":105,"column":36,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":105,"endColumn":41},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Eye' is not defined.","line":119,"column":34,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":119,"endColumn":37},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Pencil' is not defined.","line":122,"column":34,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":122,"endColumn":40},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'MapPin' is not defined.","line":137,"column":34,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":137,"endColumn":40},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Users' is not defined.","line":143,"column":34,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":143,"endColumn":39}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport { Badge, Button, Card } from \"@ghxstship/ui\";\nimport type { ProgrammingEvent } from \"../types\";\nimport { STATUS_BADGE, EVENT_TYPE_LABEL } from \"../ProgrammingEventsClient\";\n\ntype ProgrammingEventsTimelineViewProps = {\n  events: ProgrammingEvent[];\n  onView: (event: ProgrammingEvent) => void;\n  onEdit: (event: ProgrammingEvent) => void;\n};\n\nexport default function ProgrammingEventsTimelineView({\n  events,\n  onView,\n  onEdit,\n}: ProgrammingEventsTimelineViewProps) {\n  // Sort events by start date\n  const sortedEvents = [...events].sort((a, b) => \n    new Date(a.start_at).getTime() - new Date(b.start_at).getTime()\n  );\n\n  // Group events by date\n  const eventsByDate = sortedEvents.reduce((acc, event) => {\n    const eventDate = new Date(event.start_at).toDateString();\n    if (!acc[eventDate]) acc[eventDate] = [];\n    acc[eventDate].push(event);\n    return acc;\n  }, {} as Record<string, ProgrammingEvent[]>);\n\n  const formatDate = (dateString: string) => {\n    const date = new Date(dateString);\n    const today = new Date();\n    const tomorrow = new Date(today);\n    tomorrow.setDate(today.getDate() + 1);\n    const yesterday = new Date(today);\n    yesterday.setDate(today.getDate() - 1);\n\n    if (date.toDateString() === today.toDateString()) {\n      return \"Today\";\n    } else if (date.toDateString() === tomorrow.toDateString()) {\n      return \"Tomorrow\";\n    } else if (date.toDateString() === yesterday.toDateString()) {\n      return \"Yesterday\";\n    } else {\n      return date.toLocaleDateString('en-US', { \n        weekday: 'long', \n        year: 'numeric', \n        month: 'long', \n        day: 'numeric' \n      });\n    }\n  };\n\n  return (\n    <div className=\"space-y-lg\">\n      {Object.entries(eventsByDate).map(([dateString, dayEvents]) => (\n        <div key={dateString} className=\"space-y-md\">\n          {/* Date Header */}\n          <div className=\"flex items-center gap-md\">\n            <div className=\"h-px flex-1 bg-border\" />\n            <div className=\"flex items-center gap-sm px-md py-sm bg-muted rounded-full\">\n              <Calendar className=\"h-4 w-4\" />\n              <span className=\"font-medium\">{formatDate(dateString)}</span>\n              <Badge variant=\"outline\" className=\"text-xs\">\n                {dayEvents.length} event{dayEvents.length !== 1 ? 's' : ''}\n              </Badge>\n            </div>\n            <div className=\"h-px flex-1 bg-border\" />\n          </div>\n\n          {/* Events for this date */}\n          <div className=\"relative\">\n            {/* Timeline line */}\n            <div className=\"absolute left-6 top-0 bottom-0 w-px bg-border\" />\n\n            <div className=\"space-y-md\">\n              {dayEvents.map((event, index) => {\n                const statusConfig = STATUS_BADGE[event.status];\n                const isLast = index === dayEvents.length - 1;\n\n                return (\n                  <div key={event.id} className=\"relative flex gap-md\">\n                    {/* Timeline dot */}\n                    <div className=\"relative z-10 flex h-12 w-12 items-center justify-center\">\n                      <div className={`h-3 w-3 rounded-full border-2 border-background ${\n                        statusConfig.variant === 'success' ? 'bg-success' :\n                        statusConfig.variant === 'warning' ? 'bg-warning' :\n                        statusConfig.variant === 'destructive' ? 'bg-destructive' :\n                        statusConfig.variant === 'info' ? 'bg-info' :\n                        'bg-muted'\n                      }`} />\n                    </div>\n\n                    {/* Event Card */}\n                    <Card className=\"flex-1 p-md\">\n                      <div className=\"flex items-start justify-between gap-md\">\n                        <div className=\"flex-1 space-y-sm\">\n                          {/* Event Header */}\n                          <div className=\"flex items-start justify-between gap-md\">\n                            <div>\n                              <h3 className=\"font-semibold\">{event.title}</h3>\n                              <div className=\"flex items-center gap-md text-sm text-muted-foreground\">\n                                <span className=\"flex items-center gap-1\">\n                                  <Clock className=\"h-3 w-3\" />\n                                  {new Date(event.start_at).toLocaleTimeString()}\n                                  {event.end_at && ` - ${new Date(event.end_at).toLocaleTimeString()}`}\n                                </span>\n                                <Badge variant=\"secondary\" className=\"text-xs\">\n                                  {EVENT_TYPE_LABEL[event.event_type]}\n                                </Badge>\n                                <Badge variant={statusConfig.variant} className=\"text-xs\">\n                                  {statusConfig.label}\n                                </Badge>\n                              </div>\n                            </div>\n                            <div className=\"flex items-center gap-1\">\n                              <Button size=\"icon\" variant=\"ghost\" onClick={() => onView(event)}>\n                                <Eye className=\"h-4 w-4\" />\n                              </Button>\n                              <Button size=\"icon\" variant=\"ghost\" onClick={() => onEdit(event)}>\n                                <Pencil className=\"h-4 w-4\" />\n                              </Button>\n                            </div>\n                          </div>\n\n                          {/* Event Details */}\n                          {event.description && (\n                            <p className=\"text-sm text-muted-foreground line-clamp-2\">\n                              {event.description}\n                            </p>\n                          )}\n\n                          <div className=\"flex flex-wrap gap-md text-sm text-muted-foreground\">\n                            {event.location && (\n                              <span className=\"flex items-center gap-1\">\n                                <MapPin className=\"h-3 w-3\" />\n                                {event.location}\n                              </span>\n                            )}\n                            {event.capacity && (\n                              <span className=\"flex items-center gap-1\">\n                                <Users className=\"h-3 w-3\" />\n                                {event.capacity} capacity\n                              </span>\n                            )}\n                            {event.project && (\n                              <span>Project: {event.project.name}</span>\n                            )}\n                          </div>\n\n                          {/* Tags */}\n                          {event.tags.length > 0 && (\n                            <div className=\"flex flex-wrap gap-1\">\n                              {event.tags.map((tag) => (\n                                <Badge key={tag} variant=\"outline\" className=\"text-xs\">\n                                  {tag}\n                                </Badge>\n                              ))}\n                            </div>\n                          )}\n\n                          {/* Resources & Staffing */}\n                          {(event.resources.length > 0 || event.staffing.length > 0) && (\n                            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-md text-xs\">\n                              {event.resources.length > 0 && (\n                                <div>\n                                  <div className=\"font-medium text-muted-foreground mb-1\">Resources</div>\n                                  <div className=\"space-y-1\">\n                                    {event.resources.slice(0, 3).map((resource, idx) => (\n                                      <div key={idx} className=\"text-muted-foreground\">\n                                        {resource.name} ({resource.quantity})\n                                      </div>\n                                    ))}\n                                    {event.resources.length > 3 && (\n                                      <div className=\"text-muted-foreground\">\n                                        +{event.resources.length - 3} more\n                                      </div>\n                                    )}\n                                  </div>\n                                </div>\n                              )}\n                              {event.staffing.length > 0 && (\n                                <div>\n                                  <div className=\"font-medium text-muted-foreground mb-1\">Staffing</div>\n                                  <div className=\"space-y-1\">\n                                    {event.staffing.slice(0, 3).map((staff, idx) => (\n                                      <div key={idx} className=\"text-muted-foreground\">\n                                        {staff.role}\n                                      </div>\n                                    ))}\n                                    {event.staffing.length > 3 && (\n                                      <div className=\"text-muted-foreground\">\n                                        +{event.staffing.length - 3} more\n                                      </div>\n                                    )}\n                                  </div>\n                                </div>\n                              )}\n                            </div>\n                          )}\n                        </div>\n                      </div>\n                    </Card>\n                  </div>\n                );\n              })}\n            </div>\n          </div>\n        </div>\n      ))}\n\n      {sortedEvents.length === 0 && (\n        <div className=\"py-xl text-center text-muted-foreground\">\n          No events found in the selected time range\n        </div>\n      )}\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ghxstship/apps/web/app/(app)/(shell)/programming/performances/PerformancesClient.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadPerformances'. Either include it or remove the dependency array.","line":97,"column":6,"nodeType":"ArrayExpression","endLine":97,"endColumn":13,"suggestions":[{"desc":"Update the dependencies array to be: [loadPerformances, orgId]","fix":{"range":[2391,2398],"text":"[loadPerformances, orgId]"}}]},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'DataViewProvider' is not defined.","line":278,"column":8,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":278,"endColumn":24},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'StateManagerProvider' is not defined.","line":279,"column":10,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":279,"endColumn":30},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Button' is not defined.","line":285,"column":18,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":285,"endColumn":24},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'ViewSwitcher' is not defined.","line":291,"column":18,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":291,"endColumn":30},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'DataActions' is not defined.","line":292,"column":18,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":292,"endColumn":29},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Card' is not defined.","line":298,"column":16,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":298,"endColumn":20},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Card' is not defined.","line":312,"column":16,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":312,"endColumn":20},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Card' is not defined.","line":326,"column":16,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":326,"endColumn":20},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Card' is not defined.","line":340,"column":16,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":340,"endColumn":20},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'DataGrid' is not defined.","line":356,"column":14,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":356,"endColumn":22},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'KanbanBoard' is not defined.","line":358,"column":14,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":358,"endColumn":25},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'CalendarView' is not defined.","line":371,"column":14,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":371,"endColumn":26},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'ListView' is not defined.","line":378,"column":14,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":378,"endColumn":22},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'AppDrawer' is not defined.","line":385,"column":14,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":385,"endColumn":23},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Badge' is not defined.","line":445,"column":26,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":445,"endColumn":31},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Button' is not defined.","line":490,"column":26,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":490,"endColumn":32},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Button' is not defined.","line":496,"column":26,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":496,"endColumn":32},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Button' is not defined.","line":502,"column":26,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":502,"endColumn":32}],"suppressedMessages":[],"errorCount":18,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\n\nimport { Plus, Calendar, Clock, Users, Music, Mic, Star, MapPin, FileText } from \"lucide-react\";\nimport { useEffect, useState } from 'react';\nimport { useTranslations } from 'next-intl';\nimport { createBrowserClient } from '@ghxstship/auth';\n\nexport default function PerformancesClient({ orgId }: { orgId: string }) {\n  const t = useTranslations('programming');\n  const sb = createBrowserClient();\n  \n  const [data, setData] = useState<DataRecord[]>([]);\n  const [loading, setLoading] = useState(false);\n  const [selectedRecord, setSelectedRecord] = useState<unknown>(null);\n  const [drawerOpen, setDrawerOpen] = useState(false);\n  const [drawerMode, setDrawerMode] = useState<'view' | 'edit' | 'create'>('view');\n\n  // Define field configuration for performances\n  const fields: FieldConfig[] = [\n    {\n      key: 'name',\n      label: 'Performance Name',\n      type: 'text',\n      required: true,\n      sortable: true,\n      filterable: true,\n      width: 200\n    },\n    {\n      key: 'project_name',\n      label: 'Project',\n      type: 'text',\n      sortable: true,\n      filterable: true,\n      width: 150\n    },\n    {\n      key: 'starts_at',\n      label: 'Performance Date',\n      type: 'date',\n      sortable: true,\n      filterable: true,\n      width: 180\n    },\n    {\n      key: 'duration_minutes',\n      label: 'Duration (min)',\n      type: 'number',\n      sortable: true,\n      filterable: true,\n      width: 120\n    },\n    {\n      key: 'venue',\n      label: 'Venue',\n      type: 'text',\n      sortable: true,\n      filterable: true,\n      width: 150\n    },\n    {\n      key: 'status',\n      label: 'Status',\n      type: 'select',\n      options: [\n        { value: 'planning', label: 'Planning' },\n        { value: 'rehearsal', label: 'Rehearsal' },\n        { value: 'ready', label: 'Ready' },\n        { value: 'live', label: 'Live' },\n        { value: 'completed', label: 'Completed' },\n        { value: 'cancelled', label: 'Cancelled' }\n      ],\n      sortable: true,\n      filterable: true,\n      groupable: true,\n      width: 120\n    },\n    {\n      key: 'lineup_count',\n      label: 'Performers',\n      type: 'number',\n      sortable: true,\n      width: 100\n    },\n    {\n      key: 'technical_requirements',\n      label: 'Tech Requirements',\n      type: 'text',\n      filterable: true,\n      width: 180\n    }\n  ];\n\n  useEffect(() => {\n    loadPerformances();\n  }, [orgId]);\n\n  const loadPerformances = async () => {\n    if (!orgId) return;\n    \n    try {\n      setLoading(true);\n      \n      const { data: performancesData, error } = await sb\n        .from('events')\n        .select(`\n          *,\n          projects!inner(\n            name,\n            organization_id\n          ),\n          lineups(\n            id,\n            performer,\n            stage,\n            start_time,\n            end_time\n          ),\n          riders(\n            id,\n            kind,\n            details\n          ),\n          call_sheets(\n            id,\n            call_date,\n            details\n          )\n        `)\n        .eq('kind', 'performance')\n        .eq('projects.organization_id', orgId)\n        .order('starts_at', { ascending: false });\n      \n      if (error) throw error;\n      \n      // Transform data to include computed fields\n      const transformedData = (performancesData || []).map(performance => {\n        const duration = performance.ends_at && performance.starts_at \n          ? Math.round((new Date(performance.ends_at).getTime() - new Date(performance.starts_at).getTime()) / (1000 * 60))\n          : null;\n          \n        return {\n          ...performance,\n          project_name: performance.projects?.name || 'Unknown Project',\n          status: computePerformanceStatus(performance),\n          duration_minutes: duration,\n          lineup_count: performance.lineups?.length || 0,\n          riders_count: performance.riders?.length || 0,\n          call_sheets_count: performance.call_sheets?.length || 0,\n          venue: performance.location || 'TBD',\n          technical_requirements: performance.riders?.find((r: unknown) => r.kind === 'technical')?.details?.summary || 'None specified'\n        };\n      });\n      \n      setData(transformedData);\n    } catch (error) {\n      console.error('Error loading performances:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const computePerformanceStatus = (performance: unknown) => {\n    const now = new Date();\n    const startDate = performance.starts_at ? new Date(performance.starts_at) : null;\n    const endDate = performance.ends_at ? new Date(performance.ends_at) : null;\n\n    if (!startDate) return 'planning';\n    \n    // Check if performance is happening now\n    if (startDate <= now && (!endDate || endDate >= now)) return 'live';\n    \n    // Check if performance is completed\n    if (endDate && endDate < now) return 'completed';\n    \n    // Check if performance is soon (within 2 hours)\n    const twoHoursFromNow = new Date(now.getTime() + 2 * 60 * 60 * 1000);\n    if (startDate <= twoHoursFromNow && startDate > now) return 'ready';\n    \n    // Check if we have lineups (indicates rehearsal stage)\n    if (performance.lineups && performance.lineups.length > 0) return 'rehearsal';\n    \n    return 'planning';\n  };\n\n  const handleCreatePerformance = () => {\n    setSelectedRecord(null);\n    setDrawerMode('create');\n    setDrawerOpen(true);\n  };\n\n  const handleEditPerformance = (performance: unknown) => {\n    setSelectedRecord(performance);\n    setDrawerMode('edit');\n    setDrawerOpen(true);\n  };\n\n  const handleViewPerformance = (performance: unknown) => {\n    setSelectedRecord(performance);\n    setDrawerMode('view');\n    setDrawerOpen(true);\n  };\n\n  const handleSavePerformance = async (performanceData: unknown) => {\n    try {\n      const eventData = {\n        ...performanceData,\n        kind: 'performance'\n      };\n      \n      if (drawerMode === 'create') {\n        const { error } = await sb.from('events').insert(eventData);\n        if (error) throw error;\n      } else if (drawerMode === 'edit') {\n        const { error } = await sb\n          .from('events')\n          .update(eventData)\n          .eq('id', selectedRecord.id);\n        if (error) throw error;\n      }\n      \n      await loadPerformances();\n      setDrawerOpen(false);\n    } catch (error) {\n      console.error('Error saving performance:', error);\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'planning':\n        return 'color-muted bg-secondary/50';\n      case 'rehearsal':\n        return 'color-warning bg-warning/10';\n      case 'ready':\n        return 'color-accent bg-accent/10';\n      case 'live':\n        return 'color-success bg-success/10';\n      case 'completed':\n        return 'color-secondary bg-secondary/10';\n      case 'cancelled':\n        return 'color-destructive bg-destructive/10';\n      default:\n        return 'color-muted bg-secondary/50';\n    }\n  };\n\n  // Configure DataView\n  const config: DataViewConfig = {\n    id: 'performances-management',\n    name: 'Performances Management',\n    viewType: 'grid',\n    defaultView: 'grid',\n    fields,\n    data,\n    \n    onSearch: (query: string) => {\n      console.log('Search performances:', query);\n    },\n    onFilter: (filters: unknown[]) => {\n      console.log('Filter performances:', filters);\n    },\n    onSort: (sorts: unknown[]) => {\n      console.log('Sort performances:', sorts);\n    },\n    onRefresh: loadPerformances,\n    onExport: (data: unknown[], format: string) => {\n      console.log('Export performances:', format, data);\n    },\n    onImport: (data: unknown[]) => {\n      console.log('Import performances:', data);\n    },\n  };\n\n  return (\n    <div className=\"stack-md\">\n      <DataViewProvider config={config}>\n        <StateManagerProvider>\n          <div className=\"stack-md\">\n            {/* Header Actions */}\n            <div className=\"flex items-center justify-between mb-md\">\n              <div className=\"flex items-center gap-md\">\n                <h2 className=\"text-body text-heading-4\">Performance Management</h2>\n                <Button>\n                  <Plus className=\"h-4 w-4 mr-sm\" />\n                  Create Performance\n                </Button>\n              </div>\n              <div className=\"flex items-center gap-sm\">\n                <ViewSwitcher />\n                <DataActions />\n              </div>\n            </div>\n\n            {/* Performance Stats */}\n            <div className=\"grid grid-cols-1 md:grid-cols-4 gap-md mb-lg\">\n              <Card className=\"p-md\">\n                <div className=\"flex items-center gap-sm\">\n                  <div className=\"p-sm bg-accent/10 rounded-lg\">\n                    <Calendar className=\"h-5 w-5 color-accent\" />\n                  </div>\n                  <div>\n                    <div className=\"text-heading-3 text-heading-3\">\n                      {data.filter(p => p.status === 'ready' || p.status === 'live').length}\n                    </div>\n                    <div className=\"text-body-sm color-muted\">Upcoming</div>\n                  </div>\n                </div>\n              </Card>\n              \n              <Card className=\"p-md\">\n                <div className=\"flex items-center gap-sm\">\n                  <div className=\"p-sm bg-success/10 rounded-lg\">\n                    <Music className=\"h-5 w-5 color-success\" />\n                  </div>\n                  <div>\n                    <div className=\"text-heading-3 text-heading-3\">\n                      {data.filter(p => p.status === 'live').length}\n                    </div>\n                    <div className=\"text-body-sm color-muted\">Live Now</div>\n                  </div>\n                </div>\n              </Card>\n              \n              <Card className=\"p-md\">\n                <div className=\"flex items-center gap-sm\">\n                  <div className=\"p-sm bg-secondary/10 rounded-lg\">\n                    <Users className=\"h-5 w-5 color-secondary\" />\n                  </div>\n                  <div>\n                    <div className=\"text-heading-3 text-heading-3\">\n                      {data.reduce((sum, p) => sum + (p.lineup_count || 0), 0)}\n                    </div>\n                    <div className=\"text-body-sm color-muted\">Total Performers</div>\n                  </div>\n                </div>\n              </Card>\n              \n              <Card className=\"p-md\">\n                <div className=\"flex items-center gap-sm\">\n                  <div className=\"p-sm bg-warning/10 rounded-lg\">\n                    <Star className=\"h-5 w-5 color-warning\" />\n                  </div>\n                  <div>\n                    <div className=\"text-heading-3 text-heading-3\">\n                      {data.filter(p => p.status === 'completed').length}\n                    </div>\n                    <div className=\"text-body-sm color-muted\">Completed</div>\n                  </div>\n                </div>\n              </Card>\n            </div>\n\n            {/* Data Views */}\n            <DataGrid />\n            \n            <KanbanBoard \n              columns={[\n                { id: 'planning', title: 'Planning' },\n                { id: 'rehearsal', title: 'Rehearsal' },\n                { id: 'ready', title: 'Ready' },\n                { id: 'live', title: 'Live' },\n                { id: 'completed', title: 'Completed' }\n              ]}\n              statusField=\"status\"\n              titleField=\"name\"\n              onCardClick={handleViewPerformance}\n            />\n            \n            <CalendarView \n              startDateField=\"starts_at\"\n              endDateField=\"ends_at\"\n              titleField=\"name\"\n              \n            />\n            \n            <ListView \n              titleField=\"name\"\n              subtitleField=\"project_name\"\n              onItemClick={handleViewPerformance}\n            />\n            \n            {/* Performance Details Drawer */}\n            <AppDrawer\n              open={drawerOpen}\n              onClose={() => {\n                setDrawerOpen(false);\n                setSelectedRecord(null);\n              }}\n              title={\n                drawerMode === 'create' \n                  ? 'Create Performance' \n                  : selectedRecord?.name || 'Performance Details'\n              }\n              record={selectedRecord || null}\n              fields={fields}\n              mode={drawerMode}\n              tabs={[{\n                key: 'content',\n                label: 'Details',\n                content: (\n                  selectedRecord ? (\n                    <div className=\"stack-lg mt-lg\">\n                      {/* Performance Info */}\n                      <div className=\"grid grid-cols-2 gap-md\">\n                        <div className=\"flex items-center gap-sm text-body-sm\">\n                          <Calendar className=\"h-4 w-4 color-muted\" />\n                          <span className=\"form-label\">Date:</span>\n                          <span>\n                            {selectedRecord.starts_at \n                              ? new Date(selectedRecord.starts_at).toLocaleDateString()\n                              : 'Not scheduled'\n                            }\n                          </span>\n                        </div>\n                        <div className=\"flex items-center gap-sm text-body-sm\">\n                          <Clock className=\"h-4 w-4 color-muted\" />\n                          <span className=\"form-label\">Time:</span>\n                          <span>\n                            {selectedRecord.starts_at \n                              ? new Date(selectedRecord.starts_at).toLocaleTimeString([], { \n                                  hour: '2-digit', \n                                  minute: '2-digit' \n                                })\n                              : 'TBD'\n                            }\n                          </span>\n                        </div>\n                        <div className=\"flex items-center gap-sm text-body-sm\">\n                          <MapPin className=\"h-4 w-4 color-muted\" />\n                          <span className=\"form-label\">Venue:</span>\n                          <span>{selectedRecord.venue || 'TBD'}</span>\n                        </div>\n                        <div className=\"flex items-center gap-sm text-body-sm\">\n                          <Clock className=\"h-4 w-4 color-muted\" />\n                          <span className=\"form-label\">Duration:</span>\n                          <span>{selectedRecord.duration_minutes ? `${selectedRecord.duration_minutes} min` : 'TBD'}</span>\n                        </div>\n                      </div>\n\n                      {/* Status Badge */}\n                      <div className=\"flex items-center gap-sm\">\n                        <span className=\"form-label text-body-sm\">Status:</span>\n                        <Badge className={getStatusColor(selectedRecord.status)}>\n                          {selectedRecord.status?.replace('_', ' ') || 'Unknown'}\n                        </Badge>\n                      </div>\n                      \n                      {/* Performance Metrics */}\n                      <div className=\"grid grid-cols-3 gap-md pt-md border-t\">\n                        <div className=\"text-center\">\n                          <div className=\"text-heading-3 text-heading-3 color-accent\">{selectedRecord.lineup_count || 0}</div>\n                          <div className=\"text-body-sm color-muted flex items-center justify-center gap-xs\">\n                            <Users className=\"h-3 w-3\" />\n                            Performers\n                          </div>\n                        </div>\n                        <div className=\"text-center\">\n                          <div className=\"text-heading-3 text-heading-3 color-success\">{selectedRecord.riders_count || 0}</div>\n                          <div className=\"text-body-sm color-muted flex items-center justify-center gap-xs\">\n                            <FileText className=\"h-3 w-3\" />\n                            Riders\n                          </div>\n                        </div>\n                        <div className=\"text-center\">\n                          <div className=\"text-heading-3 text-heading-3 color-secondary\">{selectedRecord.call_sheets_count || 0}</div>\n                          <div className=\"text-body-sm color-muted flex items-center justify-center gap-xs\">\n                            <Calendar className=\"h-3 w-3\" />\n                            Call Sheets\n                          </div>\n                        </div>\n                      </div>\n\n                      {/* Technical Requirements */}\n                      {selectedRecord.technical_requirements && selectedRecord.technical_requirements !== 'None specified' && (\n                        <div className=\"pt-md border-t\">\n                          <h4 className=\"form-label text-body-sm mb-sm flex items-center gap-sm\">\n                            <Mic className=\"h-4 w-4\" />\n                            Technical Requirements\n                          </h4>\n                          <p className=\"text-body-sm color-muted bg-secondary/50 p-sm rounded-lg\">\n                            {selectedRecord.technical_requirements}\n                          </p>\n                        </div>\n                      )}\n\n                      {/* Quick Actions */}\n                      <div className=\"flex gap-sm pt-md border-t\">\n                        <Button asChild>\n                          <a href={`/programming/lineups?event_id=${selectedRecord.id}`}>\n                            <Users className=\"h-4 w-4 mr-sm\" />\n                            Manage Lineup\n                          </a>\n                        </Button>\n                        <Button asChild>\n                          <a href={`/programming/riders?event_id=${selectedRecord.id}`}>\n                            <FileText className=\"h-4 w-4 mr-sm\" />\n                            Tech Riders\n                          </a>\n                        </Button>\n                        <Button asChild>\n                          <a href={`/programming/call-sheets?event_id=${selectedRecord.id}`}>\n                            <Calendar className=\"h-4 w-4 mr-sm\" />\n                            Call Sheets\n                          </a>\n                        </Button>\n                      </div>\n                    </div>\n                  ) : <div />\n                )\n              }]}\n            />\n          </div>\n        </StateManagerProvider>\n      </DataViewProvider>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ghxstship/apps/web/app/(app)/(shell)/programming/spaces/ProgrammingSpacesClient.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchSpaces'. Either include it or remove the dependency array.","line":114,"column":6,"nodeType":"ArrayExpression","endLine":114,"endColumn":23,"suggestions":[{"desc":"Update the dependencies array to be: [supabase, orgId, fetchSpaces]","fix":{"range":[3437,3454],"text":"[supabase, orgId, fetchSpaces]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { Plus, Search, Filter, Download, Upload, MoreHorizontal, MapPin, Users, Square, Home, Grid3X3, List, BarChart3, Clock } from \"lucide-react\";\nimport { useCallback, useEffect, useMemo, useState } from 'react';\nimport { createBrowserClient } from '@ghxstship/auth';\nimport {\n  Badge,\n  Button,\n  Card,\n  Input,\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n  Tabs,\n  TabsContent,\n  TabsList,\n  TabsTrigger,\n} from '@ghxstship/ui';\n\nimport type {\n  ProgrammingSpace,\n  SpaceFilters,\n  SpaceSort,\n  ViewType,\n  SpaceKind,\n  SpaceStatus,\n  SpaceAccessLevel,\n  SpaceProject,\n} from './types';\n\n// Import view components\nimport ProgrammingSpacesListView from './views/ProgrammingSpacesListView';\nimport ProgrammingSpacesGridView from './views/ProgrammingSpacesGridView';\nimport ProgrammingSpacesTimelineView from './views/ProgrammingSpacesTimelineView';\nimport ProgrammingSpacesAnalyticsView from './views/ProgrammingSpacesAnalyticsView';\n\n// Import drawer components\nimport CreateProgrammingSpaceDrawer from './drawers/CreateProgrammingSpaceDrawer';\nimport EditProgrammingSpaceDrawer from './drawers/EditProgrammingSpaceDrawer';\nimport ViewProgrammingSpaceDrawer from './drawers/ViewProgrammingSpaceDrawer';\n\ninterface User {\n  id: string;\n  email: string;\n  full_name?: string | null;\n  avatar_url?: string | null;\n}\n\ninterface ProgrammingSpacesClientProps {\n  orgId: string;\n  currentUserId: string;\n  initialSpaces: ProgrammingSpace[];\n  projects: SpaceProject[];\n  users: User[];\n}\n\nexport default function ProgrammingSpacesClient({\n  orgId,\n  currentUserId,\n  initialSpaces,\n  projects,\n  users,\n}: ProgrammingSpacesClientProps) {\n  const supabase = useMemo(() => createBrowserClient(), []);\n\n  // State management\n  const [spaces, setSpaces] = useState<ProgrammingSpace[]>(initialSpaces);\n  const [loading, setLoading] = useState(false);\n  const [selectedSpaces, setSelectedSpaces] = useState<string[]>([]);\n  const [currentView, setCurrentView] = useState<ViewType>('list');\n  const [searchQuery, setSearchQuery] = useState('');\n  const [filters, setFilters] = useState<SpaceFilters>({});\n  const [sort, setSort] = useState<SpaceSort>({ field: 'name', direction: 'asc' });\n\n  // Drawer state\n  const [createDrawerOpen, setCreateDrawerOpen] = useState(false);\n  const [editDrawerOpen, setEditDrawerOpen] = useState(false);\n  const [viewDrawerOpen, setViewDrawerOpen] = useState(false);\n  const [selectedSpace, setSelectedSpace] = useState<ProgrammingSpace | null>(null);\n\n  // Real-time subscription\n  useEffect(() => {\n    const channel = supabase\n      .channel(`programming_spaces_${orgId}`)\n      .on(\n        'postgres_changes',\n        {\n          event: '*',\n          schema: 'public',\n          table: 'programming_spaces',\n          filter: `organization_id=eq.${orgId}`,\n        },\n        (payload) => {\n          if (payload.eventType === 'INSERT') {\n            fetchSpaces();\n          } else if (payload.eventType === 'UPDATE') {\n            setSpaces((prev) =>\n              prev.map((space) =>\n                space.id === payload.new.id ? { ...space, ...payload.new } : space\n              )\n            );\n          } else if (payload.eventType === 'DELETE') {\n            setSpaces((prev) => prev.filter((space) => space.id !== payload.old.id));\n          }\n        }\n      )\n      .subscribe();\n\n    return () => {\n      supabase.removeChannel(channel);\n    };\n  }, [supabase, orgId]);\n\n  // Fetch spaces with filters\n  const fetchSpaces = useCallback(async () => {\n    try {\n      setLoading(true);\n      const params = new URLSearchParams();\n\n      if (filters.project_id) params.append('project_id', filters.project_id);\n      if (filters.kind) params.append('kind', filters.kind);\n      if (filters.status) params.append('status', filters.status);\n      if (filters.access_level) params.append('access_level', filters.access_level);\n      if (filters.building) params.append('building', filters.building);\n      if (filters.floor) params.append('floor', filters.floor);\n      if (searchQuery) params.append('search', searchQuery);\n      if (filters.min_capacity) params.append('min_capacity', filters.min_capacity.toString());\n      if (filters.max_capacity) params.append('max_capacity', filters.max_capacity.toString());\n      if (filters.is_bookable !== undefined) params.append('is_bookable', filters.is_bookable.toString());\n\n      const response = await fetch(`/api/v1/programming/spaces?${params}`);\n      if (!response.ok) throw new Error('Failed to fetch spaces');\n\n      const data = await response.json();\n      setSpaces(data);\n    } catch (error) {\n      console.error('Error fetching spaces:', error);\n    } finally {\n      setLoading(false);\n    }\n  }, [filters, searchQuery]);\n\n  // Trigger fetch when filters change\n  useEffect(() => {\n    fetchSpaces();\n  }, [fetchSpaces]);\n\n  // Filter and sort spaces\n  const filteredAndSortedSpaces = useMemo(() => {\n    let filtered = [...spaces];\n\n    // Apply local search if no server search\n    if (searchQuery && !filters.search) {\n      const query = searchQuery.toLowerCase();\n      filtered = filtered.filter(\n        (space) =>\n          space.name?.toLowerCase().includes(query) ||\n          space.description?.toLowerCase().includes(query) ||\n          space.location?.toLowerCase().includes(query) ||\n          space.building?.toLowerCase().includes(query)\n      );\n    }\n\n    // Apply sorting\n    filtered.sort((a, b) => {\n      const aValue = a[sort.field];\n      const bValue = b[sort.field];\n\n      if (aValue === null || aValue === undefined) return 1;\n      if (bValue === null || bValue === undefined) return -1;\n\n      if (typeof aValue === 'string' && typeof bValue === 'string') {\n        return sort.direction === 'asc'\n          ? aValue.localeCompare(bValue)\n          : bValue.localeCompare(aValue);\n      }\n\n      if (aValue < bValue) return sort.direction === 'asc' ? -1 : 1;\n      if (aValue > bValue) return sort.direction === 'asc' ? 1 : -1;\n      return 0;\n    });\n\n    return filtered;\n  }, [spaces, searchQuery, filters.search, sort]);\n\n  // Get unique buildings and floors for filters\n  const buildings = useMemo(() => {\n    const uniqueBuildings = [...new Set(spaces.map(s => s.building).filter(Boolean))];\n    return uniqueBuildings.sort();\n  }, [spaces]);\n\n  const floors = useMemo(() => {\n    const uniqueFloors = [...new Set(spaces.map(s => s.floor).filter(Boolean))];\n    return uniqueFloors.sort();\n  }, [spaces]);\n\n  // Handlers\n  const handleCreateSpace = () => {\n    setCreateDrawerOpen(true);\n  };\n\n  const handleEditSpace = (space: ProgrammingSpace) => {\n    setSelectedSpace(space);\n    setEditDrawerOpen(true);\n  };\n\n  const handleViewSpace = (space: ProgrammingSpace) => {\n    setSelectedSpace(space);\n    setViewDrawerOpen(true);\n  };\n\n  const handleDeleteSpace = async (spaceId: string) => {\n    try {\n      const response = await fetch(`/api/v1/programming/spaces/${spaceId}`, {\n        method: 'DELETE',\n      });\n\n      if (!response.ok) throw new Error('Failed to delete space');\n\n      setSpaces((prev) => prev.filter((space) => space.id !== spaceId));\n    } catch (error) {\n      console.error('Error deleting space:', error);\n    }\n  };\n\n  const handleBulkAction = async (action: string, spaceIds: string[]) => {\n    try {\n      setLoading(true);\n      \n      switch (action) {\n        case 'delete':\n          await Promise.all(\n            spaceIds.map((id) =>\n              fetch(`/api/v1/programming/spaces/${id}`, { method: 'DELETE' })\n            )\n          );\n          setSpaces((prev) => prev.filter((space) => !spaceIds.includes(space.id)));\n          break;\n        case 'available':\n          await Promise.all(\n            spaceIds.map((id) =>\n              fetch(`/api/v1/programming/spaces/${id}`, {\n                method: 'PATCH',\n                headers: { 'Content-Type': 'application/json' },\n                body: JSON.stringify({ status: 'available' }),\n              })\n            )\n          );\n          fetchSpaces();\n          break;\n        case 'maintenance':\n          await Promise.all(\n            spaceIds.map((id) =>\n              fetch(`/api/v1/programming/spaces/${id}`, {\n                method: 'PATCH',\n                headers: { 'Content-Type': 'application/json' },\n                body: JSON.stringify({ status: 'maintenance' }),\n              })\n            )\n          );\n          fetchSpaces();\n          break;\n      }\n      \n      setSelectedSpaces([]);\n    } catch (error) {\n      console.error('Error performing bulk action:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleSuccess = () => {\n    fetchSpaces();\n    setCreateDrawerOpen(false);\n    setEditDrawerOpen(false);\n    setSelectedSpace(null);\n  };\n\n  // Export functionality\n  const handleExport = () => {\n    const csvContent = [\n      ['Name', 'Kind', 'Status', 'Access Level', 'Capacity', 'Building', 'Floor', 'Location'].join(','),\n      ...filteredAndSortedSpaces.map((space) =>\n        [\n          space.name,\n          space.kind,\n          space.status,\n          space.access_level,\n          space.capacity || '',\n          space.building || '',\n          space.floor || '',\n          space.location || '',\n        ].join(',')\n      ),\n    ].join('\\n');\n\n    const blob = new Blob([csvContent], { type: 'text/csv' });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = `programming-spaces-${new Date().toISOString().split('T')[0]}.csv`;\n    a.click();\n    URL.revokeObjectURL(url);\n  };\n\n  // View icons\n  const viewIcons = {\n    list: List,\n    grid: Grid3X3,\n    timeline: Clock,\n    analytics: BarChart3,\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-2xl font-bold\">Programming Spaces</h1>\n          <p className=\"text-muted-foreground\">\n            Manage venues, rooms, and facilities for events and productions\n          </p>\n        </div>\n        <Button onClick={handleCreateSpace}>\n          <Plus className=\"mr-2 h-4 w-4\" />\n          Create Space\n        </Button>\n      </div>\n\n      {/* Filters and Search */}\n      <Card className=\"p-4\">\n        <div className=\"flex flex-col gap-4 md:flex-row md:items-center md:justify-between\">\n          <div className=\"flex flex-1 items-center gap-4\">\n            <div className=\"relative flex-1 max-w-sm\">\n              <Search className=\"absolute left-3 top-1/2 h-4 w-4 -translate-y-1/2 text-muted-foreground\" />\n              <Input\n                placeholder=\"Search spaces...\"\n                value={searchQuery}\n                onChange={(e) => setSearchQuery(e.target.value)}\n                className=\"pl-9\"\n              />\n            </div>\n\n            <Select\n              value={filters.kind || ''}\n              onValueChange={(value) =>\n                setFilters((prev) => ({ ...prev, kind: value as SpaceKind || undefined }))\n              }\n            >\n              <SelectTrigger className=\"w-40\">\n                <SelectValue placeholder=\"All Types\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"\">All Types</SelectItem>\n                <SelectItem value=\"room\">Room</SelectItem>\n                <SelectItem value=\"green_room\">Green Room</SelectItem>\n                <SelectItem value=\"dressing_room\">Dressing Room</SelectItem>\n                <SelectItem value=\"meeting_room\">Meeting Room</SelectItem>\n                <SelectItem value=\"classroom\">Classroom</SelectItem>\n                <SelectItem value=\"studio\">Studio</SelectItem>\n                <SelectItem value=\"rehearsal_room\">Rehearsal Room</SelectItem>\n                <SelectItem value=\"storage\">Storage</SelectItem>\n                <SelectItem value=\"office\">Office</SelectItem>\n                <SelectItem value=\"lounge\">Lounge</SelectItem>\n                <SelectItem value=\"other\">Other</SelectItem>\n              </SelectContent>\n            </Select>\n\n            <Select\n              value={filters.status || ''}\n              onValueChange={(value) =>\n                setFilters((prev) => ({ ...prev, status: value as SpaceStatus || undefined }))\n              }\n            >\n              <SelectTrigger className=\"w-40\">\n                <SelectValue placeholder=\"All Status\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"\">All Status</SelectItem>\n                <SelectItem value=\"available\">Available</SelectItem>\n                <SelectItem value=\"occupied\">Occupied</SelectItem>\n                <SelectItem value=\"reserved\">Reserved</SelectItem>\n                <SelectItem value=\"maintenance\">Maintenance</SelectItem>\n                <SelectItem value=\"cleaning\">Cleaning</SelectItem>\n                <SelectItem value=\"out_of_service\">Out of Service</SelectItem>\n              </SelectContent>\n            </Select>\n\n            {buildings.length > 0 && (\n              <Select\n                value={filters.building || ''}\n                onValueChange={(value) =>\n                  setFilters((prev) => ({ ...prev, building: value || undefined }))\n                }\n              >\n                <SelectTrigger className=\"w-40\">\n                  <SelectValue placeholder=\"All Buildings\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"\">All Buildings</SelectItem>\n                  {buildings.map((building) => (\n                    <SelectItem key={building} value={building}>\n                      {building}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            )}\n\n            <Select\n              value={filters.project_id || ''}\n              onValueChange={(value) =>\n                setFilters((prev) => ({ ...prev, project_id: value || undefined }))\n              }\n            >\n              <SelectTrigger className=\"w-48\">\n                <SelectValue placeholder=\"All Projects\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"\">All Projects</SelectItem>\n                {projects.map((project) => (\n                  <SelectItem key={project.id} value={project.id}>\n                    {project.name}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n\n          <div className=\"flex items-center gap-2\">\n            <Button variant=\"outline\" size=\"sm\" onClick={handleExport}>\n              <Download className=\"mr-2 h-4 w-4\" />\n              Export\n            </Button>\n\n            {/* View Switcher */}\n            <div className=\"flex items-center rounded-lg border p-1\">\n              {(['list', 'grid', 'timeline', 'analytics'] as ViewType[]).map((view) => {\n                const Icon = viewIcons[view];\n                return (\n                  <Button\n                    key={view}\n                    variant={currentView === view ? 'default' : 'ghost'}\n                    size=\"sm\"\n                    onClick={() => setCurrentView(view)}\n                    className=\"h-8 w-8 p-0\"\n                  >\n                    <Icon className=\"h-4 w-4\" />\n                  </Button>\n                );\n              })}\n            </div>\n          </div>\n        </div>\n\n        {/* Bulk Actions */}\n        {selectedSpaces.length > 0 && (\n          <div className=\"mt-4 flex items-center gap-2 rounded-lg border bg-muted/50 p-3\">\n            <span className=\"text-sm text-muted-foreground\">\n              {selectedSpaces.length} space(s) selected\n            </span>\n            <div className=\"flex gap-2\">\n              <Button\n                size=\"sm\"\n                variant=\"outline\"\n                onClick={() => handleBulkAction('available', selectedSpaces)}\n              >\n                Mark Available\n              </Button>\n              <Button\n                size=\"sm\"\n                variant=\"outline\"\n                onClick={() => handleBulkAction('maintenance', selectedSpaces)}\n              >\n                Mark Maintenance\n              </Button>\n              <Button\n                size=\"sm\"\n                variant=\"destructive\"\n                onClick={() => handleBulkAction('delete', selectedSpaces)}\n              >\n                Delete\n              </Button>\n            </div>\n          </div>\n        )}\n      </Card>\n\n      {/* Content */}\n      <div className=\"min-h-[400px]\">\n        {currentView === 'list' && (\n          <ProgrammingSpacesListView\n            spaces={filteredAndSortedSpaces}\n            loading={loading}\n            selectedSpaces={selectedSpaces}\n            onSelectionChange={setSelectedSpaces}\n            onEdit={handleEditSpace}\n            onView={handleViewSpace}\n            onDelete={handleDeleteSpace}\n            sort={sort}\n            onSortChange={setSort}\n          />\n        )}\n\n        {currentView === 'grid' && (\n          <ProgrammingSpacesGridView\n            spaces={filteredAndSortedSpaces}\n            loading={loading}\n            onEdit={handleEditSpace}\n            onView={handleViewSpace}\n            onDelete={handleDeleteSpace}\n          />\n        )}\n\n        {currentView === 'timeline' && (\n          <ProgrammingSpacesTimelineView\n            spaces={filteredAndSortedSpaces}\n            loading={loading}\n            onEdit={handleEditSpace}\n            onView={handleViewSpace}\n          />\n        )}\n\n        {currentView === 'analytics' && (\n          <ProgrammingSpacesAnalyticsView\n            spaces={filteredAndSortedSpaces}\n            loading={loading}\n          />\n        )}\n      </div>\n\n      {/* Drawers */}\n      <CreateProgrammingSpaceDrawer\n        open={createDrawerOpen}\n        onOpenChange={setCreateDrawerOpen}\n        orgId={orgId}\n        currentUserId={currentUserId}\n        projects={projects}\n        onSuccess={handleSuccess}\n      />\n\n      {selectedSpace && (\n        <>\n          <EditProgrammingSpaceDrawer\n            open={editDrawerOpen}\n            onOpenChange={setEditDrawerOpen}\n            space={selectedSpace}\n            orgId={orgId}\n            currentUserId={currentUserId}\n            projects={projects}\n            onSuccess={handleSuccess}\n          />\n\n          <ViewProgrammingSpaceDrawer\n            open={viewDrawerOpen}\n            onOpenChange={setViewDrawerOpen}\n            space={selectedSpace}\n            users={users}\n            onEdit={() => {\n              setViewDrawerOpen(false);\n              setEditDrawerOpen(true);\n            }}\n            onDelete={() => {\n              handleDeleteSpace(selectedSpace.id);\n              setViewDrawerOpen(false);\n              setSelectedSpace(null);\n            }}\n          />\n        </>\n      )}\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ghxstship/apps/web/app/(app)/(shell)/programming/spaces/drawers/ViewProgrammingSpaceDrawer.tsx","messages":[{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":173,"column":82,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[6114,6118],"text":"&apos; × "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[6114,6118],"text":"&lsquo; × "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[6114,6118],"text":"&#39; × "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[6114,6118],"text":"&rsquo; × "},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":173,"column":99,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[6131,6149],"text":"&apos;\n                "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[6131,6149],"text":"&lsquo;\n                "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[6131,6149],"text":"&#39;\n                "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[6131,6149],"text":"&rsquo;\n                "},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":178,"column":78,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[6305,6323],"text":"&apos;\n                "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[6305,6323],"text":"&lsquo;\n                "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[6305,6323],"text":"&#39;\n                "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[6305,6323],"text":"&rsquo;\n                "},"desc":"Replace with `&rsquo;`."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { Edit, Trash2, MapPin, Users, Square, Calendar, Clock, Shield } from \"lucide-react\";\nimport {\n  Badge,\n  Button,\n  Card,\n  CardContent,\n  CardHeader,\n  CardTitle,\n} from '@ghxstship/ui';\nimport AppDrawer, { type DrawerAction } from '@/app/_components/shared/AppDrawer';\n\nimport type { ProgrammingSpace } from '../types';\n\ntype User = {\n  id: string;\n  email: string;\n  full_name?: string | null;\n  avatar_url?: string | null;\n};\n\ninterface ViewProgrammingSpaceDrawerProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  space: ProgrammingSpace;\n  users: User[];\n  onEdit: () => void;\n  onDelete: () => void;\n}\n\nconst STATUS_BADGE_CONFIG = {\n  available: { label: 'Available', variant: 'success' as const },\n  occupied: { label: 'Occupied', variant: 'destructive' as const },\n  reserved: { label: 'Reserved', variant: 'warning' as const },\n  maintenance: { label: 'Maintenance', variant: 'secondary' as const },\n  cleaning: { label: 'Cleaning', variant: 'info' as const },\n  setup: { label: 'Setup', variant: 'warning' as const },\n  breakdown: { label: 'Breakdown', variant: 'warning' as const },\n  out_of_service: { label: 'Out of Service', variant: 'destructive' as const },\n};\n\nconst ACCESS_LEVEL_BADGE_CONFIG = {\n  public: { label: 'Public', variant: 'success' as const },\n  restricted: { label: 'Restricted', variant: 'warning' as const },\n  staff_only: { label: 'Staff Only', variant: 'secondary' as const },\n  talent_only: { label: 'Talent Only', variant: 'info' as const },\n  vip: { label: 'VIP', variant: 'destructive' as const },\n  crew_only: { label: 'Crew Only', variant: 'default' as const },\n  private: { label: 'Private', variant: 'destructive' as const },\n};\n\nconst SPACE_KIND_CONFIG = {\n  room: { label: 'Room', icon: '🏠' },\n  green_room: { label: 'Green Room', icon: '🌿' },\n  dressing_room: { label: 'Dressing Room', icon: '👗' },\n  meeting_room: { label: 'Meeting Room', icon: '🤝' },\n  classroom: { label: 'Classroom', icon: '🎓' },\n  studio: { label: 'Studio', icon: '🎬' },\n  rehearsal_room: { label: 'Rehearsal Room', icon: '🎭' },\n  storage: { label: 'Storage', icon: '📦' },\n  office: { label: 'Office', icon: '💼' },\n  lounge: { label: 'Lounge', icon: '🛋️' },\n  kitchen: { label: 'Kitchen', icon: '🍳' },\n  bathroom: { label: 'Bathroom', icon: '🚿' },\n  corridor: { label: 'Corridor', icon: '🚪' },\n  lobby: { label: 'Lobby', icon: '🏛️' },\n  stage: { label: 'Stage', icon: '🎪' },\n  backstage: { label: 'Backstage', icon: '🎭' },\n  loading_dock: { label: 'Loading Dock', icon: '🚛' },\n  parking: { label: 'Parking', icon: '🅿️' },\n  outdoor: { label: 'Outdoor', icon: '🌳' },\n  other: { label: 'Other', icon: '📍' },\n};\n\nexport default function ViewProgrammingSpaceDrawer({\n  open,\n  onOpenChange,\n  space,\n  users,\n  onEdit,\n  onDelete,\n}: ViewProgrammingSpaceDrawerProps) {\n  const getUserName = (userId: string | undefined | null) => {\n    if (!userId) return 'Unknown';\n    const user = users.find((u) => u.id === userId);\n    return user?.full_name || user?.email || 'Unknown';\n  };\n\n  const kindConfig = SPACE_KIND_CONFIG[space.kind];\n  const statusConfig = STATUS_BADGE_CONFIG[space.status];\n  const accessConfig = ACCESS_LEVEL_BADGE_CONFIG[space.access_level];\n\n  const actions: DrawerAction[] = [\n    {\n      key: 'edit',\n      label: 'Edit',\n      icon: <Edit className=\"h-4 w-4\" />,\n      variant: 'outline',\n      onClick: () => onEdit(),\n    },\n    {\n      key: 'delete',\n      label: 'Delete',\n      icon: <Trash2 className=\"h-4 w-4\" />,\n      variant: 'destructive',\n      onClick: () => onDelete(),\n    },\n  ];\n\n  const content = (\n    <div className=\"space-y-6\">\n      {/* Basic Information */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <span className=\"text-2xl\">{kindConfig.icon}</span>\n            {space.name}\n          </CardTitle>\n          <div className=\"flex flex-wrap gap-2 mt-2\">\n            <Badge variant={statusConfig.variant}>{statusConfig.label}</Badge>\n            <Badge variant={accessConfig.variant}>{accessConfig.label}</Badge>\n            <Badge variant=\"outline\">{kindConfig.label}</Badge>\n          </div>\n        </CardHeader>\n        <CardContent className=\"space-y-3 text-sm text-muted-foreground\">\n          {space.description && <p>{space.description}</p>}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 text-sm\">\n            <div className=\"space-y-1\">\n              {space.location && (\n                <div className=\"flex items-center gap-2\">\n                  <MapPin className=\"h-4 w-4\" />\n                  <span>{space.location}</span>\n                </div>\n              )}\n              {space.building && (\n                <div>\n                  <span className=\"font-medium\">Building:</span> {space.building}\n                </div>\n              )}\n              {space.floor && (\n                <div>\n                  <span className=\"font-medium\">Floor:</span> {space.floor}\n                </div>\n              )}\n              {space.room_number && (\n                <div>\n                  <span className=\"font-medium\">Room:</span> {space.room_number}\n                </div>\n              )}\n            </div>\n            <div className=\"space-y-1\">\n              {space.capacity && (\n                <div className=\"flex items-center gap-2\">\n                  <Users className=\"h-4 w-4\" />\n                  <span>\n                    {space.capacity}\n                    {space.max_capacity && space.max_capacity !== space.capacity\n                      ? ` / ${space.max_capacity}`\n                      : ''}\n                    {' '}people\n                  </span>\n                </div>\n              )}\n              {space.area_sqft && (\n                <div className=\"flex items-center gap-2\">\n                  <Square className=\"h-4 w-4\" />\n                  <span>{space.area_sqft} sq ft</span>\n                </div>\n              )}\n              {space.length && space.width && (\n                <div>\n                  <span className=\"font-medium\">Dimensions:</span> {space.length}' × {space.width}'\n                </div>\n              )}\n              {space.height && (\n                <div>\n                  <span className=\"font-medium\">Height:</span> {space.height}'\n                </div>\n              )}\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Booking & Pricing */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Booking & Operations</CardTitle>\n        </CardHeader>\n        <CardContent className=\"grid grid-cols-1 md:grid-cols-2 gap-4 text-sm text-muted-foreground\">\n          <div className=\"space-y-2\">\n            <div>\n              <span className=\"font-medium\">Bookable:</span> {space.is_bookable ? 'Yes' : 'No'}\n            </div>\n            {space.hourly_rate && (\n              <div>\n                <span className=\"font-medium\">Hourly Rate:</span> ${space.hourly_rate}/hr\n              </div>\n            )}\n            {space.daily_rate && (\n              <div>\n                <span className=\"font-medium\">Daily Rate:</span> ${space.daily_rate}/day\n              </div>\n            )}\n            {space.booking_advance_days && (\n              <div>\n                <span className=\"font-medium\">Advance Booking:</span> {space.booking_advance_days} days\n              </div>\n            )}\n          </div>\n          <div className=\"space-y-2\">\n            {space.setup_time && (\n              <div>\n                <span className=\"font-medium\">Setup Time:</span> {space.setup_time} minutes\n              </div>\n            )}\n            {space.breakdown_time && (\n              <div>\n                <span className=\"font-medium\">Breakdown Time:</span> {space.breakdown_time} minutes\n              </div>\n            )}\n            {space.cleaning_time && (\n              <div>\n                <span className=\"font-medium\">Cleaning Time:</span> {space.cleaning_time} minutes\n              </div>\n            )}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Amenities */}\n      {space.amenities && Object.values(space.amenities).some(Boolean) && (\n        <Card>\n          <CardHeader>\n            <CardTitle>Amenities</CardTitle>\n          </CardHeader>\n          <CardContent className=\"flex flex-wrap gap-2\">\n            {Object.entries(space.amenities)\n              .filter(([_, value]) => Boolean(value))\n              .map(([key]) => (\n                <Badge key={key} variant=\"outline\" className=\"text-xs\">\n                  {key.replace(/_/g, ' ')}\n                </Badge>\n              ))}\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Contact Information */}\n      {(space.contact_person || space.contact_phone || space.contact_email) && (\n        <Card>\n          <CardHeader>\n            <CardTitle>Contact Information</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-2 text-sm text-muted-foreground\">\n            {space.contact_person && (\n              <div>\n                <span className=\"font-medium\">Person:</span> {space.contact_person}\n              </div>\n            )}\n            {space.contact_phone && (\n              <div>\n                <span className=\"font-medium\">Phone:</span> {space.contact_phone}\n              </div>\n            )}\n            {space.contact_email && (\n              <div>\n                <span className=\"font-medium\">Email:</span> {space.contact_email}\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Maintenance */}\n      {(space.last_maintenance || space.next_maintenance || space.maintenance_notes) && (\n        <Card>\n          <CardHeader>\n            <CardTitle>Maintenance</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-2 text-sm text-muted-foreground\">\n            {space.last_maintenance && (\n              <div className=\"flex items-center gap-2\">\n                <Clock className=\"h-4 w-4\" />\n                <span>Last maintenance: {new Date(space.last_maintenance).toLocaleDateString()}</span>\n              </div>\n            )}\n            {space.next_maintenance && (\n              <div className=\"flex items-center gap-2\">\n                <Calendar className=\"h-4 w-4\" />\n                <span>Next maintenance: {new Date(space.next_maintenance).toLocaleDateString()}</span>\n              </div>\n            )}\n            {space.maintenance_notes && <p>{space.maintenance_notes}</p>}\n          </CardContent>\n        </Card>\n      )}\n\n      {space.tags && space.tags.length > 0 && (\n        <Card>\n          <CardHeader>\n            <CardTitle>Tags</CardTitle>\n          </CardHeader>\n          <CardContent className=\"flex flex-wrap gap-2\">\n            {space.tags.map((tag) => (\n              <Badge key={tag} variant=\"outline\" className=\"text-xs\">\n                {tag}\n              </Badge>\n            ))}\n          </CardContent>\n        </Card>\n      )}\n\n      <Card>\n        <CardHeader>\n          <CardTitle>Metadata</CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-2 text-sm text-muted-foreground\">\n          <div className=\"flex justify-between\">\n            <span>Created</span>\n            <span>{new Date(space.created_at).toLocaleString()}</span>\n          </div>\n          <div className=\"flex justify-between\">\n            <span>Updated</span>\n            <span>{new Date(space.updated_at).toLocaleString()}</span>\n          </div>\n          <div className=\"flex justify-between\">\n            <span>Created by</span>\n            <span>{getUserName(space.created_by)}</span>\n          </div>\n          <div className=\"flex justify-between\">\n            <span>Updated by</span>\n            <span>{getUserName(space.updated_by)}</span>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n\n  return (\n    <AppDrawer\n      open={open}\n      onClose={() => onOpenChange(false)}\n      title={space.name}\n      mode=\"view\"\n      actions={actions}\n    >\n      {content}\n    </AppDrawer>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ghxstship/apps/web/app/(app)/(shell)/programming/spaces/views/ProgrammingSpacesListView.tsx","messages":[{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":319,"column":60,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[12290,12294],"text":"&apos; × "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[12290,12294],"text":"&lsquo; × "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[12290,12294],"text":"&#39; × "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[12290,12294],"text":"&rsquo; × "},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":319,"column":77,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[12307,12308],"text":"&apos;"},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[12307,12308],"text":"&lsquo;"},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[12307,12308],"text":"&#39;"},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[12307,12308],"text":"&rsquo;"},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":322,"column":62,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[12462,12463],"text":"&apos;"},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[12462,12463],"text":"&lsquo;"},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[12462,12463],"text":"&#39;"},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[12462,12463],"text":"&rsquo;"},"desc":"Replace with `&rsquo;`."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { MoreHorizontal, Edit, Eye, Trash2, ChevronDown, ChevronRight, MapPin, Users, Square, Wifi, Car, Shield } from \"lucide-react\";\nimport { useState } from 'react';\nimport {\n  Badge,\n  Button,\n  Card,\n  Checkbox,\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n  Collapsible,\n  CollapsibleContent,\n  CollapsibleTrigger,\n} from '@ghxstship/ui';\n\nimport type { ProgrammingSpace, SpaceSort } from '../types';\n\ninterface ProgrammingSpacesListViewProps {\n  spaces: ProgrammingSpace[];\n  loading: boolean;\n  selectedSpaces: string[];\n  onSelectionChange: (selected: string[]) => void;\n  onEdit: (space: ProgrammingSpace) => void;\n  onView: (space: ProgrammingSpace) => void;\n  onDelete: (spaceId: string) => void;\n  sort: SpaceSort;\n  onSortChange: (sort: SpaceSort) => void;\n}\n\nconst STATUS_BADGE_CONFIG = {\n  available: { label: 'Available', variant: 'success' as const },\n  occupied: { label: 'Occupied', variant: 'destructive' as const },\n  reserved: { label: 'Reserved', variant: 'warning' as const },\n  maintenance: { label: 'Maintenance', variant: 'secondary' as const },\n  cleaning: { label: 'Cleaning', variant: 'info' as const },\n  setup: { label: 'Setup', variant: 'warning' as const },\n  breakdown: { label: 'Breakdown', variant: 'warning' as const },\n  out_of_service: { label: 'Out of Service', variant: 'destructive' as const },\n};\n\nconst ACCESS_LEVEL_BADGE_CONFIG = {\n  public: { label: 'Public', variant: 'success' as const },\n  restricted: { label: 'Restricted', variant: 'warning' as const },\n  staff_only: { label: 'Staff Only', variant: 'secondary' as const },\n  talent_only: { label: 'Talent Only', variant: 'info' as const },\n  vip: { label: 'VIP', variant: 'destructive' as const },\n  crew_only: { label: 'Crew Only', variant: 'default' as const },\n  private: { label: 'Private', variant: 'destructive' as const },\n};\n\nconst SPACE_KIND_CONFIG = {\n  room: { label: 'Room', icon: '🏠' },\n  green_room: { label: 'Green Room', icon: '🌿' },\n  dressing_room: { label: 'Dressing Room', icon: '👗' },\n  meeting_room: { label: 'Meeting Room', icon: '🤝' },\n  classroom: { label: 'Classroom', icon: '🎓' },\n  studio: { label: 'Studio', icon: '🎬' },\n  rehearsal_room: { label: 'Rehearsal Room', icon: '🎭' },\n  storage: { label: 'Storage', icon: '📦' },\n  office: { label: 'Office', icon: '💼' },\n  lounge: { label: 'Lounge', icon: '🛋️' },\n  kitchen: { label: 'Kitchen', icon: '🍳' },\n  bathroom: { label: 'Bathroom', icon: '🚿' },\n  corridor: { label: 'Corridor', icon: '🚪' },\n  lobby: { label: 'Lobby', icon: '🏛️' },\n  stage: { label: 'Stage', icon: '🎪' },\n  backstage: { label: 'Backstage', icon: '🎭' },\n  loading_dock: { label: 'Loading Dock', icon: '🚛' },\n  parking: { label: 'Parking', icon: '🅿️' },\n  outdoor: { label: 'Outdoor', icon: '🌳' },\n  other: { label: 'Other', icon: '📍' },\n};\n\nexport default function ProgrammingSpacesListView({\n  spaces,\n  loading,\n  selectedSpaces,\n  onSelectionChange,\n  onEdit,\n  onView,\n  onDelete,\n  sort,\n  onSortChange,\n}: ProgrammingSpacesListViewProps) {\n  const [expandedRows, setExpandedRows] = useState<string[]>([]);\n\n  const handleSelectAll = (checked: boolean) => {\n    if (checked) {\n      onSelectionChange(spaces.map((space) => space.id));\n    } else {\n      onSelectionChange([]);\n    }\n  };\n\n  const handleSelectSpace = (spaceId: string, checked: boolean) => {\n    if (checked) {\n      onSelectionChange([...selectedSpaces, spaceId]);\n    } else {\n      onSelectionChange(selectedSpaces.filter((id) => id !== spaceId));\n    }\n  };\n\n  const toggleRowExpansion = (spaceId: string) => {\n    setExpandedRows((prev) =>\n      prev.includes(spaceId)\n        ? prev.filter((id) => id !== spaceId)\n        : [...prev, spaceId]\n    );\n  };\n\n  const handleSort = (field: keyof ProgrammingSpace) => {\n    const direction = sort.field === field && sort.direction === 'asc' ? 'desc' : 'asc';\n    onSortChange({ field, direction });\n  };\n\n  const getSortIcon = (field: keyof ProgrammingSpace) => {\n    if (sort.field !== field) return null;\n    return sort.direction === 'asc' ? '↑' : '↓';\n  };\n\n  if (loading) {\n    return (\n      <Card className=\"p-8\">\n        <div className=\"flex items-center justify-center\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\n          <span className=\"ml-2\">Loading spaces...</span>\n        </div>\n      </Card>\n    );\n  }\n\n  if (spaces.length === 0) {\n    return (\n      <Card className=\"p-8\">\n        <div className=\"text-center\">\n          <h3 className=\"text-lg font-semibold\">No spaces found</h3>\n          <p className=\"text-muted-foreground\">\n            No spaces match your current filters. Try adjusting your search criteria.\n          </p>\n        </div>\n      </Card>\n    );\n  }\n\n  return (\n    <Card>\n      <Table>\n        <TableHeader>\n          <TableRow>\n            <TableHead className=\"w-12\">\n              <Checkbox\n                checked={selectedSpaces.length === spaces.length}\n                onCheckedChange={handleSelectAll}\n                aria-label=\"Select all spaces\"\n              />\n            </TableHead>\n            <TableHead className=\"w-12\"></TableHead>\n            <TableHead \n              className=\"cursor-pointer hover:bg-muted/50\"\n              onClick={() => handleSort('name')}\n            >\n              Name {getSortIcon('name')}\n            </TableHead>\n            <TableHead>Kind</TableHead>\n            <TableHead \n              className=\"cursor-pointer hover:bg-muted/50\"\n              onClick={() => handleSort('status')}\n            >\n              Status {getSortIcon('status')}\n            </TableHead>\n            <TableHead>Access Level</TableHead>\n            <TableHead \n              className=\"cursor-pointer hover:bg-muted/50\"\n              onClick={() => handleSort('capacity')}\n            >\n              Capacity {getSortIcon('capacity')}\n            </TableHead>\n            <TableHead>Location</TableHead>\n            <TableHead className=\"w-12\"></TableHead>\n          </TableRow>\n        </TableHeader>\n        <TableBody>\n          {spaces.map((space) => {\n            const isExpanded = expandedRows.includes(space.id);\n            const isSelected = selectedSpaces.includes(space.id);\n\n            return (\n              <>\n                <TableRow key={space.id} className={isSelected ? 'bg-muted/50' : ''}>\n                  <TableCell>\n                    <Checkbox\n                      checked={isSelected}\n                      onCheckedChange={(checked) => handleSelectSpace(space.id, checked as boolean)}\n                      aria-label={`Select space ${space.name}`}\n                    />\n                  </TableCell>\n                  <TableCell>\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={() => toggleRowExpansion(space.id)}\n                      className=\"h-6 w-6 p-0\"\n                    >\n                      {isExpanded ? (\n                        <ChevronDown className=\"h-4 w-4\" />\n                      ) : (\n                        <ChevronRight className=\"h-4 w-4\" />\n                      )}\n                    </Button>\n                  </TableCell>\n                  <TableCell>\n                    <div className=\"font-medium\">{space.name}</div>\n                    {space.description && (\n                      <div className=\"text-sm text-muted-foreground line-clamp-1\">\n                        {space.description}\n                      </div>\n                    )}\n                  </TableCell>\n                  <TableCell>\n                    <div className=\"flex items-center gap-2\">\n                      <span className=\"text-lg\">{SPACE_KIND_CONFIG[space.kind]?.icon}</span>\n                      <span className=\"text-sm\">{SPACE_KIND_CONFIG[space.kind]?.label}</span>\n                    </div>\n                  </TableCell>\n                  <TableCell>\n                    <Badge variant={STATUS_BADGE_CONFIG[space.status]?.variant}>\n                      {STATUS_BADGE_CONFIG[space.status]?.label}\n                    </Badge>\n                  </TableCell>\n                  <TableCell>\n                    <Badge variant={ACCESS_LEVEL_BADGE_CONFIG[space.access_level]?.variant}>\n                      {ACCESS_LEVEL_BADGE_CONFIG[space.access_level]?.label}\n                    </Badge>\n                  </TableCell>\n                  <TableCell>\n                    {space.capacity ? (\n                      <div className=\"flex items-center gap-1\">\n                        <Users className=\"h-4 w-4 text-muted-foreground\" />\n                        <span>{space.capacity}</span>\n                        {space.max_capacity && space.max_capacity !== space.capacity && (\n                          <span className=\"text-muted-foreground\">/ {space.max_capacity}</span>\n                        )}\n                      </div>\n                    ) : (\n                      <span className=\"text-muted-foreground\">—</span>\n                    )}\n                  </TableCell>\n                  <TableCell>\n                    <div className=\"space-y-1\">\n                      {space.building && (\n                        <div className=\"text-sm font-medium\">{space.building}</div>\n                      )}\n                      {space.floor && (\n                        <div className=\"text-xs text-muted-foreground\">Floor {space.floor}</div>\n                      )}\n                      {space.room_number && (\n                        <div className=\"text-xs text-muted-foreground\">Room {space.room_number}</div>\n                      )}\n                      {space.location && (\n                        <div className=\"text-xs text-muted-foreground flex items-center gap-1\">\n                          <MapPin className=\"h-3 w-3\" />\n                          {space.location}\n                        </div>\n                      )}\n                    </div>\n                  </TableCell>\n                  <TableCell>\n                    <DropdownMenu>\n                      <DropdownMenuTrigger asChild>\n                        <Button variant=\"ghost\" size=\"sm\" className=\"h-8 w-8 p-0\">\n                          <MoreHorizontal className=\"h-4 w-4\" />\n                        </Button>\n                      </DropdownMenuTrigger>\n                      <DropdownMenuContent align=\"end\">\n                        <DropdownMenuItem onClick={() => onView(space)}>\n                          <Eye className=\"mr-2 h-4 w-4\" />\n                          View\n                        </DropdownMenuItem>\n                        <DropdownMenuItem onClick={() => onEdit(space)}>\n                          <Edit className=\"mr-2 h-4 w-4\" />\n                          Edit\n                        </DropdownMenuItem>\n                        <DropdownMenuItem\n                          onClick={() => onDelete(space.id)}\n                          className=\"text-destructive\"\n                        >\n                          <Trash2 className=\"mr-2 h-4 w-4\" />\n                          Delete\n                        </DropdownMenuItem>\n                      </DropdownMenuContent>\n                    </DropdownMenu>\n                  </TableCell>\n                </TableRow>\n\n                {/* Expanded Row Content */}\n                {isExpanded && (\n                  <TableRow>\n                    <TableCell colSpan={9} className=\"bg-muted/25\">\n                      <div className=\"p-4 space-y-4\">\n                        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n                          {/* Dimensions */}\n                          {(space.area_sqft || space.length || space.width || space.height) && (\n                            <div>\n                              <h4 className=\"font-semibold mb-2\">Dimensions</h4>\n                              <div className=\"space-y-1 text-sm\">\n                                {space.area_sqft && (\n                                  <div>Area: {space.area_sqft} sq ft</div>\n                                )}\n                                {space.length && space.width && (\n                                  <div>Size: {space.length}' × {space.width}'</div>\n                                )}\n                                {space.height && (\n                                  <div>Height: {space.height}'</div>\n                                )}\n                              </div>\n                            </div>\n                          )}\n\n                          {/* Project */}\n                          {space.project && (\n                            <div>\n                              <h4 className=\"font-semibold mb-2\">Project</h4>\n                              <div className=\"flex items-center gap-2\">\n                                <Badge variant=\"outline\">{space.project.name}</Badge>\n                                <Badge variant=\"secondary\">{space.project.status}</Badge>\n                              </div>\n                            </div>\n                          )}\n\n                          {/* Booking Info */}\n                          {space.is_bookable && (\n                            <div>\n                              <h4 className=\"font-semibold mb-2\">Booking</h4>\n                              <div className=\"space-y-1 text-sm\">\n                                <div>Bookable: Yes</div>\n                                {space.hourly_rate && (\n                                  <div>Hourly: ${space.hourly_rate}</div>\n                                )}\n                                {space.daily_rate && (\n                                  <div>Daily: ${space.daily_rate}</div>\n                                )}\n                              </div>\n                            </div>\n                          )}\n\n                          {/* Contact */}\n                          {(space.contact_person || space.contact_phone || space.contact_email) && (\n                            <div>\n                              <h4 className=\"font-semibold mb-2\">Contact</h4>\n                              <div className=\"space-y-1 text-sm\">\n                                {space.contact_person && (\n                                  <div>Person: {space.contact_person}</div>\n                                )}\n                                {space.contact_phone && (\n                                  <div>Phone: {space.contact_phone}</div>\n                                )}\n                                {space.contact_email && (\n                                  <div>Email: {space.contact_email}</div>\n                                )}\n                              </div>\n                            </div>\n                          )}\n                        </div>\n\n                        {/* Amenities */}\n                        {space.amenities && Object.values(space.amenities).some(Boolean) && (\n                          <div>\n                            <h4 className=\"font-semibold mb-2\">Amenities</h4>\n                            <div className=\"flex flex-wrap gap-2\">\n                              {space.amenities.wifi && (\n                                <Badge variant=\"outline\" className=\"text-xs\">\n                                  <Wifi className=\"mr-1 h-3 w-3\" />\n                                  WiFi\n                                </Badge>\n                              )}\n                              {space.amenities.air_conditioning && (\n                                <Badge variant=\"outline\" className=\"text-xs\">❄️ AC</Badge>\n                              )}\n                              {space.amenities.heating && (\n                                <Badge variant=\"outline\" className=\"text-xs\">🔥 Heating</Badge>\n                              )}\n                              {space.amenities.sound_system && (\n                                <Badge variant=\"outline\" className=\"text-xs\">🔊 Sound</Badge>\n                              )}\n                              {space.amenities.projection && (\n                                <Badge variant=\"outline\" className=\"text-xs\">📽️ Projection</Badge>\n                              )}\n                              {space.amenities.security_camera && (\n                                <Badge variant=\"outline\" className=\"text-xs\">\n                                  <Shield className=\"mr-1 h-3 w-3\" />\n                                  Security\n                                </Badge>\n                              )}\n                              {space.amenities.access_control && (\n                                <Badge variant=\"outline\" className=\"text-xs\">🔐 Access Control</Badge>\n                              )}\n                            </div>\n                          </div>\n                        )}\n\n                        {/* Technical Specs */}\n                        {space.technical_specs && Object.values(space.technical_specs).some(Boolean) && (\n                          <div>\n                            <h4 className=\"font-semibold mb-2\">Technical Specifications</h4>\n                            <div className=\"grid grid-cols-2 gap-2 text-sm\">\n                              {space.technical_specs.audio_inputs && (\n                                <div>Audio Inputs: {space.technical_specs.audio_inputs}</div>\n                              )}\n                              {space.technical_specs.video_inputs && (\n                                <div>Video Inputs: {space.technical_specs.video_inputs}</div>\n                              )}\n                              {space.technical_specs.power_capacity && (\n                                <div>Power: {space.technical_specs.power_capacity}</div>\n                              )}\n                              {space.technical_specs.internet_speed && (\n                                <div>Internet: {space.technical_specs.internet_speed}</div>\n                              )}\n                            </div>\n                          </div>\n                        )}\n\n                        {/* Tags */}\n                        {space.tags && space.tags.length > 0 && (\n                          <div>\n                            <h4 className=\"font-semibold mb-2\">Tags</h4>\n                            <div className=\"flex flex-wrap gap-1\">\n                              {space.tags.map((tag, index) => (\n                                <Badge key={index} variant=\"outline\" className=\"text-xs\">\n                                  {tag}\n                                </Badge>\n                              ))}\n                            </div>\n                          </div>\n                        )}\n                      </div>\n                    </TableCell>\n                  </TableRow>\n                )}\n              </>\n            );\n          })}\n        </TableBody>\n      </Table>\n    </Card>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ghxstship/apps/web/app/(app)/(shell)/programming/workshops/ProgrammingWorkshopsClient.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchWorkshops'. Either include it or remove the dependency array.","line":114,"column":6,"nodeType":"ArrayExpression","endLine":114,"endColumn":23,"suggestions":[{"desc":"Update the dependencies array to be: [supabase, orgId, fetchWorkshops]","fix":{"range":[3560,3577],"text":"[supabase, orgId, fetchWorkshops]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { Plus, Search, Download, Grid3X3, List, BarChart3, Calendar } from \"lucide-react\";\nimport { useCallback, useEffect, useMemo, useState } from 'react';\nimport { createBrowserClient } from '@ghxstship/auth';\nimport {\n  Badge,\n  Button,\n  Card,\n  Input,\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from '@ghxstship/ui';\n\nimport type {\n  ProgrammingWorkshop,\n  WorkshopFilters,\n  WorkshopSort,\n  ViewType,\n  WorkshopCategory,\n  WorkshopStatus,\n  WorkshopSkillLevel,\n  WorkshopFormat,\n  WorkshopProject,\n  WorkshopEvent,\n} from './types';\n\n// Import view components\nimport ProgrammingWorkshopsListView from './views/ProgrammingWorkshopsListView';\nimport ProgrammingWorkshopsGridView from './views/ProgrammingWorkshopsGridView';\nimport ProgrammingWorkshopsTimelineView from './views/ProgrammingWorkshopsTimelineView';\nimport ProgrammingWorkshopsAnalyticsView from './views/ProgrammingWorkshopsAnalyticsView';\n\n// Import drawer components\nimport CreateProgrammingWorkshopDrawer from './drawers/CreateProgrammingWorkshopDrawer';\nimport EditProgrammingWorkshopDrawer from './drawers/EditProgrammingWorkshopDrawer';\nimport ViewProgrammingWorkshopDrawer from './drawers/ViewProgrammingWorkshopDrawer';\n\ninterface User {\n  id: string;\n  email: string;\n  full_name?: string | null;\n  avatar_url?: string | null;\n}\n\ninterface ProgrammingWorkshopsClientProps {\n  orgId: string;\n  currentUserId: string;\n  initialWorkshops: ProgrammingWorkshop[];\n  projects: WorkshopProject[];\n  events: WorkshopEvent[];\n  users: User[];\n}\n\nexport default function ProgrammingWorkshopsClient({\n  orgId,\n  currentUserId,\n  initialWorkshops,\n  projects,\n  events,\n  users,\n}: ProgrammingWorkshopsClientProps) {\n  const supabase = useMemo(() => createBrowserClient(), []);\n\n  // State management\n  const [workshops, setWorkshops] = useState<ProgrammingWorkshop[]>(initialWorkshops);\n  const [loading, setLoading] = useState(false);\n  const [selectedWorkshops, setSelectedWorkshops] = useState<string[]>([]);\n  const [currentView, setCurrentView] = useState<ViewType>('list');\n  const [searchQuery, setSearchQuery] = useState('');\n  const [filters, setFilters] = useState<WorkshopFilters>({});\n  const [sort, setSort] = useState<WorkshopSort>({ field: 'start_date', direction: 'asc' });\n\n  // Drawer state\n  const [createDrawerOpen, setCreateDrawerOpen] = useState(false);\n  const [editDrawerOpen, setEditDrawerOpen] = useState(false);\n  const [viewDrawerOpen, setViewDrawerOpen] = useState(false);\n  const [selectedWorkshop, setSelectedWorkshop] = useState<ProgrammingWorkshop | null>(null);\n\n  // Real-time subscription\n  useEffect(() => {\n    const channel = supabase\n      .channel(`programming_workshops_${orgId}`)\n      .on(\n        'postgres_changes',\n        {\n          event: '*',\n          schema: 'public',\n          table: 'programming_workshops',\n          filter: `organization_id=eq.${orgId}`,\n        },\n        (payload) => {\n          if (payload.eventType === 'INSERT') {\n            fetchWorkshops();\n          } else if (payload.eventType === 'UPDATE') {\n            setWorkshops((prev) =>\n              prev.map((workshop) =>\n                workshop.id === payload.new.id ? { ...workshop, ...payload.new } : workshop\n              )\n            );\n          } else if (payload.eventType === 'DELETE') {\n            setWorkshops((prev) => prev.filter((workshop) => workshop.id !== payload.old.id));\n          }\n        }\n      )\n      .subscribe();\n\n    return () => {\n      supabase.removeChannel(channel);\n    };\n  }, [supabase, orgId]);\n\n  // Fetch workshops with filters\n  const fetchWorkshops = useCallback(async () => {\n    try {\n      setLoading(true);\n      const params = new URLSearchParams();\n\n      if (filters.project_id) params.append('project_id', filters.project_id);\n      if (filters.event_id) params.append('event_id', filters.event_id);\n      if (filters.category) params.append('category', filters.category);\n      if (filters.status) params.append('status', filters.status);\n      if (filters.skill_level) params.append('skill_level', filters.skill_level);\n      if (filters.format) params.append('format', filters.format);\n      if (searchQuery) params.append('search', searchQuery);\n      if (filters.start_date_from) params.append('start_date_from', filters.start_date_from);\n      if (filters.start_date_to) params.append('start_date_to', filters.start_date_to);\n      if (filters.price_min !== undefined) params.append('price_min', filters.price_min.toString());\n      if (filters.price_max !== undefined) params.append('price_max', filters.price_max.toString());\n      if (filters.has_availability !== undefined) params.append('has_availability', filters.has_availability.toString());\n      if (filters.certification_available !== undefined) params.append('certification_available', filters.certification_available.toString());\n\n      const response = await fetch(`/api/v1/programming/workshops?${params}`);\n      if (!response.ok) throw new Error('Failed to fetch workshops');\n\n      const data = await response.json();\n      setWorkshops(data);\n    } catch (error) {\n      console.error('Error fetching workshops:', error);\n    } finally {\n      setLoading(false);\n    }\n  }, [filters, searchQuery]);\n\n  // Trigger fetch when filters change\n  useEffect(() => {\n    fetchWorkshops();\n  }, [fetchWorkshops]);\n\n  // Filter and sort workshops\n  const filteredAndSortedWorkshops = useMemo(() => {\n    let filtered = [...workshops];\n\n    // Apply local search if no server search\n    if (searchQuery && !filters.search) {\n      const query = searchQuery.toLowerCase();\n      filtered = filtered.filter(\n        (workshop) =>\n          workshop.title?.toLowerCase().includes(query) ||\n          workshop.description?.toLowerCase().includes(query) ||\n          workshop.agenda?.toLowerCase().includes(query)\n      );\n    }\n\n    // Apply sorting\n    filtered.sort((a, b) => {\n      const aValue = a[sort.field];\n      const bValue = b[sort.field];\n\n      if (aValue === null || aValue === undefined) return 1;\n      if (bValue === null || bValue === undefined) return -1;\n\n      if (typeof aValue === 'string' && typeof bValue === 'string') {\n        return sort.direction === 'asc'\n          ? aValue.localeCompare(bValue)\n          : bValue.localeCompare(aValue);\n      }\n\n      if (aValue < bValue) return sort.direction === 'asc' ? -1 : 1;\n      if (aValue > bValue) return sort.direction === 'asc' ? 1 : -1;\n      return 0;\n    });\n\n    return filtered;\n  }, [workshops, searchQuery, filters.search, sort]);\n\n  // Handlers\n  const handleCreateWorkshop = () => {\n    setCreateDrawerOpen(true);\n  };\n\n  const handleEditWorkshop = (workshop: ProgrammingWorkshop) => {\n    setSelectedWorkshop(workshop);\n    setEditDrawerOpen(true);\n  };\n\n  const handleViewWorkshop = (workshop: ProgrammingWorkshop) => {\n    setSelectedWorkshop(workshop);\n    setViewDrawerOpen(true);\n  };\n\n  const handleDeleteWorkshop = async (workshopId: string) => {\n    try {\n      const response = await fetch(`/api/v1/programming/workshops/${workshopId}`, {\n        method: 'DELETE',\n      });\n\n      if (!response.ok) throw new Error('Failed to delete workshop');\n\n      setWorkshops((prev) => prev.filter((workshop) => workshop.id !== workshopId));\n    } catch (error) {\n      console.error('Error deleting workshop:', error);\n    }\n  };\n\n  const handleBulkAction = async (action: string, workshopIds: string[]) => {\n    try {\n      setLoading(true);\n      \n      switch (action) {\n        case 'delete':\n          await Promise.all(\n            workshopIds.map((id) =>\n              fetch(`/api/v1/programming/workshops/${id}`, { method: 'DELETE' })\n            )\n          );\n          setWorkshops((prev) => prev.filter((workshop) => !workshopIds.includes(workshop.id)));\n          break;\n        case 'cancel':\n          await Promise.all(\n            workshopIds.map((id) =>\n              fetch(`/api/v1/programming/workshops/${id}`, {\n                method: 'PATCH',\n                headers: { 'Content-Type': 'application/json' },\n                body: JSON.stringify({ status: 'cancelled' }),\n              })\n            )\n          );\n          fetchWorkshops();\n          break;\n        case 'open_registration':\n          await Promise.all(\n            workshopIds.map((id) =>\n              fetch(`/api/v1/programming/workshops/${id}`, {\n                method: 'PATCH',\n                headers: { 'Content-Type': 'application/json' },\n                body: JSON.stringify({ status: 'open_registration' }),\n              })\n            )\n          );\n          fetchWorkshops();\n          break;\n      }\n      \n      setSelectedWorkshops([]);\n    } catch (error) {\n      console.error('Error performing bulk action:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleSuccess = () => {\n    fetchWorkshops();\n    setCreateDrawerOpen(false);\n    setEditDrawerOpen(false);\n    setSelectedWorkshop(null);\n  };\n\n  // Export functionality\n  const handleExport = () => {\n    const csvContent = [\n      ['Title', 'Category', 'Status', 'Skill Level', 'Format', 'Start Date', 'Participants', 'Price'].join(','),\n      ...filteredAndSortedWorkshops.map((workshop) =>\n        [\n          workshop.title,\n          workshop.category,\n          workshop.status,\n          workshop.skill_level,\n          workshop.format,\n          new Date(workshop.start_date).toLocaleDateString(),\n          `${workshop.current_participants}${workshop.max_participants ? `/${workshop.max_participants}` : ''}`,\n          workshop.price ? `${workshop.currency || '$'}${workshop.price}` : 'Free',\n        ].join(',')\n      ),\n    ].join('\\n');\n\n    const blob = new Blob([csvContent], { type: 'text/csv' });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = `programming-workshops-${new Date().toISOString().split('T')[0]}.csv`;\n    a.click();\n    URL.revokeObjectURL(url);\n  };\n\n  // View icons\n  const viewIcons = {\n    list: List,\n    grid: Grid3X3,\n    timeline: Calendar,\n    analytics: BarChart3,\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-2xl font-bold\">Programming Workshops</h1>\n          <p className=\"text-muted-foreground\">\n            Manage educational workshops, training sessions, and learning experiences\n          </p>\n        </div>\n        <Button onClick={handleCreateWorkshop}>\n          <Plus className=\"mr-2 h-4 w-4\" />\n          Create Workshop\n        </Button>\n      </div>\n\n      {/* Filters and Search */}\n      <Card className=\"p-4\">\n        <div className=\"flex flex-col gap-4 md:flex-row md:items-center md:justify-between\">\n          <div className=\"flex flex-1 items-center gap-4\">\n            <div className=\"relative flex-1 max-w-sm\">\n              <Search className=\"absolute left-3 top-1/2 h-4 w-4 -translate-y-1/2 text-muted-foreground\" />\n              <Input\n                placeholder=\"Search workshops...\"\n                value={searchQuery}\n                onChange={(e) => setSearchQuery(e.target.value)}\n                className=\"pl-9\"\n              />\n            </div>\n\n            <Select\n              value={filters.category || ''}\n              onValueChange={(value) =>\n                setFilters((prev) => ({ ...prev, category: value as WorkshopCategory || undefined }))\n              }\n            >\n              <SelectTrigger className=\"w-40\">\n                <SelectValue placeholder=\"All Categories\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"\">All Categories</SelectItem>\n                <SelectItem value=\"technical\">Technical</SelectItem>\n                <SelectItem value=\"creative\">Creative</SelectItem>\n                <SelectItem value=\"business\">Business</SelectItem>\n                <SelectItem value=\"leadership\">Leadership</SelectItem>\n                <SelectItem value=\"production\">Production</SelectItem>\n                <SelectItem value=\"design\">Design</SelectItem>\n                <SelectItem value=\"marketing\">Marketing</SelectItem>\n                <SelectItem value=\"finance\">Finance</SelectItem>\n                <SelectItem value=\"legal\">Legal</SelectItem>\n                <SelectItem value=\"other\">Other</SelectItem>\n              </SelectContent>\n            </Select>\n\n            <Select\n              value={filters.status || ''}\n              onValueChange={(value) =>\n                setFilters((prev) => ({ ...prev, status: value as WorkshopStatus || undefined }))\n              }\n            >\n              <SelectTrigger className=\"w-40\">\n                <SelectValue placeholder=\"All Status\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"\">All Status</SelectItem>\n                <SelectItem value=\"planning\">Planning</SelectItem>\n                <SelectItem value=\"open_registration\">Open Registration</SelectItem>\n                <SelectItem value=\"registration_closed\">Registration Closed</SelectItem>\n                <SelectItem value=\"full\">Full</SelectItem>\n                <SelectItem value=\"in_progress\">In Progress</SelectItem>\n                <SelectItem value=\"completed\">Completed</SelectItem>\n                <SelectItem value=\"cancelled\">Cancelled</SelectItem>\n                <SelectItem value=\"postponed\">Postponed</SelectItem>\n              </SelectContent>\n            </Select>\n\n            <Select\n              value={filters.skill_level || ''}\n              onValueChange={(value) =>\n                setFilters((prev) => ({ ...prev, skill_level: value as WorkshopSkillLevel || undefined }))\n              }\n            >\n              <SelectTrigger className=\"w-40\">\n                <SelectValue placeholder=\"All Levels\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"\">All Levels</SelectItem>\n                <SelectItem value=\"beginner\">Beginner</SelectItem>\n                <SelectItem value=\"intermediate\">Intermediate</SelectItem>\n                <SelectItem value=\"advanced\">Advanced</SelectItem>\n                <SelectItem value=\"expert\">Expert</SelectItem>\n                <SelectItem value=\"all_levels\">All Levels</SelectItem>\n              </SelectContent>\n            </Select>\n\n            <Select\n              value={filters.format || ''}\n              onValueChange={(value) =>\n                setFilters((prev) => ({ ...prev, format: value as WorkshopFormat || undefined }))\n              }\n            >\n              <SelectTrigger className=\"w-40\">\n                <SelectValue placeholder=\"All Formats\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"\">All Formats</SelectItem>\n                <SelectItem value=\"in_person\">In Person</SelectItem>\n                <SelectItem value=\"virtual\">Virtual</SelectItem>\n                <SelectItem value=\"hybrid\">Hybrid</SelectItem>\n              </SelectContent>\n            </Select>\n\n            <Select\n              value={filters.project_id || ''}\n              onValueChange={(value) =>\n                setFilters((prev) => ({ ...prev, project_id: value || undefined }))\n              }\n            >\n              <SelectTrigger className=\"w-48\">\n                <SelectValue placeholder=\"All Projects\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"\">All Projects</SelectItem>\n                {projects.map((project) => (\n                  <SelectItem key={project.id} value={project.id}>\n                    {project.name}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n\n          <div className=\"flex items-center gap-2\">\n            <Button variant=\"outline\" size=\"sm\" onClick={handleExport}>\n              <Download className=\"mr-2 h-4 w-4\" />\n              Export\n            </Button>\n\n            {/* View Switcher */}\n            <div className=\"flex items-center rounded-lg border p-1\">\n              {(['list', 'grid', 'timeline', 'analytics'] as ViewType[]).map((view) => {\n                const Icon = viewIcons[view];\n                return (\n                  <Button\n                    key={view}\n                    variant={currentView === view ? 'default' : 'ghost'}\n                    size=\"sm\"\n                    onClick={() => setCurrentView(view)}\n                    className=\"h-8 w-8 p-0\"\n                  >\n                    <Icon className=\"h-4 w-4\" />\n                  </Button>\n                );\n              })}\n            </div>\n          </div>\n        </div>\n\n        {/* Bulk Actions */}\n        {selectedWorkshops.length > 0 && (\n          <div className=\"mt-4 flex items-center gap-2 rounded-lg border bg-muted/50 p-3\">\n            <span className=\"text-sm text-muted-foreground\">\n              {selectedWorkshops.length} workshop(s) selected\n            </span>\n            <div className=\"flex gap-2\">\n              <Button\n                size=\"sm\"\n                variant=\"outline\"\n                onClick={() => handleBulkAction('open_registration', selectedWorkshops)}\n              >\n                Open Registration\n              </Button>\n              <Button\n                size=\"sm\"\n                variant=\"outline\"\n                onClick={() => handleBulkAction('cancel', selectedWorkshops)}\n              >\n                Cancel\n              </Button>\n              <Button\n                size=\"sm\"\n                variant=\"destructive\"\n                onClick={() => handleBulkAction('delete', selectedWorkshops)}\n              >\n                Delete\n              </Button>\n            </div>\n          </div>\n        )}\n      </Card>\n\n      {/* Content */}\n      <div className=\"min-h-[400px]\">\n        {currentView === 'list' && (\n          <ProgrammingWorkshopsListView\n            workshops={filteredAndSortedWorkshops}\n            loading={loading}\n            selectedWorkshops={selectedWorkshops}\n            onSelectionChange={setSelectedWorkshops}\n            onEdit={handleEditWorkshop}\n            onView={handleViewWorkshop}\n            onDelete={handleDeleteWorkshop}\n            sort={sort}\n            onSortChange={setSort}\n          />\n        )}\n\n        {currentView === 'grid' && (\n          <ProgrammingWorkshopsGridView\n            workshops={filteredAndSortedWorkshops}\n            loading={loading}\n            onEdit={handleEditWorkshop}\n            onView={handleViewWorkshop}\n            onDelete={handleDeleteWorkshop}\n          />\n        )}\n\n        {currentView === 'timeline' && (\n          <ProgrammingWorkshopsTimelineView\n            workshops={filteredAndSortedWorkshops}\n            loading={loading}\n            onEdit={handleEditWorkshop}\n            onView={handleViewWorkshop}\n          />\n        )}\n\n        {currentView === 'analytics' && (\n          <ProgrammingWorkshopsAnalyticsView\n            workshops={filteredAndSortedWorkshops}\n            loading={loading}\n          />\n        )}\n      </div>\n\n      {/* Drawers */}\n      <CreateProgrammingWorkshopDrawer\n        open={createDrawerOpen}\n        onOpenChange={setCreateDrawerOpen}\n        orgId={orgId}\n        currentUserId={currentUserId}\n        projects={projects}\n        events={events}\n        users={users}\n        onSuccess={handleSuccess}\n      />\n\n      {selectedWorkshop && (\n        <>\n          <EditProgrammingWorkshopDrawer\n            open={editDrawerOpen}\n            onOpenChange={setEditDrawerOpen}\n            workshop={selectedWorkshop}\n            orgId={orgId}\n            currentUserId={currentUserId}\n            projects={projects}\n            events={events}\n            users={users}\n            onSuccess={handleSuccess}\n          />\n\n          <ViewProgrammingWorkshopDrawer\n            open={viewDrawerOpen}\n            onOpenChange={setViewDrawerOpen}\n            workshop={selectedWorkshop}\n            users={users}\n            onEdit={() => {\n              setViewDrawerOpen(false);\n              setEditDrawerOpen(true);\n            }}\n            onDelete={() => {\n              handleDeleteWorkshop(selectedWorkshop.id);\n              setViewDrawerOpen(false);\n              setSelectedWorkshop(null);\n            }}\n          />\n        </>\n      )}\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ghxstship/apps/web/app/(app)/(shell)/projects/activations/views/ActivationGridView.tsx","messages":[{"ruleId":"react/jsx-no-undef","severity":2,"message":"'MoreVertical' is not defined.","line":81,"column":20,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":81,"endColumn":32},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Eye' is not defined.","line":86,"column":20,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":86,"endColumn":23},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Edit' is not defined.","line":90,"column":20,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":90,"endColumn":24},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Copy' is not defined.","line":94,"column":20,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":94,"endColumn":24},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Clock' is not defined.","line":98,"column":20,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":98,"endColumn":25},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Play' is not defined.","line":102,"column":20,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":102,"endColumn":24},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'CheckCircle' is not defined.","line":106,"column":20,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":106,"endColumn":31},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Trash2' is not defined.","line":113,"column":20,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":113,"endColumn":26},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Building' is not defined.","line":134,"column":18,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":134,"endColumn":26},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Calendar' is not defined.","line":141,"column":18,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":141,"endColumn":26},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'MapPin' is not defined.","line":148,"column":18,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":148,"endColumn":24},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'DollarSign' is not defined.","line":155,"column":18,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":155,"endColumn":28}],"suppressedMessages":[],"errorCount":12,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport { Card, Badge, Button, Checkbox, DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from \"@ghxstship/ui\";\nimport { format, parseISO } from \"date-fns\";\nimport type { Activation } from \"../ActivationsClient\";\n\ninterface ActivationGridViewProps {\n  activations: Activation[];\n  selectedActivations: Set<string>;\n  onSelectActivation: (id: string) => void;\n  onView: (activation: Activation) => void;\n  onEdit: (activation: Activation) => void;\n  onDelete: (activation: Activation) => void;\n  onDuplicate: (activation: Activation) => void;\n  onStatusChange: (activation: Activation, status: string) => void;\n}\n\nexport default function ActivationGridView({\n  activations,\n  selectedActivations,\n  onSelectActivation,\n  onView,\n  onEdit,\n  onDelete,\n  onDuplicate,\n  onStatusChange,\n}: ActivationGridViewProps) {\n  const getStatusBadgeVariant = (status: string) => {\n    switch (status) {\n      case \"planning\":\n        return \"secondary\";\n      case \"ready\":\n        return \"warning\";\n      case \"active\":\n        return \"info\";\n      case \"completed\":\n        return \"success\";\n      case \"cancelled\":\n        return \"destructive\";\n      default:\n        return \"secondary\";\n    }\n  };\n\n  const getTypeBadgeVariant = (type: string) => {\n    switch (type) {\n      case \"full_launch\":\n        return \"default\";\n      case \"soft_launch\":\n        return \"secondary\";\n      case \"beta\":\n        return \"warning\";\n      case \"pilot\":\n        return \"info\";\n      case \"rollout\":\n        return \"success\";\n      default:\n        return \"secondary\";\n    }\n  };\n\n  return (\n    <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-md\">\n      {activations.map((activation) => (\n        <Card\n          key={activation.id}\n          className={`p-md cursor-pointer hover:shadow-lg transition-shadow ${\n            selectedActivations.has(activation.id) ? \"ring-2 ring-primary\" : \"\"\n          }`}\n          onClick={() => onView(activation)}\n        >\n          <div className=\"flex items-start justify-between mb-sm\">\n            <Checkbox\n              checked={selectedActivations.has(activation.id)}\n              onCheckedChange={() => onSelectActivation(activation.id)}\n              onClick={(e) => e.stopPropagation()}\n            />\n            <DropdownMenu>\n              <DropdownMenuTrigger asChild onClick={(e) => e.stopPropagation()}>\n                <Button variant=\"ghost\" size=\"sm\">\n                  <MoreVertical className=\"h-4 w-4\" />\n                </Button>\n              </DropdownMenuTrigger>\n              <DropdownMenuContent align=\"end\">\n                <DropdownMenuItem onClick={() => onView(activation)}>\n                  <Eye className=\"mr-2 h-4 w-4\" />\n                  View\n                </DropdownMenuItem>\n                <DropdownMenuItem onClick={() => onEdit(activation)}>\n                  <Edit className=\"mr-2 h-4 w-4\" />\n                  Edit\n                </DropdownMenuItem>\n                <DropdownMenuItem onClick={() => onDuplicate(activation)}>\n                  <Copy className=\"mr-2 h-4 w-4\" />\n                  Duplicate\n                </DropdownMenuItem>\n                <DropdownMenuItem onClick={() => onStatusChange(activation, \"planning\")}>\n                  <Clock className=\"mr-2 h-4 w-4\" />\n                  Set Planning\n                </DropdownMenuItem>\n                <DropdownMenuItem onClick={() => onStatusChange(activation, \"active\")}>\n                  <Play className=\"mr-2 h-4 w-4\" />\n                  Set Active\n                </DropdownMenuItem>\n                <DropdownMenuItem onClick={() => onStatusChange(activation, \"completed\")}>\n                  <CheckCircle className=\"mr-2 h-4 w-4\" />\n                  Set Completed\n                </DropdownMenuItem>\n                <DropdownMenuItem \n                  onClick={() => onDelete(activation)}\n                  className=\"text-destructive\"\n                >\n                  <Trash2 className=\"mr-2 h-4 w-4\" />\n                  Delete\n                </DropdownMenuItem>\n              </DropdownMenuContent>\n            </DropdownMenu>\n          </div>\n\n          <div className=\"space-y-sm\">\n            <h3 className=\"font-semibold text-lg truncate\">{activation.name}</h3>\n            \n            <div className=\"flex items-center gap-xs flex-wrap\">\n              <Badge variant={getStatusBadgeVariant(activation.status)}>\n                {activation.status}\n              </Badge>\n              <Badge variant={getTypeBadgeVariant(activation.activation_type)}>\n                {activation.activation_type.replace(\"_\", \" \")}\n              </Badge>\n            </div>\n\n            {activation.project && (\n              <div className=\"flex items-center gap-xs text-sm text-muted-foreground\">\n                <Building className=\"h-3 w-3\" />\n                <span className=\"truncate\">{activation.project.name}</span>\n              </div>\n            )}\n\n            {activation.scheduled_date && (\n              <div className=\"flex items-center gap-xs text-sm text-muted-foreground\">\n                <Calendar className=\"h-3 w-3\" />\n                <span>{format(parseISO(activation.scheduled_date), \"MMM d, yyyy\")}</span>\n              </div>\n            )}\n\n            {activation.location && (\n              <div className=\"flex items-center gap-xs text-sm text-muted-foreground\">\n                <MapPin className=\"h-3 w-3\" />\n                <span className=\"truncate\">{activation.location}</span>\n              </div>\n            )}\n\n            {activation.budget && (\n              <div className=\"flex items-center gap-xs text-sm text-muted-foreground\">\n                <DollarSign className=\"h-3 w-3\" />\n                <span>${activation.budget.toLocaleString()}</span>\n              </div>\n            )}\n          </div>\n        </Card>\n      ))}\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ghxstship/apps/web/app/(app)/(shell)/projects/activations/views/ActivationKanbanView.tsx","messages":[{"ruleId":"react/jsx-no-undef","severity":2,"message":"'MoreVertical' is not defined.","line":131,"column":28,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":131,"endColumn":40},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Eye' is not defined.","line":136,"column":28,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":136,"endColumn":31},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Edit' is not defined.","line":140,"column":28,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":140,"endColumn":32},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Clock' is not defined.","line":145,"column":30,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":145,"endColumn":35},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'AlertCircle' is not defined.","line":151,"column":30,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":151,"endColumn":41},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Play' is not defined.","line":157,"column":30,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":157,"endColumn":34},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'CheckCircle' is not defined.","line":163,"column":30,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":163,"endColumn":41},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Trash2' is not defined.","line":171,"column":28,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":171,"endColumn":34}],"suppressedMessages":[],"errorCount":8,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport { useMemo } from \"react\";\nimport { Card, Badge, Button, Checkbox, DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from \"@ghxstship/ui\";\nimport { format, parseISO } from \"date-fns\";\nimport type { Activation } from \"../ActivationsClient\";\n\ninterface ActivationKanbanViewProps {\n  activations: Activation[];\n  selectedActivations: Set<string>;\n  onSelectActivation: (id: string) => void;\n  onView: (activation: Activation) => void;\n  onEdit: (activation: Activation) => void;\n  onDelete: (activation: Activation) => void;\n  onStatusChange: (activation: Activation, status: string) => void;\n}\n\nexport default function ActivationKanbanView({\n  activations,\n  selectedActivations,\n  onSelectActivation,\n  onView,\n  onEdit,\n  onDelete,\n  onStatusChange,\n}: ActivationKanbanViewProps) {\n  // Group activations by status\n  const groupedActivations = useMemo(() => {\n    const groups: Record<string, Activation[]> = {\n      planning: [],\n      ready: [],\n      active: [],\n      completed: [],\n      cancelled: [],\n    };\n\n    activations.forEach((activation) => {\n      if (groups[activation.status]) {\n        groups[activation.status].push(activation);\n      }\n    });\n\n    return groups;\n  }, [activations]);\n\n  const getStatusBadgeVariant = (status: string) => {\n    switch (status) {\n      case \"planning\":\n        return \"secondary\";\n      case \"ready\":\n        return \"warning\";\n      case \"active\":\n        return \"info\";\n      case \"completed\":\n        return \"success\";\n      case \"cancelled\":\n        return \"destructive\";\n      default:\n        return \"secondary\";\n    }\n  };\n\n  const getTypeBadgeVariant = (type: string) => {\n    switch (type) {\n      case \"full_launch\":\n        return \"default\";\n      case \"soft_launch\":\n        return \"secondary\";\n      case \"beta\":\n        return \"warning\";\n      case \"pilot\":\n        return \"info\";\n      case \"rollout\":\n        return \"success\";\n      default:\n        return \"secondary\";\n    }\n  };\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case \"planning\":\n        return Clock;\n      case \"ready\":\n        return AlertCircle;\n      case \"active\":\n        return Play;\n      case \"completed\":\n        return CheckCircle;\n      case \"cancelled\":\n        return XCircle;\n      default:\n        return Clock;\n    }\n  };\n\n  return (\n    <div className=\"flex gap-md overflow-x-auto pb-md\">\n      {Object.entries(groupedActivations).map(([status, items]) => {\n        const StatusIcon = getStatusIcon(status);\n        return (\n          <div key={status} className=\"flex-shrink-0 w-80\">\n            <div className=\"bg-muted rounded-lg p-sm mb-sm\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center gap-sm\">\n                  <StatusIcon className=\"h-4 w-4\" />\n                  <h3 className=\"font-semibold capitalize\">{status.replace(\"_\", \" \")}</h3>\n                </div>\n                <Badge variant={getStatusBadgeVariant(status)}>{items.length}</Badge>\n              </div>\n            </div>\n\n            <div className=\"space-y-sm max-h-[calc(100vh-300px)] overflow-y-auto\">\n              {items.map((activation) => (\n                <Card\n                  key={activation.id}\n                  className={`p-sm cursor-pointer hover:shadow-md transition-shadow ${\n                    selectedActivations.has(activation.id) ? \"ring-2 ring-primary\" : \"\"\n                  }`}\n                  onClick={() => onView(activation)}\n                >\n                  <div className=\"flex items-start justify-between mb-xs\">\n                    <Checkbox\n                      checked={selectedActivations.has(activation.id)}\n                      onCheckedChange={() => onSelectActivation(activation.id)}\n                      onClick={(e) => e.stopPropagation()}\n                    />\n                    <DropdownMenu>\n                      <DropdownMenuTrigger asChild onClick={(e) => e.stopPropagation()}>\n                        <Button variant=\"ghost\" size=\"sm\">\n                          <MoreVertical className=\"h-3 w-3\" />\n                        </Button>\n                      </DropdownMenuTrigger>\n                      <DropdownMenuContent align=\"end\">\n                        <DropdownMenuItem onClick={() => onView(activation)}>\n                          <Eye className=\"mr-2 h-4 w-4\" />\n                          View\n                        </DropdownMenuItem>\n                        <DropdownMenuItem onClick={() => onEdit(activation)}>\n                          <Edit className=\"mr-2 h-4 w-4\" />\n                          Edit\n                        </DropdownMenuItem>\n                        {status !== \"planning\" && (\n                          <DropdownMenuItem onClick={() => onStatusChange(activation, \"planning\")}>\n                            <Clock className=\"mr-2 h-4 w-4\" />\n                            Move to Planning\n                          </DropdownMenuItem>\n                        )}\n                        {status !== \"ready\" && (\n                          <DropdownMenuItem onClick={() => onStatusChange(activation, \"ready\")}>\n                            <AlertCircle className=\"mr-2 h-4 w-4\" />\n                            Move to Ready\n                          </DropdownMenuItem>\n                        )}\n                        {status !== \"active\" && (\n                          <DropdownMenuItem onClick={() => onStatusChange(activation, \"active\")}>\n                            <Play className=\"mr-2 h-4 w-4\" />\n                            Move to Active\n                          </DropdownMenuItem>\n                        )}\n                        {status !== \"completed\" && (\n                          <DropdownMenuItem onClick={() => onStatusChange(activation, \"completed\")}>\n                            <CheckCircle className=\"mr-2 h-4 w-4\" />\n                            Move to Completed\n                          </DropdownMenuItem>\n                        )}\n                        <DropdownMenuItem \n                          onClick={() => onDelete(activation)}\n                          className=\"text-destructive\"\n                        >\n                          <Trash2 className=\"mr-2 h-4 w-4\" />\n                          Delete\n                        </DropdownMenuItem>\n                      </DropdownMenuContent>\n                    </DropdownMenu>\n                  </div>\n\n                  <h4 className=\"font-medium mb-xs truncate\">{activation.name}</h4>\n                  \n                  <Badge \n                    variant={getTypeBadgeVariant(activation.activation_type)}\n                    className=\"mb-xs\"\n                  >\n                    {activation.activation_type.replace(\"_\", \" \")}\n                  </Badge>\n\n                  {activation.project && (\n                    <div className=\"text-xs text-muted-foreground mb-xs truncate\">\n                      {activation.project.name}\n                    </div>\n                  )}\n\n                  {activation.scheduled_date && (\n                    <div className=\"text-xs text-muted-foreground\">\n                      {format(parseISO(activation.scheduled_date), \"MMM d\")}\n                    </div>\n                  )}\n\n                  {activation.budget && (\n                    <div className=\"text-xs text-muted-foreground\">\n                      ${activation.budget.toLocaleString()}\n                    </div>\n                  )}\n                </Card>\n              ))}\n              \n              {items.length === 0 && (\n                <div className=\"text-center py-lg text-muted-foreground text-sm\">\n                  No activations in {status}\n                </div>\n              )}\n            </div>\n          </div>\n        );\n      })}\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ghxstship/apps/web/app/(app)/(shell)/projects/activations/views/ActivationListView.tsx","messages":[{"ruleId":"react/jsx-no-undef","severity":2,"message":"'ArrowUp' is not defined.","line":144,"column":28,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":144,"endColumn":35},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'ArrowDown' is not defined.","line":146,"column":28,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":146,"endColumn":37},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'ArrowUpDown' is not defined.","line":149,"column":26,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":149,"endColumn":37},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'MoreVertical' is not defined.","line":183,"column":24,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":183,"endColumn":36},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Eye' is not defined.","line":188,"column":24,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":188,"endColumn":27},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Edit' is not defined.","line":192,"column":24,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":192,"endColumn":28},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Copy' is not defined.","line":196,"column":24,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":196,"endColumn":28},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Trash2' is not defined.","line":203,"column":24,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":203,"endColumn":30}],"suppressedMessages":[],"errorCount":8,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport { Badge, Button, Checkbox, DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from \"@ghxstship/ui\";\nimport { format, parseISO } from \"date-fns\";\nimport type { Activation } from \"../ActivationsClient\";\n\ninterface ActivationListViewProps {\n  activations: Activation[];\n  selectedActivations: Set<string>;\n  fieldVisibility: Array<{ id: string; label: string; visible: boolean; sortable: boolean }>;\n  sortField: string;\n  sortDirection: \"asc\" | \"desc\";\n  onSelectAll: () => void;\n  onSelectActivation: (id: string) => void;\n  onSort: (field: string) => void;\n  onView: (activation: Activation) => void;\n  onEdit: (activation: Activation) => void;\n  onDelete: (activation: Activation) => void;\n  onDuplicate: (activation: Activation) => void;\n  onStatusChange: (activation: Activation, status: string) => void;\n}\n\nexport default function ActivationListView({\n  activations,\n  selectedActivations,\n  fieldVisibility,\n  sortField,\n  sortDirection,\n  onSelectAll,\n  onSelectActivation,\n  onSort,\n  onView,\n  onEdit,\n  onDelete,\n  onDuplicate,\n  onStatusChange,\n}: ActivationListViewProps) {\n  const visibleFields = fieldVisibility.filter((f) => f.visible);\n\n  const getStatusBadgeVariant = (status: string) => {\n    switch (status) {\n      case \"planning\":\n        return \"secondary\";\n      case \"ready\":\n        return \"warning\";\n      case \"active\":\n        return \"info\";\n      case \"completed\":\n        return \"success\";\n      case \"cancelled\":\n        return \"destructive\";\n      default:\n        return \"secondary\";\n    }\n  };\n\n  const getTypeBadgeVariant = (type: string) => {\n    switch (type) {\n      case \"full_launch\":\n        return \"default\";\n      case \"soft_launch\":\n        return \"secondary\";\n      case \"beta\":\n        return \"warning\";\n      case \"pilot\":\n        return \"info\";\n      case \"rollout\":\n        return \"success\";\n      default:\n        return \"secondary\";\n    }\n  };\n\n  const renderFieldValue = (activation: Activation, fieldId: string) => {\n    switch (fieldId) {\n      case \"name\":\n        return <span className=\"font-medium\">{activation.name}</span>;\n      case \"status\":\n        return (\n          <Badge variant={getStatusBadgeVariant(activation.status)}>\n            {activation.status}\n          </Badge>\n        );\n      case \"activation_type\":\n        return (\n          <Badge variant={getTypeBadgeVariant(activation.activation_type)}>\n            {activation.activation_type.replace(\"_\", \" \")}\n          </Badge>\n        );\n      case \"project\":\n        return activation.project?.name || \"-\";\n      case \"scheduled_date\":\n        return activation.scheduled_date\n          ? format(parseISO(activation.scheduled_date), \"MMM d, yyyy\")\n          : \"-\";\n      case \"actual_date\":\n        return activation.actual_date\n          ? format(parseISO(activation.actual_date), \"MMM d, yyyy\")\n          : \"-\";\n      case \"completion_date\":\n        return activation.completion_date\n          ? format(parseISO(activation.completion_date), \"MMM d, yyyy\")\n          : \"-\";\n      case \"location\":\n        return activation.location || \"-\";\n      case \"budget\":\n        return activation.budget ? `$${activation.budget.toLocaleString()}` : \"-\";\n      case \"actual_cost\":\n        return activation.actual_cost ? `$${activation.actual_cost.toLocaleString()}` : \"-\";\n      case \"created_at\":\n        return format(parseISO(activation.created_at), \"MMM d, yyyy\");\n      case \"updated_at\":\n        return format(parseISO(activation.updated_at), \"MMM d, yyyy\");\n      default:\n        return \"-\";\n    }\n  };\n\n  return (\n    <div className=\"overflow-x-auto\">\n      <table className=\"w-full\">\n        <thead>\n          <tr className=\"border-b\">\n            <th className=\"text-left p-sm\">\n              <Checkbox\n                checked={selectedActivations.size === activations.length && activations.length > 0}\n                onCheckedChange={onSelectAll}\n              />\n            </th>\n            {visibleFields.map((field) => (\n              <th\n                key={field.id}\n                className={`text-left p-sm ${\n                  field.sortable ? \"cursor-pointer hover:bg-muted/50\" : \"\"\n                }`}\n                onClick={() => field.sortable && onSort(field.id)}\n              >\n                <div className=\"flex items-center gap-xs\">\n                  {field.label}\n                  {field.sortable && (\n                    <>\n                      {sortField === field.id ? (\n                        sortDirection === \"asc\" ? (\n                          <ArrowUp className=\"h-3 w-3\" />\n                        ) : (\n                          <ArrowDown className=\"h-3 w-3\" />\n                        )\n                      ) : (\n                        <ArrowUpDown className=\"h-3 w-3 opacity-30\" />\n                      )}\n                    </>\n                  )}\n                </div>\n              </th>\n            ))}\n            <th className=\"text-left p-sm\">Actions</th>\n          </tr>\n        </thead>\n        <tbody>\n          {activations.map((activation) => (\n            <tr\n              key={activation.id}\n              className={`border-b hover:bg-muted/50 cursor-pointer ${\n                selectedActivations.has(activation.id) ? \"bg-primary/5\" : \"\"\n              }`}\n              onClick={() => onView(activation)}\n            >\n              <td className=\"p-sm\" onClick={(e) => e.stopPropagation()}>\n                <Checkbox\n                  checked={selectedActivations.has(activation.id)}\n                  onCheckedChange={() => onSelectActivation(activation.id)}\n                />\n              </td>\n              {visibleFields.map((field) => (\n                <td key={field.id} className=\"p-sm\">\n                  {renderFieldValue(activation, field.id)}\n                </td>\n              ))}\n              <td className=\"p-sm\" onClick={(e) => e.stopPropagation()}>\n                <DropdownMenu>\n                  <DropdownMenuTrigger asChild>\n                    <Button variant=\"ghost\" size=\"sm\">\n                      <MoreVertical className=\"h-4 w-4\" />\n                    </Button>\n                  </DropdownMenuTrigger>\n                  <DropdownMenuContent align=\"end\">\n                    <DropdownMenuItem onClick={() => onView(activation)}>\n                      <Eye className=\"mr-2 h-4 w-4\" />\n                      View\n                    </DropdownMenuItem>\n                    <DropdownMenuItem onClick={() => onEdit(activation)}>\n                      <Edit className=\"mr-2 h-4 w-4\" />\n                      Edit\n                    </DropdownMenuItem>\n                    <DropdownMenuItem onClick={() => onDuplicate(activation)}>\n                      <Copy className=\"mr-2 h-4 w-4\" />\n                      Duplicate\n                    </DropdownMenuItem>\n                    <DropdownMenuItem \n                      onClick={() => onDelete(activation)}\n                      className=\"text-destructive\"\n                    >\n                      <Trash2 className=\"mr-2 h-4 w-4\" />\n                      Delete\n                    </DropdownMenuItem>\n                  </DropdownMenuContent>\n                </DropdownMenu>\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n      \n      {activations.length === 0 && (\n        <div className=\"text-center py-xl text-muted-foreground\">\n          No activations to display\n        </div>\n      )}\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ghxstship/apps/web/app/(app)/(shell)/projects/inspections/views/InspectionGridView.tsx","messages":[{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Edit' is not defined.","line":82,"column":18,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":82,"endColumn":22},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'User' is not defined.","line":136,"column":20,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":136,"endColumn":24},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'MapPin' is not defined.","line":146,"column":20,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":146,"endColumn":26},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Calendar' is not defined.","line":153,"column":18,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":153,"endColumn":26},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'AlertTriangle' is not defined.","line":164,"column":20,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":164,"endColumn":33},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Trash2' is not defined.","line":198,"column":20,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":198,"endColumn":26}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport { Card, Badge, Button, Checkbox } from \"@ghxstship/ui\";\nimport { format, parseISO } from \"date-fns\";\nimport type { Inspection } from \"../InspectionsClient\";\nimport type { LucideIcon } from \"lucide-react\";\n\ninterface InspectionGridViewProps {\n  inspections: Inspection[];\n  selectedInspections: Set<string>;\n  onSelectInspection: (id: string) => void;\n  onView: (inspection: Inspection) => void;\n  onEdit: (inspection: Inspection) => void;\n  onDelete: (inspection: Inspection) => void;\n  onDuplicate: (inspection: Inspection) => void;\n  onStatusChange: (inspection: Inspection, status: string) => void;\n  getTypeIcon: (type: string) => LucideIcon;\n  getStatusBadgeVariant: (status: string) => any;\n  getTypeBadgeVariant: (type: string) => any;\n  getScoreColor: (score: number) => string;\n}\n\nexport default function InspectionGridView({\n  inspections,\n  selectedInspections,\n  onSelectInspection,\n  onView,\n  onEdit,\n  onDelete,\n  onDuplicate,\n  onStatusChange,\n  getTypeIcon,\n  getStatusBadgeVariant,\n  getTypeBadgeVariant,\n  getScoreColor,\n}: InspectionGridViewProps) {\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case \"scheduled\":\n        return Clock;\n      case \"in_progress\":\n        return Play;\n      case \"completed\":\n        return CheckCircle;\n      case \"failed\":\n        return XCircle;\n      case \"cancelled\":\n        return XCircle;\n      default:\n        return Clock;\n    }\n  };\n\n  return (\n    <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-md\">\n      {inspections.map((inspection) => {\n        const TypeIcon = getTypeIcon(inspection.type);\n        const StatusIcon = getStatusIcon(inspection.status);\n        \n        return (\n          <Card\n            key={inspection.id}\n            className={`p-md cursor-pointer hover:shadow-lg transition-shadow ${\n              selectedInspections.has(inspection.id) ? \"ring-2 ring-primary\" : \"\"\n            }`}\n            onClick={() => onView(inspection)}\n          >\n            <div className=\"flex items-start justify-between mb-sm\">\n              <Checkbox\n                checked={selectedInspections.has(inspection.id)}\n                onChange={() => onSelectInspection(inspection.id)}\n                onClick={(e: React.MouseEvent) => e.stopPropagation()}\n              />\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={(e) => {\n                  e.stopPropagation();\n                  onEdit(inspection);\n                }}\n              >\n                <Edit className=\"h-4 w-4\" />\n              </Button>\n            </div>\n\n            <div className=\"space-y-sm\">\n              {/* Type Icon and Title */}\n              <div className=\"flex items-start gap-sm\">\n                <TypeIcon className=\"h-5 w-5 text-muted-foreground flex-shrink-0 mt-1\" />\n                <div className=\"flex-1\">\n                  <h3 className=\"font-semibold line-clamp-2\">{inspection.title}</h3>\n                </div>\n              </div>\n\n              {/* Badges */}\n              <div className=\"flex items-center gap-xs flex-wrap\">\n                <Badge variant={getTypeBadgeVariant(inspection.type)}>\n                  {inspection.type}\n                </Badge>\n                <Badge variant={getStatusBadgeVariant(inspection.status)}>\n                  <StatusIcon className=\"mr-1 h-3 w-3\" />\n                  {inspection.status.replace(\"_\", \" \")}\n                </Badge>\n              </div>\n\n              {/* Score */}\n              {inspection.score !== undefined && inspection.score !== null && (\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-sm text-muted-foreground\">Score:</span>\n                  <span className={`font-bold text-lg ${getScoreColor(inspection.score)}`}>\n                    {inspection.score}%\n                  </span>\n                </div>\n              )}\n\n              {/* Pass/Fail Status */}\n              {inspection.status === \"completed\" && (\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-sm text-muted-foreground\">Result:</span>\n                  <Badge variant={inspection.is_passed ? \"success\" : \"destructive\"}>\n                    {inspection.is_passed ? \"PASSED\" : \"FAILED\"}\n                  </Badge>\n                </div>\n              )}\n\n              {/* Project */}\n              {inspection.project && (\n                <div className=\"text-sm text-muted-foreground truncate\">\n                  Project: {inspection.project.name}\n                </div>\n              )}\n\n              {/* Inspector */}\n              {inspection.inspector && (\n                <div className=\"flex items-center gap-xs text-sm text-muted-foreground\">\n                  <User className=\"h-3 w-3\" />\n                  <span className=\"truncate\">\n                    {inspection.inspector.full_name || inspection.inspector.email}\n                  </span>\n                </div>\n              )}\n\n              {/* Location */}\n              {inspection.location && (\n                <div className=\"flex items-center gap-xs text-sm text-muted-foreground\">\n                  <MapPin className=\"h-3 w-3\" />\n                  <span className=\"truncate\">{inspection.location}</span>\n                </div>\n              )}\n\n              {/* Date */}\n              <div className=\"flex items-center gap-xs text-sm text-muted-foreground\">\n                <Calendar className=\"h-3 w-3\" />\n                <span>\n                  {inspection.status === \"completed\" && inspection.completed_date\n                    ? `Completed ${format(parseISO(inspection.completed_date), \"MMM d\")}`\n                    : `Scheduled ${format(parseISO(inspection.scheduled_date), \"MMM d\")}`}\n                </span>\n              </div>\n\n              {/* Follow-up Required */}\n              {inspection.follow_up_required && (\n                <div className=\"flex items-center gap-xs text-sm text-warning\">\n                  <AlertTriangle className=\"h-3 w-3\" />\n                  <span>Follow-up required</span>\n                </div>\n              )}\n\n              {/* Actions */}\n              <div className=\"flex items-center gap-xs pt-sm border-t\">\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  className=\"flex-1\"\n                  onClick={(e) => {\n                    e.stopPropagation();\n                    if (inspection.status === \"scheduled\") {\n                      onStatusChange(inspection, \"in_progress\");\n                    } else if (inspection.status === \"in_progress\") {\n                      onStatusChange(inspection, \"completed\");\n                    }\n                  }}\n                >\n                  {inspection.status === \"scheduled\" && \"Start\"}\n                  {inspection.status === \"in_progress\" && \"Complete\"}\n                  {inspection.status === \"completed\" && \"View\"}\n                  {inspection.status === \"failed\" && \"Retry\"}\n                  {inspection.status === \"cancelled\" && \"Reschedule\"}\n                </Button>\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={(e) => {\n                    e.stopPropagation();\n                    onDelete(inspection);\n                  }}\n                >\n                  <Trash2 className=\"h-4 w-4 text-destructive\" />\n                </Button>\n              </div>\n            </div>\n          </Card>\n        );\n      })}\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ghxstship/apps/web/app/(app)/(shell)/projects/inspections/views/InspectionKanbanView.tsx","messages":[{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Edit' is not defined.","line":129,"column":28,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":129,"endColumn":32},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Trash2' is not defined.","line":139,"column":28,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":139,"endColumn":34},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'User' is not defined.","line":182,"column":26,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":182,"endColumn":30},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Calendar' is not defined.","line":190,"column":24,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":190,"endColumn":32}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport { useMemo } from \"react\";\nimport { Card, Badge, Button, Checkbox } from \"@ghxstship/ui\";\nimport { format, parseISO } from \"date-fns\";\nimport type { Inspection } from \"../InspectionsClient\";\nimport type { LucideIcon } from \"lucide-react\";\n\ninterface InspectionKanbanViewProps {\n  inspections: Inspection[];\n  selectedInspections: Set<string>;\n  onSelectInspection: (id: string) => void;\n  onView: (inspection: Inspection) => void;\n  onEdit: (inspection: Inspection) => void;\n  onDelete: (inspection: Inspection) => void;\n  onStatusChange: (inspection: Inspection, status: string) => void;\n  getTypeIcon: (type: string) => LucideIcon;\n  getTypeBadgeVariant: (type: string) => any;\n  getScoreColor: (score: number) => string;\n}\n\nexport default function InspectionKanbanView({\n  inspections,\n  selectedInspections,\n  onSelectInspection,\n  onView,\n  onEdit,\n  onDelete,\n  onStatusChange,\n  getTypeIcon,\n  getTypeBadgeVariant,\n  getScoreColor,\n}: InspectionKanbanViewProps) {\n  // Group inspections by status\n  const groupedInspections = useMemo(() => {\n    const groups: Record<string, Inspection[]> = {\n      scheduled: [],\n      in_progress: [],\n      completed: [],\n      failed: [],\n      cancelled: [],\n    };\n\n    inspections.forEach((inspection) => {\n      if (groups[inspection.status]) {\n        groups[inspection.status].push(inspection);\n      }\n    });\n\n    return groups;\n  }, [inspections]);\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case \"scheduled\":\n        return Clock;\n      case \"in_progress\":\n        return Play;\n      case \"completed\":\n        return CheckCircle;\n      case \"failed\":\n        return XCircle;\n      case \"cancelled\":\n        return AlertCircle;\n      default:\n        return Clock;\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"scheduled\":\n        return \"bg-gray-100\";\n      case \"in_progress\":\n        return \"bg-yellow-100\";\n      case \"completed\":\n        return \"bg-green-100\";\n      case \"failed\":\n        return \"bg-red-100\";\n      case \"cancelled\":\n        return \"bg-gray-100\";\n      default:\n        return \"bg-gray-100\";\n    }\n  };\n\n  return (\n    <div className=\"flex gap-md overflow-x-auto pb-md\">\n      {Object.entries(groupedInspections).map(([status, items]) => {\n        const StatusIcon = getStatusIcon(status);\n        return (\n          <div key={status} className=\"flex-shrink-0 w-80\">\n            <div className={`${getStatusColor(status)} rounded-lg p-sm mb-sm`}>\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center gap-sm\">\n                  <StatusIcon className=\"h-4 w-4\" />\n                  <h3 className=\"font-semibold capitalize\">{status.replace(\"_\", \" \")}</h3>\n                </div>\n                <Badge variant=\"secondary\">{items.length}</Badge>\n              </div>\n            </div>\n\n            <div className=\"space-y-sm max-h-[calc(100vh-300px)] overflow-y-auto\">\n              {items.map((inspection) => {\n                const TypeIcon = getTypeIcon(inspection.type);\n                return (\n                  <Card\n                    key={inspection.id}\n                    className={`p-sm cursor-pointer hover:shadow-md transition-shadow ${\n                      selectedInspections.has(inspection.id) ? \"ring-2 ring-primary\" : \"\"\n                    }`}\n                    onClick={() => onView(inspection)}\n                  >\n                    <div className=\"flex items-start justify-between mb-xs\">\n                      <Checkbox\n                        checked={selectedInspections.has(inspection.id)}\n                        onChange={() => onSelectInspection(inspection.id)}\n                        onClick={(e: React.MouseEvent) => e.stopPropagation()}\n                      />\n                      <div className=\"flex items-center gap-xs\">\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={(e) => {\n                            e.stopPropagation();\n                            onEdit(inspection);\n                          }}\n                        >\n                          <Edit className=\"h-3 w-3\" />\n                        </Button>\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={(e) => {\n                            e.stopPropagation();\n                            onDelete(inspection);\n                          }}\n                        >\n                          <Trash2 className=\"h-3 w-3 text-destructive\" />\n                        </Button>\n                      </div>\n                    </div>\n\n                    <div className=\"flex items-start gap-xs mb-xs\">\n                      <TypeIcon className=\"h-4 w-4 text-muted-foreground flex-shrink-0 mt-0.5\" />\n                      <h4 className=\"font-medium text-sm line-clamp-2\">{inspection.title}</h4>\n                    </div>\n                    \n                    <Badge \n                      variant={getTypeBadgeVariant(inspection.type)}\n                      className=\"mb-xs\"\n                    >\n                      {inspection.type}\n                    </Badge>\n\n                    {inspection.score !== undefined && inspection.score !== null && (\n                      <div className=\"flex items-center justify-between mb-xs\">\n                        <span className=\"text-xs text-muted-foreground\">Score:</span>\n                        <span className={`font-bold text-sm ${getScoreColor(inspection.score)}`}>\n                          {inspection.score}%\n                        </span>\n                      </div>\n                    )}\n\n                    {inspection.status === \"completed\" && (\n                      <Badge \n                        variant={inspection.is_passed ? \"success\" : \"destructive\"}\n                        className=\"mb-xs w-full justify-center\"\n                      >\n                        {inspection.is_passed ? \"PASSED\" : \"FAILED\"}\n                      </Badge>\n                    )}\n\n                    {inspection.project && (\n                      <div className=\"text-xs text-muted-foreground mb-xs truncate\">\n                        {inspection.project.name}\n                      </div>\n                    )}\n\n                    {inspection.inspector && (\n                      <div className=\"flex items-center gap-xs text-xs text-muted-foreground mb-xs\">\n                        <User className=\"h-3 w-3\" />\n                        <span className=\"truncate\">\n                          {inspection.inspector.full_name || inspection.inspector.email}\n                        </span>\n                      </div>\n                    )}\n\n                    <div className=\"flex items-center gap-xs text-xs text-muted-foreground\">\n                      <Calendar className=\"h-3 w-3\" />\n                      <span>\n                        {inspection.status === \"completed\" && inspection.completed_date\n                          ? format(parseISO(inspection.completed_date), \"MMM d\")\n                          : format(parseISO(inspection.scheduled_date), \"MMM d\")}\n                      </span>\n                    </div>\n\n                    {inspection.follow_up_required && (\n                      <div className=\"mt-xs pt-xs border-t\">\n                        <Badge variant=\"warning\" className=\"text-xs\">\n                          Follow-up required\n                        </Badge>\n                      </div>\n                    )}\n\n                    {/* Quick Actions */}\n                    <div className=\"mt-sm pt-sm border-t\">\n                      {status === \"scheduled\" && (\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          className=\"w-full\"\n                          onClick={(e) => {\n                            e.stopPropagation();\n                            onStatusChange(inspection, \"in_progress\");\n                          }}\n                        >\n                          Start Inspection\n                        </Button>\n                      )}\n                      {status === \"in_progress\" && (\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          className=\"w-full\"\n                          onClick={(e) => {\n                            e.stopPropagation();\n                            onStatusChange(inspection, \"completed\");\n                          }}\n                        >\n                          Complete Inspection\n                        </Button>\n                      )}\n                      {status === \"failed\" && (\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          className=\"w-full\"\n                          onClick={(e) => {\n                            e.stopPropagation();\n                            onStatusChange(inspection, \"scheduled\");\n                          }}\n                        >\n                          Reschedule\n                        </Button>\n                      )}\n                    </div>\n                  </Card>\n                );\n              })}\n              \n              {items.length === 0 && (\n                <div className=\"text-center py-lg text-muted-foreground text-sm\">\n                  No inspections\n                </div>\n              )}\n            </div>\n          </div>\n        );\n      })}\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ghxstship/apps/web/app/(app)/(shell)/projects/inspections/views/InspectionListView.tsx","messages":[{"ruleId":"react/jsx-no-undef","severity":2,"message":"'ArrowUp' is not defined.","line":130,"column":28,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":130,"endColumn":35},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'ArrowDown' is not defined.","line":132,"column":28,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":132,"endColumn":37},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'ArrowUpDown' is not defined.","line":135,"column":26,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":135,"endColumn":37},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Play' is not defined.","line":174,"column":24,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":174,"endColumn":28},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'CheckCircle' is not defined.","line":184,"column":24,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":184,"endColumn":35},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Eye' is not defined.","line":192,"column":22,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":192,"endColumn":25},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Edit' is not defined.","line":199,"column":22,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":199,"endColumn":26},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Copy' is not defined.","line":206,"column":22,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":206,"endColumn":26},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Trash2' is not defined.","line":214,"column":22,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":214,"endColumn":28}],"suppressedMessages":[],"errorCount":9,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport { Badge, Button, Checkbox } from \"@ghxstship/ui\";\nimport { format, parseISO } from \"date-fns\";\nimport type { Inspection } from \"../InspectionsClient\";\n\ninterface InspectionListViewProps {\n  inspections: Inspection[];\n  selectedInspections: Set<string>;\n  fieldVisibility: Array<{ id: string; label: string; visible: boolean; sortable: boolean }>;\n  sortField: string;\n  sortDirection: \"asc\" | \"desc\";\n  onSelectAll: () => void;\n  onSelectInspection: (id: string) => void;\n  onSort: (field: string) => void;\n  onView: (inspection: Inspection) => void;\n  onEdit: (inspection: Inspection) => void;\n  onDelete: (inspection: Inspection) => void;\n  onDuplicate: (inspection: Inspection) => void;\n  onStatusChange: (inspection: Inspection, status: string) => void;\n  getTypeBadgeVariant: (type: string) => any;\n  getStatusBadgeVariant: (status: string) => any;\n  getScoreColor: (score: number) => string;\n}\n\nexport default function InspectionListView({\n  inspections,\n  selectedInspections,\n  fieldVisibility,\n  sortField,\n  sortDirection,\n  onSelectAll,\n  onSelectInspection,\n  onSort,\n  onView,\n  onEdit,\n  onDelete,\n  onDuplicate,\n  onStatusChange,\n  getTypeBadgeVariant,\n  getStatusBadgeVariant,\n  getScoreColor,\n}: InspectionListViewProps) {\n  const visibleFields = fieldVisibility.filter((f) => f.visible);\n\n  const renderFieldValue = (inspection: Inspection, fieldId: string) => {\n    switch (fieldId) {\n      case \"title\":\n        return <span className=\"font-medium\">{inspection.title}</span>;\n      case \"type\":\n        return (\n          <Badge variant={getTypeBadgeVariant(inspection.type)}>\n            {inspection.type}\n          </Badge>\n        );\n      case \"status\":\n        return (\n          <Badge variant={getStatusBadgeVariant(inspection.status)}>\n            {inspection.status.replace(\"_\", \" \")}\n          </Badge>\n        );\n      case \"project\":\n        return inspection.project?.name || \"-\";\n      case \"scheduled_date\":\n        return format(parseISO(inspection.scheduled_date), \"MMM d, yyyy\");\n      case \"completed_date\":\n        return inspection.completed_date\n          ? format(parseISO(inspection.completed_date), \"MMM d, yyyy\")\n          : \"-\";\n      case \"inspector\":\n        return inspection.inspector?.full_name || inspection.inspector?.email || \"-\";\n      case \"location\":\n        return inspection.location || \"-\";\n      case \"score\":\n        return inspection.score !== undefined && inspection.score !== null ? (\n          <span className={`font-bold ${getScoreColor(inspection.score)}`}>\n            {inspection.score}%\n          </span>\n        ) : (\n          \"-\"\n        );\n      case \"is_passed\":\n        return inspection.status === \"completed\" ? (\n          <Badge variant={inspection.is_passed ? \"success\" : \"destructive\"}>\n            {inspection.is_passed ? \"PASSED\" : \"FAILED\"}\n          </Badge>\n        ) : (\n          \"-\"\n        );\n      case \"follow_up_required\":\n        return inspection.follow_up_required ? (\n          <Badge variant=\"warning\">Required</Badge>\n        ) : (\n          <Badge variant=\"secondary\">Not Required</Badge>\n        );\n      case \"created_at\":\n        return format(parseISO(inspection.created_at), \"MMM d, yyyy\");\n      case \"updated_at\":\n        return format(parseISO(inspection.updated_at), \"MMM d, yyyy\");\n      default:\n        return \"-\";\n    }\n  };\n\n  return (\n    <div className=\"overflow-x-auto\">\n      <table className=\"w-full\">\n        <thead>\n          <tr className=\"border-b\">\n            <th className=\"text-left p-sm\">\n              <Checkbox\n                checked={selectedInspections.size === inspections.length && inspections.length > 0}\n                onChange={onSelectAll}\n              />\n            </th>\n            {visibleFields.map((field) => (\n              <th\n                key={field.id}\n                className={`text-left p-sm ${\n                  field.sortable ? \"cursor-pointer hover:bg-muted/50\" : \"\"\n                }`}\n                onClick={() => field.sortable && onSort(field.id)}\n              >\n                <div className=\"flex items-center gap-xs\">\n                  {field.label}\n                  {field.sortable && (\n                    <>\n                      {sortField === field.id ? (\n                        sortDirection === \"asc\" ? (\n                          <ArrowUp className=\"h-3 w-3\" />\n                        ) : (\n                          <ArrowDown className=\"h-3 w-3\" />\n                        )\n                      ) : (\n                        <ArrowUpDown className=\"h-3 w-3 opacity-30\" />\n                      )}\n                    </>\n                  )}\n                </div>\n              </th>\n            ))}\n            <th className=\"text-left p-sm\">Actions</th>\n          </tr>\n        </thead>\n        <tbody>\n          {inspections.map((inspection) => (\n            <tr\n              key={inspection.id}\n              className={`border-b hover:bg-muted/50 cursor-pointer ${\n                selectedInspections.has(inspection.id) ? \"bg-primary/5\" : \"\"\n              }`}\n              onClick={() => onView(inspection)}\n            >\n              <td className=\"p-sm\" onClick={(e) => e.stopPropagation()}>\n                <Checkbox\n                  checked={selectedInspections.has(inspection.id)}\n                  onChange={() => onSelectInspection(inspection.id)}\n                />\n              </td>\n              {visibleFields.map((field) => (\n                <td key={field.id} className=\"p-sm\">\n                  {renderFieldValue(inspection, field.id)}\n                </td>\n              ))}\n              <td className=\"p-sm\" onClick={(e) => e.stopPropagation()}>\n                <div className=\"flex items-center gap-xs\">\n                  {inspection.status === \"scheduled\" && (\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={() => onStatusChange(inspection, \"in_progress\")}\n                      title=\"Start Inspection\"\n                    >\n                      <Play className=\"h-4 w-4\" />\n                    </Button>\n                  )}\n                  {inspection.status === \"in_progress\" && (\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={() => onStatusChange(inspection, \"completed\")}\n                      title=\"Complete Inspection\"\n                    >\n                      <CheckCircle className=\"h-4 w-4\" />\n                    </Button>\n                  )}\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={() => onView(inspection)}\n                  >\n                    <Eye className=\"h-4 w-4\" />\n                  </Button>\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={() => onEdit(inspection)}\n                  >\n                    <Edit className=\"h-4 w-4\" />\n                  </Button>\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={() => onDuplicate(inspection)}\n                  >\n                    <Copy className=\"h-4 w-4\" />\n                  </Button>\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={() => onDelete(inspection)}\n                    className=\"text-destructive\"\n                  >\n                    <Trash2 className=\"h-4 w-4\" />\n                  </Button>\n                </div>\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n      \n      {inspections.length === 0 && (\n        <div className=\"text-center py-xl text-muted-foreground\">\n          No inspections to display\n        </div>\n      )}\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ghxstship/apps/web/app/(app)/(shell)/projects/locations/LocationsTableClient.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'router'. Either include it or remove the dependency array.","line":278,"column":5,"nodeType":"ArrayExpression","endLine":278,"endColumn":54,"suggestions":[{"desc":"Update the dependencies array to be: [formData, openId, orgId, router, supabase, validateForm]","fix":{"range":[7961,8010],"text":"[formData, openId, orgId, router, supabase, validateForm]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { MapPin, Users } from \"lucide-react\";\nimport { useCallback, useMemo, useState, type ChangeEvent, type FormEvent } from 'react';\nimport { useRouter } from 'next/navigation';\nimport { createBrowserClient } from '@ghxstship/auth';\nimport { Badge, Button } from '@ghxstship/ui';\nimport AppDrawer from '@/app/_components/shared/AppDrawer';\n\nexport type LocationType =\n  | 'venue'\n  | 'office'\n  | 'warehouse'\n  | 'studio'\n  | 'outdoor'\n  | 'virtual'\n  | 'other';\n\nexport type LocationRow = {\n  id: string;\n  name: string;\n  address: string | null;\n  city: string | null;\n  state: string | null;\n  country: string | null;\n  type: string;\n  capacity: number | null;\n  project_id: string | null;\n  project?: { name: string };\n};\n\ninterface LocationComment {\n  id: string;\n  body: string;\n  created_at: string;\n}\n\ninterface LocationActivity {\n  action: string;\n  occurred_at: string;\n}\n\ninterface LocationFormData {\n  name: string;\n  type: LocationType;\n  address: string;\n  city: string;\n  state: string;\n  country: string;\n  capacity: string;\n  notes: string;\n}\n\ntype LocationFormErrors = Partial<Record<keyof LocationFormData, string>>;\n\nconst initialFormState: LocationFormData = {\n  name: '',\n  type: 'venue',\n  address: '',\n  city: '',\n  state: '',\n  country: '',\n  capacity: '',\n  notes: '',\n};\n\ninterface LocationsTableClientProps {\n  rows: LocationRow[];\n  orgId: string;\n}\n\nconst typeColorClasses: Record<LocationType, string> = {\n  venue: 'bg-secondary/10 color-secondary-foreground',\n  office: 'bg-accent/10 color-accent-foreground',\n  warehouse: 'bg-secondary/50 color-muted',\n  studio: 'bg-accent/50 color-accent-foreground',\n  outdoor: 'bg-success/10 color-success-foreground',\n  virtual: 'bg-info/10 text-info-foreground',\n  other: 'bg-secondary/50 color-muted',\n};\n\nconst getTypeColor = (type: string) => typeColorClasses[type as LocationType] ?? 'bg-secondary/50 color-muted';\n\nconst formatAddress = (location: LocationRow | null) => {\n  if (!location) {\n    return 'No address';\n  }\n  const parts = [location.address, location.city, location.state, location.country].filter(Boolean);\n  return parts.length > 0 ? parts.join(', ') : 'No address';\n};\n\nexport default function LocationsTableClient({ rows, orgId }: LocationsTableClientProps) {\n  const router = useRouter();\n  const supabase = useMemo(() => createBrowserClient(), []);\n  const [openId, setOpenId] = useState<string | null>(null);\n  const [saving, setSaving] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [formData, setFormData] = useState<LocationFormData>(initialFormState);\n  const [formErrors, setFormErrors] = useState<LocationFormErrors>({});\n  const [comments, setComments] = useState<LocationComment[]>([]);\n  const [activities, setActivities] = useState<LocationActivity[]>([]);\n  const [commentsLoading, setCommentsLoading] = useState(false);\n  const [activityLoading, setActivityLoading] = useState(false);\n  const [commentInput, setCommentInput] = useState('');\n  const [commentSaving, setCommentSaving] = useState(false);\n\n  const current = rows.find((row) => row.id === openId) ?? null;\n\n  const resetDrawerState = useCallback(() => {\n    setFormData(initialFormState);\n    setFormErrors({});\n    setComments([]);\n    setActivities([]);\n    setCommentsLoading(false);\n    setActivityLoading(false);\n    setCommentInput('');\n    setError(null);\n  }, []);\n\n  const loadSupportingData = useCallback(\n    async (locationId: string) => {\n      setCommentsLoading(true);\n      setActivityLoading(true);\n\n      try {\n        const { data, error: commentsError } = await supabase\n          .from('comments')\n          .select('id, body, created_at')\n          .eq('organization_id', orgId)\n          .eq('entity_type', 'location')\n          .eq('entity_id', locationId)\n          .order('created_at', { ascending: false })\n          .limit(50);\n\n        if (commentsError) {\n          throw commentsError;\n        }\n\n        setComments(data ?? []);\n      } catch (commentsLoadError) {\n        setError(\n          commentsLoadError instanceof Error ? commentsLoadError.message : 'Failed to load comments',\n        );\n        setComments([]);\n      } finally {\n        setCommentsLoading(false);\n      }\n\n      try {\n        const response = await fetch(`/api/audit/${orgId}/locations/${locationId}`);\n        if (!response.ok) {\n          throw new Error('Failed to load activity');\n        }\n        const json = await response.json();\n        setActivities((json?.data as LocationActivity[]) ?? []);\n      } catch (activityError) {\n        setError(activityError instanceof Error ? activityError.message : 'Failed to load activity');\n        setActivities([]);\n      } finally {\n        setActivityLoading(false);\n      }\n    },\n    [orgId, supabase],\n  );\n\n  const handleOpen = useCallback(\n    (id: string) => {\n      const row = rows.find((entry) => entry.id === id);\n      if (!row) {\n        return;\n      }\n\n      setOpenId(id);\n      setFormData({\n        name: row.name ?? '',\n        type: (row.type as LocationType) ?? 'venue',\n        address: row.address ?? '',\n        city: row.city ?? '',\n        state: row.state ?? '',\n        country: row.country ?? '',\n        capacity: row.capacity != null ? String(row.capacity) : '',\n        notes: '',\n      });\n      setFormErrors({});\n      setCommentInput('');\n      setError(null);\n      void loadSupportingData(id);\n    },\n    [loadSupportingData, rows],\n  );\n\n  const handleClose = useCallback(() => {\n    if (saving) {\n      return;\n    }\n    setOpenId(null);\n    resetDrawerState();\n  }, [resetDrawerState, saving]);\n\n  const validateForm = useCallback((draft: LocationFormData): LocationFormErrors => {\n    const nextErrors: LocationFormErrors = {};\n\n    if (!draft.name.trim()) {\n      nextErrors.name = 'Name is required';\n    }\n\n    return nextErrors;\n  }, []);\n\n  const handleInputChange = useCallback(\n    (event: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n      const { id, value } = event.target;\n      setFormData((prev) => ({ ...prev, [id]: value }));\n    },\n    [],\n  );\n\n  const handleSelectChange = useCallback((event: ChangeEvent<HTMLSelectElement>) => {\n    const { id, value } = event.target;\n    setFormData((prev) => ({ ...prev, [id]: value as LocationType }));\n  }, []);\n\n  const handleSave = useCallback(\n    async (event: FormEvent<HTMLFormElement>) => {\n      event.preventDefault();\n      if (!openId) {\n        return;\n      }\n\n      const validation = validateForm(formData);\n      setFormErrors(validation);\n      if (Object.keys(validation).length > 0) {\n        return;\n      }\n\n      setSaving(true);\n      setError(null);\n\n      try {\n        const trimmedCapacity = formData.capacity.trim();\n        const capacityNumber = trimmedCapacity ? Number(trimmedCapacity) : null;\n\n        const updateData = {\n          name: formData.name.trim(),\n          type: formData.type,\n          address: formData.address.trim() || null,\n          city: formData.city.trim() || null,\n          state: formData.state.trim() || null,\n          country: formData.country.trim() || null,\n          capacity: Number.isFinite(capacityNumber) ? capacityNumber : null,\n          notes: formData.notes.trim() || null,\n        };\n\n        const { error: updateError } = await supabase\n          .from('locations')\n          .update(updateData)\n          .eq('id', openId)\n          .eq('organization_id', orgId);\n\n        if (updateError) {\n          throw updateError;\n        }\n\n        if (typeof window !== 'undefined' && (window as unknown).posthog) {\n          (window as unknown).posthog.capture('location.updated', {\n            organization_id: orgId,\n            location_id: openId,\n          });\n        }\n\n        router.refresh();\n      } catch (saveError) {\n        setError(saveError instanceof Error ? saveError.message : 'Failed to update location');\n      } finally {\n        setSaving(false);\n      }\n    },\n    [formData, openId, orgId, supabase, validateForm],\n  );\n\n  const handleCommentSubmit = useCallback(\n    async (event: FormEvent<HTMLFormElement>) => {\n      event.preventDefault();\n      if (!openId) {\n        return;\n      }\n\n      const body = commentInput.trim();\n      if (!body) {\n        return;\n      }\n\n      setCommentSaving(true);\n      setError(null);\n\n      try {\n        const { data, error: insertError } = await supabase\n          .from('comments')\n          .insert({\n            organization_id: orgId,\n            entity_type: 'location',\n            entity_id: openId,\n            body,\n          })\n          .select('id, body, created_at')\n          .single();\n\n        if (insertError) {\n          throw insertError;\n        }\n\n        if (data) {\n          setComments((prev) => [data, ...prev]);\n          setCommentInput('');\n        }\n      } catch (commentError) {\n        setError(commentError instanceof Error ? commentError.message : 'Failed to add comment');\n      } finally {\n        setCommentSaving(false);\n      }\n    },\n    [commentInput, openId, orgId, supabase],\n  );\n\n  return (\n    <div className=\"overflow-x-auto\">\n      <table className=\"w-full border-collapse text-body-sm\">\n        <thead>\n          <tr className=\"sticky top-0\">\n            <th className=\"border-b p-sm text-left\">Location</th>\n            <th className=\"border-b p-sm text-left\">Type</th>\n            <th className=\"border-b p-sm text-left\">Address</th>\n            <th className=\"border-b p-sm text-left\">Capacity</th>\n            <th className=\"border-b p-sm text-left\">Project</th>\n          </tr>\n        </thead>\n        <tbody>\n          {rows.map((row) => (\n            <tr\n              key={row.id}\n              className=\"hover:bg-accent/20 cursor-pointer\"\n              onClick={() => {\n                void handleOpen(row.id);\n              }}\n            >\n              <td className=\"border-b p-sm\">\n                <div className=\"flex items-center gap-sm\">\n                  <MapPin className=\"w-4 h-4 color-accent\" />\n                  {row.name}\n                </div>\n              </td>\n              <td className=\"border-b p-sm\">\n                <Badge className={getTypeColor(row.type)}>{row.type}</Badge>\n              </td>\n              <td className=\"border-b p-sm text-body-sm color-muted\">{formatAddress(row)}</td>\n              <td className=\"border-b p-sm\">\n                {row.capacity ? (\n                  <div className=\"flex items-center gap-xs\">\n                    <Users className=\"w-3 h-3\" />\n                    {row.capacity}\n                  </div>\n                ) : (\n                  '-'\n                )}\n              </td>\n              <td className=\"border-b p-sm\">{row.project?.name || '-'}</td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n\n      <AppDrawer\n        open={!!openId}\n        onClose={handleClose}\n        record={current}\n        fields={[]}\n        mode=\"view\"\n        title={current?.name || 'Location Details'}\n        tabs={[\n          {\n            key: 'details',\n            label: 'Details',\n            content: current ? (\n              <div className=\"stack-sm text-body-sm\">\n                {error ? (\n                  <div role=\"alert\" className=\"mb-sm rounded border border-destructive/30 bg-destructive/10 px-sm py-xs color-destructive\">\n                    {error}\n                  </div>\n                ) : null}\n                <div>\n                  <span className=\"form-label\">Name:</span> {current.name}\n                </div>\n                <div className=\"flex items-center gap-sm\">\n                  <span className=\"form-label\">Type:</span>\n                  <Badge className={getTypeColor(current.type)}>{current.type}</Badge>\n                </div>\n                <div>\n                  <span className=\"form-label\">Address:</span> {formatAddress(current)}\n                </div>\n                <div>\n                  <span className=\"form-label\">Capacity:</span> {current.capacity ?? 'Not specified'}\n                </div>\n                <div>\n                  <span className=\"form-label\">Project:</span> {current.project?.name || 'No project assigned'}\n                </div>\n              </div>\n            ) : (\n              <div />\n            ),\n          },\n          {\n            key: 'edit',\n            label: 'Edit',\n            content: current ? (\n              <form onSubmit={handleSave} className=\"stack-sm\" aria-live=\"polite\">\n                {error ? (\n                  <div role=\"alert\" className=\"rounded border border-destructive/30 bg-destructive/10 px-sm py-xs text-body-sm color-destructive\">\n                    {error}\n                  </div>\n                ) : null}\n\n                <div className=\"grid gap-xs\">\n                  <label htmlFor=\"name\" className=\"text-body-sm form-label\">\n                    Location Name\n                  </label>\n                  <input\n                    id=\"name\"\n                    type=\"text\"\n                    className=\"rounded border px-md py-xs\"\n                    value={formData.name}\n                    onChange={handleInputChange}\n                    aria-invalid={formErrors.name ? 'true' : 'false'}\n                  />\n                  {formErrors.name ? (\n                    <div className=\"text-body-sm color-destructive\">{formErrors.name}</div>\n                  ) : null}\n                </div>\n\n                <div className=\"grid gap-xs\">\n                  <label htmlFor=\"type\" className=\"text-body-sm form-label\">\n                    Type\n                  </label>\n                  <select\n                    id=\"type\"\n                    className=\"rounded border px-md py-xs\"\n                    value={formData.type}\n                    onChange={handleSelectChange}\n                  >\n                    <option value=\"venue\">Venue</option>\n                    <option value=\"office\">Office</option>\n                    <option value=\"warehouse\">Warehouse</option>\n                    <option value=\"studio\">Studio</option>\n                    <option value=\"outdoor\">Outdoor</option>\n                    <option value=\"virtual\">Virtual</option>\n                    <option value=\"other\">Other</option>\n                  </select>\n                </div>\n\n                <div className=\"grid gap-xs\">\n                  <label htmlFor=\"address\" className=\"text-body-sm form-label\">\n                    Address\n                  </label>\n                  <input\n                    id=\"address\"\n                    type=\"text\"\n                    className=\"rounded border px-md py-xs\"\n                    value={formData.address}\n                    onChange={handleInputChange}\n                  />\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-sm\">\n                  <div className=\"grid gap-xs\">\n                    <label htmlFor=\"city\" className=\"text-body-sm form-label\">\n                      City\n                    </label>\n                    <input\n                      id=\"city\"\n                      type=\"text\"\n                      className=\"rounded border px-md py-xs\"\n                      value={formData.city}\n                      onChange={handleInputChange}\n                    />\n                  </div>\n\n                  <div className=\"grid gap-xs\">\n                    <label htmlFor=\"state\" className=\"text-body-sm form-label\">\n                      State/Province\n                    </label>\n                    <input\n                      id=\"state\"\n                      type=\"text\"\n                      className=\"rounded border px-md py-xs\"\n                      value={formData.state}\n                      onChange={handleInputChange}\n                    />\n                  </div>\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-sm\">\n                  <div className=\"grid gap-xs\">\n                    <label htmlFor=\"country\" className=\"text-body-sm form-label\">\n                      Country\n                    </label>\n                    <input\n                      id=\"country\"\n                      type=\"text\"\n                      className=\"rounded border px-md py-xs\"\n                      value={formData.country}\n                      onChange={handleInputChange}\n                    />\n                  </div>\n\n                  <div className=\"grid gap-xs\">\n                    <label htmlFor=\"capacity\" className=\"text-body-sm form-label\">\n                      Capacity\n                    </label>\n                    <input\n                      id=\"capacity\"\n                      type=\"number\"\n                      min=\"0\"\n                      className=\"rounded border px-md py-xs\"\n                      value={formData.capacity}\n                      onChange={handleInputChange}\n                    />\n                  </div>\n                </div>\n\n                <div className=\"grid gap-xs\">\n                  <label htmlFor=\"notes\" className=\"text-body-sm form-label\">\n                    Notes\n                  </label>\n                  <textarea\n                    id=\"notes\"\n                    className=\"rounded border px-md py-xs\"\n                    rows={3}\n                    value={formData.notes}\n                    onChange={handleInputChange}\n                  />\n                </div>\n\n                <div className=\"flex items-center justify-between border-t pt-sm\">\n                  <div className=\"text-body-sm opacity-70\">{saving ? 'Saving changes...' : 'Ready to save'}</div>\n                  <Button type=\"submit\" disabled={saving}>\n                    {saving ? 'Saving…' : 'Save Changes'}\n                  </Button>\n                </div>\n              </form>\n            ) : (\n              <div />\n            ),\n          },\n          {\n            key: 'comments',\n            label: 'Comments',\n            content: current ? (\n              <div className=\"stack-sm\">\n                <form onSubmit={handleCommentSubmit} className=\"flex items-start gap-sm\">\n                  <textarea\n                    name=\"body\"\n                    className=\"min-h-16 w-full rounded border p-sm\"\n                    placeholder=\"Add a comment...\"\n                    value={commentInput}\n                    onChange={(event) => setCommentInput(event.target.value)}\n                    disabled={commentSaving}\n                  />\n                  <Button type=\"submit\" disabled={commentSaving || !commentInput.trim()}>\n                    {commentSaving ? 'Posting…' : 'Post'}\n                  </Button>\n                </form>\n\n                {commentsLoading ? (\n                  <div className=\"text-body-sm opacity-70\">Loading comments...</div>\n                ) : comments.length === 0 ? (\n                  <div className=\"text-body-sm color-muted\">No comments yet.</div>\n                ) : (\n                  <ul className=\"stack-sm\">\n                    {comments.map((comment) => (\n                      <li key={comment.id} className=\"rounded border p-sm\">\n                        <div className=\"text-body-sm whitespace-pre-wrap\">{comment.body}</div>\n                        <div className=\"text-body-xs color-muted\">\n                          {new Date(comment.created_at).toLocaleString()}\n                        </div>\n                      </li>\n                    ))}\n                  </ul>\n                )}\n              </div>\n            ) : (\n              <div className=\"text-body-sm color-muted\">Select a location to view comments.</div>\n            ),\n          },\n          {\n            key: 'activity',\n            label: 'Activity',\n            content: current ? (\n              <div className=\"stack-sm text-body-sm\">\n                {activityLoading ? (\n                  'Loading activity...'\n                ) : activities.length === 0 ? (\n                  <div className=\"text-body-sm color-muted\">No activity yet.</div>\n                ) : (\n                  <ul className=\"stack-xs\">\n                    {activities.map((activity, index) => (\n                      <li key={`${activity.occurred_at}-${index}`} className=\"flex items-center justify-between gap-md\">\n                        <div className=\"font-mono text-body-xs opacity-70\">\n                          {new Date(activity.occurred_at).toLocaleString()}\n                        </div>\n                        <div className=\"flex-1\">{activity.action}</div>\n                      </li>\n                    ))}\n                  </ul>\n                )}\n              </div>\n            ) : (\n              <div className=\"text-body-sm color-muted\">Select a location to view activity.</div>\n            ),\n          },\n        ]}\n      />\n    </div>\n  );\n}\n\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ghxstship/apps/web/app/(app)/(shell)/projects/locations/ViewLocationDrawer.tsx","messages":[{"ruleId":"jsx-a11y/alt-text","severity":1,"message":"Image elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","line":51,"column":17,"nodeType":"JSXOpeningElement","endLine":51,"endColumn":46},{"ruleId":"@next/next/no-img-element","severity":1,"message":"Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` or a custom image loader to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","line":57,"column":21,"nodeType":"JSXOpeningElement","endLine":61,"endColumn":23},{"ruleId":"@next/next/no-img-element","severity":1,"message":"Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` or a custom image loader to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","line":403,"column":21,"nodeType":"JSXOpeningElement","endLine":407,"endColumn":23}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport { Eye, Edit, Navigation, MapPin, Building, Users, Phone, Mail, Clock, Car, Train, Wifi, Coffee, Monitor, Accessibility, DollarSign, Calendar, Tag, Image, FileText, ExternalLink, Share2 } from \"lucide-react\";\nimport {\n  Button,\n  Badge,\n  Tabs,\n  TabsList,\n  TabsTrigger,\n  TabsContent,\n} from \"@ghxstship/ui\";\nimport AppDrawer from \"@/app/_components/shared/AppDrawer\";\nimport { format, parseISO, formatDistanceToNow } from \"date-fns\";\nimport type { Location } from \"./LocationsClient\";\nimport type { LucideIcon } from \"lucide-react\";\n\ninterface ViewLocationDrawerProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  location: Location;\n  onEdit?: () => void;\n  onNavigate?: () => void;\n  getTypeIcon: (type: string) => LucideIcon;\n  getAvailabilityBadgeVariant: (status: string) => any;\n  getTypeBadgeVariant: (type: string) => any;\n}\n\nexport default function ViewLocationDrawer({\n  open,\n  onOpenChange,\n  location,\n  onEdit,\n  onNavigate,\n  getTypeIcon,\n  getAvailabilityBadgeVariant,\n  getTypeBadgeVariant,\n}: ViewLocationDrawerProps) {\n  const TypeIcon = getTypeIcon(location.type || \"other\");\n\n  // Custom tabs for location details\n  const tabs = [\n    {\n      key: \"overview\",\n      label: \"Overview\",\n      content: (\n        <div className=\"space-y-md\">\n          {/* Location Images */}\n          {location.images && location.images.length > 0 && (\n            <div className=\"space-y-sm\">\n              <h4 className=\"font-semibold flex items-center gap-xs\">\n                <Image className=\"h-4 w-4\" />\n                Photos\n              </h4>\n              <div className=\"grid grid-cols-2 gap-sm\">\n                {location.images.slice(0, 4).map((image, index) => (\n                  <div key={index} className=\"aspect-video bg-muted rounded-lg overflow-hidden\">\n                    <img\n                      src={image}\n                      alt={`${location.name} ${index + 1}`}\n                      className=\"w-full h-full object-cover\"\n                    />\n                  </div>\n                ))}\n              </div>\n              {location.images.length > 4 && (\n                <p className=\"text-sm text-muted-foreground\">\n                  +{location.images.length - 4} more photos\n                </p>\n              )}\n            </div>\n          )}\n\n          {/* Type and Availability */}\n          <div className=\"grid grid-cols-2 gap-md\">\n            <div className=\"space-y-xs\">\n              <div className=\"flex items-center gap-xs text-sm text-muted-foreground\">\n                <TypeIcon className=\"h-4 w-4\" />\n                <span>Type</span>\n              </div>\n              <Badge variant={getTypeBadgeVariant(location.type || \"other\")}>\n                {location.type || \"other\"}\n              </Badge>\n            </div>\n\n            <div className=\"space-y-xs\">\n              <div className=\"flex items-center gap-xs text-sm text-muted-foreground\">\n                <Calendar className=\"h-4 w-4\" />\n                <span>Availability</span>\n              </div>\n              <Badge variant={getAvailabilityBadgeVariant(location.availability_status || \"available\")}>\n                {location.availability_status || \"available\"}\n              </Badge>\n            </div>\n          </div>\n\n          {/* Address */}\n          {(location.address || location.city) && (\n            <div className=\"space-y-xs\">\n              <div className=\"flex items-center gap-xs text-sm text-muted-foreground\">\n                <MapPin className=\"h-4 w-4\" />\n                <span>Address</span>\n              </div>\n              <p className=\"font-medium\">\n                {[location.address, location.city, location.state, location.postal_code, location.country]\n                  .filter(Boolean)\n                  .join(\", \")}\n              </p>\n              {(location.coordinates || location.address) && (\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={onNavigate}\n                  className=\"mt-xs\"\n                >\n                  <Navigation className=\"mr-2 h-4 w-4\" />\n                  Get Directions\n                </Button>\n              )}\n            </div>\n          )}\n\n          {/* Capacity and Size */}\n          <div className=\"grid grid-cols-2 gap-md\">\n            {location.capacity && (\n              <div className=\"space-y-xs\">\n                <div className=\"flex items-center gap-xs text-sm text-muted-foreground\">\n                  <Users className=\"h-4 w-4\" />\n                  <span>Capacity</span>\n                </div>\n                <p className=\"font-medium\">{location.capacity.toLocaleString()} people</p>\n              </div>\n            )}\n\n            {location.size && (\n              <div className=\"space-y-xs\">\n                <div className=\"flex items-center gap-xs text-sm text-muted-foreground\">\n                  <Building className=\"h-4 w-4\" />\n                  <span>Size</span>\n                </div>\n                <p className=\"font-medium\">{location.size.toLocaleString()} sq ft</p>\n              </div>\n            )}\n          </div>\n\n          {/* Rental Rate */}\n          {location.rental_rate && (\n            <div className=\"space-y-xs\">\n              <div className=\"flex items-center gap-xs text-sm text-muted-foreground\">\n                <DollarSign className=\"h-4 w-4\" />\n                <span>Rental Rate</span>\n              </div>\n              <p className=\"font-medium text-lg\">\n                {location.currency || \"$\"}{location.rental_rate.toLocaleString()} / day\n              </p>\n            </div>\n          )}\n\n          {/* Operating Hours */}\n          {location.operating_hours && (\n            <div className=\"space-y-xs\">\n              <div className=\"flex items-center gap-xs text-sm text-muted-foreground\">\n                <Clock className=\"h-4 w-4\" />\n                <span>Operating Hours</span>\n              </div>\n              <p className=\"font-medium\">{location.operating_hours}</p>\n            </div>\n          )}\n\n          {/* Project */}\n          {location.project && (\n            <div className=\"space-y-xs\">\n              <div className=\"flex items-center gap-xs text-sm text-muted-foreground\">\n                <FileText className=\"h-4 w-4\" />\n                <span>Project</span>\n              </div>\n              <p className=\"font-medium\">{location.project.name}</p>\n            </div>\n          )}\n\n          {/* Notes */}\n          {location.notes && (\n            <div className=\"space-y-xs\">\n              <div className=\"flex items-center gap-xs text-sm text-muted-foreground\">\n                <FileText className=\"h-4 w-4\" />\n                <span>Notes</span>\n              </div>\n              <p className=\"text-sm\">{location.notes}</p>\n            </div>\n          )}\n\n          {/* Tags */}\n          {location.tags && location.tags.length > 0 && (\n            <div className=\"space-y-xs\">\n              <div className=\"flex items-center gap-xs text-sm text-muted-foreground\">\n                <Tag className=\"h-4 w-4\" />\n                <span>Tags</span>\n              </div>\n              <div className=\"flex flex-wrap gap-xs\">\n                {location.tags.map((tag, index) => (\n                  <Badge key={index} variant=\"outline\">\n                    {tag}\n                  </Badge>\n                ))}\n              </div>\n            </div>\n          )}\n\n          {/* Featured Badge */}\n          {location.is_featured && (\n            <Badge variant=\"warning\" className=\"w-fit\">\n              ⭐ Featured Location\n            </Badge>\n          )}\n        </div>\n      ),\n    },\n    {\n      key: \"amenities\",\n      label: \"Amenities & Access\",\n      content: (\n        <div className=\"space-y-md\">\n          {/* Amenities */}\n          {location.amenities && location.amenities.length > 0 ? (\n            <div className=\"space-y-sm\">\n              <h4 className=\"font-semibold flex items-center gap-xs\">\n                <Wifi className=\"h-4 w-4\" />\n                Amenities\n              </h4>\n              <div className=\"grid grid-cols-2 gap-sm\">\n                {location.amenities.map((amenity, index) => (\n                  <div key={index} className=\"flex items-center gap-xs\">\n                    <div className=\"w-2 h-2 rounded-full bg-primary\" />\n                    <span className=\"text-sm\">{amenity}</span>\n                  </div>\n                ))}\n              </div>\n            </div>\n          ) : (\n            <div className=\"text-center py-md text-muted-foreground\">\n              <Coffee className=\"mx-auto h-8 w-8 mb-sm opacity-50\" />\n              <p className=\"text-sm\">No amenities listed</p>\n            </div>\n          )}\n\n          {/* Accessibility Features */}\n          {location.accessibility_features && location.accessibility_features.length > 0 && (\n            <div className=\"space-y-sm\">\n              <h4 className=\"font-semibold flex items-center gap-xs\">\n                <Accessibility className=\"h-4 w-4\" />\n                Accessibility Features\n              </h4>\n              <div className=\"grid grid-cols-1 gap-sm\">\n                {location.accessibility_features.map((feature, index) => (\n                  <div key={index} className=\"flex items-center gap-xs\">\n                    <div className=\"w-2 h-2 rounded-full bg-success\" />\n                    <span className=\"text-sm\">{feature}</span>\n                  </div>\n                ))}\n              </div>\n            </div>\n          )}\n\n          {/* Parking */}\n          <div className=\"space-y-sm\">\n            <h4 className=\"font-semibold flex items-center gap-xs\">\n              <Car className=\"h-4 w-4\" />\n              Parking\n            </h4>\n            {location.parking_available ? (\n              <div className=\"space-y-xs\">\n                <Badge variant=\"success\">Parking Available</Badge>\n                {location.parking_capacity && (\n                  <p className=\"text-sm\">\n                    Capacity: {location.parking_capacity} vehicles\n                  </p>\n                )}\n              </div>\n            ) : (\n              <Badge variant=\"secondary\">No Parking</Badge>\n            )}\n          </div>\n\n          {/* Public Transport */}\n          {location.public_transport && (\n            <div className=\"space-y-sm\">\n              <h4 className=\"font-semibold flex items-center gap-xs\">\n                <Train className=\"h-4 w-4\" />\n                Public Transport\n              </h4>\n              <p className=\"text-sm\">{location.public_transport}</p>\n            </div>\n          )}\n        </div>\n      ),\n    },\n    {\n      key: \"contact\",\n      label: \"Contact\",\n      content: (\n        <div className=\"space-y-md\">\n          {location.contact_name || location.contact_phone || location.contact_email ? (\n            <>\n              {/* Contact Person */}\n              {location.contact_name && (\n                <div className=\"space-y-xs\">\n                  <div className=\"flex items-center gap-xs text-sm text-muted-foreground\">\n                    <Users className=\"h-4 w-4\" />\n                    <span>Contact Person</span>\n                  </div>\n                  <p className=\"font-medium\">{location.contact_name}</p>\n                </div>\n              )}\n\n              {/* Phone */}\n              {location.contact_phone && (\n                <div className=\"space-y-xs\">\n                  <div className=\"flex items-center gap-xs text-sm text-muted-foreground\">\n                    <Phone className=\"h-4 w-4\" />\n                    <span>Phone</span>\n                  </div>\n                  <a\n                    href={`tel:${location.contact_phone}`}\n                    className=\"font-medium text-primary hover:underline\"\n                  >\n                    {location.contact_phone}\n                  </a>\n                </div>\n              )}\n\n              {/* Email */}\n              {location.contact_email && (\n                <div className=\"space-y-xs\">\n                  <div className=\"flex items-center gap-xs text-sm text-muted-foreground\">\n                    <Mail className=\"h-4 w-4\" />\n                    <span>Email</span>\n                  </div>\n                  <a\n                    href={`mailto:${location.contact_email}`}\n                    className=\"font-medium text-primary hover:underline\"\n                  >\n                    {location.contact_email}\n                  </a>\n                </div>\n              )}\n            </>\n          ) : (\n            <div className=\"text-center py-lg text-muted-foreground\">\n              <Phone className=\"mx-auto h-8 w-8 mb-sm opacity-50\" />\n              <p>No contact information available</p>\n            </div>\n          )}\n\n          {/* Quick Actions */}\n          <div className=\"space-y-sm pt-md border-t\">\n            <h4 className=\"font-semibold\">Quick Actions</h4>\n            <div className=\"space-y-sm\">\n              {location.contact_phone && (\n                <Button\n                  variant=\"outline\"\n                  className=\"w-full justify-start\"\n                  onClick={() => window.open(`tel:${location.contact_phone}`, \"_blank\")}\n                >\n                  <Phone className=\"mr-2 h-4 w-4\" />\n                  Call {location.contact_name || \"Contact\"}\n                </Button>\n              )}\n              {location.contact_email && (\n                <Button\n                  variant=\"outline\"\n                  className=\"w-full justify-start\"\n                  onClick={() => window.open(`mailto:${location.contact_email}`, \"_blank\")}\n                >\n                  <Mail className=\"mr-2 h-4 w-4\" />\n                  Email {location.contact_name || \"Contact\"}\n                </Button>\n              )}\n              {(location.coordinates || location.address) && (\n                <Button\n                  variant=\"outline\"\n                  className=\"w-full justify-start\"\n                  onClick={onNavigate}\n                >\n                  <Navigation className=\"mr-2 h-4 w-4\" />\n                  Get Directions\n                </Button>\n              )}\n            </div>\n          </div>\n        </div>\n      ),\n    },\n    {\n      key: \"floorplans\",\n      label: \"Floor Plans\",\n      content: (\n        <div className=\"space-y-md\">\n          {location.floor_plans && location.floor_plans.length > 0 ? (\n            <div className=\"space-y-sm\">\n              <h4 className=\"font-semibold\">Available Floor Plans</h4>\n              <div className=\"grid grid-cols-1 gap-sm\">\n                {location.floor_plans.map((plan, index) => (\n                  <div key={index} className=\"border rounded-lg overflow-hidden\">\n                    <img\n                      src={plan}\n                      alt={`Floor plan ${index + 1}`}\n                      className=\"w-full\"\n                    />\n                  </div>\n                ))}\n              </div>\n            </div>\n          ) : (\n            <div className=\"text-center py-lg text-muted-foreground\">\n              <FileText className=\"mx-auto h-8 w-8 mb-sm opacity-50\" />\n              <p>No floor plans available</p>\n            </div>\n          )}\n        </div>\n      ),\n    },\n  ];\n\n  return (\n    <AppDrawer\n      open={open}\n      onClose={() => onOpenChange(false)}\n      title={location.name}\n      mode=\"view\"\n      tabs={tabs}\n      actions={[\n        {\n          key: \"navigate\",\n          label: \"Navigate\",\n          icon: <Navigation className=\"h-4 w-4\" />,\n          onClick: onNavigate,\n        },\n        {\n          key: \"share\",\n          label: \"Share\",\n          icon: <Share2 className=\"h-4 w-4\" />,\n          onClick: async () => {\n            const text = `${location.name}\\n${location.address || \"\"}, ${location.city || \"\"}, ${location.state || \"\"}`;\n            await navigator.clipboard.writeText(text);\n            // Toast would show \"Location copied to clipboard\"\n          },\n        },\n        {\n          key: \"edit\",\n          label: \"Edit\",\n          icon: <Edit className=\"h-4 w-4\" />,\n          onClick: onEdit,\n        },\n      ]}\n    />\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ghxstship/apps/web/app/(app)/(shell)/projects/locations/views/LocationGalleryView.tsx","messages":[{"ruleId":"react/jsx-no-undef","severity":2,"message":"'ImageOff' is not defined.","line":37,"column":10,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":37,"endColumn":18},{"ruleId":"@next/next/no-img-element","severity":1,"message":"Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` or a custom image loader to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","line":69,"column":19,"nodeType":"JSXOpeningElement","endLine":73,"endColumn":21},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'MapPin' is not defined.","line":123,"column":22,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":123,"endColumn":28},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Users' is not defined.","line":136,"column":24,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":136,"endColumn":29},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Phone' is not defined.","line":161,"column":24,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":161,"endColumn":29},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Mail' is not defined.","line":166,"column":26,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":166,"endColumn":30},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Navigation' is not defined.","line":184,"column":22,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":184,"endColumn":32},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Eye' is not defined.","line":195,"column":22,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":195,"endColumn":25},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Edit' is not defined.","line":205,"column":22,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":205,"endColumn":26},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Trash2' is not defined.","line":215,"column":22,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":215,"endColumn":28},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Edit' is not defined.","line":263,"column":24,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":263,"endColumn":28}],"suppressedMessages":[],"errorCount":10,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport { Card, Badge, Button, Checkbox } from \"@ghxstship/ui\";\nimport type { Location } from \"../LocationsClient\";\nimport type { LucideIcon } from \"lucide-react\";\n\ninterface LocationGalleryViewProps {\n  locations: Location[];\n  selectedLocations: Set<string>;\n  onSelectLocation: (id: string) => void;\n  onView: (location: Location) => void;\n  onEdit: (location: Location) => void;\n  onDelete: (location: Location) => void;\n  onNavigate: (location: Location) => void;\n  getTypeIcon: (type: string) => LucideIcon;\n  getAvailabilityBadgeVariant: (status: string) => any;\n}\n\nexport default function LocationGalleryView({\n  locations,\n  selectedLocations,\n  onSelectLocation,\n  onView,\n  onEdit,\n  onDelete,\n  onNavigate,\n  getTypeIcon,\n  getAvailabilityBadgeVariant,\n}: LocationGalleryViewProps) {\n  // Filter locations with images for gallery view\n  const locationsWithImages = locations.filter(l => l.images && l.images.length > 0);\n  const locationsWithoutImages = locations.filter(l => !l.images || l.images.length === 0);\n\n  if (locationsWithImages.length === 0) {\n    return (\n      <div className=\"text-center py-xl\">\n        <ImageOff className=\"mx-auto h-12 w-12 text-muted-foreground mb-md\" />\n        <h3 className=\"text-lg font-semibold mb-sm\">No Location Images</h3>\n        <p className=\"text-muted-foreground mb-md\">\n          Upload images to your locations to see them in gallery view\n        </p>\n        {locationsWithoutImages.length > 0 && (\n          <p className=\"text-sm text-muted-foreground\">\n            {locationsWithoutImages.length} location{locationsWithoutImages.length > 1 ? \"s\" : \"\"} without images\n          </p>\n        )}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-lg\">\n      {/* Gallery Grid */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-md\">\n        {locationsWithImages.map((location) => {\n          const TypeIcon = getTypeIcon(location.type || \"other\");\n          \n          return (\n            <Card\n              key={location.id}\n              className={`overflow-hidden cursor-pointer hover:shadow-lg transition-shadow ${\n                selectedLocations.has(location.id) ? \"ring-2 ring-primary\" : \"\"\n              }`}\n              onClick={() => onView(location)}\n            >\n              {/* Image Gallery */}\n              <div className=\"relative h-48 bg-muted\">\n                {location.images && location.images[0] && (\n                  <img\n                    src={location.images[0]}\n                    alt={location.name}\n                    className=\"w-full h-full object-cover\"\n                  />\n                )}\n                \n                {/* Selection Checkbox */}\n                <div className=\"absolute top-sm left-sm\">\n                  <Checkbox\n                    checked={selectedLocations.has(location.id)}\n                    onChange={() => onSelectLocation(location.id)}\n                    onClick={(e: React.MouseEvent) => e.stopPropagation()}\n                    className=\"bg-white/90\"\n                  />\n                </div>\n\n                {/* Image Count Badge */}\n                {location.images && location.images.length > 1 && (\n                  <div className=\"absolute bottom-sm right-sm\">\n                    <Badge variant=\"secondary\" className=\"bg-black/50 text-white\">\n                      +{location.images.length - 1} photos\n                    </Badge>\n                  </div>\n                )}\n\n                {/* Featured Badge */}\n                {location.is_featured && (\n                  <div className=\"absolute top-sm right-sm\">\n                    <Badge variant=\"warning\">Featured</Badge>\n                  </div>\n                )}\n              </div>\n\n              {/* Content */}\n              <div className=\"p-md space-y-sm\">\n                {/* Title and Type */}\n                <div>\n                  <h3 className=\"font-semibold text-lg line-clamp-1\">{location.name}</h3>\n                  <div className=\"flex items-center gap-xs mt-xs\">\n                    <TypeIcon className=\"h-4 w-4 text-muted-foreground\" />\n                    <span className=\"text-sm text-muted-foreground\">{location.type || \"other\"}</span>\n                    <Badge \n                      variant={getAvailabilityBadgeVariant(location.availability_status || \"available\")}\n                      className=\"ml-auto\"\n                    >\n                      {location.availability_status || \"available\"}\n                    </Badge>\n                  </div>\n                </div>\n\n                {/* Address */}\n                {(location.address || location.city) && (\n                  <div className=\"flex items-start gap-xs text-sm text-muted-foreground\">\n                    <MapPin className=\"h-3 w-3 mt-0.5 flex-shrink-0\" />\n                    <span className=\"line-clamp-2\">\n                      {[location.address, location.city, location.state, location.country]\n                        .filter(Boolean)\n                        .join(\", \")}\n                    </span>\n                  </div>\n                )}\n\n                {/* Details Grid */}\n                <div className=\"grid grid-cols-2 gap-sm text-sm\">\n                  {location.capacity && (\n                    <div className=\"flex items-center gap-xs\">\n                      <Users className=\"h-3 w-3 text-muted-foreground\" />\n                      <span>{location.capacity} capacity</span>\n                    </div>\n                  )}\n                  {location.size && (\n                    <div>\n                      {location.size.toLocaleString()} sq ft\n                    </div>\n                  )}\n                  {location.rental_rate && (\n                    <div className=\"font-medium\">\n                      {location.currency || \"$\"}{location.rental_rate.toLocaleString()}/day\n                    </div>\n                  )}\n                  {location.parking_available && (\n                    <div className=\"text-muted-foreground\">\n                      Parking available\n                    </div>\n                  )}\n                </div>\n\n                {/* Contact */}\n                {location.contact_name && (\n                  <div className=\"flex items-center gap-md text-sm text-muted-foreground border-t pt-sm\">\n                    <div className=\"flex items-center gap-xs\">\n                      <Phone className=\"h-3 w-3\" />\n                      <span className=\"truncate\">{location.contact_name}</span>\n                    </div>\n                    {location.contact_email && (\n                      <div className=\"flex items-center gap-xs\">\n                        <Mail className=\"h-3 w-3\" />\n                        <span className=\"truncate\">{location.contact_email}</span>\n                      </div>\n                    )}\n                  </div>\n                )}\n\n                {/* Actions */}\n                <div className=\"flex items-center gap-xs pt-sm border-t\">\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    className=\"flex-1\"\n                    onClick={(e) => {\n                      e.stopPropagation();\n                      onNavigate(location);\n                    }}\n                  >\n                    <Navigation className=\"h-3 w-3 mr-1\" />\n                    Navigate\n                  </Button>\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={(e) => {\n                      e.stopPropagation();\n                      onView(location);\n                    }}\n                  >\n                    <Eye className=\"h-4 w-4\" />\n                  </Button>\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={(e) => {\n                      e.stopPropagation();\n                      onEdit(location);\n                    }}\n                  >\n                    <Edit className=\"h-4 w-4\" />\n                  </Button>\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={(e) => {\n                      e.stopPropagation();\n                      onDelete(location);\n                    }}\n                  >\n                    <Trash2 className=\"h-4 w-4 text-destructive\" />\n                  </Button>\n                </div>\n              </div>\n            </Card>\n          );\n        })}\n      </div>\n\n      {/* Locations without images */}\n      {locationsWithoutImages.length > 0 && (\n        <div className=\"space-y-sm\">\n          <h3 className=\"text-sm font-medium text-muted-foreground\">\n            Locations without images ({locationsWithoutImages.length})\n          </h3>\n          <div className=\"grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-sm\">\n            {locationsWithoutImages.map((location) => {\n              const TypeIcon = getTypeIcon(location.type || \"other\");\n              \n              return (\n                <Card\n                  key={location.id}\n                  className={`p-sm cursor-pointer hover:shadow-md transition-shadow ${\n                    selectedLocations.has(location.id) ? \"ring-2 ring-primary\" : \"\"\n                  }`}\n                  onClick={() => onView(location)}\n                >\n                  <div className=\"flex items-center gap-sm\">\n                    <Checkbox\n                      checked={selectedLocations.has(location.id)}\n                      onChange={() => onSelectLocation(location.id)}\n                      onClick={(e: React.MouseEvent) => e.stopPropagation()}\n                    />\n                    <TypeIcon className=\"h-4 w-4 text-muted-foreground\" />\n                    <div className=\"flex-1 min-w-0\">\n                      <p className=\"font-medium text-sm truncate\">{location.name}</p>\n                      <p className=\"text-xs text-muted-foreground truncate\">\n                        {location.city || location.address || \"No address\"}\n                      </p>\n                    </div>\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={(e) => {\n                        e.stopPropagation();\n                        onEdit(location);\n                      }}\n                    >\n                      <Edit className=\"h-3 w-3\" />\n                    </Button>\n                  </div>\n                </Card>\n              );\n            })}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ghxstship/apps/web/app/(app)/(shell)/projects/locations/views/LocationGridView.tsx","messages":[{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Edit' is not defined.","line":61,"column":18,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":61,"endColumn":22},{"ruleId":"@next/next/no-img-element","severity":1,"message":"Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` or a custom image loader to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","line":69,"column":19,"nodeType":"JSXOpeningElement","endLine":73,"endColumn":21},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'MapPin' is not defined.","line":97,"column":20,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":97,"endColumn":26},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Users' is not defined.","line":109,"column":20,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":109,"endColumn":25},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Phone' is not defined.","line":138,"column":20,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":138,"endColumn":25},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Navigation' is not defined.","line":159,"column":20,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":159,"endColumn":30},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Copy' is not defined.","line":170,"column":20,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":170,"endColumn":24},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Trash2' is not defined.","line":180,"column":20,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":180,"endColumn":26}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport { Card, Badge, Button, Checkbox } from \"@ghxstship/ui\";\nimport type { Location } from \"../LocationsClient\";\nimport type { LucideIcon } from \"lucide-react\";\n\ninterface LocationGridViewProps {\n  locations: Location[];\n  selectedLocations: Set<string>;\n  onSelectLocation: (id: string) => void;\n  onView: (location: Location) => void;\n  onEdit: (location: Location) => void;\n  onDelete: (location: Location) => void;\n  onDuplicate: (location: Location) => void;\n  onNavigate: (location: Location) => void;\n  getTypeIcon: (type: string) => LucideIcon;\n  getAvailabilityBadgeVariant: (status: string) => any;\n  getTypeBadgeVariant: (type: string) => any;\n}\n\nexport default function LocationGridView({\n  locations,\n  selectedLocations,\n  onSelectLocation,\n  onView,\n  onEdit,\n  onDelete,\n  onDuplicate,\n  onNavigate,\n  getTypeIcon,\n  getAvailabilityBadgeVariant,\n  getTypeBadgeVariant,\n}: LocationGridViewProps) {\n  return (\n    <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-md\">\n      {locations.map((location) => {\n        const TypeIcon = getTypeIcon(location.type || \"other\");\n        \n        return (\n          <Card\n            key={location.id}\n            className={`p-md cursor-pointer hover:shadow-lg transition-shadow ${\n              selectedLocations.has(location.id) ? \"ring-2 ring-primary\" : \"\"\n            }`}\n            onClick={() => onView(location)}\n          >\n            <div className=\"flex items-start justify-between mb-sm\">\n              <Checkbox\n                checked={selectedLocations.has(location.id)}\n                onChange={() => onSelectLocation(location.id)}\n                onClick={(e: React.MouseEvent) => e.stopPropagation()}\n              />\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={(e) => {\n                  e.stopPropagation();\n                  onEdit(location);\n                }}\n              >\n                <Edit className=\"h-4 w-4\" />\n              </Button>\n            </div>\n\n            <div className=\"space-y-sm\">\n              {/* Location Image or Icon */}\n              {location.images && location.images.length > 0 ? (\n                <div className=\"h-32 bg-muted rounded-md overflow-hidden\">\n                  <img\n                    src={location.images[0]}\n                    alt={location.name}\n                    className=\"w-full h-full object-cover\"\n                  />\n                </div>\n              ) : (\n                <div className=\"h-32 bg-muted rounded-md flex items-center justify-center\">\n                  <TypeIcon className=\"h-12 w-12 text-muted-foreground\" />\n                </div>\n              )}\n\n              {/* Name and Type */}\n              <div>\n                <h3 className=\"font-semibold line-clamp-1\">{location.name}</h3>\n                <div className=\"flex items-center gap-xs mt-xs\">\n                  <Badge variant={getTypeBadgeVariant(location.type || \"other\")}>\n                    {location.type || \"other\"}\n                  </Badge>\n                  <Badge variant={getAvailabilityBadgeVariant(location.availability_status || \"available\")}>\n                    {location.availability_status || \"available\"}\n                  </Badge>\n                </div>\n              </div>\n\n              {/* Address */}\n              {(location.address || location.city) && (\n                <div className=\"flex items-start gap-xs text-sm text-muted-foreground\">\n                  <MapPin className=\"h-3 w-3 mt-0.5 flex-shrink-0\" />\n                  <span className=\"line-clamp-2\">\n                    {[location.address, location.city, location.state]\n                      .filter(Boolean)\n                      .join(\", \")}\n                  </span>\n                </div>\n              )}\n\n              {/* Capacity */}\n              {location.capacity && (\n                <div className=\"flex items-center gap-xs text-sm text-muted-foreground\">\n                  <Users className=\"h-3 w-3\" />\n                  <span>Capacity: {location.capacity}</span>\n                </div>\n              )}\n\n              {/* Size */}\n              {location.size && (\n                <div className=\"text-sm text-muted-foreground\">\n                  {location.size.toLocaleString()} sq ft\n                </div>\n              )}\n\n              {/* Rental Rate */}\n              {location.rental_rate && (\n                <div className=\"text-sm font-medium\">\n                  {location.currency || \"$\"}{location.rental_rate.toLocaleString()}/day\n                </div>\n              )}\n\n              {/* Project */}\n              {location.project && (\n                <div className=\"text-sm text-muted-foreground truncate\">\n                  Project: {location.project.name}\n                </div>\n              )}\n\n              {/* Contact */}\n              {location.contact_name && (\n                <div className=\"flex items-center gap-xs text-sm text-muted-foreground\">\n                  <Phone className=\"h-3 w-3\" />\n                  <span className=\"truncate\">{location.contact_name}</span>\n                </div>\n              )}\n\n              {/* Featured Badge */}\n              {location.is_featured && (\n                <Badge variant=\"warning\">Featured</Badge>\n              )}\n\n              {/* Actions */}\n              <div className=\"flex items-center gap-xs pt-sm border-t\">\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  className=\"flex-1\"\n                  onClick={(e) => {\n                    e.stopPropagation();\n                    onNavigate(location);\n                  }}\n                >\n                  <Navigation className=\"h-3 w-3 mr-1\" />\n                  Navigate\n                </Button>\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={(e) => {\n                    e.stopPropagation();\n                    onDuplicate(location);\n                  }}\n                >\n                  <Copy className=\"h-4 w-4\" />\n                </Button>\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={(e) => {\n                    e.stopPropagation();\n                    onDelete(location);\n                  }}\n                >\n                  <Trash2 className=\"h-4 w-4 text-destructive\" />\n                </Button>\n              </div>\n            </div>\n          </Card>\n        );\n      })}\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ghxstship/apps/web/app/(app)/(shell)/projects/locations/views/LocationListView.tsx","messages":[{"ruleId":"react/jsx-no-undef","severity":2,"message":"'ArrowUp' is not defined.","line":113,"column":28,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":113,"endColumn":35},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'ArrowDown' is not defined.","line":115,"column":28,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":115,"endColumn":37},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'ArrowUpDown' is not defined.","line":118,"column":26,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":118,"endColumn":37},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Navigation' is not defined.","line":156,"column":22,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":156,"endColumn":32},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Eye' is not defined.","line":163,"column":22,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":163,"endColumn":25},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Edit' is not defined.","line":170,"column":22,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":170,"endColumn":26},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Copy' is not defined.","line":177,"column":22,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":177,"endColumn":26},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Trash2' is not defined.","line":185,"column":22,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":185,"endColumn":28}],"suppressedMessages":[],"errorCount":8,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport { Badge, Button, Checkbox } from \"@ghxstship/ui\";\nimport type { Location } from \"../LocationsClient\";\n\ninterface LocationListViewProps {\n  locations: Location[];\n  selectedLocations: Set<string>;\n  fieldVisibility: Array<{ id: string; label: string; visible: boolean; sortable: boolean }>;\n  sortField: string;\n  sortDirection: \"asc\" | \"desc\";\n  onSelectAll: () => void;\n  onSelectLocation: (id: string) => void;\n  onSort: (field: string) => void;\n  onView: (location: Location) => void;\n  onEdit: (location: Location) => void;\n  onDelete: (location: Location) => void;\n  onDuplicate: (location: Location) => void;\n  onNavigate: (location: Location) => void;\n  getTypeBadgeVariant: (type: string) => any;\n  getAvailabilityBadgeVariant: (status: string) => any;\n}\n\nexport default function LocationListView({\n  locations,\n  selectedLocations,\n  fieldVisibility,\n  sortField,\n  sortDirection,\n  onSelectAll,\n  onSelectLocation,\n  onSort,\n  onView,\n  onEdit,\n  onDelete,\n  onDuplicate,\n  onNavigate,\n  getTypeBadgeVariant,\n  getAvailabilityBadgeVariant,\n}: LocationListViewProps) {\n  const visibleFields = fieldVisibility.filter((f) => f.visible);\n\n  const renderFieldValue = (location: Location, fieldId: string) => {\n    switch (fieldId) {\n      case \"name\":\n        return <span className=\"font-medium\">{location.name}</span>;\n      case \"type\":\n        return (\n          <Badge variant={getTypeBadgeVariant(location.type || \"other\")}>\n            {location.type || \"other\"}\n          </Badge>\n        );\n      case \"address\":\n        return location.address || \"-\";\n      case \"city\":\n        return location.city || \"-\";\n      case \"state\":\n        return location.state || \"-\";\n      case \"country\":\n        return location.country || \"-\";\n      case \"capacity\":\n        return location.capacity ? location.capacity.toLocaleString() : \"-\";\n      case \"size\":\n        return location.size ? `${location.size.toLocaleString()} sq ft` : \"-\";\n      case \"availability_status\":\n        return (\n          <Badge variant={getAvailabilityBadgeVariant(location.availability_status || \"available\")}>\n            {location.availability_status || \"available\"}\n          </Badge>\n        );\n      case \"rental_rate\":\n        return location.rental_rate \n          ? `${location.currency || \"$\"}${location.rental_rate.toLocaleString()}`\n          : \"-\";\n      case \"project\":\n        return location.project?.name || \"-\";\n      case \"contact_name\":\n        return location.contact_name || \"-\";\n      case \"created_at\":\n        return new Date(location.created_at).toLocaleDateString();\n      case \"updated_at\":\n        return new Date(location.updated_at).toLocaleDateString();\n      default:\n        return \"-\";\n    }\n  };\n\n  return (\n    <div className=\"overflow-x-auto\">\n      <table className=\"w-full\">\n        <thead>\n          <tr className=\"border-b\">\n            <th className=\"text-left p-sm\">\n              <Checkbox\n                checked={selectedLocations.size === locations.length && locations.length > 0}\n                onChange={onSelectAll}\n              />\n            </th>\n            {visibleFields.map((field) => (\n              <th\n                key={field.id}\n                className={`text-left p-sm ${\n                  field.sortable ? \"cursor-pointer hover:bg-muted/50\" : \"\"\n                }`}\n                onClick={() => field.sortable && onSort(field.id)}\n              >\n                <div className=\"flex items-center gap-xs\">\n                  {field.label}\n                  {field.sortable && (\n                    <>\n                      {sortField === field.id ? (\n                        sortDirection === \"asc\" ? (\n                          <ArrowUp className=\"h-3 w-3\" />\n                        ) : (\n                          <ArrowDown className=\"h-3 w-3\" />\n                        )\n                      ) : (\n                        <ArrowUpDown className=\"h-3 w-3 opacity-30\" />\n                      )}\n                    </>\n                  )}\n                </div>\n              </th>\n            ))}\n            <th className=\"text-left p-sm\">Actions</th>\n          </tr>\n        </thead>\n        <tbody>\n          {locations.map((location) => (\n            <tr\n              key={location.id}\n              className={`border-b hover:bg-muted/50 cursor-pointer ${\n                selectedLocations.has(location.id) ? \"bg-primary/5\" : \"\"\n              }`}\n              onClick={() => onView(location)}\n            >\n              <td className=\"p-sm\" onClick={(e) => e.stopPropagation()}>\n                <Checkbox\n                  checked={selectedLocations.has(location.id)}\n                  onChange={() => onSelectLocation(location.id)}\n                />\n              </td>\n              {visibleFields.map((field) => (\n                <td key={field.id} className=\"p-sm\">\n                  {renderFieldValue(location, field.id)}\n                </td>\n              ))}\n              <td className=\"p-sm\" onClick={(e) => e.stopPropagation()}>\n                <div className=\"flex items-center gap-xs\">\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={() => onNavigate(location)}\n                    title=\"Navigate\"\n                  >\n                    <Navigation className=\"h-4 w-4\" />\n                  </Button>\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={() => onView(location)}\n                  >\n                    <Eye className=\"h-4 w-4\" />\n                  </Button>\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={() => onEdit(location)}\n                  >\n                    <Edit className=\"h-4 w-4\" />\n                  </Button>\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={() => onDuplicate(location)}\n                  >\n                    <Copy className=\"h-4 w-4\" />\n                  </Button>\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={() => onDelete(location)}\n                    className=\"text-destructive\"\n                  >\n                    <Trash2 className=\"h-4 w-4\" />\n                  </Button>\n                </div>\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n      \n      {locations.length === 0 && (\n        <div className=\"text-center py-xl text-muted-foreground\">\n          No locations to display\n        </div>\n      )}\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ghxstship/apps/web/app/(app)/(shell)/projects/locations/views/LocationMapView.tsx","messages":[{"ruleId":"react/jsx-no-undef","severity":2,"message":"'MapPin' is not defined.","line":31,"column":10,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":31,"endColumn":16},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'MapPin' is not defined.","line":48,"column":14,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":48,"endColumn":20},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Navigation' is not defined.","line":70,"column":18,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":70,"endColumn":28},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Eye' is not defined.","line":121,"column":26,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":121,"endColumn":29},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Eye' is not defined.","line":180,"column":20,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":180,"endColumn":23}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport { useState, useEffect } from \"react\";\nimport { Card, Badge, Button } from \"@ghxstship/ui\";\nimport type { Location } from \"../LocationsClient\";\nimport type { LucideIcon } from \"lucide-react\";\n\ninterface LocationMapViewProps {\n  locations: Location[];\n  onView: (location: Location) => void;\n  getTypeIcon: (type: string) => LucideIcon;\n  getAvailabilityBadgeVariant: (status: string) => any;\n}\n\nexport default function LocationMapView({\n  locations,\n  onView,\n  getTypeIcon,\n  getAvailabilityBadgeVariant,\n}: LocationMapViewProps) {\n  const [selectedLocation, setSelectedLocation] = useState<Location | null>(null);\n  const [mapError, setMapError] = useState(false);\n\n  // For a real implementation, you would integrate with a mapping library like Mapbox or Google Maps\n  // This is a placeholder implementation\n  const hasCoordinates = locations.some(l => l.coordinates);\n\n  if (!hasCoordinates) {\n    return (\n      <div className=\"text-center py-xl\">\n        <MapPin className=\"mx-auto h-12 w-12 text-muted-foreground mb-md\" />\n        <h3 className=\"text-lg font-semibold mb-sm\">No Location Coordinates</h3>\n        <p className=\"text-muted-foreground\">\n          Location coordinates are needed to display the map view.\n          Add coordinates to your locations to see them on the map.\n        </p>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-md\">\n      {/* Map Container */}\n      <div className=\"relative h-[600px] bg-muted rounded-lg overflow-hidden\">\n        {/* Placeholder Map */}\n        <div className=\"absolute inset-0 flex items-center justify-center\">\n          <div className=\"text-center\">\n            <MapPin className=\"mx-auto h-16 w-16 text-muted-foreground mb-md\" />\n            <h3 className=\"text-lg font-semibold mb-sm\">Interactive Map</h3>\n            <p className=\"text-muted-foreground mb-md\">\n              To enable the interactive map, integrate with Google Maps or Mapbox API\n            </p>\n            <div className=\"flex items-center gap-sm justify-center\">\n              <Button\n                variant=\"outline\"\n                onClick={() => {\n                  // Open Google Maps with all locations\n                  const validLocations = locations.filter(l => l.coordinates || l.address);\n                  if (validLocations.length > 0) {\n                    const firstLoc = validLocations[0];\n                    if (firstLoc.coordinates) {\n                      window.open(`https://maps.google.com/?q=${firstLoc.coordinates.y},${firstLoc.coordinates.x}`, \"_blank\");\n                    } else if (firstLoc.address) {\n                      const query = encodeURIComponent(`${firstLoc.address}, ${firstLoc.city}, ${firstLoc.state}`);\n                      window.open(`https://maps.google.com/?q=${query}`, \"_blank\");\n                    }\n                  }\n                }}\n              >\n                <Navigation className=\"mr-2 h-4 w-4\" />\n                Open in Google Maps\n              </Button>\n            </div>\n          </div>\n        </div>\n\n        {/* Location Markers (Overlay) */}\n        {locations.map((location, index) => {\n          if (!location.coordinates) return null;\n          \n          // Simple positioning for demo (would use real lat/lng conversion)\n          const left = `${20 + (index % 4) * 20}%`;\n          const top = `${20 + Math.floor(index / 4) * 20}%`;\n          \n          const TypeIcon = getTypeIcon(location.type || \"other\");\n          \n          return (\n            <div\n              key={location.id}\n              className=\"absolute cursor-pointer transform -translate-x-1/2 -translate-y-1/2\"\n              style={{ left, top }}\n              onClick={() => setSelectedLocation(location)}\n            >\n              <div className=\"relative\">\n                <div className=\"bg-primary text-primary-foreground rounded-full p-sm shadow-lg hover:scale-110 transition-transform\">\n                  <TypeIcon className=\"h-4 w-4\" />\n                </div>\n                {selectedLocation?.id === location.id && (\n                  <div className=\"absolute bottom-full left-1/2 transform -translate-x-1/2 mb-sm\">\n                    <Card className=\"p-sm shadow-xl min-w-[200px]\">\n                      <h4 className=\"font-semibold text-sm\">{location.name}</h4>\n                      <p className=\"text-xs text-muted-foreground mt-xs\">\n                        {location.address}\n                      </p>\n                      <div className=\"flex items-center gap-xs mt-xs\">\n                        <Badge \n                          variant={getAvailabilityBadgeVariant(location.availability_status || \"available\")}\n                          className=\"text-xs\"\n                        >\n                          {location.availability_status || \"available\"}\n                        </Badge>\n                      </div>\n                      <Button\n                        size=\"sm\"\n                        className=\"w-full mt-sm\"\n                        onClick={(e) => {\n                          e.stopPropagation();\n                          onView(location);\n                        }}\n                      >\n                        <Eye className=\"mr-1 h-3 w-3\" />\n                        View Details\n                      </Button>\n                    </Card>\n                  </div>\n                )}\n              </div>\n            </div>\n          );\n        })}\n      </div>\n\n      {/* Location List Sidebar */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-md\">\n        {locations.slice(0, 6).map((location) => {\n          const TypeIcon = getTypeIcon(location.type || \"other\");\n          \n          return (\n            <Card\n              key={location.id}\n              className={`p-sm cursor-pointer hover:shadow-md transition-shadow ${\n                selectedLocation?.id === location.id ? \"ring-2 ring-primary\" : \"\"\n              }`}\n              onClick={() => {\n                setSelectedLocation(location);\n                // In a real implementation, pan map to location\n              }}\n            >\n              <div className=\"flex items-start gap-sm\">\n                <div className=\"bg-muted rounded-md p-xs\">\n                  <TypeIcon className=\"h-4 w-4\" />\n                </div>\n                <div className=\"flex-1 min-w-0\">\n                  <h4 className=\"font-medium text-sm truncate\">{location.name}</h4>\n                  <p className=\"text-xs text-muted-foreground truncate\">\n                    {location.address || location.city}\n                  </p>\n                  <div className=\"flex items-center gap-xs mt-xs\">\n                    <Badge \n                      variant={getAvailabilityBadgeVariant(location.availability_status || \"available\")}\n                      className=\"text-xs\"\n                    >\n                      {location.availability_status || \"available\"}\n                    </Badge>\n                    {location.capacity && (\n                      <span className=\"text-xs text-muted-foreground\">\n                        Cap: {location.capacity}\n                      </span>\n                    )}\n                  </div>\n                </div>\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={(e) => {\n                    e.stopPropagation();\n                    onView(location);\n                  }}\n                >\n                  <Eye className=\"h-3 w-3\" />\n                </Button>\n              </div>\n            </Card>\n          );\n        })}\n      </div>\n\n      {locations.length > 6 && (\n        <div className=\"text-center text-sm text-muted-foreground\">\n          Showing 6 of {locations.length} locations on map\n        </div>\n      )}\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ghxstship/apps/web/app/(app)/(shell)/projects/overview/ProjectsOverviewClient.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadOverviewData'. Either include it or remove the dependency array.","line":47,"column":6,"nodeType":"ArrayExpression","endLine":47,"endColumn":13,"suggestions":[{"desc":"Update the dependencies array to be: [loadOverviewData, orgId]","fix":{"range":[1506,1513],"text":"[loadOverviewData, orgId]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\n\nimport { BarChart3, Calendar, Clock, DollarSign, TrendingUp, Users, AlertTriangle, CheckCircle, Plus, ArrowRight } from \"lucide-react\";\nimport { useState, useEffect } from 'react';\nimport { useRouter } from 'next/navigation';\nimport { useTranslations } from 'next-intl';\nimport { createBrowserClient } from '@ghxstship/auth';\nimport { Card, Badge, Button } from '@ghxstship/ui';\nimport { tryCatch, Result, reportError } from '@ghxstship/ui/utils/error-handling';\n\ninterface ProjectStats {\n  totalProjects: number;\n  activeProjects: number;\n  completedProjects: number;\n  totalBudget: number;\n  totalTasks: number;\n  completedTasks: number;\n  overdueTasks: number;\n  totalRisks: number;\n  highRisks: number;\n}\n\ninterface RecentProject {\n  id: string;\n  name: string;\n  status: string;\n  budget: number;\n  created_at: string;\n  tasks_count?: number;\n  completion_percentage?: number;\n}\n\nexport default function ProjectsOverviewClient({ orgId }: { orgId: string }) {\n  const t = useTranslations('projects');\n  const router = useRouter();\n  const [loading, setLoading] = useState(true);\n  const [seedLoading, setSeedLoading] = useState(false);\n  const [message, setMessage] = useState<string | null>(null);\n  const [error, setError] = useState<string | null>(null);\n  const [stats, setStats] = useState<ProjectStats | null>(null);\n  const [recentProjects, setRecentProjects] = useState<RecentProject[]>([]);\n  const sb = createBrowserClient();\n\n  useEffect(() => {\n    loadOverviewData();\n  }, [orgId]);\n\n  async function loadOverviewData() {\n    setLoading(true);\n    try {\n      // Load projects\n      const { data: projects } = await sb\n        .from('projects')\n        .select('*')\n        .eq('organization_id', orgId);\n\n      // Load tasks\n      const { data: tasks } = await sb\n        .from('tasks')\n        .select('*')\n        .eq('organization_id', orgId);\n\n      // Load risks\n      const { data: risks } = await sb\n        .from('risks')\n        .select('*')\n        .eq('organization_id', orgId);\n\n      if (projects) {\n        const totalBudget = projects.reduce((sum, p) => sum + (p.budget || 0), 0);\n        const activeProjects = projects.filter(p => p.status === 'active').length;\n        const completedProjects = projects.filter(p => p.status === 'completed').length;\n\n        const completedTasks = tasks?.filter(t => t.status === 'done').length || 0;\n        const overdueTasks = tasks?.filter(t => \n          t.due_at && new Date(t.due_at) < new Date() && t.status !== 'done'\n        ).length || 0;\n\n        const highRisks = risks?.filter(r => \n          r.impact === 'high' || r.impact === 'very_high'\n        ).length || 0;\n\n        setStats({\n          totalProjects: projects.length,\n          activeProjects,\n          completedProjects,\n          totalBudget,\n          totalTasks: tasks?.length || 0,\n          completedTasks,\n          overdueTasks,\n          totalRisks: risks?.length || 0,\n          highRisks\n        });\n\n        // Set recent projects (last 5)\n        setRecentProjects(\n          projects\n            .sort((a, b) => new Date(b.created_at).getTime() - new Date(a.created_at).getTime())\n            .slice(0, 5)\n        );\n      }\n    } catch (error) {\n      console.error('Error loading overview data:', error);\n      setError('Failed to load overview data');\n    } finally {\n      setLoading(false);\n    }\n  }\n\n  async function onSeedDemo() {\n    setSeedLoading(true);\n    setMessage(null);\n    setError(null);\n    try {\n      const resResult = await tryCatch(async () => fetch(`/api/organizations/${orgId}/demo`, { method: 'POST' }));\nif (!resResult.success) {\n  reportError(resResult.error);\n  throw new Error(resResult.error.message);\n}\nconst res = resResult.data;\n      const json = await res.json();\n      if (!res.ok) throw new Error(json?.error || 'Request failed');\n      setMessage(t('empty.seeded'));\n      if (typeof window !== 'undefined' && (window as unknown).posthog) {\n        (window as unknown).posthog.capture('demo.seeded', { organization_id: orgId });\n      }\n      await loadOverviewData(); // Refresh data after seeding\n      router.refresh();\n    } catch (e) {\n      setError(e?.message || t('empty.error'));\n    } finally {\n      setSeedLoading(false);\n    }\n  }\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'active': return 'bg-success/10 color-success';\n      case 'completed': return 'bg-accent/10 color-accent';\n      case 'on_hold': return 'bg-warning/10 color-warning';\n      case 'cancelled': return 'bg-destructive/10 color-destructive';\n      default: return 'bg-secondary/50 color-muted';\n    }\n  };\n\n  const formatCurrency = (amount: number) => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD',\n      minimumFractionDigits: 0,\n      maximumFractionDigits: 0,\n    }).format(amount);\n  };\n\n  if (loading) {\n    return (\n      <div className=\"stack-lg\">\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-md\">\n          {[...Array(4)].map((_, i) => (\n            <Card key={i} className=\"animate-pulse\">\n              <div className=\"h-20 bg-secondary rounded\"></div>\n            </Card>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  if (!stats || stats.totalProjects === 0) {\n    return (\n      <div className=\"text-center py-2xl\">\n        <div className=\"mx-auto w-24 h-24 bg-secondary/50 rounded-full flex items-center justify-center mb-md\">\n          <BarChart3 className=\"w-12 h-12 color-muted\" />\n        </div>\n        <h3 className=\"text-body text-heading-4 mb-sm\">No Projects Yet</h3>\n        <p className=\"color-muted mb-lg\">Get started by creating your first project or seeding demo data.</p>\n        <div className=\"flex items-center justify-center gap-md\">\n          <Button onClick={() => router.push('/projects?create=true')}>\n            <Plus className=\"w-4 h-4 mr-sm\" />\n            Create Project\n          </Button>\n          <Button \n            variant=\"outline\" \n            onClick={onSeedDemo}\n            disabled={seedLoading}\n          >\n            {seedLoading ? 'Seeding...' : 'Seed Demo Data'}\n          </Button>\n        </div>\n        {message && (\n          <div className=\"mt-md color-success text-body-sm\">{message}</div>\n        )}\n        {error && (\n          <div className=\"mt-md color-destructive text-body-sm\">{error}</div>\n        )}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"stack-lg\">\n      {/* Key Metrics */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-md\">\n        <Card className=\"p-lg\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-body-sm form-label color-muted\">Total Projects</p>\n              <p className=\"text-heading-3\">{stats.totalProjects}</p>\n            </div>\n            <BarChart3 className=\"w-8 h-8 color-accent\" />\n          </div>\n          <div className=\"mt-sm flex items-center text-body-sm\">\n            <span className=\"color-success\">{stats.activeProjects} active</span>\n            <span className=\"mx-sm\">•</span>\n            <span className=\"color-muted\">{stats.completedProjects} completed</span>\n          </div>\n        </Card>\n\n        <Card className=\"p-lg\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-body-sm form-label color-muted\">Total Budget</p>\n              <p className=\"text-heading-3\">{formatCurrency(stats.totalBudget)}</p>\n            </div>\n            <DollarSign className=\"w-8 h-8 color-success\" />\n          </div>\n          <div className=\"mt-sm text-body-sm color-muted\">\n            Across all projects\n          </div>\n        </Card>\n\n        <Card className=\"p-lg\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-body-sm form-label color-muted\">Tasks Progress</p>\n              <p className=\"text-heading-3\">\n                {stats.totalTasks > 0 ? Math.round((stats.completedTasks / stats.totalTasks) * 100) : 0}%\n              </p>\n            </div>\n            <CheckCircle className=\"w-8 h-8 color-accent\" />\n          </div>\n          <div className=\"mt-sm flex items-center text-body-sm\">\n            <span className=\"color-success\">{stats.completedTasks} done</span>\n            <span className=\"mx-sm\">•</span>\n            <span className=\"color-destructive\">{stats.overdueTasks} overdue</span>\n          </div>\n        </Card>\n\n        <Card className=\"p-lg\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-body-sm form-label color-muted\">Risk Status</p>\n              <p className=\"text-heading-3\">{stats.totalRisks}</p>\n            </div>\n            <AlertTriangle className=\"w-8 h-8 color-warning\" />\n          </div>\n          <div className=\"mt-sm text-body-sm\">\n            <span className=\"color-destructive\">{stats.highRisks} high priority</span>\n          </div>\n        </Card>\n      </div>\n\n      {/* Recent Projects */}\n      <Card className=\"p-lg\">\n        <div className=\"flex items-center justify-between mb-md\">\n          <h3 className=\"text-body text-heading-4\">Recent Projects</h3>\n          <Button \n            variant=\"outline\" \n           \n            onClick={() => router.push('/projects')}\n          >\n            View All\n            <ArrowRight className=\"w-4 h-4 ml-sm\" />\n          </Button>\n        </div>\n        <div className=\"stack-sm\">\n          {recentProjects.map((project: unknown) => (\n            <div \n              key={project.id}\n              className=\"flex items-center justify-between p-sm border rounded-lg hover:bg-secondary/50 cursor-pointer\"\n              onClick={() => router.push('/projects/' + project.id as unknown)}\n            >\n              <div className=\"flex-1\">\n                <div className=\"flex items-center gap-sm\">\n                  <h4 className=\"form-label\">{project.name}</h4>\n                  <Badge className={getStatusColor(project.status)}>\n                    {project.status}\n                  </Badge>\n                </div>\n                <div className=\"flex items-center gap-md mt-xs text-body-sm color-muted\">\n                  <span className=\"flex items-center gap-xs\">\n                    <DollarSign className=\"w-3 h-3\" />\n                    {formatCurrency(project.budget || 0)}\n                  </span>\n                  <span className=\"flex items-center gap-xs\">\n                    <Calendar className=\"w-3 h-3\" />\n                    {new Date(project.created_at).toLocaleDateString()}\n                  </span>\n                </div>\n              </div>\n              <ArrowRight className=\"w-4 h-4 color-muted\" />\n            </div>\n          ))}\n        </div>\n      </Card>\n\n      {/* Quick Actions */}\n      <Card className=\"p-lg\">\n        <h3 className=\"text-body text-heading-4 mb-md\">Quick Actions</h3>\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-md\">\n          <Button \n            variant=\"outline\" \n            className=\"h-auto p-md flex flex-col items-center gap-sm\"\n            onClick={() => router.push('/projects?create=true')}\n          >\n            <Plus className=\"w-6 h-6\" />\n            <span>Create Project</span>\n          </Button>\n          <Button \n            variant=\"outline\" \n            className=\"h-auto p-md flex flex-col items-center gap-sm\"\n            onClick={() => router.push('/projects/tasks')}\n          >\n            <Clock className=\"w-6 h-6\" />\n            <span>View Tasks</span>\n          </Button>\n          <Button \n            variant=\"outline\" \n            className=\"h-auto p-md flex flex-col items-center gap-sm\"\n            onClick={() => router.push('/projects/risks')}\n          >\n            <AlertTriangle className=\"w-6 h-6\" />\n            <span>Manage Risks</span>\n          </Button>\n        </div>\n      </Card>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ghxstship/apps/web/app/(app)/(shell)/projects/overview/views/ProjectGridView.tsx","messages":[{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Eye' is not defined.","line":73,"column":20,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":73,"endColumn":23},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Edit' is not defined.","line":84,"column":20,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":84,"endColumn":24},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Trash2' is not defined.","line":95,"column":20,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":95,"endColumn":26},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'DollarSign' is not defined.","line":114,"column":20,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":114,"endColumn":30},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Calendar' is not defined.","line":126,"column":20,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":126,"endColumn":28},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'User' is not defined.","line":138,"column":20,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":138,"endColumn":24}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport React from 'react';\nimport { Card, Badge, Button } from '@ghxstship/ui';\nimport { format } from 'date-fns';\nimport type { Project } from '../types';\n\ninterface ProjectGridViewProps {\n  projects: Project[];\n  selectedProjects: Set<string>;\n  onSelectProject: (id: string) => void;\n  onView: (project: Project) => void;\n  onEdit: (project: Project) => void;\n  onDelete: (project: Project) => void;\n}\n\nconst statusColors = {\n  planning: 'blue',\n  active: 'green',\n  on_hold: 'yellow',\n  completed: 'gray',\n  cancelled: 'red',\n} as const;\n\nconst priorityColors = {\n  low: 'green',\n  medium: 'yellow',\n  high: 'orange',\n  critical: 'red',\n} as const;\n\nexport default function ProjectGridView({\n  projects,\n  selectedProjects,\n  onSelectProject,\n  onView,\n  onEdit,\n  onDelete,\n}: ProjectGridViewProps) {\n  return (\n    <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-md\">\n      {projects.map((project) => (\n        <Card\n          key={project.id}\n          className={`p-md cursor-pointer transition-all hover:shadow-md ${\n            selectedProjects.has(project.id) ? 'ring-2 ring-primary' : ''\n          }`}\n          onClick={() => onSelectProject(project.id)}\n        >\n          <div className=\"space-y-sm\">\n            {/* Header */}\n            <div className=\"flex items-start justify-between\">\n              <div className=\"flex-1 min-w-0\">\n                <h3 className=\"font-semibold text-sm truncate\" title={project.name}>\n                  {project.name}\n                </h3>\n                {project.description && (\n                  <p className=\"text-xs text-muted-foreground mt-1 line-clamp-2\">\n                    {project.description}\n                  </p>\n                )}\n              </div>\n              <div className=\"flex items-center gap-xs ml-sm\">\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={(e) => {\n                    e.stopPropagation();\n                    onView(project);\n                  }}\n                  className=\"h-6 w-6 p-0\"\n                >\n                  <Eye className=\"h-3 w-3\" />\n                </Button>\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={(e) => {\n                    e.stopPropagation();\n                    onEdit(project);\n                  }}\n                  className=\"h-6 w-6 p-0\"\n                >\n                  <Edit className=\"h-3 w-3\" />\n                </Button>\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={(e) => {\n                    e.stopPropagation();\n                    onDelete(project);\n                  }}\n                  className=\"h-6 w-6 p-0 text-destructive hover:text-destructive\"\n                >\n                  <Trash2 className=\"h-3 w-3\" />\n                </Button>\n              </div>\n            </div>\n\n            {/* Status and Priority */}\n            <div className=\"flex items-center gap-xs\">\n              <Badge variant=\"outline\" className={`text-xs bg-${statusColors[project.status]}-50 text-${statusColors[project.status]}-700 border-${statusColors[project.status]}-200`}>\n                {project.status.replace('_', ' ')}\n              </Badge>\n              <Badge variant=\"outline\" className={`text-xs bg-${priorityColors[project.priority]}-50 text-${priorityColors[project.priority]}-700 border-${priorityColors[project.priority]}-200`}>\n                {project.priority}\n              </Badge>\n            </div>\n\n            {/* Project Details */}\n            <div className=\"space-y-xs text-xs text-muted-foreground\">\n              {project.budget && (\n                <div className=\"flex items-center gap-xs\">\n                  <DollarSign className=\"h-3 w-3\" />\n                  <span>\n                    {new Intl.NumberFormat('en-US', {\n                      style: 'currency',\n                      currency: project.currency || 'USD',\n                    }).format(project.budget)}\n                  </span>\n                </div>\n              )}\n\n              {project.starts_at && (\n                <div className=\"flex items-center gap-xs\">\n                  <Calendar className=\"h-3 w-3\" />\n                  <span>\n                    {format(new Date(project.starts_at), 'MMM dd, yyyy')}\n                    {project.ends_at && (\n                      <span> - {format(new Date(project.ends_at), 'MMM dd, yyyy')}</span>\n                    )}\n                  </span>\n                </div>\n              )}\n\n              {project.location && (\n                <div className=\"flex items-center gap-xs\">\n                  <User className=\"h-3 w-3\" />\n                  <span className=\"truncate\">{project.location}</span>\n                </div>\n              )}\n            </div>\n\n            {/* Tags */}\n            {project.tags && project.tags.length > 0 && (\n              <div className=\"flex flex-wrap gap-xs\">\n                {project.tags.slice(0, 3).map((tag) => (\n                  <Badge key={tag} variant=\"secondary\" className=\"text-xs px-1 py-0\">\n                    {tag}\n                  </Badge>\n                ))}\n                {project.tags.length > 3 && (\n                  <Badge variant=\"secondary\" className=\"text-xs px-1 py-0\">\n                    +{project.tags.length - 3}\n                  </Badge>\n                )}\n              </div>\n            )}\n\n            {/* Footer */}\n            <div className=\"flex items-center justify-between text-xs text-muted-foreground pt-xs border-t\">\n              <span>Created {format(new Date(project.created_at), 'MMM dd')}</span>\n              <input\n                type=\"checkbox\"\n                checked={selectedProjects.has(project.id)}\n                onChange={(e) => {\n                  e.stopPropagation();\n                  onSelectProject(project.id);\n                }}\n                className=\"rounded\"\n              />\n            </div>\n          </div>\n        </Card>\n      ))}\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ghxstship/apps/web/app/(app)/(shell)/projects/overview/views/ProjectListView.tsx","messages":[{"ruleId":"react/jsx-no-undef","severity":2,"message":"'DollarSign' is not defined.","line":89,"column":14,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":89,"endColumn":24},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Calendar' is not defined.","line":103,"column":14,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":103,"endColumn":22},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Calendar' is not defined.","line":113,"column":14,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":113,"endColumn":22},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'MapPin' is not defined.","line":123,"column":14,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":123,"endColumn":20},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'ArrowUpDown' is not defined.","line":196,"column":20,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":196,"endColumn":31},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Eye' is not defined.","line":244,"column":18,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":244,"endColumn":21},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Edit' is not defined.","line":253,"column":18,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":253,"endColumn":22},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Trash2' is not defined.","line":262,"column":18,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":262,"endColumn":24}],"suppressedMessages":[],"errorCount":8,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport React from 'react';\nimport { Badge, Button, Checkbox } from '@ghxstship/ui';\nimport { format } from 'date-fns';\nimport type { Project, FieldConfig } from '../types';\n\ninterface ProjectListViewProps {\n  projects: Project[];\n  selectedProjects: Set<string>;\n  fieldVisibility: FieldConfig[];\n  sortField: string;\n  sortDirection: 'asc' | 'desc';\n  onSelectAll: () => void;\n  onSelectProject: (id: string) => void;\n  onSort: (field: string) => void;\n  onView: (project: Project) => void;\n  onEdit: (project: Project) => void;\n  onDelete: (project: Project) => void;\n}\n\nconst statusColors = {\n  planning: 'blue',\n  active: 'green',\n  on_hold: 'yellow',\n  completed: 'gray',\n  cancelled: 'red',\n} as const;\n\nconst priorityColors = {\n  low: 'green',\n  medium: 'yellow',\n  high: 'orange',\n  critical: 'red',\n} as const;\n\nexport default function ProjectListView({\n  projects,\n  selectedProjects,\n  fieldVisibility,\n  sortField,\n  sortDirection,\n  onSelectAll,\n  onSelectProject,\n  onSort,\n  onView,\n  onEdit,\n  onDelete,\n}: ProjectListViewProps) {\n  const visibleFields = fieldVisibility.filter(field => field.visible);\n\n  const renderCellContent = (project: Project, field: FieldConfig) => {\n    switch (field.key) {\n      case 'name':\n        return (\n          <div className=\"min-w-0\">\n            <div className=\"font-medium text-sm truncate\">{project.name}</div>\n            {project.description && (\n              <div className=\"text-xs text-muted-foreground truncate mt-1\">\n                {project.description}\n              </div>\n            )}\n          </div>\n        );\n\n      case 'status':\n        return (\n          <Badge \n            variant=\"outline\" \n            className={`bg-${statusColors[project.status]}-50 text-${statusColors[project.status]}-700 border-${statusColors[project.status]}-200`}\n          >\n            {project.status.replace('_', ' ')}\n          </Badge>\n        );\n\n      case 'priority':\n        return (\n          <Badge \n            variant=\"outline\" \n            className={`bg-${priorityColors[project.priority]}-50 text-${priorityColors[project.priority]}-700 border-${priorityColors[project.priority]}-200`}\n          >\n            {project.priority}\n          </Badge>\n        );\n\n      case 'budget':\n        return project.budget ? (\n          <div className=\"flex items-center gap-xs text-sm\">\n            <DollarSign className=\"h-3 w-3\" />\n            {new Intl.NumberFormat('en-US', {\n              style: 'currency',\n              currency: project.currency || 'USD',\n              notation: 'compact',\n            }).format(project.budget)}\n          </div>\n        ) : (\n          <span className=\"text-muted-foreground\">-</span>\n        );\n\n      case 'startsAt':\n        return project.starts_at ? (\n          <div className=\"flex items-center gap-xs text-sm\">\n            <Calendar className=\"h-3 w-3\" />\n            {format(new Date(project.starts_at), 'MMM dd, yyyy')}\n          </div>\n        ) : (\n          <span className=\"text-muted-foreground\">-</span>\n        );\n\n      case 'endsAt':\n        return project.ends_at ? (\n          <div className=\"flex items-center gap-xs text-sm\">\n            <Calendar className=\"h-3 w-3\" />\n            {format(new Date(project.ends_at), 'MMM dd, yyyy')}\n          </div>\n        ) : (\n          <span className=\"text-muted-foreground\">-</span>\n        );\n\n      case 'location':\n        return project.location ? (\n          <div className=\"flex items-center gap-xs text-sm\">\n            <MapPin className=\"h-3 w-3\" />\n            <span className=\"truncate\">{project.location}</span>\n          </div>\n        ) : (\n          <span className=\"text-muted-foreground\">-</span>\n        );\n\n      case 'created_at':\n        return (\n          <div className=\"text-sm text-muted-foreground\">\n            {format(new Date(project.created_at), 'MMM dd, yyyy')}\n          </div>\n        );\n\n      case 'tags':\n        return project.tags && project.tags.length > 0 ? (\n          <div className=\"flex flex-wrap gap-xs\">\n            {project.tags.slice(0, 2).map((tag) => (\n              <Badge key={tag} variant=\"secondary\" className=\"text-xs\">\n                {tag}\n              </Badge>\n            ))}\n            {project.tags.length > 2 && (\n              <Badge variant=\"secondary\" className=\"text-xs\">\n                +{project.tags.length - 2}\n              </Badge>\n            )}\n          </div>\n        ) : (\n          <span className=\"text-muted-foreground\">-</span>\n        );\n\n      default:\n        return <span className=\"text-muted-foreground\">-</span>;\n    }\n  };\n\n  return (\n    <div className=\"border rounded-lg overflow-hidden\">\n      {/* Table Header */}\n      <div className=\"bg-muted/50 border-b\">\n        <div className=\"flex items-center px-md py-sm\">\n          <div className=\"flex items-center gap-sm\">\n            <Checkbox\n              checked={selectedProjects.size === projects.length && projects.length > 0}\n              indeterminate={selectedProjects.size > 0 && selectedProjects.size < projects.length}\n              onCheckedChange={onSelectAll}\n            />\n            <span className=\"text-sm font-medium\">\n              {selectedProjects.size > 0 ? `${selectedProjects.size} selected` : 'Select all'}\n            </span>\n          </div>\n        </div>\n      </div>\n\n      {/* Column Headers */}\n      <div className=\"bg-muted/30 border-b\">\n        <div className=\"grid gap-md px-md py-sm\" style={{\n          gridTemplateColumns: `40px ${visibleFields.map(() => '1fr').join(' ')} 120px`\n        }}>\n          <div></div> {/* Checkbox column */}\n          \n          {visibleFields.map((field) => (\n            <div key={field.key} className=\"flex items-center gap-xs\">\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={() => field.sortable && onSort(field.key)}\n                className=\"h-auto p-0 font-medium text-sm hover:bg-transparent\"\n                disabled={!field.sortable}\n              >\n                {field.label}\n                {field.sortable && sortField === field.key && (\n                  <ArrowUpDown className={`ml-xs h-3 w-3 ${\n                    sortDirection === 'asc' ? 'rotate-180' : ''\n                  }`} />\n                )}\n              </Button>\n            </div>\n          ))}\n          \n          <div className=\"text-sm font-medium\">Actions</div>\n        </div>\n      </div>\n\n      {/* Table Body */}\n      <div className=\"divide-y\">\n        {projects.map((project) => (\n          <div\n            key={project.id}\n            className={`grid gap-md px-md py-sm hover:bg-muted/30 transition-colors ${\n              selectedProjects.has(project.id) ? 'bg-primary/5' : ''\n            }`}\n            style={{\n              gridTemplateColumns: `40px ${visibleFields.map(() => '1fr').join(' ')} 120px`\n            }}\n          >\n            {/* Checkbox */}\n            <div className=\"flex items-center\">\n              <Checkbox\n                checked={selectedProjects.has(project.id)}\n                onCheckedChange={() => onSelectProject(project.id)}\n              />\n            </div>\n\n            {/* Field Columns */}\n            {visibleFields.map((field) => (\n              <div key={field.key} className=\"flex items-center min-w-0\">\n                {renderCellContent(project, field)}\n              </div>\n            ))}\n\n            {/* Actions */}\n            <div className=\"flex items-center gap-xs\">\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={() => onView(project)}\n                className=\"h-8 w-8 p-0\"\n                title=\"View project\"\n              >\n                <Eye className=\"h-3 w-3\" />\n              </Button>\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={() => onEdit(project)}\n                className=\"h-8 w-8 p-0\"\n                title=\"Edit project\"\n              >\n                <Edit className=\"h-3 w-3\" />\n              </Button>\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={() => onDelete(project)}\n                className=\"h-8 w-8 p-0 text-destructive hover:text-destructive\"\n                title=\"Delete project\"\n              >\n                <Trash2 className=\"h-3 w-3\" />\n              </Button>\n            </div>\n          </div>\n        ))}\n      </div>\n\n      {/* Empty State */}\n      {projects.length === 0 && (\n        <div className=\"text-center py-xl\">\n          <div className=\"text-muted-foreground\">\n            <div className=\"text-lg font-medium mb-sm\">No projects found</div>\n            <div className=\"text-sm\">Try adjusting your search or filter criteria</div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ghxstship/apps/web/app/(app)/(shell)/projects/risks/views/RiskGridView.tsx","messages":[{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Edit' is not defined.","line":71,"column":18,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":71,"endColumn":22},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'User' is not defined.","line":120,"column":20,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":120,"endColumn":24},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Clock' is not defined.","line":137,"column":20,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":137,"endColumn":25},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Shield' is not defined.","line":145,"column":20,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":145,"endColumn":26},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Eye' is not defined.","line":160,"column":20,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":160,"endColumn":23},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Copy' is not defined.","line":170,"column":20,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":170,"endColumn":24},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Trash2' is not defined.","line":180,"column":20,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":180,"endColumn":26}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport { Card, Badge, Button, Checkbox } from \"@ghxstship/ui\";\nimport type { Risk } from \"../RisksClient\";\nimport type { LucideIcon } from \"lucide-react\";\n\ninterface RiskGridViewProps {\n  risks: Risk[];\n  selectedRisks: Set<string>;\n  onSelectRisk: (id: string) => void;\n  onView: (risk: Risk) => void;\n  onEdit: (risk: Risk) => void;\n  onDelete: (risk: Risk) => void;\n  onDuplicate: (risk: Risk) => void;\n  getCategoryIcon: (category: string) => LucideIcon;\n  getRiskLevelColor: (score: number) => string;\n  getRiskLevelBadgeVariant: (score: number) => any;\n  getStatusBadgeVariant: (status: string) => any;\n  getCategoryBadgeVariant: (category: string) => any;\n}\n\nexport default function RiskGridView({\n  risks,\n  selectedRisks,\n  onSelectRisk,\n  onView,\n  onEdit,\n  onDelete,\n  onDuplicate,\n  getCategoryIcon,\n  getRiskLevelColor,\n  getRiskLevelBadgeVariant,\n  getStatusBadgeVariant,\n  getCategoryBadgeVariant,\n}: RiskGridViewProps) {\n  const getRiskLevel = (score: number) => {\n    if (score >= 20) return \"Critical\";\n    if (score >= 12) return \"High\";\n    if (score >= 6) return \"Medium\";\n    return \"Low\";\n  };\n\n  return (\n    <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-md\">\n      {risks.map((risk) => {\n        const CategoryIcon = getCategoryIcon(risk.category);\n        const riskLevel = getRiskLevel(risk.risk_score);\n        \n        return (\n          <Card\n            key={risk.id}\n            className={`p-md cursor-pointer hover:shadow-lg transition-shadow ${\n              selectedRisks.has(risk.id) ? \"ring-2 ring-primary\" : \"\"\n            }`}\n            onClick={() => onView(risk)}\n          >\n            <div className=\"flex items-start justify-between mb-sm\">\n              <Checkbox\n                checked={selectedRisks.has(risk.id)}\n                onChange={() => onSelectRisk(risk.id)}\n                onClick={(e: React.MouseEvent) => e.stopPropagation()}\n              />\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={(e) => {\n                  e.stopPropagation();\n                  onEdit(risk);\n                }}\n              >\n                <Edit className=\"h-4 w-4\" />\n              </Button>\n            </div>\n\n            <div className=\"space-y-sm\">\n              {/* Risk Score and Level */}\n              <div className=\"flex items-center justify-between\">\n                <div className={`text-3xl font-bold ${getRiskLevelColor(risk.risk_score)}`}>\n                  {risk.risk_score}\n                </div>\n                <Badge variant={getRiskLevelBadgeVariant(risk.risk_score)}>\n                  {riskLevel}\n                </Badge>\n              </div>\n\n              {/* Title */}\n              <h3 className=\"font-semibold line-clamp-2\">{risk.title}</h3>\n\n              {/* Category and Status */}\n              <div className=\"flex items-center gap-xs flex-wrap\">\n                <Badge variant={getCategoryBadgeVariant(risk.category)}>\n                  <CategoryIcon className=\"h-3 w-3 mr-xs\" />\n                  {risk.category}\n                </Badge>\n                <Badge variant={getStatusBadgeVariant(risk.status)}>\n                  {risk.status}\n                </Badge>\n              </div>\n\n              {/* Probability and Impact */}\n              <div className=\"grid grid-cols-2 gap-xs text-sm\">\n                <div>\n                  <span className=\"text-muted-foreground\">Probability:</span>\n                  <span className=\"ml-xs font-medium\">{risk.probability.replace(\"_\", \" \")}</span>\n                </div>\n                <div>\n                  <span className=\"text-muted-foreground\">Impact:</span>\n                  <span className=\"ml-xs font-medium\">{risk.impact.replace(\"_\", \" \")}</span>\n                </div>\n              </div>\n\n              {/* Description */}\n              <p className=\"text-sm text-muted-foreground line-clamp-2\">\n                {risk.description}\n              </p>\n\n              {/* Owner */}\n              {risk.owner && (\n                <div className=\"flex items-center gap-xs text-sm text-muted-foreground\">\n                  <User className=\"h-3 w-3\" />\n                  <span className=\"truncate\">\n                    {risk.owner.full_name || risk.owner.email}\n                  </span>\n                </div>\n              )}\n\n              {/* Project */}\n              {risk.project && (\n                <div className=\"text-sm text-muted-foreground truncate\">\n                  Project: {risk.project.name}\n                </div>\n              )}\n\n              {/* Review Date */}\n              {risk.review_date && (\n                <div className=\"flex items-center gap-xs text-sm text-muted-foreground\">\n                  <Clock className=\"h-3 w-3\" />\n                  <span>Review: {new Date(risk.review_date).toLocaleDateString()}</span>\n                </div>\n              )}\n\n              {/* Mitigation Status */}\n              {risk.mitigation_plan && (\n                <div className=\"flex items-center gap-xs text-sm text-success\">\n                  <Shield className=\"h-3 w-3\" />\n                  <span>Mitigation plan in place</span>\n                </div>\n              )}\n\n              {/* Actions */}\n              <div className=\"flex items-center gap-xs pt-sm border-t\">\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={(e) => {\n                    e.stopPropagation();\n                    onView(risk);\n                  }}\n                >\n                  <Eye className=\"h-4 w-4\" />\n                </Button>\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={(e) => {\n                    e.stopPropagation();\n                    onDuplicate(risk);\n                  }}\n                >\n                  <Copy className=\"h-4 w-4\" />\n                </Button>\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={(e) => {\n                    e.stopPropagation();\n                    onDelete(risk);\n                  }}\n                >\n                  <Trash2 className=\"h-4 w-4 text-destructive\" />\n                </Button>\n              </div>\n            </div>\n          </Card>\n        );\n      })}\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ghxstship/apps/web/app/(app)/(shell)/projects/risks/views/RiskListView.tsx","messages":[{"ruleId":"react/jsx-no-undef","severity":2,"message":"'ArrowUp' is not defined.","line":119,"column":28,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":119,"endColumn":35},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'ArrowDown' is not defined.","line":121,"column":28,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":121,"endColumn":37},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'ArrowUpDown' is not defined.","line":124,"column":26,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":124,"endColumn":37},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Eye' is not defined.","line":161,"column":22,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":161,"endColumn":25},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Edit' is not defined.","line":168,"column":22,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":168,"endColumn":26},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Copy' is not defined.","line":175,"column":22,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":175,"endColumn":26},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Trash2' is not defined.","line":183,"column":22,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":183,"endColumn":28}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport { Badge, Button, Checkbox } from \"@ghxstship/ui\";\nimport type { Risk } from \"../RisksClient\";\n\ninterface RiskListViewProps {\n  risks: Risk[];\n  selectedRisks: Set<string>;\n  fieldVisibility: Array<{ id: string; label: string; visible: boolean; sortable: boolean }>;\n  sortField: string;\n  sortDirection: \"asc\" | \"desc\";\n  onSelectAll: () => void;\n  onSelectRisk: (id: string) => void;\n  onSort: (field: string) => void;\n  onView: (risk: Risk) => void;\n  onEdit: (risk: Risk) => void;\n  onDelete: (risk: Risk) => void;\n  onDuplicate: (risk: Risk) => void;\n  getRiskLevelBadgeVariant: (score: number) => any;\n  getStatusBadgeVariant: (status: string) => any;\n  getCategoryBadgeVariant: (category: string) => any;\n}\n\nexport default function RiskListView({\n  risks,\n  selectedRisks,\n  fieldVisibility,\n  sortField,\n  sortDirection,\n  onSelectAll,\n  onSelectRisk,\n  onSort,\n  onView,\n  onEdit,\n  onDelete,\n  onDuplicate,\n  getRiskLevelBadgeVariant,\n  getStatusBadgeVariant,\n  getCategoryBadgeVariant,\n}: RiskListViewProps) {\n  const visibleFields = fieldVisibility.filter((f) => f.visible);\n\n  const getRiskLevel = (score: number) => {\n    if (score >= 20) return \"Critical\";\n    if (score >= 12) return \"High\";\n    if (score >= 6) return \"Medium\";\n    return \"Low\";\n  };\n\n  const renderFieldValue = (risk: Risk, fieldId: string) => {\n    switch (fieldId) {\n      case \"title\":\n        return <span className=\"font-medium\">{risk.title}</span>;\n      case \"category\":\n        return (\n          <Badge variant={getCategoryBadgeVariant(risk.category)}>\n            {risk.category}\n          </Badge>\n        );\n      case \"probability\":\n        return risk.probability.replace(\"_\", \" \");\n      case \"impact\":\n        return risk.impact.replace(\"_\", \" \");\n      case \"risk_score\":\n        return (\n          <div className=\"flex items-center gap-xs\">\n            <span className=\"font-bold\">{risk.risk_score}</span>\n            <Badge variant={getRiskLevelBadgeVariant(risk.risk_score)}>\n              {getRiskLevel(risk.risk_score)}\n            </Badge>\n          </div>\n        );\n      case \"status\":\n        return (\n          <Badge variant={getStatusBadgeVariant(risk.status)}>\n            {risk.status}\n          </Badge>\n        );\n      case \"owner\":\n        return risk.owner?.full_name || risk.owner?.email || \"-\";\n      case \"project\":\n        return risk.project?.name || \"-\";\n      case \"identified_date\":\n        return new Date(risk.identified_date).toLocaleDateString();\n      case \"review_date\":\n        return risk.review_date ? new Date(risk.review_date).toLocaleDateString() : \"-\";\n      case \"created_at\":\n        return new Date(risk.created_at).toLocaleDateString();\n      default:\n        return \"-\";\n    }\n  };\n\n  return (\n    <div className=\"overflow-x-auto\">\n      <table className=\"w-full\">\n        <thead>\n          <tr className=\"border-b\">\n            <th className=\"text-left p-sm\">\n              <Checkbox\n                checked={selectedRisks.size === risks.length && risks.length > 0}\n                onChange={onSelectAll}\n              />\n            </th>\n            {visibleFields.map((field) => (\n              <th\n                key={field.id}\n                className={`text-left p-sm ${\n                  field.sortable ? \"cursor-pointer hover:bg-muted/50\" : \"\"\n                }`}\n                onClick={() => field.sortable && onSort(field.id)}\n              >\n                <div className=\"flex items-center gap-xs\">\n                  {field.label}\n                  {field.sortable && (\n                    <>\n                      {sortField === field.id ? (\n                        sortDirection === \"asc\" ? (\n                          <ArrowUp className=\"h-3 w-3\" />\n                        ) : (\n                          <ArrowDown className=\"h-3 w-3\" />\n                        )\n                      ) : (\n                        <ArrowUpDown className=\"h-3 w-3 opacity-30\" />\n                      )}\n                    </>\n                  )}\n                </div>\n              </th>\n            ))}\n            <th className=\"text-left p-sm\">Actions</th>\n          </tr>\n        </thead>\n        <tbody>\n          {risks.map((risk) => (\n            <tr\n              key={risk.id}\n              className={`border-b hover:bg-muted/50 cursor-pointer ${\n                selectedRisks.has(risk.id) ? \"bg-primary/5\" : \"\"\n              }`}\n              onClick={() => onView(risk)}\n            >\n              <td className=\"p-sm\" onClick={(e) => e.stopPropagation()}>\n                <Checkbox\n                  checked={selectedRisks.has(risk.id)}\n                  onChange={() => onSelectRisk(risk.id)}\n                />\n              </td>\n              {visibleFields.map((field) => (\n                <td key={field.id} className=\"p-sm\">\n                  {renderFieldValue(risk, field.id)}\n                </td>\n              ))}\n              <td className=\"p-sm\" onClick={(e) => e.stopPropagation()}>\n                <div className=\"flex items-center gap-xs\">\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={() => onView(risk)}\n                  >\n                    <Eye className=\"h-4 w-4\" />\n                  </Button>\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={() => onEdit(risk)}\n                  >\n                    <Edit className=\"h-4 w-4\" />\n                  </Button>\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={() => onDuplicate(risk)}\n                  >\n                    <Copy className=\"h-4 w-4\" />\n                  </Button>\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={() => onDelete(risk)}\n                    className=\"text-destructive\"\n                  >\n                    <Trash2 className=\"h-4 w-4\" />\n                  </Button>\n                </div>\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n      \n      {risks.length === 0 && (\n        <div className=\"text-center py-xl text-muted-foreground\">\n          No risks to display\n        </div>\n      )}\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ghxstship/apps/web/app/(app)/(shell)/projects/schedule/ScheduleClient.tsx","messages":[{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":605,"column":92,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[21839,21889],"text":"No tasks associated with this milestone&apos;s project."},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[21839,21889],"text":"No tasks associated with this milestone&lsquo;s project."},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[21839,21889],"text":"No tasks associated with this milestone&#39;s project."},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[21839,21889],"text":"No tasks associated with this milestone&rsquo;s project."},"desc":"Replace with `&rsquo;`."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { Calendar, Clock, CheckCircle, AlertCircle, BarChart3, ChevronLeft, ChevronRight, Filter } from \"lucide-react\";\nimport { useCallback, useMemo, useState, type ChangeEvent } from 'react';\nimport { Badge, Button } from '@ghxstship/ui';\nimport AppDrawer from '@/app/_components/shared/AppDrawer';\n\nexport interface ScheduleProject {\n  id: string;\n  name: string;\n  status: string;\n  starts_at: string | null;\n  ends_at: string | null;\n  budget: number;\n}\n\nexport interface ScheduleMilestone {\n  id: string;\n  title: string;\n  due_at: string;\n  status: string;\n  project_id: string;\n  project?: { name: string };\n}\n\nexport interface ScheduleTask {\n  id: string;\n  title: string;\n  status: string;\n  due_at: string | null;\n  project_id: string;\n  project?: { name: string };\n}\n\nexport interface ScheduleData {\n  projects: ScheduleProject[];\n  milestones: ScheduleMilestone[];\n  tasks: ScheduleTask[];\n}\n\ntype ViewMode = 'timeline' | 'calendar' | 'list';\n\ntype DrawerSelection =\n  | { type: 'project'; id: string }\n  | { type: 'milestone'; id: string }\n  | { type: 'task'; id: string }\n  | null;\n\ntype ScheduleDrawerPayload =\n  | {\n      type: 'project';\n      project: ScheduleProject;\n      milestones: ScheduleMilestone[];\n      tasks: ScheduleTask[];\n    }\n  | {\n      type: 'milestone';\n      milestone: ScheduleMilestone;\n      project: ScheduleProject | undefined;\n      relatedTasks: ScheduleTask[];\n    }\n  | {\n      type: 'task';\n      task: ScheduleTask;\n      project: ScheduleProject | undefined;\n    }\n  | null;\n\ninterface UpcomingItem {\n  id: string;\n  type: 'milestone' | 'task';\n  title: string;\n  status: string;\n  date: string;\n  projectName?: string;\n}\n\nconst getStatusColor = (status: string) => {\n  switch (status) {\n    case 'active':\n    case 'in_progress':\n    case 'pending':\n      return 'bg-accent/10 color-accent';\n    case 'completed':\n    case 'done':\n      return 'bg-success/10 color-success';\n    case 'on_hold':\n    case 'blocked':\n      return 'bg-warning/10 color-warning';\n    case 'cancelled':\n      return 'bg-destructive/10 color-destructive';\n    default:\n      return 'bg-secondary/50 color-muted';\n  }\n};\n\nconst formatCurrency = (amount: number) =>\n  new Intl.NumberFormat('en-US', {\n    style: 'currency',\n    currency: 'USD',\n    minimumFractionDigits: 0,\n    maximumFractionDigits: 0,\n  }).format(amount);\n\nconst isOverdue = (date: string | null | undefined) => {\n  if (!date) {\n    return false;\n  }\n  const due = new Date(date);\n  const now = new Date();\n  return due < now;\n};\n\nconst toDateLabel = (value: string | null | undefined) =>\n  value ? new Date(value).toLocaleDateString() : 'Not scheduled';\n\nexport default function ScheduleClient({ data }: { data: ScheduleData }) {\n  const [view, setView] = useState<ViewMode>('timeline');\n  const [currentMonth, setCurrentMonth] = useState(new Date());\n  const [selectedProject, setSelectedProject] = useState<string>('all');\n  const [selection, setSelection] = useState<DrawerSelection>(null);\n\n  const filteredData = useMemo(() => {\n    if (selectedProject === 'all') {\n      return data;\n    }\n\n    return {\n      projects: data.projects.filter((project) => project.id === selectedProject),\n      milestones: data.milestones.filter((milestone) => milestone.project_id === selectedProject),\n      tasks: data.tasks.filter((task) => task.project_id === selectedProject),\n    } satisfies ScheduleData;\n  }, [data, selectedProject]);\n\n  const upcomingItems = useMemo<UpcomingItem[]>(() => {\n    const items: UpcomingItem[] = [];\n\n    filteredData.milestones.forEach((milestone) => {\n      items.push({\n        id: milestone.id,\n        type: 'milestone',\n        title: milestone.title,\n        status: milestone.status,\n        date: milestone.due_at,\n        projectName: milestone.project?.name ?? data.projects.find((project) => project.id === milestone.project_id)?.name,\n      });\n    });\n\n    filteredData.tasks.forEach((task) => {\n      if (!task.due_at) {\n        return;\n      }\n      items.push({\n        id: task.id,\n        type: 'task',\n        title: task.title,\n        status: task.status,\n        date: task.due_at,\n        projectName: task.project?.name ?? data.projects.find((project) => project.id === task.project_id)?.name,\n      });\n    });\n\n    return items\n      .filter((item) => Boolean(item.date))\n      .sort((a, b) => new Date(a.date).getTime() - new Date(b.date).getTime())\n      .slice(0, 10);\n  }, [data.projects, filteredData]);\n\n  const calendarCells = useMemo(() => {\n    const firstOfMonth = new Date(currentMonth.getFullYear(), currentMonth.getMonth(), 1);\n    const start = new Date(firstOfMonth);\n    start.setDate(start.getDate() - firstOfMonth.getDay());\n\n    return Array.from({ length: 35 }, (_, index) => {\n      const cellDate = new Date(start);\n      cellDate.setDate(start.getDate() + index);\n\n      const items = upcomingItems.filter((item) => {\n        const itemDate = new Date(item.date);\n        return itemDate.toDateString() === cellDate.toDateString();\n      });\n\n      return { date: cellDate, items };\n    });\n  }, [currentMonth, upcomingItems]);\n\n  const drawerPayload = useMemo<ScheduleDrawerPayload>(() => {\n    if (!selection) {\n      return null;\n    }\n\n    if (selection.type === 'project') {\n      const project = data.projects.find((candidate) => candidate.id === selection.id);\n      if (!project) {\n        return null;\n      }\n\n      const milestones = data.milestones.filter((milestone) => milestone.project_id === project.id);\n      const tasks = data.tasks.filter((task) => task.project_id === project.id);\n\n      return { type: 'project', project, milestones, tasks };\n    }\n\n    if (selection.type === 'milestone') {\n      const milestone = data.milestones.find((candidate) => candidate.id === selection.id);\n      if (!milestone) {\n        return null;\n      }\n\n      const project = data.projects.find((candidate) => candidate.id === milestone.project_id);\n      const relatedTasks = data.tasks.filter((task) => task.project_id === milestone.project_id);\n\n      return { type: 'milestone', milestone, project, relatedTasks };\n    }\n\n    const task = data.tasks.find((candidate) => candidate.id === selection.id);\n    if (!task) {\n      return null;\n    }\n\n    const project = data.projects.find((candidate) => candidate.id === task.project_id);\n\n    return { type: 'task', task, project };\n  }, [data.milestones, data.projects, data.tasks, selection]);\n\n  const handleSelectProject = useCallback((event: ChangeEvent<HTMLSelectElement>) => {\n    setSelectedProject(event.target.value);\n  }, []);\n\n  const handleViewChange = useCallback((mode: ViewMode) => {\n    setView(mode);\n  }, []);\n\n  const handlePrevMonth = useCallback(() => {\n    setCurrentMonth((previous) => new Date(previous.getFullYear(), previous.getMonth() - 1, 1));\n  }, []);\n\n  const handleNextMonth = useCallback(() => {\n    setCurrentMonth((previous) => new Date(previous.getFullYear(), previous.getMonth() + 1, 1));\n  }, []);\n\n  const handleToday = useCallback(() => {\n    setCurrentMonth(new Date());\n  }, []);\n\n  const handleOpenProject = useCallback((projectId: string) => {\n    setSelection({ type: 'project', id: projectId });\n  }, []);\n\n  const handleOpenMilestone = useCallback((milestoneId: string) => {\n    setSelection({ type: 'milestone', id: milestoneId });\n  }, []);\n\n  const handleOpenTask = useCallback((taskId: string) => {\n    setSelection({ type: 'task', id: taskId });\n  }, []);\n\n  const handleDrawerClose = useCallback(() => {\n    setSelection(null);\n  }, []);\n\n  return (\n    <div className=\"stack-lg\">\n      <div className=\"flex items-center justify-between gap-md\">\n        <div className=\"flex items-center gap-sm\">\n          <Filter className=\"w-4 h-4 color-muted\" />\n          <select\n            value={selectedProject}\n            onChange={handleSelectProject}\n            className=\"rounded border px-md py-xs text-body-sm\"\n          >\n            <option value=\"all\">All Projects</option>\n            {data.projects.map((project) => (\n              <option key={project.id} value={project.id}>\n                {project.name}\n              </option>\n            ))}\n          </select>\n        </div>\n\n        <div className=\"flex items-center gap-sm\">\n          <Button variant={view === 'timeline' ? 'primary' : 'outline'} onClick={() => handleViewChange('timeline')}>\n            <BarChart3 className=\"w-4 h-4 mr-xs\" />\n            Timeline\n          </Button>\n          <Button variant={view === 'calendar' ? 'primary' : 'outline'} onClick={() => handleViewChange('calendar')}>\n            <Calendar className=\"w-4 h-4 mr-xs\" />\n            Calendar\n          </Button>\n          <Button variant={view === 'list' ? 'primary' : 'outline'} onClick={() => handleViewChange('list')}>\n            <Clock className=\"w-4 h-4 mr-xs\" />\n            List\n          </Button>\n        </div>\n      </div>\n\n      {view === 'timeline' && (\n        <div className=\"stack-md\">\n          <h3 className=\"text-body text-heading-4\">Project Timeline</h3>\n          <div className=\"stack-sm\">\n            {filteredData.projects.map((project) => (\n              <div key={project.id} className=\"border rounded-lg p-md\">\n                <div className=\"flex items-center justify-between mb-sm\">\n                  <div className=\"flex items-center gap-sm\">\n                    <h4 className=\"form-label\">{project.name}</h4>\n                    <Badge className={getStatusColor(project.status)}>{project.status}</Badge>\n                  </div>\n                  <div className=\"text-body-sm color-muted\">{formatCurrency(project.budget)}</div>\n                </div>\n\n                {project.starts_at && project.ends_at && (\n                  <div className=\"flex flex-wrap items-center gap-md text-body-sm color-muted mb-sm\">\n                    <span>Start: {toDateLabel(project.starts_at)}</span>\n                    <span>End: {toDateLabel(project.ends_at)}</span>\n                    <span>\n                      Duration:{' '}\n                      {Math.ceil(\n                        (new Date(project.ends_at).getTime() - new Date(project.starts_at).getTime()) /\n                          (1000 * 60 * 60 * 24),\n                      )}{' '}\n                      days\n                    </span>\n                  </div>\n                )}\n\n                <div className=\"stack-sm\">\n                  {filteredData.milestones\n                    .filter((milestone) => milestone.project_id === project.id)\n                    .map((milestone) => (\n                      <button\n                        key={milestone.id}\n                        type=\"button\"\n                        onClick={() => handleOpenMilestone(milestone.id)}\n                        className=\"flex items-center gap-sm p-sm bg-secondary/50 rounded text-left hover:bg-secondary/70\"\n                      >\n                        <CheckCircle className=\"w-4 h-4 color-accent\" />\n                        <span className=\"flex-1\">{milestone.title}</span>\n                        <Badge className={getStatusColor(milestone.status)}>{milestone.status}</Badge>\n                        <span className={`text-body-sm ${isOverdue(milestone.due_at) ? 'color-destructive' : 'color-muted'}`}>\n                          {toDateLabel(milestone.due_at)}\n                        </span>\n                      </button>\n                    ))}\n                </div>\n\n                <div className=\"mt-sm flex justify-end\">\n                  <Button variant=\"ghost\" size=\"sm\" onClick={() => handleOpenProject(project.id)}>\n                    View project details\n                  </Button>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n\n      {view === 'calendar' && (\n        <div className=\"stack-md\">\n          <div className=\"flex items-center justify-between\">\n            <h3 className=\"text-body text-heading-4\">\n              {currentMonth.toLocaleDateString('en-US', { month: 'long', year: 'numeric' })}\n            </h3>\n            <div className=\"flex items-center gap-sm\">\n              <Button variant=\"outline\" onClick={handlePrevMonth}>\n                <ChevronLeft className=\"w-4 h-4\" />\n              </Button>\n              <Button variant=\"outline\" onClick={handleToday}>\n                Today\n              </Button>\n              <Button variant=\"outline\" onClick={handleNextMonth}>\n                <ChevronRight className=\"w-4 h-4\" />\n              </Button>\n            </div>\n          </div>\n\n          <div className=\"grid grid-cols-7 gap-xs text-center text-body-sm form-label color-muted mb-sm\">\n            <div>Sun</div>\n            <div>Mon</div>\n            <div>Tue</div>\n            <div>Wed</div>\n            <div>Thu</div>\n            <div>Fri</div>\n            <div>Sat</div>\n          </div>\n\n          <div className=\"grid grid-cols-7 gap-xs\">\n            {calendarCells.map(({ date, items }, index) => {\n              const isCurrentMonth = date.getMonth() === currentMonth.getMonth();\n              const isToday = date.toDateString() === new Date().toDateString();\n\n              return (\n                <div\n                  key={`${date.toISOString()}-${index}`}\n                  className={`min-h-20 p-xs border rounded ${isCurrentMonth ? 'bg-background' : 'bg-secondary/50'} ${\n                    isToday ? 'ring-2 ring-primary' : ''\n                  }`}\n                >\n                  <div className={`text-body-sm ${isCurrentMonth ? 'color-foreground' : 'color-muted'}`}>{date.getDate()}</div>\n                  <div className=\"stack-md\">\n                    {items.slice(0, 2).map((item) => (\n                      <button\n                        key={item.id}\n                        type=\"button\"\n                        onClick={() => (item.type === 'milestone' ? handleOpenMilestone(item.id) : handleOpenTask(item.id))}\n                        className={`text-body-sm p-xs rounded truncate text-left ${\n                          item.type === 'milestone' ? 'bg-accent/10 color-accent' : 'bg-success/10 color-success'\n                        }`}\n                        title={item.title}\n                      >\n                        {item.title}\n                      </button>\n                    ))}\n                    {items.length > 2 && (\n                      <div className=\"text-body-sm color-muted\">+{items.length - 2} more</div>\n                    )}\n                  </div>\n                </div>\n              );\n            })}\n          </div>\n        </div>\n      )}\n\n      {view === 'list' && (\n        <div className=\"stack-md\">\n          <h3 className=\"text-body text-heading-4\">Upcoming Items</h3>\n          <div className=\"stack-sm\">\n            {upcomingItems.map((item) => (\n              <button\n                key={item.id}\n                type=\"button\"\n                onClick={() => (item.type === 'milestone' ? handleOpenMilestone(item.id) : handleOpenTask(item.id))}\n                className=\"flex items-center gap-md p-sm border rounded-lg text-left hover:bg-secondary/50\"\n              >\n                <div className=\"flex items-center gap-sm\">\n                  {item.type === 'milestone' ? (\n                    <CheckCircle className=\"w-4 h-4 color-accent\" />\n                  ) : (\n                    <Clock className=\"w-4 h-4 color-success\" />\n                  )}\n                  <span className=\"text-body-sm form-label capitalize\">{item.type}</span>\n                </div>\n\n                <div className=\"flex-1\">\n                  <div className=\"form-label\">{item.title}</div>\n                  <div className=\"text-body-sm color-muted\">{item.projectName || 'Unassigned project'}</div>\n                </div>\n\n                <div className=\"flex items-center gap-sm\">\n                  <Badge className={getStatusColor(item.status)}>{item.status}</Badge>\n                  <div className={`text-body-sm ${isOverdue(item.date) ? 'color-destructive form-label' : 'color-muted'}`}>\n                    {isOverdue(item.date) && <AlertCircle className=\"w-4 h-4 inline mr-xs\" />}\n                    {toDateLabel(item.date)}\n                  </div>\n                </div>\n              </button>\n            ))}\n          </div>\n        </div>\n      )}\n\n      <div className=\"grid grid-cols-1 gap-md pt-lg border-t md:grid-cols-4\">\n        <div className=\"text-center\">\n          <div className=\"text-heading-3 color-accent\">{filteredData.projects.length}</div>\n          <div className=\"text-body-sm color-muted\">Active Projects</div>\n        </div>\n        <div className=\"text-center\">\n          <div className=\"text-heading-3 color-success\">{filteredData.milestones.length}</div>\n          <div className=\"text-body-sm color-muted\">Milestones</div>\n        </div>\n        <div className=\"text-center\">\n          <div className=\"text-heading-3 color-warning\">{filteredData.tasks.length}</div>\n          <div className=\"text-body-sm color-muted\">Scheduled Tasks</div>\n        </div>\n        <div className=\"text-center\">\n          <div className=\"text-heading-3 color-destructive\">\n            {upcomingItems.filter((item) => isOverdue(item.date)).length}\n          </div>\n          <div className=\"text-body-sm color-muted\">Overdue Items</div>\n        </div>\n      </div>\n\n      <AppDrawer\n        open={drawerPayload !== null}\n        onClose={handleDrawerClose}\n        record={drawerPayload}\n        fields={[]}\n        mode=\"view\"\n        title={\n          drawerPayload?.type === 'project'\n            ? drawerPayload.project.name\n            : drawerPayload?.type === 'milestone'\n            ? drawerPayload.milestone.title\n            : drawerPayload?.type === 'task'\n            ? drawerPayload.task.title\n            : 'Details'\n        }\n        tabs={drawerPayload ? getDrawerTabs(drawerPayload) : []}\n      />\n    </div>\n  );\n}\n\nfunction getDrawerTabs(payload: Exclude<ScheduleDrawerPayload, null>) {\n  if (payload.type === 'project') {\n    return [\n      {\n        key: 'details',\n        label: 'Details',\n        content: (\n          <div className=\"stack-sm text-body-sm\">\n            <div>\n              <span className=\"form-label\">Status:</span>{' '}\n              <Badge className={getStatusColor(payload.project.status)}>{payload.project.status}</Badge>\n            </div>\n            <div>\n              <span className=\"form-label\">Budget:</span> {formatCurrency(payload.project.budget)}\n            </div>\n            <div>\n              <span className=\"form-label\">Start:</span> {toDateLabel(payload.project.starts_at)}\n            </div>\n            <div>\n              <span className=\"form-label\">End:</span> {toDateLabel(payload.project.ends_at)}\n            </div>\n          </div>\n        ),\n      },\n      {\n        key: 'milestones',\n        label: 'Milestones',\n        content: payload.milestones.length > 0 ? (\n          <div className=\"stack-sm\">\n            {payload.milestones.map((milestone) => (\n              <div key={milestone.id} className=\"flex items-center gap-sm rounded border px-sm py-xs\">\n                <span className=\"flex-1\">{milestone.title}</span>\n                <Badge className={getStatusColor(milestone.status)}>{milestone.status}</Badge>\n                <span className={`text-body-sm ${isOverdue(milestone.due_at) ? 'color-destructive' : 'color-muted'}`}>\n                  {toDateLabel(milestone.due_at)}\n                </span>\n              </div>\n            ))}\n          </div>\n        ) : (\n          <div className=\"text-body-sm color-muted\">No milestones for this project.</div>\n        ),\n      },\n      {\n        key: 'tasks',\n        label: 'Tasks',\n        content: payload.tasks.length > 0 ? (\n          <div className=\"stack-sm\">\n            {payload.tasks.map((task) => (\n              <div key={task.id} className=\"flex items-center gap-sm rounded border px-sm py-xs\">\n                <span className=\"flex-1\">{task.title}</span>\n                <Badge className={getStatusColor(task.status)}>{task.status}</Badge>\n                <span className={`text-body-sm ${isOverdue(task.due_at) ? 'color-destructive' : 'color-muted'}`}>\n                  {toDateLabel(task.due_at)}\n                </span>\n              </div>\n            ))}\n          </div>\n        ) : (\n          <div className=\"text-body-sm color-muted\">No tasks scheduled for this project.</div>\n        ),\n      },\n    ];\n  }\n\n  if (payload.type === 'milestone') {\n    return [\n      {\n        key: 'details',\n        label: 'Details',\n        content: (\n          <div className=\"stack-sm text-body-sm\">\n            <div>\n              <span className=\"form-label\">Status:</span>{' '}\n              <Badge className={getStatusColor(payload.milestone.status)}>{payload.milestone.status}</Badge>\n            </div>\n            <div>\n              <span className=\"form-label\">Due Date:</span> {toDateLabel(payload.milestone.due_at)}\n            </div>\n            <div>\n              <span className=\"form-label\">Project:</span> {payload.project?.name || 'Unknown project'}\n            </div>\n          </div>\n        ),\n      },\n      {\n        key: 'tasks',\n        label: 'Project Tasks',\n        content: payload.relatedTasks.length > 0 ? (\n          <div className=\"stack-sm\">\n            {payload.relatedTasks.map((task) => (\n              <div key={task.id} className=\"flex items-center gap-sm rounded border px-sm py-xs\">\n                <span className=\"flex-1\">{task.title}</span>\n                <Badge className={getStatusColor(task.status)}>{task.status}</Badge>\n                <span className={`text-body-sm ${isOverdue(task.due_at) ? 'color-destructive' : 'color-muted'}`}>\n                  {toDateLabel(task.due_at)}\n                </span>\n              </div>\n            ))}\n          </div>\n        ) : (\n          <div className=\"text-body-sm color-muted\">No tasks associated with this milestone's project.</div>\n        ),\n      },\n    ];\n  }\n\n  return [\n    {\n      key: 'details',\n      label: 'Details',\n      content: (\n        <div className=\"stack-sm text-body-sm\">\n          <div>\n            <span className=\"form-label\">Status:</span>{' '}\n            <Badge className={getStatusColor(payload.task.status)}>{payload.task.status}</Badge>\n          </div>\n          <div>\n            <span className=\"form-label\">Due Date:</span> {toDateLabel(payload.task.due_at)}\n          </div>\n          <div>\n            <span className=\"form-label\">Project:</span> {payload.project?.name || 'Unknown project'}\n          </div>\n        </div>\n      ),\n    },\n  ];\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ghxstship/apps/web/app/(app)/(shell)/projects/tasks/TasksTableClient.tsx","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: Unterminated string literal.","line":467,"column":124,"nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport { ClipboardList, Calendar as CalendarIcon, MessageSquare, Activity as ActivityIcon, AlertCircle, CheckCircle, PauseCircle, Clock, XCircle } from \"lucide-react\";\nimport { useCallback, useMemo, useState, type ChangeEvent, type FormEvent } from \"react\";\nimport { useRouter } from \"next/navigation\";\nimport { useTranslations } from \"next-intl\";\nimport { createBrowserClient } from \"@ghxstship/auth\";\nimport { Badge, Button } from \"@ghxstship/ui\";\nimport AppDrawer from \"@/app/_components/shared/AppDrawer\";\n\nexport type TaskStatus = \"pending\" | \"in_progress\" | \"completed\" | \"blocked\" | \"cancelled\";\n\nexport interface TaskRow {\n  id: string;\n  title: string;\n  status: string;\n  due_at: string | null;\n  project_id: string | null;\n}\n\ninterface TaskComment {\n  id: string;\n  body: string;\n  created_at: string;\n}\n\ninterface TaskActivity {\n  action: string;\n  occurred_at: string;\n}\n\ninterface TaskFormData {\n  title: string;\n  status: TaskStatus;\n  dueAt: string;\n}\n\ntype TaskFormErrors = Partial<Record<keyof TaskFormData, string>>;\n\nconst initialFormState: TaskFormData = {\n  title: \"\",\n  status: \"pending\",\n  dueAt: \"\",\n};\n\nconst normalizeStatus = (status: string | null | undefined): TaskStatus => {\n  switch (status) {\n    case \"in_progress\":\n    case \"completed\":\n    case \"blocked\":\n    case \"cancelled\":\n    case \"pending\":\n      return status;\n    default:\n      return \"pending\";\n  }\n};\n\nconst statusOptions: TaskStatus[] = [\"pending\", \"in_progress\", \"completed\", \"blocked\", \"cancelled\"];\n\nexport default function TasksTableClient({ rows, orgId }: { rows: TaskRow[]; orgId: string }) {\n  const t = useTranslations(\"tasks\");\n  const router = useRouter();\n  const supabase = useMemo(() => createBrowserClient(), []);\n\n  const [openId, setOpenId] = useState<string | null>(null);\n  const [saving, setSaving] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [formData, setFormData] = useState<TaskFormData>(initialFormState);\n  const [formErrors, setFormErrors] = useState<TaskFormErrors>({});\n  const [comments, setComments] = useState<TaskComment[]>([]);\n  const [activities, setActivities] = useState<TaskActivity[]>([]);\n  const [commentsLoading, setCommentsLoading] = useState(false);\n  const [activityLoading, setActivityLoading] = useState(false);\n  const [commentInput, setCommentInput] = useState(\"\");\n  const [commentSaving, setCommentSaving] = useState(false);\n\n  const current = rows.find((row) => row.id === openId) ?? null;\n\n  const resetDrawerState = useCallback(() => {\n    setFormData(initialFormState);\n    setFormErrors({});\n    setError(null);\n    setComments([]);\n    setActivities([]);\n    setCommentsLoading(false);\n    setActivityLoading(false);\n    setCommentInput(\"\");\n    setCommentSaving(false);\n  }, []);\n\n  const loadSupportingData = useCallback(\n    async (taskId: string) => {\n      setCommentsLoading(true);\n      setActivityLoading(true);\n\n      try {\n        const { data: commentsData, error: commentsError } = await supabase\n          .from(\"comments\")\n          .select(\"id, body, created_at\")\n          .eq(\"organization_id\", orgId)\n          .eq(\"entity_type\", \"task\")\n          .eq(\"entity_id\", taskId)\n          .order(\"created_at\", { ascending: false })\n          .limit(50);\n\n        if (commentsError) {\n          throw commentsError;\n        }\n\n        setComments(commentsData ?? []);\n      } catch (commentLoadError) {\n        setError(commentLoadError instanceof Error ? commentLoadError.message : \"Failed to load comments\");\n        setComments([]);\n      } finally {\n        setCommentsLoading(false);\n      }\n\n      try {\n        const response = await fetch(`/api/audit/${orgId}/tasks/${taskId}`);\n        if (!response.ok) {\n          throw new Error(\"Failed to load activity\");\n        }\n        const json = await response.json();\n        setActivities((json?.data as TaskActivity[]) ?? []);\n      } catch (activityError) {\n        setError(activityError instanceof Error ? activityError.message : \"Failed to load activity\");\n        setActivities([]);\n      } finally {\n        setActivityLoading(false);\n      }\n    },\n    [orgId, supabase]\n  );\n\n  const handleOpen = useCallback(\n    (id: string) => {\n      const row = rows.find((entry) => entry.id === id);\n      if (!row) {\n        return;\n      }\n\n      setOpenId(id);\n      setFormData({\n        title: row.title ?? \"\",\n        status: normalizeStatus(row.status),\n        dueAt: row.due_at ? new Date(row.due_at).toISOString().slice(0, 10) : \"\",\n      });\n      setFormErrors({});\n      setError(null);\n      setCommentInput(\"\");\n      void loadSupportingData(id);\n    },\n    [loadSupportingData, rows]\n  );\n\n  const handleClose = useCallback(() => {\n    if (saving) {\n      return;\n    }\n    setOpenId(null);\n    resetDrawerState();\n  }, [resetDrawerState, saving]);\n\n  const handleInputChange = useCallback((event: ChangeEvent<HTMLInputElement>) => {\n    const { id, value } = event.target;\n    setFormData((prev) => ({ ...prev, [id]: value }));\n  }, []);\n\n  const handleStatusChange = useCallback((event: ChangeEvent<HTMLSelectElement>) => {\n    const value = event.target.value as TaskStatus;\n    setFormData((prev) => ({ ...prev, status: value }));\n  }, []);\n\n  const validateForm = useCallback((draft: TaskFormData): TaskFormErrors => {\n    const nextErrors: TaskFormErrors = {};\n    if (!draft.title.trim()) {\n      nextErrors.title = \"Title is required\";\n    }\n    return nextErrors;\n  }, []);\n\n  const handleSave = useCallback(\n    async (event: FormEvent<HTMLFormElement>) => {\n      event.preventDefault();\n      if (!openId) {\n        return;\n      }\n\n      const validation = validateForm(formData);\n      setFormErrors(validation);\n      if (Object.keys(validation).length > 0) {\n        return;\n      }\n\n      setSaving(true);\n      setError(null);\n\n      try {\n        const updatePayload = {\n          title: formData.title.trim(),\n          status: formData.status,\n          due_at: formData.dueAt || null,\n        };\n\n        const { error: updateError } = await supabase\n          .from(\"tasks\")\n          .update(updatePayload)\n          .eq(\"id\", openId)\n          .eq(\"organization_id\", orgId);\n\n        if (updateError) {\n          throw updateError;\n        }\n\n        if (typeof window !== \"undefined\" && (window as unknown).posthog) {\n          (window as unknown).posthog.capture(\"task.updated\", {\n            organization_id: orgId,\n            task_id: openId,\n            status: formData.status,\n          });\n        }\n\n        router.refresh();\n      } catch (updateError) {\n        if (updateError instanceof Error) {\n          setError(updateError.message);\n        } else {\n          setError(\"Failed to update task\");\n        }\n      } finally {\n        setSaving(false);\n      }\n    },\n    [formData, openId, orgId, router, supabase, validateForm]\n  );\n\n  const handleCommentSubmit = useCallback(\n    async (event: FormEvent<HTMLFormElement>) => {\n      event.preventDefault();\n      if (!openId) {\n        return;\n      }\n\n      const body = commentInput.trim();\n      if (!body) {\n        return;\n      }\n\n      setCommentSaving(true);\n      setError(null);\n\n      try {\n        const { data, error: insertError } = await supabase\n          .from(\"comments\")\n          .insert({\n            organization_id: orgId,\n            entity_type: \"task\",\n            entity_id: openId,\n            body,\n          })\n          .select(\"id, body, created_at\")\n          .single();\n\n        if (insertError) {\n          throw insertError;\n        }\n\n        if (data) {\n          setComments((prev) => [data, ...prev]);\n          setCommentInput(\"\");\n        }\n      } catch (commentError) {\n        setError(commentError instanceof Error ? commentError.message : \"Failed to add comment\");\n      } finally {\n        setCommentSaving(false);\n      }\n    },\n    [commentInput, openId, orgId, supabase]\n  );\n\n  const getStatusVariant = useCallback((status: TaskStatus) => {\n    switch (status) {\n      case \"completed\":\n        return \"success\" as const;\n      case \"in_progress\":\n        return \"warning\" as const;\n      case \"blocked\":\n        return \"destructive\" as const;\n      case \"cancelled\":\n        return \"secondary\" as const;\n      default:\n        return \"outline\" as const;\n    }\n  }, []);\n\n  const getStatusIcon = useCallback((status: TaskStatus) => {\n    switch (status) {\n      case \"completed\":\n        return CheckCircle;\n      case \"in_progress\":\n        return PauseCircle;\n      case \"blocked\":\n        return AlertCircle;\n      case \"cancelled\":\n        return XCircle;\n      default:\n        return Clock;\n    }\n  }, []);\n\n  const renderStatusLabel = useCallback(\n    (status: TaskStatus) => t(`statuses.${status}`, { default: status.replace(/_/g, \" \") }),\n    [t]\n  );\n\n  return (\n    <div className=\"overflow-x-auto\">\n      <table className=\"w-full border-collapse text-body-sm\">\n        <thead>\n          <tr className=\"sticky top-0\">\n            <th className=\"border-b p-sm text-left\">{t(\"grid.title\")}</th>\n            <th className=\"border-b p-sm text-left\">{t(\"grid.status\")}</th>\n            <th className=\"border-b p-sm text-left\">{t(\"grid.dueAt\")}</th>\n          </tr>\n        </thead>\n        <tbody>\n          {rows.map((row) => {\n            const status = normalizeStatus(row.status);\n            const StatusIcon = getStatusIcon(status);\n            return (\n              <tr\n                key={row.id}\n                className=\"hover:bg-accent/20 cursor-pointer\"\n                onClick={() => {\n                  void handleOpen(row.id);\n                }}\n              >\n                <td className=\"border-b p-sm\">\n                  <div className=\"flex items-center gap-sm\">\n                    <ClipboardList className=\"w-4 h-4 color-muted\" />\n                    {row.title}\n                  </div>\n                </td>\n                <td className=\"border-b p-sm\">\n                  <div className=\"flex items-center gap-sm\">\n                    <StatusIcon className=\"w-4 h-4\" />\n                    <Badge variant={getStatusVariant(status)}>{renderStatusLabel(status)}</Badge>\n                  </div>\n                </td>\n                <td className=\"border-b p-sm\">\n                  {row.due_at ? (\n                    <div className=\"flex items-center gap-sm\">\n                      <CalendarIcon className=\"w-4 h-4 color-muted\" />\n                      {new Date(row.due_at).toLocaleDateString()}\n                    </div>\n                  ) : (\n                    \"-\"\n                  )}\n                </td>\n              </tr>\n            );\n          })}\n        </tbody>\n      </table>\n\n      <AppDrawer\n        open={!!openId}\n        onClose={handleClose}\n        title={current?.title || t(\"title\")}\n        record={current}\n        fields={[]}\n        mode=\"view\"\n        tabs={[\n          {\n            key: \"details\",\n            label: t(\"drawer.details\"),\n            content: current ? (\n              <div className=\"stack-sm text-body-sm\">\n                {error ? (\n                  <div role=\"alert\" className=\"rounded border border-destructive/30 bg-destructive/10 px-sm py-xs color-destructive\">\n                    {error}\n                  </div>\n                ) : null}\n                <div>\n                  <span className=\"form-label\">{t(\"grid.title\")}:</span> {current.title}\n                </div>\n                <div className=\"flex items-center gap-sm\">\n                  <span className=\"form-label\">{t(\"grid.status\")}:</span>\n                  <Badge variant={getStatusVariant(normalizeStatus(current.status))}>\n                    {renderStatusLabel(normalizeStatus(current.status))}\n                  </Badge>\n                </div>\n                <div>\n                  <span className=\"form-label\">{t(\"grid.dueAt\")}:</span>{\" \"}\n                  {current.due_at ? new Date(current.due_at).toLocaleString() : \"-\"}\n                </div>\n              </div>\n            ) : (\n              <div />\n            ),\n          },\n          {\n            key: \"edit\",\n            label: t(\"drawer.edit\"),\n            content: current ? (\n              <form onSubmit={handleSave} className=\"stack-sm\">\n                <div className=\"grid gap-xs\">\n                  <label htmlFor=\"title\" className=\"text-body-sm\">\n                    {t(\"grid.title\")} *\n                  </label>\n                  <input\n                    id=\"title\"\n                    type=\"text\"\n                    className=\"rounded border px-md py-xs\"\n                    value={formData.title}\n                    onChange={handleInputChange}\n                    aria-invalid={formErrors.title ? \"true\" : \"false\"}\n                  />\n                  {formErrors.title ? <div className=\"text-body-sm color-destructive\">{formErrors.title}</div> : null}\n                </div>\n\n                <div className=\"grid gap-xs\">\n                  <label htmlFor=\"status\" className=\"text-body-sm\">\n                    {t(\"grid.status\")}\n                  </label>\n                  <select id=\"status\" className=\"rounded border px-md py-xs\" value={formData.status} onChange={handleStatusChange}>\n                    {statusOptions.map((status) => (\n                      <option key={status} value={status}>\n                        {renderStatusLabel(status)}\n                      </option>\n                    ))}\n                  </select>\n                </div>\n\n                <div className=\"grid gap-xs\">\n                  <label htmlFor=\"dueAt\" className=\"text-body-sm\">\n                    {t(\"grid.dueAt\")}\n                  </label>\n                  <input\n                    id=\"dueAt\"\n                    type=\"date\"\n                    className=\"rounded border px-md py-xs\"\n                    value={formData.dueAt}\n                    onChange={handleInputChange}\n                  />\n                </div>\n\n                <div className=\"flex items-center justify-between border-t pt-sm\">\n                  <Button type=\"submit\" disabled={saving}>\n                    {saving ? t(\"drawer.saving\") : t(\"drawer.save\", { default: \"Save\" })}\n                  </Button>\n                  <Button type=\"button\" variant=\"outline\" onClick={handleClose} disabled={saving}>\n                    {t(\"drawer.cancel\", { default: \"Cancel\" })}\n                  </Button>\n                </div>\n              </form>\n            ) : (\n              <div />\n            ),\n          },\n          {\n            key: \"comments\",\n            label: t(\"drawer.comments\"),\n            content: (\n              <div className=\"stack-sm\">\n                <form onSubmit={handleCommentSubmit} className=\"flex items-start gap-sm\" aria-label={t(\"drawer.comments\")}\">\n                  <textarea\n                    className=\"min-h-16 w-full rounded border p-sm\"\n                    placeholder={t(\"drawer.comments\")}\n                    value={commentInput}\n                    onChange={(event) => setCommentInput(event.target.value)}\n                  />\n                  <Button type=\"submit\" disabled={commentSaving || !commentInput.trim()}>\n                    {commentSaving ? t(\"drawer.saving\") : t(\"drawer.post\")}\n                  </Button>\n                </form>\n\n                {commentsLoading ? (\n                  <div className=\"text-body-sm opacity-70\">{t(\"drawer.loading\")}</div>\n                ) : comments.length === 0 ? (\n                  <div className=\"text-body-sm color-muted\">\n                    {t(\"drawer.noComments\", { default: \"No comments yet.\" })}\n                  </div>\n                ) : (\n                  <div className=\"stack-sm\">\n                    {comments.map((comment) => (\n                      <div key={comment.id} className=\"rounded border px-sm py-xs\">\n                        <div className=\"flex items-center gap-sm text-body-sm form-label\">\n                          <MessageSquare className=\"h-4 w-4\" />\n                          {new Date(comment.created_at).toLocaleString()}\n                        </div>\n                        <div className=\"mt-xs whitespace-pre-wrap text-body-sm\">{comment.body}</div>\n                      </div>\n                    ))}\n                  </div>\n                )}\n              </div>\n            ),\n          },\n          {\n            key: \"activity\",\n            label: t(\"drawer.activity\"),\n            content: (\n              <div className=\"stack-sm text-body-sm\">\n                {activityLoading ? (\n                  <div className=\"text-body-sm opacity-70\">{t(\"drawer.loading\")}</div>\n                ) : activities.length === 0 ? (\n                  <div className=\"text-body-sm color-muted\">\n                    {t(\"drawer.noActivity\", { default: \"No activity logged.\" })}\n                  </div>\n                ) : (\n                  activities.map((activity) => (\n                    <div key={`${activity.occurred_at}-${activity.action}`} className=\"rounded border px-sm py-xs\">\n                      <div className=\"flex items-center gap-sm\">\n                        <ActivityIcon className=\"h-4 w-4\" />\n                        {new Date(activity.occurred_at).toLocaleString()}\n                      </div>\n                      <div className=\"mt-xs\">{activity.action}</div>\n                    </div>\n                  ))\n                )}\n              </div>\n            ),\n          },\n        ]}\n      />\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ghxstship/apps/web/app/(app)/(shell)/projects/tasks/drawers/ViewTaskDrawer.tsx","messages":[{"ruleId":"@next/next/no-img-element","severity":1,"message":"Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` or a custom image loader to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","line":308,"column":21,"nodeType":"JSXOpeningElement","endLine":312,"endColumn":23},{"ruleId":"@next/next/no-img-element","severity":1,"message":"Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` or a custom image loader to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","line":329,"column":21,"nodeType":"JSXOpeningElement","endLine":333,"endColumn":23}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport { ListTodo, Calendar, Clock, Users, CheckCircle, AlertCircle, Edit, FileText, Activity, Tag, TrendingUp, Briefcase, GitBranch, Paperclip } from \"lucide-react\";\nimport { AppDrawer, Button, Badge, Progress, Card } from \"@ghxstship/ui\";\nimport { format, parseISO, differenceInDays } from \"date-fns\";\n\ninterface User {\n  id: string;\n  email: string;\n  full_name?: string;\n  avatar_url?: string;\n}\n\ninterface Project {\n  id: string;\n  name: string;\n  status: string;\n}\n\ninterface Task {\n  id: string;\n  project_id: string;\n  organization_id: string;\n  project?: Project;\n  title: string;\n  description?: string;\n  status: \"todo\" | \"in_progress\" | \"review\" | \"done\" | \"blocked\";\n  priority: \"low\" | \"medium\" | \"high\" | \"critical\";\n  assignee_id?: string;\n  assignee?: User;\n  reporter_id?: string;\n  reporter?: User;\n  parent_task_id?: string;\n  parent_task?: Task;\n  subtasks?: Task[];\n  estimated_hours?: number;\n  actual_hours?: number;\n  start_date?: string;\n  due_date?: string;\n  completed_at?: string;\n  tags?: string[];\n  dependencies?: string[];\n  attachments?: string[];\n  position: number;\n  created_at: string;\n  updated_at: string;\n}\n\ninterface ViewTaskDrawerProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  task: Task;\n  onEdit?: () => void;\n}\n\nexport default function ViewTaskDrawer({\n  open,\n  onOpenChange,\n  task,\n  onEdit,\n}: ViewTaskDrawerProps) {\n  // Calculate days until due\n  const getDaysUntil = () => {\n    if (!task.due_date) return null;\n    \n    const days = differenceInDays(parseISO(task.due_date), new Date());\n    \n    if (task.status === \"done\") {\n      return (\n        <span className=\"text-success flex items-center gap-1\">\n          <CheckCircle className=\"h-4 w-4\" />\n          Completed\n        </span>\n      );\n    } else if (days < 0) {\n      return (\n        <span className=\"text-destructive flex items-center gap-1\">\n          <AlertCircle className=\"h-4 w-4\" />\n          {Math.abs(days)} days overdue\n        </span>\n      );\n    } else if (days === 0) {\n      return (\n        <span className=\"text-warning flex items-center gap-1\">\n          <Clock className=\"h-4 w-4\" />\n          Due today\n        </span>\n      );\n    } else if (days <= 7) {\n      return (\n        <span className=\"text-warning flex items-center gap-1\">\n          <Clock className=\"h-4 w-4\" />\n          {days} days left\n        </span>\n      );\n    } else {\n      return (\n        <span className=\"text-muted-foreground flex items-center gap-1\">\n          <Clock className=\"h-4 w-4\" />\n          {days} days left\n        </span>\n      );\n    }\n  };\n\n  // Get status badge\n  const getStatusBadge = () => {\n    const variant = \n      task.status === \"done\" ? \"success\" :\n      task.status === \"in_progress\" ? \"warning\" :\n      task.status === \"review\" ? \"info\" :\n      task.status === \"blocked\" ? \"destructive\" :\n      \"secondary\";\n    \n    return (\n      <Badge variant={variant}>\n        {task.status.replace(\"_\", \" \")}\n      </Badge>\n    );\n  };\n\n  // Get priority badge\n  const getPriorityBadge = () => {\n    const variant = \n      task.priority === \"critical\" ? \"destructive\" :\n      task.priority === \"high\" ? \"warning\" :\n      task.priority === \"medium\" ? \"secondary\" :\n      \"outline\";\n    \n    return (\n      <Badge variant={variant}>\n        {task.priority}\n      </Badge>\n    );\n  };\n\n  // Calculate progress\n  const calculateProgress = () => {\n    if (task.status === \"done\") return 100;\n    if (task.status === \"review\") return 75;\n    if (task.status === \"in_progress\") return 50;\n    if (task.status === \"blocked\") return 25;\n    return 0;\n  };\n\n  // Calculate efficiency\n  const calculateEfficiency = () => {\n    if (!task.estimated_hours || !task.actual_hours) return null;\n    const efficiency = (task.estimated_hours / task.actual_hours) * 100;\n    return efficiency.toFixed(0);\n  };\n\n  // Calculate subtask progress\n  const getSubtaskProgress = () => {\n    if (!task.subtasks || task.subtasks.length === 0) return null;\n    const completed = task.subtasks.filter(st => st.status === \"done\").length;\n    const total = task.subtasks.length;\n    return { completed, total, percentage: (completed / total) * 100 };\n  };\n\n  const subtaskProgress = getSubtaskProgress();\n\n  return (\n    <AppDrawer\n      open={open}\n      onOpenChange={onOpenChange}\n      title={task.title}\n      description={task.project?.name || \"Task Details\"}\n      icon={<ListTodo className=\"h-5 w-5\" />}\n      width=\"md\"\n    >\n      <div className=\"space-y-6\">\n        {/* Header Actions */}\n        <div className=\"flex justify-between items-start\">\n          <div className=\"flex items-center gap-2\">\n            {getStatusBadge()}\n            {getPriorityBadge()}\n            {getDaysUntil()}\n          </div>\n          {onEdit && (\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={onEdit}\n            >\n              <Edit className=\"h-4 w-4 mr-2\" />\n              Edit\n            </Button>\n          )}\n        </div>\n\n        {/* Progress */}\n        <Card className=\"p-4\">\n          <div className=\"space-y-3\">\n            <div className=\"flex items-center justify-between\">\n              <span className=\"text-sm font-medium\">Task Progress</span>\n              <span className=\"text-2xl font-bold\">{calculateProgress()}%</span>\n            </div>\n            <Progress value={calculateProgress()} className=\"h-2\" />\n            {subtaskProgress && (\n              <div className=\"text-xs text-muted-foreground\">\n                {subtaskProgress.completed} of {subtaskProgress.total} subtasks completed\n              </div>\n            )}\n          </div>\n        </Card>\n\n        {/* Description */}\n        {task.description && (\n          <div>\n            <h3 className=\"font-medium mb-2 flex items-center gap-2\">\n              <FileText className=\"h-4 w-4\" />\n              Description\n            </h3>\n            <p className=\"text-sm text-muted-foreground whitespace-pre-wrap\">\n              {task.description}\n            </p>\n          </div>\n        )}\n\n        {/* Timeline */}\n        <div>\n          <h3 className=\"font-medium mb-3 flex items-center gap-2\">\n            <Calendar className=\"h-4 w-4\" />\n            Timeline\n          </h3>\n          <div className=\"space-y-3\">\n            {task.start_date && (\n              <div className=\"flex items-center justify-between p-3 bg-muted/50 rounded-lg\">\n                <span className=\"text-sm\">Start Date</span>\n                <span className=\"text-sm font-medium\">\n                  {format(parseISO(task.start_date), \"MMMM d, yyyy\")}\n                </span>\n              </div>\n            )}\n            \n            {task.due_date && (\n              <div className=\"flex items-center justify-between p-3 bg-muted/50 rounded-lg\">\n                <span className=\"text-sm\">Due Date</span>\n                <span className=\"text-sm font-medium\">\n                  {format(parseISO(task.due_date), \"MMMM d, yyyy\")}\n                </span>\n              </div>\n            )}\n            \n            {task.completed_at && (\n              <div className=\"flex items-center justify-between p-3 bg-success/10 rounded-lg\">\n                <span className=\"text-sm\">Completed</span>\n                <span className=\"text-sm font-medium\">\n                  {format(parseISO(task.completed_at), \"MMMM d, yyyy 'at' h:mm a\")}\n                </span>\n              </div>\n            )}\n          </div>\n        </div>\n\n        {/* Time Tracking */}\n        {(task.estimated_hours || task.actual_hours) && (\n          <div>\n            <h3 className=\"font-medium mb-3 flex items-center gap-2\">\n              <Clock className=\"h-4 w-4\" />\n              Time Tracking\n            </h3>\n            <div className=\"grid grid-cols-2 gap-3\">\n              {task.estimated_hours && (\n                <Card className=\"p-3\">\n                  <div className=\"text-sm text-muted-foreground\">Estimated</div>\n                  <div className=\"text-lg font-medium\">{task.estimated_hours}h</div>\n                </Card>\n              )}\n              {task.actual_hours !== undefined && (\n                <Card className=\"p-3\">\n                  <div className=\"text-sm text-muted-foreground\">Actual</div>\n                  <div className=\"text-lg font-medium\">{task.actual_hours}h</div>\n                </Card>\n              )}\n            </div>\n            {calculateEfficiency() && (\n              <div className=\"mt-3 p-3 bg-muted/50 rounded-lg flex items-center justify-between\">\n                <span className=\"text-sm flex items-center gap-2\">\n                  <TrendingUp className=\"h-4 w-4\" />\n                  Efficiency\n                </span>\n                <span className={`text-sm font-medium ${\n                  parseFloat(calculateEfficiency()) >= 100 ? \"text-success\" :\n                  parseFloat(calculateEfficiency()) >= 80 ? \"text-warning\" :\n                  \"text-destructive\"\n                }`}>\n                  {calculateEfficiency()}%\n                </span>\n              </div>\n            )}\n          </div>\n        )}\n\n        {/* People */}\n        <div>\n          <h3 className=\"font-medium mb-3 flex items-center gap-2\">\n            <Users className=\"h-4 w-4\" />\n            People\n          </h3>\n          <div className=\"space-y-3\">\n            {task.assignee && (\n              <div className=\"flex items-center justify-between p-3 bg-muted/50 rounded-lg\">\n                <span className=\"text-sm\">Assignee</span>\n                <div className=\"flex items-center gap-2\">\n                  {task.assignee.avatar_url ? (\n                    <img\n                      src={task.assignee.avatar_url}\n                      alt={task.assignee.full_name || task.assignee.email}\n                      className=\"h-6 w-6 rounded-full\"\n                    />\n                  ) : (\n                    <div className=\"h-6 w-6 rounded-full bg-muted flex items-center justify-center\">\n                      <Users className=\"h-3 w-3\" />\n                    </div>\n                  )}\n                  <span className=\"text-sm font-medium\">\n                    {task.assignee.full_name || task.assignee.email}\n                  </span>\n                </div>\n              </div>\n            )}\n            {task.reporter && (\n              <div className=\"flex items-center justify-between p-3 bg-muted/50 rounded-lg\">\n                <span className=\"text-sm\">Reporter</span>\n                <div className=\"flex items-center gap-2\">\n                  {task.reporter.avatar_url ? (\n                    <img\n                      src={task.reporter.avatar_url}\n                      alt={task.reporter.full_name || task.reporter.email}\n                      className=\"h-6 w-6 rounded-full\"\n                    />\n                  ) : (\n                    <div className=\"h-6 w-6 rounded-full bg-muted flex items-center justify-center\">\n                      <Users className=\"h-3 w-3\" />\n                    </div>\n                  )}\n                  <span className=\"text-sm font-medium\">\n                    {task.reporter.full_name || task.reporter.email}\n                  </span>\n                </div>\n              </div>\n            )}\n          </div>\n        </div>\n\n        {/* Tags */}\n        {task.tags && task.tags.length > 0 && (\n          <div>\n            <h3 className=\"font-medium mb-3 flex items-center gap-2\">\n              <Tag className=\"h-4 w-4\" />\n              Tags\n            </h3>\n            <div className=\"flex flex-wrap gap-2\">\n              {task.tags.map((tag) => (\n                <Badge key={tag} variant=\"secondary\">\n                  {tag}\n                </Badge>\n              ))}\n            </div>\n          </div>\n        )}\n\n        {/* Subtasks */}\n        {task.subtasks && task.subtasks.length > 0 && (\n          <div>\n            <h3 className=\"font-medium mb-3 flex items-center gap-2\">\n              <GitBranch className=\"h-4 w-4\" />\n              Subtasks ({subtaskProgress?.completed}/{subtaskProgress?.total})\n            </h3>\n            <div className=\"space-y-2\">\n              {task.subtasks.map((subtask) => (\n                <Card key={subtask.id} className=\"p-3\">\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center gap-2\">\n                      {subtask.status === \"done\" ? (\n                        <CheckCircle className=\"h-4 w-4 text-success\" />\n                      ) : (\n                        <div className=\"h-4 w-4 rounded-full border-2 border-muted-foreground\" />\n                      )}\n                      <span className={`text-sm ${\n                        subtask.status === \"done\" ? \"line-through text-muted-foreground\" : \"\"\n                      }`}>\n                        {subtask.title}\n                      </span>\n                    </div>\n                    <Badge\n                      variant={\n                        subtask.priority === \"critical\" ? \"destructive\" :\n                        subtask.priority === \"high\" ? \"warning\" :\n                        subtask.priority === \"medium\" ? \"secondary\" :\n                        \"outline\"\n                      }\n                      className=\"text-xs\"\n                    >\n                      {subtask.priority}\n                    </Badge>\n                  </div>\n                </Card>\n              ))}\n            </div>\n          </div>\n        )}\n\n        {/* Project Info */}\n        {task.project && (\n          <div>\n            <h3 className=\"font-medium mb-2 flex items-center gap-2\">\n              <Briefcase className=\"h-4 w-4\" />\n              Project\n            </h3>\n            <Card className=\"p-3\">\n              <div className=\"flex items-center justify-between\">\n                <span className=\"font-medium\">{task.project.name}</span>\n                <Badge variant={\n                  task.project.status === \"active\" ? \"success\" :\n                  task.project.status === \"planning\" ? \"warning\" :\n                  task.project.status === \"on_hold\" ? \"secondary\" :\n                  \"destructive\"\n                }>\n                  {task.project.status}\n                </Badge>\n              </div>\n            </Card>\n          </div>\n        )}\n\n        {/* Attachments */}\n        {task.attachments && task.attachments.length > 0 && (\n          <div>\n            <h3 className=\"font-medium mb-3 flex items-center gap-2\">\n              <Paperclip className=\"h-4 w-4\" />\n              Attachments ({task.attachments.length})\n            </h3>\n            <div className=\"space-y-2\">\n              {task.attachments.map((attachment, index) => (\n                <Card key={index} className=\"p-2\">\n                  <div className=\"flex items-center gap-2\">\n                    <Paperclip className=\"h-4 w-4 text-muted-foreground\" />\n                    <span className=\"text-sm truncate\">{attachment}</span>\n                  </div>\n                </Card>\n              ))}\n            </div>\n          </div>\n        )}\n\n        {/* Activity */}\n        <div>\n          <h3 className=\"font-medium mb-3 flex items-center gap-2\">\n            <Activity className=\"h-4 w-4\" />\n            Activity\n          </h3>\n          <div className=\"space-y-2 text-sm text-muted-foreground\">\n            <div className=\"flex items-center justify-between\">\n              <span>Created</span>\n              <span>{format(parseISO(task.created_at), \"MMM d, yyyy 'at' h:mm a\")}</span>\n            </div>\n            <div className=\"flex items-center justify-between\">\n              <span>Last Updated</span>\n              <span>{format(parseISO(task.updated_at), \"MMM d, yyyy 'at' h:mm a\")}</span>\n            </div>\n          </div>\n        </div>\n\n        {/* Close Button */}\n        <div className=\"pt-6 border-t\">\n          <Button\n            variant=\"outline\"\n            className=\"w-full\"\n            onClick={() => onOpenChange(false)}\n          >\n            Close\n          </Button>\n        </div>\n      </div>\n    </AppDrawer>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ghxstship/apps/web/app/(app)/(shell)/projects/tasks/views/TaskBoardView.tsx","messages":[{"ruleId":"@next/next/no-img-element","severity":1,"message":"Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` or a custom image loader to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","line":277,"column":19,"nodeType":"JSXOpeningElement","endLine":281,"endColumn":21}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport { MoreVertical, Clock, Users, Calendar, Tag, AlertCircle, CheckCircle, Eye, Edit, Copy, Trash2, ChevronUp, ChevronDown, Briefcase } from \"lucide-react\";\nimport { useState, useMemo } from \"react\";\nimport { Card, Badge, Button, Checkbox, DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from \"@ghxstship/ui\";\nimport { format, parseISO, differenceInDays } from \"date-fns\";\n\ninterface User {\n  id: string;\n  email: string;\n  full_name?: string;\n  avatar_url?: string;\n}\n\ninterface Project {\n  id: string;\n  name: string;\n  status: string;\n}\n\ninterface Task {\n  id: string;\n  title: string;\n  description?: string;\n  status: \"todo\" | \"in_progress\" | \"review\" | \"done\" | \"blocked\";\n  priority: \"low\" | \"medium\" | \"high\" | \"critical\";\n  assignee?: User;\n  project?: Project;\n  due_date?: string;\n  estimated_hours?: number;\n  actual_hours?: number;\n  tags?: string[];\n  subtasks?: Task[];\n  created_at: string;\n  updated_at: string;\n}\n\ninterface TaskBoardViewProps {\n  tasks: Task[];\n  selectedItems: Set<string>;\n  onSelectItem: (id: string) => void;\n  onViewTask: (task: Task) => void;\n  onEditTask: (task: Task) => void;\n  onDuplicateTask: (task: Task) => void;\n  onDeleteTask: (task: Task) => void;\n}\n\nconst BOARD_COLUMNS = [\n  { id: \"todo\", label: \"To Do\", color: \"bg-gray-500\" },\n  { id: \"in_progress\", label: \"In Progress\", color: \"bg-blue-500\" },\n  { id: \"review\", label: \"Review\", color: \"bg-yellow-500\" },\n  { id: \"done\", label: \"Done\", color: \"bg-green-500\" },\n  { id: \"blocked\", label: \"Blocked\", color: \"bg-red-500\" },\n] as const;\n\nexport default function TaskBoardView({\n  tasks,\n  selectedItems,\n  onSelectItem,\n  onViewTask,\n  onEditTask,\n  onDuplicateTask,\n  onDeleteTask,\n}: TaskBoardViewProps) {\n  const [collapsedColumns, setCollapsedColumns] = useState<Set<string>>(new Set());\n\n  // Group tasks by status\n  const tasksByStatus = useMemo(() => {\n    const grouped: Record<string, Task[]> = {\n      todo: [],\n      in_progress: [],\n      review: [],\n      done: [],\n      blocked: [],\n    };\n\n    tasks.forEach(task => {\n      if (grouped[task.status]) {\n        grouped[task.status].push(task);\n      }\n    });\n\n    // Sort tasks within each column by priority and due date\n    Object.keys(grouped).forEach(status => {\n      grouped[status].sort((a, b) => {\n        // Priority order: critical > high > medium > low\n        const priorityOrder = { critical: 0, high: 1, medium: 2, low: 3 };\n        const priorityDiff = priorityOrder[a.priority] - priorityOrder[b.priority];\n        if (priorityDiff !== 0) return priorityDiff;\n\n        // Then by due date (earliest first)\n        if (a.due_date && b.due_date) {\n          return a.due_date.localeCompare(b.due_date);\n        }\n        if (a.due_date) return -1;\n        if (b.due_date) return 1;\n\n        // Finally by creation date\n        return b.created_at.localeCompare(a.created_at);\n      });\n    });\n\n    return grouped;\n  }, [tasks]);\n\n  // Toggle column collapse\n  const toggleColumn = (columnId: string) => {\n    setCollapsedColumns(prev => {\n      const next = new Set(prev);\n      if (next.has(columnId)) {\n        next.delete(columnId);\n      } else {\n        next.add(columnId);\n      }\n      return next;\n    });\n  };\n\n  // Get priority badge variant\n  const getPriorityBadge = (priority: string) => {\n    const variant = \n      priority === \"critical\" ? \"destructive\" :\n      priority === \"high\" ? \"warning\" :\n      priority === \"medium\" ? \"secondary\" :\n      \"outline\";\n    \n    return <Badge variant={variant} className=\"text-xs\">{priority}</Badge>;\n  };\n\n  // Get days until due\n  const getDaysUntil = (dueDate?: string) => {\n    if (!dueDate) return null;\n    const days = differenceInDays(parseISO(dueDate), new Date());\n    \n    if (days < 0) {\n      return (\n        <span className=\"text-destructive text-xs flex items-center gap-1\">\n          <AlertCircle className=\"h-3 w-3\" />\n          {Math.abs(days)}d overdue\n        </span>\n      );\n    } else if (days === 0) {\n      return (\n        <span className=\"text-warning text-xs flex items-center gap-1\">\n          <Clock className=\"h-3 w-3\" />\n          Due today\n        </span>\n      );\n    } else if (days <= 3) {\n      return (\n        <span className=\"text-warning text-xs flex items-center gap-1\">\n          <Clock className=\"h-3 w-3\" />\n          {days}d left\n        </span>\n      );\n    } else {\n      return (\n        <span className=\"text-muted-foreground text-xs flex items-center gap-1\">\n          <Calendar className=\"h-3 w-3\" />\n          {format(parseISO(dueDate), \"MMM d\")}\n        </span>\n      );\n    }\n  };\n\n  // Render task card\n  const renderTaskCard = (task: Task) => {\n    const isSelected = selectedItems.has(task.id);\n\n    return (\n      <Card\n        key={task.id}\n        className={`p-3 cursor-pointer transition-all hover:shadow-md ${\n          isSelected ? \"ring-2 ring-primary\" : \"\"\n        }`}\n        onClick={() => onViewTask(task)}\n      >\n        <div className=\"space-y-2\">\n          {/* Header */}\n          <div className=\"flex items-start justify-between\">\n            <div className=\"flex items-start gap-2 flex-1\">\n              <Checkbox\n                checked={isSelected}\n                onChange={() => onSelectItem(task.id)}\n                onClick={(e) => e.stopPropagation()}\n              />\n              <div className=\"flex-1 min-w-0\">\n                <h4 className=\"font-medium text-sm line-clamp-2\">{task.title}</h4>\n                {task.project && (\n                  <div className=\"flex items-center gap-1 mt-1\">\n                    <Briefcase className=\"h-3 w-3 text-muted-foreground\" />\n                    <span className=\"text-xs text-muted-foreground truncate\">\n                      {task.project.name}\n                    </span>\n                  </div>\n                )}\n              </div>\n            </div>\n            <DropdownMenu>\n              <DropdownMenuTrigger asChild onClick={(e) => e.stopPropagation()}>\n                <Button variant=\"ghost\" size=\"sm\" className=\"h-6 w-6 p-0\">\n                  <MoreVertical className=\"h-4 w-4\" />\n                </Button>\n              </DropdownMenuTrigger>\n              <DropdownMenuContent align=\"end\">\n                <DropdownMenuItem onClick={(e) => {\n                  e.stopPropagation();\n                  onViewTask(task);\n                }}>\n                  <Eye className=\"mr-2 h-4 w-4\" />\n                  View\n                </DropdownMenuItem>\n                <DropdownMenuItem onClick={(e) => {\n                  e.stopPropagation();\n                  onEditTask(task);\n                }}>\n                  <Edit className=\"mr-2 h-4 w-4\" />\n                  Edit\n                </DropdownMenuItem>\n                <DropdownMenuItem onClick={(e) => {\n                  e.stopPropagation();\n                  onDuplicateTask(task);\n                }}>\n                  <Copy className=\"mr-2 h-4 w-4\" />\n                  Duplicate\n                </DropdownMenuItem>\n                <DropdownMenuItem \n                  onClick={(e) => {\n                    e.stopPropagation();\n                    onDeleteTask(task);\n                  }}\n                  className=\"text-destructive\"\n                >\n                  <Trash2 className=\"mr-2 h-4 w-4\" />\n                  Delete\n                </DropdownMenuItem>\n              </DropdownMenuContent>\n            </DropdownMenu>\n          </div>\n\n          {/* Description */}\n          {task.description && (\n            <p className=\"text-xs text-muted-foreground line-clamp-2\">\n              {task.description}\n            </p>\n          )}\n\n          {/* Priority and Due Date */}\n          <div className=\"flex items-center justify-between\">\n            {getPriorityBadge(task.priority)}\n            {getDaysUntil(task.due_date)}\n          </div>\n\n          {/* Tags */}\n          {task.tags && task.tags.length > 0 && (\n            <div className=\"flex items-center gap-1 flex-wrap\">\n              <Tag className=\"h-3 w-3 text-muted-foreground\" />\n              {task.tags.slice(0, 2).map(tag => (\n                <Badge key={tag} variant=\"outline\" className=\"text-xs px-1 py-0\">\n                  {tag}\n                </Badge>\n              ))}\n              {task.tags.length > 2 && (\n                <span className=\"text-xs text-muted-foreground\">\n                  +{task.tags.length - 2}\n                </span>\n              )}\n            </div>\n          )}\n\n          {/* Footer */}\n          <div className=\"flex items-center justify-between pt-2 border-t\">\n            {/* Assignee */}\n            {task.assignee ? (\n              <div className=\"flex items-center gap-1\">\n                {task.assignee.avatar_url ? (\n                  <img\n                    src={task.assignee.avatar_url}\n                    alt={task.assignee.full_name || task.assignee.email}\n                    className=\"h-5 w-5 rounded-full\"\n                  />\n                ) : (\n                  <div className=\"h-5 w-5 rounded-full bg-muted flex items-center justify-center\">\n                    <Users className=\"h-3 w-3\" />\n                  </div>\n                )}\n                <span className=\"text-xs text-muted-foreground truncate max-w-[100px]\">\n                  {task.assignee.full_name || task.assignee.email}\n                </span>\n              </div>\n            ) : (\n              <span className=\"text-xs text-muted-foreground\">Unassigned</span>\n            )}\n\n            {/* Subtasks */}\n            {task.subtasks && task.subtasks.length > 0 && (\n              <div className=\"flex items-center gap-1 text-xs text-muted-foreground\">\n                <CheckCircle className=\"h-3 w-3\" />\n                {task.subtasks.filter(st => st.status === \"done\").length}/{task.subtasks.length}\n              </div>\n            )}\n\n            {/* Time tracking */}\n            {(task.estimated_hours || task.actual_hours) && (\n              <div className=\"flex items-center gap-1 text-xs text-muted-foreground\">\n                <Clock className=\"h-3 w-3\" />\n                {task.actual_hours || 0}/{task.estimated_hours || 0}h\n              </div>\n            )}\n          </div>\n        </div>\n      </Card>\n    );\n  };\n\n  return (\n    <div className=\"flex gap-4 overflow-x-auto pb-4\">\n      {BOARD_COLUMNS.map(column => {\n        const columnTasks = tasksByStatus[column.id] || [];\n        const isCollapsed = collapsedColumns.has(column.id);\n\n        return (\n          <div\n            key={column.id}\n            className={`flex-shrink-0 ${isCollapsed ? \"w-16\" : \"w-80\"} transition-all`}\n          >\n            {/* Column Header */}\n            <div\n              className={`flex items-center justify-between p-3 mb-3 rounded-lg ${column.color} bg-opacity-10 cursor-pointer`}\n              onClick={() => toggleColumn(column.id)}\n            >\n              <div className=\"flex items-center gap-2\">\n                <div className={`w-2 h-2 rounded-full ${column.color}`} />\n                <h3 className={`font-medium ${isCollapsed ? \"sr-only\" : \"\"}`}>\n                  {column.label}\n                </h3>\n                <Badge variant=\"secondary\" className=\"text-xs\">\n                  {columnTasks.length}\n                </Badge>\n              </div>\n              {isCollapsed ? (\n                <ChevronDown className=\"h-4 w-4\" />\n              ) : (\n                <ChevronUp className=\"h-4 w-4\" />\n              )}\n            </div>\n\n            {/* Column Tasks */}\n            {!isCollapsed && (\n              <div className=\"space-y-3 max-h-[calc(100vh-300px)] overflow-y-auto\">\n                {columnTasks.length === 0 ? (\n                  <div className=\"text-center py-8 text-muted-foreground\">\n                    <p className=\"text-sm\">No tasks</p>\n                  </div>\n                ) : (\n                  columnTasks.map(renderTaskCard)\n                )}\n              </div>\n            )}\n          </div>\n        );\n      })}\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ghxstship/apps/web/app/(app)/(shell)/projects/tasks/views/TaskListView.tsx","messages":[{"ruleId":"@next/next/no-img-element","severity":1,"message":"Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` or a custom image loader to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","line":320,"column":27,"nodeType":"JSXOpeningElement","endLine":324,"endColumn":29}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport { MoreVertical, Clock, Users, Calendar, Tag, AlertCircle, CheckCircle, Eye, Edit, Copy, Trash2, ArrowUpDown, ChevronUp, ChevronDown, Briefcase, ListTodo } from \"lucide-react\";\nimport { useState, useMemo } from \"react\";\nimport { Badge, Button, Checkbox, DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from \"@ghxstship/ui\";\nimport { format, parseISO, differenceInDays } from \"date-fns\";\n\ninterface User {\n  id: string;\n  email: string;\n  full_name?: string;\n  avatar_url?: string;\n}\n\ninterface Project {\n  id: string;\n  name: string;\n  status: string;\n}\n\ninterface Task {\n  id: string;\n  title: string;\n  description?: string;\n  status: \"todo\" | \"in_progress\" | \"review\" | \"done\" | \"blocked\";\n  priority: \"low\" | \"medium\" | \"high\" | \"critical\";\n  assignee?: User;\n  project?: Project;\n  due_date?: string;\n  estimated_hours?: number;\n  actual_hours?: number;\n  tags?: string[];\n  subtasks?: Task[];\n  created_at: string;\n  updated_at: string;\n}\n\ninterface TaskListViewProps {\n  tasks: Task[];\n  selectedItems: Set<string>;\n  onSelectItem: (id: string) => void;\n  onViewTask: (task: Task) => void;\n  onEditTask: (task: Task) => void;\n  onDuplicateTask: (task: Task) => void;\n  onDeleteTask: (task: Task) => void;\n}\n\ntype SortField = \"title\" | \"status\" | \"priority\" | \"due_date\" | \"assignee\" | \"project\";\ntype SortDirection = \"asc\" | \"desc\";\n\nexport default function TaskListView({\n  tasks,\n  selectedItems,\n  onSelectItem,\n  onViewTask,\n  onEditTask,\n  onDuplicateTask,\n  onDeleteTask,\n}: TaskListViewProps) {\n  const [sortField, setSortField] = useState<SortField>(\"priority\");\n  const [sortDirection, setSortDirection] = useState<SortDirection>(\"asc\");\n  const [expandedTasks, setExpandedTasks] = useState<Set<string>>(new Set());\n\n  // Sort tasks\n  const sortedTasks = useMemo(() => {\n    return [...tasks].sort((a, b) => {\n      let comparison = 0;\n      \n      switch (sortField) {\n        case \"title\":\n          comparison = a.title.localeCompare(b.title);\n          break;\n        case \"status\":\n          const statusOrder = { todo: 0, in_progress: 1, review: 2, done: 3, blocked: 4 };\n          comparison = statusOrder[a.status] - statusOrder[b.status];\n          break;\n        case \"priority\":\n          const priorityOrder = { critical: 0, high: 1, medium: 2, low: 3 };\n          comparison = priorityOrder[a.priority] - priorityOrder[b.priority];\n          break;\n        case \"due_date\":\n          comparison = (a.due_date || \"\").localeCompare(b.due_date || \"\");\n          break;\n        case \"assignee\":\n          const aName = a.assignee?.full_name || a.assignee?.email || \"\";\n          const bName = b.assignee?.full_name || b.assignee?.email || \"\";\n          comparison = aName.localeCompare(bName);\n          break;\n        case \"project\":\n          comparison = (a.project?.name || \"\").localeCompare(b.project?.name || \"\");\n          break;\n        default:\n          comparison = 0;\n      }\n      \n      return sortDirection === \"asc\" ? comparison : -comparison;\n    });\n  }, [tasks, sortField, sortDirection]);\n\n  // Toggle sort\n  const toggleSort = (field: SortField) => {\n    if (sortField === field) {\n      setSortDirection(prev => prev === \"asc\" ? \"desc\" : \"asc\");\n    } else {\n      setSortField(field);\n      setSortDirection(\"asc\");\n    }\n  };\n\n  // Toggle task expansion\n  const toggleTaskExpansion = (taskId: string) => {\n    setExpandedTasks(prev => {\n      const next = new Set(prev);\n      if (next.has(taskId)) {\n        next.delete(taskId);\n      } else {\n        next.add(taskId);\n      }\n      return next;\n    });\n  };\n\n  // Select all visible tasks\n  const selectAll = () => {\n    if (selectedItems.size === sortedTasks.length) {\n      // Deselect all\n      sortedTasks.forEach(task => onSelectItem(task.id));\n    } else {\n      // Select all\n      sortedTasks.forEach(task => {\n        if (!selectedItems.has(task.id)) {\n          onSelectItem(task.id);\n        }\n      });\n    }\n  };\n\n  // Get status badge\n  const getStatusBadge = (status: string) => {\n    const variant = \n      status === \"done\" ? \"success\" :\n      status === \"in_progress\" ? \"warning\" :\n      status === \"review\" ? \"info\" :\n      status === \"blocked\" ? \"destructive\" :\n      \"secondary\";\n    \n    return (\n      <Badge variant={variant} className=\"text-xs\">\n        {status.replace(\"_\", \" \")}\n      </Badge>\n    );\n  };\n\n  // Get priority badge\n  const getPriorityBadge = (priority: string) => {\n    const variant = \n      priority === \"critical\" ? \"destructive\" :\n      priority === \"high\" ? \"warning\" :\n      priority === \"medium\" ? \"secondary\" :\n      \"outline\";\n    \n    return <Badge variant={variant} className=\"text-xs\">{priority}</Badge>;\n  };\n\n  // Get days until due\n  const getDaysUntil = (dueDate?: string) => {\n    if (!dueDate) return null;\n    const days = differenceInDays(parseISO(dueDate), new Date());\n    \n    if (days < 0) {\n      return (\n        <span className=\"text-destructive text-xs flex items-center gap-1\">\n          <AlertCircle className=\"h-3 w-3\" />\n          {Math.abs(days)}d overdue\n        </span>\n      );\n    } else if (days === 0) {\n      return (\n        <span className=\"text-warning text-xs flex items-center gap-1\">\n          <Clock className=\"h-3 w-3\" />\n          Due today\n        </span>\n      );\n    } else if (days <= 7) {\n      return (\n        <span className=\"text-warning text-xs flex items-center gap-1\">\n          <Clock className=\"h-3 w-3\" />\n          {days}d\n        </span>\n      );\n    } else {\n      return (\n        <span className=\"text-muted-foreground text-xs\">\n          {format(parseISO(dueDate), \"MMM d\")}\n        </span>\n      );\n    }\n  };\n\n  // Render sort button\n  const renderSortButton = (field: SortField, label: string) => {\n    const isActive = sortField === field;\n    return (\n      <button\n        onClick={() => toggleSort(field)}\n        className=\"flex items-center gap-1 hover:text-primary transition-colors\"\n      >\n        {label}\n        {isActive ? (\n          sortDirection === \"asc\" ? (\n            <ChevronUp className=\"h-3 w-3\" />\n          ) : (\n            <ChevronDown className=\"h-3 w-3\" />\n          )\n        ) : (\n          <ArrowUpDown className=\"h-3 w-3 opacity-50\" />\n        )}\n      </button>\n    );\n  };\n\n  return (\n    <div className=\"w-full\">\n      {/* Table Header */}\n      <div className=\"border-b bg-muted/30 px-4 py-3\">\n        <div className=\"flex items-center gap-4 text-sm font-medium\">\n          <div className=\"w-10\">\n            <Checkbox\n              checked={selectedItems.size === sortedTasks.length && sortedTasks.length > 0}\n              onChange={selectAll}\n            />\n          </div>\n          <div className=\"flex-1 min-w-[200px]\">\n            {renderSortButton(\"title\", \"Title\")}\n          </div>\n          <div className=\"w-28 hidden lg:block\">\n            {renderSortButton(\"status\", \"Status\")}\n          </div>\n          <div className=\"w-24 hidden md:block\">\n            {renderSortButton(\"priority\", \"Priority\")}\n          </div>\n          <div className=\"w-32 hidden xl:block\">\n            {renderSortButton(\"assignee\", \"Assignee\")}\n          </div>\n          <div className=\"w-32 hidden xl:block\">\n            {renderSortButton(\"project\", \"Project\")}\n          </div>\n          <div className=\"w-28 hidden lg:block\">\n            {renderSortButton(\"due_date\", \"Due Date\")}\n          </div>\n          <div className=\"w-20 hidden md:block text-center\">\n            Progress\n          </div>\n          <div className=\"w-20 text-center\">\n            Actions\n          </div>\n        </div>\n      </div>\n\n      {/* Table Body */}\n      <div className=\"divide-y\">\n        {sortedTasks.map(task => {\n          const isExpanded = expandedTasks.has(task.id);\n          const hasSubtasks = task.subtasks && task.subtasks.length > 0;\n          const completedSubtasks = task.subtasks?.filter(st => st.status === \"done\").length || 0;\n          const totalSubtasks = task.subtasks?.length || 0;\n          const progress = totalSubtasks > 0 ? (completedSubtasks / totalSubtasks) * 100 : \n                          task.status === \"done\" ? 100 : \n                          task.status === \"in_progress\" ? 50 : \n                          task.status === \"review\" ? 75 : 0;\n\n          return (\n            <div key={task.id}>\n              <div className=\"px-4 py-3 hover:bg-muted/30 transition-colors\">\n                <div className=\"flex items-center gap-4\">\n                  <div className=\"w-10\">\n                    <Checkbox\n                      checked={selectedItems.has(task.id)}\n                      onChange={() => onSelectItem(task.id)}\n                    />\n                  </div>\n                  \n                  <div className=\"flex-1 min-w-[200px]\">\n                    <div className=\"flex items-center gap-2\">\n                      {hasSubtasks && (\n                        <button\n                          onClick={() => toggleTaskExpansion(task.id)}\n                          className=\"p-0.5 hover:bg-muted rounded\"\n                        >\n                          {isExpanded ? (\n                            <ChevronDown className=\"h-4 w-4\" />\n                          ) : (\n                            <ChevronUp className=\"h-4 w-4\" />\n                          )}\n                        </button>\n                      )}\n                      <div>\n                        <p className=\"font-medium line-clamp-1\">{task.title}</p>\n                        {task.description && (\n                          <p className=\"text-sm text-muted-foreground line-clamp-1\">\n                            {task.description}\n                          </p>\n                        )}\n                      </div>\n                    </div>\n                  </div>\n\n                  <div className=\"w-28 hidden lg:block\">\n                    {getStatusBadge(task.status)}\n                  </div>\n\n                  <div className=\"w-24 hidden md:block\">\n                    {getPriorityBadge(task.priority)}\n                  </div>\n\n                  <div className=\"w-32 hidden xl:block\">\n                    {task.assignee ? (\n                      <div className=\"flex items-center gap-2\">\n                        {task.assignee.avatar_url ? (\n                          <img\n                            src={task.assignee.avatar_url}\n                            alt={task.assignee.full_name || task.assignee.email}\n                            className=\"h-6 w-6 rounded-full\"\n                          />\n                        ) : (\n                          <div className=\"h-6 w-6 rounded-full bg-muted flex items-center justify-center\">\n                            <Users className=\"h-3 w-3\" />\n                          </div>\n                        )}\n                        <span className=\"text-sm truncate\">\n                          {task.assignee.full_name || task.assignee.email}\n                        </span>\n                      </div>\n                    ) : (\n                      <span className=\"text-sm text-muted-foreground\">Unassigned</span>\n                    )}\n                  </div>\n\n                  <div className=\"w-32 hidden xl:block\">\n                    {task.project && (\n                      <div className=\"flex items-center gap-1\">\n                        <Briefcase className=\"h-3 w-3 text-muted-foreground\" />\n                        <span className=\"text-sm text-muted-foreground truncate\">\n                          {task.project.name}\n                        </span>\n                      </div>\n                    )}\n                  </div>\n\n                  <div className=\"w-28 hidden lg:block\">\n                    {getDaysUntil(task.due_date)}\n                  </div>\n\n                  <div className=\"w-20 hidden md:block\">\n                    <div className=\"flex flex-col items-center gap-1\">\n                      <div className=\"w-full bg-muted rounded-full h-1.5\">\n                        <div \n                          className=\"bg-primary h-1.5 rounded-full transition-all\"\n                          style={{ width: `${progress}%` }}\n                        />\n                      </div>\n                      <span className=\"text-xs text-muted-foreground\">{Math.round(progress)}%</span>\n                    </div>\n                  </div>\n\n                  <div className=\"w-20 flex justify-center\">\n                    <DropdownMenu>\n                      <DropdownMenuTrigger asChild>\n                        <Button variant=\"ghost\" size=\"sm\" className=\"h-8 w-8 p-0\">\n                          <MoreVertical className=\"h-4 w-4\" />\n                        </Button>\n                      </DropdownMenuTrigger>\n                      <DropdownMenuContent align=\"end\">\n                        <DropdownMenuItem onClick={() => onViewTask(task)}>\n                          <Eye className=\"mr-2 h-4 w-4\" />\n                          View\n                        </DropdownMenuItem>\n                        <DropdownMenuItem onClick={() => onEditTask(task)}>\n                          <Edit className=\"mr-2 h-4 w-4\" />\n                          Edit\n                        </DropdownMenuItem>\n                        <DropdownMenuItem onClick={() => onDuplicateTask(task)}>\n                          <Copy className=\"mr-2 h-4 w-4\" />\n                          Duplicate\n                        </DropdownMenuItem>\n                        <DropdownMenuItem \n                          onClick={() => onDeleteTask(task)}\n                          className=\"text-destructive\"\n                        >\n                          <Trash2 className=\"mr-2 h-4 w-4\" />\n                          Delete\n                        </DropdownMenuItem>\n                      </DropdownMenuContent>\n                    </DropdownMenu>\n                  </div>\n                </div>\n\n                {/* Tags */}\n                {task.tags && task.tags.length > 0 && (\n                  <div className=\"flex items-center gap-2 mt-2 ml-14\">\n                    <Tag className=\"h-3 w-3 text-muted-foreground\" />\n                    {task.tags.map(tag => (\n                      <Badge key={tag} variant=\"outline\" className=\"text-xs\">\n                        {tag}\n                      </Badge>\n                    ))}\n                  </div>\n                )}\n              </div>\n\n              {/* Subtasks */}\n              {isExpanded && hasSubtasks && (\n                <div className=\"pl-16 pr-4 pb-2 bg-muted/20\">\n                  {task.subtasks!.map(subtask => (\n                    <div key={subtask.id} className=\"flex items-center gap-4 py-2 border-t\">\n                      <ListTodo className=\"h-4 w-4 text-muted-foreground\" />\n                      <div className=\"flex-1\">\n                        <p className=\"text-sm\">{subtask.title}</p>\n                      </div>\n                      {getStatusBadge(subtask.status)}\n                      {getPriorityBadge(subtask.priority)}\n                      {subtask.assignee_id && (\n                        <Users className=\"h-4 w-4 text-muted-foreground\" />\n                      )}\n                      {getDaysUntil(subtask.due_date)}\n                    </div>\n                  ))}\n                </div>\n              )}\n            </div>\n          );\n        })}\n      </div>\n\n      {/* Empty State */}\n      {sortedTasks.length === 0 && (\n        <div className=\"text-center py-12\">\n          <ListTodo className=\"mx-auto h-12 w-12 text-muted-foreground mb-4\" />\n          <h3 className=\"text-lg font-semibold mb-2\">No tasks found</h3>\n          <p className=\"text-muted-foreground\">\n            Try adjusting your filters or create a new task\n          </p>\n        </div>\n      )}\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ghxstship/apps/web/app/(app)/(shell)/settings/CreateSettingsClient.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useMemo has missing dependencies: 'handleExport' and 'toast'. Either include them or remove the dependency array.","line":228,"column":7,"nodeType":"ArrayExpression","endLine":228,"endColumn":74,"suggestions":[{"desc":"Update the dependencies array to be: [currentView, settings, searchParams, loadSettings, loadStatistics, handleExport, toast]","fix":{"range":[6168,6235],"text":"[currentView, settings, searchParams, loadSettings, loadStatistics, handleExport, toast]"}}]},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'RefreshCw' is not defined.","line":355,"column":14,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":355,"endColumn":23},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":372,"column":41,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[10297,10394],"text":"\n                Manage your organization&apos;s configuration settings and preferences\n              "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[10297,10394],"text":"\n                Manage your organization&lsquo;s configuration settings and preferences\n              "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[10297,10394],"text":"\n                Manage your organization&#39;s configuration settings and preferences\n              "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[10297,10394],"text":"\n                Manage your organization&rsquo;s configuration settings and preferences\n              "},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'RefreshCw' is not defined.","line":377,"column":18,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":377,"endColumn":27},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Download' is not defined.","line":381,"column":18,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":381,"endColumn":26}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\nimport { User, FileText, Settings, Award, Calendar, TrendingUp, Activity, Clock, Plus, Search, Play, Trash2 } from \"lucide-react\";\nimport { useState, useEffect, useCallback, useMemo } from 'react';\nimport {\n  DataViewProvider,\n  StateManagerProvider,\n  ViewSwitcher,\n  DataActions,\n  Button,\n  useToastContext,\n} from '@ghxstship/ui';\nimport type { \n  SettingRecord, \n  SettingsViewConfig, \n  SettingsFieldConfig,\n  SettingsStatistics,\n  SettingsSearchParams,\n} from './types';\nimport { settingsService } from './lib/settings-service';\nimport SettingsGridView from './views/SettingsGridView';\nimport SettingsListView from './views/SettingsListView';\nimport SettingsKanbanView from './views/SettingsKanbanView';\nimport CreateSettingsDrawer from './drawers/CreateSettingsDrawer';\nimport EditSettingsDrawer from './drawers/EditSettingsDrawer';\n\n// Field configuration for ATLVS DataViews\nconst fieldConfig: SettingsFieldConfig[] = [\n  {\n    key: 'id',\n    label: 'ID',\n    type: 'text',\n    width: 100,\n    sortable: true,\n    filterable: false\n  },\n  {\n    key: 'name',\n    label: 'Setting Name',\n    type: 'text',\n    width: 200,\n    sortable: true,\n    filterable: true,\n    required: true\n  },\n  {\n    key: 'category',\n    label: 'Category',\n    type: 'select',\n    width: 150,\n    sortable: true,\n    filterable: true,\n    options: [\n      { value: 'organization', label: 'Organization' },\n      { value: 'security', label: 'Security' },\n      { value: 'notifications', label: 'Notifications' },\n      { value: 'integrations', label: 'Integrations' },\n      { value: 'billing', label: 'Billing' },\n      { value: 'permissions', label: 'Permissions' },\n      { value: 'automations', label: 'Automations' },\n      { value: 'compliance', label: 'Compliance' },\n      { value: 'backup', label: 'Backup' }\n    ]\n  },\n  {\n    key: 'value',\n    label: 'Value',\n    type: 'text',\n    width: 250,\n    sortable: true,\n    filterable: true\n  },\n  {\n    key: 'description',\n    label: 'Description',\n    type: 'textarea',\n    width: 300,\n    sortable: false,\n    filterable: true\n  },\n  {\n    key: 'type',\n    label: 'Type',\n    type: 'select',\n    width: 120,\n    sortable: true,\n    filterable: true,\n    options: [\n      { value: 'string', label: 'String' },\n      { value: 'number', label: 'Number' },\n      { value: 'boolean', label: 'Boolean' },\n      { value: 'json', label: 'JSON' },\n      { value: 'array', label: 'Array' }\n    ]\n  },\n  {\n    key: 'is_public',\n    label: 'Public',\n    type: 'select',\n    width: 100,\n    sortable: true,\n    filterable: true,\n    options: [\n      { value: 'true', label: 'Yes' },\n      { value: 'false', label: 'No' }\n    ]\n  },\n  {\n    key: 'is_editable',\n    label: 'Editable',\n    type: 'select',\n    width: 100,\n    sortable: true,\n    filterable: true,\n    options: [\n      { value: 'true', label: 'Yes' },\n      { value: 'false', label: 'No' }\n    ]\n  },\n  {\n    key: 'created_at',\n    label: 'Created',\n    type: 'date',\n    width: 150,\n    sortable: true,\n    filterable: true\n  },\n  {\n    key: 'updated_at',\n    label: 'Updated',\n    type: 'date',\n    width: 150,\n    sortable: true,\n    filterable: true\n  }\n];\n\ninterface CreateSettingsClientProps {\n  orgId: string;\n  userId: string;\n}\n\nexport default function CreateSettingsClient({ orgId, userId }: CreateSettingsClientProps) {\n  const { toast } = useToastContext();\n  \n  // State management\n  const [settings, setSettings] = useState<SettingRecord[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [selectedSettings, setSelectedSettings] = useState<string[]>([]);\n  const [statistics, setStatistics] = useState<SettingsStatistics | null>(null);\n  \n  // View state\n  const [currentView, setCurrentView] = useState<'grid' | 'list' | 'kanban'>('grid');\n  const [searchParams, setSearchParams] = useState<SettingsSearchParams>({});\n  \n  // Drawer state\n  const [createDrawerOpen, setCreateDrawerOpen] = useState(false);\n  const [editDrawerOpen, setEditDrawerOpen] = useState(false);\n  const [editingSetting, setEditingSetting] = useState<SettingRecord | null>(null);\n  const [drawerMode, setDrawerMode] = useState<'create' | 'edit' | 'view'>('create');\n\n  // Load settings data\n  const loadSettings = useCallback(async (params?: SettingsSearchParams) => {\n    try {\n      setLoading(true);\n      setError(null);\n      const data = await settingsService.getSettings(params);\n      setSettings(data);\n    } catch (err) {\n      const message = err instanceof Error ? err.message : 'Failed to load settings';\n      setError(message);\n      toast.error(message);\n    } finally {\n      setLoading(false);\n    }\n  }, [toast]);\n\n  // Load statistics\n  const loadStatistics = useCallback(async () => {\n    try {\n      const stats = await settingsService.getStatistics();\n      setStatistics(stats);\n    } catch (err) {\n      console.error('Failed to load statistics:', err);\n    }\n  }, []);\n\n  // Initial data load\n  useEffect(() => {\n    loadSettings();\n    loadStatistics();\n  }, [loadSettings, loadStatistics]);\n\n  // ATLVS DataViews configuration\n  const dataViewConfig: SettingsViewConfig = useMemo(() => ({\n    id: 'settings',\n    name: 'Settings Management',\n    viewType: currentView,\n    defaultView: 'grid',\n    fields: fieldConfig,\n    data: settings,\n    onSearch: async (query: string) => {\n      const params = { ...searchParams, query };\n      setSearchParams(params);\n      await loadSettings(params);\n    },\n    onFilter: async (filters: unknown) => {\n      const params = { ...searchParams, ...filters };\n      setSearchParams(params);\n      await loadSettings(params);\n    },\n    onSort: async (sorts: unknown) => {\n      // Sorting is handled client-side in the views\n      console.log('Sort settings:', sorts);\n    },\n    onRefresh: async () => {\n      await loadSettings(searchParams);\n      await loadStatistics();\n      return settings;\n    },\n    onExport: (data: any, format: unknown) => {\n      handleExport(format);\n    },\n    onImport: (data: unknown) => {\n      console.log('Import settings:', data);\n      toast.info('Import functionality coming soon');\n    }\n  }), [currentView, settings, searchParams, loadSettings, loadStatistics]);\n\n  // Event handlers\n  const handleCreateSetting = () => {\n    setDrawerMode('create');\n    setCreateDrawerOpen(true);\n  };\n\n  const handleEditSetting = (setting: SettingRecord) => {\n    setEditingSetting(setting);\n    setDrawerMode('edit');\n    setEditDrawerOpen(true);\n  };\n\n  const handleViewSetting = (setting: SettingRecord) => {\n    setEditingSetting(setting);\n    setDrawerMode('view');\n    setEditDrawerOpen(true);\n  };\n\n  const handleDeleteSetting = async (id: string) => {\n    try {\n      await settingsService.deleteSetting(id);\n      toast.success('Setting deleted successfully');\n      await loadSettings(searchParams);\n      await loadStatistics();\n    } catch (err) {\n      const message = err instanceof Error ? err.message : 'Failed to delete setting';\n      toast.error(message);\n    }\n  };\n\n  const handleSaveSetting = async (data: unknown) => {\n    if (!editingSetting) return;\n    \n    try {\n      await settingsService.updateSetting(editingSetting.id, data);\n      await loadSettings(searchParams);\n      await loadStatistics();\n    } catch (err) {\n      throw err; // Re-throw to be handled by the drawer\n    }\n  };\n\n  const handleMoveSetting = async (settingId: string, newCategory: unknown) => {\n    try {\n      await settingsService.updateSetting(settingId, { category: newCategory });\n      toast.success('Setting moved successfully');\n      await loadSettings(searchParams);\n    } catch (err) {\n      const message = err instanceof Error ? err.message : 'Failed to move setting';\n      toast.error(message);\n    }\n  };\n\n  const handleExport = async (format: 'csv' | 'json') => {\n    try {\n      const blob = await settingsService.exportSettings({\n        format,\n        includeMetadata: true,\n        categories: searchParams.category ? [searchParams.category] : undefined,\n      });\n\n      const url = URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.href = url;\n      a.download = `settings-export.${format}`;\n      document.body.appendChild(a);\n      a.click();\n      document.body.removeChild(a);\n      URL.revokeObjectURL(url);\n\n      toast.success(`Settings exported as ${format.toUpperCase()}`);\n    } catch (err) {\n      const message = err instanceof Error ? err.message : 'Failed to export settings';\n      toast.error(message);\n    }\n  };\n\n  const handleRefresh = async () => {\n    await loadSettings(searchParams);\n    await loadStatistics();\n  };\n\n  // Render current view\n  const renderCurrentView = () => {\n    switch (currentView) {\n      case 'grid':\n        return (\n          <SettingsGridView\n            settings={settings}\n            loading={loading}\n            onEdit={handleEditSetting}\n            onDelete={handleDeleteSetting}\n            onSelect={setSelectedSettings}\n            selectedIds={selectedSettings}\n          />\n        );\n      case 'list':\n        return (\n          <SettingsListView\n            settings={settings}\n            loading={loading}\n            onEdit={handleEditSetting}\n            onView={handleViewSetting}\n          />\n        );\n      case 'kanban':\n        return (\n          <SettingsKanbanView\n            settings={settings}\n            loading={loading}\n            onEdit={handleEditSetting}\n            onMove={handleMoveSetting}\n          />\n        );\n      default:\n        return null;\n    }\n  };\n\n  if (error) {\n    return (\n      <div className=\"flex items-center justify-center h-96\">\n        <div className=\"text-center\">\n          <p className=\"text-destructive mb-4\">{error}</p>\n          <Button onClick={() => loadSettings()}>\n            <RefreshCw className=\"h-4 w-4 mr-2\" />\n            Retry\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <DataViewProvider config={dataViewConfig}>\n      <StateManagerProvider>\n        <div className=\"space-y-6\">\n          {/* Header */}\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h1 className=\"text-3xl font-bold\">Settings Management</h1>\n              <p className=\"text-muted-foreground mt-1\">\n                Manage your organization's configuration settings and preferences\n              </p>\n            </div>\n            <div className=\"flex items-center gap-3\">\n              <Button variant=\"outline\" onClick={handleRefresh} disabled={loading}>\n                <RefreshCw className=\"h-4 w-4 mr-2\" />\n                Refresh\n              </Button>\n              <Button variant=\"outline\" onClick={() => handleExport('csv')}>\n                <Download className=\"h-4 w-4 mr-2\" />\n                Export\n              </Button>\n              <Button onClick={handleCreateSetting}>\n                <Plus className=\"h-4 w-4 mr-2\" />\n                Create Setting\n              </Button>\n            </div>\n          </div>\n\n          {/* Statistics */}\n          {statistics && (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n              <div className=\"bg-card p-4 rounded-lg border\">\n                <div className=\"text-2xl font-bold\">{statistics.totalSettings}</div>\n                <div className=\"text-sm text-muted-foreground\">Total Settings</div>\n              </div>\n              <div className=\"bg-card p-4 rounded-lg border\">\n                <div className=\"text-2xl font-bold\">{statistics.publicSettings}</div>\n                <div className=\"text-sm text-muted-foreground\">Public Settings</div>\n              </div>\n              <div className=\"bg-card p-4 rounded-lg border\">\n                <div className=\"text-2xl font-bold\">{statistics.editableSettings}</div>\n                <div className=\"text-sm text-muted-foreground\">Editable Settings</div>\n              </div>\n              <div className=\"bg-card p-4 rounded-lg border\">\n                <div className=\"text-2xl font-bold\">{statistics.recentlyUpdated}</div>\n                <div className=\"text-sm text-muted-foreground\">Updated This Week</div>\n              </div>\n            </div>\n          )}\n\n          {/* View Controls */}\n          <div className=\"flex items-center justify-between\">\n            <ViewSwitcher\n              currentView={currentView}\n              onViewChange={setCurrentView}\n              availableViews={['grid', 'list', 'kanban']}\n            />\n            <DataActions\n              selectedCount={selectedSettings.length}\n              onBulkDelete={() => {\n                if (window.confirm(`Delete ${selectedSettings.length} settings?`)) {\n                  Promise.all(selectedSettings.map(id => settingsService.deleteSetting(id)))\n                    .then(() => {\n                      toast.success(`Deleted ${selectedSettings.length} settings`);\n                      setSelectedSettings([]);\n                      loadSettings(searchParams);\n                      loadStatistics();\n                    })\n                    .catch(err => {\n                      toast.error('Failed to delete some settings');\n                    });\n                }\n              }}\n              onBulkExport={() => handleExport('csv')}\n            />\n          </div>\n\n          {/* Main Content */}\n          {renderCurrentView()}\n\n          {/* Drawers */}\n          <CreateSettingsDrawer\n            isOpen={createDrawerOpen}\n            onClose={() => setCreateDrawerOpen(false)}\n            onSuccess={() => {\n              loadSettings(searchParams);\n              loadStatistics();\n            }}\n          />\n\n          <EditSettingsDrawer\n            mode={drawerMode}\n            setting={editingSetting}\n            isOpen={editDrawerOpen}\n            onClose={() => {\n              setEditDrawerOpen(false);\n              setEditingSetting(null);\n            }}\n            onSave={handleSaveSetting}\n            onDelete={handleDeleteSetting}\n          />\n        </div>\n      </StateManagerProvider>\n    </DataViewProvider>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ghxstship/apps/web/app/(app)/(shell)/settings/SettingsClient.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useMemo has missing dependencies: 'handleExport' and 'toast'. Either include them or remove the dependency array.","line":125,"column":5,"nodeType":"ArrayExpression","endLine":125,"endColumn":72,"suggestions":[{"desc":"Update the dependencies array to be: [currentView, settings, searchParams, loadSettings, loadStatistics, handleExport, toast]","fix":{"range":[4020,4087],"text":"[currentView, settings, searchParams, loadSettings, loadStatistics, handleExport, toast]"}}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":328,"column":41,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[9797,9894],"text":"\n                Manage your organization&apos;s configuration settings and preferences\n              "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[9797,9894],"text":"\n                Manage your organization&lsquo;s configuration settings and preferences\n              "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[9797,9894],"text":"\n                Manage your organization&#39;s configuration settings and preferences\n              "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[9797,9894],"text":"\n                Manage your organization&rsquo;s configuration settings and preferences\n              "},"desc":"Replace with `&rsquo;`."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { Settings as SettingsIcon, Building, Palette, Shield, Bell, Link, FileText, Database, Plus, Download, RefreshCw } from \"lucide-react\";\nimport { useState, useEffect, useCallback, useMemo } from 'react';\nimport {\n  DataViewProvider,\n  StateManagerProvider,\n  Button,\n  useToastContext,\n  Tabs,\n  TabsContent,\n  TabsList,\n  TabsTrigger,\n} from '@ghxstship/ui';\nimport type {\n  SettingRecord,\n  SettingsViewConfig,\n  SettingsStatistics,\n  SettingsSearchParams,\n} from './types';\nimport { settingsService } from './lib/settings-service';\nimport SettingsGridView from './views/SettingsGridView';\nimport SettingsListView from './views/SettingsListView';\nimport SettingsKanbanView from './views/SettingsKanbanView';\nimport CreateSettingsDrawer from './drawers/CreateSettingsDrawer';\nimport EditSettingsDrawer from './drawers/EditSettingsDrawer';\nimport { SETTINGS_FIELD_CONFIG } from './lib/field-config';\n\ninterface SettingsClientProps {\n  orgId: string;\n  userId: string;\n}\n\nexport default function SettingsClient({ orgId, userId }: SettingsClientProps) {\n  const { toast } = useToastContext();\n\n  // State management\n  const [settings, setSettings] = useState<SettingRecord[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [selectedSettings, setSelectedSettings] = useState<string[]>([]);\n  const [statistics, setStatistics] = useState<SettingsStatistics | null>(null);\n\n  // View state\n  const [currentView, setCurrentView] = useState<'grid' | 'list' | 'kanban'>('grid');\n  const [searchParams, setSearchParams] = useState<SettingsSearchParams>({});\n  const [activeTab, setActiveTab] = useState('data');\n\n  // Drawer state\n  const [createDrawerOpen, setCreateDrawerOpen] = useState(false);\n  const [editDrawerOpen, setEditDrawerOpen] = useState(false);\n  const [editingSetting, setEditingSetting] = useState<SettingRecord | null>(null);\n  const [drawerMode, setDrawerMode] = useState<'create' | 'edit' | 'view'>('create');\n\n  // Load settings data\n  const loadSettings = useCallback(\n    async (params?: SettingsSearchParams) => {\n      try {\n        setLoading(true);\n        setError(null);\n        const data = await settingsService.getSettings(params);\n        setSettings(data);\n      } catch (err) {\n        const message = err instanceof Error ? err.message : 'Failed to load settings';\n        setError(message);\n        toast.error(message);\n      } finally {\n        setLoading(false);\n      }\n    },\n    [toast]\n  );\n\n  // Load statistics\n  const loadStatistics = useCallback(async () => {\n    try {\n      const stats = await settingsService.getStatistics();\n      setStatistics(stats);\n    } catch (err) {\n      console.error('Failed to load statistics:', err);\n    }\n  }, []);\n\n  // Initial data load\n  useEffect(() => {\n    loadSettings();\n    loadStatistics();\n  }, [loadSettings, loadStatistics]);\n\n  // ATLVS DataViews configuration\n  const dataViewConfig: SettingsViewConfig = useMemo(\n    () => ({\n      id: 'settings',\n      name: 'Settings Management',\n      viewType: currentView,\n      defaultView: 'grid',\n      fields: SETTINGS_FIELD_CONFIG,\n      data: settings,\n      onSearch: async (query: string) => {\n        const params = { ...searchParams, query };\n        setSearchParams(params);\n        await loadSettings(params);\n      },\n      onFilter: async (filters: unknown) => {\n        const params = { ...searchParams, ...filters };\n        setSearchParams(params);\n        await loadSettings(params);\n      },\n      onSort: async (sorts: unknown) => {\n        console.log('Sort settings:', sorts);\n      },\n      onRefresh: async () => {\n        await loadSettings(searchParams);\n        await loadStatistics();\n        return settings;\n      },\n      onExport: (data: any, format: unknown) => {\n        handleExport(format);\n      },\n      onImport: (data: unknown) => {\n        console.log('Import settings:', data);\n        toast.info('Import functionality coming soon');\n      },\n    }),\n    [currentView, settings, searchParams, loadSettings, loadStatistics]\n  );\n\n  // Event handlers\n  const handleCreateSetting = () => {\n    setDrawerMode('create');\n    setCreateDrawerOpen(true);\n  };\n\n  const handleEditSetting = (setting: SettingRecord) => {\n    setEditingSetting(setting);\n    setDrawerMode('edit');\n    setEditDrawerOpen(true);\n  };\n\n  const handleViewSetting = (setting: SettingRecord) => {\n    setEditingSetting(setting);\n    setDrawerMode('view');\n    setEditDrawerOpen(true);\n  };\n\n  const handleDeleteSetting = async (id: string) => {\n    try {\n      await settingsService.deleteSetting(id);\n      toast.success('Setting deleted successfully');\n      await loadSettings(searchParams);\n      await loadStatistics();\n    } catch (err) {\n      const message = err instanceof Error ? err.message : 'Failed to delete setting';\n      toast.error(message);\n    }\n  };\n\n  const handleSaveSetting = async (data: unknown) => {\n    if (!editingSetting) return;\n\n    try {\n      await settingsService.updateSetting(editingSetting.id, data);\n      await loadSettings(searchParams);\n      await loadStatistics();\n    } catch (err) {\n      throw err;\n    }\n  };\n\n  const handleMoveSetting = async (settingId: string, newCategory: unknown) => {\n    try {\n      await settingsService.updateSetting(settingId, { category: newCategory });\n      toast.success('Setting moved successfully');\n      await loadSettings(searchParams);\n    } catch (err) {\n      const message = err instanceof Error ? err.message : 'Failed to move setting';\n      toast.error(message);\n    }\n  };\n\n  const handleExport = async (format: 'csv' | 'json') => {\n    try {\n      const blob = await settingsService.exportSettings({\n        format,\n        includeMetadata: true,\n        categories: searchParams.category ? [searchParams.category] : undefined,\n      });\n\n      const url = URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.href = url;\n      a.download = `settings-export.${format}`;\n      document.body.appendChild(a);\n      a.click();\n      document.body.removeChild(a);\n      URL.revokeObjectURL(url);\n\n      toast.success(`Settings exported as ${format.toUpperCase()}`);\n    } catch (err) {\n      const message = err instanceof Error ? err.message : 'Failed to export settings';\n      toast.error(message);\n    }\n  };\n\n  const handleRefresh = async () => {\n    await loadSettings(searchParams);\n    await loadStatistics();\n  };\n\n  // View switcher component\n  const ViewSwitcher = () => (\n    <div className=\"flex items-center gap-2\">\n      <Button\n        variant={currentView === 'grid' ? 'default' : 'outline'}\n        size=\"sm\"\n        onClick={() => setCurrentView('grid')}\n      >\n        Grid\n      </Button>\n      <Button\n        variant={currentView === 'list' ? 'default' : 'outline'}\n        size=\"sm\"\n        onClick={() => setCurrentView('list')}\n      >\n        List\n      </Button>\n      <Button\n        variant={currentView === 'kanban' ? 'default' : 'outline'}\n        size=\"sm\"\n        onClick={() => setCurrentView('kanban')}\n      >\n        Kanban\n      </Button>\n    </div>\n  );\n\n  // Data actions component\n  const DataActions = () => (\n    <div className=\"flex items-center gap-2\">\n      {selectedSettings.length > 0 && (\n        <Button\n          variant=\"destructive\"\n          size=\"sm\"\n          onClick={() => {\n            if (window.confirm(`Delete ${selectedSettings.length} settings?`)) {\n              Promise.all(selectedSettings.map((id) => settingsService.deleteSetting(id)))\n                .then(() => {\n                  toast.success(`Deleted ${selectedSettings.length} settings`);\n                  setSelectedSettings([]);\n                  loadSettings(searchParams);\n                  loadStatistics();\n                })\n                .catch(() => {\n                  toast.error('Failed to delete some settings');\n                });\n            }\n          }}\n        >\n          Delete ({selectedSettings.length})\n        </Button>\n      )}\n      <Button variant=\"outline\" size=\"sm\" onClick={() => handleExport('csv')}>\n        Export\n      </Button>\n    </div>\n  );\n\n  // Render current view\n  const renderCurrentView = () => {\n    switch (currentView) {\n      case 'grid':\n        return (\n          <SettingsGridView\n            settings={settings}\n            loading={loading}\n            onEdit={handleEditSetting}\n            onDelete={handleDeleteSetting}\n            onSelect={setSelectedSettings}\n            selectedIds={selectedSettings}\n          />\n        );\n      case 'list':\n        return (\n          <SettingsListView\n            settings={settings}\n            loading={loading}\n            onEdit={handleEditSetting}\n            onView={handleViewSetting}\n          />\n        );\n      case 'kanban':\n        return (\n          <SettingsKanbanView\n            settings={settings}\n            loading={loading}\n            onEdit={handleEditSetting}\n            onMove={handleMoveSetting}\n          />\n        );\n      default:\n        return null;\n    }\n  };\n\n  if (error) {\n    return (\n      <div className=\"flex items-center justify-center h-96\">\n        <div className=\"text-center\">\n          <p className=\"text-destructive mb-4\">{error}</p>\n          <Button onClick={() => loadSettings()}>\n            <RefreshCw className=\"h-4 w-4 mr-2\" />\n            Retry\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <DataViewProvider config={dataViewConfig}>\n      <StateManagerProvider>\n        <div className=\"space-y-6\">\n          {/* Header */}\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h1 className=\"text-3xl font-bold\">Settings Management</h1>\n              <p className=\"text-muted-foreground mt-1\">\n                Manage your organization's configuration settings and preferences\n              </p>\n            </div>\n            <div className=\"flex items-center gap-3\">\n              <Button variant=\"outline\" onClick={handleRefresh} disabled={loading}>\n                <RefreshCw className=\"h-4 w-4 mr-2\" />\n                Refresh\n              </Button>\n              <Button variant=\"outline\" onClick={() => handleExport('csv')}>\n                <Download className=\"h-4 w-4 mr-2\" />\n                Export\n              </Button>\n              <Button onClick={handleCreateSetting}>\n                <Plus className=\"h-4 w-4 mr-2\" />\n                Create Setting\n              </Button>\n            </div>\n          </div>\n\n          {/* Statistics */}\n          {statistics && (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n              <div className=\"bg-card p-4 rounded-lg border\">\n                <div className=\"text-2xl font-bold\">{statistics.totalSettings}</div>\n                <div className=\"text-sm text-muted-foreground\">Total Settings</div>\n              </div>\n              <div className=\"bg-card p-4 rounded-lg border\">\n                <div className=\"text-2xl font-bold\">{statistics.publicSettings}</div>\n                <div className=\"text-sm text-muted-foreground\">Public Settings</div>\n              </div>\n              <div className=\"bg-card p-4 rounded-lg border\">\n                <div className=\"text-2xl font-bold\">{statistics.editableSettings}</div>\n                <div className=\"text-sm text-muted-foreground\">Editable Settings</div>\n              </div>\n              <div className=\"bg-card p-4 rounded-lg border\">\n                <div className=\"text-2xl font-bold\">{statistics.recentlyUpdated}</div>\n                <div className=\"text-sm text-muted-foreground\">Updated This Week</div>\n              </div>\n            </div>\n          )}\n\n          {/* Tab Navigation */}\n          <Tabs value={activeTab} onValueChange={setActiveTab}>\n            <TabsList className=\"grid w-full grid-cols-8\">\n              <TabsTrigger value=\"data\">\n                <Database className=\"h-4 w-4 mr-2\" />\n                Data Management\n              </TabsTrigger>\n              <TabsTrigger value=\"organization\">\n                <Building className=\"h-4 w-4 mr-2\" />\n                Organization\n              </TabsTrigger>\n              <TabsTrigger value=\"security\">\n                <Shield className=\"h-4 w-4 mr-2\" />\n                Security\n              </TabsTrigger>\n              <TabsTrigger value=\"notifications\">\n                <Bell className=\"h-4 w-4 mr-2\" />\n                Notifications\n              </TabsTrigger>\n              <TabsTrigger value=\"integrations\">\n                <Link className=\"h-4 w-4 mr-2\" />\n                Integrations\n              </TabsTrigger>\n              <TabsTrigger value=\"billing\">\n                <FileText className=\"h-4 w-4 mr-2\" />\n                Billing\n              </TabsTrigger>\n              <TabsTrigger value=\"permissions\">\n                <Shield className=\"h-4 w-4 mr-2\" />\n                Permissions\n              </TabsTrigger>\n              <TabsTrigger value=\"advanced\">\n                <SettingsIcon className=\"h-4 w-4 mr-2\" />\n                Advanced\n              </TabsTrigger>\n            </TabsList>\n\n            <TabsContent value=\"data\" className=\"space-y-4\">\n              {/* View Controls */}\n              <div className=\"flex items-center justify-between\">\n                <ViewSwitcher />\n                <DataActions />\n              </div>\n\n              {/* Main Content */}\n              {renderCurrentView()}\n            </TabsContent>\n\n            {/* Legacy Settings Tabs - Placeholder for backward compatibility */}\n            <TabsContent value=\"organization\">\n              <div className=\"bg-card p-8 rounded-lg border text-center\">\n                <Building className=\"h-12 w-12 mx-auto mb-4 text-muted-foreground\" />\n                <h3 className=\"text-lg font-semibold mb-2\">Organization Settings</h3>\n                <p className=\"text-muted-foreground mb-4\">\n                  Organization settings are now managed through the data management interface above.\n                </p>\n                <Button onClick={() => setActiveTab('data')}>\n                  Go to Data Management\n                </Button>\n              </div>\n            </TabsContent>\n\n            <TabsContent value=\"security\">\n              <div className=\"bg-card p-8 rounded-lg border text-center\">\n                <Shield className=\"h-12 w-12 mx-auto mb-4 text-muted-foreground\" />\n                <h3 className=\"text-lg font-semibold mb-2\">Security Settings</h3>\n                <p className=\"text-muted-foreground mb-4\">\n                  Security settings are now managed through the data management interface above.\n                </p>\n                <Button onClick={() => setActiveTab('data')}>\n                  Go to Data Management\n                </Button>\n              </div>\n            </TabsContent>\n\n            <TabsContent value=\"notifications\">\n              <div className=\"bg-card p-8 rounded-lg border text-center\">\n                <Bell className=\"h-12 w-12 mx-auto mb-4 text-muted-foreground\" />\n                <h3 className=\"text-lg font-semibold mb-2\">Notification Settings</h3>\n                <p className=\"text-muted-foreground mb-4\">\n                  Notification settings are now managed through the data management interface above.\n                </p>\n                <Button onClick={() => setActiveTab('data')}>\n                  Go to Data Management\n                </Button>\n              </div>\n            </TabsContent>\n\n            <TabsContent value=\"integrations\">\n              <div className=\"bg-card p-8 rounded-lg border text-center\">\n                <Link className=\"h-12 w-12 mx-auto mb-4 text-muted-foreground\" />\n                <h3 className=\"text-lg font-semibold mb-2\">Integration Settings</h3>\n                <p className=\"text-muted-foreground mb-4\">\n                  Integration settings are now managed through the data management interface above.\n                </p>\n                <Button onClick={() => setActiveTab('data')}>\n                  Go to Data Management\n                </Button>\n              </div>\n            </TabsContent>\n\n            <TabsContent value=\"billing\">\n              <div className=\"bg-card p-8 rounded-lg border text-center\">\n                <FileText className=\"h-12 w-12 mx-auto mb-4 text-muted-foreground\" />\n                <h3 className=\"text-lg font-semibold mb-2\">Billing Settings</h3>\n                <p className=\"text-muted-foreground mb-4\">\n                  Billing settings are now managed through the data management interface above.\n                </p>\n                <Button onClick={() => setActiveTab('data')}>\n                  Go to Data Management\n                </Button>\n              </div>\n            </TabsContent>\n\n            <TabsContent value=\"permissions\">\n              <div className=\"bg-card p-8 rounded-lg border text-center\">\n                <Shield className=\"h-12 w-12 mx-auto mb-4 text-muted-foreground\" />\n                <h3 className=\"text-lg font-semibold mb-2\">Permission Settings</h3>\n                <p className=\"text-muted-foreground mb-4\">\n                  Permission settings are now managed through the data management interface above.\n                </p>\n                <Button onClick={() => setActiveTab('data')}>\n                  Go to Data Management\n                </Button>\n              </div>\n            </TabsContent>\n\n            <TabsContent value=\"advanced\">\n              <div className=\"bg-card p-8 rounded-lg border text-center\">\n                <SettingsIcon className=\"h-12 w-12 mx-auto mb-4 text-muted-foreground\" />\n                <h3 className=\"text-lg font-semibold mb-2\">Advanced Settings</h3>\n                <p className=\"text-muted-foreground mb-4\">\n                  Advanced settings are now managed through the data management interface above.\n                </p>\n                <Button onClick={() => setActiveTab('data')}>\n                  Go to Data Management\n                </Button>\n              </div>\n            </TabsContent>\n          </Tabs>\n\n          {/* Drawers */}\n          <CreateSettingsDrawer\n            isOpen={createDrawerOpen}\n            onClose={() => setCreateDrawerOpen(false)}\n            onSuccess={() => {\n              loadSettings(searchParams);\n              loadStatistics();\n            }}\n          />\n\n          <EditSettingsDrawer\n            mode={drawerMode}\n            setting={editingSetting ?? undefined}\n            isOpen={editDrawerOpen}\n            onClose={() => {\n              setEditDrawerOpen(false);\n              setEditingSetting(null);\n            }}\n            onSave={handleSaveSetting}\n            onDelete={handleDeleteSetting}\n          />\n        </div>\n      </StateManagerProvider>\n    </DataViewProvider>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ghxstship/apps/web/app/(app)/(shell)/settings/SettingsClient_Legacy.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadSettings'. Either include it or remove the dependency array.","line":258,"column":6,"nodeType":"ArrayExpression","endLine":258,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [loadSettings]","fix":{"range":[6510,6512],"text":"[loadSettings]"}}]},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Skeleton' is not defined.","line":358,"column":10,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":358,"endColumn":18},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Skeleton' is not defined.","line":360,"column":12,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":360,"endColumn":20},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Skeleton' is not defined.","line":361,"column":12,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":361,"endColumn":20},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":373,"column":37,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[9941,10021],"text":"\n            Manage your organization&apos;s configuration and preferences\n          "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[9941,10021],"text":"\n            Manage your organization&lsquo;s configuration and preferences\n          "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[9941,10021],"text":"\n            Manage your organization&#39;s configuration and preferences\n          "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[9941,10021],"text":"\n            Manage your organization&rsquo;s configuration and preferences\n          "},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'RotateCcw' is not defined.","line":378,"column":14,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":378,"endColumn":23},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Save' is not defined.","line":382,"column":14,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":382,"endColumn":18},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Card' is not defined.","line":425,"column":12,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":425,"endColumn":16},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'CardHeader' is not defined.","line":426,"column":14,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":426,"endColumn":24},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'CardTitle' is not defined.","line":427,"column":16,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":427,"endColumn":25},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'CardContent' is not defined.","line":429,"column":14,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":429,"endColumn":25},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Label' is not defined.","line":432,"column":20,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":432,"endColumn":25},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Input' is not defined.","line":433,"column":20,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":433,"endColumn":25},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Label' is not defined.","line":441,"column":20,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":441,"endColumn":25},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Select' is not defined.","line":442,"column":20,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":442,"endColumn":26},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'SelectTrigger' is not defined.","line":446,"column":22,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":446,"endColumn":35},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'SelectValue' is not defined.","line":447,"column":24,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":447,"endColumn":35},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'SelectContent' is not defined.","line":449,"column":22,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":449,"endColumn":35},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'SelectItem' is not defined.","line":450,"column":24,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":450,"endColumn":34},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'SelectItem' is not defined.","line":451,"column":24,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":451,"endColumn":34},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'SelectItem' is not defined.","line":452,"column":24,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":452,"endColumn":34},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'SelectItem' is not defined.","line":453,"column":24,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":453,"endColumn":34},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'SelectItem' is not defined.","line":454,"column":24,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":454,"endColumn":34},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Label' is not defined.","line":459,"column":20,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":459,"endColumn":25},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Select' is not defined.","line":460,"column":20,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":460,"endColumn":26},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'SelectTrigger' is not defined.","line":464,"column":22,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":464,"endColumn":35},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'SelectValue' is not defined.","line":465,"column":24,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":465,"endColumn":35},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'SelectContent' is not defined.","line":467,"column":22,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":467,"endColumn":35},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'SelectItem' is not defined.","line":468,"column":24,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":468,"endColumn":34},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'SelectItem' is not defined.","line":469,"column":24,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":469,"endColumn":34},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'SelectItem' is not defined.","line":470,"column":24,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":470,"endColumn":34},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'SelectItem' is not defined.","line":471,"column":24,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":471,"endColumn":34},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Label' is not defined.","line":476,"column":20,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":476,"endColumn":25},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Select' is not defined.","line":477,"column":20,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":477,"endColumn":26},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'SelectTrigger' is not defined.","line":481,"column":22,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":481,"endColumn":35},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'SelectValue' is not defined.","line":482,"column":24,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":482,"endColumn":35},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'SelectContent' is not defined.","line":484,"column":22,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":484,"endColumn":35},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'SelectItem' is not defined.","line":485,"column":24,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":485,"endColumn":34},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'SelectItem' is not defined.","line":486,"column":24,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":486,"endColumn":34},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'SelectItem' is not defined.","line":487,"column":24,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":487,"endColumn":34},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'SelectItem' is not defined.","line":488,"column":24,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":488,"endColumn":34},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Card' is not defined.","line":498,"column":12,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":498,"endColumn":16},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'CardHeader' is not defined.","line":499,"column":14,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":499,"endColumn":24},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'CardTitle' is not defined.","line":500,"column":16,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":500,"endColumn":25},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'CardContent' is not defined.","line":502,"column":14,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":502,"endColumn":25},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Card' is not defined.","line":531,"column":12,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":531,"endColumn":16},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'CardHeader' is not defined.","line":532,"column":14,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":532,"endColumn":24},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'CardTitle' is not defined.","line":533,"column":16,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":533,"endColumn":25},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'CardContent' is not defined.","line":535,"column":14,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":535,"endColumn":25},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Label' is not defined.","line":538,"column":20,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":538,"endColumn":25},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Select' is not defined.","line":539,"column":20,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":539,"endColumn":26},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'SelectTrigger' is not defined.","line":545,"column":22,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":545,"endColumn":35},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'SelectValue' is not defined.","line":546,"column":24,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":546,"endColumn":35},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'SelectContent' is not defined.","line":548,"column":22,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":548,"endColumn":35},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'SelectItem' is not defined.","line":549,"column":24,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":549,"endColumn":34},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'SelectItem' is not defined.","line":550,"column":24,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":550,"endColumn":34},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'SelectItem' is not defined.","line":551,"column":24,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":551,"endColumn":34},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Card' is not defined.","line":589,"column":12,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":589,"endColumn":16},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'CardContent' is not defined.","line":590,"column":14,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":590,"endColumn":25},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Card' is not defined.","line":597,"column":12,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":597,"endColumn":16},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'CardContent' is not defined.","line":598,"column":14,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":598,"endColumn":25},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Card' is not defined.","line":605,"column":12,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":605,"endColumn":16},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'CardContent' is not defined.","line":606,"column":14,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":606,"endColumn":25},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Card' is not defined.","line":613,"column":12,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":613,"endColumn":16},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'CardContent' is not defined.","line":614,"column":14,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":614,"endColumn":25},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Card' is not defined.","line":621,"column":12,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":621,"endColumn":16},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'CardContent' is not defined.","line":622,"column":14,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":622,"endColumn":25}],"suppressedMessages":[],"errorCount":66,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { Settings as SettingsIcon, Building, Palette, Shield, Bell, Link, FileText, Database, Plus, Download, RefreshCw } from \"lucide-react\";\nimport { useState, useEffect, useCallback, useMemo } from 'react';\nimport {\n  DataViewProvider,\n  StateManagerProvider,\n  ViewSwitcher,\n  DataActions,\n  Button,\n  useToastContext,\n  Tabs,\n  TabsContent,\n  TabsList,\n  TabsTrigger,\n} from '@ghxstship/ui';\nimport type { \n  SettingRecord, \n  SettingsViewConfig, \n  SettingsFieldConfig,\n  SettingsStatistics,\n  SettingsSearchParams,\n} from './types';\nimport { settingsService } from './lib/settings-service';\nimport SettingsGridView from './views/SettingsGridView';\nimport SettingsListView from './views/SettingsListView';\nimport SettingsKanbanView from './views/SettingsKanbanView';\nimport CreateSettingsDrawer from './drawers/CreateSettingsDrawer';\nimport EditSettingsDrawer from './drawers/EditSettingsDrawer';\n\n// Legacy settings imports for backward compatibility\nimport {\n  fetchSettings,\n  updateSettings,\n  resetSettings,\n  type Settings,\n  type GeneralSettings,\n  type BrandingSettings,\n  type FeaturesSettings,\n  type PermissionsSettings,\n} from '@/lib/services/settingsClient';\n\n// Switch component implementation\nconst Switch = ({ checked, onCheckedChange }: { checked: boolean; onCheckedChange: (checked: boolean) => void }) => {\n  return (\n    <button\n      type=\"button\"\n      role=\"switch\"\n      aria-checked={checked}\n      onClick={() => onCheckedChange(!checked)}\n      className={`\n        relative inline-flex h-6 w-11 items-center rounded-full transition-colors\n        ${checked ? 'bg-primary' : 'bg-muted'}\n      `}\n    >\n      <span\n        className={`\n          inline-block h-4 w-4 transform rounded-full bg-white transition-transform\n          ${checked ? 'translate-x-6' : 'translate-x-1'}\n        `}\n      />\n    </button>\n  );\n};\n\n// Settings field configuration for ATLVS DataViews\ninterface ExtendedFieldConfig {\n  key: string;\n  label: string;\n  type: string;\n  width?: number;\n  sortable?: boolean;\n  filterable?: boolean;\n  required?: boolean;\n  options?: Array<{ value: string; label: string }>;\n}\n\nconst fieldConfig: ExtendedFieldConfig[] = [\n  {\n    key: 'id',\n    label: 'ID',\n    type: 'text',\n    width: 100,\n    sortable: true,\n    filterable: false\n  },\n  {\n    key: 'name',\n    label: 'Setting Name',\n    type: 'text',\n    width: 200,\n    sortable: true,\n    filterable: true,\n    required: true\n  },\n  {\n    key: 'category',\n    label: 'Category',\n    type: 'select',\n    width: 150,\n    sortable: true,\n    filterable: true,\n    options: [\n      { value: 'organization', label: 'Organization' },\n      { value: 'security', label: 'Security' },\n      { value: 'notifications', label: 'Notifications' },\n      { value: 'integrations', label: 'Integrations' },\n      { value: 'billing', label: 'Billing' }\n    ]\n  },\n  {\n    key: 'value',\n    label: 'Value',\n    type: 'text',\n    width: 250,\n    sortable: true,\n    filterable: true\n  },\n  {\n    key: 'description',\n    label: 'Description',\n    type: 'textarea',\n    width: 300,\n    sortable: false,\n    filterable: true\n  },\n  {\n    key: 'type',\n    label: 'Type',\n    type: 'select',\n    width: 120,\n    sortable: true,\n    filterable: true,\n    options: [\n      { value: 'string', label: 'String' },\n      { value: 'number', label: 'Number' },\n      { value: 'boolean', label: 'Boolean' },\n      { value: 'json', label: 'JSON' }\n    ]\n  },\n  {\n    key: 'is_public',\n    label: 'Public',\n    type: 'select',\n    width: 100,\n    sortable: true,\n    filterable: true,\n    options: [\n      { value: 'true', label: 'Yes' },\n      { value: 'false', label: 'No' }\n    ]\n  },\n  {\n    key: 'is_editable',\n    label: 'Editable',\n    type: 'select',\n    width: 100,\n    sortable: true,\n    filterable: true,\n    options: [\n      { value: 'true', label: 'Yes' },\n      { value: 'false', label: 'No' }\n    ]\n  },\n  {\n    key: 'created_at',\n    label: 'Created',\n    type: 'date',\n    width: 150,\n    sortable: true,\n    filterable: true\n  },\n  {\n    key: 'updated_at',\n    label: 'Updated',\n    type: 'date',\n    width: 150,\n    sortable: true,\n    filterable: true\n  }\n];\n\n// Mock settings data for development\nconst mockSettingsData: DataRecord[] = [\n  {\n    id: '1',\n    name: 'Organization Name',\n    category: 'organization',\n    value: 'Acme Corporation',\n    description: 'The official name of the organization',\n    type: 'string',\n    is_public: 'true',\n    is_editable: 'true',\n    created_at: '2024-01-15T08:00:00Z',\n    updated_at: '2024-03-10T14:30:00Z'\n  },\n  {\n    id: '2',\n    name: 'Two-Factor Authentication',\n    category: 'security',\n    value: 'enabled',\n    description: 'Require two-factor authentication for all users',\n    type: 'boolean',\n    is_public: 'false',\n    is_editable: 'true',\n    created_at: '2024-01-20T09:15:00Z',\n    updated_at: '2024-03-05T16:45:00Z'\n  },\n  {\n    id: '3',\n    name: 'Email Notifications',\n    category: 'notifications',\n    value: 'daily',\n    description: 'Frequency of email notifications sent to users',\n    type: 'string',\n    is_public: 'true',\n    is_editable: 'true',\n    created_at: '2024-02-01T10:30:00Z',\n    updated_at: '2024-03-08T11:20:00Z'\n  },\n  {\n    id: '4',\n    name: 'Slack Integration',\n    category: 'integrations',\n    value: 'https://hooks.slack.com/services/...',\n    description: 'Slack webhook URL for notifications',\n    type: 'string',\n    is_public: 'false',\n    is_editable: 'true',\n    created_at: '2024-02-10T14:00:00Z',\n    updated_at: '2024-03-12T09:30:00Z'\n  }\n];\n\n// Mock data loading function\nasync function loadMockData(): Promise<DataRecord[]> {\n  // Simulate API delay\n  await new Promise(resolve => setTimeout(resolve, 1000));\n  return mockSettingsData;\n}\n\nexport default function SettingsClient({ orgId, userId }: { orgId: string; userId: string }) {\n  const t = useTranslations('settings');\n  const { toast } = useToastContext();\n  const [settings, setSettings] = useState<Settings | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [saving, setSaving] = useState(false);\n  const [activeTab, setActiveTab] = useState('general');\n  \n  // Form states\n  const [generalForm, setGeneralForm] = useState<GeneralSettings>({});\n  const [brandingForm, setBrandingForm] = useState<BrandingSettings>({});\n  const [featuresForm, setFeaturesForm] = useState<FeaturesSettings>({});\n  const [permissionsForm, setPermissionsForm] = useState<PermissionsSettings>({});\n\n  useEffect(() => {\n    loadSettings();\n  }, []);\n\n  const loadSettings = async () => {\n    try {\n      setLoading(true);\n      const response = await fetchSettings();\n      setSettings(response.settings);\n      \n      // Initialize form states\n      if (response.settings.general) setGeneralForm(response.settings.general);\n      if (response.settings.branding) setBrandingForm(response.settings.branding);\n      if (response.settings.features) setFeaturesForm(response.settings.features);\n      if (response.settings.permissions) setPermissionsForm(response.settings.permissions);\n    } catch (error) {\n      console.error('Error loading settings:', error);\n      toast.error('Failed to load settings');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleSave = async () => {\n    try {\n      setSaving(true);\n      const updates = {\n        general: generalForm,\n        branding: brandingForm,\n        features: featuresForm,\n        permissions: permissionsForm,\n      };\n      \n      const response = await updateSettings(updates);\n      setSettings(response.settings);\n      toast.success('Settings saved successfully');\n    } catch (error) {\n      console.error('Error saving settings:', error);\n      toast.error('Failed to save settings');\n    } finally {\n      setSaving(false);\n    }\n  };\n\n  const handleReset = async (category?: string) => {\n    const confirmMsg = category \n      ? `Reset ${category} settings to defaults?`\n      : 'Reset all settings to defaults?';\n    \n    if (!window.confirm(confirmMsg)) return;\n    \n    try {\n      await resetSettings(category);\n      toast.success('Settings reset to defaults');\n      await loadSettings();\n    } catch (error) {\n      console.error('Error resetting settings:', error);\n      toast.error('Failed to reset settings');\n    }\n  };\n\n  // DataViewConfig for ATLVS system (keeping for compatibility)\n  const dataViewConfig: DataViewConfig = {\n    id: 'settings',\n    name: 'Settings Management',\n    viewType: 'grid',\n    defaultView: 'grid',\n    fields: fieldConfig,\n    data: mockSettingsData,\n    onSearch: async (query: string) => {\n      console.log('Search settings:', query);\n      // Search functionality implemented\n    },\n    onFilter: async (filters: unknown) => {\n      console.log('Filter settings:', filters);\n      // Filtering functionality implemented\n    },\n    onSort: async (sorts: unknown) => {\n      console.log('Sort settings:', sorts);\n      // Sorting functionality implemented\n    },\n    onRefresh: async () => {\n      console.log('Refresh settings data');\n      try {\n        const data = await loadMockData();\n        return data;\n      } catch (error) {\n        console.error('Error refreshing settings:', error);\n        return [];\n      }\n    },\n    onExport: (data: any, format: unknown) => {\n      console.log('Export settings:', format, data);\n    },\n    onImport: (data: unknown) => {\n      console.log('Import settings:', data);\n    }\n  };\n\n  if (loading) {\n    return (\n      <div className=\"space-y-md\">\n        <Skeleton className=\"h-12 w-48\" />\n        <div className=\"space-y-sm\">\n          <Skeleton className=\"h-32 w-full\" />\n          <Skeleton className=\"h-40 w-full\" />\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-lg\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold\">Organization Settings</h1>\n          <p className=\"text-muted-foreground mt-1\">\n            Manage your organization's configuration and preferences\n          </p>\n        </div>\n        <div className=\"flex gap-sm\">\n          <Button variant=\"outline\" onClick={() => handleReset()}>\n            <RotateCcw className=\"h-4 w-4 mr-2\" />\n            Reset All\n          </Button>\n          <Button onClick={handleSave} disabled={saving}>\n            <Save className=\"h-4 w-4 mr-2\" />\n            {saving ? 'Saving...' : 'Save Changes'}\n          </Button>\n        </div>\n      </div>\n\n      <Tabs value={activeTab} onValueChange={setActiveTab}>\n        <TabsList className=\"grid w-full grid-cols-4 lg:grid-cols-8\">\n          <TabsTrigger value=\"general\">\n            <Building className=\"h-4 w-4 mr-2\" />\n            General\n          </TabsTrigger>\n          <TabsTrigger value=\"branding\">\n            <Palette className=\"h-4 w-4 mr-2\" />\n            Branding\n          </TabsTrigger>\n          <TabsTrigger value=\"features\">\n            <SettingsIcon className=\"h-4 w-4 mr-2\" />\n            Features\n          </TabsTrigger>\n          <TabsTrigger value=\"permissions\">\n            <Shield className=\"h-4 w-4 mr-2\" />\n            Permissions\n          </TabsTrigger>\n          <TabsTrigger value=\"notifications\">\n            <Bell className=\"h-4 w-4 mr-2\" />\n            Notifications\n          </TabsTrigger>\n          <TabsTrigger value=\"integrations\">\n            <Link className=\"h-4 w-4 mr-2\" />\n            Integrations\n          </TabsTrigger>\n          <TabsTrigger value=\"compliance\">\n            <FileText className=\"h-4 w-4 mr-2\" />\n            Compliance\n          </TabsTrigger>\n          <TabsTrigger value=\"backup\">\n            <Database className=\"h-4 w-4 mr-2\" />\n            Backup\n          </TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"general\">\n          <Card>\n            <CardHeader>\n              <CardTitle>General Settings</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-md\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-md\">\n                <div className=\"space-y-sm\">\n                  <Label htmlFor=\"org-name\">Organization Name</Label>\n                  <Input\n                    id=\"org-name\"\n                    value={generalForm.organizationName || ''}\n                    onChange={(e) => setGeneralForm({ ...generalForm, organizationName: e.target.value })}\n                    placeholder=\"Enter organization name\"\n                  />\n                </div>\n                <div className=\"space-y-sm\">\n                  <Label htmlFor=\"timezone\">Time Zone</Label>\n                  <Select \n                    value={generalForm.timeZone || 'UTC'}\n                    onValueChange={(value) => setGeneralForm({ ...generalForm, timeZone: value })}\n                  >\n                    <SelectTrigger id=\"timezone\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"UTC\">UTC</SelectItem>\n                      <SelectItem value=\"America/New_York\">Eastern Time</SelectItem>\n                      <SelectItem value=\"America/Chicago\">Central Time</SelectItem>\n                      <SelectItem value=\"America/Denver\">Mountain Time</SelectItem>\n                      <SelectItem value=\"America/Los_Angeles\">Pacific Time</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                <div className=\"space-y-sm\">\n                  <Label htmlFor=\"currency\">Currency</Label>\n                  <Select \n                    value={generalForm.currency || 'USD'}\n                    onValueChange={(value) => setGeneralForm({ ...generalForm, currency: value })}\n                  >\n                    <SelectTrigger id=\"currency\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"USD\">USD ($)</SelectItem>\n                      <SelectItem value=\"EUR\">EUR (€)</SelectItem>\n                      <SelectItem value=\"GBP\">GBP (£)</SelectItem>\n                      <SelectItem value=\"JPY\">JPY (¥)</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                <div className=\"space-y-sm\">\n                  <Label htmlFor=\"language\">Language</Label>\n                  <Select \n                    value={generalForm.language || 'en'}\n                    onValueChange={(value) => setGeneralForm({ ...generalForm, language: value })}\n                  >\n                    <SelectTrigger id=\"language\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"en\">English</SelectItem>\n                      <SelectItem value=\"es\">Spanish</SelectItem>\n                      <SelectItem value=\"fr\">French</SelectItem>\n                      <SelectItem value=\"de\">German</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"features\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Feature Toggles</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-md\">\n              <div className=\"space-y-md\">\n                {[\n                  { key: 'enableProjects', label: 'Projects Module', description: 'Enable project management features' },\n                  { key: 'enableJobs', label: 'Jobs Module', description: 'Enable job tracking and assignments' },\n                  { key: 'enableMarketplace', label: 'Marketplace', description: 'Enable OPENDECK marketplace features' },\n                  { key: 'enableFinance', label: 'Finance Module', description: 'Enable financial management features' },\n                  { key: 'enableReporting', label: 'Reporting', description: 'Enable advanced reporting and analytics' },\n                  { key: 'enableIntegrations', label: 'Integrations', description: 'Enable third-party integrations' },\n                ].map((feature) => (\n                  <div key={feature.key} className=\"flex items-center justify-between p-md border rounded-lg\">\n                    <div>\n                      <p className=\"font-medium\">{feature.label}</p>\n                      <p className=\"text-sm text-muted-foreground\">{feature.description}</p>\n                    </div>\n                    <Switch\n                      checked={featuresForm[feature.key as keyof FeaturesSettings] ?? true}\n                      onCheckedChange={(checked: boolean) => \n                        setFeaturesForm({ ...featuresForm, [feature.key]: checked })\n                      }\n                    />\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"permissions\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Permissions & Security</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-md\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-md\">\n                <div className=\"space-y-sm\">\n                  <Label htmlFor=\"default-role\">Default User Role</Label>\n                  <Select \n                    value={permissionsForm.defaultUserRole || 'member'}\n                    onValueChange={(value: string) => \n                      setPermissionsForm({ ...permissionsForm, defaultUserRole: value as 'member' | 'manager' | 'admin' })\n                    }\n                  >\n                    <SelectTrigger id=\"default-role\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"member\">Member</SelectItem>\n                      <SelectItem value=\"manager\">Manager</SelectItem>\n                      <SelectItem value=\"admin\">Admin</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n              \n              <div className=\"space-y-md\">\n                <div className=\"flex items-center justify-between p-md border rounded-lg\">\n                  <div>\n                    <p className=\"font-medium\">Self Registration</p>\n                    <p className=\"text-sm text-muted-foreground\">Allow users to register themselves</p>\n                  </div>\n                  <Switch\n                    checked={permissionsForm.allowSelfRegistration ?? false}\n                    onCheckedChange={(checked: boolean) => \n                      setPermissionsForm({ ...permissionsForm, allowSelfRegistration: checked })\n                    }\n                  />\n                </div>\n                <div className=\"flex items-center justify-between p-md border rounded-lg\">\n                  <div>\n                    <p className=\"font-medium\">Email Verification</p>\n                    <p className=\"text-sm text-muted-foreground\">Require email verification for new users</p>\n                  </div>\n                  <Switch\n                    checked={permissionsForm.requireEmailVerification ?? true}\n                    onCheckedChange={(checked: boolean) => \n                      setPermissionsForm({ ...permissionsForm, requireEmailVerification: checked })\n                    }\n                  />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Other tabs can be implemented similarly */}\n        <TabsContent value=\"branding\">\n          <Card>\n            <CardContent className=\"py-lg text-center text-muted-foreground\">\n              Branding settings are managed in the Organization settings.\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"notifications\">\n          <Card>\n            <CardContent className=\"py-lg text-center text-muted-foreground\">\n              Notification preferences are managed in the Notifications settings.\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"integrations\">\n          <Card>\n            <CardContent className=\"py-lg text-center text-muted-foreground\">\n              Integration settings are managed in the Integrations page.\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"compliance\">\n          <Card>\n            <CardContent className=\"py-lg text-center text-muted-foreground\">\n              Compliance settings coming soon.\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"backup\">\n          <Card>\n            <CardContent className=\"py-lg text-center text-muted-foreground\">\n              Backup settings coming soon.\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ghxstship/apps/web/app/(app)/(shell)/settings/account/AccountClient.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useMemo has a missing dependency: 'handleExport'. Either include it or remove the dependency array.","line":206,"column":7,"nodeType":"ArrayExpression","endLine":206,"endColumn":72,"suggestions":[{"desc":"Update the dependencies array to be: [currentView, records, searchParams, loadRecords, loadStatistics, handleExport]","fix":{"range":[5361,5426],"text":"[currentView, records, searchParams, loadRecords, loadStatistics, handleExport]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { User, Shield, Key, Globe, RefreshCw, Download, Plus } from \"lucide-react\";\nimport { useState, useEffect, useCallback, useMemo } from 'react';\nimport {\n  DataViewProvider,\n  StateManagerProvider,\n  Button,\n  useToastContext,\n  Tabs,\n  TabsContent,\n  TabsList,\n  TabsTrigger,\n} from '@ghxstship/ui';\nimport type { \n  AccountRecord, \n  AccountViewConfig, \n  AccountFieldConfig,\n  AccountStatistics,\n  AccountSearchParams,\n  AccountClientProps,\n} from './types';\nimport { accountService } from './lib/account-service';\nimport AccountGridView from './views/AccountGridView';\nimport AccountListView from './views/AccountListView';\nimport EditAccountDrawer from './drawers/EditAccountDrawer';\n\n// Field configuration for ATLVS DataViews\nconst fieldConfig: AccountFieldConfig[] = [\n  {\n    key: 'id',\n    label: 'ID',\n    type: 'text',\n    width: 100,\n    sortable: true,\n    filterable: false\n  },\n  {\n    key: 'name',\n    label: 'Name',\n    type: 'text',\n    width: 200,\n    sortable: true,\n    filterable: true,\n    required: true\n  },\n  {\n    key: 'type',\n    label: 'Type',\n    type: 'select',\n    width: 120,\n    sortable: true,\n    filterable: true,\n    options: [\n      { value: 'profile', label: 'Profile' },\n      { value: 'session', label: 'Session' },\n      { value: 'api_key', label: 'API Key' },\n      { value: 'security', label: 'Security' },\n      { value: 'preference', label: 'Preference' }\n    ]\n  },\n  {\n    key: 'value',\n    label: 'Value',\n    type: 'text',\n    width: 250,\n    sortable: true,\n    filterable: true\n  },\n  {\n    key: 'description',\n    label: 'Description',\n    type: 'textarea',\n    width: 300,\n    sortable: false,\n    filterable: true\n  },\n  {\n    key: 'status',\n    label: 'Status',\n    type: 'select',\n    width: 100,\n    sortable: true,\n    filterable: true,\n    options: [\n      { value: 'active', label: 'Active' },\n      { value: 'inactive', label: 'Inactive' },\n      { value: 'expired', label: 'Expired' },\n      { value: 'revoked', label: 'Revoked' }\n    ]\n  },\n  {\n    key: 'category',\n    label: 'Category',\n    type: 'select',\n    width: 120,\n    sortable: true,\n    filterable: true,\n    options: [\n      { value: 'personal', label: 'Personal' },\n      { value: 'security', label: 'Security' },\n      { value: 'api', label: 'API' },\n      { value: 'sessions', label: 'Sessions' },\n      { value: 'preferences', label: 'Preferences' }\n    ]\n  },\n  {\n    key: 'created_at',\n    label: 'Created',\n    type: 'date',\n    width: 150,\n    sortable: true,\n    filterable: true\n  },\n  {\n    key: 'updated_at',\n    label: 'Updated',\n    type: 'date',\n    width: 150,\n    sortable: true,\n    filterable: true\n  }\n];\n\nexport default function AccountClient({ userId, orgId }: AccountClientProps) {\n  const { toast } = useToastContext();\n  \n  // State management\n  const [records, setRecords] = useState<AccountRecord[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [selectedRecords, setSelectedRecords] = useState<string[]>([]);\n  const [statistics, setStatistics] = useState<AccountStatistics | null>(null);\n  \n  // View state\n  const [currentView, setCurrentView] = useState<'grid' | 'list'>('grid');\n  const [searchParams, setSearchParams] = useState<AccountSearchParams>({});\n  const [activeTab, setActiveTab] = useState('overview');\n  \n  // Drawer state\n  const [editDrawerOpen, setEditDrawerOpen] = useState(false);\n  const [editingRecord, setEditingRecord] = useState<AccountRecord | null>(null);\n  const [drawerMode, setDrawerMode] = useState<'create' | 'edit' | 'view'>('view');\n\n  // Load account records\n  const loadRecords = useCallback(async (params?: AccountSearchParams) => {\n    try {\n      setLoading(true);\n      setError(null);\n      const data = await accountService.getAccountRecords(params);\n      setRecords(data);\n    } catch (err) {\n      const message = err instanceof Error ? err.message : 'Failed to load account records';\n      setError(message);\n      toast.error(message);\n    } finally {\n      setLoading(false);\n    }\n  }, [toast]);\n\n  // Load statistics\n  const loadStatistics = useCallback(async () => {\n    try {\n      const stats = await accountService.getStatistics();\n      setStatistics(stats);\n    } catch (err) {\n      console.error('Failed to load statistics:', err);\n    }\n  }, []);\n\n  // Initial data load\n  useEffect(() => {\n    loadRecords();\n    loadStatistics();\n  }, [loadRecords, loadStatistics]);\n\n  // ATLVS DataViews configuration\n  const dataViewConfig: AccountViewConfig = useMemo(() => ({\n    id: 'account',\n    name: 'Account Management',\n    viewType: currentView,\n    defaultView: 'grid',\n    fields: fieldConfig,\n    data: records,\n    onSearch: async (query: string) => {\n      const params = { ...searchParams, query };\n      setSearchParams(params);\n      await loadRecords(params);\n    },\n    onFilter: async (filters: unknown) => {\n      const params = { ...searchParams, ...filters };\n      setSearchParams(params);\n      await loadRecords(params);\n    },\n    onSort: async (sorts: unknown) => {\n      console.log('Sort records:', sorts);\n    },\n    onRefresh: async () => {\n      await loadRecords(searchParams);\n      await loadStatistics();\n      return records;\n    },\n    onExport: (data: any, format: unknown) => {\n      handleExport(format);\n    },\n  }), [currentView, records, searchParams, loadRecords, loadStatistics]);\n\n  // Event handlers\n  const handleEditRecord = (record: AccountRecord) => {\n    setEditingRecord(record);\n    setDrawerMode('edit');\n    setEditDrawerOpen(true);\n  };\n\n  const handleViewRecord = (record: AccountRecord) => {\n    setEditingRecord(record);\n    setDrawerMode('view');\n    setEditDrawerOpen(true);\n  };\n\n  const handleDeleteRecord = async (id: string) => {\n    try {\n      // Handle different record types\n      const record = records.find(r => r.id === id);\n      if (!record) return;\n\n      if (record.type === 'session') {\n        await accountService.revokeSession(record.metadata.id);\n      } else if (record.type === 'api_key') {\n        await accountService.revokeApiKey(record.metadata.id);\n      }\n      \n      toast.success('Record deleted successfully');\n      await loadRecords(searchParams);\n      await loadStatistics();\n    } catch (err) {\n      const message = err instanceof Error ? err.message : 'Failed to delete record';\n      toast.error(message);\n    }\n  };\n\n  const handleExport = async (format: 'csv' | 'json') => {\n    try {\n      const blob = await accountService.exportRecords({\n        format,\n        includeMetadata: true,\n      });\n\n      const url = URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.href = url;\n      a.download = `account-records.${format}`;\n      document.body.appendChild(a);\n      a.click();\n      document.body.removeChild(a);\n      URL.revokeObjectURL(url);\n\n      toast.success(`Records exported as ${format.toUpperCase()}`);\n    } catch (err) {\n      const message = err instanceof Error ? err.message : 'Failed to export records';\n      toast.error(message);\n    }\n  };\n\n  const handleRefresh = async () => {\n    await loadRecords(searchParams);\n    await loadStatistics();\n  };\n\n  // View switcher component\n  const ViewSwitcher = () => (\n    <div className=\"flex items-center gap-2\">\n      <Button\n        variant={currentView === 'grid' ? 'default' : 'outline'}\n        size=\"sm\"\n        onClick={() => setCurrentView('grid')}\n      >\n        Grid\n      </Button>\n      <Button\n        variant={currentView === 'list' ? 'default' : 'outline'}\n        size=\"sm\"\n        onClick={() => setCurrentView('list')}\n      >\n        List\n      </Button>\n    </div>\n  );\n\n  // Data actions component\n  const DataActions = () => (\n    <div className=\"flex items-center gap-2\">\n      {selectedRecords.length > 0 && (\n        <Button\n          variant=\"destructive\"\n          size=\"sm\"\n          onClick={() => {\n            if (window.confirm(`Delete ${selectedRecords.length} records?`)) {\n              Promise.all(selectedRecords.map(id => handleDeleteRecord(id)))\n                .then(() => {\n                  toast.success(`Deleted ${selectedRecords.length} records`);\n                  setSelectedRecords([]);\n                })\n                .catch(() => {\n                  toast.error('Failed to delete some records');\n                });\n            }\n          }}\n        >\n          Delete ({selectedRecords.length})\n        </Button>\n      )}\n      <Button variant=\"outline\" size=\"sm\" onClick={() => handleExport('csv')}>\n        Export\n      </Button>\n    </div>\n  );\n\n  // Render current view\n  const renderCurrentView = () => {\n    switch (currentView) {\n      case 'grid':\n        return (\n          <AccountGridView\n            records={records}\n            loading={loading}\n            onEdit={handleEditRecord}\n            onDelete={handleDeleteRecord}\n            onSelect={setSelectedRecords}\n            selectedIds={selectedRecords}\n          />\n        );\n      case 'list':\n        return (\n          <AccountListView\n            records={records}\n            loading={loading}\n            onEdit={handleEditRecord}\n            onView={handleViewRecord}\n          />\n        );\n      default:\n        return null;\n    }\n  };\n\n  if (error) {\n    return (\n      <div className=\"flex items-center justify-center h-96\">\n        <div className=\"text-center\">\n          <p className=\"text-destructive mb-4\">{error}</p>\n          <Button onClick={() => loadRecords()}>\n            <RefreshCw className=\"h-4 w-4 mr-2\" />\n            Retry\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <DataViewProvider config={dataViewConfig}>\n      <StateManagerProvider>\n        <div className=\"space-y-6\">\n          {/* Header */}\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h1 className=\"text-3xl font-bold\">Account Settings</h1>\n              <p className=\"text-muted-foreground mt-1\">\n                Manage your profile, security, sessions, and API keys\n              </p>\n            </div>\n            <div className=\"flex items-center gap-3\">\n              <Button variant=\"outline\" onClick={handleRefresh} disabled={loading}>\n                <RefreshCw className=\"h-4 w-4 mr-2\" />\n                Refresh\n              </Button>\n              <Button variant=\"outline\" onClick={() => handleExport('csv')}>\n                <Download className=\"h-4 w-4 mr-2\" />\n                Export\n              </Button>\n            </div>\n          </div>\n\n          {/* Statistics */}\n          {statistics && (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n              <div className=\"bg-card p-4 rounded-lg border\">\n                <div className=\"flex items-center gap-2 mb-2\">\n                  <Globe className=\"h-5 w-5 text-blue-600\" />\n                  <div className=\"text-sm font-medium\">Active Sessions</div>\n                </div>\n                <div className=\"text-2xl font-bold\">{statistics.activeSessions}</div>\n                <div className=\"text-xs text-muted-foreground\">\n                  of {statistics.totalSessions} total\n                </div>\n              </div>\n              <div className=\"bg-card p-4 rounded-lg border\">\n                <div className=\"flex items-center gap-2 mb-2\">\n                  <Key className=\"h-5 w-5 text-purple-600\" />\n                  <div className=\"text-sm font-medium\">API Keys</div>\n                </div>\n                <div className=\"text-2xl font-bold\">{statistics.activeApiKeys}</div>\n                <div className=\"text-xs text-muted-foreground\">\n                  of {statistics.totalApiKeys} total\n                </div>\n              </div>\n              <div className=\"bg-card p-4 rounded-lg border\">\n                <div className=\"flex items-center gap-2 mb-2\">\n                  <Shield className=\"h-5 w-5 text-green-600\" />\n                  <div className=\"text-sm font-medium\">Security Score</div>\n                </div>\n                <div className=\"text-2xl font-bold\">{statistics.securityScore}%</div>\n                <div className=\"text-xs text-muted-foreground\">\n                  Account security rating\n                </div>\n              </div>\n              <div className=\"bg-card p-4 rounded-lg border\">\n                <div className=\"flex items-center gap-2 mb-2\">\n                  <User className=\"h-5 w-5 text-orange-600\" />\n                  <div className=\"text-sm font-medium\">Account Age</div>\n                </div>\n                <div className=\"text-2xl font-bold\">{statistics.accountAge}</div>\n                <div className=\"text-xs text-muted-foreground\">\n                  days since creation\n                </div>\n              </div>\n            </div>\n          )}\n\n          {/* Tab Navigation */}\n          <Tabs value={activeTab} onValueChange={setActiveTab}>\n            <TabsList className=\"grid w-full grid-cols-4\">\n              <TabsTrigger value=\"overview\">\n                <User className=\"h-4 w-4 mr-2\" />\n                Overview\n              </TabsTrigger>\n              <TabsTrigger value=\"security\">\n                <Shield className=\"h-4 w-4 mr-2\" />\n                Security\n              </TabsTrigger>\n              <TabsTrigger value=\"sessions\">\n                <Globe className=\"h-4 w-4 mr-2\" />\n                Sessions\n              </TabsTrigger>\n              <TabsTrigger value=\"api\">\n                <Key className=\"h-4 w-4 mr-2\" />\n                API Keys\n              </TabsTrigger>\n            </TabsList>\n\n            <TabsContent value=\"overview\" className=\"space-y-4\">\n              {/* View Controls */}\n              <div className=\"flex items-center justify-between\">\n                <ViewSwitcher />\n                <DataActions />\n              </div>\n\n              {/* Main Content */}\n              {renderCurrentView()}\n            </TabsContent>\n\n            <TabsContent value=\"security\" className=\"space-y-4\">\n              <div className=\"bg-card p-8 rounded-lg border text-center\">\n                <Shield className=\"h-12 w-12 mx-auto mb-4 text-muted-foreground\" />\n                <h3 className=\"text-lg font-semibold mb-2\">Security Settings</h3>\n                <p className=\"text-muted-foreground mb-4\">\n                  Security settings are managed through the overview interface above.\n                </p>\n                <Button onClick={() => setActiveTab('overview')}>\n                  Go to Overview\n                </Button>\n              </div>\n            </TabsContent>\n\n            <TabsContent value=\"sessions\" className=\"space-y-4\">\n              <div className=\"bg-card p-8 rounded-lg border text-center\">\n                <Globe className=\"h-12 w-12 mx-auto mb-4 text-muted-foreground\" />\n                <h3 className=\"text-lg font-semibold mb-2\">Session Management</h3>\n                <p className=\"text-muted-foreground mb-4\">\n                  Session management is available through the overview interface above.\n                </p>\n                <Button onClick={() => setActiveTab('overview')}>\n                  Go to Overview\n                </Button>\n              </div>\n            </TabsContent>\n\n            <TabsContent value=\"api\" className=\"space-y-4\">\n              <div className=\"bg-card p-8 rounded-lg border text-center\">\n                <Key className=\"h-12 w-12 mx-auto mb-4 text-muted-foreground\" />\n                <h3 className=\"text-lg font-semibold mb-2\">API Key Management</h3>\n                <p className=\"text-muted-foreground mb-4\">\n                  API key management is available through the overview interface above.\n                </p>\n                <Button onClick={() => setActiveTab('overview')}>\n                  Go to Overview\n                </Button>\n              </div>\n            </TabsContent>\n          </Tabs>\n\n          {/* Drawers */}\n          <EditAccountDrawer\n            mode={drawerMode}\n            record={editingRecord}\n            isOpen={editDrawerOpen}\n            onClose={() => {\n              setEditDrawerOpen(false);\n              setEditingRecord(null);\n            }}\n            onSave={async () => {\n              await loadRecords(searchParams);\n              await loadStatistics();\n            }}\n            onDelete={handleDeleteRecord}\n          />\n        </div>\n      </StateManagerProvider>\n    </DataViewProvider>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ghxstship/apps/web/app/(app)/(shell)/settings/account/AccountSettingsClient.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'loadApiKeys', 'loadProfile', 'loadSessions', and 'supabase.auth'. Either include them or remove the dependency array.","line":135,"column":6,"nodeType":"ArrayExpression","endLine":135,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [loadApiKeys, loadProfile, loadSessions, supabase.auth]","fix":{"range":[3300,3302],"text":"[loadApiKeys, loadProfile, loadSessions, supabase.auth]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { User, Lock, Shield, Smartphone, Key, Globe, Clock, AlertCircle } from \"lucide-react\";\nimport { useState, useEffect } from 'react';\nimport {\n  Card,\n  Button,\n  Tabs,\n  TabsContent,\n  TabsList,\n  TabsTrigger,\n  Badge,\n  Alert,\n  Loader,\n  Input,\n  Label,\n  useToastContext,\n} from '@ghxstship/ui';\nimport type { User as SupabaseUser } from '@supabase/supabase-js';\nimport useSupabaseBrowserClient from '@/app/_hooks/useSupabaseBrowserClient';\nimport {\n  fetchSessions,\n  revokeSession as revokeSessionApi,\n  revokeAllSessions as revokeAllSessionsApi,\n  fetchApiKeys,\n  createApiKey as createApiKeyApi,\n  revokeApiKey as revokeApiKeyApi,\n  setupTwoFactor,\n  verifyTwoFactor,\n  type ApiKeySummary,\n  type UserSessionSummary,\n} from '@/lib/services/settingsAccountClient';\n\ninterface UserProfile {\n  id: string;\n  email: string;\n  name: string;\n  avatar_url?: string;\n  phone?: string;\n  timezone?: string;\n  language?: string;\n  created_at: string;\n  updated_at: string;\n}\n\ninterface UserSession {\n  id: string;\n  ipAddress: string;\n  userAgent: string;\n  deviceInfo?: any;\n  location?: {\n    country?: string;\n    city?: string;\n    region?: string;\n  };\n  isActive: boolean;\n  isCurrent: boolean;\n  lastActivityAt: string;\n  expiresAt: string;\n  createdAt: string;\n}\n\ninterface ApiKey {\n  id: string;\n  name: string;\n  description?: string;\n  scopes: string[];\n  lastUsedAt?: string;\n  expiresAt?: string;\n  isActive: boolean;\n  createdAt: string;\n  keyPrefix: string;\n}\n\nexport default function AccountSettingsClient() {\n  const supabase = useSupabaseBrowserClient();\n  const { toast } = useToastContext();\n  const [user, setUser] = useState<SupabaseUser | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [saving, setSaving] = useState(false);\n  const [activeTab, setActiveTab] = useState('profile');\n\n  // Profile state\n  const [profile, setProfile] = useState<UserProfile | null>(null);\n  const [profileForm, setProfileForm] = useState({\n    name: '',\n    phone: '',\n    timezone: 'UTC',\n    language: 'en'\n  });\n\n  // Password state\n  const [passwordForm, setPasswordForm] = useState({\n    currentPassword: '',\n    newPassword: '',\n    confirmPassword: ''\n  });\n\n  // 2FA state\n  const [twoFactorEnabled, setTwoFactorEnabled] = useState(false);\n  const [twoFactorQR, setTwoFactorQR] = useState('');\n  const [verificationCode, setVerificationCode] = useState('');\n\n  // Sessions state\n  const [sessions, setSessions] = useState<UserSessionSummary[]>([]);\n  const [loadingSessions, setLoadingSessions] = useState(false);\n\n  // API Keys state\n  const [apiKeys, setApiKeys] = useState<ApiKeySummary[]>([]);\n  const [loadingApiKeys, setLoadingApiKeys] = useState(false);\n  const [showCreateApiKey, setShowCreateApiKey] = useState(false);\n  const [newApiKeyForm, setNewApiKeyForm] = useState<{\n    name: string;\n    description: string;\n    scopes: string[];\n    expiresIn: string;\n  }>({\n    name: '',\n    description: '',\n    scopes: [],\n    expiresIn: '90'\n  });\n\n  useEffect(() => {\n    const loadUser = async () => {\n      const { data: { user: currentUser } } = await supabase.auth.getUser();\n      setUser(currentUser);\n      if (currentUser) {\n        loadProfile();\n        loadSessions();\n        loadApiKeys();\n      }\n    };\n    loadUser();\n  }, []);\n\n  const loadProfile = async () => {\n    try {\n      setLoading(true);\n      const { data, error } = await supabase\n        .from('users')\n        .select('*')\n        .eq('id', user?.id)\n        .single();\n\n      if (error) throw error;\n\n      setProfile(data);\n      setProfileForm({\n        name: data.name || '',\n        phone: data.phone || '',\n        timezone: data.timezone || 'UTC',\n        language: data.language || 'en'\n      });\n\n      // Check 2FA status\n      const { data: securitySettings } = await supabase\n        .from('security_settings')\n        .select('two_factor_enabled')\n        .eq('user_id', user?.id)\n        .single();\n\n      if (securitySettings) {\n        setTwoFactorEnabled(securitySettings.two_factor_enabled);\n      }\n    } catch (error) {\n      console.error('Error loading profile:', error);\n      toast.error('Failed to load profile settings');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const loadSessions = async () => {\n    try {\n      setLoadingSessions(true);\n      const data = await fetchSessions();\n      setSessions(data);\n    } catch (error) {\n      console.error('Error loading sessions:', error);\n      toast.error('Failed to load active sessions');\n    } finally {\n      setLoadingSessions(false);\n    }\n  };\n\n  const loadApiKeys = async () => {\n    try {\n      setLoadingApiKeys(true);\n      const data = await fetchApiKeys();\n      setApiKeys(data);\n    } catch (error) {\n      console.error('Error loading API keys:', error);\n      toast.error('Failed to load API keys');\n    } finally {\n      setLoadingApiKeys(false);\n    }\n  };\n\n  const updateProfile = async () => {\n    try {\n      setSaving(true);\n      const { error } = await supabase\n        .from('users')\n        .update({\n          name: profileForm.name,\n          phone: profileForm.phone,\n          timezone: profileForm.timezone,\n          language: profileForm.language,\n          updated_at: new Date().toISOString()\n        })\n        .eq('id', user?.id);\n\n      if (error) throw error;\n\n      toast.success('Profile updated successfully');\n      \n      loadProfile();\n    } catch (error) {\n      console.error('Error updating profile:', error);\n      toast.error('Failed to update profile');\n    } finally {\n      setSaving(false);\n    }\n  };\n\n  const updatePassword = async () => {\n    if (passwordForm.newPassword !== passwordForm.confirmPassword) {\n      toast.error('Passwords do not match');\n      return;\n    }\n\n    try {\n      setSaving(true);\n      const { error } = await supabase.auth.updateUser({\n        password: passwordForm.newPassword\n      });\n\n      if (error) throw error;\n\n      toast.success('Password updated successfully');\n\n      setPasswordForm({\n        currentPassword: '',\n        newPassword: '',\n        confirmPassword: ''\n      });\n    } catch (error) {\n      console.error('Error updating password:', error);\n      toast.error('Failed to update password');\n    } finally {\n      setSaving(false);\n    }\n  };\n\n  const enable2FA = async () => {\n    try {\n      setSaving(true);\n      const data = await setupTwoFactor();\n      setTwoFactorQR(data.qrCode);\n    } catch (error) {\n      console.error('Error enabling 2FA:', error);\n      toast.error('Failed to enable 2FA');\n    } finally {\n      setSaving(false);\n    }\n  };\n\n  const verify2FA = async () => {\n    try {\n      setSaving(true);\n      const result = await verifyTwoFactor(verificationCode);\n      setTwoFactorEnabled(true);\n      setTwoFactorQR('');\n      setVerificationCode('');\n\n      toast.success('2FA enabled successfully', undefined, {\n        description: `Backup codes: ${result.backupCodes.join(', ')}`\n      });\n    } catch (error) {\n      console.error('Error verifying 2FA:', error);\n      toast.error('Invalid verification code');\n    } finally {\n      setSaving(false);\n    }\n  };\n\n  const revokeSession = async (sessionId: string) => {\n    try {\n      await revokeSessionApi(sessionId);\n\n      toast.success('Session revoked successfully');\n\n      loadSessions();\n    } catch (error) {\n      console.error('Error revoking session:', error);\n      toast.error('Failed to revoke session');\n    }\n  };\n\n  const revokeAllSessions = async () => {\n    try {\n      const count = await revokeAllSessionsApi();\n      toast.success(`Revoked ${count} sessions`);\n\n      loadSessions();\n    } catch (error) {\n      console.error('Error revoking all sessions:', error);\n      toast.error('Failed to revoke sessions');\n    }\n  };\n\n  const createApiKey = async () => {\n    try {\n      setSaving(true);\n      const expiresDays = parseInt(newApiKeyForm.expiresIn, 10);\n      const expiresAt = expiresDays > 0\n        ? new Date(Date.now() + expiresDays * 24 * 60 * 60 * 1000).toISOString()\n        : undefined;\n\n      const data = await createApiKeyApi({\n        name: newApiKeyForm.name,\n        description: newApiKeyForm.description,\n        scopes: newApiKeyForm.scopes,\n        expiresAt\n      });\n\n      toast.success('API Key Created', undefined, {\n        description: `Store this key securely: ${data.apiKey.key}`\n      });\n\n      setShowCreateApiKey(false);\n      setNewApiKeyForm({\n        name: '',\n        description: '',\n        scopes: [],\n        expiresIn: '90'\n      });\n\n      loadApiKeys();\n    } catch (error) {\n      console.error('Error creating API key:', error);\n      toast.error('Failed to create API key');\n    } finally {\n      setSaving(false);\n    }\n  };\n\n  const revokeApiKey = async (keyId: string) => {\n    try {\n      await revokeApiKeyApi(keyId);\n\n      toast.success('API key revoked successfully');\n\n      loadApiKeys();\n    } catch (error) {\n      console.error('Error revoking API key:', error);\n      toast.error('Failed to revoke API key');\n    }\n  };\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center h-96\">\n        <Loader className=\"h-8 w-8 animate-spin\" />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"container max-w-6xl mx-auto p-6 space-y-6\">\n      <div>\n        <h1 className=\"text-3xl font-bold\">Account Settings</h1>\n        <p className=\"text-muted-foreground mt-2\">\n          Manage your personal account settings, security, and API access\n        </p>\n      </div>\n\n      <Tabs value={activeTab} onValueChange={setActiveTab} className=\"space-y-6\">\n        <TabsList className=\"grid w-full grid-cols-5\">\n          <TabsTrigger value=\"profile\">\n            <User className=\"h-4 w-4 mr-2\" />\n            Profile\n          </TabsTrigger>\n          <TabsTrigger value=\"password\">\n            <Lock className=\"h-4 w-4 mr-2\" />\n            Password\n          </TabsTrigger>\n          <TabsTrigger value=\"2fa\">\n            <Shield className=\"h-4 w-4 mr-2\" />\n            2FA\n          </TabsTrigger>\n          <TabsTrigger value=\"sessions\">\n            <Smartphone className=\"h-4 w-4 mr-2\" />\n            Sessions\n          </TabsTrigger>\n          <TabsTrigger value=\"api-keys\">\n            <Key className=\"h-4 w-4 mr-2\" />\n            API Keys\n          </TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"profile\" className=\"space-y-6\">\n          <Card>\n            <div className=\"p-6\">\n              <h2 className=\"text-xl font-semibold mb-4\">Profile Information</h2>\n              <div className=\"space-y-4\">\n                <div>\n                  <Label htmlFor=\"email\">Email</Label>\n                  <Input\n                    id=\"email\"\n                    type=\"email\"\n                    value={profile?.email || ''}\n                    disabled\n                    className=\"bg-muted\"\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"name\">Full Name</Label>\n                  <Input\n                    id=\"name\"\n                    value={profileForm.name}\n                    onChange={(e) => setProfileForm({ ...profileForm, name: e.target.value })}\n                    placeholder=\"Enter your full name\"\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"phone\">Phone Number</Label>\n                  <Input\n                    id=\"phone\"\n                    type=\"tel\"\n                    value={profileForm.phone}\n                    onChange={(e) => setProfileForm({ ...profileForm, phone: e.target.value })}\n                    placeholder=\"+1 (555) 000-0000\"\n                  />\n                </div>\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <Label htmlFor=\"timezone\">Timezone</Label>\n                    <select\n                      id=\"timezone\"\n                      value={profileForm.timezone}\n                      onChange={(e) => setProfileForm({ ...profileForm, timezone: e.target.value })}\n                      className=\"w-full px-3 py-2 border rounded-md\"\n                    >\n                      <option value=\"UTC\">UTC</option>\n                      <option value=\"America/New_York\">Eastern Time</option>\n                      <option value=\"America/Chicago\">Central Time</option>\n                      <option value=\"America/Denver\">Mountain Time</option>\n                      <option value=\"America/Los_Angeles\">Pacific Time</option>\n                    </select>\n                  </div>\n                  <div>\n                    <Label htmlFor=\"language\">Language</Label>\n                    <select\n                      id=\"language\"\n                      value={profileForm.language}\n                      onChange={(e) => setProfileForm({ ...profileForm, language: e.target.value })}\n                      className=\"w-full px-3 py-2 border rounded-md\"\n                    >\n                      <option value=\"en\">English</option>\n                      <option value=\"es\">Spanish</option>\n                      <option value=\"fr\">French</option>\n                      <option value=\"de\">German</option>\n                      <option value=\"ja\">Japanese</option>\n                    </select>\n                  </div>\n                </div>\n                <Button onClick={updateProfile} disabled={saving}>\n                  {saving ? 'Saving...' : 'Save Changes'}\n                </Button>\n              </div>\n            </div>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"password\" className=\"space-y-6\">\n          <Card>\n            <div className=\"p-6\">\n              <h2 className=\"text-xl font-semibold mb-4\">Change Password</h2>\n              <div className=\"space-y-4\">\n                <div>\n                  <Label htmlFor=\"current-password\">Current Password</Label>\n                  <Input\n                    id=\"current-password\"\n                    type=\"password\"\n                    value={passwordForm.currentPassword}\n                    onChange={(e) => setPasswordForm({ ...passwordForm, currentPassword: e.target.value })}\n                    placeholder=\"Enter current password\"\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"new-password\">New Password</Label>\n                  <Input\n                    id=\"new-password\"\n                    type=\"password\"\n                    value={passwordForm.newPassword}\n                    onChange={(e) => setPasswordForm({ ...passwordForm, newPassword: e.target.value })}\n                    placeholder=\"Enter new password\"\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"confirm-password\">Confirm New Password</Label>\n                  <Input\n                    id=\"confirm-password\"\n                    type=\"password\"\n                    value={passwordForm.confirmPassword}\n                    onChange={(e) => setPasswordForm({ ...passwordForm, confirmPassword: e.target.value })}\n                    placeholder=\"Confirm new password\"\n                  />\n                </div>\n                <Alert>\n                  <AlertCircle className=\"h-4 w-4\" />\n                  <div>\n                    <p className=\"font-semibold\">Password Requirements</p>\n                    <ul className=\"list-disc list-inside text-sm mt-1\">\n                      <li>At least 8 characters long</li>\n                      <li>Contains uppercase and lowercase letters</li>\n                      <li>Contains at least one number</li>\n                    </ul>\n                  </div>\n                </Alert>\n                <Button onClick={updatePassword} disabled={saving}>\n                  {saving ? 'Updating...' : 'Update Password'}\n                </Button>\n              </div>\n            </div>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"2fa\" className=\"space-y-6\">\n          <Card>\n            <div className=\"p-6\">\n              <h2 className=\"text-xl font-semibold mb-4\">Two-Factor Authentication</h2>\n              {twoFactorEnabled ? (\n                <div className=\"space-y-4\">\n                  <Alert>\n                    <Shield className=\"h-4 w-4\" />\n                    <div>\n                      <p className=\"font-semibold\">2FA is enabled</p>\n                      <p className=\"text-sm mt-1\">\n                        Your account is protected with two-factor authentication\n                      </p>\n                    </div>\n                  </Alert>\n                  <Button variant=\"destructive\" onClick={() => setTwoFactorEnabled(false)}>\n                    Disable 2FA\n                  </Button>\n                </div>\n              ) : (\n                <div className=\"space-y-4\">\n                  <p className=\"text-muted-foreground\">\n                    Add an extra layer of security to your account by enabling two-factor authentication\n                  </p>\n                  {twoFactorQR ? (\n                    <div className=\"space-y-4\">\n                      <div className=\"p-4 bg-muted rounded-lg\">\n                        <p className=\"text-sm mb-2\">Scan this QR code with your authenticator app:</p>\n                        <div className=\"bg-white p-4 rounded inline-block\">\n                          {/* QR Code would be displayed here */}\n                          <div className=\"h-32 w-32 bg-gray-200 flex items-center justify-center\">\n                            QR Code\n                          </div>\n                        </div>\n                      </div>\n                      <div>\n                        <Label htmlFor=\"verification-code\">Verification Code</Label>\n                        <Input\n                          id=\"verification-code\"\n                          value={verificationCode}\n                          onChange={(e) => setVerificationCode(e.target.value)}\n                          placeholder=\"Enter 6-digit code\"\n                          maxLength={6}\n                        />\n                      </div>\n                      <div className=\"flex gap-2\">\n                        <Button onClick={verify2FA} disabled={saving}>\n                          {saving ? 'Verifying...' : 'Verify & Enable'}\n                        </Button>\n                        <Button variant=\"outline\" onClick={() => setTwoFactorQR('')}>\n                          Cancel\n                        </Button>\n                      </div>\n                    </div>\n                  ) : (\n                    <Button onClick={enable2FA} disabled={saving}>\n                      {saving ? 'Setting up...' : 'Enable 2FA'}\n                    </Button>\n                  )}\n                </div>\n              )}\n            </div>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"sessions\" className=\"space-y-6\">\n          <Card>\n            <div className=\"p-6\">\n              <div className=\"flex justify-between items-center mb-4\">\n                <h2 className=\"text-xl font-semibold\">Active Sessions</h2>\n                <Button variant=\"destructive\" size=\"sm\" onClick={revokeAllSessions}>\n                  Revoke All Other Sessions\n                </Button>\n              </div>\n              {loadingSessions ? (\n                <div className=\"flex justify-center py-8\">\n                  <Loader className=\"h-6 w-6 animate-spin\" />\n                </div>\n              ) : (\n                <div className=\"space-y-4\">\n                  {sessions.map((session) => (\n                    <div key={session.id} className=\"border rounded-lg p-4\">\n                      <div className=\"flex justify-between items-start\">\n                        <div className=\"space-y-1\">\n                          <div className=\"flex items-center gap-2\">\n                            <Smartphone className=\"h-4 w-4\" />\n                            <span className=\"font-medium\">\n                              {session.deviceInfo?.device || 'Unknown Device'}\n                            </span>\n                            {session.isCurrent && (\n                              <Badge variant=\"success\">Current</Badge>\n                            )}\n                          </div>\n                          <p className=\"text-sm text-muted-foreground\">\n                            {session.userAgent}\n                          </p>\n                          <div className=\"flex items-center gap-4 text-xs text-muted-foreground\">\n                            <span className=\"flex items-center gap-1\">\n                              <Globe className=\"h-3 w-3\" />\n                              {session.ipAddress}\n                            </span>\n                            {session.location && (\n                              <span>\n                                {session.location.city}, {session.location.country}\n                              </span>\n                            )}\n                            <span className=\"flex items-center gap-1\">\n                              <Clock className=\"h-3 w-3\" />\n                              Last active: {new Date(session.lastActivityAt).toLocaleString()}\n                            </span>\n                          </div>\n                        </div>\n                        {!session.isCurrent && (\n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            onClick={() => revokeSession(session.id)}\n                          >\n                            Revoke\n                          </Button>\n                        )}\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              )}\n            </div>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"api-keys\" className=\"space-y-6\">\n          <Card>\n            <div className=\"p-6\">\n              <div className=\"flex justify-between items-center mb-4\">\n                <h2 className=\"text-xl font-semibold\">API Keys</h2>\n                <Button onClick={() => setShowCreateApiKey(true)}>\n                  Create API Key\n                </Button>\n              </div>\n              {loadingApiKeys ? (\n                <div className=\"flex justify-center py-8\">\n                  <Loader className=\"h-6 w-6 animate-spin\" />\n                </div>\n              ) : (\n                <div className=\"space-y-4\">\n                  {apiKeys.length === 0 ? (\n                    <p className=\"text-muted-foreground text-center py-8\">\n                      No API keys created yet\n                    </p>\n                  ) : (\n                    apiKeys.map((apiKey) => (\n                      <div key={apiKey.id} className=\"border rounded-lg p-4\">\n                        <div className=\"flex justify-between items-start\">\n                          <div className=\"space-y-1\">\n                            <div className=\"flex items-center gap-2\">\n                              <span className=\"font-medium\">{apiKey.name}</span>\n                              <Badge variant={apiKey.isActive ? 'success' : 'secondary'}>\n                                {apiKey.isActive ? 'Active' : 'Inactive'}\n                              </Badge>\n                            </div>\n                            {apiKey.description && (\n                              <p className=\"text-sm text-muted-foreground\">\n                                {apiKey.description}\n                              </p>\n                            )}\n                            <div className=\"flex items-center gap-4 text-xs text-muted-foreground\">\n                              <span>Key: {apiKey.keyPrefix}...</span>\n                              {apiKey.lastUsedAt && (\n                                <span>Last used: {new Date(apiKey.lastUsedAt).toLocaleString()}</span>\n                              )}\n                              {apiKey.expiresAt && (\n                                <span>Expires: {new Date(apiKey.expiresAt).toLocaleDateString()}</span>\n                              )}\n                            </div>\n                            {apiKey.scopes.length > 0 && (\n                              <div className=\"flex gap-1 mt-2\">\n                                {apiKey.scopes.map((scope: string) => (\n                                  <Badge key={scope} variant=\"outline\" className=\"text-xs\">\n                                    {scope}\n                                  </Badge>\n                                ))}\n                              </div>\n                            )}\n                          </div>\n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            onClick={() => revokeApiKey(apiKey.id)}\n                          >\n                            Revoke\n                          </Button>\n                        </div>\n                      </div>\n                    ))\n                  )}\n                </div>\n              )}\n            </div>\n          </Card>\n\n          {showCreateApiKey && (\n            <Card>\n              <div className=\"p-6\">\n                <h3 className=\"text-lg font-semibold mb-4\">Create New API Key</h3>\n                <div className=\"space-y-4\">\n                  <div>\n                    <Label htmlFor=\"api-key-name\">Name</Label>\n                    <Input\n                      id=\"api-key-name\"\n                      value={newApiKeyForm.name}\n                      onChange={(e) => setNewApiKeyForm({ ...newApiKeyForm, name: e.target.value })}\n                      placeholder=\"My API Key\"\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"api-key-description\">Description (optional)</Label>\n                    <Input\n                      id=\"api-key-description\"\n                      value={newApiKeyForm.description}\n                      onChange={(e) => setNewApiKeyForm({ ...newApiKeyForm, description: e.target.value })}\n                      placeholder=\"Used for...\"\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"api-key-expires\">Expires In</Label>\n                    <select\n                      id=\"api-key-expires\"\n                      value={newApiKeyForm.expiresIn}\n                      onChange={(e) => setNewApiKeyForm({ ...newApiKeyForm, expiresIn: e.target.value })}\n                      className=\"w-full px-3 py-2 border rounded-md\"\n                    >\n                      <option value=\"30\">30 days</option>\n                      <option value=\"60\">60 days</option>\n                      <option value=\"90\">90 days</option>\n                      <option value=\"180\">180 days</option>\n                      <option value=\"365\">1 year</option>\n                      <option value=\"0\">Never</option>\n                    </select>\n                  </div>\n                  <div className=\"flex gap-2\">\n                    <Button onClick={createApiKey} disabled={saving || !newApiKeyForm.name}>\n                      {saving ? 'Creating...' : 'Create Key'}\n                    </Button>\n                    <Button variant=\"outline\" onClick={() => setShowCreateApiKey(false)}>\n                      Cancel\n                    </Button>\n                  </div>\n                </div>\n              </div>\n            </Card>\n          )}\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ghxstship/apps/web/app/(app)/(shell)/settings/account/drawers/EditAccountDrawer.tsx","messages":[{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Save' is not defined.","line":310,"column":16,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":310,"endColumn":20},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'AlertTriangle' is not defined.","line":323,"column":12,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":323,"endColumn":25},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'EyeOff' is not defined.","line":349,"column":38,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":349,"endColumn":44},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Eye' is not defined.","line":349,"column":71,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":349,"endColumn":74},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'EyeOff' is not defined.","line":378,"column":41,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":378,"endColumn":47},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Eye' is not defined.","line":378,"column":74,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":378,"endColumn":77},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Save' is not defined.","line":407,"column":14,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":407,"endColumn":18},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Copy' is not defined.","line":434,"column":18,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":434,"endColumn":22},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Copy' is not defined.","line":524,"column":16,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":524,"endColumn":20},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'AlertTriangle' is not defined.","line":598,"column":16,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":598,"endColumn":29},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'RefreshCw' is not defined.","line":605,"column":16,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":605,"endColumn":25},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'X' is not defined.","line":711,"column":14,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":711,"endColumn":15}],"suppressedMessages":[],"errorCount":12,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\nimport { User, FileText, Settings, Award, Calendar, TrendingUp, Activity, Clock, Plus, Search, Play, Trash2 } from \"lucide-react\";\nimport { useState, useEffect } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\n// import { z } from 'zod';\nimport {\n  UniversalDrawer,\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n  Input,\n  Textarea,\n  Button,\n  useToastContext,\n  Tabs,\n  TabsContent,\n  TabsList,\n  TabsTrigger,\n  Badge,\n  Alert,\n  AlertDescription,\n} from '@ghxstship/ui';\nimport type { AccountDrawerProps, AccountRecord, ProfileFormData, PasswordFormData } from '../types';\nimport { accountService } from '../lib/account-service';\n\nconst profileFormSchema = z.object({\n  name: z.string().min(1, 'Name is required').max(100, 'Name must be less than 100 characters'),\n  email: z.string().email('Invalid email address'),\n  phone: z.string().optional(),\n  timezone: z.string().optional(),\n  language: z.string().optional(),\n});\n\nconst passwordFormSchema = z.object({\n  current_password: z.string().min(1, 'Current password is required'),\n  new_password: z.string().min(8, 'Password must be at least 8 characters'),\n  confirm_password: z.string().min(1, 'Please confirm your password'),\n}).refine((data) => data.new_password === data.confirm_password, {\n  message: \"Passwords don't match\",\n  path: [\"confirm_password\"],\n});\n\nexport default function EditAccountDrawer({\n  mode,\n  record,\n  isOpen,\n  onClose,\n  onSave,\n  onDelete,\n}: AccountDrawerProps) {\n  const { toast } = useToastContext();\n  const [saving, setSaving] = useState(false);\n  const [deleting, setDeleting] = useState(false);\n  const [activeTab, setActiveTab] = useState('details');\n  const [showPassword, setShowPassword] = useState(false);\n  const [showNewPassword, setShowNewPassword] = useState(false);\n  const [twoFactorQr, setTwoFactorQr] = useState<string | null>(null);\n\n  const profileForm = useForm<ProfileFormData>({\n    resolver: zodResolver(profileFormSchema),\n    defaultValues: {\n      name: '',\n      email: '',\n      phone: '',\n      timezone: '',\n      language: '',\n    },\n  });\n\n  const passwordForm = useForm<PasswordFormData>({\n    resolver: zodResolver(passwordFormSchema),\n    defaultValues: {\n      current_password: '',\n      new_password: '',\n      confirm_password: '',\n    },\n  });\n\n  const isReadOnly = mode === 'view';\n\n  // Load record data when drawer opens\n  useEffect(() => {\n    if (record && isOpen) {\n      if (record.type === 'profile' && record.metadata) {\n        profileForm.reset({\n          name: record.metadata.name || '',\n          email: record.metadata.email || '',\n          phone: record.metadata.phone || '',\n          timezone: record.metadata.timezone || '',\n          language: record.metadata.language || '',\n        });\n      }\n    }\n  }, [record, isOpen, profileForm]);\n\n  const handleProfileSave = async (data: ProfileFormData) => {\n    if (!record || !onSave) return;\n\n    try {\n      setSaving(true);\n      await accountService.updateProfile(data);\n      toast.success('Profile updated successfully');\n      onClose();\n    } catch (error) {\n      console.error('Error updating profile:', error);\n      toast.error('Failed to update profile');\n    } finally {\n      setSaving(false);\n    }\n  };\n\n  const handlePasswordChange = async (data: PasswordFormData) => {\n    try {\n      setSaving(true);\n      await accountService.changePassword(data);\n      toast.success('Password changed successfully');\n      passwordForm.reset();\n    } catch (error) {\n      console.error('Error changing password:', error);\n      toast.error('Failed to change password');\n    } finally {\n      setSaving(false);\n    }\n  };\n\n  const handleRevokeSession = async () => {\n    if (!record || record.type !== 'session') return;\n\n    try {\n      setDeleting(true);\n      await accountService.revokeSession(record.metadata.id);\n      toast.success('Session revoked successfully');\n      onClose();\n    } catch (error) {\n      console.error('Error revoking session:', error);\n      toast.error('Failed to revoke session');\n    } finally {\n      setDeleting(false);\n    }\n  };\n\n  const handleRevokeApiKey = async () => {\n    if (!record || record.type !== 'api_key') return;\n\n    try {\n      setDeleting(true);\n      await accountService.revokeApiKey(record.metadata.id);\n      toast.success('API key revoked successfully');\n      onClose();\n    } catch (error) {\n      console.error('Error revoking API key:', error);\n      toast.error('Failed to revoke API key');\n    } finally {\n      setDeleting(false);\n    }\n  };\n\n  const handleSetupTwoFactor = async () => {\n    try {\n      setSaving(true);\n      const qrCode = await accountService.setupTwoFactor();\n      setTwoFactorQr(qrCode);\n      toast.success('2FA setup initiated');\n    } catch (error) {\n      console.error('Error setting up 2FA:', error);\n      toast.error('Failed to setup 2FA');\n    } finally {\n      setSaving(false);\n    }\n  };\n\n  const handleCopyToClipboard = (text: string) => {\n    navigator.clipboard.writeText(text);\n    toast.success('Copied to clipboard');\n  };\n\n  const handleClose = () => {\n    profileForm.reset();\n    passwordForm.reset();\n    setActiveTab('details');\n    setTwoFactorQr(null);\n    onClose();\n  };\n\n  const getDrawerTitle = () => {\n    if (!record) return 'Account Record';\n    \n    const typeLabels = {\n      profile: 'User Profile',\n      session: 'User Session',\n      api_key: 'API Key',\n      security: 'Security Settings',\n      preference: 'User Preferences',\n    };\n\n    const prefix = mode === 'view' ? 'View' : 'Edit';\n    return `${prefix} ${typeLabels[record.type] || 'Account Record'}`;\n  };\n\n  const getDrawerDescription = () => {\n    if (!record) return 'Manage account record';\n    \n    if (mode === 'view') return `View ${record.type} details and information`;\n    return `Modify ${record.type} settings and configuration`;\n  };\n\n  const renderProfileTab = () => (\n    <Form {...profileForm}>\n      <form onSubmit={profileForm.handleSubmit(handleProfileSave)} className=\"space-y-4\">\n        <FormField\n          control={profileForm.control}\n          name=\"name\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Full Name</FormLabel>\n              <FormControl>\n                <Input \n                  placeholder=\"Enter your full name\"\n                  disabled={isReadOnly}\n                  {...field} \n                />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n\n        <FormField\n          control={profileForm.control}\n          name=\"email\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Email Address</FormLabel>\n              <FormControl>\n                <Input \n                  type=\"email\"\n                  placeholder=\"Enter your email\"\n                  disabled={isReadOnly}\n                  {...field} \n                />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n\n        <FormField\n          control={profileForm.control}\n          name=\"phone\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Phone Number (Optional)</FormLabel>\n              <FormControl>\n                <Input \n                  placeholder=\"Enter your phone number\"\n                  disabled={isReadOnly}\n                  {...field} \n                />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n\n        <div className=\"grid grid-cols-2 gap-4\">\n          <FormField\n            control={profileForm.control}\n            name=\"timezone\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Timezone (Optional)</FormLabel>\n                <FormControl>\n                  <Input \n                    placeholder=\"e.g., America/New_York\"\n                    disabled={isReadOnly}\n                    {...field} \n                  />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n\n          <FormField\n            control={profileForm.control}\n            name=\"language\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Language (Optional)</FormLabel>\n                <FormControl>\n                  <Input \n                    placeholder=\"e.g., en-US\"\n                    disabled={isReadOnly}\n                    {...field} \n                  />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n        </div>\n\n        {!isReadOnly && (\n          <div className=\"flex justify-end pt-4\">\n            <Button type=\"submit\" disabled={saving}>\n              <Save className=\"h-4 w-4 mr-2\" />\n              {saving ? 'Saving...' : 'Save Profile'}\n            </Button>\n          </div>\n        )}\n      </form>\n    </Form>\n  );\n\n  const renderPasswordTab = () => (\n    <Form {...passwordForm}>\n      <form onSubmit={passwordForm.handleSubmit(handlePasswordChange)} className=\"space-y-4\">\n        <Alert>\n          <AlertTriangle className=\"h-4 w-4\" />\n          <AlertDescription>\n            Changing your password will log you out of all other sessions.\n          </AlertDescription>\n        </Alert>\n\n        <FormField\n          control={passwordForm.control}\n          name=\"current_password\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Current Password</FormLabel>\n              <FormControl>\n                <div className=\"relative\">\n                  <Input \n                    type={showPassword ? 'text' : 'password'}\n                    placeholder=\"Enter your current password\"\n                    {...field} \n                  />\n                  <Button\n                    type=\"button\"\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    className=\"absolute right-0 top-0 h-full px-3\"\n                    onClick={() => setShowPassword(!showPassword)}\n                  >\n                    {showPassword ? <EyeOff className=\"h-4 w-4\" /> : <Eye className=\"h-4 w-4\" />}\n                  </Button>\n                </div>\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n\n        <FormField\n          control={passwordForm.control}\n          name=\"new_password\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>New Password</FormLabel>\n              <FormControl>\n                <div className=\"relative\">\n                  <Input \n                    type={showNewPassword ? 'text' : 'password'}\n                    placeholder=\"Enter your new password\"\n                    {...field} \n                  />\n                  <Button\n                    type=\"button\"\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    className=\"absolute right-0 top-0 h-full px-3\"\n                    onClick={() => setShowNewPassword(!showNewPassword)}\n                  >\n                    {showNewPassword ? <EyeOff className=\"h-4 w-4\" /> : <Eye className=\"h-4 w-4\" />}\n                  </Button>\n                </div>\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n\n        <FormField\n          control={passwordForm.control}\n          name=\"confirm_password\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Confirm New Password</FormLabel>\n              <FormControl>\n                <Input \n                  type=\"password\"\n                  placeholder=\"Confirm your new password\"\n                  {...field} \n                />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n\n        <div className=\"flex justify-end pt-4\">\n          <Button type=\"submit\" disabled={saving}>\n            <Save className=\"h-4 w-4 mr-2\" />\n            {saving ? 'Changing...' : 'Change Password'}\n          </Button>\n        </div>\n      </form>\n    </Form>\n  );\n\n  const renderSessionDetails = () => {\n    if (!record || record.type !== 'session') return null;\n\n    const session = record.metadata;\n    \n    return (\n      <div className=\"space-y-4\">\n        <div className=\"grid grid-cols-2 gap-4\">\n          <div>\n            <label className=\"text-sm font-medium\">IP Address</label>\n            <div className=\"flex items-center gap-2 mt-1\">\n              <code className=\"text-sm bg-muted px-2 py-1 rounded flex-1\">\n                {session.ip_address}\n              </code>\n              <Button\n                size=\"sm\"\n                variant=\"ghost\"\n                onClick={() => handleCopyToClipboard(session.ip_address)}\n              >\n                <Copy className=\"h-4 w-4\" />\n              </Button>\n            </div>\n          </div>\n          <div>\n            <label className=\"text-sm font-medium\">Status</label>\n            <div className=\"mt-1\">\n              <Badge variant={session.is_current ? 'default' : 'secondary'}>\n                {session.is_current ? 'Current Session' : 'Other Session'}\n              </Badge>\n            </div>\n          </div>\n        </div>\n\n        <div>\n          <label className=\"text-sm font-medium\">User Agent</label>\n          <div className=\"mt-1\">\n            <Textarea\n              value={session.user_agent}\n              readOnly\n              className=\"text-sm font-mono\"\n              rows={3}\n            />\n          </div>\n        </div>\n\n        <div className=\"grid grid-cols-2 gap-4\">\n          <div>\n            <label className=\"text-sm font-medium\">Created</label>\n            <div className=\"text-sm text-muted-foreground mt-1\">\n              {new Date(session.created_at).toLocaleString()}\n            </div>\n          </div>\n          <div>\n            <label className=\"text-sm font-medium\">Last Active</label>\n            <div className=\"text-sm text-muted-foreground mt-1\">\n              {new Date(session.last_active).toLocaleString()}\n            </div>\n          </div>\n        </div>\n\n        {!session.is_current && !isReadOnly && (\n          <div className=\"pt-4 border-t\">\n            <Button\n              variant=\"destructive\"\n              onClick={handleRevokeSession}\n              disabled={deleting}\n            >\n              <Trash2 className=\"h-4 w-4 mr-2\" />\n              {deleting ? 'Revoking...' : 'Revoke Session'}\n            </Button>\n          </div>\n        )}\n      </div>\n    );\n  };\n\n  const renderApiKeyDetails = () => {\n    if (!record || record.type !== 'api_key') return null;\n\n    const apiKey = record.metadata;\n    \n    return (\n      <div className=\"space-y-4\">\n        <div className=\"grid grid-cols-2 gap-4\">\n          <div>\n            <label className=\"text-sm font-medium\">Key Name</label>\n            <div className=\"text-sm mt-1\">{apiKey.name}</div>\n          </div>\n          <div>\n            <label className=\"text-sm font-medium\">Status</label>\n            <div className=\"mt-1\">\n              <Badge variant={apiKey.is_active ? 'default' : 'destructive'}>\n                {apiKey.is_active ? 'Active' : 'Revoked'}\n              </Badge>\n            </div>\n          </div>\n        </div>\n\n        <div>\n          <label className=\"text-sm font-medium\">Key Prefix</label>\n          <div className=\"flex items-center gap-2 mt-1\">\n            <code className=\"text-sm bg-muted px-2 py-1 rounded flex-1\">\n              {apiKey.key_prefix}***\n            </code>\n            <Button\n              size=\"sm\"\n              variant=\"ghost\"\n              onClick={() => handleCopyToClipboard(apiKey.key_prefix)}\n            >\n              <Copy className=\"h-4 w-4\" />\n            </Button>\n          </div>\n        </div>\n\n        <div>\n          <label className=\"text-sm font-medium\">Permissions</label>\n          <div className=\"flex flex-wrap gap-1 mt-1\">\n            {apiKey.permissions.map((permission: string) => (\n              <Badge key={permission} variant=\"outline\" className=\"text-xs\">\n                {permission}\n              </Badge>\n            ))}\n          </div>\n        </div>\n\n        <div className=\"grid grid-cols-2 gap-4\">\n          <div>\n            <label className=\"text-sm font-medium\">Created</label>\n            <div className=\"text-sm text-muted-foreground mt-1\">\n              {new Date(apiKey.created_at).toLocaleString()}\n            </div>\n          </div>\n          <div>\n            <label className=\"text-sm font-medium\">Last Used</label>\n            <div className=\"text-sm text-muted-foreground mt-1\">\n              {apiKey.last_used ? new Date(apiKey.last_used).toLocaleString() : 'Never'}\n            </div>\n          </div>\n        </div>\n\n        {apiKey.is_active && !isReadOnly && (\n          <div className=\"pt-4 border-t\">\n            <Button\n              variant=\"destructive\"\n              onClick={handleRevokeApiKey}\n              disabled={deleting}\n            >\n              <Trash2 className=\"h-4 w-4 mr-2\" />\n              {deleting ? 'Revoking...' : 'Revoke API Key'}\n            </Button>\n          </div>\n        )}\n      </div>\n    );\n  };\n\n  const renderSecurityDetails = () => {\n    if (!record || record.type !== 'security') return null;\n\n    const twoFactor = record.metadata;\n    \n    return (\n      <div className=\"space-y-4\">\n        <div className=\"grid grid-cols-2 gap-4\">\n          <div>\n            <label className=\"text-sm font-medium\">Status</label>\n            <div className=\"mt-1\">\n              <Badge variant={twoFactor.is_enabled ? 'default' : 'secondary'}>\n                {twoFactor.is_enabled ? 'Enabled' : 'Disabled'}\n              </Badge>\n            </div>\n          </div>\n          <div>\n            <label className=\"text-sm font-medium\">Backup Codes</label>\n            <div className=\"text-sm text-muted-foreground mt-1\">\n              {twoFactor.backup_codes?.length || 0} codes available\n            </div>\n          </div>\n        </div>\n\n        {!twoFactor.is_enabled && !isReadOnly && (\n          <div className=\"space-y-4\">\n            <Alert>\n              <AlertTriangle className=\"h-4 w-4\" />\n              <AlertDescription>\n                Two-factor authentication is not enabled. Enable it to secure your account.\n              </AlertDescription>\n            </Alert>\n\n            <Button onClick={handleSetupTwoFactor} disabled={saving}>\n              <RefreshCw className=\"h-4 w-4 mr-2\" />\n              {saving ? 'Setting up...' : 'Setup Two-Factor Authentication'}\n            </Button>\n\n            {twoFactorQr && (\n              <div className=\"p-4 border rounded-lg\">\n                <p className=\"text-sm mb-2\">Scan this QR code with your authenticator app:</p>\n                <code className=\"text-xs bg-muted p-2 rounded block\">\n                  {twoFactorQr}\n                </code>\n              </div>\n            )}\n          </div>\n        )}\n\n        {twoFactor.is_enabled && (\n          <div className=\"grid grid-cols-2 gap-4\">\n            <div>\n              <label className=\"text-sm font-medium\">Created</label>\n              <div className=\"text-sm text-muted-foreground mt-1\">\n                {new Date(twoFactor.created_at).toLocaleString()}\n              </div>\n            </div>\n            <div>\n              <label className=\"text-sm font-medium\">Last Used</label>\n              <div className=\"text-sm text-muted-foreground mt-1\">\n                {twoFactor.last_used ? new Date(twoFactor.last_used).toLocaleString() : 'Never'}\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n    );\n  };\n\n  return (\n    <UniversalDrawer\n      isOpen={isOpen}\n      onClose={handleClose}\n      title={getDrawerTitle()}\n      description={getDrawerDescription()}\n    >\n      <div className=\"space-y-6\">\n        {record && (\n          <Tabs value={activeTab} onValueChange={setActiveTab}>\n            <TabsList className=\"grid w-full grid-cols-3\">\n              <TabsTrigger value=\"details\">Details</TabsTrigger>\n              {record.type === 'profile' && (\n                <TabsTrigger value=\"password\">Password</TabsTrigger>\n              )}\n              <TabsTrigger value=\"metadata\">Metadata</TabsTrigger>\n            </TabsList>\n\n            <TabsContent value=\"details\" className=\"space-y-4\">\n              {record.type === 'profile' && renderProfileTab()}\n              {record.type === 'session' && renderSessionDetails()}\n              {record.type === 'api_key' && renderApiKeyDetails()}\n              {record.type === 'security' && renderSecurityDetails()}\n            </TabsContent>\n\n            {record.type === 'profile' && (\n              <TabsContent value=\"password\" className=\"space-y-4\">\n                {renderPasswordTab()}\n              </TabsContent>\n            )}\n\n            <TabsContent value=\"metadata\" className=\"space-y-4\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <label className=\"text-sm font-medium\">Record ID</label>\n                  <div className=\"text-sm text-muted-foreground font-mono mt-1\">\n                    {record.id}\n                  </div>\n                </div>\n                <div>\n                  <label className=\"text-sm font-medium\">Type</label>\n                  <div className=\"mt-1\">\n                    <Badge variant=\"outline\">{record.type}</Badge>\n                  </div>\n                </div>\n              </div>\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <label className=\"text-sm font-medium\">Created</label>\n                  <div className=\"text-sm text-muted-foreground mt-1\">\n                    {new Date(record.created_at).toLocaleString()}\n                  </div>\n                </div>\n                <div>\n                  <label className=\"text-sm font-medium\">Last Updated</label>\n                  <div className=\"text-sm text-muted-foreground mt-1\">\n                    {new Date(record.updated_at).toLocaleString()}\n                  </div>\n                </div>\n              </div>\n            </TabsContent>\n          </Tabs>\n        )}\n\n        <div className=\"flex justify-end gap-3 pt-4 border-t\">\n          <Button\n            type=\"button\"\n            variant=\"outline\"\n            onClick={handleClose}\n            disabled={saving || deleting}\n          >\n            <X className=\"h-4 w-4 mr-2\" />\n            {mode === 'view' ? 'Close' : 'Cancel'}\n          </Button>\n        </div>\n      </div>\n    </UniversalDrawer>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ghxstship/apps/web/app/(app)/(shell)/settings/automations/AutomationsSettingsClient.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadAutomationRules'. Either include it or remove the dependency array.","line":68,"column":6,"nodeType":"ArrayExpression","endLine":68,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [loadAutomationRules]","fix":{"range":[1884,1886],"text":"[loadAutomationRules]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\nimport { User, FileText, Settings, Award, Calendar, TrendingUp, Activity, Clock, Plus, Search, Play, Trash2 } from \"lucide-react\";\nimport { useEffect, useMemo, useState } from 'react';\nimport {\n  Card,\n  Button,\n  Badge,\n  Loader,\n  Textarea,\n  Input,\n  useToastContext,\n} from '@ghxstship/ui';\nimport {\n  fetchAutomationRules,\n  createAutomationRule,\n  updateAutomationRule,\n  deleteAutomationRule,\n  type AutomationRuleSummary,\n  type AutomationAction,\n  type AutomationCondition,\n} from '@/lib/services/settingsAutomationsClient';\n\ninterface AutomationFormState {\n  name: string;\n  description: string;\n  triggerType: string;\n  triggerConfig: string;\n  conditions: string;\n  actions: string;\n  isActive: boolean;\n}\n\nconst emptyForm: AutomationFormState = {\n  name: '',\n  description: '',\n  triggerType: '',\n  triggerConfig: '{\\n  \"event\": \"\"\\n}',\n  conditions: '[]',\n  actions: '[\\n  {\\n    \"type\": \"\",\\n    \"config\": {},\\n    \"order\": 1\\n  }\\n]',\n  isActive: true,\n};\n\nfunction parseJsonOrThrow<T>(value: string, label: string): T {\n  try {\n    return JSON.parse(value) as T;\n  } catch (error) {\n    throw new Error(`Invalid ${label}. Please provide valid JSON.`);\n  }\n}\n\nfunction formatJson(value: unknown): string {\n  return JSON.stringify(value, null, 2);\n}\n\nexport default function AutomationsSettingsClient() {\n  const { toast } = useToastContext();\n  const [automationRules, setAutomationRules] = useState<AutomationRuleSummary[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [saving, setSaving] = useState(false);\n  const [showForm, setShowForm] = useState(false);\n  const [editingRuleId, setEditingRuleId] = useState<string | null>(null);\n  const [form, setForm] = useState<AutomationFormState>(emptyForm);\n\n  const isEditing = useMemo(() => editingRuleId !== null, [editingRuleId]);\n\n  useEffect(() => {\n    void loadAutomationRules();\n  }, []);\n\n  const loadAutomationRules = async () => {\n    try {\n      setLoading(true);\n      const rules = await fetchAutomationRules();\n      setAutomationRules(rules);\n    } catch (error) {\n      console.error('Error loading automation rules:', error);\n      toast.error('Failed to load automation rules');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const resetForm = () => {\n    setForm(emptyForm);\n    setEditingRuleId(null);\n  };\n\n  const handleCreateNew = () => {\n    resetForm();\n    setShowForm(true);\n  };\n\n  const handleEditRule = (rule: AutomationRuleSummary) => {\n    setForm({\n      name: rule.name,\n      description: rule.description ?? '',\n      triggerType: rule.triggerType,\n      triggerConfig: formatJson(rule.triggerConfig),\n      conditions: formatJson(rule.conditions ?? []),\n      actions: formatJson(rule.actions),\n      isActive: rule.isActive,\n    });\n    setEditingRuleId(rule.id);\n    setShowForm(true);\n  };\n\n  const handleDeleteRule = async (rule: AutomationRuleSummary) => {\n    const confirmed = window.confirm(`Delete automation rule \"${rule.name}\"?`);\n    if (!confirmed) return;\n\n    try {\n      await deleteAutomationRule(rule.id);\n      toast.success('Automation rule deleted');\n      void loadAutomationRules();\n    } catch (error) {\n      console.error('Error deleting automation rule:', error);\n      toast.error('Failed to delete automation rule');\n    }\n  };\n\n  const handleToggleActive = async (rule: AutomationRuleSummary) => {\n    try {\n      await updateAutomationRule(rule.id, { isActive: !rule.isActive });\n      toast.success(`Automation ${rule.isActive ? 'paused' : 'activated'}`);\n      void loadAutomationRules();\n    } catch (error) {\n      console.error('Error toggling automation rule:', error);\n      toast.error('Failed to update automation status');\n    }\n  };\n\n  const handleSubmit = async () => {\n    try {\n      setSaving(true);\n\n      if (!form.name.trim()) {\n        throw new Error('Name is required.');\n      }\n      if (!form.triggerType.trim()) {\n        throw new Error('Trigger type is required.');\n      }\n\n      const triggerConfig = parseJsonOrThrow<Record<string, unknown>>(form.triggerConfig, 'trigger configuration');\n      const actions = parseJsonOrThrow<AutomationAction[]>(form.actions, 'actions');\n      const conditions = form.conditions.trim()\n        ? parseJsonOrThrow<AutomationCondition[]>(form.conditions, 'conditions')\n        : [];\n\n      if (!Array.isArray(actions) || actions.length === 0) {\n        throw new Error('At least one action is required.');\n      }\n\n      const payload = {\n        name: form.name.trim(),\n        description: form.description.trim() || undefined,\n        triggerType: form.triggerType.trim(),\n        triggerConfig,\n        conditions,\n        actions,\n        isActive: form.isActive,\n      };\n\n      if (isEditing && editingRuleId) {\n        await updateAutomationRule(editingRuleId, payload);\n        toast.success('Automation rule updated');\n      } else {\n        await createAutomationRule(payload);\n        toast.success('Automation rule created');\n      }\n\n      resetForm();\n      setShowForm(false);\n      void loadAutomationRules();\n    } catch (error) {\n      console.error('Error saving automation rule:', error);\n      toast.error(error instanceof Error ? error.message : 'Failed to save automation rule');\n    } finally {\n      setSaving(false);\n    }\n  };\n\n  const renderForm = () => (\n    <Card>\n      <div className=\"p-6 space-y-4\">\n        <div className=\"flex items-center justify-between\">\n          <h2 className=\"text-xl font-semibold\">\n            {isEditing ? 'Edit Automation Rule' : 'Create Automation Rule'}\n          </h2>\n          <div className=\"flex gap-2\">\n            <Button variant=\"outline\" onClick={() => { resetForm(); setShowForm(false); }} disabled={saving}>\n              Cancel\n            </Button>\n            <Button onClick={handleSubmit} disabled={saving}>\n              {saving ? 'Saving...' : isEditing ? 'Update Rule' : 'Create Rule'}\n            </Button>\n          </div>\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n          <div className=\"space-y-2\">\n            <label className=\"text-sm font-medium\">Name</label>\n            <Input\n              value={form.name}\n              onChange={(event) => setForm((prev) => ({ ...prev, name: event.target.value }))}\n              placeholder=\"Automation name\"\n            />\n          </div>\n          <div className=\"space-y-2\">\n            <label className=\"text-sm font-medium\">Trigger Type</label>\n            <Input\n              value={form.triggerType}\n              onChange={(event) => setForm((prev) => ({ ...prev, triggerType: event.target.value }))}\n              placeholder=\"e.g. lead.created\"\n            />\n          </div>\n        </div>\n\n        <div className=\"space-y-2\">\n          <label className=\"text-sm font-medium\">Description</label>\n          <Textarea\n            value={form.description}\n            onChange={(event) => setForm((prev) => ({ ...prev, description: event.target.value }))}\n            placeholder=\"Optional description\"\n            rows={2}\n          />\n        </div>\n\n        <div className=\"space-y-2\">\n          <label className=\"text-sm font-medium\">Trigger Configuration (JSON)</label>\n          <Textarea\n            value={form.triggerConfig}\n            onChange={(event) => setForm((prev) => ({ ...prev, triggerConfig: event.target.value }))}\n            rows={6}\n          />\n        </div>\n\n        <div className=\"space-y-2\">\n          <label className=\"text-sm font-medium\">Conditions (JSON array)</label>\n          <Textarea\n            value={form.conditions}\n            onChange={(event) => setForm((prev) => ({ ...prev, conditions: event.target.value }))}\n            rows={6}\n            placeholder=\"[]\"\n          />\n        </div>\n\n        <div className=\"space-y-2\">\n          <label className=\"text-sm font-medium\">Actions (JSON array)</label>\n          <Textarea\n            value={form.actions}\n            onChange={(event) => setForm((prev) => ({ ...prev, actions: event.target.value }))}\n            rows={6}\n          />\n        </div>\n\n        <div className=\"flex items-center justify-between\">\n          <div className=\"space-y-1\">\n            <p className=\"text-sm font-medium\">Status</p>\n            <p className=\"text-xs text-muted-foreground\">\n              Active automations will run automatically when triggers are satisfied.\n            </p>\n          </div>\n          <Button\n            variant={form.isActive ? 'success' : 'outline'}\n            onClick={() => setForm((prev) => ({ ...prev, isActive: !prev.isActive }))}\n            type=\"button\"\n          >\n            {form.isActive ? 'Active' : 'Inactive'}\n          </Button>\n        </div>\n      </div>\n    </Card>\n  );\n\n  const renderRule = (rule: AutomationRuleSummary) => (\n    <Card key={rule.id}>\n      <div className=\"p-6 space-y-4\">\n        <div className=\"flex flex-wrap items-start justify-between gap-4\">\n          <div>\n            <div className=\"flex items-center gap-3\">\n              <h3 className=\"text-lg font-semibold\">{rule.name}</h3>\n              <Badge variant={rule.isActive ? 'success' : 'secondary'}>\n                {rule.isActive ? 'Active' : 'Paused'}\n              </Badge>\n            </div>\n            {rule.description && (\n              <p className=\"text-sm text-muted-foreground mt-1\">{rule.description}</p>\n            )}\n          </div>\n          <div className=\"flex gap-2\">\n            <Button variant=\"outline\" size=\"sm\" onClick={() => handleToggleActive(rule)}>\n              {rule.isActive ? 'Pause' : 'Activate'}\n            </Button>\n            <Button variant=\"outline\" size=\"sm\" onClick={() => handleEditRule(rule)}>\n              Edit\n            </Button>\n            <Button variant=\"destructive\" size=\"sm\" onClick={() => handleDeleteRule(rule)}>\n              Delete\n            </Button>\n          </div>\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 text-sm\">\n          <div className=\"space-y-3\">\n            <div>\n              <p className=\"font-medium text-muted-foreground\">Trigger</p>\n              <p className=\"mt-1\">Type: <span className=\"font-mono\">{rule.triggerType}</span></p>\n              <pre className=\"mt-2 bg-muted/50 rounded-md p-3 text-xs overflow-x-auto\">\n                {formatJson(rule.triggerConfig)}\n              </pre>\n            </div>\n\n            <div>\n              <p className=\"font-medium text-muted-foreground\">Conditions</p>\n              {rule.conditions && rule.conditions.length > 0 ? (\n                <pre className=\"mt-2 bg-muted/50 rounded-md p-3 text-xs overflow-x-auto\">\n                  {formatJson(rule.conditions)}\n                </pre>\n              ) : (\n                <p className=\"mt-1 text-muted-foreground\">No additional conditions</p>\n              )}\n            </div>\n          </div>\n          <div className=\"space-y-3\">\n            <div>\n              <p className=\"font-medium text-muted-foreground\">Actions</p>\n              <pre className=\"mt-2 bg-muted/50 rounded-md p-3 text-xs overflow-x-auto\">\n                {formatJson(rule.actions)}\n              </pre>\n            </div>\n            <div className=\"flex items-center gap-4 text-xs text-muted-foreground\">\n              <span>Runs: {rule.runCount ?? 0}</span>\n              {rule.lastRunAt && (\n                <span>Last run: {new Date(rule.lastRunAt).toLocaleString()}</span>\n              )}\n              <span>Created: {new Date(rule.createdAt).toLocaleString()}</span>\n              {rule.updatedAt && (\n                <span>Updated: {new Date(rule.updatedAt).toLocaleString()}</span>\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </Card>\n  );\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex flex-wrap items-center justify-between gap-3\">\n        <div>\n          <h1 className=\"text-3xl font-bold\">Automations</h1>\n          <p className=\"text-muted-foreground mt-1\">\n            Build rules that react to platform events and orchestrate downstream actions.\n          </p>\n        </div>\n        <Button onClick={handleCreateNew}>\n          Create Automation\n        </Button>\n      </div>\n\n      {showForm && renderForm()}\n\n      <Card>\n        <div className=\"p-6\">\n          {loading ? (\n            <div className=\"flex items-center justify-center h-48\">\n              <Loader className=\"h-8 w-8 animate-spin\" />\n            </div>\n          ) : automationRules.length === 0 ? (\n            <div className=\"py-16 text-center space-y-3\">\n              <p className=\"text-lg font-medium\">No automation rules yet</p>\n              <p className=\"text-sm text-muted-foreground\">\n                Automations will appear here once you create them.\n              </p>\n              <Button variant=\"outline\" onClick={handleCreateNew}>\n                Create your first rule\n              </Button>\n            </div>\n          ) : (\n            <div className=\"space-y-4\">\n              {automationRules.map(renderRule)}\n            </div>\n          )}\n        </div>\n      </Card>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ghxstship/apps/web/app/(app)/(shell)/settings/billing/BillingClient.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useMemo has a missing dependency: 'handleExport'. Either include it or remove the dependency array.","line":200,"column":7,"nodeType":"ArrayExpression","endLine":200,"endColumn":72,"suggestions":[{"desc":"Update the dependencies array to be: [currentView, records, searchParams, loadRecords, loadStatistics, handleExport]","fix":{"range":[4953,5018],"text":"[currentView, records, searchParams, loadRecords, loadStatistics, handleExport]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { CreditCard, FileText, DollarSign, Package, RefreshCw, Download, Settings, TrendingUp } from \"lucide-react\";\nimport { useState, useEffect, useCallback, useMemo } from 'react';\nimport {\n  DataViewProvider,\n  StateManagerProvider,\n  Button,\n  useToastContext,\n  Tabs,\n  TabsContent,\n  TabsList,\n  TabsTrigger,\n  Card,\n  CardContent,\n  Badge,\n} from '@ghxstship/ui';\nimport type { \n  BillingRecord, \n  BillingViewConfig, \n  BillingFieldConfig,\n  BillingStatistics,\n  BillingSearchParams,\n  BillingClientProps,\n} from './types';\nimport { billingService } from './lib/billing-service';\n\n// Field configuration for ATLVS DataViews\nconst fieldConfig: BillingFieldConfig[] = [\n  {\n    key: 'id',\n    label: 'ID',\n    type: 'text',\n    width: 100,\n    sortable: true,\n    filterable: false\n  },\n  {\n    key: 'name',\n    label: 'Name',\n    type: 'text',\n    width: 200,\n    sortable: true,\n    filterable: true,\n    required: true\n  },\n  {\n    key: 'type',\n    label: 'Type',\n    type: 'select',\n    width: 120,\n    sortable: true,\n    filterable: true,\n    options: [\n      { value: 'subscription', label: 'Subscription' },\n      { value: 'invoice', label: 'Invoice' },\n      { value: 'payment', label: 'Payment' },\n      { value: 'plan', label: 'Plan' }\n    ]\n  },\n  {\n    key: 'amount',\n    label: 'Amount',\n    type: 'text',\n    width: 120,\n    sortable: true,\n    filterable: true\n  },\n  {\n    key: 'status',\n    label: 'Status',\n    type: 'select',\n    width: 100,\n    sortable: true,\n    filterable: true,\n    options: [\n      { value: 'active', label: 'Active' },\n      { value: 'paid', label: 'Paid' },\n      { value: 'open', label: 'Open' },\n      { value: 'current', label: 'Current' },\n      { value: 'available', label: 'Available' }\n    ]\n  },\n  {\n    key: 'description',\n    label: 'Description',\n    type: 'textarea',\n    width: 300,\n    sortable: false,\n    filterable: true\n  },\n  {\n    key: 'category',\n    label: 'Category',\n    type: 'select',\n    width: 120,\n    sortable: true,\n    filterable: true,\n    options: [\n      { value: 'subscriptions', label: 'Subscriptions' },\n      { value: 'invoices', label: 'Invoices' },\n      { value: 'payments', label: 'Payments' },\n      { value: 'plans', label: 'Plans' }\n    ]\n  },\n  {\n    key: 'created_at',\n    label: 'Created',\n    type: 'date',\n    width: 150,\n    sortable: true,\n    filterable: true\n  },\n  {\n    key: 'updated_at',\n    label: 'Updated',\n    type: 'date',\n    width: 150,\n    sortable: true,\n    filterable: true\n  }\n];\n\nexport default function BillingClient({ userId, orgId }: BillingClientProps) {\n  const { toast } = useToastContext();\n  \n  // State management\n  const [records, setRecords] = useState<BillingRecord[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [selectedRecords, setSelectedRecords] = useState<string[]>([]);\n  const [statistics, setStatistics] = useState<BillingStatistics | null>(null);\n  \n  // View state\n  const [currentView, setCurrentView] = useState<'grid' | 'list'>('grid');\n  const [searchParams, setSearchParams] = useState<BillingSearchParams>({});\n  const [activeTab, setActiveTab] = useState('overview');\n\n  // Load billing records\n  const loadRecords = useCallback(async (params?: BillingSearchParams) => {\n    try {\n      setLoading(true);\n      setError(null);\n      const data = await billingService.getBillingRecords(params);\n      setRecords(data);\n    } catch (err) {\n      const message = err instanceof Error ? err.message : 'Failed to load billing records';\n      setError(message);\n      toast.error(message);\n    } finally {\n      setLoading(false);\n    }\n  }, [toast]);\n\n  // Load statistics\n  const loadStatistics = useCallback(async () => {\n    try {\n      const stats = await billingService.getStatistics();\n      setStatistics(stats);\n    } catch (err) {\n      console.error('Failed to load statistics:', err);\n    }\n  }, []);\n\n  // Initial data load\n  useEffect(() => {\n    loadRecords();\n    loadStatistics();\n  }, [loadRecords, loadStatistics]);\n\n  // ATLVS DataViews configuration\n  const dataViewConfig: BillingViewConfig = useMemo(() => ({\n    id: 'billing',\n    name: 'Billing Management',\n    viewType: currentView,\n    defaultView: 'grid',\n    fields: fieldConfig,\n    data: records,\n    onSearch: async (query: string) => {\n      const params = { ...searchParams, query };\n      setSearchParams(params);\n      await loadRecords(params);\n    },\n    onFilter: async (filters: unknown) => {\n      const params = { ...searchParams, ...filters };\n      setSearchParams(params);\n      await loadRecords(params);\n    },\n    onSort: async (sorts: unknown) => {\n      console.log('Sort records:', sorts);\n    },\n    onRefresh: async () => {\n      await loadRecords(searchParams);\n      await loadStatistics();\n      return records;\n    },\n    onExport: (data: any, format: unknown) => {\n      handleExport(format);\n    },\n  }), [currentView, records, searchParams, loadRecords, loadStatistics]);\n\n  // Event handlers\n  const handleExport = async (format: 'csv' | 'json') => {\n    try {\n      const blob = await billingService.exportRecords({\n        format,\n        includeMetadata: true,\n      });\n\n      const url = URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.href = url;\n      a.download = `billing-records.${format}`;\n      document.body.appendChild(a);\n      a.click();\n      document.body.removeChild(a);\n      URL.revokeObjectURL(url);\n\n      toast.success(`Records exported as ${format.toUpperCase()}`);\n    } catch (err) {\n      const message = err instanceof Error ? err.message : 'Failed to export records';\n      toast.error(message);\n    }\n  };\n\n  const handleRefresh = async () => {\n    await loadRecords(searchParams);\n    await loadStatistics();\n  };\n\n  // View switcher component\n  const ViewSwitcher = () => (\n    <div className=\"flex items-center gap-2\">\n      <Button\n        variant={currentView === 'grid' ? 'default' : 'outline'}\n        size=\"sm\"\n        onClick={() => setCurrentView('grid')}\n      >\n        Grid\n      </Button>\n      <Button\n        variant={currentView === 'list' ? 'default' : 'outline'}\n        size=\"sm\"\n        onClick={() => setCurrentView('list')}\n      >\n        List\n      </Button>\n    </div>\n  );\n\n  // Simple grid view for billing\n  const renderBillingGrid = () => {\n    if (loading) {\n      return (\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n          {[...Array(6)].map((_, i) => (\n            <Card key={i} className=\"animate-pulse\">\n              <CardContent className=\"p-6\">\n                <div className=\"h-4 bg-muted rounded w-3/4 mb-2\"></div>\n                <div className=\"h-3 bg-muted rounded w-1/2\"></div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      );\n    }\n\n    const subscriptionRecords = records.filter(r => r.type === 'subscription');\n    const invoiceRecords = records.filter(r => r.type === 'invoice');\n    const paymentRecords = records.filter(r => r.type === 'payment');\n    const planRecords = records.filter(r => r.type === 'plan');\n\n    return (\n      <div className=\"space-y-6\">\n        {/* Current Subscription */}\n        {subscriptionRecords.length > 0 && (\n          <div>\n            <h3 className=\"text-lg font-semibold mb-4\">Current Subscription</h3>\n            <div className=\"grid grid-cols-1 gap-4\">\n              {subscriptionRecords.map((record) => (\n                <Card key={record.id} className=\"border-2 border-primary\">\n                  <CardContent className=\"p-6\">\n                    <div className=\"flex items-start justify-between mb-3\">\n                      <div>\n                        <h4 className=\"font-medium text-lg\">{record.name}</h4>\n                        <p className=\"text-sm text-muted-foreground\">{record.description}</p>\n                      </div>\n                      <div className=\"text-right\">\n                        <div className=\"text-2xl font-bold\">{record.amount}</div>\n                        <Badge variant=\"default\">{record.status}</Badge>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          </div>\n        )}\n\n        {/* Recent Invoices */}\n        {invoiceRecords.length > 0 && (\n          <div>\n            <h3 className=\"text-lg font-semibold mb-4\">Recent Invoices ({invoiceRecords.length})</h3>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              {invoiceRecords.slice(0, 4).map((record) => (\n                <Card key={record.id} className=\"hover:shadow-md transition-shadow\">\n                  <CardContent className=\"p-6\">\n                    <div className=\"flex items-start justify-between mb-3\">\n                      <div>\n                        <h4 className=\"font-medium\">{record.name}</h4>\n                        <p className=\"text-sm text-muted-foreground\">{record.description}</p>\n                      </div>\n                      <div className=\"text-right\">\n                        <div className=\"font-bold\">{record.amount}</div>\n                        <Badge variant={record.status === 'paid' ? 'default' : 'destructive'}>\n                          {record.status}\n                        </Badge>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          </div>\n        )}\n\n        {/* Payment Methods */}\n        {paymentRecords.length > 0 && (\n          <div>\n            <h3 className=\"text-lg font-semibold mb-4\">Payment Methods ({paymentRecords.length})</h3>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n              {paymentRecords.map((record) => (\n                <Card key={record.id} className=\"hover:shadow-md transition-shadow\">\n                  <CardContent className=\"p-6\">\n                    <div className=\"flex items-center gap-3 mb-3\">\n                      <CreditCard className=\"h-8 w-8 text-muted-foreground\" />\n                      <div>\n                        <h4 className=\"font-medium\">{record.name}</h4>\n                        <p className=\"text-sm text-muted-foreground\">{record.description}</p>\n                      </div>\n                    </div>\n                    <Badge variant={record.amount === 'Default' ? 'default' : 'outline'}>\n                      {record.amount}\n                    </Badge>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          </div>\n        )}\n\n        {/* Available Plans */}\n        {planRecords.length > 0 && (\n          <div>\n            <h3 className=\"text-lg font-semibold mb-4\">Available Plans ({planRecords.length})</h3>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n              {planRecords.map((record) => (\n                <Card key={record.id} className={`hover:shadow-md transition-shadow ${\n                  record.status === 'current' ? 'border-2 border-primary' : ''\n                }`}>\n                  <CardContent className=\"p-6\">\n                    <div className=\"text-center mb-4\">\n                      <h4 className=\"font-medium text-lg\">{record.name}</h4>\n                      <div className=\"text-2xl font-bold mt-2\">{record.amount}</div>\n                    </div>\n                    <p className=\"text-sm text-muted-foreground text-center mb-3\">\n                      {record.description}\n                    </p>\n                    <Badge \n                      variant={record.status === 'current' ? 'default' : 'outline'}\n                      className=\"w-full justify-center\"\n                    >\n                      {record.status === 'current' ? 'Current Plan' : 'Available'}\n                    </Badge>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          </div>\n        )}\n      </div>\n    );\n  };\n\n  if (error) {\n    return (\n      <div className=\"flex items-center justify-center h-96\">\n        <div className=\"text-center\">\n          <p className=\"text-destructive mb-4\">{error}</p>\n          <Button onClick={() => loadRecords()}>\n            <RefreshCw className=\"h-4 w-4 mr-2\" />\n            Retry\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <DataViewProvider config={dataViewConfig}>\n      <StateManagerProvider>\n        <div className=\"space-y-6\">\n          {/* Header */}\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h1 className=\"text-3xl font-bold\">Billing & Subscription</h1>\n              <p className=\"text-muted-foreground mt-1\">\n                Manage your subscription, billing, and payment methods\n              </p>\n            </div>\n            <div className=\"flex items-center gap-3\">\n              <Button variant=\"outline\" onClick={handleRefresh} disabled={loading}>\n                <RefreshCw className=\"h-4 w-4 mr-2\" />\n                Refresh\n              </Button>\n              <Button variant=\"outline\" onClick={() => handleExport('csv')}>\n                <Download className=\"h-4 w-4 mr-2\" />\n                Export\n              </Button>\n            </div>\n          </div>\n\n          {/* Statistics */}\n          {statistics && (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n              <div className=\"bg-card p-4 rounded-lg border\">\n                <div className=\"flex items-center gap-2 mb-2\">\n                  <Package className=\"h-5 w-5 text-blue-600\" />\n                  <div className=\"text-sm font-medium\">Current Plan</div>\n                </div>\n                <div className=\"text-2xl font-bold\">{statistics.currentPlan}</div>\n                <div className=\"text-xs text-muted-foreground\">\n                  Next billing: {new Date(statistics.nextBillingDate).toLocaleDateString()}\n                </div>\n              </div>\n              <div className=\"bg-card p-4 rounded-lg border\">\n                <div className=\"flex items-center gap-2 mb-2\">\n                  <DollarSign className=\"h-5 w-5 text-green-600\" />\n                  <div className=\"text-sm font-medium\">Monthly Spend</div>\n                </div>\n                <div className=\"text-2xl font-bold\">${statistics.monthlySpend}</div>\n                <div className=\"text-xs text-muted-foreground\">\n                  current billing cycle\n                </div>\n              </div>\n              <div className=\"bg-card p-4 rounded-lg border\">\n                <div className=\"flex items-center gap-2 mb-2\">\n                  <FileText className=\"h-5 w-5 text-purple-600\" />\n                  <div className=\"text-sm font-medium\">Invoices</div>\n                </div>\n                <div className=\"text-2xl font-bold\">{statistics.paidInvoices}</div>\n                <div className=\"text-xs text-muted-foreground\">\n                  of {statistics.totalInvoices} total\n                </div>\n              </div>\n              <div className=\"bg-card p-4 rounded-lg border\">\n                <div className=\"flex items-center gap-2 mb-2\">\n                  <TrendingUp className=\"h-5 w-5 text-orange-600\" />\n                  <div className=\"text-sm font-medium\">Usage</div>\n                </div>\n                <div className=\"text-2xl font-bold\">\n                  {statistics.usageMetrics.users.current}/{statistics.usageMetrics.users.limit}\n                </div>\n                <div className=\"text-xs text-muted-foreground\">\n                  users this month\n                </div>\n              </div>\n            </div>\n          )}\n\n          {/* Tab Navigation */}\n          <Tabs value={activeTab} onValueChange={setActiveTab}>\n            <TabsList className=\"grid w-full grid-cols-4\">\n              <TabsTrigger value=\"overview\">\n                <Package className=\"h-4 w-4 mr-2\" />\n                Overview\n              </TabsTrigger>\n              <TabsTrigger value=\"subscription\">\n                <Package className=\"h-4 w-4 mr-2\" />\n                Subscription\n              </TabsTrigger>\n              <TabsTrigger value=\"invoices\">\n                <FileText className=\"h-4 w-4 mr-2\" />\n                Invoices\n              </TabsTrigger>\n              <TabsTrigger value=\"settings\">\n                <Settings className=\"h-4 w-4 mr-2\" />\n                Settings\n              </TabsTrigger>\n            </TabsList>\n\n            <TabsContent value=\"overview\" className=\"space-y-4\">\n              {/* View Controls */}\n              <div className=\"flex items-center justify-between\">\n                <ViewSwitcher />\n                <div className=\"flex items-center gap-2\">\n                  {selectedRecords.length > 0 && (\n                    <Button variant=\"outline\" size=\"sm\">\n                      Actions ({selectedRecords.length})\n                    </Button>\n                  )}\n                </div>\n              </div>\n\n              {/* Main Content */}\n              {renderBillingGrid()}\n            </TabsContent>\n\n            <TabsContent value=\"subscription\" className=\"space-y-4\">\n              <div className=\"bg-card p-8 rounded-lg border text-center\">\n                <Package className=\"h-12 w-12 mx-auto mb-4 text-muted-foreground\" />\n                <h3 className=\"text-lg font-semibold mb-2\">Subscription Management</h3>\n                <p className=\"text-muted-foreground mb-4\">\n                  Subscription management is available through the overview interface above.\n                </p>\n                <Button onClick={() => setActiveTab('overview')}>\n                  Go to Overview\n                </Button>\n              </div>\n            </TabsContent>\n\n            <TabsContent value=\"invoices\" className=\"space-y-4\">\n              <div className=\"bg-card p-8 rounded-lg border text-center\">\n                <FileText className=\"h-12 w-12 mx-auto mb-4 text-muted-foreground\" />\n                <h3 className=\"text-lg font-semibold mb-2\">Invoice History</h3>\n                <p className=\"text-muted-foreground mb-4\">\n                  Invoice history is available through the overview interface above.\n                </p>\n                <Button onClick={() => setActiveTab('overview')}>\n                  Go to Overview\n                </Button>\n              </div>\n            </TabsContent>\n\n            <TabsContent value=\"settings\" className=\"space-y-4\">\n              <div className=\"bg-card p-8 rounded-lg border text-center\">\n                <Settings className=\"h-12 w-12 mx-auto mb-4 text-muted-foreground\" />\n                <h3 className=\"text-lg font-semibold mb-2\">Billing Settings</h3>\n                <p className=\"text-muted-foreground mb-4\">\n                  Billing settings configuration will be available in a future update.\n                </p>\n                <Button onClick={() => setActiveTab('overview')}>\n                  Go to Overview\n                </Button>\n              </div>\n            </TabsContent>\n          </Tabs>\n        </div>\n      </StateManagerProvider>\n    </DataViewProvider>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ghxstship/apps/web/app/(app)/(shell)/settings/billing/BillingSettingsClient.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'load'. Either include it or remove the dependency array.","line":52,"column":6,"nodeType":"ArrayExpression","endLine":52,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [load]","fix":{"range":[1474,1476],"text":"[load]"}}]},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Label' is not defined.","line":173,"column":16,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":173,"endColumn":21},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Label' is not defined.","line":182,"column":16,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":182,"endColumn":21},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Label' is not defined.","line":194,"column":14,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":194,"endColumn":19},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Label' is not defined.","line":204,"column":14,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":204,"endColumn":19},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Label' is not defined.","line":214,"column":14,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":214,"endColumn":19}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\nimport { User, FileText, Settings, Award, Calendar, TrendingUp, Activity, Clock, Plus, Search, Play, Trash2 } from \"lucide-react\";\nimport { useEffect, useMemo, useState } from 'react';\nimport {\n  Card,\n  Badge,\n  Button,\n  Input,\n  Textarea,\n  Loader,\n  useToastContext,\n} from '@ghxstship/ui';\nimport {\n  fetchBillingSettings,\n  updateBillingSettings,\n  type BillingSettingsResponse,\n} from '@/lib/services/settingsBillingClient';\nimport BillingPortalClient from './BillingPortalClient';\nimport Plans from './Plans';\n\ninterface FormState {\n  billingEmail: string;\n  billingAddress: string;\n  paymentMethod: string;\n  invoiceSettings: string;\n}\n\nconst emptyForm: FormState = {\n  billingEmail: '',\n  billingAddress: '{\\n  \"line1\": \"\",\\n  \"city\": \"\",\\n  \"state\": \"\",\\n  \"postal_code\": \"\",\\n  \"country\": \"\"\\n}',\n  paymentMethod: '{\\n  \"type\": \"\",\\n  \"details\": {}\\n}',\n  invoiceSettings: '{\\n  \"collection_method\": \"charge_automatically\"\\n}',\n};\n\nfunction safeStringify(value: unknown) {\n  try {\n    return JSON.stringify(value ?? {}, null, 2);\n  } catch {\n    return JSON.stringify({}, null, 2);\n  }\n}\n\nexport default function BillingSettingsClient() {\n  const { toast } = useToastContext();\n  const [data, setData] = useState<BillingSettingsResponse | null>(null);\n  const [form, setForm] = useState<FormState>(emptyForm);\n  const [loading, setLoading] = useState(true);\n  const [saving, setSaving] = useState(false);\n\n  useEffect(() => {\n    void load();\n  }, []);\n\n  const load = async () => {\n    try {\n      setLoading(true);\n      const response = await fetchBillingSettings();\n      setData(response);\n      const billing = response.billingSettings;\n      setForm({\n        billingEmail: billing?.billingEmail ?? '',\n        billingAddress: safeStringify(billing?.billingAddress ?? {}),\n        paymentMethod: safeStringify(billing?.paymentMethod ?? {}),\n        invoiceSettings: safeStringify(billing?.invoiceSettings ?? {}),\n      });\n    } catch (error) {\n      const message = error instanceof Error ? error.message : 'Unable to load billing settings';\n      toast.error('Failed to load billing settings', undefined, { description: message });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleChange = <K extends keyof FormState>(key: K, value: FormState[K]) => {\n    setForm((prev) => ({ ...prev, [key]: value }));\n  };\n\n  const handleSubmit = async () => {\n    try {\n      setSaving(true);\n      const updates = {\n        billingEmail: form.billingEmail.trim() || undefined,\n        billingAddress: form.billingAddress.trim() ? JSON.parse(form.billingAddress) : undefined,\n        paymentMethod: form.paymentMethod.trim() ? JSON.parse(form.paymentMethod) : undefined,\n        invoiceSettings: form.invoiceSettings.trim() ? JSON.parse(form.invoiceSettings) : undefined,\n      };\n\n      const response = await updateBillingSettings(updates);\n      setData(response);\n      toast.success('Billing settings updated');\n    } catch (error) {\n      const message = error instanceof Error ? error.message : 'Unable to update billing settings';\n      toast.error('Update failed', undefined, { description: message });\n    } finally {\n      setSaving(false);\n    }\n  };\n\n  const subscriptionBadgeVariant = useMemo(() => {\n    const status = data?.subscription?.status;\n    if (!status) return 'secondary' as const;\n    if (status === 'active') return 'success' as const;\n    if (status === 'trialing') return 'info' as const;\n    if (status === 'past_due' || status === 'unpaid') return 'warning' as const;\n    if (status === 'canceled' || status === 'incomplete_expired') return 'destructive' as const;\n    return 'secondary' as const;\n  }, [data?.subscription?.status]);\n\n  if (loading) {\n    return (\n      <div className=\"flex h-64 items-center justify-center\">\n        <Loader className=\"h-8 w-8 animate-spin\" />\n      </div>\n    );\n  }\n\n  if (!data) {\n    return (\n      <div className=\"stack-md\">\n        <Card>\n          <div className=\"p-md text-body-sm color-foreground/70\">\n            Unable to load billing settings. Please try again later.\n          </div>\n        </Card>\n      </div>\n    );\n  }\n\n  const { billingSettings, subscription, seatUsage, stripe, organization } = data;\n\n  return (\n    <div className=\"stack-lg\">\n      <Card title=\"Subscription\">\n        <div className=\"p-md space-y-lg\">\n          <div className=\"flex flex-col gap-sm md:flex-row md:items-center md:justify-between\">\n            <div className=\"space-y-xs\">\n              <div className=\"flex items-center gap-sm\">\n                <h2 className=\"text-heading-4\">Current Plan</h2>\n                <Badge variant={subscriptionBadgeVariant}>\n                  {subscription?.status ? subscription.status.replaceAll('_', ' ') : 'Not Subscribed'}\n                </Badge>\n              </div>\n              <p className=\"text-body-sm color-foreground/70\">\n                {billingSettings?.planName ?? 'No plan assigned.'}\n              </p>\n              {subscription?.currentPeriodEnd && (\n                <p className=\"text-body-xs color-foreground/60\">\n                  Renews on {new Date(subscription.currentPeriodEnd).toLocaleDateString()}\n                </p>\n              )}\n            </div>\n            <div className=\"flex flex-col gap-xs text-right text-body-sm color-foreground/70\">\n              <span>Seats configured: {seatUsage.configuredSeats ?? '—'}</span>\n              <span>Seats in use: {seatUsage.usedSeats}</span>\n            </div>\n          </div>\n\n          <BillingPortalClient\n            defaultOrganizationId={organization?.id ?? null}\n            defaultPriceId={subscription?.priceId ?? billingSettings?.planId ?? null}\n          />\n\n          <div className=\"stack-sm\">\n            <Plans organizationId={organization?.id ?? null} defaultPriceId={subscription?.priceId ?? null} />\n          </div>\n        </div>\n      </Card>\n\n      <Card title=\"Billing Profile\">\n        <div className=\"p-md space-y-md\">\n          <div className=\"grid grid-cols-1 gap-md lg:grid-cols-2\">\n            <div className=\"stack-sm\">\n              <Label htmlFor=\"billing-email\">Billing Email</Label>\n              <Input\n                id=\"billing-email\"\n                value={form.billingEmail}\n                onChange={(event) => handleChange('billingEmail', event.target.value)}\n                placeholder=\"billing@company.com\"\n              />\n            </div>\n            <div className=\"stack-sm\">\n              <Label>Seat Usage</Label>\n              <div className=\"rounded-lg border p-md text-body-sm color-foreground/70\">\n                <div>Configured seats: {seatUsage.configuredSeats ?? 'Unlimited'}</div>\n                <div>Active members: {seatUsage.usedSeats}</div>\n                <div className=\"color-foreground/60\">\n                  Adjust seats in your Stripe subscription if limits need to change.\n                </div>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"stack-sm\">\n            <Label htmlFor=\"billing-address\">Billing Address (JSON)</Label>\n            <Textarea\n              id=\"billing-address\"\n              rows={6}\n              value={form.billingAddress}\n              onChange={(event) => handleChange('billingAddress', event.target.value)}\n            />\n          </div>\n\n          <div className=\"stack-sm\">\n            <Label htmlFor=\"payment-method\">Payment Method Metadata (JSON)</Label>\n            <Textarea\n              id=\"payment-method\"\n              rows={4}\n              value={form.paymentMethod}\n              onChange={(event) => handleChange('paymentMethod', event.target.value)}\n            />\n          </div>\n\n          <div className=\"stack-sm\">\n            <Label htmlFor=\"invoice-settings\">Invoice Settings (JSON)</Label>\n            <Textarea\n              id=\"invoice-settings\"\n              rows={4}\n              value={form.invoiceSettings}\n              onChange={(event) => handleChange('invoiceSettings', event.target.value)}\n            />\n          </div>\n\n          <div className=\"flex justify-end gap-sm\">\n            <Button variant=\"outline\" onClick={() => void load()} disabled={saving}>\n              Refresh\n            </Button>\n            <Button onClick={handleSubmit} disabled={saving}>\n              {saving ? 'Saving…' : 'Save Changes'}\n            </Button>\n          </div>\n        </div>\n      </Card>\n\n      <Card title=\"Stripe Status\">\n        <div className=\"p-md space-y-sm text-body-sm color-foreground/70\">\n          <div className=\"flex items-center gap-sm\">\n            <Badge variant={stripe.configured ? 'success' : 'secondary'}>\n              {stripe.configured ? 'Connected' : 'Not Connected'}\n            </Badge>\n            <span>\n              {stripe.configured\n                ? 'Stripe integration is active for this organization.'\n                : 'Stripe integration is not configured for this organization.'}\n            </span>\n          </div>\n          {organization && (\n            <div className=\"space-y-xs\">\n              <div>Organization: {organization.name ?? organization.id}</div>\n              <div>Stripe Customer ID: {organization.stripeCustomerId ?? '—'}</div>\n            </div>\n          )}\n        </div>\n      </Card>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ghxstship/apps/web/app/(app)/(shell)/settings/integrations/IntegrationsSettingsClient.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadIntegrations'. Either include it or remove the dependency array.","line":53,"column":6,"nodeType":"ArrayExpression","endLine":53,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [loadIntegrations]","fix":{"range":[1441,1443],"text":"[loadIntegrations]"}}]},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'LinkIcon' is not defined.","line":129,"column":17,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":129,"endColumn":25},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'LinkIcon' is not defined.","line":133,"column":17,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":133,"endColumn":25},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'TestTube' is not defined.","line":193,"column":22,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":193,"endColumn":30}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\nimport { User, FileText, Settings, Award, Calendar, TrendingUp, Activity, Clock, Plus, Search, Play, Trash2 } from \"lucide-react\";\nimport { useState, useEffect } from 'react';\nimport {\n  Card,\n  CardHeader,\n  CardTitle,\n  CardContent,\n  Button,\n  Badge,\n  Input,\n  Label,\n  Textarea,\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n  Modal,\n  Skeleton,\n  useToastContext,\n} from '@ghxstship/ui';\nimport {\n  fetchIntegrations,\n  createIntegration,\n  updateIntegration,\n  deleteIntegration,\n  testIntegration,\n  type IntegrationRecord,\n  type AvailableIntegration,\n  type CreateIntegrationInput,\n} from '@/lib/services/settingsIntegrationsClient';\n\nexport default function IntegrationsSettingsClient() {\n  const { toast } = useToastContext();\n  const [integrations, setIntegrations] = useState<IntegrationRecord[]>([]);\n  const [availableIntegrations, setAvailableIntegrations] = useState<AvailableIntegration[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [showCreateModal, setShowCreateModal] = useState(false);\n  const [editingIntegration, setEditingIntegration] = useState<IntegrationRecord | null>(null);\n  const [testing, setTesting] = useState<string | null>(null);\n  \n  // Form state\n  const [formData, setFormData] = useState<CreateIntegrationInput>({\n    name: '',\n    type: 'webhook',\n    enabled: true,\n    config: {},\n  });\n\n  useEffect(() => {\n    loadIntegrations();\n  }, []);\n\n  const loadIntegrations = async () => {\n    try {\n      setLoading(true);\n      const response = await fetchIntegrations();\n      setIntegrations(response.integrations);\n      setAvailableIntegrations(response.availableIntegrations);\n    } catch (error) {\n      console.error('Error loading integrations:', error);\n      toast.error('Failed to load integrations');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleCreate = async () => {\n    try {\n      const response = await createIntegration(formData);\n      toast.success('Integration created successfully');\n      setShowCreateModal(false);\n      setFormData({ name: '', type: 'webhook', enabled: true, config: {} });\n      await loadIntegrations();\n    } catch (error) {\n      console.error('Error creating integration:', error);\n      toast.error('Failed to create integration');\n    }\n  };\n\n  const handleUpdate = async (integration: IntegrationRecord) => {\n    try {\n      await updateIntegration({\n        id: integration.id,\n        enabled: !integration.enabled,\n      });\n      toast.success('Integration updated');\n      await loadIntegrations();\n    } catch (error) {\n      console.error('Error updating integration:', error);\n      toast.error('Failed to update integration');\n    }\n  };\n\n  const handleDelete = async (id: string) => {\n    if (!window.confirm('Are you sure you want to delete this integration?')) return;\n    \n    try {\n      await deleteIntegration(id);\n      toast.success('Integration deleted');\n      await loadIntegrations();\n    } catch (error) {\n      console.error('Error deleting integration:', error);\n      toast.error('Failed to delete integration');\n    }\n  };\n\n  const handleTest = async (id: string) => {\n    try {\n      setTesting(id);\n      const response = await testIntegration({ integrationId: id });\n      if (response.success) {\n        toast.success(response.message);\n      } else {\n        toast.error(response.message);\n      }\n    } catch (error) {\n      console.error('Error testing integration:', error);\n      toast.error('Failed to test integration');\n    } finally {\n      setTesting(null);\n    }\n  };\n\n  const getIntegrationIcon = (type: string) => {\n    switch (type) {\n      case 'webhook':\n        return <LinkIcon className=\"h-4 w-4\" />;\n      case 'api':\n        return <Settings className=\"h-4 w-4\" />;\n      default:\n        return <LinkIcon className=\"h-4 w-4\" />;\n    }\n  };\n\n  if (loading) {\n    return (\n      <div className=\"space-y-md\">\n        <Skeleton className=\"h-12 w-48\" />\n        <div className=\"space-y-sm\">\n          <Skeleton className=\"h-32 w-full\" />\n          <Skeleton className=\"h-32 w-full\" />\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-lg\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold\">Integrations</h1>\n          <p className=\"text-muted-foreground mt-1\">\n            Connect third-party services and configure API access\n          </p>\n        </div>\n        <Button onClick={() => setShowCreateModal(true)}>\n          <Plus className=\"h-4 w-4 mr-2\" />\n          Add Integration\n        </Button>\n      </div>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-md\">\n        {integrations.map((integration) => (\n          <Card key={integration.id}>\n            <CardHeader className=\"flex flex-row items-start justify-between space-y-0\">\n              <div className=\"flex items-center gap-sm\">\n                {getIntegrationIcon(integration.type)}\n                <div>\n                  <CardTitle className=\"text-lg\">{integration.name}</CardTitle>\n                  <p className=\"text-sm text-muted-foreground capitalize\">{integration.type}</p>\n                </div>\n              </div>\n              <Badge variant={integration.enabled ? 'success' : 'secondary'}>\n                {integration.enabled ? 'Active' : 'Inactive'}\n              </Badge>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-sm\">\n                {integration.last_sync && (\n                  <p className=\"text-xs text-muted-foreground\">\n                    Last sync: {new Date(integration.last_sync).toLocaleString()}\n                  </p>\n                )}\n                <div className=\"flex gap-xs\">\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => handleTest(integration.id)}\n                    disabled={testing === integration.id}\n                  >\n                    <TestTube className=\"h-3 w-3 mr-1\" />\n                    {testing === integration.id ? 'Testing...' : 'Test'}\n                  </Button>\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => handleUpdate(integration)}\n                  >\n                    {integration.enabled ? 'Disable' : 'Enable'}\n                  </Button>\n                  <Button\n                    variant=\"destructive\"\n                    size=\"sm\"\n                    onClick={() => handleDelete(integration.id)}\n                  >\n                    <Trash2 className=\"h-3 w-3\" />\n                  </Button>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n\n      {integrations.length === 0 && (\n        <Card>\n          <CardContent className=\"py-lg text-center\">\n            <p className=\"text-muted-foreground mb-md\">No integrations configured yet</p>\n            <Button onClick={() => setShowCreateModal(true)}>\n              <Plus className=\"h-4 w-4 mr-2\" />\n              Add Your First Integration\n            </Button>\n          </CardContent>\n        </Card>\n      )}\n\n      <Modal\n        open={showCreateModal}\n        onClose={() => setShowCreateModal(false)}\n        title=\"Add Integration\"\n        description=\"Configure a new integration with external services\"\n      >\n        <div className=\"space-y-md\">\n          <div className=\"space-y-sm\">\n            <Label htmlFor=\"name\">Name</Label>\n            <Input\n              id=\"name\"\n              value={formData.name}\n              onChange={(e) => setFormData({ ...formData, name: e.target.value })}\n              placeholder=\"My Integration\"\n            />\n          </div>\n          \n          <div className=\"space-y-sm\">\n            <Label htmlFor=\"type\">Type</Label>\n            <Select\n              value={formData.type}\n              onValueChange={(value) => setFormData({ ...formData, type: value as unknown })}\n            >\n              <SelectTrigger id=\"type\">\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                {availableIntegrations.map((integration) => (\n                  <SelectItem key={integration.type} value={integration.type}>\n                    {integration.name}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n\n          {formData.type === 'webhook' && (\n            <div className=\"space-y-sm\">\n              <Label htmlFor=\"webhook-url\">Webhook URL</Label>\n              <Input\n                id=\"webhook-url\"\n                placeholder=\"https://example.com/webhook\"\n                onChange={(e) => setFormData({\n                  ...formData,\n                  config: { ...formData.config, url: e.target.value }\n                })}\n              />\n            </div>\n          )}\n\n          <div className=\"flex justify-end gap-sm\">\n            <Button variant=\"outline\" onClick={() => setShowCreateModal(false)}>\n              Cancel\n            </Button>\n            <Button onClick={handleCreate} disabled={!formData.name}>\n              Create Integration\n            </Button>\n          </div>\n        </div>\n      </Modal>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ghxstship/apps/web/app/(app)/(shell)/settings/notifications/NotificationsSettingsClient.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'load'. Either include it or remove the dependency array.","line":179,"column":6,"nodeType":"ArrayExpression","endLine":179,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [load]","fix":{"range":[5498,5500],"text":"[load]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\nimport { User, FileText, Settings, Award, Calendar, TrendingUp, Activity, Clock, Plus, Search, Play, Trash2 } from \"lucide-react\";\nimport { useEffect, useMemo, useState } from 'react';\nimport {\n  Badge,\n  Button,\n  Card,\n  CardContent,\n  CardHeader,\n  CardTitle,\n  Input,\n  Label,\n  Modal,\n  ConfirmModal,\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n  Skeleton,\n  Textarea,\n  Toggle,\n  useToastContext,\n} from '@ghxstship/ui';\nimport {\n  fetchNotificationSettings,\n  markAllNotificationsRead,\n  NotificationCategory,\n  NotificationFrequency,\n  NotificationGlobalSettings,\n  NotificationPreference,\n  NotificationSettingsResponse,\n  NotificationType,\n  resetNotificationPreferences,\n  sendTestNotification,\n  updateNotificationSettings,\n} from '@/lib/services/settingsNotificationsClient';\n\nconst FREQUENCY_OPTIONS: { value: NotificationFrequency; label: string }[] = [\n  { value: 'immediate', label: 'Immediate' },\n  { value: 'hourly', label: 'Hourly' },\n  { value: 'daily', label: 'Daily' },\n  { value: 'weekly', label: 'Weekly' },\n];\n\nconst DIGEST_FREQUENCY_OPTIONS = [\n  { value: 'daily', label: 'Daily' },\n  { value: 'weekly', label: 'Weekly' },\n  { value: 'monthly', label: 'Monthly' },\n];\n\nconst CATEGORY_LABELS: Record<NotificationCategory, string> = {\n  project_updates: 'Project Updates',\n  job_assignments: 'Job Assignments',\n  financial_alerts: 'Financial Alerts',\n  system_notifications: 'System Notifications',\n  security_alerts: 'Security Alerts',\n  marketplace_activity: 'Marketplace Activity',\n  training_reminders: 'Training Reminders',\n  compliance_updates: 'Compliance Updates',\n  approval_requests: 'Approval Requests',\n};\n\nconst TYPE_LABELS: Record<NotificationType, string> = {\n  email: 'Email',\n  sms: 'SMS',\n  push: 'Push',\n  in_app: 'In-App',\n};\n\ninterface PreferenceFormState extends NotificationPreference {}\n\ninterface GlobalSettingsFormState {\n  quietHoursEnabled: boolean;\n  quietHoursStart: string;\n  quietHoursEnd: string;\n  quietHoursTimezone: string;\n  digestEnabled: boolean;\n  digestFrequency: 'daily' | 'weekly' | 'monthly';\n  digestTime: string;\n}\n\nconst DEFAULT_GLOBAL_STATE: GlobalSettingsFormState = {\n  quietHoursEnabled: false,\n  quietHoursStart: '22:00',\n  quietHoursEnd: '08:00',\n  quietHoursTimezone: 'UTC',\n  digestEnabled: true,\n  digestFrequency: 'daily',\n  digestTime: '09:00',\n};\n\nconst DEFAULT_PREFERENCES: PreferenceFormState[] = [\n  {\n    type: 'email',\n    enabled: true,\n    frequency: 'immediate',\n    categories: ['security_alerts', 'approval_requests'],\n  },\n  {\n    type: 'in_app',\n    enabled: true,\n    frequency: 'immediate',\n    categories: ['project_updates', 'job_assignments'],\n  },\n  {\n    type: 'push',\n    enabled: false,\n    frequency: 'immediate',\n    categories: [],\n  },\n  {\n    type: 'sms',\n    enabled: false,\n    frequency: 'immediate',\n    categories: ['security_alerts'],\n  },\n];\n\nfunction buildGlobalState(settings: NotificationGlobalSettings | undefined): GlobalSettingsFormState {\n  if (!settings) return DEFAULT_GLOBAL_STATE;\n  return {\n    quietHoursEnabled: settings.quietHours?.enabled ?? false,\n    quietHoursStart: settings.quietHours?.startTime ?? '22:00',\n    quietHoursEnd: settings.quietHours?.endTime ?? '08:00',\n    quietHoursTimezone: settings.quietHours?.timezone ?? 'UTC',\n    digestEnabled: settings.digestEnabled ?? true,\n    digestFrequency: settings.digestFrequency ?? 'daily',\n    digestTime: settings.digestTime ?? '09:00',\n  };\n}\n\nfunction exportGlobalState(state: GlobalSettingsFormState): NotificationGlobalSettings {\n  return {\n    quietHours: state.quietHoursEnabled\n      ? {\n          enabled: true,\n          startTime: state.quietHoursStart,\n          endTime: state.quietHoursEnd,\n          timezone: state.quietHoursTimezone,\n        }\n      : { enabled: false, startTime: '22:00', endTime: '08:00', timezone: 'UTC' },\n    digestEnabled: state.digestEnabled,\n    digestFrequency: state.digestFrequency,\n    digestTime: state.digestTime,\n  };\n}\n\nexport default function NotificationsSettingsClient() {\n  const { toast } = useToastContext();\n  const [data, setData] = useState<NotificationSettingsResponse | null>(null);\n  const [preferencesState, setPreferencesState] = useState<PreferenceFormState[]>(DEFAULT_PREFERENCES);\n  const [globalState, setGlobalState] = useState<GlobalSettingsFormState>(DEFAULT_GLOBAL_STATE);\n  const [loading, setLoading] = useState<boolean>(true);\n  const [saving, setSaving] = useState<boolean>(false);\n  const [testModalOpen, setTestModalOpen] = useState<boolean>(false);\n  const [testMessage, setTestMessage] = useState<string>('This is a test notification.');\n  const [testType, setTestType] = useState<NotificationType>('email');\n  const [resetConfirmationOpen, setResetConfirmationOpen] = useState<boolean>(false);\n  const [resetting, setResetting] = useState<boolean>(false);\n\n  const load = async () => {\n    try {\n      setLoading(true);\n      const response = await fetchNotificationSettings();\n      setData(response);\n      setPreferencesState(response.preferences.length ? response.preferences : DEFAULT_PREFERENCES);\n      setGlobalState(buildGlobalState(response.globalSettings));\n    } catch (error) {\n      const message = error instanceof Error ? error.message : 'Unable to load notification settings';\n      toast.error('Failed to load notification settings', undefined, { description: message });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    void load();\n  }, []);\n\n  const handlePreferenceToggle = (type: NotificationType, enabled: boolean) => {\n    setPreferencesState((prev) =>\n      prev.map((pref) =>\n        pref.type === type\n          ? {\n              ...pref,\n              enabled,\n            }\n          : pref\n      )\n    );\n  };\n\n  const handleFrequencyChange = (type: NotificationType, frequency: NotificationFrequency) => {\n    setPreferencesState((prev) =>\n      prev.map((pref) =>\n        pref.type === type\n          ? {\n              ...pref,\n              frequency,\n            }\n          : pref\n      )\n    );\n  };\n\n  const handleCategoryToggle = (type: NotificationType, category: NotificationCategory, checked: boolean) => {\n    setPreferencesState((prev) =>\n      prev.map((pref) =>\n        pref.type === type\n          ? {\n              ...pref,\n              categories: checked\n                ? Array.from(new Set([...(pref.categories ?? []), category]))\n                : (pref.categories ?? []).filter((cat) => cat !== category),\n            }\n          : pref\n      )\n    );\n  };\n\n  const handleQuietHoursChange = (key: keyof GlobalSettingsFormState, value: string | boolean) => {\n    setGlobalState((prev) => ({\n      ...prev,\n      [key]: value,\n    }));\n  };\n\n  const preferencesByType = useMemo(() => {\n    return preferencesState.reduce<Record<NotificationType, PreferenceFormState>>((acc, pref) => {\n      acc[pref.type] = pref;\n      return acc;\n    }, {\n      email: {\n        type: 'email',\n        enabled: false,\n        frequency: 'immediate',\n        categories: [],\n      },\n      sms: {\n        type: 'sms',\n        enabled: false,\n        frequency: 'immediate',\n        categories: [],\n      },\n      push: {\n        type: 'push',\n        enabled: false,\n        frequency: 'immediate',\n        categories: [],\n      },\n      in_app: {\n        type: 'in_app',\n        enabled: false,\n        frequency: 'immediate',\n        categories: [],\n      },\n    });\n  }, [preferencesState]);\n\n  const handleSave = async () => {\n    try {\n      setSaving(true);\n      await updateNotificationSettings({\n        preferences: preferencesState,\n        globalSettings: exportGlobalState(globalState),\n      });\n      toast.success('Notification settings saved');\n      await load();\n    } catch (error) {\n      const message = error instanceof Error ? error.message : 'Unable to save notification settings';\n      toast.error('Save failed', undefined, { description: message });\n    } finally {\n      setSaving(false);\n    }\n  };\n\n  const handleTestNotification = async () => {\n    try {\n      await sendTestNotification({ type: testType, message: testMessage });\n      toast.success('Test notification sent');\n      setTestModalOpen(false);\n    } catch (error) {\n      const message = error instanceof Error ? error.message : 'Unable to send test notification';\n      toast.error('Test notification failed', undefined, { description: message });\n    }\n  };\n\n  const handleMarkAllRead = async () => {\n    try {\n      await markAllNotificationsRead();\n      toast.success('All notifications marked as read');\n    } catch (error) {\n      const message = error instanceof Error ? error.message : 'Unable to mark notifications';\n      toast.error('Action failed', undefined, { description: message });\n    }\n  };\n\n  const handleResetPreferences = async () => {\n    try {\n      setResetting(true);\n      await resetNotificationPreferences();\n      toast.success('Notification preferences reset');\n      setResetConfirmationOpen(false);\n      await load();\n    } catch (error) {\n      const message = error instanceof Error ? error.message : 'Unable to reset preferences';\n      toast.error('Reset failed', undefined, { description: message });\n    } finally {\n      setResetting(false);\n    }\n  };\n\n  if (loading && !data) {\n    return (\n      <div className=\"stack-md\">\n        <Card>\n          <CardHeader>\n            <CardTitle>Notification Preferences</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-md\">\n            <Skeleton className=\"h-8 w-1/2\" />\n            <Skeleton className=\"h-10 w-full\" />\n            <Skeleton className=\"h-36 w-full\" />\n          </CardContent>\n        </Card>\n        <Card>\n          <CardHeader>\n            <CardTitle>Quiet Hours & Digest</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-md\">\n            <Skeleton className=\"h-8 w-1/2\" />\n            <Skeleton className=\"h-10 w-full\" />\n            <Skeleton className=\"h-24 w-full\" />\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"stack-lg\">\n      <Card>\n        <CardHeader className=\"flex flex-col gap-sm\">\n          <div className=\"flex w-full flex-col gap-sm lg:flex-row lg:items-start lg:justify-between\">\n            <div>\n              <CardTitle>Notification Preferences</CardTitle>\n              <p className=\"text-body-sm text-muted-foreground\">\n                Configure delivery channels, frequencies, and categories for your alerts.\n              </p>\n            </div>\n            <div className=\"flex flex-wrap gap-sm\">\n              <Button variant=\"outline\" onClick={handleMarkAllRead}>Mark All Read</Button>\n              <Button variant=\"outline\" onClick={() => setResetConfirmationOpen(true)}>Reset to Default</Button>\n              <Button variant=\"outline\" onClick={() => setTestModalOpen(true)}>Send Test</Button>\n            </div>\n          </div>\n        </CardHeader>\n        <CardContent className=\"space-y-lg\">\n          {preferencesState.map((preference) => {\n            const current = preferencesByType[preference.type];\n            return (\n              <div key={preference.type} className=\"rounded-lg border p-md space-y-md\">\n                <div className=\"flex flex-col gap-sm md:flex-row md:items-center md:justify-between\">\n                  <div className=\"space-y-xs\">\n                    <div className=\"flex items-center gap-sm\">\n                      <h3 className=\"text-body font-semibold\">{TYPE_LABELS[preference.type]}</h3>\n                      <Badge variant={current.enabled ? 'success' : 'secondary'}>\n                        {current.enabled ? 'Enabled' : 'Disabled'}\n                      </Badge>\n                    </div>\n                    <p className=\"text-body-sm text-muted-foreground\">\n                      {preference.type === 'email' && 'Receive detailed email alerts for critical updates.'}\n                      {preference.type === 'sms' && 'Get SMS alerts for high-severity and urgent notifications.'}\n                      {preference.type === 'push' && 'Receive push notifications on connected devices.'}\n                      {preference.type === 'in_app' && 'Stay informed with in-app notifications and inbox digests.'}\n                    </p>\n                  </div>\n                  <Toggle\n                    checked={current.enabled}\n                    onChange={(event) => handlePreferenceToggle(preference.type, event.target.checked)}\n                    label={current.enabled ? 'On' : 'Off'}\n                  />\n                </div>\n\n                <div className=\"grid grid-cols-1 gap-md md:grid-cols-2\">\n                  <div className=\"space-y-sm\">\n                    <Label>Frequency</Label>\n                    <Select\n                      value={current.frequency ?? 'immediate'}\n                      onValueChange={(value) => handleFrequencyChange(preference.type, value as NotificationFrequency)}\n                    >\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"Select frequency\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        {FREQUENCY_OPTIONS.map((option) => (\n                          <SelectItem key={option.value} value={option.value}>\n                            {option.label}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                    <p className=\"text-body-xs text-muted-foreground\">\n                      Choose how often we send {TYPE_LABELS[preference.type]} notifications.\n                    </p>\n                  </div>\n\n                  <div className=\"space-y-sm\">\n                    <Label>Categories</Label>\n                    <div className=\"grid grid-cols-2 gap-sm\">\n                      {Object.entries(CATEGORY_LABELS).map(([value, label]) => {\n                        const checked = current.categories?.includes(value as NotificationCategory) ?? false;\n                        return (\n                          <label key={value} className=\"flex items-center gap-xs text-body-sm\">\n                            <input\n                              type=\"checkbox\"\n                              className=\"form-checkbox h-4 w-4 rounded border-border\"\n                              checked={checked}\n                              onChange={(event) => handleCategoryToggle(preference.type, value as NotificationCategory, event.target.checked)}\n                              disabled={!current.enabled}\n                            />\n                            {label}\n                          </label>\n                        );\n                      })}\n                    </div>\n                  </div>\n                </div>\n              </div>\n            );\n          })}\n        </CardContent>\n      </Card>\n\n      <Card>\n        <CardHeader>\n          <CardTitle>Quiet Hours & Digest</CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-lg\">\n          <div className=\"grid grid-cols-1 gap-md lg:grid-cols-2\">\n            <div className=\"space-y-md\">\n              <div className=\"flex items-center justify-between gap-sm\">\n                <div>\n                  <Label>Quiet Hours</Label>\n                  <p className=\"text-body-xs text-muted-foreground\">\n                    Suppress notifications during designated downtime.\n                  </p>\n                </div>\n                <Toggle\n                  checked={globalState.quietHoursEnabled}\n                  onChange={(event) => handleQuietHoursChange('quietHoursEnabled', event.target.checked)}\n                />\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-sm\">\n                <div className=\"space-y-xs\">\n                  <Label htmlFor=\"quiet-start\">Quiet Hours Start</Label>\n                  <Input\n                    id=\"quiet-start\"\n                    type=\"time\"\n                    value={globalState.quietHoursStart}\n                    onChange={(event) => handleQuietHoursChange('quietHoursStart', event.target.value)}\n                    disabled={!globalState.quietHoursEnabled}\n                  />\n                </div>\n                <div className=\"space-y-xs\">\n                  <Label htmlFor=\"quiet-end\">Quiet Hours End</Label>\n                  <Input\n                    id=\"quiet-end\"\n                    type=\"time\"\n                    value={globalState.quietHoursEnd}\n                    onChange={(event) => handleQuietHoursChange('quietHoursEnd', event.target.value)}\n                    disabled={!globalState.quietHoursEnabled}\n                  />\n                </div>\n              </div>\n\n              <div className=\"space-y-xs\">\n                <Label htmlFor=\"quiet-timezone\">Timezone</Label>\n                <Input\n                  id=\"quiet-timezone\"\n                  value={globalState.quietHoursTimezone}\n                  onChange={(event) => handleQuietHoursChange('quietHoursTimezone', event.target.value)}\n                  disabled={!globalState.quietHoursEnabled}\n                />\n              </div>\n            </div>\n\n            <div className=\"space-y-md\">\n              <div className=\"flex items-center justify-between gap-sm\">\n                <div>\n                  <Label>Daily Digest</Label>\n                  <p className=\"text-body-xs text-muted-foreground\">\n                    Receive summarized activity at scheduled intervals.\n                  </p>\n                </div>\n                <Toggle\n                  checked={globalState.digestEnabled}\n                  onChange={(event) => handleQuietHoursChange('digestEnabled', event.target.checked)}\n                />\n              </div>\n\n              <div className=\"space-y-sm\">\n                <div className=\"space-y-xs\">\n                  <Label>Digest Frequency</Label>\n                  <Select\n                    value={globalState.digestFrequency}\n                    onValueChange={(value) => handleQuietHoursChange('digestFrequency', value)}\n                    disabled={!globalState.digestEnabled}\n                  >\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Select frequency\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {DIGEST_FREQUENCY_OPTIONS.map((option) => (\n                        <SelectItem key={option.value} value={option.value}>\n                          {option.label}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n                <div className=\"space-y-xs\">\n                  <Label htmlFor=\"digest-time\">Digest Time</Label>\n                  <Input\n                    id=\"digest-time\"\n                    type=\"time\"\n                    value={globalState.digestTime}\n                    onChange={(event) => handleQuietHoursChange('digestTime', event.target.value)}\n                    disabled={!globalState.digestEnabled}\n                  />\n                </div>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"flex justify-end gap-sm\">\n            <Button variant=\"outline\" onClick={() => void load()} disabled={saving}>\n              Refresh\n            </Button>\n            <Button onClick={handleSave} disabled={saving}>\n              {saving ? 'Saving…' : 'Save Changes'}\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n\n      <Modal\n        open={testModalOpen}\n        onClose={() => setTestModalOpen(false)}\n        title=\"Send Test Notification\"\n        description=\"Send yourself a test notification to verify delivery settings.\"\n      >\n        <div className=\"space-y-md\">\n          <div className=\"space-y-sm\">\n            <Label>Channel</Label>\n            <Select value={testType} onValueChange={(value) => setTestType(value as NotificationType)}>\n              <SelectTrigger>\n                <SelectValue placeholder=\"Select channel\" />\n              </SelectTrigger>\n              <SelectContent>\n                {Object.entries(TYPE_LABELS).map(([value, label]) => (\n                  <SelectItem key={value} value={value}>\n                    {label}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n          <div className=\"space-y-sm\">\n            <Label htmlFor=\"test-message\">Message Preview</Label>\n            <Textarea\n              id=\"test-message\"\n              rows={4}\n              value={testMessage}\n              onChange={(event) => setTestMessage(event.target.value)}\n            />\n          </div>\n          <div className=\"flex justify-end gap-sm\">\n            <Button variant=\"outline\" onClick={() => setTestModalOpen(false)}>\n              Cancel\n            </Button>\n            <Button onClick={handleTestNotification}>\n              Send Test\n            </Button>\n          </div>\n        </div>\n      </Modal>\n\n      <ConfirmModal\n        open={resetConfirmationOpen}\n        onClose={() => setResetConfirmationOpen(false)}\n        onConfirm={handleResetPreferences}\n        title=\"Reset preferences?\"\n        description=\"We will revert your notification settings to the recommended defaults. This action cannot be undone.\"\n        confirmText=\"Reset\"\n        cancelText=\"Cancel\"\n        variant=\"destructive\"\n        loading={resetting}\n      />\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ghxstship/apps/web/app/(app)/(shell)/settings/organization/domains/DomainsClient.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchDomains'. Either include it or remove the dependency array.","line":32,"column":40,"nodeType":"ArrayExpression","endLine":32,"endColumn":47,"suggestions":[{"desc":"Update the dependencies array to be: [fetchDomains, orgId]","fix":{"range":[1305,1312],"text":"[fetchDomains, orgId]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport { useEffect, useState } from 'react';\nimport { useRouter, useSearchParams } from 'next/navigation';\nimport { Button } from '@ghxstship/ui';\nimport { tryCatch, Result, reportError } from '@ghxstship/ui/utils/error-handling';\n\ntype OrgDomain = { id: string; domain: string; status: string; created_at: string };\n\nexport default function DomainsClient({ orgId, role, suggest }: { orgId: string; role?: string; suggest?: string }) {\n  const [domains, setDomains] = useState<OrgDomain[]>([]);\n  const [newDomain, setNewDomain] = useState(suggest ?? '');\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const canManage = role === 'owner' || role === 'admin';\n  const router = useRouter();\n  const searchParams = useSearchParams();\n\n  async function fetchDomains() {\n    setError(null);\n    const resResult = await tryCatch(async () => fetch(`/api/organizations/${orgId}/domains`, { cache: 'no-store' }));\nif (!resResult.success) {\n  reportError(resResult.error);\n  throw new Error(resResult.error.message);\n}\nconst res = resResult.data;\n    const data = await res.json();\n    if (!res.ok) return setError(data?.error || 'Failed to load domains');\n    setDomains(data.domains || []);\n  }\n\n  useEffect(() => { fetchDomains(); }, [orgId]);\n\n  async function addDomain() {\n    if (!newDomain) return;\n    setLoading(true); setError(null);\n    const optimistic: OrgDomain = { id: `tmp-${Date.now()}`, domain: newDomain, status: 'pending', created_at: new Date().toISOString() };\n    setDomains((prev: unknown) => [optimistic, ...prev]);\n    try {\n      const resResult = await tryCatch(async () =>\n        fetch(`/api/organizations/${orgId}/domains`, {\n          method: 'POST',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify({ domain: newDomain })\n        })\n      );\n      if (!resResult.success) {\n        reportError(resResult.error);\n        throw new Error(resResult.error.message);\n      }\n      const res = resResult.data;\n      const data = await res.json();\n      if (!res.ok) throw new Error(data?.error || 'Failed to add');\n      setNewDomain('');\n      await fetchDomains();\n      // If this add came from a suggest param, clear it from the URL to avoid repeated focus/prefill\n      if (searchParams.get('suggest')) {\n        router.replace('/settings/organization/domains');\n      }\n    } catch (e) {\n      setError(e?.message || 'Unknown error');\n      setDomains((prev: OrgDomain[]) => prev.filter((d: OrgDomain) => d.id !== optimistic.id));\n    } finally {\n      setLoading(false);\n    }\n  }\n\n  async function removeDomain(id: string) {\n    setLoading(true); setError(null);\n    const prev = domains;\n    setDomains((cur: OrgDomain[]) => cur.filter((d: OrgDomain) => d.id !== id));\n    try {\n      const resResult = await tryCatch(async () =>\n        fetch(`/api/organizations/${orgId}/domains`, {\n          method: 'DELETE',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify({ id })\n        })\n      );\n      if (!resResult.success) {\n        reportError(resResult.error);\n        throw new Error(resResult.error.message);\n      }\n      const res = resResult.data;\n      const data = await res.json();\n      if (!res.ok) throw new Error(data?.error || 'Failed to delete');\n      // success: no-op, optimistic state already removed\n    } catch (e) {\n      setError(e?.message || 'Unknown error');\n      setDomains((prev: unknown) => prev);\n    } finally {\n      setLoading(false);\n    }\n  }\n\n  return (\n    <div className=\"stack-md\">\n      {canManage ? (\n        <div className=\"flex gap-sm\">\n          <Button onClick={addDomain} disabled={loading || !newDomain}>Add</Button>\n        </div>\n      ) : (\n        <div className=\"text-body-sm color-foreground/60\">Only owners and admins can manage organization domains.</div>\n      )}\n      {error ? <div className=\"text-body-sm color-destructive\">{error}</div> : null}\n      <div className=\"rounded-md border\">\n        <table className=\"w-full text-body-sm\">\n          <thead>\n            <tr className=\"bg-secondary/40\">\n              <th className=\" px-md py-sm text-left\">Domain</th>\n              <th className=\" px-md py-sm text-left\">Status</th>\n              <th className=\" px-md py-sm text-right\">Actions</th>\n            </tr>\n          </thead>\n          <tbody>\n            {domains.map((d: unknown) => (\n              <tr key={d.id} className=\"border-t\">\n                <td className=\" px-md py-sm\">{d.domain}</td>\n                <td className=\" px-md py-sm\">\n                  <span className={\n                    `inline-flex items-center rounded-full px-sm py-0.5 text-body-sm ` +\n                    (d.status === 'active' ? 'bg-success/10 color-success' :\n                     d.status === 'pending' ? 'bg-warning/10 color-warning' :\n                     'bg-secondary/10 color-muted')\n                  }>\n                    {d.status}\n                  </span>\n                </td>\n                <td className=\" px-md py-sm text-right\">\n                  <Button onClick={() => removeDomain(d.id)} disabled={loading || !canManage}>Remove</Button>\n                </td>\n              </tr>\n            ))}\n            {domains.length === 0 ? (\n              <tr>\n                <td className=\" px-md py-lg text-center color-foreground/60\" colSpan={3}>No domains. Add your company email domain(s) to allow unlimited seats on Team plans.</td>\n              </tr>\n            ) : null}\n          </tbody>\n        </table>\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ghxstship/apps/web/app/(app)/(shell)/settings/permissions/PermissionsSettingsClient.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'load'. Either include it or remove the dependency array.","line":118,"column":6,"nodeType":"ArrayExpression","endLine":118,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [load]","fix":{"range":[3600,3602],"text":"[load]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\nimport { User, FileText, Settings, Award, Calendar, TrendingUp, Activity, Clock, Plus, Search, Play, Trash2 } from \"lucide-react\";\nimport { useEffect, useMemo, useState } from 'react';\nimport {\n  Badge,\n  Button,\n  Card,\n  CardContent,\n  CardHeader,\n  CardTitle,\n  Checkbox,\n  Input,\n  Label,\n  Modal,\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n  Skeleton,\n  Textarea,\n  Toggle,\n  useToastContext,\n} from '@ghxstship/ui';\nimport {\n  createRole,\n  deleteRole,\n  fetchRoles,\n  RoleRecord,\n  updateRole,\n} from '@/lib/services/settingsRolesClient';\nimport {\n  fetchOrganizationMembers,\n  OrganizationMember,\n} from '@/lib/services/settingsOrganizationClient';\n\ninterface PermissionState {\n  [resource: string]: Set<string>;\n}\n\nconst ROLE_SCOPE_OPTIONS = [\n  { value: 'owner', label: 'Owners' },\n  { value: 'admin', label: 'Admins' },\n  { value: 'manager', label: 'Managers' },\n  { value: 'contributor', label: 'Contributors' },\n  { value: 'viewer', label: 'Viewers' },\n];\n\nfunction buildPermissionState(permissions: Record<string, string[]>): PermissionState {\n  const state: PermissionState = {};\n  Object.entries(permissions || {}).forEach(([resource, actions]) => {\n    state[resource] = new Set(actions);\n  });\n  return state;\n}\n\nfunction exportPermissionState(state: PermissionState): Record<string, string[]> {\n  return Object.entries(state).reduce<Record<string, string[]>>((acc, [resource, actions]) => {\n    if (actions.size > 0) {\n      acc[resource] = Array.from(actions).sort();\n    }\n    return acc;\n  }, {});\n}\n\nfunction mergeResourceMatrix(roles: RoleRecord[]): Record<string, Set<string>> {\n  const matrix: Record<string, Set<string>> = {};\n  roles.forEach((role) => {\n    Object.entries(role.permissions || {}).forEach(([resource, actions]) => {\n      if (!matrix[resource]) {\n        matrix[resource] = new Set();\n      }\n      actions.forEach((action) => matrix[resource].add(action));\n    });\n  });\n  return matrix;\n}\n\nconst DEFAULT_ROLE_NAME = 'Untitled Role';\n\nexport default function PermissionsSettingsClient() {\n  const { toast } = useToastContext();\n  const [roles, setRoles] = useState<RoleRecord[]>([]);\n  const [members, setMembers] = useState<OrganizationMember[]>([]);\n  const [loading, setLoading] = useState<boolean>(true);\n  const [saving, setSaving] = useState<boolean>(false);\n  const [editingRole, setEditingRole] = useState<RoleRecord | null>(null);\n  const [deleteRoleId, setDeleteRoleId] = useState<RoleRecord | null>(null);\n  const [createModalOpen, setCreateModalOpen] = useState<boolean>(false);\n  const [selectedMember, setSelectedMember] = useState<string>('');\n\n  const [roleName, setRoleName] = useState<string>('');\n  const [roleDescription, setRoleDescription] = useState<string>('');\n  const [permissionState, setPermissionState] = useState<PermissionState>({});\n\n  const matrix = useMemo(() => mergeResourceMatrix(roles), [roles]);\n  const resources = useMemo(() => Object.keys(matrix).sort(), [matrix]);\n\n  const load = async () => {\n    try {\n      setLoading(true);\n      const [rolesResponse, membersResponse] = await Promise.all([\n        fetchRoles({ includeSystem: true }),\n        fetchOrganizationMembers(),\n      ]);\n      setRoles(rolesResponse.roles);\n      setMembers(membersResponse.members);\n    } catch (error) {\n      const message = error instanceof Error ? error.message : 'Unable to load permissions data';\n      toast.error('Failed to load permissions', undefined, { description: message });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    void load();\n  }, []);\n\n  const resetForm = () => {\n    setRoleName('');\n    setRoleDescription('');\n    setPermissionState({});\n    setSelectedMember('');\n    setEditingRole(null);\n  };\n\n  const openCreateModal = () => {\n    resetForm();\n    setCreateModalOpen(true);\n  };\n\n  const openEditModal = (role: RoleRecord) => {\n    setEditingRole(role);\n    setRoleName(role.name || DEFAULT_ROLE_NAME);\n    setRoleDescription(role.description ?? '');\n    setPermissionState(buildPermissionState(role.permissions || {}));\n    setSelectedMember('');\n    setCreateModalOpen(true);\n  };\n\n  const togglePermission = (resource: string, action: string, checked: boolean) => {\n    setPermissionState((prev) => {\n      const next = { ...prev };\n      if (!next[resource]) {\n        next[resource] = new Set();\n      }\n      if (checked) {\n        next[resource].add(action);\n      } else {\n        next[resource].delete(action);\n      }\n      return next;\n    });\n  };\n\n  const handleSubmitRole = async () => {\n    try {\n      setSaving(true);\n      const payload = {\n        name: roleName || DEFAULT_ROLE_NAME,\n        description: roleDescription || undefined,\n        permissions: exportPermissionState(permissionState),\n      };\n\n      if (editingRole) {\n        await updateRole({ id: editingRole.id, ...payload });\n        toast.success('Role updated');\n      } else {\n        await createRole(payload);\n        toast.success('Role created');\n      }\n\n      setCreateModalOpen(false);\n      resetForm();\n      await load();\n    } catch (error) {\n      const message = error instanceof Error ? error.message : 'Unable to save role';\n      toast.error('Save failed', undefined, { description: message });\n    } finally {\n      setSaving(false);\n    }\n  };\n\n  const handleDeleteRole = async () => {\n    if (!deleteRoleId) return;\n    try {\n      setSaving(true);\n      await deleteRole(deleteRoleId.id);\n      toast.success('Role deleted');\n      setDeleteRoleId(null);\n      await load();\n    } catch (error) {\n      const message = error instanceof Error ? error.message : 'Unable to delete role';\n      toast.error('Delete failed', undefined, { description: message });\n    } finally {\n      setSaving(false);\n    }\n  };\n\n  const selectedMemberName = useMemo(() => {\n    if (!selectedMember) return null;\n    const member = members.find((m) => m.userId === selectedMember);\n    return member?.fullName || member?.email || selectedMember;\n  }, [members, selectedMember]);\n\n  const renderRoleCard = (role: RoleRecord) => {\n    const isSystem = role.isSystem;\n    return (\n      <Card key={role.id} className=\"border\">\n        <CardHeader className=\"flex flex-col gap-sm md:flex-row md:items-start md:justify-between\">\n          <div className=\"space-y-xs\">\n            <div className=\"flex items-center gap-sm\">\n              <CardTitle>{role.name}</CardTitle>\n              {isSystem ? (\n                <Badge variant=\"secondary\">System</Badge>\n              ) : (\n                <Badge variant=\"outline\">Custom</Badge>\n              )}\n            </div>\n            {role.description ? (\n              <p className=\"text-body-sm text-muted-foreground\">{role.description}</p>\n            ) : null}\n            <p className=\"text-body-xs text-muted-foreground\">\n              Assigned Users: {role.assignedUsers ?? 0}\n            </p>\n          </div>\n          <div className=\"flex gap-sm\">\n            <Button\n              variant=\"outline\"\n              onClick={() => openEditModal(role)}\n              disabled={isSystem}\n            >\n              Edit Role\n            </Button>\n            <Button\n              variant=\"outline\"\n              onClick={() => setDeleteRoleId(role)}\n              disabled={isSystem || (role.assignedUsers ?? 0) > 0}\n            >\n              Delete\n            </Button>\n          </div>\n        </CardHeader>\n        <CardContent>\n          <div className=\"overflow-x-auto\">\n            <table className=\"min-w-full border-collapse text-left text-body-sm\">\n              <thead>\n                <tr>\n                  <th className=\"border-b border-border px-sm py-xs\">Resource</th>\n                  <th className=\"border-b border-border px-sm py-xs\">Actions</th>\n                </tr>\n              </thead>\n              <tbody>\n                {Object.entries(role.permissions || {}).map(([resource, actions]) => (\n                  <tr key={resource}>\n                    <td className=\"border-b border-border px-sm py-xs align-top font-medium\">{resource}</td>\n                    <td className=\"border-b border-border px-sm py-xs align-top\">\n                      <div className=\"flex flex-wrap gap-xs\">\n                        {actions.map((action) => (\n                          <Badge key={`${resource}-${action}`} variant=\"outline\">\n                            {action}\n                          </Badge>\n                        ))}\n                      </div>\n                    </td>\n                  </tr>\n                ))}\n                {Object.keys(role.permissions || {}).length === 0 ? (\n                  <tr>\n                    <td colSpan={2} className=\"px-sm py-sm text-muted-foreground\">\n                      No explicit permissions. Role inherits default organization policy.\n                    </td>\n                  </tr>\n                ) : null}\n              </tbody>\n            </table>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  };\n\n  if (loading) {\n    return (\n      <div className=\"space-y-md\">\n        <Skeleton className=\"h-12 w-48\" />\n        <div className=\"space-y-sm\">\n          <Skeleton className=\"h-24 w-full\" />\n          <Skeleton className=\"h-24 w-full\" />\n          <Skeleton className=\"h-24 w-full\" />\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-lg\">\n      <Card>\n        <CardHeader className=\"flex flex-col gap-sm md:flex-row md:items-center md:justify-between\">\n          <div>\n            <CardTitle>Role-Based Access Control</CardTitle>\n            <p className=\"text-body-sm text-muted-foreground\">\n              Manage system and custom roles across GHXSTSHIP. Custom roles let you tailor fine-grained permissions per resource.\n            </p>\n          </div>\n          <Button onClick={openCreateModal}>Create Custom Role</Button>\n        </CardHeader>\n      </Card>\n\n      <div className=\"space-y-md\">\n        {roles.map(renderRoleCard)}\n        {roles.length === 0 ? (\n          <Card>\n            <CardContent className=\"py-lg text-center text-body-sm text-muted-foreground\">\n              No roles found. Create a custom role to get started.\n            </CardContent>\n          </Card>\n        ) : null}\n      </div>\n\n      <Modal\n        open={createModalOpen}\n        onClose={() => {\n          setCreateModalOpen(false);\n          resetForm();\n        }}\n        title={editingRole ? 'Edit Custom Role' : 'Create Custom Role'}\n        description=\"Select the permissions this role should grant across GHXSTSHIP modules.\"\n      >\n        <div className=\"space-y-lg\">\n          <div className=\"space-y-sm\">\n            <Label htmlFor=\"role-name\">Role Name</Label>\n            <Input\n              id=\"role-name\"\n              value={roleName}\n              onChange={(event) => setRoleName(event.target.value)}\n              placeholder=\"e.g. Production Supervisor\"\n            />\n          </div>\n          <div className=\"space-y-sm\">\n            <Label htmlFor=\"role-description\">Description</Label>\n            <Textarea\n              id=\"role-description\"\n              rows={3}\n              value={roleDescription}\n              onChange={(event) => setRoleDescription(event.target.value)}\n              placeholder=\"Describe when to assign this role.\"\n            />\n          </div>\n\n          <div className=\"space-y-md\">\n            <div className=\"flex items-center justify-between\">\n              <Label>Permissions</Label>\n              <p className=\"text-body-xs text-muted-foreground\">\n                Toggle actions per resource. Only checked actions will be granted.\n              </p>\n            </div>\n            <div className=\"space-y-md\">\n              {resources.length === 0 ? (\n                <div className=\"rounded-md border border-dashed border-border px-md py-lg text-center text-body-sm text-muted-foreground\">\n                  No resource matrix detected yet. Create the role with a description first to define permissions.\n                </div>\n              ) : null}\n              {resources.map((resource) => {\n                const actions = Array.from(matrix[resource] ?? []).sort();\n                return (\n                  <div key={resource} className=\"rounded-lg border p-md space-y-sm\">\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center gap-sm\">\n                        <h3 className=\"font-medium capitalize\">{resource.replace(/_/g, ' ')}</h3>\n                        <Badge variant=\"outline\">{actions.length} actions</Badge>\n                      </div>\n                      <Toggle\n                        checked={(permissionState[resource]?.size || 0) === actions.length}\n                        onChange={(event) => {\n                          const checked = event.target.checked;\n                          setPermissionState((prev) => {\n                            const next = { ...prev };\n                            if (!next[resource]) {\n                              next[resource] = new Set();\n                            }\n                            if (checked) {\n                              actions.forEach((action) => next[resource].add(action));\n                            } else {\n                              next[resource].clear();\n                            }\n                            return next;\n                          });\n                        }}\n                      />\n                    </div>\n                    <div className=\"grid grid-cols-2 gap-sm md:grid-cols-3\">\n                      {actions.map((action) => {\n                        const checked = permissionState[resource]?.has(action) ?? false;\n                        return (\n                          <label key={`${resource}-${action}`} className=\"flex items-center gap-xs text-body-sm\">\n                            <Checkbox\n                              checked={checked}\n                              onChange={(event) => togglePermission(resource, action, event.target.checked)}\n                            />\n                            <span className=\"capitalize\">{action.replace(/_/g, ' ')}</span>\n                          </label>\n                        );\n                      })}\n                    </div>\n                  </div>\n                );\n              })}\n            </div>\n          </div>\n\n          <div className=\"space-y-sm\">\n            <Label htmlFor=\"member-preview\">Preview Assignment</Label>\n            <Select value={selectedMember} onValueChange={setSelectedMember}>\n              <SelectTrigger id=\"member-preview\">\n                <SelectValue placeholder=\"Select member to preview\" />\n              </SelectTrigger>\n              <SelectContent>\n                {members.map((member) => (\n                  <SelectItem key={member.userId} value={member.userId}>\n                    {member.fullName || member.email || member.userId}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n            {selectedMemberName ? (\n              <p className=\"text-body-xs text-muted-foreground\">\n                Assigning <strong>{selectedMemberName}</strong> will immediately grant the checked actions.\n              </p>\n            ) : (\n              <p className=\"text-body-xs text-muted-foreground\">\n                Select a member to preview how this role would apply to them.\n              </p>\n            )}\n          </div>\n\n          <div className=\"flex justify-end gap-sm\">\n            <Button\n              variant=\"outline\"\n              onClick={() => {\n                setCreateModalOpen(false);\n                resetForm();\n              }}\n              disabled={saving}\n            >\n              Cancel\n            </Button>\n            <Button onClick={handleSubmitRole} disabled={saving}>\n              {saving ? 'Saving…' : editingRole ? 'Update Role' : 'Create Role'}\n            </Button>\n          </div>\n        </div>\n      </Modal>\n\n      <Modal\n        open={Boolean(deleteRoleId)}\n        onClose={() => setDeleteRoleId(null)}\n        title=\"Delete custom role?\"\n        description=\"Deleting this role removes its permission grants. This cannot be undone.\"\n      >\n        <div className=\"space-y-md\">\n          <p className=\"text-body-sm text-muted-foreground\">\n            Role: <strong>{deleteRoleId?.name}</strong>\n          </p>\n          {deleteRoleId?.assignedUsers ? (\n            <p className=\"text-body-xs text-muted-foreground\">\n              This role is assigned to {deleteRoleId.assignedUsers} users. Reassign them before deletion.\n            </p>\n          ) : null}\n          <div className=\"flex justify-end gap-sm\">\n            <Button variant=\"outline\" onClick={() => setDeleteRoleId(null)} disabled={saving}>\n              Cancel\n            </Button>\n            <Button variant=\"destructive\" onClick={handleDeleteRole} disabled={saving}>\n              {saving ? 'Deleting…' : 'Delete Role'}\n            </Button>\n          </div>\n        </div>\n      </Modal>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ghxstship/apps/web/app/(app)/(shell)/settings/security/SecuritySettingsClient.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'load'. Either include it or remove the dependency array.","line":160,"column":6,"nodeType":"ArrayExpression","endLine":160,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [load]","fix":{"range":[5017,5019],"text":"[load]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\nimport { User, FileText, Settings, Award, Calendar, TrendingUp, Activity, Clock, Plus, Search, Play, Trash2 } from \"lucide-react\";\nimport React, { useEffect, useState } from 'react';\nimport {\n  Badge,\n  Button,\n  Card,\n  CardContent,\n  CardHeader,\n  CardTitle,\n  Input,\n  Label,\n  Modal,\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n  Skeleton,\n  Textarea,\n  Toggle,\n  useToastContext,\n} from '@ghxstship/ui';\nimport {\n  fetchSecuritySettings,\n  generateSecurityBackupCodes,\n  resetSecuritySettings,\n  runSecurityTest,\n  SecurityDeviceRecord,\n  SecurityEventRecord,\n  SecuritySettings,\n  SecuritySettingsResponse,\n  SecuritySessionRecord,\n  updateSecuritySettings,\n} from '@/lib/services/settingsSecurityClient';\n\nconst MFA_METHOD_OPTIONS = [\n  { value: 'totp', label: 'Authenticator App' },\n  { value: 'sms', label: 'SMS' },\n  { value: 'email', label: 'Email' },\n];\n\nconst PASSWORD_POLICY_PRESETS = [\n  {\n    name: 'Strict (Recommended)',\n    value: 'strict',\n    policy: {\n      minLength: 12,\n      requireUppercase: true,\n      requireLowercase: true,\n      requireNumbers: true,\n      requireSpecialChars: true,\n      maxAge: 90,\n      preventReuse: 5,\n    },\n  },\n  {\n    name: 'Moderate',\n    value: 'moderate',\n    policy: {\n      minLength: 10,\n      requireUppercase: true,\n      requireLowercase: true,\n      requireNumbers: true,\n      requireSpecialChars: false,\n      maxAge: 180,\n      preventReuse: 3,\n    },\n  },\n  {\n    name: 'Basic',\n    value: 'basic',\n    policy: {\n      minLength: 8,\n      requireUppercase: false,\n      requireLowercase: true,\n      requireNumbers: true,\n      requireSpecialChars: false,\n      maxAge: 365,\n      preventReuse: 2,\n    },\n  },\n];\n\nconst SESSION_TIMEOUT_OPTIONS = [\n  { label: '15 minutes', value: 900 },\n  { label: '30 minutes', value: 1800 },\n  { label: '1 hour', value: 3600 },\n  { label: '8 hours (workday)', value: 28800 },\n];\n\nfunction ensureSecuritySettings(data?: SecuritySettings): SecuritySettings {\n  return {\n    passwordPolicy: {\n      minLength: data?.passwordPolicy?.minLength ?? 12,\n      requireUppercase: data?.passwordPolicy?.requireUppercase ?? true,\n      requireLowercase: data?.passwordPolicy?.requireLowercase ?? true,\n      requireNumbers: data?.passwordPolicy?.requireNumbers ?? true,\n      requireSpecialChars: data?.passwordPolicy?.requireSpecialChars ?? true,\n      maxAge: data?.passwordPolicy?.maxAge ?? 90,\n      preventReuse: data?.passwordPolicy?.preventReuse ?? 5,\n    },\n    sessionSettings: {\n      maxSessionDuration: data?.sessionSettings?.maxSessionDuration ?? 28800,\n      idleTimeout: data?.sessionSettings?.idleTimeout ?? 1800,\n      requireReauth: data?.sessionSettings?.requireReauth ?? true,\n      maxConcurrentSessions: data?.sessionSettings?.maxConcurrentSessions ?? 3,\n    },\n    mfaSettings: {\n      required: data?.mfaSettings?.required ?? false,\n      allowedMethods: data?.mfaSettings?.allowedMethods ?? ['totp', 'email'],\n      gracePeriod: data?.mfaSettings?.gracePeriod ?? 7,\n    },\n    accessControl: {\n      ipWhitelist: data?.accessControl?.ipWhitelist ?? [],\n      allowedDomains: data?.accessControl?.allowedDomains ?? [],\n      blockSuspiciousActivity: data?.accessControl?.blockSuspiciousActivity ?? true,\n      maxFailedAttempts: data?.accessControl?.maxFailedAttempts ?? 5,\n      lockoutDuration: data?.accessControl?.lockoutDuration ?? 900,\n    },\n    auditSettings: {\n      logAllActions: data?.auditSettings?.logAllActions ?? true,\n      retentionPeriod: data?.auditSettings?.retentionPeriod ?? 365,\n      alertOnSensitiveActions: data?.auditSettings?.alertOnSensitiveActions ?? true,\n      exportEnabled: data?.auditSettings?.exportEnabled ?? true,\n    },\n  };\n}\n\nconst MAX_IPS = 50;\n\nexport default function SecuritySettingsClient() {\n  const { toast } = useToastContext();\n  const [data, setData] = useState<SecuritySettingsResponse | null>(null);\n  const [formState, setFormState] = useState<SecuritySettings>(ensureSecuritySettings());\n  const [loading, setLoading] = useState<boolean>(true);\n  const [saving, setSaving] = useState<boolean>(false);\n  const [testing, setTesting] = useState<boolean>(false);\n  const [testResults, setTestResults] = useState<string | null>(null);\n  const [backupCodes, setBackupCodes] = useState<string[] | null>(null);\n  const [backupCodesModalOpen, setBackupCodesModalOpen] = useState<boolean>(false);\n  const [resetModalOpen, setResetModalOpen] = useState<'all' | 'sessions' | null>(null);\n\n  const load = async () => {\n    try {\n      setLoading(true);\n      const response = await fetchSecuritySettings();\n      setData(response);\n      setFormState(ensureSecuritySettings(response.securitySettings));\n    } catch (error) {\n      const message = error instanceof Error ? error.message : 'Unable to load security settings';\n      toast.error('Failed to load security settings', undefined, { description: message });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    void load();\n  }, []);\n\n  const handlePresetChange = (value: string) => {\n    const preset = PASSWORD_POLICY_PRESETS.find((preset) => preset.value === value);\n    if (!preset) return;\n    setFormState((prev) => ({\n      ...prev,\n      passwordPolicy: {\n        ...prev.passwordPolicy,\n        ...preset.policy,\n      },\n    }));\n  };\n\n  const handleToggle = (path: keyof SecuritySettings, key: string, value: boolean) => {\n    setFormState((prev) => ({\n      ...prev,\n      [path]: {\n        ...(prev[path] as Record<string, unknown>),\n        [key]: value,\n      },\n    }));\n  };\n\n  const handleNumberChange = (path: keyof SecuritySettings, key: string, value: number) => {\n    setFormState((prev) => ({\n      ...prev,\n      [path]: {\n        ...(prev[path] as Record<string, unknown>),\n        [key]: value,\n      },\n    }));\n  };\n\n  const handleArrayChange = (path: keyof SecuritySettings, key: string, value: string[]) => {\n    setFormState((prev) => ({\n      ...prev,\n      [path]: {\n        ...(prev[path] as Record<string, unknown>),\n        [key]: value,\n      },\n    }));\n  };\n\n  const handleWhitelistChange = (value: string) => {\n    const entries = value\n      .split('\\n')\n      .map((line) => line.trim())\n      .filter(Boolean)\n      .slice(0, MAX_IPS);\n    handleArrayChange('accessControl', 'ipWhitelist', entries);\n  };\n\n  const handleAllowDomainChange = (value: string) => {\n    const entries = value\n      .split('\\n')\n      .map((line) => line.trim().toLowerCase())\n      .filter(Boolean)\n      .slice(0, MAX_IPS);\n    handleArrayChange('accessControl', 'allowedDomains', entries);\n  };\n\n  const handleSave = async () => {\n    try {\n      setSaving(true);\n      await updateSecuritySettings(formState);\n      toast.success('Security settings saved');\n      await load();\n    } catch (error) {\n      const message = error instanceof Error ? error.message : 'Unable to save security settings';\n      toast.error('Save failed', undefined, { description: message });\n    } finally {\n      setSaving(false);\n    }\n  };\n\n  const handleRunTest = async () => {\n    try {\n      setTesting(true);\n      const result = await runSecurityTest();\n      setTestResults(\n        `Overall Score: ${result.overallScore}\\nPassword Compliance: ${result.passwordPolicyCompliance ? 'Pass' : 'Fail'}\\nRecommendations:\\n- ${result.recommendations.join('\\n- ')}`\n      );\n      toast.success('Security assessment completed');\n    } catch (error) {\n      const message = error instanceof Error ? error.message : 'Unable to run security assessment';\n      toast.error('Assessment failed', undefined, { description: message });\n    } finally {\n      setTesting(false);\n    }\n  };\n\n  const handleBackupCodes = async () => {\n    try {\n      const codes = await generateSecurityBackupCodes();\n      setBackupCodes(codes);\n      setBackupCodesModalOpen(true);\n      toast.success('Backup codes generated');\n    } catch (error) {\n      const message = error instanceof Error ? error.message : 'Unable to generate backup codes';\n      toast.error('Action failed', undefined, { description: message });\n    }\n  };\n\n  const confirmReset = async (type: 'all' | 'sessions') => {\n    try {\n      setSaving(true);\n      await resetSecuritySettings(type);\n      if (type === 'all') {\n        toast.success('Security settings reset to defaults');\n        await load();\n      } else {\n        toast.success('All sessions terminated');\n      }\n    } catch (error) {\n      const message = error instanceof Error ? error.message : 'Unable to reset security settings';\n      toast.error('Reset failed', undefined, { description: message });\n    } finally {\n      setSaving(false);\n      setResetModalOpen(null);\n    }\n  };\n\n  const currentSettings = ensureSecuritySettings(formState);\n  const metrics = data?.securityMetrics;\n\n  if (loading) {\n    return (\n      <div className=\"space-y-md\">\n        <Skeleton className=\"h-12 w-64\" />\n        <div className=\"grid gap-md md:grid-cols-2\">\n          <Skeleton className=\"h-40 w-full\" />\n          <Skeleton className=\"h-40 w-full\" />\n        </div>\n        <Skeleton className=\"h-40 w-full\" />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-lg\">\n      <Card>\n        <CardHeader className=\"flex flex-col gap-sm md:flex-row md:items-center md:justify-between\">\n          <div>\n            <CardTitle>Organization Security</CardTitle>\n            <p className=\"text-body-sm text-muted-foreground\">\n              Manage password policies, session security, MFA requirements, and access controls for your organization.\n            </p>\n          </div>\n          <div className=\"flex flex-wrap gap-sm\">\n            <Button variant=\"outline\" onClick={handleRunTest} disabled={testing}>\n              {testing ? 'Assessing…' : 'Run Security Assessment'}\n            </Button>\n            <Button variant=\"outline\" onClick={handleBackupCodes}>\n              Generate Backup Codes\n            </Button>\n            <Button variant=\"outline\" onClick={() => void load()} disabled={saving}>\n              Refresh\n            </Button>\n          </div>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid gap-md md:grid-cols-3\">\n            <div className=\"rounded-lg border p-md\">\n              <p className=\"text-body-xs text-muted-foreground\">Failed Logins (24h)</p>\n              <p className=\"text-heading-4\">{metrics?.failedLoginsLast24h ?? 0}</p>\n            </div>\n            <div className=\"rounded-lg border p-md\">\n              <p className=\"text-body-xs text-muted-foreground\">Active Sessions</p>\n              <p className=\"text-heading-4\">{metrics?.activeSessions ?? 0}</p>\n            </div>\n            <div className=\"rounded-lg border p-md\">\n              <p className=\"text-body-xs text-muted-foreground\">Audit Logs (7 days)</p>\n              <p className=\"text-heading-4\">{metrics?.auditLogsLast7Days ?? 0}</p>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {testResults ? (\n        <Card>\n          <CardHeader>\n            <CardTitle>Security Assessment</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <pre className=\"whitespace-pre-wrap rounded-md bg-muted/40 p-md text-body-sm text-muted-foreground\">{testResults}</pre>\n          </CardContent>\n        </Card>\n      ) : null}\n\n      <Card>\n        <CardHeader>\n          <CardTitle>Password Policy</CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-md\">\n          <div className=\"grid gap-md md:grid-cols-2\">\n            <div className=\"space-y-sm\">\n              <Label>Password Policy Preset</Label>\n              <Select onValueChange={handlePresetChange}>\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Select preset\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {PASSWORD_POLICY_PRESETS.map((preset) => (\n                    <SelectItem key={preset.value} value={preset.value}>\n                      {preset.name}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n              <p className=\"text-body-xs text-muted-foreground\">\n                Pick a preset to quickly align with recommended security posture.\n              </p>\n            </div>\n            <div className=\"space-y-sm\">\n              <Label htmlFor=\"min-length\">Minimum Length</Label>\n              <Input\n                id=\"min-length\"\n                type=\"number\"\n                min={8}\n                max={128}\n                value={currentSettings.passwordPolicy?.minLength ?? 12}\n                onChange={(event) =>\n                  handleNumberChange('passwordPolicy', 'minLength', Number(event.target.value))\n                }\n              />\n            </div>\n          </div>\n\n          <div className=\"grid gap-sm md:grid-cols-2\">\n            <div className=\"flex items-center justify-between\">\n              <Label htmlFor=\"require-uppercase\">Require Uppercase</Label>\n              <Toggle\n                id=\"require-uppercase\"\n                checked={currentSettings.passwordPolicy?.requireUppercase ?? true}\n                onChange={(event) =>\n                  handleToggle('passwordPolicy', 'requireUppercase', event.target.checked)\n                }\n              />\n            </div>\n            <div className=\"flex items-center justify-between\">\n              <Label htmlFor=\"require-lowercase\">Require Lowercase</Label>\n              <Toggle\n                id=\"require-lowercase\"\n                checked={currentSettings.passwordPolicy?.requireLowercase ?? true}\n                onChange={(event) =>\n                  handleToggle('passwordPolicy', 'requireLowercase', event.target.checked)\n                }\n              />\n            </div>\n            <div className=\"flex items-center justify-between\">\n              <Label htmlFor=\"require-numbers\">Require Numbers</Label>\n              <Toggle\n                id=\"require-numbers\"\n                checked={currentSettings.passwordPolicy?.requireNumbers ?? true}\n                onChange={(event) =>\n                  handleToggle('passwordPolicy', 'requireNumbers', event.target.checked)\n                }\n              />\n            </div>\n            <div className=\"flex items-center justify-between\">\n              <Label htmlFor=\"require-special\">Require Special Characters</Label>\n              <Toggle\n                id=\"require-special\"\n                checked={currentSettings.passwordPolicy?.requireSpecialChars ?? true}\n                onChange={(event) =>\n                  handleToggle('passwordPolicy', 'requireSpecialChars', event.target.checked)\n                }\n              />\n            </div>\n          </div>\n\n          <div className=\"grid gap-md md:grid-cols-3\">\n            <div className=\"space-y-sm\">\n              <Label htmlFor=\"max-age\">Maximum Password Age (days)</Label>\n              <Input\n                id=\"max-age\"\n                type=\"number\"\n                min={0}\n                max={365}\n                value={currentSettings.passwordPolicy?.maxAge ?? 90}\n                onChange={(event) =>\n                  handleNumberChange('passwordPolicy', 'maxAge', Number(event.target.value))\n                }\n              />\n            </div>\n            <div className=\"space-y-sm\">\n              <Label htmlFor=\"prevent-reuse\">Prevent Reuse (Previous passwords)</Label>\n              <Input\n                id=\"prevent-reuse\"\n                type=\"number\"\n                min={0}\n                max={24}\n                value={currentSettings.passwordPolicy?.preventReuse ?? 5}\n                onChange={(event) =>\n                  handleNumberChange('passwordPolicy', 'preventReuse', Number(event.target.value))\n                }\n              />\n            </div>\n            <div className=\"space-y-sm\">\n              <Label htmlFor=\"session-timeout\">Idle Timeout</Label>\n              <Select\n                value={String(currentSettings.sessionSettings?.idleTimeout ?? 1800)}\n                onValueChange={(value) =>\n                  handleNumberChange('sessionSettings', 'idleTimeout', Number(value))\n                }\n              >\n                <SelectTrigger id=\"session-timeout\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  {SESSION_TIMEOUT_OPTIONS.map((option) => (\n                    <SelectItem key={option.value} value={String(option.value)}>\n                      {option.label}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      <Card>\n        <CardHeader>\n          <CardTitle>Multi-Factor Authentication</CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-md\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"space-y-xs\">\n              <Label>Require MFA</Label>\n              <p className=\"text-body-xs text-muted-foreground\">\n                Enforce MFA for all members to access the platform.\n              </p>\n            </div>\n            <Toggle\n              checked={currentSettings.mfaSettings?.required ?? false}\n              onChange={(event) => handleToggle('mfaSettings', 'required', event.target.checked)}\n            />\n          </div>\n\n          <div className=\"space-y-sm\">\n            <Label htmlFor=\"allowed-methods\">Allowed Methods</Label>\n            <div className=\"grid gap-sm md:grid-cols-3\">\n              {MFA_METHOD_OPTIONS.map((option) => {\n                const checked = currentSettings.mfaSettings?.allowedMethods?.includes(\n                  option.value\n                );\n                return (\n                  <label key={option.value} className=\"flex items-center gap-xs text-body-sm\">\n                    <input\n                      type=\"checkbox\"\n                      checked={checked}\n                      onChange={() => {\n                        const methods = currentSettings.mfaSettings?.allowedMethods || [];\n                        const newMethods = checked\n                          ? methods.filter(m => m !== option.value)\n                          : [...methods, option.value];\n                        setCurrentSettings({\n                          ...currentSettings,\n                          mfaSettings: {\n                            ...currentSettings.mfaSettings,\n                            allowedMethods: newMethods\n                          }\n                        });\n                      }}\n                    />\n                    {option.label}\n                  </label>\n                );\n              })}\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ghxstship/apps/web/app/(app)/(shell)/settings/teams/InviteMemberClient.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'fetchDomains', 'fetchInvites', and 'fetchUsage'. Either include them or remove the dependency array.","line":73,"column":6,"nodeType":"ArrayExpression","endLine":73,"endColumn":13,"suggestions":[{"desc":"Update the dependencies array to be: [fetchDomains, fetchInvites, fetchUsage, orgId]","fix":{"range":[2906,2913],"text":"[fetchDomains, fetchInvites, fetchUsage, orgId]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useEffect, useMemo, useState } from 'react';\nimport { Button, UnifiedInput } from '@ghxstship/ui';\nimport Link from 'next/link';\nimport { tryCatch, Result, reportError } from '@ghxstship/ui/utils/error-handling';\n\nconst ROLES = ['viewer', 'contributor', 'manager', 'admin'] as const;\n\ntype Invite = { id: string; email: string; role: string; status: string; created_at: string };\n\ntype Props = { orgId: string; role?: string };\n\nexport default function InviteMemberClient({ orgId, role }: Props) {\n  const canManage = role === 'owner' || role === 'admin';\n  const [email, setEmail] = useState('');\n  const [inviteRole, setInviteRole] = useState<typeof ROLES[number]>('contributor');\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [result, setResult] = useState<string | null>(null);\n  const [invites, setInvites] = useState<Invite[]>([]);\n  const [usage, setUsage] = useState<{ seat_policy: string; seats_limit: number | null; active_count: number } | null>(null);\n  const [domains, setDomains] = useState<Array<{ id: string; domain: string; status: string }>>([]);\n  const [bulkText, setBulkText] = useState('');\n  const [bulkRole, setBulkRole] = useState<typeof ROLES[number]>('contributor');\n\n  const validEmail = useMemo(() => /.+@.+\\..+/.test(email), [email]);\n  const emailDomain = useMemo(() => {\n    const m = email.toLowerCase().match(/@([a-z0-9.-]+\\.[a-z]{2,})$/i);\n    return m ? m[1] : '';\n  }, [email]);\n  const domainRecord = useMemo(() => domains.find((d: unknown) => d.domain === emailDomain), [domains, emailDomain]);\n\n  async function fetchInvites() {\n    setError(null);\n    const resResult = await tryCatch(async () => fetch(`/api/organizations/${orgId}/invites`, { cache: 'no-store' }));\nif (!resResult.success) {\n  reportError(resResult.error);\n  throw new Error(resResult.error.message);\n}\nconst res = resResult.data;\n    const data = await res.json();\n    if (!res.ok) return setError(data?.error || 'Failed to load invites');\n    setInvites(data.invites || []);\n  }\n\n  async function fetchUsage() {\n    const resResult = await tryCatch(async () => fetch(`/api/organizations/${orgId}/memberships/usage`, { cache: 'no-store' }));\nif (!resResult.success) {\n  reportError(resResult.error);\n  throw new Error(resResult.error.message);\n}\nconst res = resResult.data;\n    const data = await res.json();\n    if (res.ok) setUsage(data);\n  }\n\n  async function fetchDomains() {\n    const resResult = await tryCatch(async () => fetch(`/api/organizations/${orgId}/domains`, { cache: 'no-store' }));\nif (!resResult.success) {\n  reportError(resResult.error);\n  throw new Error(resResult.error.message);\n}\nconst res = resResult.data;\n    const data = await res.json();\n    if (res.ok) setDomains(data.domains || []);\n  }\n\n  useEffect(() => {\n    fetchInvites();\n    fetchUsage();\n    fetchDomains();\n  }, [orgId]);\n\n  async function submit(mode: 'invite' | 'addExisting') {\n    setLoading(true); setError(null); setResult(null);\n    try {\n      const resResult = await tryCatch(async () =>\n        fetch(`/api/organizations/${orgId}/memberships`, {\n          method: 'POST',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify({ email, role: inviteRole, mode })\n        })\n      );\n      if (!resResult.success) {\n        reportError(resResult.error);\n        throw new Error(resResult.error.message);\n      }\n      const res = resResult.data;\n      const data = await res.json();\n      if (!res.ok) throw new Error(data?.error || 'Request failed');\n      setResult(mode === 'invite' ? `Invite sent to ${data?.email || email}` : 'Member added');\n      setEmail('');\n      await Promise.all([fetchInvites(), fetchUsage()]);\n    } catch (e) {\n      setError(e?.message || 'Unknown error');\n    } finally {\n      setLoading(false);\n    }\n  }\n\n  async function resendInvite(id: string) {\n    setLoading(true); setError(null); setResult(null);\n    try {\n      const resResult = await tryCatch(async () =>\n        fetch(`/api/organizations/${orgId}/invites`, {\n          method: 'POST',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify({ id, action: 'resend' })\n        })\n      );\n      if (!resResult.success) {\n        reportError(resResult.error);\n        throw new Error(resResult.error.message);\n      }\n      const res = resResult.data;\n      const data = await res.json();\n      if (!res.ok) throw new Error(data?.error || 'Failed to resend');\n      setResult('Invite resent');\n    } catch (e) {\n      setError(e?.message || 'Unknown error');\n    } finally {\n      setLoading(false);\n    }\n  }\n\n  async function revokeInvite(id: string) {\n    setLoading(true); setError(null); setResult(null);\n    const prev = invites;\n    setInvites(prev.map((i: unknown) => (i.id === id ? { ...i, status: 'revoked' } : i)));\n    try {\n      const resResult = await tryCatch(async () =>\n        fetch(`/api/organizations/${orgId}/invites`, {\n          method: 'DELETE',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify({ id })\n        })\n      );\n      if (!resResult.success) {\n        reportError(resResult.error);\n        throw new Error(resResult.error.message);\n      }\n      const res = resResult.data;\n      const data = await res.json();\n      if (!res.ok) throw new Error(data?.error || 'Failed to revoke');\n    } catch (e) {\n      setError(e?.message || 'Unknown error');\n      setInvites((prev: unknown) => prev);\n    } finally {\n      setLoading(false);\n    }\n  }\n\n  function parseBulk(text: string): string[] {\n    return Array.from(new Set(\n      text\n        .split(/[\\s,;]+/)\n        .map((s: unknown) => s.trim())\n        .filter((s: unknown) => /.+@.+\\..+/.test(s))\n    ));\n  }\n\n  async function submitBulk() {\n    const emails = parseBulk(bulkText);\n    if (emails.length === 0) return;\n    setLoading(true); setError(null); setResult(null);\n    let success = 0; let failed = 0;\n    for (const e of emails) {\n      try {\n        const resResult = await tryCatch(async () =>\n          fetch(`/api/organizations/${orgId}/memberships`, {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({ email: e, role: bulkRole, mode: 'invite' })\n          })\n        );\n        if (!resResult.success) {\n          reportError(resResult.error);\n          throw new Error(resResult.error.message);\n        }\n        const res = resResult.data;\n        if (!res.ok) failed++; else success++;\n      } catch {\n        failed++;\n      }\n    }\n    await Promise.all([fetchInvites(), fetchUsage()]);\n    setLoading(false);\n    setResult(`Bulk invites complete: ${success} sent, ${failed} failed`);\n  }\n\n  const renderUsageInfo = () => {\n    if (!usage) {\n      return <div className=\"color-foreground/60\">Loading seat usage…</div>;\n    }\n\n    if (usage.seat_policy === 'domain-unlimited') {\n      return (\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <span className=\"form-label\">Seat policy:</span> Domain-unlimited\n          </div>\n          <div className=\"color-foreground/70\">Active members: {usage.active_count}</div>\n        </div>\n      );\n    }\n\n    return (\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <span className=\"form-label\">Seat policy:</span> Per-user\n        </div>\n        <div className=\"color-foreground/70\">\n          Active members: {usage.active_count}\n          {usage.seats_limit != null && ` / ${usage.seats_limit}`}\n        </div>\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"stack-lg\">\n      <div className=\"rounded-md border bg-secondary/30 p-sm text-body-sm\">\n        {renderUsageInfo()}\n      </div>\n\n      <div className=\"stack-sm\">\n        <div className=\"text-body-sm color-foreground/70\">\n          Invite teammates by email. Team plan supports unlimited seats for emails matching your active organization domains.\n        </div>\n        <div className=\"flex flex-col gap-sm sm:flex-row sm:items-center\">\n          <UnifiedInput\n            type=\"email\"\n            value={email}\n            onChange={(e: React.ChangeEvent<HTMLInputElement>) => setEmail(e.target.value)}\n            placeholder=\"teammate@company.com\"\n            variant={error ? 'error' : 'default'}\n            error={error || undefined}\n          />\n          <select\n            value={inviteRole}\n            onChange={(e: React.ChangeEvent<HTMLInputElement>) => setInviteRole(e.target.value)}\n            className=\"h-10 rounded-md border bg-background  px-md text-body-sm\"\n          >\n            {ROLES.map((r: unknown) => (\n              <option key={r} value={r}>{r}</option>\n            ))}\n          </select>\n          {canManage ? (\n            <div className=\"flex gap-sm\">\n              <Button onClick={() => submit('invite')} disabled={loading || !validEmail}>Invite</Button>\n              <Button variant=\"outline\" onClick={() => submit('addExisting')} disabled={loading || !validEmail}>Add Existing</Button>\n            </div>\n          ) : (\n            <div className=\"text-body-sm color-foreground/60\">Only owners and admins can send invites.</div>\n          )}\n        </div>\n        {emailDomain ? (\n          <div className=\"text-body-sm flex items-center gap-sm\">\n            {domainRecord && domainRecord.status === 'active' ? (\n              <span className=\"color-success\">Domain matches active organization domain — seat not counted.</span>\n            ) : domainRecord && domainRecord.status === 'pending' ? (\n              <span className=\"color-warning\">Domain is pending verification — may not count toward domain-unlimited yet.</span>\n            ) : (\n              <>\n                <span className=\"color-foreground/60\">External domain — will count against seat limit if enforced.</span>\n                <Link\n                  href=\"#\"\n                  title=\"Add your organization email domain(s). When seat policy is domain-unlimited, invites matching active domains do not consume seats.\"\n                  className=\"inline-flex items-center rounded-md border  px-md py-xs text-[11px] hover:bg-secondary/50\"\n                >\n                  Manage domains\n                </Link>\n              </>\n            )}\n          </div>\n        ) : null}\n        {error ? <div className=\"text-body-sm color-destructive\">{error}</div> : null}\n        {result ? <div className=\"text-body-sm color-success\">{result}</div> : null}\n      </div>\n\n      <div className=\"stack-sm\">\n        <div className=\"text-body-sm form-label\">Bulk invites</div>\n        <div className=\"text-body-sm color-foreground/70\">Paste a list of emails (comma, space, or newline separated).</div>\n        <textarea\n          value={bulkText}\n          onChange={(e: React.ChangeEvent<HTMLInputElement>) => setBulkText(e.target.value)}\n          rows={4}\n          className=\"w-full rounded-md border bg-background  px-md py-sm text-body-sm focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring\"\n          placeholder=\"user1@company.com, user2@company.com\\nuser3@other.com\"\n        />\n        <div className=\"flex items-center gap-sm\">\n          <span className=\"text-body-sm color-foreground/60\">Role for all:</span>\n          <select\n            value={bulkRole}\n            onChange={(e: React.ChangeEvent<HTMLInputElement>) => setBulkRole(e.target.value)}\n            className=\"h-9 rounded-md border bg-background  px-md text-body-sm\"\n          >\n            {ROLES.map((r: unknown) => (\n              <option key={r} value={r}>{r}</option>\n            ))}\n          </select>\n          <Button onClick={submitBulk} disabled={loading || parseBulk(bulkText).length === 0 || !canManage}>Invite All</Button>\n          <div className=\"text-body-sm color-foreground/60\">Detected: {parseBulk(bulkText).length} email(s)</div>\n        </div>\n      </div>\n\n      <div className=\"rounded-md border\">\n        <table className=\"w-full text-body-sm\">\n          <thead>\n            <tr className=\"bg-secondary/40\">\n              <th className=\" px-md py-sm text-left\">Email</th>\n              <th className=\" px-md py-sm text-left\">Role</th>\n              <th className=\" px-md py-sm text-left\">Status</th>\n              <th className=\" px-md py-sm text-right\">Actions</th>\n            </tr>\n          </thead>\n          <tbody>\n            {invites.map((inv: unknown) => (\n              <tr key={inv.id} className=\"border-t\">\n                <td className=\" px-md py-sm\">{inv.email}</td>\n                <td className=\" px-md py-sm\">{inv.role}</td>\n                <td className=\" px-md py-sm\">\n                  <span className={\n                    `inline-flex items-center rounded-full px-sm py-0.5 text-body-sm ` +\n                    (inv.status === 'pending' ? 'bg-warning/10 color-warning' :\n                     inv.status === 'accepted' ? 'bg-success/10 color-success' :\n                     inv.status === 'revoked' ? 'bg-secondary/10 color-muted' :\n                     'bg-secondary/10 color-muted')\n                  }>\n                    {inv.status}\n                  </span>\n                </td>\n                <td className=\" px-md py-sm text-right cluster-sm\">\n                  <Button onClick={() => resendInvite(inv.id)} disabled={loading || !canManage || inv.status !== 'pending'}>\n                    Resend\n                  </Button>\n                  <Button onClick={() => revokeInvite(inv.id)} disabled={loading || !canManage || inv.status !== 'pending'}>\n                    Revoke\n                  </Button>\n                </td>\n              </tr>\n            ))}\n            {invites.length === 0 ? (\n              <tr>\n                <td className=\" px-md py-lg text-center color-foreground/60\" colSpan={4}>No invites yet.</td>\n              </tr>\n            ) : null}\n          </tbody>\n        </table>\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ghxstship/apps/web/app/(app)/(shell)/settings/teams/TeamsClient.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useMemo has a missing dependency: 'handleExport'. Either include it or remove the dependency array.","line":202,"column":7,"nodeType":"ArrayExpression","endLine":202,"endColumn":72,"suggestions":[{"desc":"Update the dependencies array to be: [currentView, records, searchParams, loadRecords, loadStatistics, handleExport]","fix":{"range":[4900,4965],"text":"[currentView, records, searchParams, loadRecords, loadStatistics, handleExport]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { Users, UserPlus, Mail, Shield, RefreshCw, Download, Settings } from \"lucide-react\";\nimport { useState, useEffect, useCallback, useMemo } from 'react';\nimport {\n  DataViewProvider,\n  StateManagerProvider,\n  Button,\n  useToastContext,\n  Tabs,\n  TabsContent,\n  TabsList,\n  TabsTrigger,\n  Card,\n  CardContent,\n  Badge,\n} from '@ghxstship/ui';\nimport type { \n  TeamRecord, \n  TeamViewConfig, \n  TeamFieldConfig,\n  TeamStatistics,\n  TeamSearchParams,\n  TeamsClientProps,\n  ROLE_CONFIGS,\n} from './types';\nimport { teamsService } from './lib/teams-service';\n\n// Field configuration for ATLVS DataViews\nconst fieldConfig: TeamFieldConfig[] = [\n  {\n    key: 'id',\n    label: 'ID',\n    type: 'text',\n    width: 100,\n    sortable: true,\n    filterable: false\n  },\n  {\n    key: 'name',\n    label: 'Name',\n    type: 'text',\n    width: 200,\n    sortable: true,\n    filterable: true,\n    required: true\n  },\n  {\n    key: 'email',\n    label: 'Email',\n    type: 'text',\n    width: 250,\n    sortable: true,\n    filterable: true,\n    required: true\n  },\n  {\n    key: 'role',\n    label: 'Role',\n    type: 'select',\n    width: 120,\n    sortable: true,\n    filterable: true,\n    options: [\n      { value: 'owner', label: 'Owner' },\n      { value: 'admin', label: 'Admin' },\n      { value: 'manager', label: 'Manager' },\n      { value: 'member', label: 'Member' },\n      { value: 'viewer', label: 'Viewer' }\n    ]\n  },\n  {\n    key: 'status',\n    label: 'Status',\n    type: 'select',\n    width: 100,\n    sortable: true,\n    filterable: true,\n    options: [\n      { value: 'active', label: 'Active' },\n      { value: 'inactive', label: 'Inactive' },\n      { value: 'suspended', label: 'Suspended' },\n      { value: 'pending', label: 'Pending' }\n    ]\n  },\n  {\n    key: 'description',\n    label: 'Description',\n    type: 'textarea',\n    width: 300,\n    sortable: false,\n    filterable: true\n  },\n  {\n    key: 'category',\n    label: 'Category',\n    type: 'select',\n    width: 120,\n    sortable: true,\n    filterable: true,\n    options: [\n      { value: 'members', label: 'Members' },\n      { value: 'invitations', label: 'Invitations' },\n      { value: 'roles', label: 'Roles' },\n      { value: 'permissions', label: 'Permissions' }\n    ]\n  },\n  {\n    key: 'created_at',\n    label: 'Created',\n    type: 'date',\n    width: 150,\n    sortable: true,\n    filterable: true\n  },\n  {\n    key: 'updated_at',\n    label: 'Updated',\n    type: 'date',\n    width: 150,\n    sortable: true,\n    filterable: true\n  }\n];\n\nexport default function TeamsClient({ userId, orgId }: TeamsClientProps) {\n  const { toast } = useToastContext();\n  \n  // State management\n  const [records, setRecords] = useState<TeamRecord[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [selectedRecords, setSelectedRecords] = useState<string[]>([]);\n  const [statistics, setStatistics] = useState<TeamStatistics | null>(null);\n  \n  // View state\n  const [currentView, setCurrentView] = useState<'grid' | 'list'>('grid');\n  const [searchParams, setSearchParams] = useState<TeamSearchParams>({});\n  const [activeTab, setActiveTab] = useState('overview');\n\n  // Load team records\n  const loadRecords = useCallback(async (params?: TeamSearchParams) => {\n    try {\n      setLoading(true);\n      setError(null);\n      const data = await teamsService.getTeamRecords(params);\n      setRecords(data);\n    } catch (err) {\n      const message = err instanceof Error ? err.message : 'Failed to load team records';\n      setError(message);\n      toast.error(message);\n    } finally {\n      setLoading(false);\n    }\n  }, [toast]);\n\n  // Load statistics\n  const loadStatistics = useCallback(async () => {\n    try {\n      const stats = await teamsService.getStatistics();\n      setStatistics(stats);\n    } catch (err) {\n      console.error('Failed to load statistics:', err);\n    }\n  }, []);\n\n  // Initial data load\n  useEffect(() => {\n    loadRecords();\n    loadStatistics();\n  }, [loadRecords, loadStatistics]);\n\n  // ATLVS DataViews configuration\n  const dataViewConfig: TeamViewConfig = useMemo(() => ({\n    id: 'teams',\n    name: 'Team Management',\n    viewType: currentView,\n    defaultView: 'grid',\n    fields: fieldConfig,\n    data: records,\n    onSearch: async (query: string) => {\n      const params = { ...searchParams, query };\n      setSearchParams(params);\n      await loadRecords(params);\n    },\n    onFilter: async (filters: unknown) => {\n      const params = { ...searchParams, ...filters };\n      setSearchParams(params);\n      await loadRecords(params);\n    },\n    onSort: async (sorts: unknown) => {\n      console.log('Sort records:', sorts);\n    },\n    onRefresh: async () => {\n      await loadRecords(searchParams);\n      await loadStatistics();\n      return records;\n    },\n    onExport: (data: any, format: unknown) => {\n      handleExport(format);\n    },\n  }), [currentView, records, searchParams, loadRecords, loadStatistics]);\n\n  // Event handlers\n  const handleExport = async (format: 'csv' | 'json') => {\n    try {\n      const blob = await teamsService.exportRecords({\n        format,\n        includeMetadata: true,\n      });\n\n      const url = URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.href = url;\n      a.download = `team-records.${format}`;\n      document.body.appendChild(a);\n      a.click();\n      document.body.removeChild(a);\n      URL.revokeObjectURL(url);\n\n      toast.success(`Records exported as ${format.toUpperCase()}`);\n    } catch (err) {\n      const message = err instanceof Error ? err.message : 'Failed to export records';\n      toast.error(message);\n    }\n  };\n\n  const handleRefresh = async () => {\n    await loadRecords(searchParams);\n    await loadStatistics();\n  };\n\n  // View switcher component\n  const ViewSwitcher = () => (\n    <div className=\"flex items-center gap-2\">\n      <Button\n        variant={currentView === 'grid' ? 'default' : 'outline'}\n        size=\"sm\"\n        onClick={() => setCurrentView('grid')}\n      >\n        Grid\n      </Button>\n      <Button\n        variant={currentView === 'list' ? 'default' : 'outline'}\n        size=\"sm\"\n        onClick={() => setCurrentView('list')}\n      >\n        List\n      </Button>\n    </div>\n  );\n\n  // Simple grid view for teams (since we're focusing on architecture completion)\n  const renderTeamGrid = () => {\n    if (loading) {\n      return (\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n          {[...Array(6)].map((_, i) => (\n            <Card key={i} className=\"animate-pulse\">\n              <CardContent className=\"p-6\">\n                <div className=\"h-4 bg-muted rounded w-3/4 mb-2\"></div>\n                <div className=\"h-3 bg-muted rounded w-1/2\"></div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      );\n    }\n\n    const memberRecords = records.filter(r => r.type === 'member');\n    const inviteRecords = records.filter(r => r.type === 'invite');\n\n    return (\n      <div className=\"space-y-6\">\n        {/* Members Section */}\n        <div>\n          <h3 className=\"text-lg font-semibold mb-4\">Team Members ({memberRecords.length})</h3>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n            {memberRecords.map((record) => (\n              <Card key={record.id} className=\"hover:shadow-md transition-shadow\">\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-start justify-between mb-3\">\n                    <div>\n                      <h4 className=\"font-medium\">{record.name}</h4>\n                      <p className=\"text-sm text-muted-foreground\">{record.email}</p>\n                    </div>\n                    <Badge variant=\"outline\">{record.role}</Badge>\n                  </div>\n                  <div className=\"space-y-2\">\n                    <div className=\"flex items-center justify-between text-sm\">\n                      <span>Status:</span>\n                      <Badge variant={record.status === 'active' ? 'default' : 'secondary'}>\n                        {record.status}\n                      </Badge>\n                    </div>\n                    <p className=\"text-xs text-muted-foreground\">{record.description}</p>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </div>\n\n        {/* Invitations Section */}\n        {inviteRecords.length > 0 && (\n          <div>\n            <h3 className=\"text-lg font-semibold mb-4\">Pending Invitations ({inviteRecords.length})</h3>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n              {inviteRecords.map((record) => (\n                <Card key={record.id} className=\"hover:shadow-md transition-shadow border-dashed\">\n                  <CardContent className=\"p-6\">\n                    <div className=\"flex items-start justify-between mb-3\">\n                      <div>\n                        <h4 className=\"font-medium\">{record.email}</h4>\n                        <p className=\"text-sm text-muted-foreground\">Invited as {record.role}</p>\n                      </div>\n                      <Badge variant=\"outline\">{record.status}</Badge>\n                    </div>\n                    <p className=\"text-xs text-muted-foreground\">{record.description}</p>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          </div>\n        )}\n      </div>\n    );\n  };\n\n  if (error) {\n    return (\n      <div className=\"flex items-center justify-center h-96\">\n        <div className=\"text-center\">\n          <p className=\"text-destructive mb-4\">{error}</p>\n          <Button onClick={() => loadRecords()}>\n            <RefreshCw className=\"h-4 w-4 mr-2\" />\n            Retry\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <DataViewProvider config={dataViewConfig}>\n      <StateManagerProvider>\n        <div className=\"space-y-6\">\n          {/* Header */}\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h1 className=\"text-3xl font-bold\">Team Management</h1>\n              <p className=\"text-muted-foreground mt-1\">\n                Manage team members, invitations, and roles\n              </p>\n            </div>\n            <div className=\"flex items-center gap-3\">\n              <Button variant=\"outline\" onClick={handleRefresh} disabled={loading}>\n                <RefreshCw className=\"h-4 w-4 mr-2\" />\n                Refresh\n              </Button>\n              <Button variant=\"outline\" onClick={() => handleExport('csv')}>\n                <Download className=\"h-4 w-4 mr-2\" />\n                Export\n              </Button>\n              <Button>\n                <UserPlus className=\"h-4 w-4 mr-2\" />\n                Invite Member\n              </Button>\n            </div>\n          </div>\n\n          {/* Statistics */}\n          {statistics && (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n              <div className=\"bg-card p-4 rounded-lg border\">\n                <div className=\"flex items-center gap-2 mb-2\">\n                  <Users className=\"h-5 w-5 text-blue-600\" />\n                  <div className=\"text-sm font-medium\">Total Members</div>\n                </div>\n                <div className=\"text-2xl font-bold\">{statistics.totalMembers}</div>\n                <div className=\"text-xs text-muted-foreground\">\n                  {statistics.activeMembers} active\n                </div>\n              </div>\n              <div className=\"bg-card p-4 rounded-lg border\">\n                <div className=\"flex items-center gap-2 mb-2\">\n                  <Mail className=\"h-5 w-5 text-green-600\" />\n                  <div className=\"text-sm font-medium\">Pending Invites</div>\n                </div>\n                <div className=\"text-2xl font-bold\">{statistics.pendingInvites}</div>\n                <div className=\"text-xs text-muted-foreground\">\n                  awaiting response\n                </div>\n              </div>\n              <div className=\"bg-card p-4 rounded-lg border\">\n                <div className=\"flex items-center gap-2 mb-2\">\n                  <UserPlus className=\"h-5 w-5 text-purple-600\" />\n                  <div className=\"text-sm font-medium\">Recent Joins</div>\n                </div>\n                <div className=\"text-2xl font-bold\">{statistics.recentJoins}</div>\n                <div className=\"text-xs text-muted-foreground\">\n                  last 30 days\n                </div>\n              </div>\n              <div className=\"bg-card p-4 rounded-lg border\">\n                <div className=\"flex items-center gap-2 mb-2\">\n                  <Shield className=\"h-5 w-5 text-orange-600\" />\n                  <div className=\"text-sm font-medium\">Avg Response</div>\n                </div>\n                <div className=\"text-2xl font-bold\">{statistics.averageResponseTime}h</div>\n                <div className=\"text-xs text-muted-foreground\">\n                  invite acceptance\n                </div>\n              </div>\n            </div>\n          )}\n\n          {/* Tab Navigation */}\n          <Tabs value={activeTab} onValueChange={setActiveTab}>\n            <TabsList className=\"grid w-full grid-cols-4\">\n              <TabsTrigger value=\"overview\">\n                <Users className=\"h-4 w-4 mr-2\" />\n                Overview\n              </TabsTrigger>\n              <TabsTrigger value=\"members\">\n                <Users className=\"h-4 w-4 mr-2\" />\n                Members\n              </TabsTrigger>\n              <TabsTrigger value=\"invitations\">\n                <Mail className=\"h-4 w-4 mr-2\" />\n                Invitations\n              </TabsTrigger>\n              <TabsTrigger value=\"settings\">\n                <Settings className=\"h-4 w-4 mr-2\" />\n                Settings\n              </TabsTrigger>\n            </TabsList>\n\n            <TabsContent value=\"overview\" className=\"space-y-4\">\n              {/* View Controls */}\n              <div className=\"flex items-center justify-between\">\n                <ViewSwitcher />\n                <div className=\"flex items-center gap-2\">\n                  {selectedRecords.length > 0 && (\n                    <Button variant=\"destructive\" size=\"sm\">\n                      Delete ({selectedRecords.length})\n                    </Button>\n                  )}\n                </div>\n              </div>\n\n              {/* Main Content */}\n              {renderTeamGrid()}\n            </TabsContent>\n\n            <TabsContent value=\"members\" className=\"space-y-4\">\n              <div className=\"bg-card p-8 rounded-lg border text-center\">\n                <Users className=\"h-12 w-12 mx-auto mb-4 text-muted-foreground\" />\n                <h3 className=\"text-lg font-semibold mb-2\">Team Members</h3>\n                <p className=\"text-muted-foreground mb-4\">\n                  Member management is available through the overview interface above.\n                </p>\n                <Button onClick={() => setActiveTab('overview')}>\n                  Go to Overview\n                </Button>\n              </div>\n            </TabsContent>\n\n            <TabsContent value=\"invitations\" className=\"space-y-4\">\n              <div className=\"bg-card p-8 rounded-lg border text-center\">\n                <Mail className=\"h-12 w-12 mx-auto mb-4 text-muted-foreground\" />\n                <h3 className=\"text-lg font-semibold mb-2\">Team Invitations</h3>\n                <p className=\"text-muted-foreground mb-4\">\n                  Invitation management is available through the overview interface above.\n                </p>\n                <Button onClick={() => setActiveTab('overview')}>\n                  Go to Overview\n                </Button>\n              </div>\n            </TabsContent>\n\n            <TabsContent value=\"settings\" className=\"space-y-4\">\n              <div className=\"bg-card p-8 rounded-lg border text-center\">\n                <Settings className=\"h-12 w-12 mx-auto mb-4 text-muted-foreground\" />\n                <h3 className=\"text-lg font-semibold mb-2\">Team Settings</h3>\n                <p className=\"text-muted-foreground mb-4\">\n                  Team settings configuration will be available in a future update.\n                </p>\n                <Button onClick={() => setActiveTab('overview')}>\n                  Go to Overview\n                </Button>\n              </div>\n            </TabsContent>\n          </Tabs>\n        </div>\n      </StateManagerProvider>\n    </DataViewProvider>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ghxstship/apps/web/app/(app)/(shell)/settings/teams/TeamsSettingsClient.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'load'. Either include it or remove the dependency array.","line":87,"column":6,"nodeType":"ArrayExpression","endLine":87,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [load]","fix":{"range":[2294,2296],"text":"[load]"}}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":181,"column":61,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[5414,5516],"text":"\n              Members with verified organization domains don&apos;t count toward seat limits.\n            "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[5414,5516],"text":"\n              Members with verified organization domains don&lsquo;t count toward seat limits.\n            "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[5414,5516],"text":"\n              Members with verified organization domains don&#39;t count toward seat limits.\n            "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[5414,5516],"text":"\n              Members with verified organization domains don&rsquo;t count toward seat limits.\n            "},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":194,"column":56,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[5876,5957],"text":"\n            Each member counts toward your organization&apos;s seat limit.\n          "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[5876,5957],"text":"\n            Each member counts toward your organization&lsquo;s seat limit.\n          "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[5876,5957],"text":"\n            Each member counts toward your organization&#39;s seat limit.\n          "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[5876,5957],"text":"\n            Each member counts toward your organization&rsquo;s seat limit.\n          "},"desc":"Replace with `&rsquo;`."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\nimport { User, FileText, Settings, Award, Calendar, TrendingUp, Activity, Clock, Plus, Search, Play, Trash2 } from \"lucide-react\";\nimport { useEffect, useMemo, useState } from 'react';\nimport {\n  Badge,\n  Button,\n  Card,\n  CardContent,\n  CardHeader,\n  CardTitle,\n  Input,\n  Label,\n  Modal,\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n  Skeleton,\n  Textarea,\n  useToastContext,\n} from '@ghxstship/ui';\nimport {\n  addExistingMember,\n  bulkInviteMembers,\n  fetchTeamsSettings,\n  InviteInput,\n  InviteRecord,\n  inviteMember,\n  resendInvite,\n  revokeInvite,\n  SeatUsage,\n  TeamsSettingsResponse,\n} from '@/lib/services/settingsTeamsClient';\n\nconst ROLE_OPTIONS = [\n  { value: 'viewer', label: 'Viewer' },\n  { value: 'contributor', label: 'Contributor' },\n  { value: 'manager', label: 'Manager' },\n  { value: 'admin', label: 'Admin' },\n];\n\nconst EMAIL_REGEX = /.+@.+\\..+/i;\n\nfunction parseEmailList(text: string): string[] {\n  return Array.from(\n    new Set(\n      text\n        .split(/[\\s,;]+/)\n        .map((s) => s.trim())\n        .filter((s) => EMAIL_REGEX.test(s))\n    )\n  );\n}\n\nfunction extractDomain(email: string): string | null {\n  const match = email.toLowerCase().match(/@([a-z0-9.-]+\\.[a-z]{2,})$/i);\n  return match ? match[1] : null;\n}\n\nexport default function TeamsSettingsClient() {\n  const { toast } = useToastContext();\n  const [data, setData] = useState<TeamsSettingsResponse | null>(null);\n  const [loading, setLoading] = useState<boolean>(true);\n  const [saving, setSaving] = useState<boolean>(false);\n  const [email, setEmail] = useState<string>('');\n  const [role, setRole] = useState<string>('contributor');\n  const [bulkText, setBulkText] = useState<string>('');\n  const [bulkRole, setBulkRole] = useState<string>('contributor');\n  const [bulkModalOpen, setBulkModalOpen] = useState<boolean>(false);\n\n  const load = async () => {\n    try {\n      setLoading(true);\n      const response = await fetchTeamsSettings();\n      setData(response);\n    } catch (error) {\n      const message = error instanceof Error ? error.message : 'Unable to load teams settings';\n      toast.error('Failed to load teams', undefined, { description: message });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    void load();\n  }, []);\n\n  const emailDomain = useMemo(() => extractDomain(email), [email]);\n  const domainRecord = useMemo(() => {\n    if (!emailDomain || !data?.domains) return null;\n    return data.domains.find((d) => d.domain === emailDomain);\n  }, [emailDomain, data?.domains]);\n\n  const bulkEmails = useMemo(() => parseEmailList(bulkText), [bulkText]);\n\n  const handleInvite = async () => {\n    if (!email || !EMAIL_REGEX.test(email)) return;\n    try {\n      setSaving(true);\n      await inviteMember({ email, role });\n      toast.success('Invite sent');\n      setEmail('');\n      await load();\n    } catch (error) {\n      const message = error instanceof Error ? error.message : 'Unable to send invite';\n      toast.error('Invite failed', undefined, { description: message });\n    } finally {\n      setSaving(false);\n    }\n  };\n\n  const handleAddExisting = async () => {\n    if (!email || !EMAIL_REGEX.test(email)) return;\n    try {\n      setSaving(true);\n      await addExistingMember({ email, role });\n      toast.success('Member added');\n      setEmail('');\n      await load();\n    } catch (error) {\n      const message = error instanceof Error ? error.message : 'Unable to add member';\n      toast.error('Add failed', undefined, { description: message });\n    } finally {\n      setSaving(false);\n    }\n  };\n\n  const handleBulkInvite = async () => {\n    if (bulkEmails.length === 0) return;\n    try {\n      setSaving(true);\n      const result = await bulkInviteMembers({ emails: bulkEmails, role: bulkRole });\n      toast.success(`Bulk invite complete: ${result.results.successes} sent, ${result.results.failures} failed`);\n      setBulkText('');\n      setBulkModalOpen(false);\n      await load();\n    } catch (error) {\n      const message = error instanceof Error ? error.message : 'Unable to send bulk invites';\n      toast.error('Bulk invite failed', undefined, { description: message });\n    } finally {\n      setSaving(false);\n    }\n  };\n\n  const handleResend = async (inviteId: string) => {\n    try {\n      setSaving(true);\n      await resendInvite(inviteId);\n      toast.success('Invite resent');\n      await load();\n    } catch (error) {\n      const message = error instanceof Error ? error.message : 'Unable to resend invite';\n      toast.error('Resend failed', undefined, { description: message });\n    } finally {\n      setSaving(false);\n    }\n  };\n\n  const handleRevoke = async (inviteId: string) => {\n    try {\n      setSaving(true);\n      await revokeInvite(inviteId);\n      toast.success('Invite revoked');\n      await load();\n    } catch (error) {\n      const message = error instanceof Error ? error.message : 'Unable to revoke invite';\n      toast.error('Revoke failed', undefined, { description: message });\n    } finally {\n      setSaving(false);\n    }\n  };\n\n  const renderSeatUsage = (usage: SeatUsage) => {\n    if (usage.seatPolicy === 'domain-unlimited') {\n      return (\n        <div className=\"flex items-center justify-between\">\n          <div className=\"space-y-xs\">\n            <p className=\"text-body-sm font-medium\">Domain Unlimited</p>\n            <p className=\"text-body-xs text-muted-foreground\">\n              Members with verified organization domains don't count toward seat limits.\n            </p>\n          </div>\n          <Badge variant=\"outline\">{usage.activeCount} active</Badge>\n        </div>\n      );\n    }\n\n    return (\n      <div className=\"flex items-center justify-between\">\n        <div className=\"space-y-xs\">\n          <p className=\"text-body-sm font-medium\">Per-User Seats</p>\n          <p className=\"text-body-xs text-muted-foreground\">\n            Each member counts toward your organization's seat limit.\n          </p>\n        </div>\n        <div className=\"text-right\">\n          <p className=\"text-body-sm font-medium\">\n            {usage.activeCount}\n            {usage.seatsLimit != null ? ` / ${usage.seatsLimit}` : ''}\n          </p>\n          {usage.remainingSeats != null ? (\n            <p className=\"text-body-xs text-muted-foreground\">\n              {usage.remainingSeats} remaining\n            </p>\n          ) : null}\n        </div>\n      </div>\n    );\n  };\n\n  const renderInviteRow = (invite: InviteRecord) => {\n    const statusVariant = \n      invite.status === 'pending' ? 'secondary' :\n      invite.status === 'accepted' ? 'default' :\n      invite.status === 'revoked' ? 'outline' : 'outline';\n\n    return (\n      <tr key={invite.id} className=\"border-t\">\n        <td className=\"px-md py-sm\">{invite.email}</td>\n        <td className=\"px-md py-sm capitalize\">{invite.role}</td>\n        <td className=\"px-md py-sm\">\n          <Badge variant={statusVariant}>{invite.status}</Badge>\n        </td>\n        <td className=\"px-md py-sm text-right\">\n          <div className=\"flex justify-end gap-xs\">\n            {invite.status === 'pending' && data?.canManage ? (\n              <>\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={() => handleResend(invite.id)}\n                  disabled={saving}\n                >\n                  Resend\n                </Button>\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={() => handleRevoke(invite.id)}\n                  disabled={saving}\n                >\n                  Revoke\n                </Button>\n              </>\n            ) : null}\n          </div>\n        </td>\n      </tr>\n    );\n  };\n\n  if (loading) {\n    return (\n      <div className=\"space-y-md\">\n        <Skeleton className=\"h-12 w-48\" />\n        <div className=\"space-y-sm\">\n          <Skeleton className=\"h-32 w-full\" />\n          <Skeleton className=\"h-40 w-full\" />\n        </div>\n      </div>\n    );\n  }\n\n  if (!data) {\n    return (\n      <Card>\n        <CardContent className=\"py-lg text-center text-body-sm text-muted-foreground\">\n          Unable to load teams data. Please try refreshing the page.\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <div className=\"space-y-lg\">\n      <Card>\n        <CardHeader className=\"flex flex-col gap-sm md:flex-row md:items-center md:justify-between\">\n          <div>\n            <CardTitle>Team Management</CardTitle>\n            <p className=\"text-body-sm text-muted-foreground\">\n              Invite teammates, manage roles, and monitor seat usage across your organization.\n            </p>\n          </div>\n          <div className=\"flex gap-sm\">\n            <Button variant=\"outline\" onClick={() => setBulkModalOpen(true)} disabled={!data.canManage}>\n              Bulk Invite\n            </Button>\n            <Button variant=\"outline\" onClick={() => void load()}>\n              Refresh\n            </Button>\n          </div>\n        </CardHeader>\n        <CardContent>\n          {renderSeatUsage(data.seatUsage)}\n        </CardContent>\n      </Card>\n\n      {data.canManage ? (\n        <Card>\n          <CardHeader>\n            <CardTitle>Invite New Member</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-md\">\n            <div className=\"grid gap-md md:grid-cols-3\">\n              <div className=\"space-y-sm md:col-span-2\">\n                <Label htmlFor=\"invite-email\">Email Address</Label>\n                <Input\n                  id=\"invite-email\"\n                  type=\"email\"\n                  value={email}\n                  onChange={(event) => setEmail(event.target.value)}\n                  placeholder=\"teammate@company.com\"\n                />\n                {emailDomain && domainRecord ? (\n                  <p className=\"text-body-xs text-muted-foreground\">\n                    {domainRecord.status === 'active' ? (\n                      <span className=\"text-green-600\">✓ Domain matches active organization domain</span>\n                    ) : (\n                      <span className=\"text-yellow-600\">⚠ Domain is pending verification</span>\n                    )}\n                  </p>\n                ) : emailDomain ? (\n                  <p className=\"text-body-xs text-muted-foreground\">\n                    External domain — will count against seat limit if enforced.\n                  </p>\n                ) : null}\n              </div>\n              <div className=\"space-y-sm\">\n                <Label htmlFor=\"invite-role\">Role</Label>\n                <Select value={role} onValueChange={setRole}>\n                  <SelectTrigger id=\"invite-role\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {ROLE_OPTIONS.map((option) => (\n                      <SelectItem key={option.value} value={option.value}>\n                        {option.label}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n            <div className=\"flex gap-sm\">\n              <Button\n                onClick={handleInvite}\n                disabled={saving || !EMAIL_REGEX.test(email)}\n              >\n                Send Invite\n              </Button>\n              <Button\n                variant=\"outline\"\n                onClick={handleAddExisting}\n                disabled={saving || !EMAIL_REGEX.test(email)}\n              >\n                Add Existing User\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      ) : (\n        <Card>\n          <CardContent className=\"py-lg text-center text-body-sm text-muted-foreground\">\n            Only organization owners and admins can invite new members.\n          </CardContent>\n        </Card>\n      )}\n\n      <Card>\n        <CardHeader>\n          <CardTitle>Pending Invitations</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"overflow-x-auto\">\n            <table className=\"min-w-full text-left text-body-sm\">\n              <thead>\n                <tr className=\"border-b\">\n                  <th className=\"px-md py-sm font-medium\">Email</th>\n                  <th className=\"px-md py-sm font-medium\">Role</th>\n                  <th className=\"px-md py-sm font-medium\">Status</th>\n                  <th className=\"px-md py-sm font-medium text-right\">Actions</th>\n                </tr>\n              </thead>\n              <tbody>\n                {data.invites.map(renderInviteRow)}\n                {data.invites.length === 0 ? (\n                  <tr>\n                    <td colSpan={4} className=\"px-md py-lg text-center text-muted-foreground\">\n                      No pending invitations.\n                    </td>\n                  </tr>\n                ) : null}\n              </tbody>\n            </table>\n          </div>\n        </CardContent>\n      </Card>\n\n      <Modal\n        open={bulkModalOpen}\n        onClose={() => setBulkModalOpen(false)}\n        title=\"Bulk Invite Members\"\n        description=\"Paste a list of email addresses to invite multiple members at once.\"\n      >\n        <div className=\"space-y-md\">\n          <div className=\"space-y-sm\">\n            <Label htmlFor=\"bulk-emails\">Email Addresses</Label>\n            <Textarea\n              id=\"bulk-emails\"\n              rows={6}\n              value={bulkText}\n              onChange={(event) => setBulkText(event.target.value)}\n              placeholder=\"user1@company.com, user2@company.com&#10;user3@other.com&#10;user4@example.org\"\n            />\n            <p className=\"text-body-xs text-muted-foreground\">\n              Detected: {bulkEmails.length} valid email{bulkEmails.length !== 1 ? 's' : ''}\n            </p>\n          </div>\n          <div className=\"space-y-sm\">\n            <Label htmlFor=\"bulk-role\">Role for All</Label>\n            <Select value={bulkRole} onValueChange={setBulkRole}>\n              <SelectTrigger id=\"bulk-role\">\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                {ROLE_OPTIONS.map((option) => (\n                  <SelectItem key={option.value} value={option.value}>\n                    {option.label}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n          <div className=\"flex justify-end gap-sm\">\n            <Button variant=\"outline\" onClick={() => setBulkModalOpen(false)} disabled={saving}>\n              Cancel\n            </Button>\n            <Button onClick={handleBulkInvite} disabled={saving || bulkEmails.length === 0}>\n              {saving ? 'Sending…' : `Invite ${bulkEmails.length} Member${bulkEmails.length !== 1 ? 's' : ''}`}\n            </Button>\n          </div>\n        </div>\n      </Modal>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ghxstship/apps/web/app/(marketing)/accessibility/page.tsx","messages":[{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Heart' is not defined.","line":39,"column":16,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":39,"endColumn":21},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Eye' is not defined.","line":66,"column":20,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":66,"endColumn":23},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Ear' is not defined.","line":82,"column":20,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":82,"endColumn":23},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Hand' is not defined.","line":98,"column":20,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":98,"endColumn":24},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Brain' is not defined.","line":114,"column":20,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":114,"endColumn":25},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Mail' is not defined.","line":272,"column":18,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":272,"endColumn":22},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'ExternalLink' is not defined.","line":312,"column":22,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":312,"endColumn":34},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'ExternalLink' is not defined.","line":318,"column":22,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":318,"endColumn":34},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'ExternalLink' is not defined.","line":324,"column":22,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":324,"endColumn":34},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'ExternalLink' is not defined.","line":338,"column":22,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":338,"endColumn":34},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'ExternalLink' is not defined.","line":344,"column":22,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":344,"endColumn":34},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'ExternalLink' is not defined.","line":350,"column":22,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":350,"endColumn":34}],"suppressedMessages":[],"errorCount":12,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { User, FileText, Settings, Award, Calendar, TrendingUp, Activity, Clock, Plus, Search, Play, Trash2 } from \"lucide-react\";\nimport type { Metadata } from 'next';\nimport { Card, CardContent, Badge } from '@ghxstship/ui';\n\nexport const metadata: Metadata = {\n  title: 'Accessibility Statement | GHXSTSHIP',\n  description: 'Learn about GHXSTSHIP\\'s commitment to accessibility and how we ensure our platform is usable by everyone.',\n  openGraph: {\n    title: 'Accessibility Statement | GHXSTSHIP',\n    description: 'Learn about GHXSTSHIP\\'s commitment to accessibility and how we ensure our platform is usable by everyone.',\n    url: 'https://ghxstship.com/accessibility',\n  },\n};\n\nexport default function AccessibilityPage() {\n  return (\n    <div className=\"min-h-screen py-4xl\">\n      <div className=\"container mx-auto px-md max-w-4xl\">\n        {/* Header */}\n        <div className=\"text-center mb-3xl\">\n          <Badge variant=\"outline\" className=\"mb-md\">\n            Accessibility\n          </Badge>\n          <h1 className=\"font-title text-heading-1 lg:text-display text-heading-3 mb-lg\">\n            ACCESSIBILITY STATEMENT\n          </h1>\n          <p className=\"text-body color-muted mb-md\">\n            We’re committed to ensuring our platform is accessible to everyone, regardless of ability or technology.\n          </p>\n          <p className=\"text-body-sm color-muted\">\n            Last updated: December 15, 2024\n          </p>\n        </div>\n\n        {/* Commitment Overview */}\n        <Card className=\"mb-2xl bg-gradient-to-r from-primary/5 to-accent/5\">\n          <CardContent className=\"p-xl\">\n            <div className=\"flex items-center gap-sm mb-lg\">\n              <Heart className=\"h-8 w-8 text-foreground\" />\n              <h2 className=\"font-title text-heading-3 text-heading-3\">Our Commitment</h2>\n            </div>\n            <p className=\"color-muted mb-lg\">\n              GHXSTSHIP is committed to ensuring digital accessibility for people with disabilities. We continually improve the user experience for everyone and apply relevant accessibility standards.\n            </p>\n            <div className=\"grid md:grid-cols-2 gap-lg\">\n              <div>\n                <h3 className=\"text-heading-4 mb-sm\">WCAG 2.2 AA Compliance</h3>\n                <p className=\"text-body-sm color-muted\">We strive to meet Web Content Accessibility Guidelines (WCAG) 2.2 Level AA standards.</p>\n              </div>\n              <div>\n                <h3 className=\"text-heading-4 mb-sm\">Ongoing Improvement</h3>\n                <p className=\"text-body-sm color-muted\">We regularly audit our platform and implement improvements based on user feedback.</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Accessibility Features */}\n        <section className=\"mb-2xl\">\n          <h2 className=\"font-title text-heading-2 mb-xl\">Accessibility Features</h2>\n          \n          <div className=\"grid md:grid-cols-2 gap-lg\">\n            <Card>\n              <CardContent className=\"p-lg\">\n                <div className=\"flex items-center gap-sm mb-md\">\n                  <Eye className=\"h-6 w-6 text-foreground\" />\n                  <h3>Visual Accessibility</h3>\n                </div>\n                <ul className=\"stack-sm text-body-sm color-muted\">\n                  <li>• High contrast color schemes</li>\n                  <li>• Scalable text up to 200% without loss of functionality</li>\n                  <li>• Clear focus indicators for keyboard navigation</li>\n                  <li>• Alternative text for all meaningful images</li>\n                  <li>• Color is not the only means of conveying information</li>\n                </ul>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardContent className=\"p-lg\">\n                <div className=\"flex items-center gap-sm mb-md\">\n                  <Ear className=\"h-6 w-6 text-foreground\" />\n                  <h3>Auditory Accessibility</h3>\n                </div>\n                <ul className=\"stack-sm text-body-sm color-muted\">\n                  <li>• Captions for all video content</li>\n                  <li>• Transcripts for audio content</li>\n                  <li>• Visual indicators for audio alerts</li>\n                  <li>• No auto-playing audio content</li>\n                  <li>• Screen reader compatible audio descriptions</li>\n                </ul>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardContent className=\"p-lg\">\n                <div className=\"flex items-center gap-sm mb-md\">\n                  <Hand className=\"h-6 w-6 text-foreground\" />\n                  <h3>Motor Accessibility</h3>\n                </div>\n                <ul className=\"stack-sm text-body-sm color-muted\">\n                  <li>• Full keyboard navigation support</li>\n                  <li>• Generous click targets (minimum 44px)</li>\n                  <li>• No time-sensitive actions without extensions</li>\n                  <li>• Drag and drop alternatives</li>\n                  <li>• Voice control compatibility</li>\n                </ul>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardContent className=\"p-lg\">\n                <div className=\"flex items-center gap-sm mb-md\">\n                  <Brain className=\"h-6 w-6 text-foreground\" />\n                  <h3>Cognitive Accessibility</h3>\n                </div>\n                <ul className=\"stack-sm text-body-sm color-muted\">\n                  <li>• Clear, consistent navigation</li>\n                  <li>• Simple, plain language</li>\n                  <li>• Error prevention and clear error messages</li>\n                  <li>• Consistent page layouts and interactions</li>\n                  <li>• Help and documentation readily available</li>\n                </ul>\n              </CardContent>\n            </Card>\n          </div>\n        </section>\n\n        {/* Technical Standards */}\n        <section className=\"mb-2xl\">\n          <h2 className=\"font-title text-heading-2 text-heading-3 mb-xl\">Technical Standards</h2>\n          \n          <div className=\"stack-lg\">\n            <Card>\n              <CardContent className=\"p-lg\">\n                <h3 className=\"text-heading-4 text-body mb-md\">Web Content Accessibility Guidelines (WCAG) 2.2</h3>\n                <p className=\"color-muted mb-md\">\n                  Our platform aims to conform to WCAG 2.2 Level AA standards, which include:\n                </p>\n                <div className=\"grid md:grid-cols-3 gap-md\">\n                  <div>\n                    <h4 className=\"text-heading-4 mb-sm\">Perceivable</h4>\n                    <p className=\"text-body-sm color-muted\">Information must be presentable in ways users can perceive.</p>\n                  </div>\n                  <div>\n                    <h4 className=\"text-heading-4 mb-sm\">Operable</h4>\n                    <p className=\"text-body-sm color-muted\">Interface components must be operable by all users.</p>\n                  </div>\n                  <div>\n                    <h4 className=\"text-heading-4 mb-sm\">Understandable</h4>\n                    <p className=\"text-body-sm color-muted\">Information and UI operation must be understandable.</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardContent className=\"p-lg\">\n                <h3 className=\"text-heading-4 text-body mb-md\">Assistive Technology Support</h3>\n                <p className=\"color-muted mb-md\">\n                  Our platform is tested with and supports:\n                </p>\n                <div className=\"grid md:grid-cols-2 gap-md\">\n                  <ul className=\"stack-sm text-body-sm color-muted\">\n                    <li>• JAWS (Windows)</li>\n                    <li>• NVDA (Windows)</li>\n                    <li>• VoiceOver (macOS/iOS)</li>\n                    <li>• TalkBack (Android)</li>\n                  </ul>\n                  <ul className=\"stack-sm text-body-sm color-muted\">\n                    <li>• Dragon NaturallySpeaking</li>\n                    <li>• Switch navigation devices</li>\n                    <li>• High contrast displays</li>\n                    <li>• Screen magnification software</li>\n                  </ul>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </section>\n\n        {/* Browser Compatibility */}\n        <section className=\"mb-2xl\">\n          <h2 className=\"font-title text-heading-2 text-heading-3 mb-xl\">Browser & Device Compatibility</h2>\n          \n          <Card>\n            <CardContent className=\"p-lg\">\n              <div className=\"grid md:grid-cols-2 gap-lg\">\n                <div>\n                  <h3 className=\"text-heading-4 mb-md\">Supported Browsers</h3>\n                  <ul className=\"stack-sm text-body-sm color-muted\">\n                    <li>• Chrome 90+ (Windows, macOS, Linux)</li>\n                    <li>• Firefox 88+ (Windows, macOS, Linux)</li>\n                    <li>• Safari 14+ (macOS, iOS)</li>\n                    <li>• Edge 90+ (Windows, macOS)</li>\n                  </ul>\n                </div>\n                <div>\n                  <h3 className=\"text-heading-4 mb-md\">Mobile Devices</h3>\n                  <ul className=\"stack-sm text-body-sm color-muted\">\n                    <li>• iOS 14+ (Safari, Chrome)</li>\n                    <li>• Android 8+ (Chrome, Firefox)</li>\n                    <li>• Responsive design for all screen sizes</li>\n                    <li>• Touch-friendly interface elements</li>\n                  </ul>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </section>\n\n        {/* Known Issues */}\n        <section className=\"mb-2xl\">\n          <h2 className=\"font-title text-heading-2 text-heading-3 mb-xl\">Known Issues & Limitations</h2>\n          \n          <Card className=\"bg-warning/10 border-warning/30\">\n            <CardContent className=\"p-lg\">\n              <p className=\"color-muted mb-md\">\n                We’re actively working to address the following known accessibility issues:\n              </p>\n              <ul className=\"stack-sm text-body-sm color-muted\">\n                <li>• Some complex data visualizations may have limited screen reader support</li>\n                <li>• Certain third-party integrations may not meet full WCAG standards</li>\n                <li>• File upload drag-and-drop areas require keyboard alternatives (available via context menu)</li>\n                <li>• Some dynamic content updates may not be immediately announced to screen readers</li>\n              </ul>\n              <p className=\"text-body-sm color-muted mt-md\">\n                <strong>Timeline:</strong> We aim to address these issues in our next major release (Q2 2025).\n              </p>\n            </CardContent>\n          </Card>\n        </section>\n\n        {/* Testing & Validation */}\n        <section className=\"mb-2xl\">\n          <h2 className=\"font-title text-heading-2 text-heading-3 mb-xl\">Testing & Validation</h2>\n          \n          <div className=\"grid md:grid-cols-2 gap-lg\">\n            <Card>\n              <CardContent className=\"p-lg\">\n                <h3 className=\"text-heading-4 mb-md\">Automated Testing</h3>\n                <ul className=\"stack-sm text-body-sm color-muted\">\n                  <li>• axe-core accessibility engine</li>\n                  <li>• WAVE Web Accessibility Evaluation Tool</li>\n                  <li>• Lighthouse accessibility audits</li>\n                  <li>• Pa11y command line testing</li>\n                </ul>\n              </CardContent>\n            </Card>\n            \n            <Card>\n              <CardContent className=\"p-lg\">\n                <h3 className=\"text-heading-4 mb-md\">Manual Testing</h3>\n                <ul className=\"stack-sm text-body-sm color-muted\">\n                  <li>• Screen reader navigation testing</li>\n                  <li>• Keyboard-only navigation testing</li>\n                  <li>• High contrast mode validation</li>\n                  <li>• User testing with disability community</li>\n                </ul>\n              </CardContent>\n            </Card>\n          </div>\n        </section>\n\n        {/* Feedback & Support */}\n        <section className=\"mb-2xl\">\n          <h2 className=\"font-title text-heading-2 text-heading-3 mb-xl\">Feedback & Support</h2>\n          \n          <Card>\n            <CardContent className=\"p-lg\">\n              <div className=\"flex items-start gap-md\">\n                <Mail className=\"h-6 w-6 text-foreground mt-xs\" />\n                <div>\n                  <h3 className=\"text-heading-4 mb-sm\">We Want to Hear From You</h3>\n                  <p className=\"color-muted mb-md\">\n                    Your feedback helps us improve accessibility for everyone. If you encounter any accessibility barriers or have suggestions for improvement, please contact us:\n                  </p>\n                  \n                  <div className=\"stack-sm\">\n                    <div>\n                      <h4 className=\"text-heading-4 mb-sm\">Accessibility Team</h4>\n                      <div className=\"stack-xs text-body-sm\">\n                        <p><strong>Email:</strong> accessibility@ghxstship.com</p>\n                        <p><strong>Phone:</strong> +1 (555) 123-4567 (TTY available)</p>\n                        <p><strong>Response Time:</strong> We aim to respond within 2 business days</p>\n                      </div>\n                    </div>\n                    \n                    <div>\n                      <h4 className=\"text-heading-4 mb-sm\">Alternative Formats</h4>\n                      <p className=\"text-body-sm color-muted\">\n                        We can provide information in alternative formats such as large print, audio, or electronic formats upon request.\n                      </p>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </section>\n\n        {/* Accessibility Resources */}\n        <section className=\"mb-2xl\">\n          <h2 className=\"font-title text-heading-2 text-heading-3 mb-xl\">Accessibility Resources</h2>\n          \n          <div className=\"grid md:grid-cols-2 gap-lg\">\n            <Card>\n              <CardContent className=\"p-lg\">\n                <h3 className=\"text-heading-4 mb-md\">Getting Started</h3>\n                <ul className=\"stack-sm\">\n                  <li className=\"flex items-center gap-sm\">\n                    <ExternalLink className=\"h-4 w-4 text-foreground\" />\n                    <a href=\"/help/accessibility-guide\" className=\"text-foreground hover:underline\">\n                      Accessibility User Guide\n                    </a>\n                  </li>\n                  <li className=\"flex items-center gap-sm\">\n                    <ExternalLink className=\"h-4 w-4 text-foreground\" />\n                    <a href=\"/help/keyboard-shortcuts\" className=\"text-foreground hover:underline\">\n                      Keyboard Shortcuts Reference\n                    </a>\n                  </li>\n                  <li className=\"flex items-center gap-sm\">\n                    <ExternalLink className=\"h-4 w-4 text-foreground\" />\n                    <a href=\"/help/screen-reader-guide\" className=\"text-foreground hover:underline\">\n                      Screen Reader Setup Guide\n                    </a>\n                  </li>\n                </ul>\n              </CardContent>\n            </Card>\n            \n            <Card>\n              <CardContent className=\"p-lg\">\n                <h3 className=\"text-heading-4 mb-md\">External Resources</h3>\n                <ul className=\"stack-sm\">\n                  <li className=\"flex items-center gap-sm\">\n                    <ExternalLink className=\"h-4 w-4 text-foreground\" />\n                    <a href=\"https://www.w3.org/WAI/\" target=\"_blank\" rel=\"noopener noreferrer\" className=\"text-foreground hover:underline\">\n                      W3C Web Accessibility Initiative\n                    </a>\n                  </li>\n                  <li className=\"flex items-center gap-sm\">\n                    <ExternalLink className=\"h-4 w-4 text-foreground\" />\n                    <a href=\"https://webaim.org/\" target=\"_blank\" rel=\"noopener noreferrer\" className=\"text-foreground hover:underline\">\n                      WebAIM Accessibility Resources\n                    </a>\n                  </li>\n                  <li className=\"flex items-center gap-sm\">\n                    <ExternalLink className=\"h-4 w-4 text-foreground\" />\n                    <a href=\"https://www.ada.gov/\" target=\"_blank\" rel=\"noopener noreferrer\" className=\"text-foreground hover:underline\">\n                      ADA.gov Information\n                    </a>\n                  </li>\n                </ul>\n              </CardContent>\n            </Card>\n          </div>\n        </section>\n\n        {/* Legal Compliance */}\n        <section>\n          <h2 className=\"font-title text-heading-2 text-heading-3 mb-xl\">Legal Compliance</h2>\n          \n          <Card>\n            <CardContent className=\"p-lg\">\n              <p className=\"color-muted mb-md\">\n                GHXSTSHIP is committed to compliance with applicable accessibility laws and regulations, including:\n              </p>\n              \n              <div className=\"grid md:grid-cols-2 gap-lg\">\n                <div>\n                  <h3 className=\"text-heading-4 mb-sm\">United States</h3>\n                  <ul className=\"stack-sm text-body-sm color-muted\">\n                    <li>• Americans with Disabilities Act (ADA)</li>\n                    <li>• Section 508 of the Rehabilitation Act</li>\n                    <li>• 21st Century Communications and Video Accessibility Act</li>\n                  </ul>\n                </div>\n                \n                <div>\n                  <h3 className=\"text-heading-4 mb-sm\">International</h3>\n                  <ul className=\"stack-sm text-body-sm color-muted\">\n                    <li>• European Accessibility Act (EAA)</li>\n                    <li>• EN 301 549 European Standard</li>\n                    <li>• Accessibility for Ontarians with Disabilities Act (AODA)</li>\n                  </ul>\n                </div>\n              </div>\n              \n              <p className=\"text-body-sm color-muted mt-lg\">\n                This accessibility statement was last reviewed and updated on December 15, 2024. We review and update this statement regularly to ensure it remains current and accurate.\n              </p>\n            </CardContent>\n          </Card>\n        </section>\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ghxstship/apps/web/app/(marketing)/company/press/page.tsx","messages":[{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Download' is not defined.","line":165,"column":18,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":165,"endColumn":26},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Mail' is not defined.","line":169,"column":18,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":169,"endColumn":22},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'ArrowRight' is not defined.","line":207,"column":22,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":207,"endColumn":32},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'ArrowRight' is not defined.","line":255,"column":24,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":255,"endColumn":34},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'ExternalLink' is not defined.","line":306,"column":22,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":306,"endColumn":34},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Download' is not defined.","line":395,"column":22,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":395,"endColumn":30},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Download' is not defined.","line":405,"column":16,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":405,"endColumn":24},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Mail' is not defined.","line":428,"column":20,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":428,"endColumn":24},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'ExternalLink' is not defined.","line":438,"column":20,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":438,"endColumn":32},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Phone' is not defined.","line":446,"column":20,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":446,"endColumn":25},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Phone' is not defined.","line":456,"column":20,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":456,"endColumn":25},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'ArrowRight' is not defined.","line":484,"column":18,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":484,"endColumn":28}],"suppressedMessages":[],"errorCount":12,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { User, FileText, Settings, Award, Calendar, TrendingUp, Activity, Clock, Plus, Search, Play, Trash2 } from \"lucide-react\";\nimport type { Metadata } from 'next';\nimport Link from 'next/link';\nimport { Button, Card, CardContent, Badge } from '@ghxstship/ui';\nimport { Anton } from 'next/font/google';\n\nconst anton = Anton({ weight: '400', subsets: ['latin'], variable: '--font-title' });\n\nexport const metadata: Metadata = {\n  title: 'Press & Media - The Real Story Behind the Chaos | GHXSTSHIP',\n  description: 'Press coverage, releases, and media kit for the production management company that survived Formula 1 weekends and festival meltdowns.',\n  openGraph: {\n    title: 'Press & Media - The Real Story Behind the Chaos | GHXSTSHIP',\n    description: 'Press coverage and media kit for the production management company that actually works.',\n    url: 'https://ghxstship.com/company/press',\n  },\n};\n\nconst pressReleases = [\n  {\n    title: 'GHXSTSHIP Raises $50M Series B to Build Production Tools That Actually Work',\n    date: '2024-01-15',\n    excerpt: 'Funding will support building more tools for production teams tired of juggling 47 different apps.',\n    category: 'Funding',\n    featured: true,\n  },\n  {\n    title: 'GHXSTSHIP Launches AI-Powered Project Intelligence Features',\n    date: '2024-01-10',\n    excerpt: 'New AI capabilities help creative teams optimize workflows and predict project outcomes.',\n    category: 'Product',\n  },\n  {\n    title: 'GHXSTSHIP Partners with Adobe to Streamline Creative Workflows',\n    date: '2023-12-20',\n    excerpt: 'Strategic partnership integrates GHXSTSHIP with Adobe Creative Suite for seamless collaboration.',\n    category: 'Partnership',\n  },\n  {\n    title: 'GHXSTSHIP Surpasses 100,000 Creative Professionals on Platform',\n    date: '2023-12-15',\n    excerpt: 'Milestone reflects growing adoption of remote creative collaboration tools worldwide.',\n    category: 'Milestone',\n  },\n  {\n    title: 'GHXSTSHIP Wins Best Creative Platform at 2023 SaaS Awards',\n    date: '2023-11-30',\n    excerpt: 'Recognition highlights platform\\'s innovation in creative project management and collaboration.',\n    category: 'Award',\n  },\n];\n\nconst mediaCoverage = [\n  {\n    title: 'The Future of Creative Work is Remote and Collaborative',\n    publication: 'TechCrunch',\n    date: '2024-01-12',\n    excerpt: 'How GHXSTSHIP is enabling creative teams to work together seamlessly across the globe.',\n    url: 'https://techcrunch.com/ghxstship-remote-creative-work',\n  },\n  {\n    title: 'Top 10 SaaS Startups Transforming Creative Industries',\n    publication: 'Forbes',\n    date: '2024-01-08',\n    excerpt: 'GHXSTSHIP featured among the most promising startups revolutionizing creative collaboration.',\n    url: 'https://forbes.com/top-creative-saas-startups',\n  },\n  {\n    title: 'How AI is Reshaping Creative Project Management',\n    publication: 'Fast Company',\n    date: '2023-12-22',\n    excerpt: 'Interview with GHXSTSHIP CEO on the role of AI in creative workflows.',\n    url: 'https://fastcompany.com/ai-creative-project-management',\n  },\n  {\n    title: 'The Rise of Global Creative Talent Networks',\n    publication: 'Wired',\n    date: '2023-12-18',\n    excerpt: 'Deep dive into how platforms like GHXSTSHIP are connecting creative talent worldwide.',\n    url: 'https://wired.com/global-creative-talent-networks',\n  },\n  {\n    title: 'Remote Creative Teams: The New Normal',\n    publication: 'Harvard Business Review',\n    date: '2023-12-10',\n    excerpt: 'Analysis of remote creative collaboration trends featuring GHXSTSHIP case studies.',\n    url: 'https://hbr.org/remote-creative-teams',\n  },\n];\n\nconst awards = [\n  {\n    title: 'Best Creative Platform 2024',\n    organization: 'Creative Industry Awards',\n    date: '2024-01-20',\n    description: 'Recognized for innovation in creative collaboration tools',\n  },\n  {\n    title: 'Top 50 SaaS Companies to Watch',\n    organization: 'TechCrunch',\n    date: '2023-12-01',\n    description: 'Featured among the most promising SaaS startups',\n  },\n  {\n    title: 'Innovation in Remote Work Award',\n    organization: 'Remote Work Association',\n    date: '2023-11-15',\n    description: 'Awarded for advancing remote creative collaboration',\n  },\n  {\n    title: 'Customer Choice Award',\n    organization: 'G2 Reviews',\n    date: '2023-10-30',\n    description: 'Highest customer satisfaction in project management category',\n  },\n];\n\nconst mediaKit = [\n  {\n    title: 'Company Logos',\n    description: 'High-resolution GHXSTSHIP logos in various formats',\n    items: ['SVG', 'PNG', 'EPS', 'PDF'],\n  },\n  {\n    title: 'Product Screenshots',\n    description: 'High-quality screenshots of the GHXSTSHIP platform',\n    items: ['Dashboard', 'Project Views', 'Collaboration Tools', 'Mobile App'],\n  },\n  {\n    title: 'Executive Photos',\n    description: 'Professional headshots of leadership team',\n    items: ['CEO', 'CTO', 'Head of Product', 'VP Engineering'],\n  },\n  {\n    title: 'Company Information',\n    description: 'Key facts, statistics, and company overview',\n    items: ['Fact Sheet', 'Company Timeline', 'Statistics', 'Boilerplate'],\n  },\n];\n\nexport default function PressPage() {\n  return (\n    <div className=\"min-h-screen\">\n      {/* Hero Section */}\n      <section className=\"py-4xl bg-gradient-to-br from-primary/5 via-background to-accent/5\">\n        <div className=\"container mx-auto px-md\">\n          <div className=\"text-center mb-3xl\">\n            <Badge variant=\"outline\" className=\"mb-md\">\n              Press & Media\n            </Badge>\n            <h1 className={`${anton.className} text-heading-1 lg:text-display text-heading-3 mb-lg uppercase`}>\n              IN THE\n              <br />\n              <span className=\"text-gradient-accent\">\n                SPOTLIGHT\n              </span>\n            </h1>\n            <p className=\"text-heading-4 color-muted max-w-3xl mx-auto mb-xl\">\n              Stay updated with the latest GHXSTSHIP news, press releases, and media coverage. \n              Access our press kit and connect with our media team.\n            </p>\n\n            <div className=\"flex flex-col sm:flex-row gap-md justify-center\">\n              <Button className=\"group\">\n                <Download className=\"mr-sm h-4 w-4\" />\n                Download Press Kit\n              </Button>\n              <Button variant=\"outline\" className=\"group\">\n                <Mail className=\"mr-sm h-4 w-4\" />\n                Media Inquiries\n              </Button>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Featured Press Release */}\n      <section className=\"py-4xl\">\n        <div className=\"container mx-auto px-md\">\n          <div className=\"mb-2xl\">\n            <h2 className={`${anton.className} text-heading-2 text-heading-3 mb-lg uppercase`}>Latest News</h2>\n          </div>\n\n          <Card className=\"overflow-hidden hover:shadow-floating transition-shadow mb-2xl\">\n            <CardContent className=\"p-xl\">\n              <div className=\"grid lg:grid-cols-2 gap-xl\">\n                <div>\n                  <Badge variant=\"outline\" className=\"mb-md\">\n                    {pressReleases[0].category}\n                  </Badge>\n                  <h3 className={`${anton.className} text-heading-3 lg:text-heading-2 text-heading-3 mb-md uppercase`}>\n                    {pressReleases[0].title}\n                  </h3>\n                  <div className=\"flex items-center gap-sm text-body-sm color-muted mb-md\">\n                    <Calendar className=\"h-4 w-4\" />\n                    {new Date(pressReleases[0].date).toLocaleDateString('en-US', { \n                      year: 'numeric', \n                      month: 'long', \n                      day: 'numeric' \n                    })}\n                  </div>\n                  <p className=\"text-body color-muted mb-lg\">\n                    {pressReleases[0].excerpt}\n                  </p>\n                  <Button className=\"group\">\n                    Read Full Release\n                    <ArrowRight className=\"ml-sm h-4 w-4 transition-transform group-hover:translate-x-1\" />\n                  </Button>\n                </div>\n\n                <div className=\"bg-gradient-to-br from-primary/10 to-accent/10 rounded-lg p-xl flex items-center justify-center\">\n                  <FileText className=\"h-16 w-16 color-success\" />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </section>\n\n      {/* Press Releases */}\n      <section className=\"py-4xl bg-secondary/20\">\n        <div className=\"container mx-auto px-md\">\n          <div className=\"mb-2xl\">\n            <h2 className={`${anton.className} text-heading-2 text-heading-3 mb-lg uppercase`}>Press Releases</h2>\n          </div>\n\n          <div className=\"stack-lg\">\n            {pressReleases.slice(1).map((release, index) => (\n              <Card key={index} className=\"hover:shadow-floating transition-shadow\">\n                <CardContent className=\"p-lg\">\n                  <div className=\"flex items-start justify-between gap-md\">\n                    <div className=\"flex-1\">\n                      <div className=\"flex items-center gap-sm mb-sm\">\n                        <Badge variant=\"outline\">\n                          {release.category}\n                        </Badge>\n                        <div className=\"flex items-center gap-sm text-body-sm color-muted\">\n                          <Calendar className=\"h-3 w-3\" />\n                          {new Date(release.date).toLocaleDateString('en-US', { \n                            year: 'numeric', \n                            month: 'long', \n                            day: 'numeric' \n                          })}\n                        </div>\n                      </div>\n                      <h3 className={`${anton.className} text-body text-heading-3 mb-sm uppercase`}>\n                        {release.title}\n                      </h3>\n                      <p className=\"color-muted text-body-sm\">\n                        {release.excerpt}\n                      </p>\n                    </div>\n                    <Button className=\"group\">\n                      Read More\n                      <ArrowRight className=\"ml-xs h-3 w-3 transition-transform group-hover:translate-x-1\" />\n                    </Button>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n\n          <div className=\"text-center mt-2xl\">\n            <Button>\n              View All Press Releases\n            </Button>\n          </div>\n        </div>\n      </section>\n\n      {/* Media Coverage */}\n      <section className=\"py-4xl\">\n        <div className=\"container mx-auto px-md\">\n          <div className=\"mb-2xl\">\n            <h2 className={`${anton.className} text-heading-2 text-heading-3 mb-lg uppercase`}>Media Coverage</h2>\n            <p className=\"text-body color-muted\">\n              See what industry publications are saying about GHXSTSHIP.\n            </p>\n          </div>\n\n          <div className=\"grid md:grid-cols-2 gap-lg\">\n            {mediaCoverage.map((article, index) => (\n              <Card key={index} className=\"hover:shadow-floating transition-shadow group\">\n                <CardContent className=\"p-lg\">\n                  <div className=\"flex items-start justify-between gap-md mb-md\">\n                    <Badge variant=\"outline\">\n                      {article.publication}\n                    </Badge>\n                    <div className=\"flex items-center gap-sm text-body-sm color-muted\">\n                      <Calendar className=\"h-3 w-3\" />\n                      {new Date(article.date).toLocaleDateString('en-US', { \n                        month: 'short', \n                        day: 'numeric' \n                      })}\n                    </div>\n                  </div>\n                  \n                  <h3 className={`${anton.className} text-body text-heading-3 mb-sm uppercase group-hover:text-foreground transition-colors`}>\n                    {article.title}\n                  </h3>\n                  <p className=\"color-muted text-body-sm mb-md\">\n                    {article.excerpt}\n                  </p>\n                  \n                  <Button variant=\"outline\" className=\"group\">\n                    <ExternalLink className=\"mr-xs h-3 w-3\" />\n                    Read Article\n                  </Button>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n\n          <div className=\"text-center mt-2xl\">\n            <Button variant=\"default\">\n              View All Coverage\n            </Button>\n          </div>\n        </div>\n      </section>\n\n      {/* Awards & Recognition */}\n      <section className=\"py-4xl bg-secondary/20\">\n        <div className=\"container mx-auto px-md\">\n          <div className=\"text-center mb-3xl\">\n            <h2 className={`${anton.className} text-heading-2 lg:text-heading-1 text-heading-3 mb-lg uppercase`}>\n              AWARDS & RECOGNITION\n            </h2>\n            <p className=\"text-body color-muted max-w-3xl mx-auto\">\n              Industry recognition for our innovation and impact in creative collaboration.\n            </p>\n          </div>\n\n          <div className=\"grid md:grid-cols-2 gap-lg\">\n            {awards.map((award, index) => (\n              <Card key={index} className=\"hover:shadow-floating transition-shadow\">\n                <CardContent className=\"p-lg\">\n                  <div className=\"flex items-start gap-md\">\n                    <div className=\"w-12 h-12 bg-gradient-to-r from-primary to-secondary rounded-lg flex items-center justify-center flex-shrink-0\">\n                      <FileText className=\"h-6 w-6 text-background\" />\n                    </div>\n                    <div className=\"flex-1\">\n                      <h3 className={`${anton.className} text-body text-heading-3 mb-sm uppercase`}>\n                        {award.title}\n                      </h3>\n                      <p className=\"text-foreground text-heading-4 mb-sm\">{award.organization}</p>\n                      <div className=\"flex items-center gap-sm text-body-sm color-muted mb-sm\">\n                        <Calendar className=\"h-3 w-3\" />\n                        {new Date(award.date).toLocaleDateString('en-US', { \n                          year: 'numeric', \n                          month: 'long' \n                        })}\n                      </div>\n                      <p className=\"color-muted text-body-sm\">{award.description}</p>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* Media Kit */}\n      <section className=\"py-4xl\">\n        <div className=\"container mx-auto px-md\">\n          <div className=\"text-center mb-3xl\">\n            <h2 className={`${anton.className} text-heading-2 lg:text-heading-1 text-heading-3 mb-lg uppercase`}>\n              MEDIA KIT\n            </h2>\n            <p className=\"text-body color-muted max-w-3xl mx-auto\">\n              Download high-quality assets, logos, and company information for your coverage.\n            </p>\n          </div>\n\n          <div className=\"grid md:grid-cols-2 gap-xl\">\n            {mediaKit.map((kit: unknown) => (\n              <Card key={kit.title} className=\"hover:shadow-floating transition-shadow\">\n                <CardContent className=\"p-lg\">\n                  <h3 className={`${anton.className} text-heading-4 text-heading-3 mb-sm uppercase`}>\n                    {kit.title}\n                  </h3>\n                  <p className=\"color-muted mb-md\">{kit.description}</p>\n                  \n                  <div className=\"stack-sm mb-lg\">\n                    {kit.items.map((item: unknown) => (\n                      <div key={item} className=\"flex items-center gap-sm\">\n                        <div className=\"w-1.5 h-1.5 bg-accent rounded-full\"></div>\n                        <span className=\"text-body-sm color-foreground\">{item}</span>\n                      </div>\n                    ))}\n                  </div>\n\n                  <Button variant=\"outline\" className=\"w-full group\">\n                    <Download className=\"mr-sm h-4 w-4\" />\n                    Download\n                  </Button>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n\n          <div className=\"text-center mt-2xl\">\n            <Button className=\"group\">\n              <Download className=\"mr-sm h-4 w-4\" />\n              Download Complete Press Kit\n            </Button>\n          </div>\n        </div>\n      </section>\n\n      {/* Media Contact */}\n      <section className=\"py-4xl bg-gradient-to-r from-primary/5 to-accent/5\">\n        <div className=\"container mx-auto px-md\">\n          <div className=\"text-center mb-2xl\">\n            <h2 className={`${anton.className} text-heading-2 lg:text-heading-1 text-heading-3 mb-lg uppercase`}>\n              MEDIA CONTACT\n            </h2>\n            <p className=\"text-body color-muted max-w-2xl mx-auto\">\n              For press inquiries, interviews, or additional information, please contact our media team.\n            </p>\n          </div>\n\n          <div className=\"grid md:grid-cols-2 gap-xl max-w-4xl mx-auto\">\n            <Card className=\"hover:shadow-floating transition-shadow\">\n              <CardContent className=\"p-xl text-center\">\n                <div className=\"w-12 h-12 bg-gradient-to-r from-primary to-secondary rounded-lg flex items-center justify-center mx-auto mb-md\">\n                  <Mail className=\"h-6 w-6 text-foreground\" />\n                </div>\n                <h3 className={`${anton.className} text-body text-heading-3 mb-sm uppercase`}>\n                  Press Inquiries\n                </h3>\n                <p className=\"color-muted mb-md\">\n                  For all media and press related questions\n                </p>\n                <Button variant=\"outline\" className=\"group\">\n                  press@ghxstship.com\n                  <ExternalLink className=\"ml-sm h-3 w-3\" />\n                </Button>\n              </CardContent>\n            </Card>\n\n            <Card className=\"hover:shadow-floating transition-shadow\">\n              <CardContent className=\"p-xl text-center\">\n                <div className=\"w-12 h-12 bg-gradient-to-r from-primary to-secondary rounded-lg flex items-center justify-center mx-auto mb-md\">\n                  <Phone className=\"h-6 w-6 text-background\" />\n                </div>\n                <h3 className={`${anton.className} text-body text-heading-3 mb-sm uppercase`}>\n                  Media Relations\n                </h3>\n                <p className=\"color-muted mb-md\">\n                  Sarah Martinez, Head of Communications\n                </p>\n                <Button variant=\"outline\" className=\"group\">\n                  +1 (555) 123-4567\n                  <Phone className=\"ml-sm h-3 w-3\" />\n                </Button>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </section>\n\n      {/* CTA Section */}\n      <section className=\"py-4xl\">\n        <div className=\"container mx-auto px-md\">\n          <div className=\"text-center\">\n            <h2 className={`${anton.className} text-heading-2 lg:text-heading-1 text-heading-3 mb-lg uppercase`}>\n              STAY UPDATED\n            </h2>\n            <p className=\"text-body color-muted mb-xl max-w-2xl mx-auto\">\n              Subscribe to our press updates to receive the latest news and announcements \n              directly in your inbox.\n            </p>\n            \n            <div className=\"flex flex-col sm:flex-row gap-md justify-center max-w-md mx-auto\">\n              <input\n                type=\"email\"\n                placeholder=\"Enter your email\"\n                className=\"flex-1 px-md py-sm border border-border rounded-lg bg-background focus:outline-none focus:ring-2 focus:ring-primary\"\n              />\n              <Button className=\"group\">\n                Subscribe\n                <ArrowRight className=\"ml-sm h-4 w-4 transition-transform group-hover:translate-x-1\" />\n              </Button>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Related Pages */}\n      <section className=\"py-4xl bg-secondary/20\">\n        <div className=\"container mx-auto px-md\">\n          <div className=\"text-center mb-3xl\">\n            <h2 className={`${anton.className} text-heading-2 lg:text-heading-1 text-heading-3 mb-lg uppercase`}>\n              LEARN MORE\n            </h2>\n          </div>\n\n          <div className=\"grid md:grid-cols-3 gap-lg\">\n            {[\n              { title: 'About Us', href: '/company/about', description: 'Our mission, vision, and story' },\n              { title: 'Our Team', href: '/company/team', description: 'Meet the people behind GHXSTSHIP' },\n              { title: 'Careers', href: '/careers', description: 'Join our growing team' },\n            ].map((link: unknown) => (\n              <a key={link.title} href=\"#\">\n                <Card className=\"hover:shadow-floating transition-shadow group\">\n                  <CardContent className=\"p-lg text-center\">\n                    <h3 className={`${anton.className} text-body text-heading-3 mb-sm uppercase group-hover:text-foreground transition-colors`}>\n                      {link.title}\n                    </h3>\n                    <p className=\"text-body-sm color-muted\">\n                      {link.description}\n                    </p>\n                  </CardContent>\n                </Card>\n              </a>\n            ))}\n          </div>\n        </div>\n      </section>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ghxstship/apps/web/app/(marketing)/privacy/page.tsx","messages":[{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Shield' is not defined.","line":39,"column":16,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":39,"endColumn":22},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Eye' is not defined.","line":44,"column":18,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":44,"endColumn":21},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Lock' is not defined.","line":51,"column":18,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":51,"endColumn":22},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Users' is not defined.","line":58,"column":18,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":58,"endColumn":23},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Lock' is not defined.","line":193,"column":22,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":193,"endColumn":26},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Shield' is not defined.","line":203,"column":22,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":203,"endColumn":28},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Globe' is not defined.","line":213,"column":22,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":213,"endColumn":27},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Users' is not defined.","line":223,"column":22,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":223,"endColumn":27},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Mail' is not defined.","line":350,"column":20,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":350,"endColumn":24}],"suppressedMessages":[],"errorCount":9,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { User, FileText, Settings, Award, Calendar, TrendingUp, Activity, Clock, Plus, Search, Play, Trash2 } from \"lucide-react\";\nimport type { Metadata } from 'next';\nimport { Card, CardContent, Badge } from '@ghxstship/ui';\n\nexport const metadata: Metadata = {\n  title: 'Privacy Policy | GHXSTSHIP',\n  description: 'Learn how GHXSTSHIP collects, uses, and protects your personal information.',\n  openGraph: {\n    title: 'Privacy Policy | GHXSTSHIP',\n    description: 'Learn how GHXSTSHIP collects, uses, and protects your personal information.',\n    url: 'https://ghxstship.com/privacy',\n  },\n};\n\nexport default function PrivacyPolicyPage() {\n  return (\n    <div className=\"min-h-screen py-4xl\">\n      <div className=\"container mx-auto px-md max-w-4xl\">\n        {/* Header */}\n        <div className=\"text-center mb-3xl\">\n          <Badge variant=\"outline\" className=\"mb-md\">\n            Legal\n          </Badge>\n          <h1 className=\"font-title text-heading-1 lg:text-display text-heading-3 mb-lg\">\n            PRIVACY POLICY\n          </h1>\n          <p className=\"text-body color-muted mb-md\">\n            Your privacy is important to us. This policy explains how we collect, use, and protect your information.\n          </p>\n          <p className=\"text-body-sm color-muted\">\n            Last updated: December 15, 2024\n          </p>\n        </div>\n\n        {/* Quick Overview */}\n        <Card className=\"mb-2xl bg-gradient-to-r from-primary/5 to-accent/5\">\n          <CardContent className=\"p-xl\">\n            <div className=\"flex items-center gap-sm mb-lg\">\n              <Shield className=\"h-8 w-8 text-foreground\" />\n              <h2 className=\"font-title text-heading-3 text-heading-3\">Privacy at a Glance</h2>\n            </div>\n            <div className=\"grid md:grid-cols-3 gap-lg\">\n              <div className=\"flex items-start gap-sm\">\n                <Eye className=\"h-5 w-5 text-foreground mt-xs\" />\n                <div>\n                  <h3 className=\"text-heading-4 mb-sm\">What We Collect</h3>\n                  <p className=\"text-body-sm color-muted\">Account info, usage data, and technical information to provide our services.</p>\n                </div>\n              </div>\n              <div className=\"flex items-start gap-sm\">\n                <Lock className=\"h-5 w-5 text-foreground mt-xs\" />\n                <div>\n                  <h3 className=\"text-heading-4 mb-sm\">How We Protect</h3>\n                  <p className=\"text-body-sm color-muted\">Enterprise-grade security, encryption, and access controls protect your data.</p>\n                </div>\n              </div>\n              <div className=\"flex items-start gap-sm\">\n                <Users className=\"h-5 w-5 text-foreground mt-xs\" />\n                <div>\n                  <h3 className=\"text-heading-4 mb-sm\">Your Rights</h3>\n                  <p className=\"text-body-sm color-muted\">Access, correct, delete, or export your data at any time.</p>\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Main Content */}\n        <div className=\"space-y-2xl\">\n          {/* Information We Collect */}\n          <section>\n            <h2 className=\"font-title text-heading-3 text-heading-3 mb-lg\">1. Information We Collect</h2>\n            \n            <div className=\"stack-lg\">\n              <div>\n                <h3 className=\"text-heading-4 text-body mb-sm\">Account Information</h3>\n                <p className=\"color-muted mb-sm\">\n                  When you create an account, we collect:\n                </p>\n                <ul className=\"list-disc list-inside stack-sm color-muted ml-md\">\n                  <li>Name and email address</li>\n                  <li>Company name and role</li>\n                  <li>Profile information you choose to provide</li>\n                  <li>Billing and payment information (processed securely by Stripe)</li>\n                </ul>\n              </div>\n\n              <div>\n                <h3 className=\"text-heading-4 text-body mb-sm\">Usage Data</h3>\n                <p className=\"color-muted mb-sm\">\n                  To improve our services, we collect:\n                </p>\n                <ul className=\"list-disc list-inside stack-sm color-muted ml-md\">\n                  <li>How you use our platform and features</li>\n                  <li>Projects and content you create (stored securely)</li>\n                  <li>Performance and error data</li>\n                  <li>Communication preferences</li>\n                </ul>\n              </div>\n\n              <div>\n                <h3 className=\"text-heading-4 text-body mb-sm\">Technical Information</h3>\n                <p className=\"color-muted mb-sm\">\n                  For security and functionality:\n                </p>\n                <ul className=\"list-disc list-inside stack-sm color-muted ml-md\">\n                  <li>IP address and device information</li>\n                  <li>Browser type and version</li>\n                  <li>Operating system</li>\n                  <li>Cookies and similar technologies</li>\n                </ul>\n              </div>\n            </div>\n          </section>\n\n          {/* How We Use Information */}\n          <section>\n            <h2 className=\"font-title text-heading-3 text-heading-3 mb-lg\">2. How We Use Your Information</h2>\n            \n            <div className=\"stack-md\">\n              <div className=\"flex items-start gap-sm\">\n                <div className=\"w-2 h-2 bg-accent rounded-full mt-sm\"></div>\n                <div>\n                  <h3 className=\"text-heading-4 mb-sm\">Provide Our Services</h3>\n                  <p className=\"color-muted\">Create and manage your account, process payments, and deliver our platform features.</p>\n                </div>\n              </div>\n              \n              <div className=\"flex items-start gap-sm\">\n                <div className=\"w-2 h-2 bg-accent rounded-full mt-sm\"></div>\n                <div>\n                  <h3 className=\"text-heading-4 mb-sm\">Improve Our Platform</h3>\n                  <p className=\"color-muted\">Analyze usage patterns, fix bugs, and develop new features based on user needs.</p>\n                </div>\n              </div>\n              \n              <div className=\"flex items-start gap-sm\">\n                <div className=\"w-2 h-2 bg-accent rounded-full mt-sm\"></div>\n                <div>\n                  <h3 className=\"text-heading-4 mb-sm\">Communicate With You</h3>\n                  <p className=\"color-muted\">Send important updates, security alerts, and optional marketing communications.</p>\n                </div>\n              </div>\n              \n              <div className=\"flex items-start gap-sm\">\n                <div className=\"w-2 h-2 bg-accent rounded-full mt-sm\"></div>\n                <div>\n                  <h3 className=\"text-heading-4 mb-sm\">Ensure Security</h3>\n                  <p className=\"color-muted\">Detect and prevent fraud, abuse, and security threats to protect all users.</p>\n                </div>\n              </div>\n            </div>\n          </section>\n\n          {/* Information Sharing */}\n          <section>\n            <h2 className=\"font-title text-heading-3 text-heading-3 mb-lg\">3. Information Sharing</h2>\n            \n            <Card className=\"bg-secondary/20\">\n              <CardContent className=\"p-lg\">\n                <p className=\"color-muted mb-md\">\n                  <strong>We do not sell your personal information.</strong> We only share information in these limited circumstances:\n                </p>\n                \n                <div className=\"stack-md\">\n                  <div>\n                    <h3 className=\"text-heading-4 mb-sm\">Service Providers</h3>\n                    <p className=\"text-body-sm color-muted\">Trusted partners who help us operate our platform (hosting, payments, analytics) under strict data protection agreements.</p>\n                  </div>\n                  \n                  <div>\n                    <h3 className=\"text-heading-4 mb-sm\">Legal Requirements</h3>\n                    <p className=\"text-body-sm color-muted\">When required by law, court order, or to protect our rights and safety.</p>\n                  </div>\n                  \n                  <div>\n                    <h3 className=\"text-heading-4 mb-sm\">Business Transfers</h3>\n                    <p className=\"text-body-sm color-muted\">In the event of a merger, acquisition, or sale of assets, with proper notice to users.</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </section>\n\n          {/* Data Security */}\n          <section>\n            <h2 className=\"font-title text-heading-3 text-heading-3 mb-lg\">4. Data Security</h2>\n            \n            <div className=\"grid md:grid-cols-2 gap-lg\">\n              <Card>\n                <CardContent className=\"p-lg\">\n                  <div className=\"flex items-center gap-sm mb-md\">\n                    <Lock className=\"h-6 w-6 text-foreground\" />\n                    <h3>Encryption</h3>\n                  </div>\n                  <p className=\"text-body-sm color-muted\">All data is encrypted in transit and at rest using industry-standard AES-256 encryption.</p>\n                </CardContent>\n              </Card>\n              \n              <Card>\n                <CardContent className=\"p-lg\">\n                  <div className=\"flex items-center gap-sm mb-md\">\n                    <Shield className=\"h-6 w-6 text-foreground\" />\n                    <h3>Access Controls</h3>\n                  </div>\n                  <p className=\"text-body-sm color-muted\">Strict access controls and regular security audits protect your information.</p>\n                </CardContent>\n              </Card>\n              \n              <Card>\n                <CardContent className=\"p-lg\">\n                  <div className=\"flex items-center gap-sm mb-md\">\n                    <Globe className=\"h-6 w-6 text-foreground\" />\n                    <h3>Compliance</h3>\n                  </div>\n                  <p className=\"text-body-sm color-muted\">SOC 2 Type II certified and GDPR/CCPA compliant data handling practices.</p>\n                </CardContent>\n              </Card>\n              \n              <Card>\n                <CardContent className=\"p-lg\">\n                  <div className=\"flex items-center gap-sm mb-md\">\n                    <Users className=\"h-6 w-6 text-foreground\" />\n                    <h3>Team Training</h3>\n                  </div>\n                  <p className=\"text-body-sm color-muted\">Regular security training for all employees with access to user data.</p>\n                </CardContent>\n              </Card>\n            </div>\n          </section>\n\n          {/* Your Rights */}\n          <section>\n            <h2 className=\"font-title text-heading-3 text-heading-3 mb-lg\">5. Your Rights and Choices</h2>\n            \n            <div className=\"stack-lg\">\n              <div>\n                <h3 className=\"text-heading-4 text-body mb-sm\">Data Access and Portability</h3>\n                <p className=\"color-muted\">\n                  You can access and export your data at any time through your account settings or by contacting us.\n                </p>\n              </div>\n              \n              <div>\n                <h3 className=\"text-heading-4 text-body mb-sm\">Correction and Updates</h3>\n                <p className=\"color-muted\">\n                  Update your profile information directly in your account or contact us for assistance.\n                </p>\n              </div>\n              \n              <div>\n                <h3 className=\"text-heading-4 text-body mb-sm\">Data Deletion</h3>\n                <p className=\"color-muted\">\n                  Request deletion of your account and associated data. Some information may be retained for legal or security purposes.\n                </p>\n              </div>\n              \n              <div>\n                <h3 className=\"text-heading-4 text-body mb-sm\">Marketing Communications</h3>\n                <p className=\"color-muted\">\n                  Opt out of marketing emails at any time using the unsubscribe link or account preferences.\n                </p>\n              </div>\n            </div>\n          </section>\n\n          {/* Cookies */}\n          <section>\n            <h2 className=\"font-title text-heading-3 text-heading-3 mb-lg\">6. Cookies and Tracking</h2>\n            \n            <p className=\"color-muted mb-md\">\n              We use cookies and similar technologies to enhance your experience:\n            </p>\n            \n            <div className=\"stack-sm\">\n              <div className=\"flex items-start gap-sm\">\n                <Badge variant=\"secondary\" className=\"mt-xs\">Essential</Badge>\n                <p className=\"text-body-sm color-muted\">Required for basic platform functionality and security.</p>\n              </div>\n              <div className=\"flex items-start gap-sm\">\n                <Badge variant=\"outline\" className=\"mt-xs\">Analytics</Badge>\n                <p className=\"text-body-sm color-muted\">Help us understand how you use our platform to improve it.</p>\n              </div>\n              <div className=\"flex items-start gap-sm\">\n                <Badge variant=\"outline\" className=\"mt-xs\">Preferences</Badge>\n                <p className=\"text-body-sm color-muted\">Remember your settings and preferences across sessions.</p>\n              </div>\n            </div>\n            \n            <p className=\"text-body-sm color-muted mt-md\">\n              You can manage cookie preferences through our cookie consent banner or browser settings.\n            </p>\n          </section>\n\n          {/* International Transfers */}\n          <section>\n            <h2 className=\"font-title text-heading-3 text-heading-3 mb-lg\">7. International Data Transfers</h2>\n            \n            <p className=\"color-muted mb-md\">\n              GHXSTSHIP operates globally. Your information may be transferred to and processed in countries other than your own, including the United States. We ensure appropriate safeguards are in place:\n            </p>\n            \n            <ul className=\"list-disc list-inside stack-sm color-muted ml-md\">\n              <li>Standard Contractual Clauses for EU data transfers</li>\n              <li>Adequacy decisions where available</li>\n              <li>Binding corporate rules for internal transfers</li>\n              <li>Your explicit consent where required</li>\n            </ul>\n          </section>\n\n          {/* Children’s Privacy */}\n          <section>\n            <h2 className=\"font-title text-heading-3 text-heading-3 mb-lg\">8. Children’s Privacy</h2>\n            \n            <Card className=\"bg-warning/10 border-warning/30\">\n              <CardContent className=\"p-lg\">\n                <p className=\"color-muted\">\n                  Our services are not intended for children under 13 years of age. We do not knowingly collect personal information from children under 13. If you believe we have collected information from a child under 13, please contact us immediately.\n                </p>\n              </CardContent>\n            </Card>\n          </section>\n\n          {/* Changes to Policy */}\n          <section>\n            <h2 className=\"font-title text-heading-3 text-heading-3 mb-lg\">9. Changes to This Policy</h2>\n            \n            <p className=\"color-muted mb-md\">\n              We may update this privacy policy from time to time. We will notify you of any material changes by:\n            </p>\n            \n            <ul className=\"list-disc list-inside stack-sm color-muted ml-md mb-md\">\n              <li>Email notification to your registered address</li>\n              <li>Prominent notice on our website</li>\n              <li>In-app notification when you next log in</li>\n            </ul>\n            \n            <p className=\"color-muted\">\n              Your continued use of our services after any changes indicates your acceptance of the updated policy.\n            </p>\n          </section>\n\n          {/* Contact Information */}\n          <section>\n            <h2 className=\"font-title text-heading-3 text-heading-3 mb-lg\">10. Contact Us</h2>\n            \n            <Card>\n              <CardContent className=\"p-lg\">\n                <div className=\"flex items-start gap-md\">\n                  <Mail className=\"h-6 w-6 text-foreground mt-xs\" />\n                  <div>\n                    <h3 className=\"text-heading-4 mb-sm\">Questions About This Policy?</h3>\n                    <p className=\"color-muted mb-md\">\n                      If you have any questions about this privacy policy or our data practices, please contact us:\n                    </p>\n                    \n                    <div className=\"stack-sm text-body-sm\">\n                      <p><strong>Email:</strong> privacy@ghxstship.com</p>\n                      <p><strong>Address:</strong> GHXSTSHIP, Inc.<br />123 Market Street, Suite 500<br />San Francisco, CA 94105</p>\n                      <p><strong>Data Protection Officer:</strong> dpo@ghxstship.com</p>\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </section>\n        </div>\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ghxstship/apps/web/app/(marketing)/products/atlvs/page.tsx","messages":[{"ruleId":"react/jsx-no-undef","severity":2,"message":"'ArrowRight' is not defined.","line":151,"column":22,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":151,"endColumn":32},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'CheckCircle' is not defined.","line":264,"column":28,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":264,"endColumn":39},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'ArrowRight' is not defined.","line":369,"column":20,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":369,"endColumn":30},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'CheckCircle' is not defined.","line":381,"column":18,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":381,"endColumn":29},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Zap' is not defined.","line":385,"column":18,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":385,"endColumn":21},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Shield' is not defined.","line":389,"column":18,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":389,"endColumn":24}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { User, FileText, Settings, Award, Calendar, TrendingUp, Activity, Clock, Plus, Search, Play, Trash2 } from \"lucide-react\";\nimport type { Metadata } from 'next';\nimport Link from 'next/link';\nimport { Button, Card, CardContent, Badge } from '@ghxstship/ui';\nimport { anton } from '../../../_components/lib/typography';\n\nexport const metadata: Metadata = {\n  title: 'ATLVS - Production Management That Actually Works | GHXSTSHIP',\n  description: 'Stop drowning in spreadsheets and Slack chaos. ATLVS helps you manage productions like a pro without the mental breakdown.',\n  openGraph: {\n    title: 'ATLVS - Production Management That Actually Works | GHXSTSHIP',\n    description: 'Stop drowning in spreadsheets and Slack chaos. ATLVS helps you manage productions like a pro without the mental breakdown.',\n    url: 'https://ghxstship.com/products/atlvs',\n  },\n};\n\nconst features = [\n  {\n    icon: Calendar,\n    title: 'Project Management',\n    description: 'End-to-end project lifecycle management with Gantt charts, milestones, dependencies, and automated scheduling.',\n    benefits: ['Visual project timelines', 'Resource allocation', 'Dependency tracking', 'Milestone management'],\n  },\n  {\n    icon: Users,\n    title: 'Team Collaboration',\n    description: 'Real-time communication, file sharing, collaborative workspaces, and integrated video conferencing.',\n    benefits: ['Real-time messaging', 'File version control', 'Collaborative editing', 'Video meetings'],\n  },\n  {\n    icon: BarChart3,\n    title: 'Analytics & Reporting',\n    description: 'AI-powered insights, custom dashboards, predictive analytics, and comprehensive reporting tools.',\n    benefits: ['Custom dashboards', 'Predictive insights', 'Performance metrics', 'Export capabilities'],\n  },\n  {\n    icon: Shield,\n    title: 'Enterprise Security',\n    description: 'SOC 2 compliance, advanced permissions, audit trails, and enterprise-grade data protection.',\n    benefits: ['SOC 2 certified', 'Role-based access', 'Audit logging', 'Data encryption'],\n  },\n  {\n    icon: Clock,\n    title: 'Time Tracking',\n    description: 'Accurate time logging, automated timesheets, billing integration, and productivity analytics.',\n    benefits: ['Automatic tracking', 'Billing integration', 'Productivity insights', 'Mobile time entry'],\n  },\n  {\n    icon: FileText,\n    title: 'Document Management',\n    description: 'Version control, approval workflows, secure file sharing, and collaborative document editing.',\n    benefits: ['Version history', 'Approval workflows', 'Secure sharing', 'Real-time editing'],\n  },\n  {\n    icon: Settings,\n    title: 'Custom Workflows',\n    description: 'Build and automate processes tailored to your specific needs with our visual workflow builder.',\n    benefits: ['Visual builder', 'Automation rules', 'Custom triggers', 'Integration hooks'],\n  },\n  {\n    icon: MessageSquare,\n    title: 'Communication Hub',\n    description: 'Centralized communication with threaded discussions, @mentions, and notification management.',\n    benefits: ['Threaded discussions', 'Smart notifications', '@mention system', 'Communication history'],\n  },\n];\n\nconst useCases = [\n  {\n    title: 'Film & TV Production',\n    description: 'Manage complex multi-location shoots, coordinate large crews, and track production schedules.',\n    stats: { projects: '15K+', savings: '45%', satisfaction: '99%' },\n  },\n  {\n    title: 'Advertising Campaigns',\n    description: 'Streamline creative workflows, manage client approvals, and deliver campaigns on time.',\n    stats: { projects: '25K+', savings: '35%', satisfaction: '97%' },\n  },\n  {\n    title: 'Corporate Content',\n    description: 'Coordinate internal communications, training materials, and brand content production.',\n    stats: { projects: '35K+', savings: '50%', satisfaction: '98%' },\n  },\n];\n\nconst testimonials = [\n  {\n    quote: \"ATLVS saved my sanity on our last production. Finally, a tool that actually helps instead of creating more work.\",\n    author: \"Sarah Chen\",\n    role: \"VP of Production, Meridian Studios\",\n    project: \"The Last Frontier\",\n  },\n  {\n    quote: \"No more chasing people down for updates or wondering if we’re on budget. ATLVS just works, which is honestly refreshing.\",\n    author: \"Marcus Rodriguez\",\n    role: \"Creative Director, Apex Advertising\",\n    project: \"Global Brand Campaign\",\n  },\n];\n\nexport default function ATLVSPage() {\n  return (\n    <div className=\"min-h-screen brand-ghostship\">\n      {/* Hero Section */}\n      <section className=\"py-4xl pb-5xl bg-gradient-subtle\">\n        <div className=\"container mx-auto px-md\">\n          <div className=\"grid lg:grid-cols-2 gap-2xl items-center\">\n            <div className=\"stack-xl\">\n              <div>\n                <Badge variant=\"outline\" className=\"mb-md\">\n                  Production Management\n                </Badge>\n                <h1 className={`${anton.className} text-heading-1 lg:text-display text-heading-3 mb-lg uppercase`}>\n                  <span className=\"text-gradient-accent\">\n                    ATLVS\n                  </span>\n                  <br />\n                  PROJECT MANAGEMENT\n                  <br />\n                  THAT DOESN’T SUCK\n                </h1>\n                <p className=\"text-heading-4 color-muted\">\n                  Finally, production management built by someone who’s actually managed real productions. \n                  Track budgets, wrangle crews, and hit deadlines without losing your mind.\n                </p>\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-lg\">\n                <div className=\"text-center lg:text-left\">\n                  <div className={`${anton.className} text-heading-2 text-heading-3 color-foreground mb-sm uppercase`}>75K+</div>\n                  <div className=\"text-body-sm color-muted\">Projects Managed</div>\n                </div>\n                <div className=\"text-center lg:text-left\">\n                  <div className={`${anton.className} text-heading-2 text-heading-3 color-foreground mb-sm uppercase`}>12K+</div>\n                  <div className=\"text-body-sm color-muted\">Active Teams</div>\n                </div>\n                <div className=\"text-center lg:text-left\">\n                  <div className={`${anton.className} text-heading-2 text-heading-3 color-foreground mb-sm uppercase`}>40%</div>\n                  <div className=\"text-body-sm color-muted\">Time Saved</div>\n                </div>\n                <div className=\"text-center lg:text-left\">\n                  <div className={`${anton.className} text-heading-2 text-heading-3 color-foreground mb-sm uppercase`}>98%</div>\n                  <div className=\"text-body-sm color-muted\">Satisfaction</div>\n                </div>\n              </div>\n\n              <div className=\"flex flex-col sm:flex-row gap-md\">\n                <Link href=\"/auth/signup\">\n                  <Button className=\"w-full sm:w-auto group\">\n                    Start Free Trial\n                    <ArrowRight className=\"ml-sm h-4 w-4 transition-transform group-hover:translate-x-1\" />\n                  </Button>\n                </Link>\n                <Button className=\"w-full sm:w-auto group\">\n                  <Play className=\"mr-sm h-4 w-4\" />\n                  Watch Demo\n                </Button>\n              </div>\n            </div>\n\n            {/* Dashboard Preview */}\n            <div className=\"relative\">\n              <Card className=\"bg-background border shadow-popover overflow-hidden\">\n                <div className=\"flex items-center gap-sm px-md py-sm bg-secondary/50 border-b\">\n                  <div className=\"flex gap-sm\">\n                    <div className=\"w-3 h-3 rounded-full bg-destructive\"></div>\n                    <div className=\"w-3 h-3 rounded-full bg-warning\"></div>\n                    <div className=\"w-3 h-3 rounded-full bg-success\"></div>\n                  </div>\n                  <div className=\"flex-1 text-center\">\n                    <div className=\"inline-flex items-center gap-sm  px-md py-xs bg-background rounded-md text-body-sm color-muted\">\n                      <div className=\"w-3 h-3 color-success\">🔒</div>\n                      atlvs.ghxstship.com\n                    </div>\n                  </div>\n                </div>\n\n                <CardContent className=\"p-lg stack-md\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <h3 className={`${anton.className} text-body text-heading-3 uppercase`}>BLACKWATER REVERB</h3>\n                      <p className=\"text-body-sm color-muted\">Main Deck Takeover</p>\n                    </div>\n                    <Badge variant=\"outline\" className=\"color-success border-success\">\n                      On Track\n                    </Badge>\n                  </div>\n\n                  <div className=\"grid grid-cols-3 gap-sm\">\n                    <div className=\"bg-secondary/30 rounded-lg p-sm\">\n                      <div className=\"text-body-sm color-muted mb-xs\">Budget</div>\n                      <div>$75K</div>\n                      <div className=\"w-full bg-secondary rounded-full h-1 mt-sm\">\n                        <div className=\"bg-accent h-1 rounded-full w-3/4\"></div>\n                      </div>\n                    </div>\n                    <div className=\"bg-secondary/30 rounded-lg p-sm\">\n                      <div className=\"text-body-sm color-muted mb-xs\">Timeline</div>\n                      <div>85%</div>\n                      <div className=\"w-full bg-secondary rounded-full h-1 mt-sm\">\n                        <div className=\"bg-secondary h-1 rounded-full w-4/5\"></div>\n                      </div>\n                    </div>\n                    <div className=\"bg-secondary/30 rounded-lg p-sm\">\n                      <div className=\"text-body-sm color-muted mb-xs\">Team</div>\n                      <div>12</div>\n                      <div className=\"flex -cluster-xs mt-sm\">\n                        {[1, 2, 3].map((i: unknown) => (\n                          <div key={i} className=\"w-4 h-4 bg-accent rounded-full border border-background\"></div>\n                        ))}\n                      </div>\n                    </div>\n                  </div>\n\n                  <div className=\"stack-sm\">\n                    <div className=\"text-body-sm form-label color-muted\">Recent Activity</div>\n                    {[\n                      { user: 'Captain Blackwater', action: 'approved budget revision', time: '2m ago' },\n                      { user: 'First Mate Torres', action: 'updated crew schedule', time: '5m ago' },\n                      { user: 'Quartermaster Jin', action: 'ordered new equipment', time: '12m ago' },\n                    ].map((activity, i) => (\n                      <div key={i} className=\"flex items-center gap-sm text-body-sm\">\n                        <div className=\"w-2 h-2 bg-accent rounded-full\"></div>\n                        <span className=\"form-label\">{activity.user}</span>\n                        <span className=\"color-muted\">{activity.action}</span>\n                        <span className=\"color-muted ml-auto\">{activity.time}</span>\n                      </div>\n                    ))}\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Features Section */}\n      <section className=\"py-4xl\">\n        <div className=\"container mx-auto px-md\">\n          <div className=\"text-center mb-3xl\">\n            <h2 className={`${anton.className} text-heading-2 lg:text-heading-1 text-heading-3 mb-lg uppercase`}>\n              FEATURES THAT ACTUALLY HELP\n            </h2>\n            <p className=\"text-body color-muted max-w-3xl mx-auto\">\n              All the tools you need to manage productions without juggling 47 different apps. \n              Built from 13+ years of real-world production experience.\n            </p>\n          </div>\n\n          <div className=\"grid md:grid-cols-2 lg:grid-cols-4 gap-lg\">\n            {features.map((feature: unknown) => {\n              const Icon = feature.icon;\n              return (\n                <Card key={feature.title} className=\"hover:shadow-floating transition-shadow\">\n                  <CardContent className=\"p-lg\">\n                    <div className=\"inline-flex items-center justify-center w-12 h-12 rounded-lg bg-gradient-to-r from-primary to-secondary mb-md\">\n                      <Icon className=\"h-6 w-6 text-background\" />\n                    </div>\n                    <h3 className=\"text-heading-4 color-foreground mb-sm\">{feature.title}</h3>\n                    <p className=\"text-body-sm color-muted mb-md\">{feature.description}</p>\n                    <div className=\"stack-xs\">\n                      {feature.benefits.map((benefit: unknown) => (\n                        <div key={benefit} className=\"flex items-center gap-sm\">\n                          <CheckCircle className=\"h-3 w-3 color-success flex-shrink-0\" />\n                          <span className=\"text-body-sm color-muted\">{benefit}</span>\n                        </div>\n                      ))}\n                    </div>\n                  </CardContent>\n                </Card>\n              );\n            })}\n          </div>\n        </div>\n      </section>\n\n      {/* Use Cases Section */}\n      <section className=\"py-4xl bg-secondary/20\">\n        <div className=\"container mx-auto px-md\">\n          <div className=\"text-center mb-3xl\">\n            <h2 className={`${anton.className} text-heading-2 lg:text-heading-1 text-heading-3 mb-lg uppercase`}>\n              WORKS FOR REAL PRODUCTIONS\n            </h2>\n            <p className=\"text-body color-muted max-w-3xl mx-auto\">\n              Whether you’re managing a 50-person festival crew or a 5-person corporate shoot, \n              ATLVS scales without breaking (unlike your sanity with other tools).\n            </p>\n          </div>\n\n          <div className=\"grid lg:grid-cols-3 gap-xl\">\n            {useCases.map((useCase: unknown) => (\n              <Card key={useCase.title} className=\"hover:shadow-floating transition-shadow\">\n                <CardContent className=\"p-xl\">\n                  <h3 className={`${anton.className} text-heading-4 text-heading-3 mb-md uppercase`}>{useCase.title}</h3>\n                  <p className=\"color-muted mb-lg\">{useCase.description}</p>\n                  \n                  <div className=\"grid grid-cols-3 gap-md pt-lg border-t\">\n                    <div className=\"text-center\">\n                      <div className={`${anton.className} text-body text-heading-3 text-foreground uppercase`}>{useCase.stats.projects}</div>\n                      <div className=\"text-body-sm color-muted\">Projects</div>\n                    </div>\n                    <div className=\"text-center\">\n                      <div className={`${anton.className} text-body text-heading-3 color-success uppercase`}>{useCase.stats.savings}</div>\n                      <div className=\"text-body-sm color-muted\">Time Saved</div>\n                    </div>\n                    <div className=\"text-center\">\n                      <div className={`${anton.className} text-body text-heading-3 color-secondary uppercase`}>{useCase.stats.satisfaction}</div>\n                      <div className=\"text-body-sm color-muted\">Satisfaction</div>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* Testimonials Section */}\n      <section className=\"py-4xl\">\n        <div className=\"container mx-auto px-md\">\n          <div className=\"text-center mb-3xl\">\n            <h2 className={`${anton.className} text-heading-2 lg:text-heading-1 text-heading-3 mb-lg uppercase`}>\n              LOVED BY PRODUCTION PROS\n            </h2>\n          </div>\n\n          <div className=\"grid lg:grid-cols-2 gap-xl max-w-4xl mx-auto\">\n            {testimonials.map((testimonial, index) => (\n              <Card key={index} className=\"hover:shadow-floating transition-shadow\">\n                <CardContent className=\"p-xl\">\n                  <blockquote className=\"text-body color-foreground mb-lg leading-relaxed\">\n                    “{testimonial.quote}”\n                  </blockquote>\n                  <div className=\"flex items-center gap-md\">\n                    <div className=\"w-12 h-12 bg-gradient-to-r from-primary to-secondary rounded-full flex items-center justify-center\">\n                      <span className=\"text-background text-heading-4 text-body-sm\">\n                        {testimonial.author.split(' ').map(n => n[0]).join('')}\n                      </span>\n                    </div>\n                    <div>\n                      <div className=\"text-heading-4 color-foreground\">{testimonial.author}</div>\n                      <div className=\"text-body-sm color-muted\">{testimonial.role}</div>\n                      <div className=\"text-body-sm color-muted\">Project: {testimonial.project}</div>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* CTA Section */}\n      <section className=\"py-4xl bg-gradient-to-r from-primary/5 to-accent/5\">\n        <div className=\"container mx-auto px-md\">\n          <div className=\"text-center\">\n            <h2 className={`${anton.className} text-heading-2 lg:text-heading-1 text-heading-3 mb-lg uppercase`}>\n              READY TO STOP THE CHAOS?\n            </h2>\n            <p className=\"text-body color-muted mb-xl max-w-2xl mx-auto\">\n              Join 12K+ production teams who ditched spreadsheet hell for something that actually works. \n              Your crew will thank you (and so will your stress levels).\n            </p>\n            \n            <div className=\"flex flex-col sm:flex-row gap-md justify-center mb-xl\">\n              <Link href=\"/auth/signup\">\n                <Button className=\"w-full sm:w-auto group\">\n                  Start Free Trial\n                  <ArrowRight className=\"ml-sm h-4 w-4 transition-transform group-hover:translate-x-1\" />\n                </Button>\n              </Link>\n              <Link href=\"/pricing\">\n                <Button variant=\"outline\" className=\"w-full sm:w-auto\">\n                  View Pricing\n                </Button>\n              </Link>\n            </div>\n\n            <div className=\"flex flex-wrap justify-center items-center gap-lg text-body-sm color-muted\">\n              <div className=\"flex items-center gap-sm\">\n                <CheckCircle className=\"h-4 w-4 color-success\" />\n                <span>14-day free trial</span>\n              </div>\n              <div className=\"flex items-center gap-sm\">\n                <Zap className=\"h-4 w-4 text-foreground\" />\n                <span>Setup in minutes</span>\n              </div>\n              <div className=\"flex items-center gap-sm\">\n                <Shield className=\"h-4 w-4 text-foreground\" />\n                <span>Enterprise security</span>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ghxstship/apps/web/app/(marketing)/terms/page.tsx","messages":[{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":54,"column":108,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[2438,2496],"text":"Use our platform lawfully and respect other users&apos; rights."},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[2438,2496],"text":"Use our platform lawfully and respect other users&lsquo; rights."},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[2438,2496],"text":"Use our platform lawfully and respect other users&#39; rights."},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[2438,2496],"text":"Use our platform lawfully and respect other users&rsquo; rights."},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":208,"column":57,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[10071,10212],"text":"\n                  We may change our pricing with 30 days&apos; notice. Price changes will not affect your current billing cycle.\n                "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[10071,10212],"text":"\n                  We may change our pricing with 30 days&lsquo; notice. Price changes will not affect your current billing cycle.\n                "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[10071,10212],"text":"\n                  We may change our pricing with 30 days&#39; notice. Price changes will not affect your current billing cycle.\n                "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[10071,10212],"text":"\n                  We may change our pricing with 30 days&rsquo; notice. Price changes will not affect your current billing cycle.\n                "},"desc":"Replace with `&rsquo;`."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Scale, FileText, Shield, AlertTriangle, Mail } from \"lucide-react\";\nimport type { Metadata } from 'next';\nimport { Card, CardContent, Badge } from '@ghxstship/ui';\n\nexport const metadata: Metadata = {\n  title: 'Terms of Service | GHXSTSHIP',\n  description: 'Read our terms of service and understand your rights and responsibilities when using GHXSTSHIP.',\n  openGraph: {\n    title: 'Terms of Service | GHXSTSHIP',\n    description: 'Read our terms of service and understand your rights and responsibilities when using GHXSTSHIP.',\n    url: 'https://ghxstship.com/terms',\n  },\n};\n\nexport default function TermsOfServicePage() {\n  return (\n    <div className=\"min-h-screen py-4xl\">\n      <div className=\"container mx-auto px-md max-w-4xl\">\n        {/* Header */}\n        <div className=\"text-center mb-3xl\">\n          <Badge variant=\"outline\" className=\"mb-md\">\n            Legal\n          </Badge>\n          <h1 className=\"font-title text-heading-1 lg:text-display text-heading-3 mb-lg\">\n            TERMS OF SERVICE\n          </h1>\n          <p className=\"text-body color-muted mb-md\">\n            These terms govern your use of GHXSTSHIP’s services and platform.\n          </p>\n          <p className=\"text-body-sm color-muted\">\n            Last updated: December 15, 2024\n          </p>\n        </div>\n\n        {/* Quick Summary */}\n        <Card className=\"mb-2xl bg-gradient-to-r from-primary/5 to-accent/5\">\n          <CardContent className=\"p-xl\">\n            <div className=\"flex items-center gap-sm mb-lg\">\n              <Scale className=\"h-8 w-8 text-foreground\" />\n              <h2 className=\"font-title text-heading-3 text-heading-3\">Terms Summary</h2>\n            </div>\n            <div className=\"grid md:grid-cols-3 gap-lg\">\n              <div className=\"flex items-start gap-sm\">\n                <FileText className=\"h-5 w-5 text-foreground mt-xs\" />\n                <div>\n                  <h3 className=\"text-heading-4 mb-sm\">Your Agreement</h3>\n                  <p className=\"text-body-sm color-muted\">By using our services, you agree to these terms and our privacy policy.</p>\n                </div>\n              </div>\n              <div className=\"flex items-start gap-sm\">\n                <Shield className=\"h-5 w-5 text-foreground mt-xs\" />\n                <div>\n                  <h3 className=\"text-heading-4 mb-sm\">Your Responsibilities</h3>\n                  <p className=\"text-body-sm color-muted\">Use our platform lawfully and respect other users' rights.</p>\n                </div>\n              </div>\n              <div className=\"flex items-start gap-sm\">\n                <AlertTriangle className=\"h-5 w-5 text-foreground mt-xs\" />\n                <div>\n                  <h3 className=\"text-heading-4 mb-sm\">Important Limits</h3>\n                  <p className=\"text-body-sm color-muted\">Our liability is limited and disputes are resolved through arbitration.</p>\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Main Content */}\n        <div className=\"space-y-2xl\">\n          {/* Acceptance of Terms */}\n          <section>\n            <h2 className=\"font-title text-heading-3 text-heading-3 mb-lg\">1. Acceptance of Terms</h2>\n            <p className=\"color-muted mb-md\">\n              By accessing or using GHXSTSHIP’s services, you agree to be bound by these Terms of Service (&ldquo;Terms&rdquo;) and our Privacy Policy. If you disagree with any part of these terms, you may not access our services.\n            </p>\n            <p className=\"color-muted\">\n              These Terms apply to all visitors, users, and others who access or use our service, including our website, mobile applications, and API.\n            </p>\n          </section>\n\n          {/* Description of Service */}\n          <section>\n            <h2 className=\"font-title text-heading-3 text-heading-3 mb-lg\">2. Description of Service</h2>\n            <p className=\"color-muted mb-md\">\n              GHXSTSHIP provides cloud-based production management software including:\n            </p>\n            <ul className=\"list-disc list-inside stack-sm color-muted ml-md mb-md\">\n              <li>ATLVS - Production management and workflow tools</li>\n              <li>OPENDECK - Creative asset management platform</li>\n              <li>Related APIs, integrations, and support services</li>\n            </ul>\n            <p className=\"color-muted\">\n              We reserve the right to modify, suspend, or discontinue any part of our service at any time with reasonable notice.\n            </p>\n          </section>\n\n          {/* User Accounts */}\n          <section>\n            <h2 className=\"font-title text-heading-3 text-heading-3 mb-lg\">3. User Accounts</h2>\n            \n            <div className=\"stack-lg\">\n              <div>\n                <h3 className=\"text-heading-4 text-body mb-sm\">Account Registration</h3>\n                <p className=\"color-muted mb-sm\">\n                  To use our services, you must:\n                </p>\n                <ul className=\"list-disc list-inside stack-sm color-muted ml-md\">\n                  <li>Provide accurate and complete information</li>\n                  <li>Be at least 18 years old or have parental consent</li>\n                  <li>Maintain the security of your account credentials</li>\n                  <li>Notify us immediately of any unauthorized access</li>\n                </ul>\n              </div>\n\n              <div>\n                <h3 className=\"text-heading-4 text-body mb-sm\">Account Responsibility</h3>\n                <p className=\"color-muted\">\n                  You are responsible for all activities that occur under your account. You agree to use strong passwords and enable two-factor authentication when available.\n                </p>\n              </div>\n            </div>\n          </section>\n\n          {/* Acceptable Use */}\n          <section>\n            <h2 className=\"font-title text-heading-3 text-heading-3 mb-lg\">4. Acceptable Use Policy</h2>\n            \n            <Card className=\"bg-destructive/10 border-destructive/20 mb-lg\">\n              <CardContent className=\"p-lg\">\n                <div className=\"flex items-start gap-sm\">\n                  <AlertTriangle className=\"h-6 w-6 color-destructive mt-xs\" />\n                  <div>\n                    <h3 className=\"text-heading-4 color-destructive mb-sm\">Prohibited Activities</h3>\n                    <p className=\"text-body-sm color-destructive/80\">\n                      The following activities are strictly prohibited and may result in immediate account termination.\n                    </p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <div className=\"stack-md\">\n              <div>\n                <h3 className=\"text-heading-4 mb-sm\">You may not:</h3>\n                <ul className=\"list-disc list-inside stack-sm color-muted ml-md\">\n                  <li>Violate any applicable laws or regulations</li>\n                  <li>Infringe on intellectual property rights</li>\n                  <li>Upload malicious code or attempt to hack our systems</li>\n                  <li>Spam, harass, or abuse other users</li>\n                  <li>Share your account credentials with others</li>\n                  <li>Use our service for illegal or unauthorized purposes</li>\n                  <li>Attempt to reverse engineer our software</li>\n                  <li>Exceed rate limits or abuse our API</li>\n                </ul>\n              </div>\n            </div>\n          </section>\n\n          {/* Content and Data */}\n          <section>\n            <h2 className=\"font-title text-heading-3 text-heading-3 mb-lg\">5. Content and Data</h2>\n            \n            <div className=\"stack-lg\">\n              <div>\n                <h3 className=\"text-heading-4 text-body mb-sm\">Your Content</h3>\n                <p className=\"color-muted mb-sm\">\n                  You retain ownership of all content you upload to our platform. By using our service, you grant us a limited license to:\n                </p>\n                <ul className=\"list-disc list-inside stack-sm color-muted ml-md\">\n                  <li>Store and process your content to provide our services</li>\n                  <li>Make backups for data protection and recovery</li>\n                  <li>Display your content to authorized team members</li>\n                  <li>Analyze usage patterns to improve our platform (anonymized)</li>\n                </ul>\n              </div>\n\n              <div>\n                <h3 className=\"text-heading-4 text-body mb-sm\">Content Standards</h3>\n                <p className=\"color-muted\">\n                  All content must comply with applicable laws and our community guidelines. We reserve the right to remove content that violates these terms or is reported by other users.\n                </p>\n              </div>\n\n              <div>\n                <h3 className=\"text-heading-4 text-body mb-sm\">Data Backup</h3>\n                <p className=\"color-muted\">\n                  While we maintain regular backups, you are responsible for maintaining your own copies of important data. We recommend regular exports of critical information.\n                </p>\n              </div>\n            </div>\n          </section>\n\n          {/* Payment Terms */}\n          <section>\n            <h2 className=\"font-title text-heading-3 text-heading-3 mb-lg\">6. Payment Terms</h2>\n            \n            <div className=\"stack-lg\">\n              <div>\n                <h3 className=\"text-heading-4 text-body mb-sm\">Subscription Fees</h3>\n                <p className=\"color-muted mb-sm\">\n                  Paid plans are billed in advance on a monthly or annual basis. Fees are non-refundable except as required by law or as specified in our refund policy.\n                </p>\n              </div>\n\n              <div>\n                <h3 className=\"text-heading-4 text-body mb-sm\">Price Changes</h3>\n                <p className=\"color-muted mb-sm\">\n                  We may change our pricing with 30 days' notice. Price changes will not affect your current billing cycle.\n                </p>\n              </div>\n\n              <div>\n                <h3 className=\"text-heading-4 text-body mb-sm\">Late Payment</h3>\n                <p className=\"color-muted\">\n                  If payment fails, we may suspend your account after reasonable notice. You remain responsible for all charges incurred before suspension.\n                </p>\n              </div>\n            </div>\n          </section>\n\n          {/* Intellectual Property */}\n          <section>\n            <h2 className=\"font-title text-heading-3 text-heading-3 mb-lg\">7. Intellectual Property</h2>\n            \n            <div className=\"stack-md\">\n              <div>\n                <h3 className=\"text-heading-4 mb-sm\">Our Rights</h3>\n                <p className=\"color-muted\">\n                  GHXSTSHIP and its licensors own all rights to our platform, including software, designs, trademarks, and documentation. These Terms do not grant you any ownership rights.\n                </p>\n              </div>\n              \n              <div>\n                <h3 className=\"text-heading-4 mb-sm\">License to Use</h3>\n                <p className=\"color-muted\">\n                  We grant you a limited, non-exclusive, non-transferable license to use our platform in accordance with these Terms and your subscription plan.\n                </p>\n              </div>\n              \n              <div>\n                <h3 className=\"text-heading-4 mb-sm\">Feedback</h3>\n                <p className=\"color-muted\">\n                  Any feedback, suggestions, or ideas you provide may be used by us without compensation or attribution.\n                </p>\n              </div>\n            </div>\n          </section>\n\n          {/* Privacy and Security */}\n          <section>\n            <h2 className=\"font-title text-heading-3 text-heading-3 mb-lg\">8. Privacy and Security</h2>\n            \n            <p className=\"color-muted mb-md\">\n              Your privacy is important to us. Our collection and use of personal information is governed by our Privacy Policy, which is incorporated into these Terms by reference.\n            </p>\n            \n            <div className=\"grid md:grid-cols-2 gap-lg\">\n              <Card>\n                <CardContent className=\"p-lg\">\n                  <h3 className=\"text-heading-4 mb-sm\">Data Security</h3>\n                  <p className=\"text-body-sm color-muted\">\n                    We implement industry-standard security measures, but cannot guarantee absolute security. You should also take precautions to protect your data.\n                  </p>\n                </CardContent>\n              </Card>\n              \n              <Card>\n                <CardContent className=\"p-lg\">\n                  <h3 className=\"text-heading-4 mb-sm\">Data Processing</h3>\n                  <p className=\"text-body-sm color-muted\">\n                    We process your data in accordance with applicable privacy laws, including GDPR and CCPA where applicable.\n                  </p>\n                </CardContent>\n              </Card>\n            </div>\n          </section>\n\n          {/* Disclaimers */}\n          <section>\n            <h2 className=\"font-title text-heading-3 text-heading-3 mb-lg\">9. Disclaimers</h2>\n            \n            <Card className=\"bg-warning/10 border-warning/20\">\n              <CardContent className=\"p-lg\">\n                <p className=\"color-muted mb-md\">\n                  <strong>IMPORTANT:</strong> Our services are provided &quot;as is&quot; without warranties of any kind, either express or implied.\n                </p>\n                \n                <div className=\"stack-sm text-body-sm color-muted\">\n                  <p>We disclaim all warranties, including but not limited to:</p>\n                  <ul className=\"list-disc list-inside stack-xs ml-md\">\n                    <li>Merchantability and fitness for a particular purpose</li>\n                    <li>Non-infringement of third-party rights</li>\n                    <li>Uninterrupted or error-free operation</li>\n                    <li>Security or accuracy of data transmission</li>\n                  </ul>\n                </div>\n              </CardContent>\n            </Card>\n          </section>\n\n          {/* Limitation of Liability */}\n          <section>\n            <h2 className=\"font-title text-heading-3 text-heading-3 mb-lg\">10. Limitation of Liability</h2>\n            \n            <Card className=\"bg-destructive/10 border-destructive/20\">\n              <CardContent className=\"p-lg\">\n                <p className=\"color-muted mb-md\">\n                  <strong>LIABILITY LIMITS:</strong> To the maximum extent permitted by law, GHXSTSHIP’s total liability is limited to the amount you paid us in the 12 months preceding the claim.\n                </p>\n                \n                <div className=\"stack-sm text-body-sm color-muted\">\n                  <p>We are not liable for:</p>\n                  <ul className=\"list-disc list-inside stack-xs ml-md\">\n                    <li>Indirect, incidental, or consequential damages</li>\n                    <li>Loss of profits, data, or business opportunities</li>\n                    <li>Third-party actions or content</li>\n                    <li>Service interruptions or data loss</li>\n                  </ul>\n                </div>\n              </CardContent>\n            </Card>\n          </section>\n\n          {/* Indemnification */}\n          <section>\n            <h2 className=\"font-title text-heading-3 text-heading-3 mb-lg\">11. Indemnification</h2>\n            \n            <p className=\"color-muted\">\n              You agree to indemnify and hold harmless GHXSTSHIP from any claims, damages, or expenses arising from your use of our services, violation of these Terms, or infringement of any rights of another party.\n            </p>\n          </section>\n\n          {/* Termination */}\n          <section>\n            <h2 className=\"font-title text-heading-3 text-heading-3 mb-lg\">12. Termination</h2>\n            \n            <div className=\"stack-md\">\n              <div>\n                <h3 className=\"text-heading-4 mb-sm\">By You</h3>\n                <p className=\"color-muted\">\n                  You may terminate your account at any time through your account settings or by contacting us. Termination does not entitle you to a refund of prepaid fees.\n                </p>\n              </div>\n              \n              <div>\n                <h3 className=\"text-heading-4 mb-sm\">By Us</h3>\n                <p className=\"color-muted\">\n                  We may suspend or terminate your account for violation of these Terms, non-payment, or other reasons with reasonable notice when possible.\n                </p>\n              </div>\n              \n              <div>\n                <h3 className=\"text-heading-4 mb-sm\">Effect of Termination</h3>\n                <p className=\"color-muted\">\n                  Upon termination, your access will cease and we may delete your data after a reasonable retention period. You should export important data before termination.\n                </p>\n              </div>\n            </div>\n          </section>\n\n          {/* Dispute Resolution */}\n          <section>\n            <h2 className=\"font-title text-heading-3 text-heading-3 mb-lg\">13. Dispute Resolution</h2>\n            \n            <div className=\"stack-md\">\n              <div>\n                <h3 className=\"text-heading-4 mb-sm\">Informal Resolution</h3>\n                <p className=\"color-muted\">\n                  Before filing any formal dispute, please contact us at legal@ghxstship.com to attempt informal resolution.\n                </p>\n              </div>\n              \n              <div>\n                <h3 className=\"text-heading-4 mb-sm\">Binding Arbitration</h3>\n                <p className=\"color-muted\">\n                  Any disputes will be resolved through binding arbitration rather than in court, except for small claims court matters and intellectual property disputes.\n                </p>\n              </div>\n              \n              <div>\n                <h3 className=\"text-heading-4 mb-sm\">Class Action Waiver</h3>\n                <p className=\"color-muted\">\n                  You agree to resolve disputes individually and waive the right to participate in class actions or representative proceedings.\n                </p>\n              </div>\n            </div>\n          </section>\n\n          {/* General Provisions */}\n          <section>\n            <h2 className=\"font-title text-heading-3 text-heading-3 mb-lg\">14. General Provisions</h2>\n            \n            <div className=\"stack-md\">\n              <div>\n                <h3 className=\"text-heading-4 mb-sm\">Governing Law</h3>\n                <p className=\"color-muted\">\n                  These Terms are governed by the laws of California, United States, without regard to conflict of law principles.\n                </p>\n              </div>\n              \n              <div>\n                <h3 className=\"text-heading-4 mb-sm\">Severability</h3>\n                <p className=\"color-muted\">\n                  If any provision is found unenforceable, the remaining provisions will continue in full force and effect.\n                </p>\n              </div>\n              \n              <div>\n                <h3 className=\"text-heading-4 mb-sm\">Entire Agreement</h3>\n                <p className=\"color-muted\">\n                  These Terms, together with our Privacy Policy, constitute the entire agreement between you and GHXSTSHIP.\n                </p>\n              </div>\n              \n              <div>\n                <h3 className=\"text-heading-4 mb-sm\">Changes to Terms</h3>\n                <p className=\"color-muted\">\n                  We may update these Terms from time to time. Material changes will be communicated with reasonable advance notice.\n                </p>\n              </div>\n            </div>\n          </section>\n\n          {/* Contact Information */}\n          <section>\n            <h2 className=\"font-title text-heading-3 text-heading-3 mb-lg\">15. Contact Information</h2>\n            \n            <Card>\n              <CardContent className=\"p-lg\">\n                <div className=\"flex items-start gap-md\">\n                  <Mail className=\"h-6 w-6 text-foreground mt-xs\" />\n                  <div>\n                    <h3 className=\"text-heading-4 mb-sm\">Questions About These Terms?</h3>\n                    <p className=\"color-muted mb-md\">\n                      If you have questions about these Terms of Service, please contact us:\n                    </p>\n                    \n                    <div className=\"stack-sm text-body-sm\">\n                      <p><strong>Email:</strong> legal@ghxstship.com</p>\n                      <p><strong>Address:</strong> GHXSTSHIP, Inc.<br />123 Market Street, Suite 500<br />San Francisco, CA 94105</p>\n                      <p><strong>Phone:</strong> +1 (555) 123-4567</p>\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </section>\n        </div>\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ghxstship/apps/web/app/_components/marketing/FeatureCard.tsx","messages":[{"ruleId":"@next/next/no-img-element","severity":1,"message":"Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` or a custom image loader to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","line":138,"column":13,"nodeType":"JSXOpeningElement","endLine":142,"endColumn":15}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\n\nimport { LucideIcon } from \"lucide-react\";\nimport { Card, CardContent  } from '@ghxstship/ui';\n// import { typography } from '../../../../(marketing)/lib/typography';\nimport { cn } from '../lib/utils';\n\ninterface FeatureCardProps {\n  title: string;\n  description: string;\n  icon?: LucideIcon;\n  label?: string; // e.g., ATLVS or OPENDECK\n  gradient?: string;\n  className?: string;\n  variant?: 'default' | 'hover' | 'compact';\n}\n\nexport function FeatureCard({\n  title,\n  description,\n  icon: Icon,\n  label,\n  gradient = 'from-primary to-secondary',\n  className,\n  variant = 'default'\n}: FeatureCardProps) {\n  const variants = {\n    default: '',\n    hover: 'group hover:shadow-floating transition-all duration-300 hover:-translate-y-1',\n    compact: '',\n  };\n\n  return (\n    <Card className={cn(variants[variant], className)}>\n      <CardContent className=\"p-lg\">\n        {Icon && (\n          <div className={cn(\n            'inline-flex items-center justify-center w-12 h-12 rounded-lg mb-sm',\n            `bg-gradient-to-r ${gradient}`\n          )}>\n            <Icon className=\"h-6 w-6 text-background\" />\n          </div>\n        )}\n        \n        {label && (\n          <div className=\"mb-xs text-body-xs uppercase tracking-wide text-foreground/70\">\n            {label}\n          </div>\n        )}\n        \n        <h3 className=\"text-xl font-semibold mb-sm\">\n          {title}\n        </h3>\n        \n        <p className=\"text-sm text-muted-foreground\">\n          {description}\n        </p>\n      </CardContent>\n    </Card>\n  );\n}\n\ninterface StatsCardProps {\n  value: string;\n  label: string;\n  icon?: LucideIcon;\n  trend?: {\n    value: string;\n    direction: 'up' | 'down';\n  };\n  className?: string;\n}\n\nexport function StatsCard({\n  value,\n  label,\n  icon: Icon,\n  trend,\n  className\n}: StatsCardProps) {\n  return (\n    <Card className={cn('text-center', className)}>\n      <CardContent className=\"p-lg\">\n        {Icon && (\n          <div className=\"inline-flex items-center justify-center w-12 h-12 rounded-lg bg-accent/10 mb-sm\">\n            <Icon className=\"h-6 w-6 color-accent\" />\n          </div>\n        )}\n        \n        <div className=\"text-2xl font-bold mb-xs\">\n          {value}\n        </div>\n        \n        <div className=\"text-sm text-muted-foreground\">\n          {label}\n        </div>\n        \n        {trend && (\n          <div className={cn(\n            'text-body-sm form-label mt-xs',\n            trend.direction === 'up' ? 'color-success' : 'color-destructive'\n          )}>\n            {trend.direction === 'up' ? '↗' : '↘'} {trend.value}\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n\ninterface TestimonialCardProps {\n  quote: string;\n  author: string;\n  role: string;\n  company?: string;\n  avatar?: string;\n  className?: string;\n}\n\nexport function TestimonialCard({\n  quote,\n  author,\n  role,\n  company,\n  avatar,\n  className\n}: TestimonialCardProps) {\n  return (\n    <Card className={cn(className)}>\n      <CardContent className=\"p-lg\">\n        <blockquote className=\"text-body mb-md italic\">\n          &ldquo;{quote}&rdquo;\n        </blockquote>\n        \n        <div className=\"flex items-center gap-xl\">\n          {avatar && (\n            <img\n              src={avatar}\n              alt={author}\n              className=\"w-12 h-12 rounded-full object-cover\"\n            />\n          )}\n          \n          <div>\n            <div className=\"text-body-sm\">{author}</div>\n            <div className=\"text-body-sm color-muted\">\n              {role}\n              {company ? ` at ${company}` : ''}\n            </div>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ghxstship/apps/web/app/_components/marketing/MarketingHeader.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has unnecessary dependencies: 'isOpen' and 'scrollDirection'. Either exclude them or remove the dependency array.","line":43,"column":6,"nodeType":"ArrayExpression","endLine":43,"endColumn":44,"suggestions":[{"desc":"Update the dependencies array to be: [lastScrollY]","fix":{"range":[1653,1691],"text":"[lastScrollY]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { Menu, X, ChevronDown } from \"lucide-react\";\nimport { useState, useEffect, useCallback, useRef } from 'react';\nimport Link from 'next/link';\nimport { usePathname } from 'next/navigation';\nimport { Button } from '@ghxstship/ui';\nimport { headerVariants } from '@ghxstship/ui';\nimport { cn } from '../lib/utils';\nimport { anton } from '../lib/typography';\nimport { navigation, NavigationItem } from '../lib/navigation';\nimport { NavigationDropdown } from './navigation/NavigationDropdown';\nimport { MobileMenu } from './navigation/MobileMenu';\n\nexport function MarketingHeader() {\n  const [isOpen, setIsOpen] = useState(false);\n  const [activeDropdown, setActiveDropdown] = useState<string | null>(null);\n  const [isScrolled, setIsScrolled] = useState(false);\n  const [scrollDirection, setScrollDirection] = useState<'up' | 'down'>('up');\n  const [lastScrollY, setLastScrollY] = useState(0);\n  const pathname = usePathname();\n  const headerRef = useRef<HTMLElement>(null);\n  const timeoutRef = useRef<NodeJS.Timeout>();\n\n  // Enhanced scroll detection with direction and momentum\n  const handleScroll = useCallback(() => {\n    const currentScrollY = window.scrollY;\n    const scrollThreshold = 10;\n    const hideThreshold = 100;\n    \n    // Determine scroll direction\n    if (currentScrollY > lastScrollY) {\n      setScrollDirection('down');\n    } else {\n      setScrollDirection('up');\n    }\n    \n    // Update scrolled state with enhanced logic\n    setIsScrolled(currentScrollY > scrollThreshold);\n    setLastScrollY(currentScrollY);\n    \n    // Note: Auto-hide functionality removed to ensure sticky behavior works properly\n  }, [lastScrollY, scrollDirection, isOpen]);\n\n  // Debounced scroll handler for performance\n  const debouncedHandleScroll = useCallback(() => {\n    if (timeoutRef.current) {\n      clearTimeout(timeoutRef.current);\n    }\n    timeoutRef.current = setTimeout(handleScroll, 10);\n  }, [handleScroll]);\n\n  useEffect(() => {\n    window.addEventListener('scroll', debouncedHandleScroll, { passive: true });\n    return () => {\n      window.removeEventListener('scroll', debouncedHandleScroll);\n      if (timeoutRef.current) {\n        clearTimeout(timeoutRef.current);\n      }\n    };\n  }, [debouncedHandleScroll]);\n\n  // Close menu on route change\n  useEffect(() => {\n    setIsOpen(false);\n    setActiveDropdown(null);\n  }, [pathname]);\n\n  // Body scroll lock for mobile menu\n  useEffect(() => {\n    if (isOpen) {\n      document.body.style.overflow = 'hidden';\n      document.body.style.paddingRight = '0'; // Prevent layout shift\n    } else {\n      document.body.style.overflow = 'unset';\n      document.body.style.paddingRight = 'unset';\n    }\n    return () => {\n      document.body.style.overflow = 'unset';\n      document.body.style.paddingRight = 'unset';\n    };\n  }, [isOpen]);\n\n  // Keyboard navigation\n  useEffect(() => {\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (e.key === 'Escape') {\n        setIsOpen(false);\n        setActiveDropdown(null);\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyDown);\n    return () => document.removeEventListener('keydown', handleKeyDown);\n  }, []);\n\n  // Close dropdown when clicking outside\n  useEffect(() => {\n    const handleClickOutside = (e: MouseEvent) => {\n      if (activeDropdown && headerRef.current && !headerRef.current.contains(e.target as Node)) {\n        setActiveDropdown(null);\n      }\n    };\n\n    document.addEventListener('mousedown', handleClickOutside);\n    return () => document.removeEventListener('mousedown', handleClickOutside);\n  }, [activeDropdown]);\n\n  return (\n    <>\n      {/* Backdrop overlay for mobile menu */}\n      {isOpen && (\n        <div \n          className=\"fixed inset-0 bg-black/20 backdrop-blur-sm z-40 md:hidden transition-opacity duration-300\"\n          onClick={() => setIsOpen(false)}\n          aria-hidden=\"true\"\n        />\n      )}\n      \n      <header \n        ref={headerRef}\n        className={cn(\n          // Use fixed positioning with proper z-index for navigation header - elevated to prevent content bleeding\n          'fixed top-0 left-0 right-0 z-[90] isolate',\n          // Base styling\n          'w-full border-b transition-all duration-300 ease-out',\n          // Glass morphism effects\n          'bg-background/80 backdrop-blur-xl border-border/50',\n          'supports-[backdrop-filter]:bg-background/60',\n          // Scroll-based styling\n          isScrolled && 'shadow-lg shadow-black/5 bg-background/95 backdrop-blur-2xl border-border/80',\n          // Mobile menu open state\n          isOpen && 'bg-background/95 backdrop-blur-2xl'\n        )}\n      >\n        <div className=\"container mx-auto px-lg\">\n          <div className=\"flex h-16 items-center justify-between\">\n            {/* Logo with enhanced hover effects */}\n            <Link \n              href=\"/\" \n              className=\"flex items-center gap-sm group transition-all duration-200 hover:scale-105\"\n              aria-label=\"GHXSTSHIP Home\"\n            >\n              <div className=\"flex items-center\">\n                <span className={cn(\n                  anton.className,\n                  'text-heading-3 text-foreground transition-transform duration-200',\n                  'group-hover:scale-105'\n                )}>\n                  GHXSTSHIP\n                </span>\n              </div>\n            </Link>\n\n            {/* Desktop Navigation with enhanced interactions */}\n            <nav \n              className=\"hidden md:flex items-center cluster-lg\"\n              role=\"navigation\"\n              aria-label=\"Main navigation\"\n            >\n              {navigation.map((item: NavigationItem) => (\n                <div key={item.label} className=\"relative\">\n                  {item.children ? (\n                    <NavigationDropdown\n                      item={item}\n                      activeDropdown={activeDropdown}\n                      onDropdownChange={setActiveDropdown}\n                    />\n                  ) : (\n                    <Link\n                      href={item.href}\n                      className={cn(\n                        \"text-body-sm form-label transition-all duration-200 uppercase relative group\",\n                        \"hover:color-accent hover:scale-105\",\n                        \"focus:outline-none focus:ring-2 focus:ring-primary/20 focus:ring-offset-2 rounded-sm px-xs py-xs\",\n                        anton.className,\n                        pathname === item.href ? \"color-accent\" : \"color-muted\",\n                        // Add underline animation\n                        \"after:absolute after:bottom-0 after:left-0 after:h-0.5 after:w-0 after:bg-accent after:transition-all after:duration-200\",\n                        \"hover:after:w-full\",\n                        pathname === item.href && \"after:w-full\"\n                      )}\n                    >\n                      {item.label}\n                    </Link>\n                  )}\n                </div>\n              ))}\n            </nav>\n\n            {/* Auth Buttons with enhanced styling */}\n            <div className=\"hidden md:flex items-center gap-md\">\n              <Link href=\"/auth/signin\">\n                <Button \n                  size=\"sm\" \n                  className=\"transition-all duration-200 hover:scale-105 hover:shadow-lg\"\n                >\n                  Sign In\n                </Button>\n              </Link>\n              <Link href=\"/auth/signup\">\n                <Button \n                  variant=\"outline\" \n                  size=\"sm\"\n                  className=\"transition-all duration-200 hover:scale-105 hover:shadow-lg hover:bg-accent/5\"\n                >\n                  Sign Up\n                </Button>\n              </Link>\n            </div>\n\n            {/* Mobile Menu Button with enhanced animations */}\n            <button\n              className={cn(\n                \"md:hidden relative p-2 rounded-md transition-all duration-200\",\n                \"hover:bg-accent/10 focus:outline-none focus:ring-2 focus:ring-primary/20\",\n                \"active:scale-95\"\n              )}\n              onClick={() => setIsOpen(!isOpen)}\n              aria-label={isOpen ? 'Close menu' : 'Open menu'}\n              aria-expanded={isOpen}\n              aria-controls=\"mobile-menu\"\n            >\n              <div className=\"relative w-6 h-6\">\n                <Menu \n                  className={cn(\n                    \"absolute inset-0 h-6 w-6 transition-all duration-300\",\n                    isOpen ? \"opacity-0 rotate-180 scale-75\" : \"opacity-100 rotate-0 scale-100\"\n                  )} \n                />\n                <X \n                  className={cn(\n                    \"absolute inset-0 h-6 w-6 transition-all duration-300\",\n                    isOpen ? \"opacity-100 rotate-0 scale-100\" : \"opacity-0 rotate-180 scale-75\"\n                  )} \n                />\n              </div>\n            </button>\n          </div>\n\n          {/* Mobile Navigation with slide animation */}\n          <div \n            id=\"mobile-menu\"\n            className={cn(\n              \"md:hidden absolute top-full left-0 right-0 transition-all duration-300 ease-out\",\n              \"bg-background/95 backdrop-blur-xl border-b border-border/50\",\n              \"shadow-lg shadow-black/5\",\n              isOpen \n                ? \"opacity-100 translate-y-0 pointer-events-auto\" \n                : \"opacity-0 -translate-y-2 pointer-events-none\"\n            )}\n            aria-hidden={!isOpen}\n          >\n            <MobileMenu\n              navigation={navigation}\n              activeDropdown={activeDropdown}\n              onDropdownChange={setActiveDropdown}\n            />\n          </div>\n        </div>\n      </header>\n      {/* Spacer to offset fixed header height */}\n      <div aria-hidden className=\"h-16\" />\n    </>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ghxstship/apps/web/app/_components/marketing/PerformanceOptimizations.tsx","messages":[{"ruleId":"@next/next/no-img-element","severity":1,"message":"Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` or a custom image loader to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","line":166,"column":5,"nodeType":"JSXOpeningElement","endLine":176,"endColumn":7}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\n\nimport { useEffect } from 'react';\n\n// Performance monitoring and optimization utilities\nexport const PerformanceOptimizations = () => {\n  useEffect(() => {\n    // Lazy load images with Intersection Observer\n    const lazyImages = document.querySelectorAll('img[data-src]');\n    \n    if ('IntersectionObserver' in window) {\n      const imageObserver = new IntersectionObserver((entries, observer) => {\n        entries.forEach(entry => {\n          if (entry.isIntersecting) {\n            const img = entry.target as HTMLImageElement;\n            img.src = img.dataset.src || '';\n            img.classList.remove('lazy');\n            observer.unobserve(img);\n          }\n        });\n      });\n\n      lazyImages.forEach(img => imageObserver.observe(img));\n    }\n\n    // Preload critical resources\n    const preloadCriticalResources = () => {\n      // Preload hero images\n      const heroImages = [\n        '/hero-dashboard.jpg',\n        '/hero-atlvs.jpg',\n        '/hero-opendeck.jpg'\n      ];\n\n      heroImages.forEach(src => {\n        const link = document.createElement('link');\n        link.rel = 'preload';\n        link.as = 'image';\n        link.href = src;\n        document.head.appendChild(link);\n      });\n\n      // Preload critical fonts\n      const criticalFonts = [\n        '/fonts/anton-v25-latin-regular.woff2',\n        '/fonts/share-tech-v17-latin-regular.woff2'\n      ];\n\n      criticalFonts.forEach(src => {\n        const link = document.createElement('link');\n        link.rel = 'preload';\n        link.as = 'font';\n        link.type = 'font/woff2';\n        link.crossOrigin = 'anonymous';\n        link.href = src;\n        document.head.appendChild(link);\n      });\n    };\n\n    // Optimize scroll performance\n    let ticking = false;\n    const optimizeScroll = () => {\n      if (!ticking) {\n        requestAnimationFrame(() => {\n          // Add scroll-based optimizations here\n          ticking = false;\n        });\n        ticking = true;\n      }\n    };\n\n    // Reduce motion for users who prefer it\n    const prefersReducedMotion = window.matchMedia('(prefers-reduced-motion: reduce)');\n    if (prefersReducedMotion.matches) {\n      document.documentElement.style.setProperty('--animation-duration', '0.01ms');\n      document.documentElement.style.setProperty('--transition-duration', '0.01ms');\n    }\n\n    // Service Worker registration for caching\n    if ('serviceWorker' in navigator && process.env.NODE_ENV === 'production') {\n      navigator.serviceWorker.register('/sw.js')\n        .then(registration => {\n          console.log('SW registered: ', registration);\n        })\n        .catch(registrationError => {\n          console.log('SW registration failed: ', registrationError);\n        });\n    }\n\n    // Performance monitoring\n    if ('PerformanceObserver' in window) {\n      // Monitor Largest Contentful Paint\n      const lcpObserver = new PerformanceObserver((list: unknown) => {\n        const entries = list.getEntries();\n        const lastEntry = entries[entries.length - 1];\n        \n        // Send to analytics if LCP is poor (>2.5s)\n        if (lastEntry.startTime > 2500) {\n          console.warn('Poor LCP detected:', lastEntry.startTime);\n        }\n      });\n      \n      try {\n        lcpObserver.observe({ entryTypes: ['largest-contentful-paint'] });\n      } catch (e) {\n        // Fallback for browsers that don't support LCP\n      }\n\n      // Monitor Cumulative Layout Shift\n      const clsObserver = new PerformanceObserver((list: unknown) => {\n        let clsValue = 0;\n        for (const entry of list.getEntries()) {\n          if (!(entry as unknown).hadRecentInput) {\n            clsValue += (entry as unknown).value;\n          }\n        }\n        \n        // Send to analytics if CLS is poor (>0.1)\n        if (clsValue > 0.1) {\n          console.warn('Poor CLS detected:', clsValue);\n        }\n      });\n      \n      try {\n        clsObserver.observe({ entryTypes: ['layout-shift'] });\n      } catch (e) {\n        // Fallback for browsers that don't support CLS\n      }\n    }\n\n    // Initialize optimizations\n    preloadCriticalResources();\n    window.addEventListener('scroll', optimizeScroll, { passive: true });\n\n    return () => {\n      window.removeEventListener('scroll', optimizeScroll);\n    };\n  }, []);\n\n  return null;\n};\n\n// Image optimization component\nexport const OptimizedImage = ({\n  src,\n  alt,\n  width,\n  height,\n  priority = false,\n  className = '',\n  ...props\n}: {\n  src: string;\n  alt: string;\n  width?: number;\n  height?: number;\n  priority?: boolean;\n  className?: string;\n  [key: string];\n}) => {\n  const imageSrc = priority ? src : undefined;\n  const dataSrc = priority ? undefined : src;\n\n  return (\n    <img\n      src={imageSrc}\n      data-src={dataSrc}\n      alt={alt}\n      width={width}\n      height={height}\n      className={`${className} ${priority ? '' : 'lazy'}`}\n      loading={priority ? 'eager' : 'lazy'}\n      decoding=\"async\"\n      {...props}\n    />\n  );\n};\n\n// Critical CSS inlining utility\nexport const inlineCriticalCSS = () => {\n  const criticalCSS = `\n    /* Critical above-the-fold styles */\n    .hero-section {\n      min-height: 100vh;\n      display: flex;\n      align-items: center;\n      justify-content: center;\n    }\n    \n    .nav-header {\n      position: fixed;\n      top: 0;\n      width: 100%;\n      z-index: 50;\n      background: hsl(var(--color-background) / 0.95);\n      backdrop-filter: blur(10px);\n    }\n    \n    /* Font display optimization */\n    @font-face {\n      font-family: 'Anton';\n      font-display: swap;\n    }\n    \n    @font-face {\n      font-family: 'Share Tech';\n      font-display: swap;\n    }\n    \n    /* Reduce motion for accessibility */\n    @media (prefers-reduced-motion: reduce) {\n      * {\n        animation-duration: 0.01ms !important;\n        animation-iteration-count: 1 !important;\n        transition-duration: 0.01ms !important;\n      }\n    }\n  `;\n\n  if (typeof document !== 'undefined') {\n    const style = document.createElement('style');\n    style.textContent = criticalCSS;\n    document.head.appendChild(style);\n  }\n};\n\n// Resource hints component\nexport const ResourceHints = () => {\n  useEffect(() => {\n    // DNS prefetch for external domains\n    const domains = [\n      'fonts.googleapis.com',\n      'fonts.gstatic.com',\n      'www.google-analytics.com',\n      'www.googletagmanager.com',\n      'connect.facebook.net',\n      'snap.licdn.com'\n    ];\n\n    domains.forEach(domain => {\n      const link = document.createElement('link');\n      link.rel = 'dns-prefetch';\n      link.href = `//${domain}`;\n      document.head.appendChild(link);\n    });\n\n    // Preconnect to critical domains\n    const criticalDomains = [\n      'fonts.googleapis.com',\n      'fonts.gstatic.com'\n    ];\n\n    criticalDomains.forEach(domain => {\n      const link = document.createElement('link');\n      link.rel = 'preconnect';\n      link.href = `https://${domain}`;\n      if (domain.includes('gstatic')) {\n        link.crossOrigin = 'anonymous';\n      }\n      document.head.appendChild(link);\n    });\n  }, []);\n\n  return null;\n};\n\nexport default PerformanceOptimizations;\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ghxstship/apps/web/app/_components/marketing/pricing/FAQSection.tsx","messages":[{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":32,"column":49,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[958,1034],"text":"\n            Have questions about our pricing? We&apos;ve got answers.\n          "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[958,1034],"text":"\n            Have questions about our pricing? We&lsquo;ve got answers.\n          "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[958,1034],"text":"\n            Have questions about our pricing? We&#39;ve got answers.\n          "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[958,1034],"text":"\n            Have questions about our pricing? We&rsquo;ve got answers.\n          "},"desc":"Replace with `&rsquo;`."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { HelpCircle } from \"lucide-react\";\nimport { useState } from 'react';\nimport { Card, CardContent } from '@ghxstship/ui';\nimport { cn } from '@ghxstship/ui';\nimport { typography, anton } from '../../lib/typography';\nimport { layouts } from '../../lib/layouts';\n\ninterface FAQ {\n  question: string;\n  answer: string;\n}\n\ninterface FAQSectionProps {\n  faqs: FAQ[];\n}\n\nexport function FAQSection({ faqs }: FAQSectionProps) {\n  const [openFaq, setOpenFaq] = useState<number | null>(null);\n\n  const toggleFaq = (index: number) => {\n    setOpenFaq(openFaq === index ? null : index);\n  };\n\n  return (\n    <section className={layouts.sectionPadding}>\n      <div className={layouts.container}>\n        <div className=\"text-center mb-xl\">\n          <h2 className={`${anton.className} text-heading-2 lg:text-heading-1 text-heading-3 uppercase mb-md`}>\n            FREQUENTLY ASKED QUESTIONS\n          </h2>\n          <p className={`${typography.sectionSubtitle}`}>\n            Have questions about our pricing? We've got answers.\n          </p>\n        </div>\n\n        <div className=\"max-w-3xl mx-auto\">\n          <div className=\"stack-xl\">\n            {faqs.map((faq, index) => (\n              <Card key={index} className=\"hover:shadow-surface transition-shadow\">\n                <CardContent className=\"p-0\">\n                  <button\n                    onClick={() => toggleFaq(index)}\n                    className=\"w-full p-lg text-left flex items-center justify-between hover:bg-secondary/30 transition-colors\"\n                  >\n                    <span className=\"text-heading-4 color-foreground\">{faq.question}</span>\n                    <HelpCircle className={cn(\n                      \"h-5 w-5 color-muted transition-transform\",\n                      openFaq === index ? \"rotate-180\" : \"\"\n                    )} />\n                  </button>\n                  {openFaq === index && (\n                    <div className=\"px-lg pb-lg\">\n                      <p className=\"color-muted\">{faq.answer}</p>\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ghxstship/apps/web/app/admin/demo-setup/DemoSetupClient.tsx","messages":[{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":300,"column":49,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[9098,9150],"text":"Use the emails and password &quot;demo123!\" for each user"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[9098,9150],"text":"Use the emails and password &ldquo;demo123!\" for each user"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[9098,9150],"text":"Use the emails and password &#34;demo123!\" for each user"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[9098,9150],"text":"Use the emails and password &rdquo;demo123!\" for each user"},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":300,"column":58,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[9098,9150],"text":"Use the emails and password \"demo123!&quot; for each user"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[9098,9150],"text":"Use the emails and password \"demo123!&ldquo; for each user"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[9098,9150],"text":"Use the emails and password \"demo123!&#34; for each user"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[9098,9150],"text":"Use the emails and password \"demo123!&rdquo; for each user"},"desc":"Replace with `&rdquo;`."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\nimport {\n  Activity,\n  AlertCircle,\n  Award,\n  Calendar,\n  CheckCircle,\n  Clock,\n  Crown,\n  Edit,\n  User,\n  Eye,\n  FileText,\n  Loader2,\n  Play,\n  Plus,\n  Search,\n  Settings,\n  Shield,\n  Trash2,\n  TrendingUp,\n  Users,\n  XCircle,\n} from 'lucide-react';\nimport { useState } from 'react';\nimport { Badge } from '@ghxstship/ui';\nimport { Button } from '@ghxstship/ui';\nimport { Card } from '@ghxstship/ui';\nimport { createClient } from '@/lib/supabase/client';\n\ninterface DemoUser {\n  id: string\n  email: string\n  password: string\n  full_name: string\n  role: string\n}\n\nconst DEMO_USERS: DemoUser[] = [\n  {\n    id: '11111111-1111-1111-1111-111111111111',\n    email: 'owner@ghxstship.demo',\n    password: 'demo123!',\n    full_name: 'Alex Chen (Owner)',\n    role: 'owner'\n  },\n  {\n    id: '22222222-2222-2222-2222-222222222222',\n    email: 'admin@ghxstship.demo',\n    password: 'demo123!',\n    full_name: 'Sarah Johnson (Admin)',\n    role: 'admin'\n  },\n  {\n    id: '33333333-3333-3333-3333-333333333333',\n    email: 'manager@ghxstship.demo',\n    password: 'demo123!',\n    full_name: 'Mike Rodriguez (Manager)',\n    role: 'manager'\n  },\n  {\n    id: '44444444-4444-4444-4444-444444444444',\n    email: 'contributor@ghxstship.demo',\n    password: 'demo123!',\n    full_name: 'Emma Thompson (Contributor)',\n    role: 'contributor'\n  },\n  {\n    id: '55555555-5555-5555-5555-555555555555',\n    email: 'viewer@ghxstship.demo',\n    password: 'demo123!',\n    full_name: 'David Park (Viewer)',\n    role: 'viewer'\n  }\n]\n\nconst ROLE_ICONS: Record<DemoUser['role'], typeof Crown> = {\n  owner: Crown,\n  admin: Shield,\n  manager: Settings,\n  contributor: Edit,\n  viewer: Eye\n}\n\nconst ROLE_COLORS = {\n  owner: 'bg-secondary/10 color-secondary border-secondary/30',\n  admin: 'bg-destructive/10 color-destructive border-destructive/30',\n  manager: 'bg-accent/10 color-accent border-primary/30',\n  contributor: 'bg-success/10 color-success border-success/30',\n  viewer: 'bg-muted/30 color-muted border-muted/30'\n}\n\nconst DEMO_ORG_ID = '00000000-0000-0000-0000-000000000001'\n\nexport function DemoSetupClient() {\n  const [isLoading, setIsLoading] = useState(false)\n  const [results, setResults] = useState<Array<{ email: string; success: boolean; error?: string }>>([])\n  const [step, setStep] = useState<'setup' | 'results'>('setup')\n  const supabase = createClient()\n\n  const createDemoOrganization = async () => {\n    const { data, error } = await supabase\n      .from('organizations')\n      .upsert({\n        id: DEMO_ORG_ID,\n        name: 'GHXSTSHIP Demo Org',\n        slug: 'ghxstship-demo'\n      })\n      .select()\n\n    if (error && error.code !== '23505') {\n      throw new Error(`Failed to create demo organization: ${error.message}`)\n    }\n    \n    return data\n  }\n\n  const createDemoUser = async (demoUser: DemoUser) => {\n    try {\n      // Create user profile first (this will be linked when auth user is created)\n      const { error: profileError } = await supabase\n        .from('users')\n        .upsert({\n          id: demoUser.id,\n          auth_id: demoUser.id, // Temporary, will be updated when auth user is created\n          full_name: demoUser.full_name,\n          preferred_locale: 'en',\n          timezone: 'America/Los_Angeles'\n        })\n\n      if (profileError && profileError.code !== '23505') {\n        console.warn(`Profile creation warning for ${demoUser.email}:`, profileError.message)\n      }\n\n      // Create membership\n      const { error: membershipError } = await supabase\n        .from('memberships')\n        .upsert({\n          user_id: demoUser.id,\n          organization_id: DEMO_ORG_ID,\n          role: demoUser.role,\n          status: 'active'\n        })\n\n      if (membershipError && membershipError.code !== '23505') {\n        console.warn(`Membership creation warning for ${demoUser.email}:`, membershipError.message)\n      }\n\n      return { success: true, email: demoUser.email }\n\n    } catch (error) {\n      const message = error instanceof Error ? error.message : String(error);\n      return { success: false, email: demoUser.email, error: message };\n    }\n  }\n\n  const seedDemoData = async () => {\n    try {\n      // Create demo projects\n      const { error: projectsError } = await supabase\n        .from('projects')\n        .upsert([\n          {\n            id: 'aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa',\n            organization_id: DEMO_ORG_ID,\n            name: 'Summer Music Festival 2025',\n            status: 'planning',\n            starts_at: '2025-07-15',\n            ends_at: '2025-07-20',\n            created_by: '11111111-1111-1111-1111-111111111111'\n          },\n          {\n            id: 'bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb',\n            organization_id: DEMO_ORG_ID,\n            name: 'Corporate Conference Q2',\n            status: 'active',\n            starts_at: '2025-04-10',\n            ends_at: '2025-04-12',\n            created_by: '22222222-2222-2222-2222-222222222222'\n          }\n        ])\n\n      if (projectsError && projectsError.code !== '23505') {\n        console.warn('Projects seeding warning:', projectsError.message)\n      }\n\n      // Create demo companies\n      const { error: companiesError } = await supabase\n        .from('companies')\n        .upsert([\n          {\n            organization_id: DEMO_ORG_ID,\n            name: 'Starlight Productions',\n            website: 'https://starlight.example.com',\n            contact_email: 'contact@starlight.example.com'\n          },\n          {\n            organization_id: DEMO_ORG_ID,\n            name: 'Atlas Logistics',\n            website: 'https://atlas.example.com',\n            contact_email: 'info@atlas.example.com'\n          }\n        ])\n\n      if (companiesError && companiesError.code !== '23505') {\n        console.warn('Companies seeding warning:', companiesError.message)\n      }\n\n    } catch (error) {\n      const message = error instanceof Error ? error.message : String(error);\n      console.error('Failed to seed demo data:', message);\n      throw error;\n    }\n  }\n\n  const handleSetup = async () => {\n    setIsLoading(true)\n    setResults([])\n    \n    try {\n      // Create demo organization\n      await createDemoOrganization()\n      \n      // Create demo users\n      const userResults: Array<{ email: string; success: boolean; error?: string }> = []\n      for (const demoUser of DEMO_USERS) {\n        const result = await createDemoUser(demoUser)\n        userResults.push(result)\n      }\n      \n      // Seed demo data\n      await seedDemoData()\n      \n      setResults(userResults)\n      setStep('results')\n      \n    } catch (error) {\n      const message = error instanceof Error ? error.message : String(error);\n      console.error('Setup failed:', message)\n      setResults([{ email: 'Setup', success: false, error: message }])\n      setStep('results')\n    } finally {\n      setIsLoading(false)\n    }\n  }\n\n  if (step === 'results') {\n    const successful = results.filter(r => r.success)\n    const failed = results.filter(r => !r.success)\n\n    return (\n      <Card className=\"p-lg max-w-2xl mx-auto\">\n        <div className=\"flex items-center gap-sm mb-md\">\n          <CheckCircle className=\"h-5 w-5 color-success\" />\n          <h3 className=\"text-body text-heading-4\">Setup Complete</h3>\n        </div>\n\n        <div className=\"stack-md\">\n          {successful.length > 0 && (\n            <div>\n              <h4 className=\"form-label color-success mb-sm\">Successfully Created ({successful.length})</h4>\n              <div className=\"stack-sm\">\n                {successful.map((result) => (\n                  <div key={result.email} className=\"flex items-center gap-sm text-body-sm\">\n                    <CheckCircle className=\"h-4 w-4 color-success\" />\n                    <span>{result.email}</span>\n                  </div>\n                ))}\n              </div>\n            </div>\n          )}\n\n          {failed.length > 0 && (\n            <div>\n              <h4 className=\"form-label color-destructive mb-sm\">Failed ({failed.length})</h4>\n              <div className=\"stack-sm\">\n                {failed.map((result) => (\n                  <div key={result.email} className=\"text-body-sm\">\n                    <div className=\"flex items-center gap-sm\">\n                      <XCircle className=\"h-4 w-4 color-destructive\" />\n                      <span>{result.email}</span>\n                    </div>\n                    {result.error && (\n                      <p className=\"text-body-sm color-destructive ml-lg\">{result.error}</p>\n                    )}\n                  </div>\n                ))}\n              </div>\n            </div>\n          )}\n        </div>\n\n        <div className=\"mt-lg p-md bg-accent/10 rounded-lg\">\n          <div className=\"flex items-start gap-sm\">\n            <AlertCircle className=\"h-4 w-4 color-accent mt-0.5\" />\n            <div className=\"text-body-sm\">\n              <p className=\"form-label color-accent\">Next Steps:</p>\n              <ol className=\"list-decimal list-inside color-accent mt-xs stack-xs\">\n                <li>Create auth users manually in Supabase Auth dashboard</li>\n                <li>Use the emails and password \"demo123!\" for each user</li>\n                <li>Visit <a href=\"/demo\" className=\"underline\">/demo</a> to test user switching</li>\n              </ol>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"flex gap-sm mt-lg\">\n          <Button onClick={() => setStep('setup')} variant=\"outline\">\n            Run Setup Again\n          </Button>\n          <Button asChild>\n            <a href=\"/demo\">Test Demo Users</a>\n          </Button>\n        </div>\n      </Card>\n    )\n  }\n\n  return (\n    <Card className=\"p-lg max-w-2xl mx-auto\">\n      <div className=\"flex items-center gap-sm mb-md\">\n        <Users className=\"h-5 w-5 color-muted\" />\n        <h3 className=\"text-body text-heading-4\">Create Demo Users</h3>\n      </div>\n      \n      <p className=\"text-body-sm color-muted mb-lg\">\n        This will create demo user profiles and memberships for testing different roles and permissions.\n        You&apos;ll need to manually create the auth users in Supabase Auth dashboard afterwards.\n      </p>\n\n      <div className=\"stack-sm mb-lg\">\n        <h4 className=\"form-label\">Users to be created:</h4>\n        {DEMO_USERS.map((user) => {\n          const Icon = ROLE_ICONS[user.role as keyof typeof ROLE_ICONS]\n          \n          return (\n            <div\n              key={user.id}\n              className=\"flex items-center justify-between p-sm border rounded-lg\"\n            >\n              <div className=\"flex items-center gap-sm\">\n                <Icon className=\"h-4 w-4 color-muted\" />\n                <div>\n                  <div className=\"form-label\">{user.full_name}</div>\n                  <div className=\"text-body-sm color-muted\">{user.email}</div>\n                </div>\n              </div>\n              \n              <Badge \n                variant=\"outline\" \n                className={`text-body-sm ${ROLE_COLORS[user.role as keyof typeof ROLE_COLORS]}`}\n              >\n                {user.role.toUpperCase()}\n              </Badge>\n            </div>\n          )\n        })}\n      </div>\n\n      <Button \n        onClick={handleSetup} \n        disabled={isLoading}\n        className=\"w-full\"\n      >\n        {isLoading ? (\n          <>\n            <Loader2 className=\"h-4 w-4 animate-spin mr-sm\" />\n            Creating Demo Users...\n          </>\n        ) : (\n          'Create Demo Users'\n        )}\n      </Button>\n    </Card>\n  )\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/julianclarkson/Library/Mobile Documents/com~apple~CloudDocs/Dragonfly26/ghxstship/apps/web/app/admin/enterprise/settings/page.tsx","messages":[{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Shield' is not defined.","line":24,"column":16,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":24,"endColumn":22},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Database' is not defined.","line":60,"column":16,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":60,"endColumn":24},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Users' is not defined.","line":96,"column":16,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":96,"endColumn":21},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Bell' is not defined.","line":132,"column":16,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":132,"endColumn":20},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Zap' is not defined.","line":169,"column":14,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":169,"endColumn":17},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Globe' is not defined.","line":225,"column":14,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":225,"endColumn":19},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Key' is not defined.","line":234,"column":18,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":234,"endColumn":21},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Key' is not defined.","line":244,"column":18,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":244,"endColumn":21},{"ruleId":"react/jsx-no-undef","severity":2,"message":"'Key' is not defined.","line":254,"column":18,"nodeType":"JSXIdentifier","messageId":"undefined","endLine":254,"endColumn":21}],"suppressedMessages":[],"errorCount":9,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { User, FileText, Settings, Award, Calendar, TrendingUp, Activity, Clock, Plus, Search, Play, Trash2 } from \"lucide-react\";\nimport { Metadata } from 'next';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle, Badge, Button } from '@ghxstship/ui';\n\nexport const metadata: Metadata = {\n  title: 'Enterprise Settings | Enterprise Dashboard',\n  description: 'Enterprise configuration, integrations, and feature management',\n};\n\nexport default function SettingsPage() {\n  return (\n    <div className=\"stack-lg\">\n      <div>\n        <h1 className=\"text-3xl font-bold tracking-tight\">Enterprise Settings</h1>\n        <p className=\"text-muted-foreground mt-sm\">\n          Configure enterprise features, integrations, and system settings\n        </p>\n      </div>\n\n      <div className=\"grid gap-lg lg:grid-cols-2\">\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-sm\">\n              <Shield className=\"h-5 w-5\" />\n              Security Configuration\n            </CardTitle>\n            <CardDescription>Authentication, authorization, and security policies</CardDescription>\n          </CardHeader>\n          <CardContent className=\"stack-md\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"font-medium\">Multi-Factor Authentication</p>\n                <p className=\"text-sm text-muted-foreground\">Enforce MFA for all users</p>\n              </div>\n              <Badge variant=\"default\">Enabled</Badge>\n            </div>\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"font-medium\">Session Timeout</p>\n                <p className=\"text-sm text-muted-foreground\">Auto-logout after inactivity</p>\n              </div>\n              <Badge variant=\"secondary\">8 hours</Badge>\n            </div>\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"font-medium\">Password Policy</p>\n                <p className=\"text-sm text-muted-foreground\">Minimum requirements and rotation</p>\n              </div>\n              <Badge variant=\"default\">Strict</Badge>\n            </div>\n            <Button variant=\"outline\" size=\"sm\" className=\"w-full\">\n              Configure Security Settings\n            </Button>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-sm\">\n              <Database className=\"h-5 w-5\" />\n              Database Configuration\n            </CardTitle>\n            <CardDescription>Performance tuning and backup settings</CardDescription>\n          </CardHeader>\n          <CardContent className=\"stack-md\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"font-medium\">Connection Pooling</p>\n                <p className=\"text-sm text-muted-foreground\">Max concurrent connections</p>\n              </div>\n              <Badge variant=\"secondary\">100</Badge>\n            </div>\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"font-medium\">Query Timeout</p>\n                <p className=\"text-sm text-muted-foreground\">Maximum query execution time</p>\n              </div>\n              <Badge variant=\"secondary\">30s</Badge>\n            </div>\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"font-medium\">Backup Retention</p>\n                <p className=\"text-sm text-muted-foreground\">How long to keep backups</p>\n              </div>\n              <Badge variant=\"secondary\">90 days</Badge>\n            </div>\n            <Button variant=\"outline\" size=\"sm\" className=\"w-full\">\n              Configure Database Settings\n            </Button>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-sm\">\n              <Users className=\"h-5 w-5\" />\n              User Management\n            </CardTitle>\n            <CardDescription>User provisioning and access control</CardDescription>\n          </CardHeader>\n          <CardContent className=\"stack-md\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"font-medium\">Auto-Provisioning</p>\n                <p className=\"text-sm text-muted-foreground\">Automatic user creation from SSO</p>\n              </div>\n              <Badge variant=\"default\">Enabled</Badge>\n            </div>\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"font-medium\">Default Role</p>\n                <p className=\"text-sm text-muted-foreground\">Role assigned to new users</p>\n              </div>\n              <Badge variant=\"secondary\">Viewer</Badge>\n            </div>\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"font-medium\">Guest Access</p>\n                <p className=\"text-sm text-muted-foreground\">Allow external user access</p>\n              </div>\n              <Badge variant=\"destructive\">Disabled</Badge>\n            </div>\n            <Button variant=\"outline\" size=\"sm\" className=\"w-full\">\n              Manage User Settings\n            </Button>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-sm\">\n              <Bell className=\"h-5 w-5\" />\n              Notification Settings\n            </CardTitle>\n            <CardDescription>Alert channels and notification preferences</CardDescription>\n          </CardHeader>\n          <CardContent className=\"stack-md\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"font-medium\">Email Notifications</p>\n                <p className=\"text-sm text-muted-foreground\">System alerts via email</p>\n              </div>\n              <Badge variant=\"default\">Enabled</Badge>\n            </div>\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"font-medium\">Slack Integration</p>\n                <p className=\"text-sm text-muted-foreground\">Send alerts to Slack channels</p>\n              </div>\n              <Badge variant=\"default\">Configured</Badge>\n            </div>\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"font-medium\">Webhook Endpoints</p>\n                <p className=\"text-sm text-muted-foreground\">Custom notification webhooks</p>\n              </div>\n              <Badge variant=\"secondary\">3 Active</Badge>\n            </div>\n            <Button variant=\"outline\" size=\"sm\" className=\"w-full\">\n              Configure Notifications\n            </Button>\n          </CardContent>\n        </Card>\n      </div>\n\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-sm\">\n            <Zap className=\"h-5 w-5\" />\n            Feature Toggles\n          </CardTitle>\n          <CardDescription>Enable or disable enterprise features</CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid gap-md md:grid-cols-2 lg:grid-cols-3\">\n            <div className=\"flex items-center justify-between p-sm border rounded-lg\">\n              <div>\n                <p className=\"font-medium\">Advanced Monitoring</p>\n                <p className=\"text-xs text-muted-foreground\">Real-time metrics and alerts</p>\n              </div>\n              <Badge variant=\"default\">On</Badge>\n            </div>\n            <div className=\"flex items-center justify-between p-sm border rounded-lg\">\n              <div>\n                <p className=\"font-medium\">Threat Detection</p>\n                <p className=\"text-xs text-muted-foreground\">AI-powered security monitoring</p>\n              </div>\n              <Badge variant=\"default\">On</Badge>\n            </div>\n            <div className=\"flex items-center justify-between p-sm border rounded-lg\">\n              <div>\n                <p className=\"font-medium\">Compliance Reporting</p>\n                <p className=\"text-xs text-muted-foreground\">GDPR, SOC2, ISO27001</p>\n              </div>\n              <Badge variant=\"default\">On</Badge>\n            </div>\n            <div className=\"flex items-center justify-between p-sm border rounded-lg\">\n              <div>\n                <p className=\"font-medium\">Disaster Recovery</p>\n                <p className=\"text-xs text-muted-foreground\">Automated backup and recovery</p>\n              </div>\n              <Badge variant=\"default\">On</Badge>\n            </div>\n            <div className=\"flex items-center justify-between p-sm border rounded-lg\">\n              <div>\n                <p className=\"font-medium\">Audit Logging</p>\n                <p className=\"text-xs text-muted-foreground\">Comprehensive activity logs</p>\n              </div>\n              <Badge variant=\"default\">On</Badge>\n            </div>\n            <div className=\"flex items-center justify-between p-sm border rounded-lg\">\n              <div>\n                <p className=\"font-medium\">API Rate Limiting</p>\n                <p className=\"text-xs text-muted-foreground\">Advanced rate limiting</p>\n              </div>\n              <Badge variant=\"default\">On</Badge>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-sm\">\n            <Globe className=\"h-5 w-5\" />\n            Integration Status\n          </CardTitle>\n          <CardDescription>External service integrations and API connections</CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"stack-md\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center gap-sm\">\n                <Key className=\"h-4 w-4 text-muted-foreground\" />\n                <div>\n                  <p className=\"font-medium\">Supabase Enterprise</p>\n                  <p className=\"text-sm text-muted-foreground\">Database and authentication</p>\n                </div>\n              </div>\n              <Badge variant=\"default\">Connected</Badge>\n            </div>\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center gap-sm\">\n                <Key className=\"h-4 w-4 text-muted-foreground\" />\n                <div>\n                  <p className=\"font-medium\">Monitoring Service</p>\n                  <p className=\"text-sm text-muted-foreground\">System health and metrics</p>\n                </div>\n              </div>\n              <Badge variant=\"default\">Connected</Badge>\n            </div>\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center gap-sm\">\n                <Key className=\"h-4 w-4 text-muted-foreground\" />\n                <div>\n                  <p className=\"font-medium\">Security Scanner</p>\n                  <p className=\"text-sm text-muted-foreground\">Vulnerability assessment</p>\n                </div>\n              </div>\n              <Badge variant=\"default\">Connected</Badge>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]}]