import {
  Person,
  PersonRepository,
  CreatePersonRequest,
  UpdatePersonRequest,
  PersonFilters,
  PeopleRole,
  PeopleRoleRepository,
  CreatePeopleRoleRequest,
  UpdatePeopleRoleRequest,
  PeopleRoleFilters,
  CompetencyFilters,
  PersonCompetency,
  PersonCompetencyRepository,
  CreatePersonCompetencyRequest,
  UpdatePersonCompetencyRequest,
  PersonCompetencyFilters,
  PeopleEndorsement,
  PeopleEndorsementRepository,
  CreatePeopleEndorsementRequest,
  UpdatePeopleEndorsementRequest,
  EndorsementFilters,
  PeopleShortlist,
  ShortlistMember,
  PeopleShortlistRepository,
  ShortlistMemberRepository,
  CreatePeopleShortlistRequest,
  UpdatePeopleShortlistRequest,
  ShortlistFilters,
  CreateShortlistMemberRequest,
  UpdateShortlistMemberRequest,
  ShortlistMemberFilters,
  PeopleNetwork,
  PeopleNetworkRepository,
  CreatePeopleNetworkRequest,
  UpdatePeopleNetworkRequest,
  NetworkFilters,
  TenantContext,
  AuditLog,
} from '@ghxstship/domain';

export class PeopleService {
  constructor(
    private personRepository: PersonRepository,
    private roleRepository: PeopleRoleRepository,
    private personCompetencyRepository: PersonCompetencyRepository,
    private endorsementRepository: PeopleEndorsementRepository,
    private shortlistRepository: PeopleShortlistRepository,
    private shortlistMemberRepository: ShortlistMemberRepository,
    private networkRepository: PeopleNetworkRepository,
    private auditLog: AuditLog
  ) {}

  // Person management
  async getPeople(context: TenantContext, filters?: PersonFilters): Promise<Person[]> {
    const people = await this.personRepository.findByOrganization(context.organizationId, filters);
    
    await this.auditLog.log({
      action: 'people.list',
      userId: context.userId,
      organizationId: context.organizationId,
      metadata: { filters, count: people.length }
    });

    return people;
  }

  async getPerson(context: TenantContext, id: string): Promise<Person | null> {
    const person = await this.personRepository.findById(id);
    
    if (person && person.organizationId !== context.organizationId) {
      return null; // Tenant isolation
    }

    await this.auditLog.log({
      action: 'people.get',
      userId: context.userId,
      organizationId: context.organizationId,
      resourceId: id,
      metadata: { found: !!person }
    });

    return person;
  }

  async createPerson(context: TenantContext, request: CreatePersonRequest): Promise<Person> {
    const personData = {
      ...request,
      organizationId: context.organizationId,
      createdBy: context.userId,
    };

    const person = await this.personRepository.create(personData);

    await this.auditLog.log({
      action: 'people.create',
      userId: context.userId,
      organizationId: context.organizationId,
      resourceId: person.id,
      metadata: { firstName: person.firstName, lastName: person.lastName, role: person.role }
    });

    return person;
  }

  async updatePerson(context: TenantContext, id: string, updates: UpdatePersonRequest): Promise<Person> {
    const existingPerson = await this.getPerson(context, id);
    if (!existingPerson) {
      throw new Error('Person not found');
    }

    const person = await this.personRepository.update(id, updates);

    await this.auditLog.log({
      action: 'people.update',
      userId: context.userId,
      organizationId: context.organizationId,
      resourceId: id,
      metadata: { updates }
    });

    return person;
  }

  async deletePerson(context: TenantContext, id: string): Promise<void> {
    const existingPerson = await this.getPerson(context, id);
    if (!existingPerson) {
      throw new Error('Person not found');
    }

    await this.personRepository.delete(id);

    await this.auditLog.log({
      action: 'people.delete',
      userId: context.userId,
      organizationId: context.organizationId,
      resourceId: id,
      metadata: { firstName: existingPerson.firstName, lastName: existingPerson.lastName }
    });
  }

  // Role management
  async getRoles(context: TenantContext, filters?: PeopleRoleFilters): Promise<PeopleRole[]> {
    const roles = await this.roleRepository.findByOrganization(context.organizationId, filters);
    
    await this.auditLog.log({
      action: 'people.roles.list',
      userId: context.userId,
      organizationId: context.organizationId,
      metadata: { filters, count: roles.length }
    });

    return roles;
  }

  async createRole(context: TenantContext, request: CreatePeopleRoleRequest): Promise<PeopleRole> {
    const roleData = {
      ...request,
      organizationId: context.organizationId,
      createdBy: context.userId,
    };

    const role = await this.roleRepository.create(roleData);

    await this.auditLog.log({
      action: 'people.roles.create',
      userId: context.userId,
      organizationId: context.organizationId,
      resourceId: role.id,
      metadata: { name: role.name, level: role.level, department: role.department }
    });

    return role;
  }

  async updateRole(context: TenantContext, id: string, updates: UpdatePeopleRoleRequest): Promise<PeopleRole> {
    const role = await this.roleRepository.update(id, updates);

    await this.auditLog.log({
      action: 'people.roles.update',
      userId: context.userId,
      organizationId: context.organizationId,
      resourceId: id,
      metadata: { updates }
    });

    return role;
  }

  // Competency management
    const competencies = await this.competencyRepository.findByOrganization(context.organizationId, filters);
    
    await this.auditLog.log({
      action: 'people.competencies.list',
      userId: context.userId,
      organizationId: context.organizationId,
      metadata: { filters, count: competencies.length }
    });

    return competencies;
  }

    const competencyData = {
      ...request,
      organizationId: context.organizationId,
      createdBy: context.userId,
    };

    const competency = await this.competencyRepository.create(competencyData);

    await this.auditLog.log({
      action: 'people.competencies.create',
      userId: context.userId,
      organizationId: context.organizationId,
      resourceId: competency.id,
      metadata: { name: competency.name, category: competency.category }
    });

    return competency;
  }

  async getPersonCompetencies(context: TenantContext, personId: string): Promise<PersonCompetency[]> {
    const competencies = await this.personCompetencyRepository.findByPerson(personId);
    
    await this.auditLog.log({
      action: 'people.person_competencies.list',
      userId: context.userId,
      organizationId: context.organizationId,
      metadata: { personId, count: competencies.length }
    });

    return competencies;
  }

  async assessPersonCompetency(context: TenantContext, request: CreatePersonCompetencyRequest): Promise<PersonCompetency> {
    const assessmentData = {
      ...request,
      assessedBy: context.userId,
      assessedAt: new Date(),
    };

    const assessment = await this.personCompetencyRepository.create(assessmentData);

    await this.auditLog.log({
      action: 'people.person_competencies.assess',
      userId: context.userId,
      organizationId: context.organizationId,
      resourceId: assessment.id,
      metadata: { personId: request.personId, competencyId: request.competencyId, level: request.level }
    });

    return assessment;
  }

  // Endorsement management
  async getEndorsements(context: TenantContext, personId: string): Promise<PeopleEndorsement[]> {
    const endorsements = await this.endorsementRepository.findByPerson(personId);
    
    await this.auditLog.log({
      action: 'people.endorsements.list',
      userId: context.userId,
      organizationId: context.organizationId,
      metadata: { personId, count: endorsements.length }
    });

    return endorsements;
  }

  async createEndorsement(context: TenantContext, request: CreatePeopleEndorsementRequest): Promise<PeopleEndorsement> {
    const endorsement = await this.endorsementRepository.create(request);

    await this.auditLog.log({
      action: 'people.endorsements.create',
      userId: context.userId,
      organizationId: context.organizationId,
      resourceId: endorsement.id,
      metadata: { personId: request.personId, endorserId: request.endorserId, rating: request.rating }
    });

    return endorsement;
  }

  // Shortlist management
  async getShortlists(context: TenantContext, filters?: ShortlistFilters): Promise<PeopleShortlist[]> {
    const shortlists = await this.shortlistRepository.findByOrganization(context.organizationId, filters);
    
    await this.auditLog.log({
      action: 'people.shortlists.list',
      userId: context.userId,
      organizationId: context.organizationId,
      metadata: { filters, count: shortlists.length }
    });

    return shortlists;
  }

  async createShortlist(context: TenantContext, request: CreatePeopleShortlistRequest): Promise<PeopleShortlist> {
    const shortlistData = {
      ...request,
      organizationId: context.organizationId,
      createdBy: context.userId,
    };

    const shortlist = await this.shortlistRepository.create(shortlistData);

    await this.auditLog.log({
      action: 'people.shortlists.create',
      userId: context.userId,
      organizationId: context.organizationId,
      resourceId: shortlist.id,
      metadata: { name: shortlist.name, projectId: shortlist.projectId, roleId: shortlist.roleId }
    });

    return shortlist;
  }

  async getShortlistMembers(context: TenantContext, shortlistId: string): Promise<ShortlistMember[]> {
    const members = await this.shortlistMemberRepository.findByShortlist(shortlistId);
    
    await this.auditLog.log({
      action: 'people.shortlist_members.list',
      userId: context.userId,
      organizationId: context.organizationId,
      metadata: { shortlistId, count: members.length }
    });

    return members;
  }

  async addToShortlist(context: TenantContext, request: CreateShortlistMemberRequest): Promise<ShortlistMember> {
    const memberData = {
      ...request,
      addedBy: context.userId,
    };

    const member = await this.shortlistMemberRepository.create(memberData);

    await this.auditLog.log({
      action: 'people.shortlist_members.add',
      userId: context.userId,
      organizationId: context.organizationId,
      resourceId: member.id,
      metadata: { shortlistId: request.shortlistId, personId: request.personId, status: request.status }
    });

    return member;
  }

  // Network management
  async getPersonNetwork(context: TenantContext, personId: string, filters?: NetworkFilters): Promise<PeopleNetwork[]> {
    const network = await this.networkRepository.findByPerson(personId, filters);
    
    await this.auditLog.log({
      action: 'people.network.list',
      userId: context.userId,
      organizationId: context.organizationId,
      metadata: { personId, filters, count: network.length }
    });

    return network;
  }

  async createNetworkConnection(context: TenantContext, request: CreatePeopleNetworkRequest): Promise<PeopleNetwork> {
    const connection = await this.networkRepository.create(request);

    await this.auditLog.log({
      action: 'people.network.create',
      userId: context.userId,
      organizationId: context.organizationId,
      resourceId: connection.id,
      metadata: { personId: request.personId, connectedPersonId: request.connectedPersonId, relationshipType: request.relationshipType }
    });

    return connection;
  }

  // Bulk operations
  async bulkCreatePeople(context: TenantContext, requests: CreatePersonRequest[]): Promise<Person[]> {
    const peopleData = requests.map(request => ({
      ...request,
      organizationId: context.organizationId,
      createdBy: context.userId,
    }));

    const people = await this.personRepository.bulkCreate(peopleData);

    await this.auditLog.log({
      action: 'people.bulk_create',
      userId: context.userId,
      organizationId: context.organizationId,
      metadata: { count: people.length }
    });

    return people;
  }

  async bulkUpdatePeople(context: TenantContext, updates: Array<{ id: string; updates: UpdatePersonRequest }>): Promise<Person[]> {
    const people = await this.personRepository.bulkUpdate(updates);

    await this.auditLog.log({
      action: 'people.bulk_update',
      userId: context.userId,
      organizationId: context.organizationId,
      metadata: { count: people.length }
    });

    return people;
  }

  // Search and analytics
  async searchPeopleBySkills(context: TenantContext, skills: string[]): Promise<Person[]> {
    const people = await this.personRepository.searchBySkills(context.organizationId, skills);
    
    await this.auditLog.log({
      action: 'people.search_by_skills',
      userId: context.userId,
      organizationId: context.organizationId,
      metadata: { skills, count: people.length }
    });

    return people;
  }

  async getPeopleCount(context: TenantContext, filters?: PersonFilters): Promise<number> {
    return await this.personRepository.count(context.organizationId, filters);
  }

  async getNetworkSize(context: TenantContext, personId: string): Promise<number> {
    return await this.networkRepository.getNetworkSize(personId);
  }

  async getAverageEndorsementRating(context: TenantContext, personId: string, competencyId?: string): Promise<number> {
    return await this.endorsementRepository.getAverageRating(personId, competencyId);
  }
}
