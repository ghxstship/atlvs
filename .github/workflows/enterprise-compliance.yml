name: Enterprise Compliance Check

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  compliance:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        
    - name: Install dependencies
      run: npm ci
        
    - name: Run All Compliance Checkpoints
      run: |
        echo "üîç Running Enterprise Compliance Audit..."
        
        # Make all scripts executable
        chmod +x scripts/*.sh
        
        # Run all checkpoints
        ./scripts/checkpoint1-final-audit.sh || exit 1
        ./scripts/checkpoint2-final-audit.sh || exit 1
        ./scripts/checkpoint3-accurate-audit.sh || exit 1
        ./scripts/checkpoint4-final-audit.sh || exit 1
        ./scripts/checkpoint5-final-audit.sh || exit 1
        ./scripts/checkpoint6-backend-audit.sh || exit 1
        ./scripts/checkpoint7-supabase-audit.sh || exit 1
        ./scripts/checkpoint8-api-audit.sh || exit 1
        ./scripts/checkpoint9-business-logic-audit.sh || exit 1
        
        echo "‚úÖ All checkpoints passed!"
    
    - name: TypeScript Check
      run: |
        cd apps/web
        npx tsc --noEmit || true
        
    - name: Lint Check
      run: |
        npm run lint || true
        
    - name: Check for violations
      if: failure()
      run: |
        echo "‚ùå BLOCKED: Enterprise compliance violations detected!"
        echo "This PR/push cannot proceed until 100% compliance is achieved."
        echo "Run locally: npm run audit:enterprise && npm run fix:enterprise"
        exit 1
    
    - name: Success - 100% Compliant
      if: success()
      run: |
        echo "‚úÖ 100% Enterprise Compliance Achieved!"
        echo "All checkpoints passed with zero violations."

    - name: Block legacy UI imports
      run: |
        if grep -r "@ghxstship/ui" apps/web --include="*.tsx" --include="*.ts"; then
          echo "‚ùå BLOCKED: Legacy @ghxstship/ui imports detected"
          exit 1
        fi
        echo "‚úÖ No legacy UI imports found"

    - name: Block shadow components
      run: |
        SHADOW_COMPONENTS=$(find apps/web -name "*.tsx" -path "*/components/ui/*" ! -path "*/UnifiedDesignSystem.tsx" | grep -E "(Button|Card|Badge|Input|Modal|Drawer)" || true)
        if [ -n "$SHADOW_COMPONENTS" ]; then
          echo "‚ùå BLOCKED: Shadow UI components detected:"
          echo "$SHADOW_COMPONENTS"
          exit 1
        fi
        echo "‚úÖ No shadow components found"

    - name: Block hardcoded colors
      run: |
        HARDCODED_COLORS=$(find apps/web -name "*.tsx" -o -name "*.ts" | xargs grep -E "(#[0-9a-fA-F]{3,6})" | grep -v "UnifiedDesignSystem\|tailwind.config\|test" || true)
        if [ -n "$HARDCODED_COLORS" ]; then
          echo "‚ùå BLOCKED: Hardcoded colors detected:"
          echo "$HARDCODED_COLORS"
          exit 1
        fi
        echo "‚úÖ No hardcoded colors found"

    - name: Block security anti-patterns
      run: |
        SECURITY_ISSUES=$(find apps/web -name "*.tsx" -o -name "*.ts" | xargs grep -l "dangerouslySetInnerHTML\|eval(\|innerHTML\s*=" || true)
        if [ -n "$SECURITY_ISSUES" ]; then
          echo "‚ùå BLOCKED: Security anti-patterns detected:"
          echo "$SECURITY_ISSUES"
          exit 1
        fi
        echo "‚úÖ No security anti-patterns found"

    - name: Block mock data usage
      run: |
        MOCK_DATA=$(find apps/web -name "*.tsx" -o -name "*.ts" | xargs grep -l "mockData\|MOCK_\|fake.*data\|dummy.*data" | grep -v "test\|spec\|stories" || true)
        if [ -n "$MOCK_DATA" ]; then
          echo "‚ùå BLOCKED: Mock data usage detected:"
          echo "$MOCK_DATA"
          exit 1
        fi
        echo "‚úÖ No mock data usage found"

    - name: TypeScript validation
      run: |
        npx tsc --noEmit --skipLibCheck
        echo "‚úÖ TypeScript validation passed"

    - name: ESLint validation
      run: |
        npx eslint apps/web --ext .ts,.tsx --max-warnings 0
        echo "‚úÖ ESLint validation passed"

    - name: Accessibility validation
      run: |
        # Check for missing accessibility attributes
        ACCESSIBILITY_VIOLATIONS=$(find apps/web -name "*.tsx" | xargs grep -l "<button\|<input\|<select\|<a" | xargs grep -L "aria-label\|aria-describedby\|role=\|alt=" | head -5 || true)
        if [ -n "$ACCESSIBILITY_VIOLATIONS" ]; then
          echo "‚ö†Ô∏è WARNING: Files potentially missing accessibility attributes:"
          echo "$ACCESSIBILITY_VIOLATIONS"
        fi
        echo "‚úÖ Accessibility check completed"

    - name: Performance validation
      run: |
        # Bundle size check
        npm run build
        BUNDLE_SIZE=$(du -sh .next/static/chunks | cut -f1)
        echo "Bundle size: $BUNDLE_SIZE"
        echo "‚úÖ Performance validation completed"

    - name: Generate compliance report
      if: always()
      run: |
        echo "# Enterprise Compliance Report" > compliance-report.md
        echo "" >> compliance-report.md
        echo "**Generated:** $(date)" >> compliance-report.md
        echo "**Commit:** ${{ github.sha }}" >> compliance-report.md
        echo "**Branch:** ${{ github.ref_name }}" >> compliance-report.md
    
    - name: Upload Compliance Report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: compliance-report
        path: reports/

  supabase-validation:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Validate Supabase Integration
      run: |
        echo "üîç Validating Supabase integration..."
        # Check for proper Supabase client usage
        if grep -r "createClientComponentClient" apps/web --include="*.tsx" --include="*.ts"; then
          echo "‚úÖ Supabase client integration verified"
        else
          echo "‚ùå Missing Supabase client integration"
          exit 1
        fi
    
    - name: Validate Database Schema
      run: |
        echo "üîç Validating database schema compliance..."
        # Check for proper database types
        if [ -f "apps/web/lib/supabase/types.ts" ]; then
          echo "‚úÖ Database types file exists"
        else
          echo "‚ùå Missing database types file"
          exit 1
        fi

  business-logic-validation:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Validate Business Logic
      run: |
        echo "üîç Validating business logic implementation..."
        # Check for workflow manager
        if [ -f "apps/web/lib/workflows/manager.ts" ]; then
          echo "‚úÖ Workflow manager exists"
        else
          echo "‚ùå Missing workflow manager"
          exit 1
        fi
    
    - name: API Routes Validation
      run: |
        echo "üîç Validating API routes..."
        # Check for proper error handling in API routes
        if grep -r "NextResponse.json" apps/web/app/api --include="*.ts"; then
          echo "‚úÖ API routes have proper response handling"
        else
          echo "‚ùå API routes missing proper response handling"
          exit 1
        fi
