name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '20'
  PNPM_VERSION: '10.15.1'

jobs:
  ci:
    name: Continuous Integration
    runs-on: ubuntu-latest
    env:
      VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
      VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
      VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
      SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
      SENTRY_ORG: ${{ secrets.SENTRY_ORG }}
      SENTRY_PROJECT: ${{ secrets.SENTRY_PROJECT }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
          
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        
      - name: Run linter
        run: pnpm lint
        
      - name: Check code formatting (Prettier)
        run: pnpm format:check
        continue-on-error: true
        
      - name: Type check
        run: pnpm typecheck
        
      - name: Security audit
        run: pnpm audit --audit-level=high
        continue-on-error: true
        
      - name: Build application
        run: pnpm build
        env:
          NODE_ENV: production

  preview:
    name: Preview Deployment
    runs-on: ubuntu-latest
    needs: ci
    if: ${{ github.event_name == 'pull_request' }}
    env:
      VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
      VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
      VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
      SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
      SENTRY_ORG: ${{ secrets.SENTRY_ORG }}
      SENTRY_PROJECT: ${{ secrets.SENTRY_PROJECT }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
          
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        
      - name: Build application
        run: pnpm build

      - name: Deploy Preview to Vercel
        if: ${{ env.VERCEL_TOKEN != '' && env.VERCEL_ORG_ID != '' && env.VERCEL_PROJECT_ID != '' }}
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: ./
          scope: ${{ secrets.VERCEL_ORG_ID }}
          github-comment: true

      - name: Create Sentry release (optional)
        if: ${{ env.SENTRY_AUTH_TOKEN != '' && env.SENTRY_ORG != '' && env.SENTRY_PROJECT != '' }}
        uses: getsentry/action-release@v1
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_ORG: ${{ secrets.SENTRY_ORG }}
          SENTRY_PROJECT: ${{ secrets.SENTRY_PROJECT }}
        with:
          environment: preview
          finalize: true

  production:
    name: Production Deployment
    runs-on: ubuntu-latest
    needs: ci
    if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
    env:
      VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
      VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
      VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
      SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
      SENTRY_ORG: ${{ secrets.SENTRY_ORG }}
      SENTRY_PROJECT: ${{ secrets.SENTRY_PROJECT }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
          
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        
      - name: Build application
        run: pnpm build

      - name: Deploy to Vercel Production
        if: ${{ env.VERCEL_TOKEN != '' && env.VERCEL_ORG_ID != '' && env.VERCEL_PROJECT_ID != '' }}
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--prod'
          working-directory: ./
          scope: ${{ secrets.VERCEL_ORG_ID }}

      - name: Create Sentry release (optional)
        if: ${{ env.SENTRY_AUTH_TOKEN != '' && env.SENTRY_ORG != '' && env.SENTRY_PROJECT != '' }}
        uses: getsentry/action-release@v1
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_ORG: ${{ secrets.SENTRY_ORG }}
          SENTRY_PROJECT: ${{ secrets.SENTRY_PROJECT }}
        with:
          environment: production
          finalize: true

  smoke:
    name: Smoke Tests
    runs-on: ubuntu-latest
    needs: ci
    env:
      CI_BYPASS_TOKEN: ${{ secrets.CI_BYPASS_TOKEN }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
          
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        
      - name: Build all packages
        run: pnpm -r run build
      - name: Start web and smoke test
        run: |
          pnpm --filter web start -- -p 3000 &
          sleep 5
          # Health
          curl -sf http://localhost:3000/api/v1/health
          # Programs
          curl -sf -H "x-ci-bypass: $CI_BYPASS_TOKEN" -H "x-org-id: ci-org" http://localhost:3000/api/v1/programs
          # Pipeline stages
          curl -sf -H "x-ci-bypass: $CI_BYPASS_TOKEN" -H "x-org-id: ci-org" http://localhost:3000/api/v1/pipeline/stages
          # Companies
          curl -sf -H "x-ci-bypass: $CI_BYPASS_TOKEN" -H "x-org-id: ci-org" http://localhost:3000/api/v1/companies
          # Marketplace listings
          curl -sf -H "x-ci-bypass: $CI_BYPASS_TOKEN" -H "x-org-id: ci-org" http://localhost:3000/api/v1/marketplace/listings
          # Marketplace vendors
          curl -sf -H "x-ci-bypass: $CI_BYPASS_TOKEN" -H "x-org-id: ci-org" http://localhost:3000/api/v1/marketplace/vendors
          # Marketplace catalog items
          curl -sf -H "x-ci-bypass: $CI_BYPASS_TOKEN" -H "x-org-id: ci-org" "http://localhost:3000/api/v1/marketplace/catalog-items"
          # GraphQL health
          curl -sf -H "Content-Type: application/json" -H "x-ci-bypass: $CI_BYPASS_TOKEN" -H "x-org-id: ci-org" \
            -d '{"query":"{ health { status } }"}' \
            http://localhost:3000/api/v1/graphql
          # GraphQL listings query
          curl -sf -H "Content-Type: application/json" -H "x-ci-bypass: $CI_BYPASS_TOKEN" -H "x-org-id: ci-org" \
            -d '{"query":"{ listings { id title status } }"}' \
            http://localhost:3000/api/v1/graphql
          # GraphQL vendors query
          curl -sf -H "Content-Type: application/json" -H "x-ci-bypass: $CI_BYPASS_TOKEN" -H "x-org-id: ci-org" \
            -d '{"query":"{ vendors { id name status } }"}' \
            http://localhost:3000/api/v1/graphql
          # GraphQL catalog items query
          curl -sf -H "Content-Type: application/json" -H "x-ci-bypass: $CI_BYPASS_TOKEN" -H "x-org-id: ci-org" \
            -d '{"query":"{ catalogItems { id title status } }"}' \
            http://localhost:3000/api/v1/graphql
          # Run integration tests (expect server on :3000)
          pnpm --filter web test
      - name: Stop server
        if: always()
        run: |
          pkill -f "next start" || true
