name: Performance Testing

on:
  pull_request:
    paths:
      - 'apps/web/**'
      - 'packages/ui/**'
  push:
    branches: [main]
    paths:
      - 'apps/web/**'
      - 'packages/ui/**'

jobs:
  lighthouse-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build
        env:
          NODE_ENV: production

      - name: Run Lighthouse CI
        run: npx lhci autorun
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Lighthouse reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: lighthouse-reports
          path: .lighthouseci/

      - name: Comment PR with Lighthouse results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');

            // Read Lighthouse CI manifest
            let manifestContent = '';
            try {
              manifestContent = fs.readFileSync('.lighthouseci/manifest.json', 'utf8');
              const manifest = JSON.parse(manifestContent);

              let comment = `## 📊 Performance Test Results\n\n`;

              // Process each URL's results
              manifest.forEach((entry, index) => {
                const url = entry.url;
                const summary = entry.summary;

                comment += `### ${url.replace('http://localhost:3000', '') || '/'}\n`;
                comment += `**Performance:** ${Math.round(summary.performance * 100)}/100\n`;
                comment += `**Accessibility:** ${Math.round(summary.accessibility * 100)}/100\n`;
                comment += `**SEO:** ${Math.round(summary.seo * 100)}/100\n`;
                comment += `**Best Practices:** ${Math.round(summary['best-practices'] * 100)}/100\n\n`;

                // Check for failures
                const failedAudits = [];
                if (summary.performance < 0.90) failedAudits.push('Performance');
                if (summary.accessibility < 0.95) failedAudits.push('Accessibility');
                if (summary.seo < 0.95) failedAudits.push('SEO');
                if (summary['best-practices'] < 0.95) failedAudits.push('Best Practices');

                if (failedAudits.length > 0) {
                  comment += `⚠️ **Failed thresholds:** ${failedAudits.join(', ')}\n\n`;
                }
              });

              comment += `📋 [View Full Reports](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})\n`;

              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            } catch (error) {
              console.error('Failed to read Lighthouse reports:', error);
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: `## 📊 Performance Test Results\n\n❌ Failed to generate performance report. Check the action logs for details.`
              });
            }

      - name: Check performance budgets
        run: |
          if [ -f ".lighthouseci/manifest.json" ]; then
            # Check if any audits failed their budgets
            FAILED=$(npx lhci assert --config lighthouserc.json 2>&1 | grep -c "failed\|error" || true)
            if [ "$FAILED" -gt 0 ]; then
              echo "Performance budget violations detected"
              npx lhci assert --config lighthouserc.json
              exit 1
            else
              echo "All performance budgets passed!"
            fi
          else
            echo "Lighthouse manifest not found"
            exit 1
          fi
