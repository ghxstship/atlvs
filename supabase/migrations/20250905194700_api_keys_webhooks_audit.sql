-- API Keys table
create table if not exists public.api_keys (
  id uuid primary key,
  organization_id uuid not null,
  name text not null,
  hash text not null unique,
  prefix text not null check (prefix in ('sk_live','sk_test')),
  scopes text[] not null default '{}',
  created_at timestamptz not null default now(),
  updated_at timestamptz not null default now(),
  last_used_at timestamptz,
  expires_at timestamptz,
  active boolean not null default true
);

comment on table public.api_keys is 'Hashed API keys per organization for partner access';
create index if not exists api_keys_org_idx on public.api_keys (organization_id);
create index if not exists api_keys_active_idx on public.api_keys (active);

alter table public.api_keys enable row level security;
-- Lock down by default; app will use service role for management
create policy api_keys_no_select on public.api_keys for select using (false);
create policy api_keys_no_modify on public.api_keys for all using (false) with check (false);

-- Audit Logs table
create table if not exists public.audit_logs (
  id bigint generated by default as identity primary key,
  occurred_at timestamptz not null default now(),
  actor_user_id uuid,
  organization_id uuid not null,
  project_id uuid,
  action text not null,
  entity_type text,
  entity_id text,
  meta jsonb
);

create index if not exists audit_logs_org_idx on public.audit_logs (organization_id desc, occurred_at desc);
create index if not exists audit_logs_project_idx on public.audit_logs (project_id desc, occurred_at desc);

alter table public.audit_logs enable row level security;
-- No direct select by clients; expose via services as needed
create policy audit_logs_no_select on public.audit_logs for select using (false);
create policy audit_logs_service_inserts on public.audit_logs for insert to service_role with check (true);

-- Webhook subscriptions
create table if not exists public.webhook_subscriptions (
  id uuid primary key,
  organization_id uuid not null,
  url text not null,
  secret text not null,
  event_names text[] not null,
  active boolean not null default true,
  created_at timestamptz not null default now()
);

create index if not exists webhook_subs_org_idx on public.webhook_subscriptions (organization_id);
create index if not exists webhook_subs_active_idx on public.webhook_subscriptions (active);

alter table public.webhook_subscriptions enable row level security;
create policy webhook_subs_no_select on public.webhook_subscriptions for select using (false);
create policy webhook_subs_no_modify on public.webhook_subscriptions for all using (false) with check (false);

-- Webhook deliveries
create table if not exists public.webhook_deliveries (
  id uuid primary key,
  subscription_id uuid not null references public.webhook_subscriptions(id) on delete cascade,
  event_name text not null,
  payload jsonb not null,
  status text not null check (status in ('pending','success','failed')),
  attempt int not null default 0,
  last_error text,
  delivered_at timestamptz
);

create index if not exists webhook_deliveries_sub_idx on public.webhook_deliveries (subscription_id);
create index if not exists webhook_deliveries_status_idx on public.webhook_deliveries (status);

alter table public.webhook_deliveries enable row level security;
create policy webhook_deliveries_no_select on public.webhook_deliveries for select using (false);
create policy webhook_deliveries_service_write on public.webhook_deliveries for all to service_role using (true) with check (true);

-- Triggers to maintain updated_at
create or replace function public.set_updated_at()
returns trigger as $$
begin
  new.updated_at = now();
  return new;
end;
$$ language plpgsql;

create trigger set_api_keys_updated_at before update on public.api_keys
for each row execute procedure public.set_updated_at();
